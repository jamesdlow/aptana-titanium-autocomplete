/**
 * The Android.Calendar module provides proxies and methods for accessing the native Android calendar functionality.
 * @since 1.5
 */
function Titanium_Android_Calendar() {
	/**
	 * Array of Titanium.Android.Calendar.Alert objects representing all alerts.
	 * @alias Titanium_Android_Calendar.allAlerts
	 * @property {Array}
	 */
	this.allAlerts = []
	/**
	 * Get the Array of Titanium.Android.Calendar.Alert objects representing all alerts.
	 * @alias Titanium_Android_Calendar.getAllAlerts
	 * @return {Array}
	 */
	this.getAllAlerts = function() { return this.allAlerts; }
	/**
	 * Set the Array of Titanium.Android.Calendar.Alert objects representing all alerts.
	 * @param {Array} value New value to set.
	 * @alias Titanium_Android_Calendar.setAllAlerts
	 */
	this.setAllAlerts = function(value) { this.allAlerts = value; }
	/**
	 * Array of Titanium.Android.Calendar.Calendar objects representing all the calendars known to the native calendar app.
	 * @alias Titanium_Android_Calendar.allCalendars
	 * @property {Array}
	 */
	this.allCalendars = []
	/**
	 * Get the Array of Titanium.Android.Calendar.Calendar objects representing all the calendars known to the native calendar app.
	 * @alias Titanium_Android_Calendar.getAllCalendars
	 * @return {Array}
	 */
	this.getAllCalendars = function() { return this.allCalendars; }
	/**
	 * Set the Array of Titanium.Android.Calendar.Calendar objects representing all the calendars known to the native calendar app.
	 * @param {Array} value New value to set.
	 * @alias Titanium_Android_Calendar.setAllCalendars
	 */
	this.setAllCalendars = function(value) { this.allCalendars = value; }
	/**
	 * Array of Titanium.Android.Calendar.Calendar objects representing calendars selected within the native calendar app. This may be a subset of allCalendars; for example, the native calendar application may know -- via your Gooogle account -- about calendars that you have access to but have not selected to be displayed in the native calendar app.
	 * @alias Titanium_Android_Calendar.selectableCalendars
	 * @property {Array}
	 */
	this.selectableCalendars = []
	/**
	 * Get the Array of Titanium.Android.Calendar.Calendar objects representing calendars selected within the native calendar app. This may be a subset of allCalendars; for example, the native calendar application may know -- via your Gooogle account -- about calendars that you have access to but have not selected to be displayed in the native calendar app.
	 * @alias Titanium_Android_Calendar.getSelectableCalendars
	 * @return {Array}
	 */
	this.getSelectableCalendars = function() { return this.selectableCalendars; }
	/**
	 * Set the Array of Titanium.Android.Calendar.Calendar objects representing calendars selected within the native calendar app. This may be a subset of allCalendars; for example, the native calendar application may know -- via your Gooogle account -- about calendars that you have access to but have not selected to be displayed in the native calendar app.
	 * @param {Array} value New value to set.
	 * @alias Titanium_Android_Calendar.setSelectableCalendars
	 */
	this.setSelectableCalendars = function(value) { this.selectableCalendars = value; }
	/**
	 * add an event listener for the instance to receive view triggered events
	 * @param {String} name name of the event
	 * @param {Function} callback callback function to invoke when the event is fired
	 * @alias Titanium_Android_Calendar.addEventListener
	 */
	this.addEventListener = function addEventListener(name,callback) { }
	/**
	 * create and return an instance of Titanium.Android.Calendar.Alert
	 * @param {Object} [parameters] (optional) a dictionary object properties defined in <a href="Titanium.Android.Calendar.Alert.html">Titanium.Android.Calendar.Alert</a>
	 * @alias Titanium_Android_Calendar.createAlert
	 * @return {BLANK}
	 */
	this.createAlert = function createAlert(parameters) { return new BLANK(); }
	/**
	 * create and return an instance of Titanium.Android.Calendar.Calendar
	 * @param {Object} [parameters] (optional) a dictionary object properties defined in <a href="Titanium.Android.Calendar.Calendar.html">Titanium.Android.Calendar.Calendar</a>
	 * @alias Titanium_Android_Calendar.createCalendar
	 * @return {Titanium_Android_Calendar}
	 */
	this.createCalendar = function createCalendar(parameters) { return new Titanium_Android_Calendar(); }
	/**
	 * create and return an instance of Titanium.Android.Calendar.Event
	 * @param {Object} [parameters] (optional) a dictionary object properties defined in <a href="Titanium.Android.Calendar.Event.html">Titanium.Android.Calendar.Event</a>
	 * @alias Titanium_Android_Calendar.createEvent
	 * @return {BLANK}
	 */
	this.createEvent = function createEvent(parameters) { return new BLANK(); }
	/**
	 * create and return an instance of Titanium.Android.Calendar.Reminder
	 * @param {Object} [parameters] (optional) a dictionary object properties defined in <a href="Titanium.Android.Calendar.Reminder.html">Titanium.Android.Calendar.Reminder</a>
	 * @alias Titanium_Android_Calendar.createReminder
	 * @return {BLANK}
	 */
	this.createReminder = function createReminder(parameters) { return new BLANK(); }
	/**
	 * fire a synthesized event to the views listener
	 * @param {String} name name of the event
	 * @param {Object} event event object
	 * @alias Titanium_Android_Calendar.fireEvent
	 */
	this.fireEvent = function fireEvent(name,event) { }
	/**
	 * Returns the Titanium.Android.Calendar.Calendar object specified by the given integer id.
	 * @param {Integer} id The system id of the calendar to be retrieved.
	 * @alias Titanium_Android_Calendar.getCalendarById
	 * @return {Object}
	 */
	this.getCalendarById = function getCalendarById(id) { return {}; }
	/**
	 * remove a previously added event listener
	 * @param {String} name name of the event
	 * @param {Function} callback callback function passed in addEventListener
	 * @alias Titanium_Android_Calendar.removeEventListener
	 */
	this.removeEventListener = function removeEventListener(name,callback) { }
};

/**
 * An object which represents a single alert for an event in an Android calendar.
 * @since 1.5
 */
function Titanium_Android_Calendar_Alert() {
	/**
	 * The date/time at which the alert's alarm is triggered.
	 * @alias Titanium_Android_Calendar_Alert.alarmTime
	 * @property {Date}
	 */
	this.alarmTime = new Date()
	/**
	 * Get the The date/time at which the alert's alarm is triggered.
	 * @alias Titanium_Android_Calendar_Alert.getAlarmTime
	 * @return {Date}
	 */
	this.getAlarmTime = function() { return this.alarmTime; }
	/**
	 * Set the The date/time at which the alert's alarm is triggered.
	 * @param {Date} value New value to set.
	 * @alias Titanium_Android_Calendar_Alert.setAlarmTime
	 */
	this.setAlarmTime = function(value) { this.alarmTime = value; }
	/**
	 * The date/time at which the corresponding event begins.
	 * @alias Titanium_Android_Calendar_Alert.begin
	 * @property {Date}
	 */
	this.begin = new Date()
	/**
	 * Get the The date/time at which the corresponding event begins.
	 * @alias Titanium_Android_Calendar_Alert.getBegin
	 * @return {Date}
	 */
	this.getBegin = function() { return this.begin; }
	/**
	 * Set the The date/time at which the corresponding event begins.
	 * @param {Date} value New value to set.
	 * @alias Titanium_Android_Calendar_Alert.setBegin
	 */
	this.setBegin = function(value) { this.begin = value; }
	/**
	 * The date/time at which the corresponding event ends.
	 * @alias Titanium_Android_Calendar_Alert.end
	 * @property {Date}
	 */
	this.end = new Date()
	/**
	 * Get the The date/time at which the corresponding event ends.
	 * @alias Titanium_Android_Calendar_Alert.getEnd
	 * @return {Date}
	 */
	this.getEnd = function() { return this.end; }
	/**
	 * Set the The date/time at which the corresponding event ends.
	 * @param {Date} value New value to set.
	 * @alias Titanium_Android_Calendar_Alert.setEnd
	 */
	this.setEnd = function(value) { this.end = value; }
	/**
	 * The integer id of the event for which the alert is set.
	 * @alias Titanium_Android_Calendar_Alert.eventId
	 * @property {Integer}
	 */
	this.eventId = 0
	/**
	 * Get the The integer id of the event for which the alert is set.
	 * @alias Titanium_Android_Calendar_Alert.getEventId
	 * @return {Integer}
	 */
	this.getEventId = function() { return this.eventId; }
	/**
	 * Set the The integer id of the event for which the alert is set.
	 * @param {Integer} value New value to set.
	 * @alias Titanium_Android_Calendar_Alert.setEventId
	 */
	this.setEventId = function(value) { this.eventId = value; }
	/**
	 * The id of the alert.
	 * @alias Titanium_Android_Calendar_Alert.id
	 * @property {String}
	 */
	this.id = ''
	/**
	 * Get the The id of the alert.
	 * @alias Titanium_Android_Calendar_Alert.getId
	 * @return {String}
	 */
	this.getId = function() { return this.id; }
	/**
	 * Set the The id of the alert.
	 * @param {String} value New value to set.
	 * @alias Titanium_Android_Calendar_Alert.setId
	 */
	this.setId = function(value) { this.id = value; }
	/**
	 * The minutes before the event when the alert should trigger.
	 * @alias Titanium_Android_Calendar_Alert.minutes
	 * @property {Integer}
	 */
	this.minutes = 0
	/**
	 * Get the The minutes before the event when the alert should trigger.
	 * @alias Titanium_Android_Calendar_Alert.getMinutes
	 * @return {Integer}
	 */
	this.getMinutes = function() { return this.minutes; }
	/**
	 * Set the The minutes before the event when the alert should trigger.
	 * @param {Integer} value New value to set.
	 * @alias Titanium_Android_Calendar_Alert.setMinutes
	 */
	this.setMinutes = function(value) { this.minutes = value; }
	/**
	 * The current state of the alert.  Possible values are the STATE_ constants in Titanium.Android.Calendar.
	 * @alias Titanium_Android_Calendar_Alert.state
	 * @property {Integer}
	 */
	this.state = 0
	/**
	 * Get the The current state of the alert.  Possible values are the STATE_ constants in Titanium.Android.Calendar.
	 * @alias Titanium_Android_Calendar_Alert.getState
	 * @return {Integer}
	 */
	this.getState = function() { return this.state; }
	/**
	 * Set the The current state of the alert.  Possible values are the STATE_ constants in Titanium.Android.Calendar.
	 * @param {Integer} value New value to set.
	 * @alias Titanium_Android_Calendar_Alert.setState
	 */
	this.setState = function(value) { this.state = value; }
};

/**
 * An object which represents a single calendar in Android.
 * @since 1.5
 */
function Titanium_Android_Calendar_Calendar() {
	/**
	 * Whether the calendar is hidden.
	 * @alias Titanium_Android_Calendar_Calendar.hidden
	 * @property {Boolean}
	 */
	this.hidden = false
	/**
	 * Get the Whether the calendar is hidden.
	 * @alias Titanium_Android_Calendar_Calendar.getHidden
	 * @return {Boolean}
	 */
	this.getHidden = function() { return this.hidden; }
	/**
	 * Set the Whether the calendar is hidden.
	 * @param {Boolean} value New value to set.
	 * @alias Titanium_Android_Calendar_Calendar.setHidden
	 */
	this.setHidden = function(value) { this.hidden = value; }
	/**
	 * The id of the calendar.
	 * @alias Titanium_Android_Calendar_Calendar.id
	 * @property {String}
	 */
	this.id = ''
	/**
	 * Get the The id of the calendar.
	 * @alias Titanium_Android_Calendar_Calendar.getId
	 * @return {String}
	 */
	this.getId = function() { return this.id; }
	/**
	 * Set the The id of the calendar.
	 * @param {String} value New value to set.
	 * @alias Titanium_Android_Calendar_Calendar.setId
	 */
	this.setId = function(value) { this.id = value; }
	/**
	 * The display name of the calendar.
	 * @alias Titanium_Android_Calendar_Calendar.name
	 * @property {String}
	 */
	this.name = ''
	/**
	 * Get the The display name of the calendar.
	 * @alias Titanium_Android_Calendar_Calendar.getName
	 * @return {String}
	 */
	this.getName = function() { return this.name; }
	/**
	 * Set the The display name of the calendar.
	 * @param {String} value New value to set.
	 * @alias Titanium_Android_Calendar_Calendar.setName
	 */
	this.setName = function(value) { this.name = value; }
	/**
	 * Whether the calendar is selected.
	 * @alias Titanium_Android_Calendar_Calendar.selected
	 * @property {Boolean}
	 */
	this.selected = false
	/**
	 * Get the Whether the calendar is selected.
	 * @alias Titanium_Android_Calendar_Calendar.getSelected
	 * @return {Boolean}
	 */
	this.getSelected = function() { return this.selected; }
	/**
	 * Set the Whether the calendar is selected.
	 * @param {Boolean} value New value to set.
	 * @alias Titanium_Android_Calendar_Calendar.setSelected
	 */
	this.setSelected = function(value) { this.selected = value; }
	/**
	 * Add an event to the calendar. Returns the created Titanium.Android.Calendar.Event.
	 * @param {Object} properties An object defining the properties of the event.  These correspond to properties of <a href="Titanium.Android.Calendar.Event.html">Titanium.Android.Calendar.Event</a>.
	 * @alias Titanium_Android_Calendar_Calendar.createEvent
	 * @return {BLANK}
	 */
	this.createEvent = function createEvent(properties) { return new BLANK(); }
	/**
	 * Returns the Titanium.Android.Calendar.Event object for the event with the given integer id.
	 * @param {Integer} id The integer id of the event to return.
	 * @alias Titanium_Android_Calendar_Calendar.getEventById
	 * @return {Object}
	 */
	this.getEventById = function getEventById(id) { return {}; }
	/**
	 * Returns an array of Titanium.Android.Calendar.Event objects with all events in the given date range.
	 * @param {Date} date1 The start date.
	 * @param {Date} date2 The end date.
	 * @alias Titanium_Android_Calendar_Calendar.getEventsBetweenDates
	 * @return {Array}
	 */
	this.getEventsBetweenDates = function getEventsBetweenDates(date1,date2) { return []; }
	/**
	 * Returns an array of Titanium.Android.Calendar.Event objects with all events on the given date.
	 * @param {Integer} year The year of the desired date.
	 * @param {Integer} month The month of the desired date.  The month is zero-based, therefore January is 0 and December is 11.
	 * @param {Integer} day The day for which events should be returned.
	 * @alias Titanium_Android_Calendar_Calendar.getEventsInDate
	 * @return {Array}
	 */
	this.getEventsInDate = function getEventsInDate(year,month,day) { return []; }
	/**
	 * Returns an array of Titanium.Android.Calendar.Event objects with all events in the given month.
	 * @param {Integer} year The year of the desired month.
	 * @param {Integer} month The month for which events should be returned.  The month is zero-based, therefore January is 0 and December is 11.
	 * @alias Titanium_Android_Calendar_Calendar.getEventsInMonth
	 * @return {Array}
	 */
	this.getEventsInMonth = function getEventsInMonth(year,month) { return []; }
	/**
	 * Returns an array of Titanium.Android.Calendar.Event objects with all events in the given year.
	 * @param {Integer} year The year for which all events should be returned.
	 * @alias Titanium_Android_Calendar_Calendar.getEventsInYear
	 * @return {Array}
	 */
	this.getEventsInYear = function getEventsInYear(year) { return []; }
};

/**
 * An object which represents a single event in an Android calendar.
 * @since 1.5
 */
function Titanium_Android_Calendar_Event() {
	/**
	 * An array of Titanium.Android.Calendar.Alert objects which are the alerts - if any - for this event.
	 * @alias Titanium_Android_Calendar_Event.alerts
	 * @property {Array}
	 */
	this.alerts = []
	/**
	 * Get the An array of Titanium.Android.Calendar.Alert objects which are the alerts - if any - for this event.
	 * @alias Titanium_Android_Calendar_Event.getAlerts
	 * @return {Array}
	 */
	this.getAlerts = function() { return this.alerts; }
	/**
	 * Set the An array of Titanium.Android.Calendar.Alert objects which are the alerts - if any - for this event.
	 * @param {Array} value New value to set.
	 * @alias Titanium_Android_Calendar_Event.setAlerts
	 */
	this.setAlerts = function(value) { this.alerts = value; }
	/**
	 * Whether the event is all day.
	 * @alias Titanium_Android_Calendar_Event.allDay
	 * @property {Boolean}
	 */
	this.allDay = false
	/**
	 * Get the Whether the event is all day.
	 * @alias Titanium_Android_Calendar_Event.getAllDay
	 * @return {Boolean}
	 */
	this.getAllDay = function() { return this.allDay; }
	/**
	 * Set the Whether the event is all day.
	 * @param {Boolean} value New value to set.
	 * @alias Titanium_Android_Calendar_Event.setAllDay
	 */
	this.setAllDay = function(value) { this.allDay = value; }
	/**
	 * The date/time at which the event begins.
	 * @alias Titanium_Android_Calendar_Event.begin
	 * @property {Date}
	 */
	this.begin = new Date()
	/**
	 * Get the The date/time at which the event begins.
	 * @alias Titanium_Android_Calendar_Event.getBegin
	 * @return {Date}
	 */
	this.getBegin = function() { return this.begin; }
	/**
	 * Set the The date/time at which the event begins.
	 * @param {Date} value New value to set.
	 * @alias Titanium_Android_Calendar_Event.setBegin
	 */
	this.setBegin = function(value) { this.begin = value; }
	/**
	 * The event description.
	 * @alias Titanium_Android_Calendar_Event.description
	 * @property {String}
	 */
	this.description = ''
	/**
	 * Get the The event description.
	 * @alias Titanium_Android_Calendar_Event.getDescription
	 * @return {String}
	 */
	this.getDescription = function() { return this.description; }
	/**
	 * Set the The event description.
	 * @param {String} value New value to set.
	 * @alias Titanium_Android_Calendar_Event.setDescription
	 */
	this.setDescription = function(value) { this.description = value; }
	/**
	 * The date/time at which the event ends.
	 * @alias Titanium_Android_Calendar_Event.end
	 * @property {Date}
	 */
	this.end = new Date()
	/**
	 * Get the The date/time at which the event ends.
	 * @alias Titanium_Android_Calendar_Event.getEnd
	 * @return {Date}
	 */
	this.getEnd = function() { return this.end; }
	/**
	 * Set the The date/time at which the event ends.
	 * @param {Date} value New value to set.
	 * @alias Titanium_Android_Calendar_Event.setEnd
	 */
	this.setEnd = function(value) { this.end = value; }
	/**
	 * An object containing extended properties of the event.
	 * @alias Titanium_Android_Calendar_Event.extendedProperties
	 * @property {Object}
	 */
	this.extendedProperties = {}
	/**
	 * Get the An object containing extended properties of the event.
	 * @alias Titanium_Android_Calendar_Event.getExtendedProperties
	 * @return {Object}
	 */
	this.getExtendedProperties = function() { return this.extendedProperties; }
	/**
	 * Set the An object containing extended properties of the event.
	 * @param {Object} value New value to set.
	 * @alias Titanium_Android_Calendar_Event.setExtendedProperties
	 */
	this.setExtendedProperties = function(value) { this.extendedProperties = value; }
	/**
	 * Whether an alarm is scheduled for the event.
	 * @alias Titanium_Android_Calendar_Event.hasAlarm
	 * @property {Boolean}
	 */
	this.hasAlarm = false
	/**
	 * Get the Whether an alarm is scheduled for the event.
	 * @alias Titanium_Android_Calendar_Event.getHasAlarm
	 * @return {Boolean}
	 */
	this.getHasAlarm = function() { return this.hasAlarm; }
	/**
	 * Set the Whether an alarm is scheduled for the event.
	 * @param {Boolean} value New value to set.
	 * @alias Titanium_Android_Calendar_Event.setHasAlarm
	 */
	this.setHasAlarm = function(value) { this.hasAlarm = value; }
	/**
	 * 
	 * @alias Titanium_Android_Calendar_Event.hasExtendedProperties
	 * @property {Boolean}
	 */
	this.hasExtendedProperties = false
	/**
	 * Get the
	 * @alias Titanium_Android_Calendar_Event.getHasExtendedProperties
	 * @return {Boolean}
	 */
	this.getHasExtendedProperties = function() { return this.hasExtendedProperties; }
	/**
	 * Set the
	 * @param {Boolean} value New value to set.
	 * @alias Titanium_Android_Calendar_Event.setHasExtendedProperties
	 */
	this.setHasExtendedProperties = function(value) { this.hasExtendedProperties = value; }
	/**
	 * The id of the event.
	 * @alias Titanium_Android_Calendar_Event.id
	 * @property {String}
	 */
	this.id = ''
	/**
	 * Get the The id of the event.
	 * @alias Titanium_Android_Calendar_Event.getId
	 * @return {String}
	 */
	this.getId = function() { return this.id; }
	/**
	 * Set the The id of the event.
	 * @param {String} value New value to set.
	 * @alias Titanium_Android_Calendar_Event.setId
	 */
	this.setId = function(value) { this.id = value; }
	/**
	 * The event location.
	 * @alias Titanium_Android_Calendar_Event.location
	 * @property {String}
	 */
	this.location = ''
	/**
	 * Get the The event location.
	 * @alias Titanium_Android_Calendar_Event.getLocation
	 * @return {String}
	 */
	this.getLocation = function() { return this.location; }
	/**
	 * Set the The event location.
	 * @param {String} value New value to set.
	 * @alias Titanium_Android_Calendar_Event.setLocation
	 */
	this.setLocation = function(value) { this.location = value; }
	/**
	 * An array of Titanium.Android.Calendar.Reminder objects which are the reminders - if any - for this event.
	 * @alias Titanium_Android_Calendar_Event.reminders
	 * @property {Array}
	 */
	this.reminders = []
	/**
	 * Get the An array of Titanium.Android.Calendar.Reminder objects which are the reminders - if any - for this event.
	 * @alias Titanium_Android_Calendar_Event.getReminders
	 * @return {Array}
	 */
	this.getReminders = function() { return this.reminders; }
	/**
	 * Set the An array of Titanium.Android.Calendar.Reminder objects which are the reminders - if any - for this event.
	 * @param {Array} value New value to set.
	 * @alias Titanium_Android_Calendar_Event.setReminders
	 */
	this.setReminders = function(value) { this.reminders = value; }
	/**
	 * The status of the event.  Possible values are the STATUS constants in Titanium.Android.Calendar.
	 * @alias Titanium_Android_Calendar_Event.status
	 * @property {Integer}
	 */
	this.status = 0
	/**
	 * Get the The status of the event.  Possible values are the STATUS constants in Titanium.Android.Calendar.
	 * @alias Titanium_Android_Calendar_Event.getStatus
	 * @return {Integer}
	 */
	this.getStatus = function() { return this.status; }
	/**
	 * Set the The status of the event.  Possible values are the STATUS constants in Titanium.Android.Calendar.
	 * @param {Integer} value New value to set.
	 * @alias Titanium_Android_Calendar_Event.setStatus
	 */
	this.setStatus = function(value) { this.status = value; }
	/**
	 * The title string for the event.
	 * @alias Titanium_Android_Calendar_Event.title
	 * @property {String}
	 */
	this.title = ''
	/**
	 * Get the The title string for the event.
	 * @alias Titanium_Android_Calendar_Event.getTitle
	 * @return {String}
	 */
	this.getTitle = function() { return this.title; }
	/**
	 * Set the The title string for the event.
	 * @param {String} value New value to set.
	 * @alias Titanium_Android_Calendar_Event.setTitle
	 */
	this.setTitle = function(value) { this.title = value; }
	/**
	 * The event's visibility.  Possible values are the VISIBILITY constants in Titanium.Android.Calendar.
	 * @alias Titanium_Android_Calendar_Event.visibility
	 * @property {Integer}
	 */
	this.visibility = 0
	/**
	 * Get the The event's visibility.  Possible values are the VISIBILITY constants in Titanium.Android.Calendar.
	 * @alias Titanium_Android_Calendar_Event.getVisibility
	 * @return {Integer}
	 */
	this.getVisibility = function() { return this.visibility; }
	/**
	 * Set the The event's visibility.  Possible values are the VISIBILITY constants in Titanium.Android.Calendar.
	 * @param {Integer} value New value to set.
	 * @alias Titanium_Android_Calendar_Event.setVisibility
	 */
	this.setVisibility = function(value) { this.visibility = value; }
	/**
	 * create an alert for this event.  Pass a dictionary object containing attributes corresponding to properties of Titanium.Android.Calendar.Alert.  Returns the created alert.
	 * @param {Object} data Properties for the new alert, corresponding to properties of <a href="Titanium.Android.Calendar.Alert-object.html">Titanium.Android.Calendar.Alert</a>.
	 * @alias Titanium_Android_Calendar_Event.createAlert
	 * @return {Titanium_Android_Calendar_Alert}
	 */
	this.createAlert = function createAlert(data) { return new Titanium_Android_Calendar_Alert(); }
	/**
	 * create a reminder for this event.  Pass a dictionary object containing attributes corresponding to properties of Titanium.Android.Calendar.Reminder.  Returns the created Reminder.
	 * @param {Object} data Properties for the new reminder, corresponding to properties of <a href="Titanium.Android.Calendar.Reminder.html">Titanium.Android.Calendar.Reminder</a>.
	 * @alias Titanium_Android_Calendar_Event.createReminder
	 * @return {BLANK}
	 */
	this.createReminder = function createReminder(data) { return new BLANK(); }
	/**
	 * Returns the value of the given extended property key string.
	 * @param {String} name The name of the extended property whose value should be returned.
	 * @alias Titanium_Android_Calendar_Event.getExtendedProperty
	 * @return {String}
	 */
	this.getExtendedProperty = function getExtendedProperty(name) { return ''; }
	/**
	 * Set the value of the named extended property.
	 * @param {String} name The name of the extended property whose value should be set.
	 * @param {String} value The value to which to set the named extended property.
	 * @alias Titanium_Android_Calendar_Event.setExtendedProperty
	 */
	this.setExtendedProperty = function setExtendedProperty(name,value) { }
};

/**
 * An object which represents a single reminder for an event in an Android calendar.  Reminders should not be created directly, but rather by using the createReminder method of Titanium.Android.Calendar.Event.
 * @since 1.5
 */
function Titanium_Android_Calendar_Reminder() {
	/**
	 * The id of the reminder.
	 * @alias Titanium_Android_Calendar_Reminder.id
	 * @property {String}
	 */
	this.id = ''
	/**
	 * Get the The id of the reminder.
	 * @alias Titanium_Android_Calendar_Reminder.getId
	 * @return {String}
	 */
	this.getId = function() { return this.id; }
	/**
	 * Set the The id of the reminder.
	 * @param {String} value New value to set.
	 * @alias Titanium_Android_Calendar_Reminder.setId
	 */
	this.setId = function(value) { this.id = value; }
	/**
	 * The reminder method.  Possible values are the METHOD constants in Titanium.Android.Calendar.
	 * @alias Titanium_Android_Calendar_Reminder.method
	 * @property {Integer}
	 */
	this.method = 0
	/**
	 * Get the The reminder method.  Possible values are the METHOD constants in Titanium.Android.Calendar.
	 * @alias Titanium_Android_Calendar_Reminder.getMethod
	 * @return {Integer}
	 */
	this.getMethod = function() { return this.method; }
	/**
	 * Set the The reminder method.  Possible values are the METHOD constants in Titanium.Android.Calendar.
	 * @param {Integer} value New value to set.
	 * @alias Titanium_Android_Calendar_Reminder.setMethod
	 */
	this.setMethod = function(value) { this.method = value; }
	/**
	 * The minutes before the event when the reminder should occur.
	 * @alias Titanium_Android_Calendar_Reminder.minutes
	 * @property {Integer}
	 */
	this.minutes = 0
	/**
	 * Get the The minutes before the event when the reminder should occur.
	 * @alias Titanium_Android_Calendar_Reminder.getMinutes
	 * @return {Integer}
	 */
	this.getMinutes = function() { return this.minutes; }
	/**
	 * Set the The minutes before the event when the reminder should occur.
	 * @param {Integer} value New value to set.
	 * @alias Titanium_Android_Calendar_Reminder.setMinutes
	 */
	this.setMinutes = function(value) { this.minutes = value; }
};

/**
 * The Titanium binding of an Android Intent
 * @since 1.5
 */
function Titanium_Android_Intent() {
	/**
	 * An action constant from Titanium.Android
	 * @alias Titanium_Android_Intent.action
	 * @property {String}
	 */
	this.action = ''
	/**
	 * Get the An action constant from Titanium.Android
	 * @alias Titanium_Android_Intent.getAction
	 * @return {String}
	 */
	this.getAction = function() { return this.action; }
	/**
	 * Set the An action constant from Titanium.Android
	 * @param {String} value New value to set.
	 * @alias Titanium_Android_Intent.setAction
	 */
	this.setAction = function(value) { this.action = value; }
	/**
	 * The Java class name of the activity (packageName must also be set)
	 * @alias Titanium_Android_Intent.className
	 * @property {String}
	 */
	this.className = ''
	/**
	 * Get the The Java class name of the activity (packageName must also be set)
	 * @alias Titanium_Android_Intent.getClassName
	 * @return {String}
	 */
	this.getClassName = function() { return this.className; }
	/**
	 * Set the The Java class name of the activity (packageName must also be set)
	 * @param {String} value New value to set.
	 * @alias Titanium_Android_Intent.setClassName
	 */
	this.setClassName = function(value) { this.className = value; }
	/**
	 * The Intent's Data URI. See also Android's Intent.setData
	 * @alias Titanium_Android_Intent.data
	 * @property {String}
	 */
	this.data = ''
	/**
	 * Get the The Intent's Data URI. See also Android's Intent.setData
	 * @alias Titanium_Android_Intent.getData
	 * @return {String}
	 */
	this.getData = function() { return this.data; }
	/**
	 * Set the The Intent's Data URI. See also Android's Intent.setData
	 * @param {String} value New value to set.
	 * @alias Titanium_Android_Intent.setData
	 */
	this.setData = function(value) { this.data = value; }
	/**
	 * The fully-qualified Java package name of the activity
	 * @alias Titanium_Android_Intent.packageName
	 * @property {String}
	 */
	this.packageName = ''
	/**
	 * Get the The fully-qualified Java package name of the activity
	 * @alias Titanium_Android_Intent.getPackageName
	 * @return {String}
	 */
	this.getPackageName = function() { return this.packageName; }
	/**
	 * Set the The fully-qualified Java package name of the activity
	 * @param {String} value New value to set.
	 * @alias Titanium_Android_Intent.setPackageName
	 */
	this.setPackageName = function(value) { this.packageName = value; }
	/**
	 * The mime type for this Intent. See also Android's Intent.setType
	 * @alias Titanium_Android_Intent.type
	 * @property {String}
	 */
	this.type = ''
	/**
	 * Get the The mime type for this Intent. See also Android's Intent.setType
	 * @alias Titanium_Android_Intent.getType
	 * @return {String}
	 */
	this.getType = function() { return this.type; }
	/**
	 * Set the The mime type for this Intent. See also Android's Intent.setType
	 * @param {String} value New value to set.
	 * @alias Titanium_Android_Intent.setType
	 */
	this.setType = function(value) { this.type = value; }
	/**
	 * The URL to a Titanium Javascript Activity
	 * @alias Titanium_Android_Intent.url
	 * @property {String}
	 */
	this.url = ''
	/**
	 * Get the The URL to a Titanium Javascript Activity
	 * @alias Titanium_Android_Intent.getUrl
	 * @return {String}
	 */
	this.getUrl = function() { return this.url; }
	/**
	 * Set the The URL to a Titanium Javascript Activity
	 * @param {String} value New value to set.
	 * @alias Titanium_Android_Intent.setUrl
	 */
	this.setUrl = function(value) { this.url = value; }
	/**
	 * Add a category to this Intent. See the category constants in Titanium.Android.
	 * @param {String} name The category name. See the category constants in <a href="Titanium.Android-module.html">Titanium.Android</a>
	 * @alias Titanium_Android_Intent.addCategory
	 */
	this.addCategory = function addCategory(name) { }
	/**
	 * Get a boolean property from this Intent
	 * @param {String} name The boolean property to get
	 * @alias Titanium_Android_Intent.getBooleanExtra
	 * @return {Boolean}
	 */
	this.getBooleanExtra = function getBooleanExtra(name) { return false; }
	/**
	 * Get the Data URI from this Intent
	 * @alias Titanium_Android_Intent.getData
	 */
	this.getData = function getData() { }
	/**
	 * Get a double property from this Intent
	 * @param {String} name The double property to get
	 * @alias Titanium_Android_Intent.getDoubleExtra
	 * @return {Double}
	 */
	this.getDoubleExtra = function getDoubleExtra(name) { return 0.0; }
	/**
	 * Get a int property from this Intent
	 * @param {String} name The int property to get
	 * @alias Titanium_Android_Intent.getIntExtra
	 * @return {Integer}
	 */
	this.getIntExtra = function getIntExtra(name) { return 0; }
	/**
	 * Get a long property from this Intent
	 * @param {String} name The long property to get
	 * @alias Titanium_Android_Intent.getLongExtra
	 * @return {Integer}
	 */
	this.getLongExtra = function getLongExtra(name) { return 0; }
	/**
	 * Get a string property from this Intent
	 * @param {String} name The string property to get
	 * @alias Titanium_Android_Intent.getStringExtra
	 * @return {String}
	 */
	this.getStringExtra = function getStringExtra(name) { return ''; }
	/**
	 * Returns whether or not this Intent has a property
	 * @param {String} name The property name to check for
	 * @alias Titanium_Android_Intent.hasExtra
	 * @return {Boolean}
	 */
	this.hasExtra = function hasExtra(name) { return false; }
	/**
	 * Put an extra property on this Intent
	 * @param {String} name The property name
	 * @param {Object} value The property value
	 * @alias Titanium_Android_Intent.putExtra
	 */
	this.putExtra = function putExtra(name,value) { }
};

/**
 * The Titanium binding of an Android Service.  Can be used to start/stop the service directly and listen for service-specific events.  In the Javascript-based services you write, this can be referenced with Titanium.Android.currentService.  You can create an instance of the service with Titanium.Android.createService.
 * @since 1.5
 */
function Titanium_Android_Service() {
	/**
	 * (read-only) The Titanium.Android.Intent used to start or bind to the Service.
	 * @alias Titanium_Android_Service.intent
	 * @property {Intent}
	 */
	this.intent = {}
	/**
	 * Get the (read-only) The Titanium.Android.Intent used to start or bind to the Service.
	 * @alias Titanium_Android_Service.getIntent
	 * @return {Intent}
	 */
	this.getIntent = function() { return this.intent; }
	/**
	 * Set the (read-only) The Titanium.Android.Intent used to start or bind to the Service.
	 * @param {Intent} value New value to set.
	 * @alias Titanium_Android_Service.setIntent
	 */
	this.setIntent = function(value) { this.intent = value; }
	/**
	 * (read-only) A service can be started more than once -- this number (based on an incrementing integer) indicates which "start number" in the sequence the current service instance is.
	 * @alias Titanium_Android_Service.serviceInstanceId
	 * @property {Integer}
	 */
	this.serviceInstanceId = 0
	/**
	 * Get the (read-only) A service can be started more than once -- this number (based on an incrementing integer) indicates which "start number" in the sequence the current service instance is.
	 * @alias Titanium_Android_Service.getServiceInstanceId
	 * @return {Integer}
	 */
	this.getServiceInstanceId = function() { return this.serviceInstanceId; }
	/**
	 * Set the (read-only) A service can be started more than once -- this number (based on an incrementing integer) indicates which "start number" in the sequence the current service instance is.
	 * @param {Integer} value New value to set.
	 * @alias Titanium_Android_Service.setServiceInstanceId
	 */
	this.setServiceInstanceId = function(value) { this.serviceInstanceId = value; }
	/**
	 * Start the Service.  Effective only if this instance of Titanium.Android.Service was created with Titanium.Android.createService.
	 * @alias Titanium_Android_Service.start
	 */
	this.start = function start() { }
	/**
	 * Stop this running instance of the Service.
	 * @alias Titanium_Android_Service.stop
	 */
	this.stop = function stop() { }
};

/**
 * The BackgroundService is created by Titanium.App.iOS.registerBackgroundService.
 * @since 1.5
 */
function Titanium_App_iOS_BackgroundService() {
	/**
	 * add an event listener for the instance to receive view triggered events
	 * @param {String} name name of the event
	 * @param {Function} callback callback function to invoke when the event is fired
	 * @alias Titanium_App_iOS_BackgroundService.addEventListener
	 */
	this.addEventListener = function addEventListener(name,callback) { }
	/**
	 * fire a synthesized event to the views listener
	 * @param {String} name name of the event
	 * @param {Object} event event object
	 * @alias Titanium_App_iOS_BackgroundService.fireEvent
	 */
	this.fireEvent = function fireEvent(name,event) { }
	/**
	 * remove a previously added event listener
	 * @param {String} name name of the event
	 * @param {Function} callback callback function passed in addEventListener
	 * @alias Titanium_App_iOS_BackgroundService.removeEventListener
	 */
	this.removeEventListener = function removeEventListener(name,callback) { }
	/**
	 * stop the service from the current background session to conserve resources
	 * @alias Titanium_App_iOS_BackgroundService.stop
	 */
	this.stop = function stop() { }
	/**
	 * unregister the background service
	 * @alias Titanium_App_iOS_BackgroundService.unregister
	 */
	this.unregister = function unregister() { }
};

/**
 * The LocalNotification is created by Titanium.App.iOS.scheduleLocalNotification.
 * @since 1.5
 */
function Titanium_App_iOS_LocalNotification() {
	/**
	 * add an event listener for the instance to receive view triggered events
	 * @param {String} name name of the event
	 * @param {Function} callback callback function to invoke when the event is fired
	 * @alias Titanium_App_iOS_LocalNotification.addEventListener
	 */
	this.addEventListener = function addEventListener(name,callback) { }
	/**
	 * cancel the pending notification
	 * @alias Titanium_App_iOS_LocalNotification.cancel
	 */
	this.cancel = function cancel() { }
	/**
	 * fire a synthesized event to the views listener
	 * @param {String} name name of the event
	 * @param {Object} event event object
	 * @alias Titanium_App_iOS_LocalNotification.fireEvent
	 */
	this.fireEvent = function fireEvent(name,event) { }
	/**
	 * remove a previously added event listener
	 * @param {String} name name of the event
	 * @param {Function} callback callback function passed in addEventListener
	 * @alias Titanium_App_iOS_LocalNotification.removeEventListener
	 */
	this.removeEventListener = function removeEventListener(name,callback) { }
};

/**
 * An object which represents a group in the contacts database.
 * @since 1.4.0
 */
function Titanium_Contacts_Group() {
	/**
	 * The name of the group
	 * @alias Titanium_Contacts_Group.name
	 * @property {String}
	 */
	this.name = ''
	/**
	 * Get the The name of the group
	 * @alias Titanium_Contacts_Group.getName
	 * @return {String}
	 */
	this.getName = function() { return this.name; }
	/**
	 * Set the The name of the group
	 * @param {String} value New value to set.
	 * @alias Titanium_Contacts_Group.setName
	 */
	this.setName = function(value) { this.name = value; }
	/**
	 * Adds a person to the group
	 * @param {Object} person <a href="Titanium.Contacts.Person.html">Titanium.Contacts.Person</a> object to remove from the group
	 * @alias Titanium_Contacts_Group.add
	 */
	this.add = function add(person) { }
	/**
	 * The complete list of members of the group
	 * @alias Titanium_Contacts_Group.members
	 */
	this.members = function members() { }
	/**
	 * Removes a person from the group
	 * @param {Object} person <a href="Titanium.Contacts.Person.html">Titanium.Contacts.Person</a> object to remove from the group
	 * @alias Titanium_Contacts_Group.remove
	 */
	this.remove = function remove(person) { }
	/**
	 * A list of sorted members
	 * @param {Integer} sortBy Method for sorting.  Must be one of  <a href="Titanium.Contacts.CONTACTS_SORT_FIRST_NAME-property.html">Titanium.Contacts.CONTACTS_SORT_FIRST_NAME</a> or <a href="Titanium.Contacts.CONTACTS_SORT_LAST_NAME-property.html">Titanium.Contacts.CONTACTS_SORT_LAST_NAME</a>
	 * @alias Titanium_Contacts_Group.sortedMembers
	 */
	this.sortedMembers = function sortedMembers(sortBy) { }
};

/**
 * An object which represents a person in the contacts database.
 * @since 0.8
 */
function Titanium_Contacts_Person() {
	/**
	 * The addresses for the person.  Multi-value, valid labels are: home, work, other.  Values are dictionaries.
	 * @alias Titanium_Contacts_Person.address
	 * @property {Object}
	 */
	this.address = {}
	/**
	 * Get the The addresses for the person.  Multi-value, valid labels are: home, work, other.  Values are dictionaries.
	 * @alias Titanium_Contacts_Person.getAddress
	 * @return {Object}
	 */
	this.getAddress = function() { return this.address; }
	/**
	 * Set the The addresses for the person.  Multi-value, valid labels are: home, work, other.  Values are dictionaries.
	 * @param {Object} value New value to set.
	 * @alias Titanium_Contacts_Person.setAddress
	 */
	this.setAddress = function(value) { this.address = value; }
	/**
	 * The birthday of the person.  Single value, format is "yyyy-MM-dd'T'HH:mm:ss'.'SSS+0000"
	 * @alias Titanium_Contacts_Person.birthday
	 * @property {String}
	 */
	this.birthday = ''
	/**
	 * Get the The birthday of the person.  Single value, format is "yyyy-MM-dd'T'HH:mm:ss'.'SSS+0000"
	 * @alias Titanium_Contacts_Person.getBirthday
	 * @return {String}
	 */
	this.getBirthday = function() { return this.birthday; }
	/**
	 * Set the The birthday of the person.  Single value, format is "yyyy-MM-dd'T'HH:mm:ss'.'SSS+0000"
	 * @param {String} value New value to set.
	 * @alias Titanium_Contacts_Person.setBirthday
	 */
	this.setBirthday = function(value) { this.birthday = value; }
	/**
	 * The date the person was created in the database.  Single value, format is "yyyy-MM-dd'T'HH:mm:ss'.'SSS+0000", read-only
	 * @alias Titanium_Contacts_Person.created
	 * @property {String}
	 */
	this.created = ''
	/**
	 * Get the The date the person was created in the database.  Single value, format is "yyyy-MM-dd'T'HH:mm:ss'.'SSS+0000", read-only
	 * @alias Titanium_Contacts_Person.getCreated
	 * @return {String}
	 */
	this.getCreated = function() { return this.created; }
	/**
	 * Set the The date the person was created in the database.  Single value, format is "yyyy-MM-dd'T'HH:mm:ss'.'SSS+0000", read-only
	 * @param {String} value New value to set.
	 * @alias Titanium_Contacts_Person.setCreated
	 */
	this.setCreated = function(value) { this.created = value; }
	/**
	 * Dates associated with the person.  Multi-value, valid labels are: anniversary.  Values are strings of format "yyyy-MM-dd'T'HH:mm:ss'.'SSS+0000"
	 * @alias Titanium_Contacts_Person.date
	 * @property {Object}
	 */
	this.date = {}
	/**
	 * Get the Dates associated with the person.  Multi-value, valid labels are: anniversary.  Values are strings of format "yyyy-MM-dd'T'HH:mm:ss'.'SSS+0000"
	 * @alias Titanium_Contacts_Person.getDate
	 * @return {Object}
	 */
	this.getDate = function() { return this.date; }
	/**
	 * Set the Dates associated with the person.  Multi-value, valid labels are: anniversary.  Values are strings of format "yyyy-MM-dd'T'HH:mm:ss'.'SSS+0000"
	 * @param {Object} value New value to set.
	 * @alias Titanium_Contacts_Person.setDate
	 */
	this.setDate = function(value) { this.date = value; }
	/**
	 * The department of the person.  Single value
	 * @alias Titanium_Contacts_Person.department
	 * @property {String}
	 */
	this.department = ''
	/**
	 * Get the The department of the person.  Single value
	 * @alias Titanium_Contacts_Person.getDepartment
	 * @return {String}
	 */
	this.getDepartment = function() { return this.department; }
	/**
	 * Set the The department of the person.  Single value
	 * @param {String} value New value to set.
	 * @alias Titanium_Contacts_Person.setDepartment
	 */
	this.setDepartment = function(value) { this.department = value; }
	/**
	 * The email addresses for the person.  Multi-value, valid labels are: home, work, other.  Values are strings.
	 * @alias Titanium_Contacts_Person.email
	 * @property {Object}
	 */
	this.email = {}
	/**
	 * Get the The email addresses for the person.  Multi-value, valid labels are: home, work, other.  Values are strings.
	 * @alias Titanium_Contacts_Person.getEmail
	 * @return {Object}
	 */
	this.getEmail = function() { return this.email; }
	/**
	 * Set the The email addresses for the person.  Multi-value, valid labels are: home, work, other.  Values are strings.
	 * @param {Object} value New value to set.
	 * @alias Titanium_Contacts_Person.setEmail
	 */
	this.setEmail = function(value) { this.email = value; }
	/**
	 * The first name of the person.  Single value
	 * @alias Titanium_Contacts_Person.firstName
	 * @property {String}
	 */
	this.firstName = ''
	/**
	 * Get the The first name of the person.  Single value
	 * @alias Titanium_Contacts_Person.getFirstName
	 * @return {String}
	 */
	this.getFirstName = function() { return this.firstName; }
	/**
	 * Set the The first name of the person.  Single value
	 * @param {String} value New value to set.
	 * @alias Titanium_Contacts_Person.setFirstName
	 */
	this.setFirstName = function(value) { this.firstName = value; }
	/**
	 * The phonetic first name of the person.  Single value
	 * @alias Titanium_Contacts_Person.firstPhonetic
	 * @property {String}
	 */
	this.firstPhonetic = ''
	/**
	 * Get the The phonetic first name of the person.  Single value
	 * @alias Titanium_Contacts_Person.getFirstPhonetic
	 * @return {String}
	 */
	this.getFirstPhonetic = function() { return this.firstPhonetic; }
	/**
	 * Set the The phonetic first name of the person.  Single value
	 * @param {String} value New value to set.
	 * @alias Titanium_Contacts_Person.setFirstPhonetic
	 */
	this.setFirstPhonetic = function(value) { this.firstPhonetic = value; }
	/**
	 * The localized full name of the person.  Single value, read-only
	 * @alias Titanium_Contacts_Person.fullName
	 * @property {String}
	 */
	this.fullName = ''
	/**
	 * Get the The localized full name of the person.  Single value, read-only
	 * @alias Titanium_Contacts_Person.getFullName
	 * @return {String}
	 */
	this.getFullName = function() { return this.fullName; }
	/**
	 * Set the The localized full name of the person.  Single value, read-only
	 * @param {String} value New value to set.
	 * @alias Titanium_Contacts_Person.setFullName
	 */
	this.setFullName = function(value) { this.fullName = value; }
	/**
	 * A blob object representing the image for the person.  Set to null to remove the image.  Single value
	 * @alias Titanium_Contacts_Person.image
	 * @property {Object}
	 */
	this.image = {}
	/**
	 * Get the A blob object representing the image for the person.  Set to null to remove the image.  Single value
	 * @alias Titanium_Contacts_Person.getImage
	 * @return {Object}
	 */
	this.getImage = function() { return this.image; }
	/**
	 * Set the A blob object representing the image for the person.  Set to null to remove the image.  Single value
	 * @param {Object} value New value to set.
	 * @alias Titanium_Contacts_Person.setImage
	 */
	this.setImage = function(value) { this.image = value; }
	/**
	 * The instant messenger names for the person.  Multi-value, valid labels are: aim, icq, jabber, msn, yahoo.  Values are dictionaries.
	 * @alias Titanium_Contacts_Person.instantMessage
	 * @property {Object}
	 */
	this.instantMessage = {}
	/**
	 * Get the The instant messenger names for the person.  Multi-value, valid labels are: aim, icq, jabber, msn, yahoo.  Values are dictionaries.
	 * @alias Titanium_Contacts_Person.getInstantMessage
	 * @return {Object}
	 */
	this.getInstantMessage = function() { return this.instantMessage; }
	/**
	 * Set the The instant messenger names for the person.  Multi-value, valid labels are: aim, icq, jabber, msn, yahoo.  Values are dictionaries.
	 * @param {Object} value New value to set.
	 * @alias Titanium_Contacts_Person.setInstantMessage
	 */
	this.setInstantMessage = function(value) { this.instantMessage = value; }
	/**
	 * The job title of the person.  Single value
	 * @alias Titanium_Contacts_Person.jobTitle
	 * @property {String}
	 */
	this.jobTitle = ''
	/**
	 * Get the The job title of the person.  Single value
	 * @alias Titanium_Contacts_Person.getJobTitle
	 * @return {String}
	 */
	this.getJobTitle = function() { return this.jobTitle; }
	/**
	 * Set the The job title of the person.  Single value
	 * @param {String} value New value to set.
	 * @alias Titanium_Contacts_Person.setJobTitle
	 */
	this.setJobTitle = function(value) { this.jobTitle = value; }
	/**
	 * The kind of person.  Single value, one of Titanium.Contacts.CONTACTS_KIND_PERSON or Titanium.Contacts.CONTACTS_KIND_ORGANIZATION
	 * @alias Titanium_Contacts_Person.kind
	 * @property {Integer}
	 */
	this.kind = 0
	/**
	 * Get the The kind of person.  Single value, one of Titanium.Contacts.CONTACTS_KIND_PERSON or Titanium.Contacts.CONTACTS_KIND_ORGANIZATION
	 * @alias Titanium_Contacts_Person.getKind
	 * @return {Integer}
	 */
	this.getKind = function() { return this.kind; }
	/**
	 * Set the The kind of person.  Single value, one of Titanium.Contacts.CONTACTS_KIND_PERSON or Titanium.Contacts.CONTACTS_KIND_ORGANIZATION
	 * @param {Integer} value New value to set.
	 * @alias Titanium_Contacts_Person.setKind
	 */
	this.setKind = function(value) { this.kind = value; }
	/**
	 * The last name of the person.  Single value
	 * @alias Titanium_Contacts_Person.lastName
	 * @property {String}
	 */
	this.lastName = ''
	/**
	 * Get the The last name of the person.  Single value
	 * @alias Titanium_Contacts_Person.getLastName
	 * @return {String}
	 */
	this.getLastName = function() { return this.lastName; }
	/**
	 * Set the The last name of the person.  Single value
	 * @param {String} value New value to set.
	 * @alias Titanium_Contacts_Person.setLastName
	 */
	this.setLastName = function(value) { this.lastName = value; }
	/**
	 * The phonetic last name of the person.  Single value
	 * @alias Titanium_Contacts_Person.lastPhonetic
	 * @property {String}
	 */
	this.lastPhonetic = ''
	/**
	 * Get the The phonetic last name of the person.  Single value
	 * @alias Titanium_Contacts_Person.getLastPhonetic
	 * @return {String}
	 */
	this.getLastPhonetic = function() { return this.lastPhonetic; }
	/**
	 * Set the The phonetic last name of the person.  Single value
	 * @param {String} value New value to set.
	 * @alias Titanium_Contacts_Person.setLastPhonetic
	 */
	this.setLastPhonetic = function(value) { this.lastPhonetic = value; }
	/**
	 * The middle name of the person.  Single value
	 * @alias Titanium_Contacts_Person.middleName
	 * @property {String}
	 */
	this.middleName = ''
	/**
	 * Get the The middle name of the person.  Single value
	 * @alias Titanium_Contacts_Person.getMiddleName
	 * @return {String}
	 */
	this.getMiddleName = function() { return this.middleName; }
	/**
	 * Set the The middle name of the person.  Single value
	 * @param {String} value New value to set.
	 * @alias Titanium_Contacts_Person.setMiddleName
	 */
	this.setMiddleName = function(value) { this.middleName = value; }
	/**
	 * The phonetic middle name of the person.  Single value
	 * @alias Titanium_Contacts_Person.middlePhonetic
	 * @property {String}
	 */
	this.middlePhonetic = ''
	/**
	 * Get the The phonetic middle name of the person.  Single value
	 * @alias Titanium_Contacts_Person.getMiddlePhonetic
	 * @return {String}
	 */
	this.getMiddlePhonetic = function() { return this.middlePhonetic; }
	/**
	 * Set the The phonetic middle name of the person.  Single value
	 * @param {String} value New value to set.
	 * @alias Titanium_Contacts_Person.setMiddlePhonetic
	 */
	this.setMiddlePhonetic = function(value) { this.middlePhonetic = value; }
	/**
	 * The most recent date the person was modified.  Single value, format is "yyyy-MM-dd'T'HH:mm:ss'.'SSS+0000", read-only
	 * @alias Titanium_Contacts_Person.modified
	 * @property {String}
	 */
	this.modified = ''
	/**
	 * Get the The most recent date the person was modified.  Single value, format is "yyyy-MM-dd'T'HH:mm:ss'.'SSS+0000", read-only
	 * @alias Titanium_Contacts_Person.getModified
	 * @return {String}
	 */
	this.getModified = function() { return this.modified; }
	/**
	 * Set the The most recent date the person was modified.  Single value, format is "yyyy-MM-dd'T'HH:mm:ss'.'SSS+0000", read-only
	 * @param {String} value New value to set.
	 * @alias Titanium_Contacts_Person.setModified
	 */
	this.setModified = function(value) { this.modified = value; }
	/**
	 * The nickname of the person.  Single value
	 * @alias Titanium_Contacts_Person.nickname
	 * @property {String}
	 */
	this.nickname = ''
	/**
	 * Get the The nickname of the person.  Single value
	 * @alias Titanium_Contacts_Person.getNickname
	 * @return {String}
	 */
	this.getNickname = function() { return this.nickname; }
	/**
	 * Set the The nickname of the person.  Single value
	 * @param {String} value New value to set.
	 * @alias Titanium_Contacts_Person.setNickname
	 */
	this.setNickname = function(value) { this.nickname = value; }
	/**
	 * Notes for the person.  Single value
	 * @alias Titanium_Contacts_Person.note
	 * @property {String}
	 */
	this.note = ''
	/**
	 * Get the Notes for the person.  Single value
	 * @alias Titanium_Contacts_Person.getNote
	 * @return {String}
	 */
	this.getNote = function() { return this.note; }
	/**
	 * Set the Notes for the person.  Single value
	 * @param {String} value New value to set.
	 * @alias Titanium_Contacts_Person.setNote
	 */
	this.setNote = function(value) { this.note = value; }
	/**
	 * The organization the person belongs to.  Single value
	 * @alias Titanium_Contacts_Person.organization
	 * @property {String}
	 */
	this.organization = ''
	/**
	 * Get the The organization the person belongs to.  Single value
	 * @alias Titanium_Contacts_Person.getOrganization
	 * @return {String}
	 */
	this.getOrganization = function() { return this.organization; }
	/**
	 * Set the The organization the person belongs to.  Single value
	 * @param {String} value New value to set.
	 * @alias Titanium_Contacts_Person.setOrganization
	 */
	this.setOrganization = function(value) { this.organization = value; }
	/**
	 * The phone numbers for the person.  Multi-value, valid labels are: home, work, other, mobile, pager, workFax, homeFax, main, iPhone.  Values are strings.
	 * @alias Titanium_Contacts_Person.phone
	 * @property {Object}
	 */
	this.phone = {}
	/**
	 * Get the The phone numbers for the person.  Multi-value, valid labels are: home, work, other, mobile, pager, workFax, homeFax, main, iPhone.  Values are strings.
	 * @alias Titanium_Contacts_Person.getPhone
	 * @return {Object}
	 */
	this.getPhone = function() { return this.phone; }
	/**
	 * Set the The phone numbers for the person.  Multi-value, valid labels are: home, work, other, mobile, pager, workFax, homeFax, main, iPhone.  Values are strings.
	 * @param {Object} value New value to set.
	 * @alias Titanium_Contacts_Person.setPhone
	 */
	this.setPhone = function(value) { this.phone = value; }
	/**
	 * The prefix for the person.  Single value
	 * @alias Titanium_Contacts_Person.prefix
	 * @property {String}
	 */
	this.prefix = ''
	/**
	 * Get the The prefix for the person.  Single value
	 * @alias Titanium_Contacts_Person.getPrefix
	 * @return {String}
	 */
	this.getPrefix = function() { return this.prefix; }
	/**
	 * Set the The prefix for the person.  Single value
	 * @param {String} value New value to set.
	 * @alias Titanium_Contacts_Person.setPrefix
	 */
	this.setPrefix = function(value) { this.prefix = value; }
	/**
	 * The names of people the person is related to.  Multi-value, valid labels are: mother, father, parent, sister, brother, child, friend, spouse, partner, manager, assistant.  Values are strings.
	 * @alias Titanium_Contacts_Person.relatedNames
	 * @property {Object}
	 */
	this.relatedNames = {}
	/**
	 * Get the The names of people the person is related to.  Multi-value, valid labels are: mother, father, parent, sister, brother, child, friend, spouse, partner, manager, assistant.  Values are strings.
	 * @alias Titanium_Contacts_Person.getRelatedNames
	 * @return {Object}
	 */
	this.getRelatedNames = function() { return this.relatedNames; }
	/**
	 * Set the The names of people the person is related to.  Multi-value, valid labels are: mother, father, parent, sister, brother, child, friend, spouse, partner, manager, assistant.  Values are strings.
	 * @param {Object} value New value to set.
	 * @alias Titanium_Contacts_Person.setRelatedNames
	 */
	this.setRelatedNames = function(value) { this.relatedNames = value; }
	/**
	 * The suffix for the person.  Single value
	 * @alias Titanium_Contacts_Person.suffix
	 * @property {String}
	 */
	this.suffix = ''
	/**
	 * Get the The suffix for the person.  Single value
	 * @alias Titanium_Contacts_Person.getSuffix
	 * @return {String}
	 */
	this.getSuffix = function() { return this.suffix; }
	/**
	 * Set the The suffix for the person.  Single value
	 * @param {String} value New value to set.
	 * @alias Titanium_Contacts_Person.setSuffix
	 */
	this.setSuffix = function(value) { this.suffix = value; }
};

/**
 * The Login Button created by Titanium.Facebook.createLoginButton.
 * @since 0.8
 */
function Titanium_Facebook_LoginButton() {
	/**
	 * a dictionary with properties x and y to indicate the anchor point value. anchor specifies the position by which animation should occur. center is 0.5, 0.5
	 * @alias Titanium_Facebook_LoginButton.anchorPoint
	 * @property {Object}
	 */
	this.anchorPoint = {}
	/**
	 * Get the a dictionary with properties x and y to indicate the anchor point value. anchor specifies the position by which animation should occur. center is 0.5, 0.5
	 * @alias Titanium_Facebook_LoginButton.getAnchorPoint
	 * @return {Object}
	 */
	this.getAnchorPoint = function() { return this.anchorPoint; }
	/**
	 * Set the a dictionary with properties x and y to indicate the anchor point value. anchor specifies the position by which animation should occur. center is 0.5, 0.5
	 * @param {Object} value New value to set.
	 * @alias Titanium_Facebook_LoginButton.setAnchorPoint
	 */
	this.setAnchorPoint = function(value) { this.anchorPoint = value; }
	/**
	 * read-only object with x and y properties of where the view is during animation
	 * @alias Titanium_Facebook_LoginButton.animatedCenterPoint
	 * @property {Object}
	 */
	this.animatedCenterPoint = {}
	/**
	 * Get the read-only object with x and y properties of where the view is during animation
	 * @alias Titanium_Facebook_LoginButton.getAnimatedCenterPoint
	 * @return {Object}
	 */
	this.getAnimatedCenterPoint = function() { return this.animatedCenterPoint; }
	/**
	 * Set the read-only object with x and y properties of where the view is during animation
	 * @param {Object} value New value to set.
	 * @alias Titanium_Facebook_LoginButton.setAnimatedCenterPoint
	 */
	this.setAnimatedCenterPoint = function(value) { this.animatedCenterPoint = value; }
	/**
	 * the background color of the view
	 * @alias Titanium_Facebook_LoginButton.backgroundColor
	 * @property {String}
	 */
	this.backgroundColor = ''
	/**
	 * Get the the background color of the view
	 * @alias Titanium_Facebook_LoginButton.getBackgroundColor
	 * @return {String}
	 */
	this.getBackgroundColor = function() { return this.backgroundColor; }
	/**
	 * Set the the background color of the view
	 * @param {String} value New value to set.
	 * @alias Titanium_Facebook_LoginButton.setBackgroundColor
	 */
	this.setBackgroundColor = function(value) { this.backgroundColor = value; }
	/**
	 * the disabled background color of the view. (Android)
	 * @alias Titanium_Facebook_LoginButton.backgroundDisabledColor
	 * @property {String}
	 */
	this.backgroundDisabledColor = ''
	/**
	 * Get the the disabled background color of the view. (Android)
	 * @alias Titanium_Facebook_LoginButton.getBackgroundDisabledColor
	 * @return {String}
	 */
	this.getBackgroundDisabledColor = function() { return this.backgroundDisabledColor; }
	/**
	 * Set the the disabled background color of the view. (Android)
	 * @param {String} value New value to set.
	 * @alias Titanium_Facebook_LoginButton.setBackgroundDisabledColor
	 */
	this.setBackgroundDisabledColor = function(value) { this.backgroundDisabledColor = value; }
	/**
	 * the disabled background image url of the view. (Android)
	 * @alias Titanium_Facebook_LoginButton.backgroundDisabledImage
	 * @property {String}
	 */
	this.backgroundDisabledImage = ''
	/**
	 * Get the the disabled background image url of the view. (Android)
	 * @alias Titanium_Facebook_LoginButton.getBackgroundDisabledImage
	 * @return {String}
	 */
	this.getBackgroundDisabledImage = function() { return this.backgroundDisabledImage; }
	/**
	 * Set the the disabled background image url of the view. (Android)
	 * @param {String} value New value to set.
	 * @alias Titanium_Facebook_LoginButton.setBackgroundDisabledImage
	 */
	this.setBackgroundDisabledImage = function(value) { this.backgroundDisabledImage = value; }
	/**
	 * the focused background color of the view. focusable must be true for normal views. (Android)
	 * @alias Titanium_Facebook_LoginButton.backgroundFocusedColor
	 * @property {String}
	 */
	this.backgroundFocusedColor = ''
	/**
	 * Get the the focused background color of the view. focusable must be true for normal views. (Android)
	 * @alias Titanium_Facebook_LoginButton.getBackgroundFocusedColor
	 * @return {String}
	 */
	this.getBackgroundFocusedColor = function() { return this.backgroundFocusedColor; }
	/**
	 * Set the the focused background color of the view. focusable must be true for normal views. (Android)
	 * @param {String} value New value to set.
	 * @alias Titanium_Facebook_LoginButton.setBackgroundFocusedColor
	 */
	this.setBackgroundFocusedColor = function(value) { this.backgroundFocusedColor = value; }
	/**
	 * the focused background image url of the view. focusable must be true for normal views. (Android)
	 * @alias Titanium_Facebook_LoginButton.backgroundFocusedImage
	 * @property {String}
	 */
	this.backgroundFocusedImage = ''
	/**
	 * Get the the focused background image url of the view. focusable must be true for normal views. (Android)
	 * @alias Titanium_Facebook_LoginButton.getBackgroundFocusedImage
	 * @return {String}
	 */
	this.getBackgroundFocusedImage = function() { return this.backgroundFocusedImage; }
	/**
	 * Set the the focused background image url of the view. focusable must be true for normal views. (Android)
	 * @param {String} value New value to set.
	 * @alias Titanium_Facebook_LoginButton.setBackgroundFocusedImage
	 */
	this.setBackgroundFocusedImage = function(value) { this.backgroundFocusedImage = value; }
	/**
	 * a background gradient for the view with the properties: type,startPoint,endPoint,startRadius,endRadius,backfillStart,backfillEnd,colors.
	 * @alias Titanium_Facebook_LoginButton.backgroundGradient
	 * @property {Object}
	 */
	this.backgroundGradient = {}
	/**
	 * Get the a background gradient for the view with the properties: type,startPoint,endPoint,startRadius,endRadius,backfillStart,backfillEnd,colors.
	 * @alias Titanium_Facebook_LoginButton.getBackgroundGradient
	 * @return {Object}
	 */
	this.getBackgroundGradient = function() { return this.backgroundGradient; }
	/**
	 * Set the a background gradient for the view with the properties: type,startPoint,endPoint,startRadius,endRadius,backfillStart,backfillEnd,colors.
	 * @param {Object} value New value to set.
	 * @alias Titanium_Facebook_LoginButton.setBackgroundGradient
	 */
	this.setBackgroundGradient = function(value) { this.backgroundGradient = value; }
	/**
	 * the background image url of the view
	 * @alias Titanium_Facebook_LoginButton.backgroundImage
	 * @property {String}
	 */
	this.backgroundImage = ''
	/**
	 * Get the the background image url of the view
	 * @alias Titanium_Facebook_LoginButton.getBackgroundImage
	 * @return {String}
	 */
	this.getBackgroundImage = function() { return this.backgroundImage; }
	/**
	 * Set the the background image url of the view
	 * @param {String} value New value to set.
	 * @alias Titanium_Facebook_LoginButton.setBackgroundImage
	 */
	this.setBackgroundImage = function(value) { this.backgroundImage = value; }
	/**
	 * End caps specify the portion of an image that should not be resized when an image is stretched. This technique is used to implement buttons and other resizable image-based interface elements. When a button with end caps is resized, the resizing occurs only in the middle of the button, in the region between the end caps. The end caps themselves keep their original size and appearance. This property specifies the size of the left end cap. The middle (stretchable) portion is assumed to be 1 pixel wide. The right end cap is therefore computed by adding the size of the left end cap and the middle portion together and then subtracting that value from the width of the image
	 * @alias Titanium_Facebook_LoginButton.backgroundLeftCap
	 * @property {Float}
	 */
	this.backgroundLeftCap = 0.0
	/**
	 * Get the End caps specify the portion of an image that should not be resized when an image is stretched. This technique is used to implement buttons and other resizable image-based interface elements. When a button with end caps is resized, the resizing occurs only in the middle of the button, in the region between the end caps. The end caps themselves keep their original size and appearance. This property specifies the size of the left end cap. The middle (stretchable) portion is assumed to be 1 pixel wide. The right end cap is therefore computed by adding the size of the left end cap and the middle portion together and then subtracting that value from the width of the image
	 * @alias Titanium_Facebook_LoginButton.getBackgroundLeftCap
	 * @return {Float}
	 */
	this.getBackgroundLeftCap = function() { return this.backgroundLeftCap; }
	/**
	 * Set the End caps specify the portion of an image that should not be resized when an image is stretched. This technique is used to implement buttons and other resizable image-based interface elements. When a button with end caps is resized, the resizing occurs only in the middle of the button, in the region between the end caps. The end caps themselves keep their original size and appearance. This property specifies the size of the left end cap. The middle (stretchable) portion is assumed to be 1 pixel wide. The right end cap is therefore computed by adding the size of the left end cap and the middle portion together and then subtracting that value from the width of the image
	 * @param {Float} value New value to set.
	 * @alias Titanium_Facebook_LoginButton.setBackgroundLeftCap
	 */
	this.setBackgroundLeftCap = function(value) { this.backgroundLeftCap = value; }
	/**
	 * the selected background color of the view. focusable must be true for normal views. (Android)
	 * @alias Titanium_Facebook_LoginButton.backgroundSelectedColor
	 * @property {String}
	 */
	this.backgroundSelectedColor = ''
	/**
	 * Get the the selected background color of the view. focusable must be true for normal views. (Android)
	 * @alias Titanium_Facebook_LoginButton.getBackgroundSelectedColor
	 * @return {String}
	 */
	this.getBackgroundSelectedColor = function() { return this.backgroundSelectedColor; }
	/**
	 * Set the the selected background color of the view. focusable must be true for normal views. (Android)
	 * @param {String} value New value to set.
	 * @alias Titanium_Facebook_LoginButton.setBackgroundSelectedColor
	 */
	this.setBackgroundSelectedColor = function(value) { this.backgroundSelectedColor = value; }
	/**
	 * the selected background image url of the view. focusable must be true for normal views. (Android)
	 * @alias Titanium_Facebook_LoginButton.backgroundSelectedImage
	 * @property {String}
	 */
	this.backgroundSelectedImage = ''
	/**
	 * Get the the selected background image url of the view. focusable must be true for normal views. (Android)
	 * @alias Titanium_Facebook_LoginButton.getBackgroundSelectedImage
	 * @return {String}
	 */
	this.getBackgroundSelectedImage = function() { return this.backgroundSelectedImage; }
	/**
	 * Set the the selected background image url of the view. focusable must be true for normal views. (Android)
	 * @param {String} value New value to set.
	 * @alias Titanium_Facebook_LoginButton.setBackgroundSelectedImage
	 */
	this.setBackgroundSelectedImage = function(value) { this.backgroundSelectedImage = value; }
	/**
	 * End caps specify the portion of an image that should not be resized when an image is stretched. This technique is used to implement buttons and other resizable image-based interface elements. When a button with end caps is resized, the resizing occurs only in the middle of the button, in the region between the end caps. The end caps themselves keep their original size and appearance. This property specifies the size of the top end cap. The middle (stretchable) portion is assumed to be 1 pixel wide. The bottom end cap is therefore computed by adding the size of the top end cap and the middle portion together and then subtracting that value from the height of the image
	 * @alias Titanium_Facebook_LoginButton.backgroundTopCap
	 * @property {Float}
	 */
	this.backgroundTopCap = 0.0
	/**
	 * Get the End caps specify the portion of an image that should not be resized when an image is stretched. This technique is used to implement buttons and other resizable image-based interface elements. When a button with end caps is resized, the resizing occurs only in the middle of the button, in the region between the end caps. The end caps themselves keep their original size and appearance. This property specifies the size of the top end cap. The middle (stretchable) portion is assumed to be 1 pixel wide. The bottom end cap is therefore computed by adding the size of the top end cap and the middle portion together and then subtracting that value from the height of the image
	 * @alias Titanium_Facebook_LoginButton.getBackgroundTopCap
	 * @return {Float}
	 */
	this.getBackgroundTopCap = function() { return this.backgroundTopCap; }
	/**
	 * Set the End caps specify the portion of an image that should not be resized when an image is stretched. This technique is used to implement buttons and other resizable image-based interface elements. When a button with end caps is resized, the resizing occurs only in the middle of the button, in the region between the end caps. The end caps themselves keep their original size and appearance. This property specifies the size of the top end cap. The middle (stretchable) portion is assumed to be 1 pixel wide. The bottom end cap is therefore computed by adding the size of the top end cap and the middle portion together and then subtracting that value from the height of the image
	 * @param {Float} value New value to set.
	 * @alias Titanium_Facebook_LoginButton.setBackgroundTopCap
	 */
	this.setBackgroundTopCap = function(value) { this.backgroundTopCap = value; }
	/**
	 * the border color of the view
	 * @alias Titanium_Facebook_LoginButton.borderColor
	 * @property {String}
	 */
	this.borderColor = ''
	/**
	 * Get the the border color of the view
	 * @alias Titanium_Facebook_LoginButton.getBorderColor
	 * @return {String}
	 */
	this.getBorderColor = function() { return this.borderColor; }
	/**
	 * Set the the border color of the view
	 * @param {String} value New value to set.
	 * @alias Titanium_Facebook_LoginButton.setBorderColor
	 */
	this.setBorderColor = function(value) { this.borderColor = value; }
	/**
	 * the border radius of the view
	 * @alias Titanium_Facebook_LoginButton.borderRadius
	 * @property {Float}
	 */
	this.borderRadius = 0.0
	/**
	 * Get the the border radius of the view
	 * @alias Titanium_Facebook_LoginButton.getBorderRadius
	 * @return {Float}
	 */
	this.getBorderRadius = function() { return this.borderRadius; }
	/**
	 * Set the the border radius of the view
	 * @param {Float} value New value to set.
	 * @alias Titanium_Facebook_LoginButton.setBorderRadius
	 */
	this.setBorderRadius = function(value) { this.borderRadius = value; }
	/**
	 * the border width of the view
	 * @alias Titanium_Facebook_LoginButton.borderWidth
	 * @property {Float}
	 */
	this.borderWidth = 0.0
	/**
	 * Get the the border width of the view
	 * @alias Titanium_Facebook_LoginButton.getBorderWidth
	 * @return {Float}
	 */
	this.getBorderWidth = function() { return this.borderWidth; }
	/**
	 * Set the the border width of the view
	 * @param {Float} value New value to set.
	 * @alias Titanium_Facebook_LoginButton.setBorderWidth
	 */
	this.setBorderWidth = function(value) { this.borderWidth = value; }
	/**
	 * property for the view bottom position. This position is relative to the view's parent. Can be either a float value or a dimension string ie 'auto' (default), '50%' (iPhone only).
	 * @alias Titanium_Facebook_LoginButton.bottom
	 * @property {Float,String}
	 */
	this.bottom = 0.0
	/**
	 * Get the property for the view bottom position. This position is relative to the view's parent. Can be either a float value or a dimension string ie 'auto' (default), '50%' (iPhone only).
	 * @alias Titanium_Facebook_LoginButton.getBottom
	 * @return {Float,String}
	 */
	this.getBottom = function() { return this.bottom; }
	/**
	 * Set the property for the view bottom position. This position is relative to the view's parent. Can be either a float value or a dimension string ie 'auto' (default), '50%' (iPhone only).
	 * @param {Float,String} value New value to set.
	 * @alias Titanium_Facebook_LoginButton.setBottom
	 */
	this.setBottom = function(value) { this.bottom = value; }
	/**
	 * a dictionary with properties x and y to indicate the center of the views position relative to the parent view
	 * @alias Titanium_Facebook_LoginButton.center
	 * @property {Object}
	 */
	this.center = {}
	/**
	 * Get the a dictionary with properties x and y to indicate the center of the views position relative to the parent view
	 * @alias Titanium_Facebook_LoginButton.getCenter
	 * @return {Object}
	 */
	this.getCenter = function() { return this.center; }
	/**
	 * Set the a dictionary with properties x and y to indicate the center of the views position relative to the parent view
	 * @param {Object} value New value to set.
	 * @alias Titanium_Facebook_LoginButton.setCenter
	 */
	this.setCenter = function(value) { this.center = value; }
	/**
	 * Set true if you want a view to be focusable when navigating with the trackball or D-Pad. Default: false. (Android Only)
	 * @alias Titanium_Facebook_LoginButton.focusable
	 * @property {Boolean}
	 */
	this.focusable = false
	/**
	 * Get the Set true if you want a view to be focusable when navigating with the trackball or D-Pad. Default: false. (Android Only)
	 * @alias Titanium_Facebook_LoginButton.getFocusable
	 * @return {Boolean}
	 */
	this.getFocusable = function() { return this.focusable; }
	/**
	 * Set the Set true if you want a view to be focusable when navigating with the trackball or D-Pad. Default: false. (Android Only)
	 * @param {Boolean} value New value to set.
	 * @alias Titanium_Facebook_LoginButton.setFocusable
	 */
	this.setFocusable = function(value) { this.focusable = value; }
	/**
	 * the font family
	 * @alias Titanium_Facebook_LoginButton.font-family
	 * @property {String}
	 */
	this.font-family = ''
	/**
	 * Get the the font family
	 * @alias Titanium_Facebook_LoginButton.getFont-family
	 * @return {String}
	 */
	this.getFont-family = function() { return this.font-family; }
	/**
	 * Set the the font family
	 * @param {String} value New value to set.
	 * @alias Titanium_Facebook_LoginButton.setFont-family
	 */
	this.setFont-family = function(value) { this.font-family = value; }
	/**
	 * the font size
	 * @alias Titanium_Facebook_LoginButton.font-size
	 * @property {String}
	 */
	this.font-size = ''
	/**
	 * Get the the font size
	 * @alias Titanium_Facebook_LoginButton.getFont-size
	 * @return {String}
	 */
	this.getFont-size = function() { return this.font-size; }
	/**
	 * Set the the font size
	 * @param {String} value New value to set.
	 * @alias Titanium_Facebook_LoginButton.setFont-size
	 */
	this.setFont-size = function(value) { this.font-size = value; }
	/**
	 * the font style, either normal or italics
	 * @alias Titanium_Facebook_LoginButton.font-style
	 * @property {String}
	 */
	this.font-style = ''
	/**
	 * Get the the font style, either normal or italics
	 * @alias Titanium_Facebook_LoginButton.getFont-style
	 * @return {String}
	 */
	this.getFont-style = function() { return this.font-style; }
	/**
	 * Set the the font style, either normal or italics
	 * @param {String} value New value to set.
	 * @alias Titanium_Facebook_LoginButton.setFont-style
	 */
	this.setFont-style = function(value) { this.font-style = value; }
	/**
	 * the font weight, either normal or bold
	 * @alias Titanium_Facebook_LoginButton.font-weight
	 * @property {String}
	 */
	this.font-weight = ''
	/**
	 * Get the the font weight, either normal or bold
	 * @alias Titanium_Facebook_LoginButton.getFont-weight
	 * @return {String}
	 */
	this.getFont-weight = function() { return this.font-weight; }
	/**
	 * Set the the font weight, either normal or bold
	 * @param {String} value New value to set.
	 * @alias Titanium_Facebook_LoginButton.setFont-weight
	 */
	this.setFont-weight = function(value) { this.font-weight = value; }
	/**
	 * property for the view height. Can be either a float value or a dimension string ie 'auto' (default), '50%' (iPhone only).
	 * @alias Titanium_Facebook_LoginButton.height
	 * @property {Float,String}
	 */
	this.height = 0.0
	/**
	 * Get the property for the view height. Can be either a float value or a dimension string ie 'auto' (default), '50%' (iPhone only).
	 * @alias Titanium_Facebook_LoginButton.getHeight
	 * @return {Float,String}
	 */
	this.getHeight = function() { return this.height; }
	/**
	 * Set the property for the view height. Can be either a float value or a dimension string ie 'auto' (default), '50%' (iPhone only).
	 * @param {Float,String} value New value to set.
	 * @alias Titanium_Facebook_LoginButton.setHeight
	 */
	this.setHeight = function(value) { this.height = value; }
	/**
	 * property for the view left position. This position is relative to the view's parent. Can be either a float value or a dimension string ie 'auto' (default), '50%' (iPhone only).
	 * @alias Titanium_Facebook_LoginButton.left
	 * @property {Float,String}
	 */
	this.left = 0.0
	/**
	 * Get the property for the view left position. This position is relative to the view's parent. Can be either a float value or a dimension string ie 'auto' (default), '50%' (iPhone only).
	 * @alias Titanium_Facebook_LoginButton.getLeft
	 * @return {Float,String}
	 */
	this.getLeft = function() { return this.left; }
	/**
	 * Set the property for the view left position. This position is relative to the view's parent. Can be either a float value or a dimension string ie 'auto' (default), '50%' (iPhone only).
	 * @param {Float,String} value New value to set.
	 * @alias Titanium_Facebook_LoginButton.setLeft
	 */
	this.setLeft = function(value) { this.left = value; }
	/**
	 * the opacity from 0.0-1.0
	 * @alias Titanium_Facebook_LoginButton.opacity
	 * @property {Float}
	 */
	this.opacity = 0.0
	/**
	 * Get the the opacity from 0.0-1.0
	 * @alias Titanium_Facebook_LoginButton.getOpacity
	 * @return {Float}
	 */
	this.getOpacity = function() { return this.opacity; }
	/**
	 * Set the the opacity from 0.0-1.0
	 * @param {Float} value New value to set.
	 * @alias Titanium_Facebook_LoginButton.setOpacity
	 */
	this.setOpacity = function(value) { this.opacity = value; }
	/**
	 * property for the view right position. This position is relative to the view's parent. Can be either a float value or a dimension string ie 'auto' (default), '50%' (iPhone only).
	 * @alias Titanium_Facebook_LoginButton.right
	 * @property {Float,String}
	 */
	this.right = 0.0
	/**
	 * Get the property for the view right position. This position is relative to the view's parent. Can be either a float value or a dimension string ie 'auto' (default), '50%' (iPhone only).
	 * @alias Titanium_Facebook_LoginButton.getRight
	 * @return {Float,String}
	 */
	this.getRight = function() { return this.right; }
	/**
	 * Set the property for the view right position. This position is relative to the view's parent. Can be either a float value or a dimension string ie 'auto' (default), '50%' (iPhone only).
	 * @param {Float,String} value New value to set.
	 * @alias Titanium_Facebook_LoginButton.setRight
	 */
	this.setRight = function(value) { this.right = value; }
	/**
	 * the size of the view as a dictionary of width and height properties
	 * @alias Titanium_Facebook_LoginButton.size
	 * @property {Object}
	 */
	this.size = {}
	/**
	 * Get the the size of the view as a dictionary of width and height properties
	 * @alias Titanium_Facebook_LoginButton.getSize
	 * @return {Object}
	 */
	this.getSize = function() { return this.size; }
	/**
	 * Set the the size of the view as a dictionary of width and height properties
	 * @param {Object} value New value to set.
	 * @alias Titanium_Facebook_LoginButton.setSize
	 */
	this.setSize = function(value) { this.size = value; }
	/**
	 * One of Titanium.UI.Android.SOFT_KEYBOARD_DEFAULT_ON_FOCUS, Titanium.UI.Android.SOFT_KEYBOARD_HIDE_ON_FOCUS, or Titanium.UI.Android.SOFT_KEYBOARD_SHOW_ON_FOCUS. (Android only)
	 * @alias Titanium_Facebook_LoginButton.softKeyboardOnFocus
	 * @property {Integer}
	 */
	this.softKeyboardOnFocus = 0
	/**
	 * Get the One of Titanium.UI.Android.SOFT_KEYBOARD_DEFAULT_ON_FOCUS, Titanium.UI.Android.SOFT_KEYBOARD_HIDE_ON_FOCUS, or Titanium.UI.Android.SOFT_KEYBOARD_SHOW_ON_FOCUS. (Android only)
	 * @alias Titanium_Facebook_LoginButton.getSoftKeyboardOnFocus
	 * @return {Integer}
	 */
	this.getSoftKeyboardOnFocus = function() { return this.softKeyboardOnFocus; }
	/**
	 * Set the One of Titanium.UI.Android.SOFT_KEYBOARD_DEFAULT_ON_FOCUS, Titanium.UI.Android.SOFT_KEYBOARD_HIDE_ON_FOCUS, or Titanium.UI.Android.SOFT_KEYBOARD_SHOW_ON_FOCUS. (Android only)
	 * @param {Integer} value New value to set.
	 * @alias Titanium_Facebook_LoginButton.setSoftKeyboardOnFocus
	 */
	this.setSoftKeyboardOnFocus = function(value) { this.softKeyboardOnFocus = value; }
	/**
	 * property for the view top position. This position is relative to the view's parent. Can be either a float value or a dimension string ie 'auto' (default), '50%' (iPhone only).
	 * @alias Titanium_Facebook_LoginButton.top
	 * @property {Float,String}
	 */
	this.top = 0.0
	/**
	 * Get the property for the view top position. This position is relative to the view's parent. Can be either a float value or a dimension string ie 'auto' (default), '50%' (iPhone only).
	 * @alias Titanium_Facebook_LoginButton.getTop
	 * @return {Float,String}
	 */
	this.getTop = function() { return this.top; }
	/**
	 * Set the property for the view top position. This position is relative to the view's parent. Can be either a float value or a dimension string ie 'auto' (default), '50%' (iPhone only).
	 * @param {Float,String} value New value to set.
	 * @alias Titanium_Facebook_LoginButton.setTop
	 */
	this.setTop = function(value) { this.top = value; }
	/**
	 * a boolean indicating if the view should receive touch events (true, default) or forward them to peers (false)
	 * @alias Titanium_Facebook_LoginButton.touchEnabled
	 * @property {Boolean}
	 */
	this.touchEnabled = false
	/**
	 * Get the a boolean indicating if the view should receive touch events (true, default) or forward them to peers (false)
	 * @alias Titanium_Facebook_LoginButton.getTouchEnabled
	 * @return {Boolean}
	 */
	this.getTouchEnabled = function() { return this.touchEnabled; }
	/**
	 * Set the a boolean indicating if the view should receive touch events (true, default) or forward them to peers (false)
	 * @param {Boolean} value New value to set.
	 * @alias Titanium_Facebook_LoginButton.setTouchEnabled
	 */
	this.setTouchEnabled = function(value) { this.touchEnabled = value; }
	/**
	 * the transformation matrix to apply to the view
	 * @alias Titanium_Facebook_LoginButton.transform
	 * @property {Object}
	 */
	this.transform = {}
	/**
	 * Get the the transformation matrix to apply to the view
	 * @alias Titanium_Facebook_LoginButton.getTransform
	 * @return {Object}
	 */
	this.getTransform = function() { return this.transform; }
	/**
	 * Set the the transformation matrix to apply to the view
	 * @param {Object} value New value to set.
	 * @alias Titanium_Facebook_LoginButton.setTransform
	 */
	this.setTransform = function(value) { this.transform = value; }
	/**
	 * a boolean of the visibility of the view
	 * @alias Titanium_Facebook_LoginButton.visible
	 * @property {Boolean}
	 */
	this.visible = false
	/**
	 * Get the a boolean of the visibility of the view
	 * @alias Titanium_Facebook_LoginButton.getVisible
	 * @return {Boolean}
	 */
	this.getVisible = function() { return this.visible; }
	/**
	 * Set the a boolean of the visibility of the view
	 * @param {Boolean} value New value to set.
	 * @alias Titanium_Facebook_LoginButton.setVisible
	 */
	this.setVisible = function(value) { this.visible = value; }
	/**
	 * property for the view width. Can be either a float value or a dimension string ie 'auto' (default), '50%' (iPhone only).
	 * @alias Titanium_Facebook_LoginButton.width
	 * @property {Float,String}
	 */
	this.width = 0.0
	/**
	 * Get the property for the view width. Can be either a float value or a dimension string ie 'auto' (default), '50%' (iPhone only).
	 * @alias Titanium_Facebook_LoginButton.getWidth
	 * @return {Float,String}
	 */
	this.getWidth = function() { return this.width; }
	/**
	 * Set the property for the view width. Can be either a float value or a dimension string ie 'auto' (default), '50%' (iPhone only).
	 * @param {Float,String} value New value to set.
	 * @alias Titanium_Facebook_LoginButton.setWidth
	 */
	this.setWidth = function(value) { this.width = value; }
	/**
	 * the z index position relative to other sibling views
	 * @alias Titanium_Facebook_LoginButton.zIndex
	 * @property {Integer}
	 */
	this.zIndex = 0
	/**
	 * Get the the z index position relative to other sibling views
	 * @alias Titanium_Facebook_LoginButton.getZIndex
	 * @return {Integer}
	 */
	this.getZIndex = function() { return this.zIndex; }
	/**
	 * Set the the z index position relative to other sibling views
	 * @param {Integer} value New value to set.
	 * @alias Titanium_Facebook_LoginButton.setZIndex
	 */
	this.setZIndex = function(value) { this.zIndex = value; }
	/**
	 * add a child to the view hierarchy
	 * @param {Object} view the view to add to this views hiearchy
	 * @alias Titanium_Facebook_LoginButton.add
	 */
	this.add = function add(view) { }
	/**
	 * add an event listener for the instance to receive view triggered events
	 * @param {String} name name of the event
	 * @param {Function} callback callback function to invoke when the event is fired
	 * @alias Titanium_Facebook_LoginButton.addEventListener
	 */
	this.addEventListener = function addEventListener(name,callback) { }
	/**
	 * animate the view
	 * @param {Object} obj either a dictionary of animation properties or an Animation object
	 * @param {Function} callback function to be invoked upon completion of the animation
	 * @alias Titanium_Facebook_LoginButton.animate
	 */
	this.animate = function animate(obj,callback) { }
	/**
	 * fire a synthesized event to the views listener
	 * @param {String} name name of the event
	 * @param {Object} event event object
	 * @alias Titanium_Facebook_LoginButton.fireEvent
	 */
	this.fireEvent = function fireEvent(name,event) { }
	/**
	 * hide the view
	 * @alias Titanium_Facebook_LoginButton.hide
	 */
	this.hide = function hide() { }
	/**
	 * remove a previously add view from the view hiearchy
	 * @param {Object} view the view to remove from this views hiearchy
	 * @alias Titanium_Facebook_LoginButton.remove
	 */
	this.remove = function remove(view) { }
	/**
	 * remove a previously added event listener
	 * @param {String} name name of the event
	 * @param {Function} callback callback function passed in addEventListener
	 * @alias Titanium_Facebook_LoginButton.removeEventListener
	 */
	this.removeEventListener = function removeEventListener(name,callback) { }
	/**
	 * make the view visible
	 * @alias Titanium_Facebook_LoginButton.show
	 */
	this.show = function show() { }
	/**
	 * return a Blob image of the rendered view
	 * @param {Function} f function to be invoked upon completion. if non-null, this method will be performed asynchronously. if null, it will be performed immediately
	 * @alias Titanium_Facebook_LoginButton.toImage
	 * @return {Object}
	 */
	this.toImage = function toImage(f) { return {}; }
};

/**
 * The File object which support various filesystem based operations.
 * @since 0.1
 */
function Titanium_Filesystem_File() {
	/**
	 * add an event listener for the instance to receive view triggered events
	 * @param {String} name name of the event
	 * @param {Function} callback callback function to invoke when the event is fired
	 * @alias Titanium_Filesystem_File.addEventListener
	 */
	this.addEventListener = function addEventListener(name,callback) { }
	/**
	 * create a directory at the path for the file object
	 * @alias Titanium_Filesystem_File.createDirectory
	 * @return {BLANK}
	 */
	this.createDirectory = function createDirectory() { return new BLANK(); }
	/**
	 * create a file path at the path for the file object
	 * @alias Titanium_Filesystem_File.createFile
	 * @return {Titanium_Filesystem_File}
	 */
	this.createFile = function createFile() { return new Titanium_Filesystem_File(); }
	/**
	 * return the created timestamp for the file
	 * @alias Titanium_Filesystem_File.createTimestamp
	 * @return {BLANK}
	 */
	this.createTimestamp = function createTimestamp() { return new BLANK(); }
	/**
	 * delete the file directory path
	 * @param {Boolean} recursive pass true to recursively delete any contents. defaults to false
	 * @alias Titanium_Filesystem_File.deleteDirectory
	 * @return {Boolean}
	 */
	this.deleteDirectory = function deleteDirectory(recursive) { return false; }
	/**
	 * delete the file
	 * @alias Titanium_Filesystem_File.deleteFile
	 * @return {Boolean}
	 */
	this.deleteFile = function deleteFile() { return false; }
	/**
	 * returns true if the file is executable
	 * @alias Titanium_Filesystem_File.executable
	 * @return {Boolean}
	 */
	this.executable = function executable() { return false; }
	/**
	 * returns true if the file or directory exists on the device
	 * @alias Titanium_Filesystem_File.exists
	 * @return {Boolean}
	 */
	this.exists = function exists() { return false; }
	/**
	 * return the file extension
	 * @alias Titanium_Filesystem_File.extension
	 * @return {String}
	 */
	this.extension = function extension() { return ''; }
	/**
	 * fire a synthesized event to the views listener
	 * @param {String} name name of the event
	 * @param {Object} event event object
	 * @alias Titanium_Filesystem_File.fireEvent
	 */
	this.fireEvent = function fireEvent(name,event) { }
	/**
	 * return an array of paths in the directory of the file object
	 * @alias Titanium_Filesystem_File.getDirectoryListing
	 * @return {Array}
	 */
	this.getDirectoryListing = function getDirectoryListing() { return []; }
	/**
	 * return the file parent
	 * @alias Titanium_Filesystem_File.getParent
	 * @return {Titanium.Filesystem.File}
	 */
	this.getParent = function getParent() { return {}; }
	/**
	 * returns true if the file is hidden
	 * @alias Titanium_Filesystem_File.hidden
	 * @return {Boolean}
	 */
	this.hidden = function hidden() { return false; }
	/**
	 * return the last modification timestamp for the file
	 * @alias Titanium_Filesystem_File.modificationTimestamp
	 * @return {long}
	 */
	this.modificationTimestamp = function modificationTimestamp() { return {}; }
	/**
	 * move the file to another path
	 * @param {Object} newpath new location
	 * @alias Titanium_Filesystem_File.move
	 * @return {Boolean}
	 */
	this.move = function move(newpath) { return false; }
	/**
	 * the name of the file
	 * @alias Titanium_Filesystem_File.name
	 * @return {String}
	 */
	this.name = function name() { return ''; }
	/**
	 * returns the fully resolved native path
	 * @alias Titanium_Filesystem_File.nativePath
	 * @return {String}
	 */
	this.nativePath = function nativePath() { return ''; }
	/**
	 * return the contents of file as blob
	 * @alias Titanium_Filesystem_File.read
	 * @return {Titanium.Blob}
	 */
	this.read = function read() { return {}; }
	/**
	 * returns true if the file is readonly
	 * @alias Titanium_Filesystem_File.readonly
	 * @return {Boolean}
	 */
	this.readonly = function readonly() { return false; }
	/**
	 * remove a previously added event listener
	 * @param {String} name name of the event
	 * @param {Function} callback callback function passed in addEventListener
	 * @alias Titanium_Filesystem_File.removeEventListener
	 */
	this.removeEventListener = function removeEventListener(name,callback) { }
	/**
	 * rename the file
	 * @param {String} newname new name
	 * @alias Titanium_Filesystem_File.rename
	 * @return {Boolean}
	 */
	this.rename = function rename(newname) { return false; }
	/**
	 * make the file executable
	 * @alias Titanium_Filesystem_File.setExecutable
	 */
	this.setExecutable = function setExecutable() { }
	/**
	 * make the file hidden
	 * @alias Titanium_Filesystem_File.setHidden
	 */
	this.setHidden = function setHidden() { }
	/**
	 * make the file readonly
	 * @alias Titanium_Filesystem_File.setReadonly
	 */
	this.setReadonly = function setReadonly() { }
	/**
	 * return boolean to indicate if the path has space available for storage
	 * @alias Titanium_Filesystem_File.spaceAvailable
	 * @return {Boolean}
	 */
	this.spaceAvailable = function spaceAvailable() { return false; }
	/**
	 * returns true if the file points to a symbolic link
	 * @alias Titanium_Filesystem_File.symbolicLink
	 * @return {Boolean}
	 */
	this.symbolicLink = function symbolicLink() { return false; }
	/**
	 * write the contents to file
	 * @param {Object} contents write the contents of string, blob or [[Titanium.Filesystem.File]] to file
	 * @alias Titanium_Filesystem_File.write
	 * @return {Boolean}
	 */
	this.write = function write(contents) { return false; }
	/**
	 * returns true if the file is writeable
	 * @alias Titanium_Filesystem_File.writeable
	 * @return {Boolean}
	 */
	this.writeable = function writeable() { return false; }
};

/**
 * An Annotation object that is created by the method Titanium.Map.createAnnotation. This object gives you low level control over annotations that can be added to a Map View.
 * @since 0.9
 */
function Titanium_Map_Annotation() {
	/**
	 * boolean to indicate whether the pin should animate when dropped
	 * @alias Titanium_Map_Annotation.animate
	 * @property {Boolean}
	 */
	this.animate = false
	/**
	 * Get the boolean to indicate whether the pin should animate when dropped
	 * @alias Titanium_Map_Annotation.getAnimate
	 * @return {Boolean}
	 */
	this.getAnimate = function() { return this.animate; }
	/**
	 * Set the boolean to indicate whether the pin should animate when dropped
	 * @param {Boolean} value New value to set.
	 * @alias Titanium_Map_Annotation.setAnimate
	 */
	this.setAnimate = function(value) { this.animate = value; }
	/**
	 * image view for the pin instead of default image.  currently only supported in iphone
	 * @alias Titanium_Map_Annotation.image
	 * @property {String}
	 */
	this.image = ''
	/**
	 * Get the image view for the pin instead of default image.  currently only supported in iphone
	 * @alias Titanium_Map_Annotation.getImage
	 * @return {String}
	 */
	this.getImage = function() { return this.image; }
	/**
	 * Set the image view for the pin instead of default image.  currently only supported in iphone
	 * @param {String} value New value to set.
	 * @alias Titanium_Map_Annotation.setImage
	 */
	this.setImage = function(value) { this.image = value; }
	/**
	 * the left button image on the annotation. must either be a button type constant or url
	 * @alias Titanium_Map_Annotation.leftButton
	 * @property {Integer,String}
	 */
	this.leftButton = 0
	/**
	 * Get the the left button image on the annotation. must either be a button type constant or url
	 * @alias Titanium_Map_Annotation.getLeftButton
	 * @return {Integer,String}
	 */
	this.getLeftButton = function() { return this.leftButton; }
	/**
	 * Set the the left button image on the annotation. must either be a button type constant or url
	 * @param {Integer,String} value New value to set.
	 * @alias Titanium_Map_Annotation.setLeftButton
	 */
	this.setLeftButton = function(value) { this.leftButton = value; }
	/**
	 * a left view that is displayed on the annotation
	 * @alias Titanium_Map_Annotation.leftView
	 * @property {Object}
	 */
	this.leftView = {}
	/**
	 * Get the a left view that is displayed on the annotation
	 * @alias Titanium_Map_Annotation.getLeftView
	 * @return {Object}
	 */
	this.getLeftView = function() { return this.leftView; }
	/**
	 * Set the a left view that is displayed on the annotation
	 * @param {Object} value New value to set.
	 * @alias Titanium_Map_Annotation.setLeftView
	 */
	this.setLeftView = function(value) { this.leftView = value; }
	/**
	 * the pin color as one of Titanium.Map.ANNOTATION_RED, Titanium.Map.ANNOTATION_GREEN or Titanium.Map.ANNOTATION_PURPLE.
	 * @alias Titanium_Map_Annotation.pincolor
	 * @property {Integer}
	 */
	this.pincolor = 0
	/**
	 * Get the the pin color as one of Titanium.Map.ANNOTATION_RED, Titanium.Map.ANNOTATION_GREEN or Titanium.Map.ANNOTATION_PURPLE.
	 * @alias Titanium_Map_Annotation.getPincolor
	 * @return {Integer}
	 */
	this.getPincolor = function() { return this.pincolor; }
	/**
	 * Set the the pin color as one of Titanium.Map.ANNOTATION_RED, Titanium.Map.ANNOTATION_GREEN or Titanium.Map.ANNOTATION_PURPLE.
	 * @param {Integer} value New value to set.
	 * @alias Titanium_Map_Annotation.setPincolor
	 */
	this.setPincolor = function(value) { this.pincolor = value; }
	/**
	 * the right button image on the annotation. must either be a button type constant or url
	 * @alias Titanium_Map_Annotation.rightButton
	 * @property {Integer,String}
	 */
	this.rightButton = 0
	/**
	 * Get the the right button image on the annotation. must either be a button type constant or url
	 * @alias Titanium_Map_Annotation.getRightButton
	 * @return {Integer,String}
	 */
	this.getRightButton = function() { return this.rightButton; }
	/**
	 * Set the the right button image on the annotation. must either be a button type constant or url
	 * @param {Integer,String} value New value to set.
	 * @alias Titanium_Map_Annotation.setRightButton
	 */
	this.setRightButton = function(value) { this.rightButton = value; }
	/**
	 * a right view that is displayed on the annotation
	 * @alias Titanium_Map_Annotation.rightView
	 * @property {Object}
	 */
	this.rightView = {}
	/**
	 * Get the a right view that is displayed on the annotation
	 * @alias Titanium_Map_Annotation.getRightView
	 * @return {Object}
	 */
	this.getRightView = function() { return this.rightView; }
	/**
	 * Set the a right view that is displayed on the annotation
	 * @param {Object} value New value to set.
	 * @alias Titanium_Map_Annotation.setRightView
	 */
	this.setRightView = function(value) { this.rightView = value; }
	/**
	 * the secondary title of the annotation view
	 * @alias Titanium_Map_Annotation.subtitle
	 * @property {String}
	 */
	this.subtitle = ''
	/**
	 * Get the the secondary title of the annotation view
	 * @alias Titanium_Map_Annotation.getSubtitle
	 * @return {String}
	 */
	this.getSubtitle = function() { return this.subtitle; }
	/**
	 * Set the the secondary title of the annotation view
	 * @param {String} value New value to set.
	 * @alias Titanium_Map_Annotation.setSubtitle
	 */
	this.setSubtitle = function(value) { this.subtitle = value; }
	/**
	 * the key in the locale file to use for the subtitle property
	 * @alias Titanium_Map_Annotation.subtitleid
	 * @property {String}
	 */
	this.subtitleid = ''
	/**
	 * Get the the key in the locale file to use for the subtitle property
	 * @alias Titanium_Map_Annotation.getSubtitleid
	 * @return {String}
	 */
	this.getSubtitleid = function() { return this.subtitleid; }
	/**
	 * Set the the key in the locale file to use for the subtitle property
	 * @param {String} value New value to set.
	 * @alias Titanium_Map_Annotation.setSubtitleid
	 */
	this.setSubtitleid = function(value) { this.subtitleid = value; }
	/**
	 * the primary title of the annotation view
	 * @alias Titanium_Map_Annotation.title
	 * @property {String}
	 */
	this.title = ''
	/**
	 * Get the the primary title of the annotation view
	 * @alias Titanium_Map_Annotation.getTitle
	 * @return {String}
	 */
	this.getTitle = function() { return this.title; }
	/**
	 * Set the the primary title of the annotation view
	 * @param {String} value New value to set.
	 * @alias Titanium_Map_Annotation.setTitle
	 */
	this.setTitle = function(value) { this.title = value; }
	/**
	 * the key in the locale file to use for the title property
	 * @alias Titanium_Map_Annotation.titleid
	 * @property {String}
	 */
	this.titleid = ''
	/**
	 * Get the the key in the locale file to use for the title property
	 * @alias Titanium_Map_Annotation.getTitleid
	 * @return {String}
	 */
	this.getTitleid = function() { return this.titleid; }
	/**
	 * Set the the key in the locale file to use for the title property
	 * @param {String} value New value to set.
	 * @alias Titanium_Map_Annotation.setTitleid
	 */
	this.setTitleid = function(value) { this.titleid = value; }
	/**
	 * add an event listener for the instance to receive view triggered events
	 * @param {String} name name of the event
	 * @param {Function} callback callback function to invoke when the event is fired
	 * @alias Titanium_Map_Annotation.addEventListener
	 */
	this.addEventListener = function addEventListener(name,callback) { }
	/**
	 * fire a synthesized event to the views listener
	 * @param {String} name name of the event
	 * @param {Object} event event object
	 * @alias Titanium_Map_Annotation.fireEvent
	 */
	this.fireEvent = function fireEvent(name,event) { }
	/**
	 * remove a previously added event listener
	 * @param {String} name name of the event
	 * @param {Function} callback callback function passed in addEventListener
	 * @alias Titanium_Map_Annotation.removeEventListener
	 */
	this.removeEventListener = function removeEventListener(name,callback) { }
};

/**
 * The MapView is an object created by Titanium.Map.createView and is used for embedding native mapping capabilities as a view in your application.  With native maps, you can control the mapping location, the type of map, the zoom level and you can add custom annotations directly to the map.
 * @since 0.8
 */
function Titanium_Map_MapView() {
	/**
	 * a dictionary with properties x and y to indicate the anchor point value. anchor specifies the position by which animation should occur. center is 0.5, 0.5
	 * @alias Titanium_Map_MapView.anchorPoint
	 * @property {Object}
	 */
	this.anchorPoint = {}
	/**
	 * Get the a dictionary with properties x and y to indicate the anchor point value. anchor specifies the position by which animation should occur. center is 0.5, 0.5
	 * @alias Titanium_Map_MapView.getAnchorPoint
	 * @return {Object}
	 */
	this.getAnchorPoint = function() { return this.anchorPoint; }
	/**
	 * Set the a dictionary with properties x and y to indicate the anchor point value. anchor specifies the position by which animation should occur. center is 0.5, 0.5
	 * @param {Object} value New value to set.
	 * @alias Titanium_Map_MapView.setAnchorPoint
	 */
	this.setAnchorPoint = function(value) { this.anchorPoint = value; }
	/**
	 * boolean is mapping actions should be animated
	 * @alias Titanium_Map_MapView.animate
	 * @property {Boolean}
	 */
	this.animate = false
	/**
	 * Get the boolean is mapping actions should be animated
	 * @alias Titanium_Map_MapView.getAnimate
	 * @return {Boolean}
	 */
	this.getAnimate = function() { return this.animate; }
	/**
	 * Set the boolean is mapping actions should be animated
	 * @param {Boolean} value New value to set.
	 * @alias Titanium_Map_MapView.setAnimate
	 */
	this.setAnimate = function(value) { this.animate = value; }
	/**
	 * read-only object with x and y properties of where the view is during animation
	 * @alias Titanium_Map_MapView.animatedCenterPoint
	 * @property {Object}
	 */
	this.animatedCenterPoint = {}
	/**
	 * Get the read-only object with x and y properties of where the view is during animation
	 * @alias Titanium_Map_MapView.getAnimatedCenterPoint
	 * @return {Object}
	 */
	this.getAnimatedCenterPoint = function() { return this.animatedCenterPoint; }
	/**
	 * Set the read-only object with x and y properties of where the view is during animation
	 * @param {Object} value New value to set.
	 * @alias Titanium_Map_MapView.setAnimatedCenterPoint
	 */
	this.setAnimatedCenterPoint = function(value) { this.animatedCenterPoint = value; }
	/**
	 * an array of annotations to add to the map
	 * @alias Titanium_Map_MapView.annotations
	 * @property {Array}
	 */
	this.annotations = []
	/**
	 * Get the an array of annotations to add to the map
	 * @alias Titanium_Map_MapView.getAnnotations
	 * @return {Array}
	 */
	this.getAnnotations = function() { return this.annotations; }
	/**
	 * Set the an array of annotations to add to the map
	 * @param {Array} value New value to set.
	 * @alias Titanium_Map_MapView.setAnnotations
	 */
	this.setAnnotations = function(value) { this.annotations = value; }
	/**
	 * the background color of the view
	 * @alias Titanium_Map_MapView.backgroundColor
	 * @property {String}
	 */
	this.backgroundColor = ''
	/**
	 * Get the the background color of the view
	 * @alias Titanium_Map_MapView.getBackgroundColor
	 * @return {String}
	 */
	this.getBackgroundColor = function() { return this.backgroundColor; }
	/**
	 * Set the the background color of the view
	 * @param {String} value New value to set.
	 * @alias Titanium_Map_MapView.setBackgroundColor
	 */
	this.setBackgroundColor = function(value) { this.backgroundColor = value; }
	/**
	 * the disabled background color of the view. (Android)
	 * @alias Titanium_Map_MapView.backgroundDisabledColor
	 * @property {String}
	 */
	this.backgroundDisabledColor = ''
	/**
	 * Get the the disabled background color of the view. (Android)
	 * @alias Titanium_Map_MapView.getBackgroundDisabledColor
	 * @return {String}
	 */
	this.getBackgroundDisabledColor = function() { return this.backgroundDisabledColor; }
	/**
	 * Set the the disabled background color of the view. (Android)
	 * @param {String} value New value to set.
	 * @alias Titanium_Map_MapView.setBackgroundDisabledColor
	 */
	this.setBackgroundDisabledColor = function(value) { this.backgroundDisabledColor = value; }
	/**
	 * the disabled background image url of the view. (Android)
	 * @alias Titanium_Map_MapView.backgroundDisabledImage
	 * @property {String}
	 */
	this.backgroundDisabledImage = ''
	/**
	 * Get the the disabled background image url of the view. (Android)
	 * @alias Titanium_Map_MapView.getBackgroundDisabledImage
	 * @return {String}
	 */
	this.getBackgroundDisabledImage = function() { return this.backgroundDisabledImage; }
	/**
	 * Set the the disabled background image url of the view. (Android)
	 * @param {String} value New value to set.
	 * @alias Titanium_Map_MapView.setBackgroundDisabledImage
	 */
	this.setBackgroundDisabledImage = function(value) { this.backgroundDisabledImage = value; }
	/**
	 * the focused background color of the view. focusable must be true for normal views. (Android)
	 * @alias Titanium_Map_MapView.backgroundFocusedColor
	 * @property {String}
	 */
	this.backgroundFocusedColor = ''
	/**
	 * Get the the focused background color of the view. focusable must be true for normal views. (Android)
	 * @alias Titanium_Map_MapView.getBackgroundFocusedColor
	 * @return {String}
	 */
	this.getBackgroundFocusedColor = function() { return this.backgroundFocusedColor; }
	/**
	 * Set the the focused background color of the view. focusable must be true for normal views. (Android)
	 * @param {String} value New value to set.
	 * @alias Titanium_Map_MapView.setBackgroundFocusedColor
	 */
	this.setBackgroundFocusedColor = function(value) { this.backgroundFocusedColor = value; }
	/**
	 * the focused background image url of the view. focusable must be true for normal views. (Android)
	 * @alias Titanium_Map_MapView.backgroundFocusedImage
	 * @property {String}
	 */
	this.backgroundFocusedImage = ''
	/**
	 * Get the the focused background image url of the view. focusable must be true for normal views. (Android)
	 * @alias Titanium_Map_MapView.getBackgroundFocusedImage
	 * @return {String}
	 */
	this.getBackgroundFocusedImage = function() { return this.backgroundFocusedImage; }
	/**
	 * Set the the focused background image url of the view. focusable must be true for normal views. (Android)
	 * @param {String} value New value to set.
	 * @alias Titanium_Map_MapView.setBackgroundFocusedImage
	 */
	this.setBackgroundFocusedImage = function(value) { this.backgroundFocusedImage = value; }
	/**
	 * a background gradient for the view with the properties: type,startPoint,endPoint,startRadius,endRadius,backfillStart,backfillEnd,colors.
	 * @alias Titanium_Map_MapView.backgroundGradient
	 * @property {Object}
	 */
	this.backgroundGradient = {}
	/**
	 * Get the a background gradient for the view with the properties: type,startPoint,endPoint,startRadius,endRadius,backfillStart,backfillEnd,colors.
	 * @alias Titanium_Map_MapView.getBackgroundGradient
	 * @return {Object}
	 */
	this.getBackgroundGradient = function() { return this.backgroundGradient; }
	/**
	 * Set the a background gradient for the view with the properties: type,startPoint,endPoint,startRadius,endRadius,backfillStart,backfillEnd,colors.
	 * @param {Object} value New value to set.
	 * @alias Titanium_Map_MapView.setBackgroundGradient
	 */
	this.setBackgroundGradient = function(value) { this.backgroundGradient = value; }
	/**
	 * the background image url of the view
	 * @alias Titanium_Map_MapView.backgroundImage
	 * @property {String}
	 */
	this.backgroundImage = ''
	/**
	 * Get the the background image url of the view
	 * @alias Titanium_Map_MapView.getBackgroundImage
	 * @return {String}
	 */
	this.getBackgroundImage = function() { return this.backgroundImage; }
	/**
	 * Set the the background image url of the view
	 * @param {String} value New value to set.
	 * @alias Titanium_Map_MapView.setBackgroundImage
	 */
	this.setBackgroundImage = function(value) { this.backgroundImage = value; }
	/**
	 * End caps specify the portion of an image that should not be resized when an image is stretched. This technique is used to implement buttons and other resizable image-based interface elements. When a button with end caps is resized, the resizing occurs only in the middle of the button, in the region between the end caps. The end caps themselves keep their original size and appearance. This property specifies the size of the left end cap. The middle (stretchable) portion is assumed to be 1 pixel wide. The right end cap is therefore computed by adding the size of the left end cap and the middle portion together and then subtracting that value from the width of the image
	 * @alias Titanium_Map_MapView.backgroundLeftCap
	 * @property {Float}
	 */
	this.backgroundLeftCap = 0.0
	/**
	 * Get the End caps specify the portion of an image that should not be resized when an image is stretched. This technique is used to implement buttons and other resizable image-based interface elements. When a button with end caps is resized, the resizing occurs only in the middle of the button, in the region between the end caps. The end caps themselves keep their original size and appearance. This property specifies the size of the left end cap. The middle (stretchable) portion is assumed to be 1 pixel wide. The right end cap is therefore computed by adding the size of the left end cap and the middle portion together and then subtracting that value from the width of the image
	 * @alias Titanium_Map_MapView.getBackgroundLeftCap
	 * @return {Float}
	 */
	this.getBackgroundLeftCap = function() { return this.backgroundLeftCap; }
	/**
	 * Set the End caps specify the portion of an image that should not be resized when an image is stretched. This technique is used to implement buttons and other resizable image-based interface elements. When a button with end caps is resized, the resizing occurs only in the middle of the button, in the region between the end caps. The end caps themselves keep their original size and appearance. This property specifies the size of the left end cap. The middle (stretchable) portion is assumed to be 1 pixel wide. The right end cap is therefore computed by adding the size of the left end cap and the middle portion together and then subtracting that value from the width of the image
	 * @param {Float} value New value to set.
	 * @alias Titanium_Map_MapView.setBackgroundLeftCap
	 */
	this.setBackgroundLeftCap = function(value) { this.backgroundLeftCap = value; }
	/**
	 * the selected background color of the view. focusable must be true for normal views. (Android)
	 * @alias Titanium_Map_MapView.backgroundSelectedColor
	 * @property {String}
	 */
	this.backgroundSelectedColor = ''
	/**
	 * Get the the selected background color of the view. focusable must be true for normal views. (Android)
	 * @alias Titanium_Map_MapView.getBackgroundSelectedColor
	 * @return {String}
	 */
	this.getBackgroundSelectedColor = function() { return this.backgroundSelectedColor; }
	/**
	 * Set the the selected background color of the view. focusable must be true for normal views. (Android)
	 * @param {String} value New value to set.
	 * @alias Titanium_Map_MapView.setBackgroundSelectedColor
	 */
	this.setBackgroundSelectedColor = function(value) { this.backgroundSelectedColor = value; }
	/**
	 * the selected background image url of the view. focusable must be true for normal views. (Android)
	 * @alias Titanium_Map_MapView.backgroundSelectedImage
	 * @property {String}
	 */
	this.backgroundSelectedImage = ''
	/**
	 * Get the the selected background image url of the view. focusable must be true for normal views. (Android)
	 * @alias Titanium_Map_MapView.getBackgroundSelectedImage
	 * @return {String}
	 */
	this.getBackgroundSelectedImage = function() { return this.backgroundSelectedImage; }
	/**
	 * Set the the selected background image url of the view. focusable must be true for normal views. (Android)
	 * @param {String} value New value to set.
	 * @alias Titanium_Map_MapView.setBackgroundSelectedImage
	 */
	this.setBackgroundSelectedImage = function(value) { this.backgroundSelectedImage = value; }
	/**
	 * End caps specify the portion of an image that should not be resized when an image is stretched. This technique is used to implement buttons and other resizable image-based interface elements. When a button with end caps is resized, the resizing occurs only in the middle of the button, in the region between the end caps. The end caps themselves keep their original size and appearance. This property specifies the size of the top end cap. The middle (stretchable) portion is assumed to be 1 pixel wide. The bottom end cap is therefore computed by adding the size of the top end cap and the middle portion together and then subtracting that value from the height of the image
	 * @alias Titanium_Map_MapView.backgroundTopCap
	 * @property {Float}
	 */
	this.backgroundTopCap = 0.0
	/**
	 * Get the End caps specify the portion of an image that should not be resized when an image is stretched. This technique is used to implement buttons and other resizable image-based interface elements. When a button with end caps is resized, the resizing occurs only in the middle of the button, in the region between the end caps. The end caps themselves keep their original size and appearance. This property specifies the size of the top end cap. The middle (stretchable) portion is assumed to be 1 pixel wide. The bottom end cap is therefore computed by adding the size of the top end cap and the middle portion together and then subtracting that value from the height of the image
	 * @alias Titanium_Map_MapView.getBackgroundTopCap
	 * @return {Float}
	 */
	this.getBackgroundTopCap = function() { return this.backgroundTopCap; }
	/**
	 * Set the End caps specify the portion of an image that should not be resized when an image is stretched. This technique is used to implement buttons and other resizable image-based interface elements. When a button with end caps is resized, the resizing occurs only in the middle of the button, in the region between the end caps. The end caps themselves keep their original size and appearance. This property specifies the size of the top end cap. The middle (stretchable) portion is assumed to be 1 pixel wide. The bottom end cap is therefore computed by adding the size of the top end cap and the middle portion together and then subtracting that value from the height of the image
	 * @param {Float} value New value to set.
	 * @alias Titanium_Map_MapView.setBackgroundTopCap
	 */
	this.setBackgroundTopCap = function(value) { this.backgroundTopCap = value; }
	/**
	 * the border color of the view
	 * @alias Titanium_Map_MapView.borderColor
	 * @property {String}
	 */
	this.borderColor = ''
	/**
	 * Get the the border color of the view
	 * @alias Titanium_Map_MapView.getBorderColor
	 * @return {String}
	 */
	this.getBorderColor = function() { return this.borderColor; }
	/**
	 * Set the the border color of the view
	 * @param {String} value New value to set.
	 * @alias Titanium_Map_MapView.setBorderColor
	 */
	this.setBorderColor = function(value) { this.borderColor = value; }
	/**
	 * the border radius of the view
	 * @alias Titanium_Map_MapView.borderRadius
	 * @property {Float}
	 */
	this.borderRadius = 0.0
	/**
	 * Get the the border radius of the view
	 * @alias Titanium_Map_MapView.getBorderRadius
	 * @return {Float}
	 */
	this.getBorderRadius = function() { return this.borderRadius; }
	/**
	 * Set the the border radius of the view
	 * @param {Float} value New value to set.
	 * @alias Titanium_Map_MapView.setBorderRadius
	 */
	this.setBorderRadius = function(value) { this.borderRadius = value; }
	/**
	 * the border width of the view
	 * @alias Titanium_Map_MapView.borderWidth
	 * @property {Float}
	 */
	this.borderWidth = 0.0
	/**
	 * Get the the border width of the view
	 * @alias Titanium_Map_MapView.getBorderWidth
	 * @return {Float}
	 */
	this.getBorderWidth = function() { return this.borderWidth; }
	/**
	 * Set the the border width of the view
	 * @param {Float} value New value to set.
	 * @alias Titanium_Map_MapView.setBorderWidth
	 */
	this.setBorderWidth = function(value) { this.borderWidth = value; }
	/**
	 * property for the view bottom position. This position is relative to the view's parent. Can be either a float value or a dimension string ie 'auto' (default), '50%' (iPhone only).
	 * @alias Titanium_Map_MapView.bottom
	 * @property {Float,String}
	 */
	this.bottom = 0.0
	/**
	 * Get the property for the view bottom position. This position is relative to the view's parent. Can be either a float value or a dimension string ie 'auto' (default), '50%' (iPhone only).
	 * @alias Titanium_Map_MapView.getBottom
	 * @return {Float,String}
	 */
	this.getBottom = function() { return this.bottom; }
	/**
	 * Set the property for the view bottom position. This position is relative to the view's parent. Can be either a float value or a dimension string ie 'auto' (default), '50%' (iPhone only).
	 * @param {Float,String} value New value to set.
	 * @alias Titanium_Map_MapView.setBottom
	 */
	this.setBottom = function(value) { this.bottom = value; }
	/**
	 * a dictionary with properties x and y to indicate the center of the views position relative to the parent view
	 * @alias Titanium_Map_MapView.center
	 * @property {Object}
	 */
	this.center = {}
	/**
	 * Get the a dictionary with properties x and y to indicate the center of the views position relative to the parent view
	 * @alias Titanium_Map_MapView.getCenter
	 * @return {Object}
	 */
	this.getCenter = function() { return this.center; }
	/**
	 * Set the a dictionary with properties x and y to indicate the center of the views position relative to the parent view
	 * @param {Object} value New value to set.
	 * @alias Titanium_Map_MapView.setCenter
	 */
	this.setCenter = function(value) { this.center = value; }
	/**
	 * Set true if you want a view to be focusable when navigating with the trackball or D-Pad. Default: false. (Android Only)
	 * @alias Titanium_Map_MapView.focusable
	 * @property {Boolean}
	 */
	this.focusable = false
	/**
	 * Get the Set true if you want a view to be focusable when navigating with the trackball or D-Pad. Default: false. (Android Only)
	 * @alias Titanium_Map_MapView.getFocusable
	 * @return {Boolean}
	 */
	this.getFocusable = function() { return this.focusable; }
	/**
	 * Set the Set true if you want a view to be focusable when navigating with the trackball or D-Pad. Default: false. (Android Only)
	 * @param {Boolean} value New value to set.
	 * @alias Titanium_Map_MapView.setFocusable
	 */
	this.setFocusable = function(value) { this.focusable = value; }
	/**
	 * the font family
	 * @alias Titanium_Map_MapView.font-family
	 * @property {String}
	 */
	this.font-family = ''
	/**
	 * Get the the font family
	 * @alias Titanium_Map_MapView.getFont-family
	 * @return {String}
	 */
	this.getFont-family = function() { return this.font-family; }
	/**
	 * Set the the font family
	 * @param {String} value New value to set.
	 * @alias Titanium_Map_MapView.setFont-family
	 */
	this.setFont-family = function(value) { this.font-family = value; }
	/**
	 * the font size
	 * @alias Titanium_Map_MapView.font-size
	 * @property {String}
	 */
	this.font-size = ''
	/**
	 * Get the the font size
	 * @alias Titanium_Map_MapView.getFont-size
	 * @return {String}
	 */
	this.getFont-size = function() { return this.font-size; }
	/**
	 * Set the the font size
	 * @param {String} value New value to set.
	 * @alias Titanium_Map_MapView.setFont-size
	 */
	this.setFont-size = function(value) { this.font-size = value; }
	/**
	 * the font style, either normal or italics
	 * @alias Titanium_Map_MapView.font-style
	 * @property {String}
	 */
	this.font-style = ''
	/**
	 * Get the the font style, either normal or italics
	 * @alias Titanium_Map_MapView.getFont-style
	 * @return {String}
	 */
	this.getFont-style = function() { return this.font-style; }
	/**
	 * Set the the font style, either normal or italics
	 * @param {String} value New value to set.
	 * @alias Titanium_Map_MapView.setFont-style
	 */
	this.setFont-style = function(value) { this.font-style = value; }
	/**
	 * the font weight, either normal or bold
	 * @alias Titanium_Map_MapView.font-weight
	 * @property {String}
	 */
	this.font-weight = ''
	/**
	 * Get the the font weight, either normal or bold
	 * @alias Titanium_Map_MapView.getFont-weight
	 * @return {String}
	 */
	this.getFont-weight = function() { return this.font-weight; }
	/**
	 * Set the the font weight, either normal or bold
	 * @param {String} value New value to set.
	 * @alias Titanium_Map_MapView.setFont-weight
	 */
	this.setFont-weight = function(value) { this.font-weight = value; }
	/**
	 * property for the view height. Can be either a float value or a dimension string ie 'auto' (default), '50%' (iPhone only).
	 * @alias Titanium_Map_MapView.height
	 * @property {Float,String}
	 */
	this.height = 0.0
	/**
	 * Get the property for the view height. Can be either a float value or a dimension string ie 'auto' (default), '50%' (iPhone only).
	 * @alias Titanium_Map_MapView.getHeight
	 * @return {Float,String}
	 */
	this.getHeight = function() { return this.height; }
	/**
	 * Set the property for the view height. Can be either a float value or a dimension string ie 'auto' (default), '50%' (iPhone only).
	 * @param {Float,String} value New value to set.
	 * @alias Titanium_Map_MapView.setHeight
	 */
	this.setHeight = function(value) { this.height = value; }
	/**
	 * property for the view left position. This position is relative to the view's parent. Can be either a float value or a dimension string ie 'auto' (default), '50%' (iPhone only).
	 * @alias Titanium_Map_MapView.left
	 * @property {Float,String}
	 */
	this.left = 0.0
	/**
	 * Get the property for the view left position. This position is relative to the view's parent. Can be either a float value or a dimension string ie 'auto' (default), '50%' (iPhone only).
	 * @alias Titanium_Map_MapView.getLeft
	 * @return {Float,String}
	 */
	this.getLeft = function() { return this.left; }
	/**
	 * Set the property for the view left position. This position is relative to the view's parent. Can be either a float value or a dimension string ie 'auto' (default), '50%' (iPhone only).
	 * @param {Float,String} value New value to set.
	 * @alias Titanium_Map_MapView.setLeft
	 */
	this.setLeft = function(value) { this.left = value; }
	/**
	 * a dictionary that specifies the following properties specifying the region location to set the map: latitudeDelta, longitudeDelta, latitude, longitude.
	 * @alias Titanium_Map_MapView.location
	 * @property {Object}
	 */
	this.location = {}
	/**
	 * Get the a dictionary that specifies the following properties specifying the region location to set the map: latitudeDelta, longitudeDelta, latitude, longitude.
	 * @alias Titanium_Map_MapView.getLocation
	 * @return {Object}
	 */
	this.getLocation = function() { return this.location; }
	/**
	 * Set the a dictionary that specifies the following properties specifying the region location to set the map: latitudeDelta, longitudeDelta, latitude, longitude.
	 * @param {Object} value New value to set.
	 * @alias Titanium_Map_MapView.setLocation
	 */
	this.setLocation = function(value) { this.location = value; }
	/**
	 * the map type constant of either Titanium.Map.STANDARD_TYPE, Titanium.Map.SATELLITE_TYPE or Titanium.Map.HYBRID_TYPE.
	 * @alias Titanium_Map_MapView.mapType
	 * @property {Integer}
	 */
	this.mapType = 0
	/**
	 * Get the the map type constant of either Titanium.Map.STANDARD_TYPE, Titanium.Map.SATELLITE_TYPE or Titanium.Map.HYBRID_TYPE.
	 * @alias Titanium_Map_MapView.getMapType
	 * @return {Integer}
	 */
	this.getMapType = function() { return this.mapType; }
	/**
	 * Set the the map type constant of either Titanium.Map.STANDARD_TYPE, Titanium.Map.SATELLITE_TYPE or Titanium.Map.HYBRID_TYPE.
	 * @param {Integer} value New value to set.
	 * @alias Titanium_Map_MapView.setMapType
	 */
	this.setMapType = function(value) { this.mapType = value; }
	/**
	 * the opacity from 0.0-1.0
	 * @alias Titanium_Map_MapView.opacity
	 * @property {Float}
	 */
	this.opacity = 0.0
	/**
	 * Get the the opacity from 0.0-1.0
	 * @alias Titanium_Map_MapView.getOpacity
	 * @return {Float}
	 */
	this.getOpacity = function() { return this.opacity; }
	/**
	 * Set the the opacity from 0.0-1.0
	 * @param {Float} value New value to set.
	 * @alias Titanium_Map_MapView.setOpacity
	 */
	this.setOpacity = function(value) { this.opacity = value; }
	/**
	 * a dictionary that specifies the following properties specifying the region location to set the map: latitudeDelta, longitudeDelta, latitude, longitude.
	 * @alias Titanium_Map_MapView.region
	 * @property {Object}
	 */
	this.region = {}
	/**
	 * Get the a dictionary that specifies the following properties specifying the region location to set the map: latitudeDelta, longitudeDelta, latitude, longitude.
	 * @alias Titanium_Map_MapView.getRegion
	 * @return {Object}
	 */
	this.getRegion = function() { return this.region; }
	/**
	 * Set the a dictionary that specifies the following properties specifying the region location to set the map: latitudeDelta, longitudeDelta, latitude, longitude.
	 * @param {Object} value New value to set.
	 * @alias Titanium_Map_MapView.setRegion
	 */
	this.setRegion = function(value) { this.region = value; }
	/**
	 * boolean to indicate if the map should attempt to fit the map view into the region in the visible view
	 * @alias Titanium_Map_MapView.regionFit
	 * @property {Boolean}
	 */
	this.regionFit = false
	/**
	 * Get the boolean to indicate if the map should attempt to fit the map view into the region in the visible view
	 * @alias Titanium_Map_MapView.getRegionFit
	 * @return {Boolean}
	 */
	this.getRegionFit = function() { return this.regionFit; }
	/**
	 * Set the boolean to indicate if the map should attempt to fit the map view into the region in the visible view
	 * @param {Boolean} value New value to set.
	 * @alias Titanium_Map_MapView.setRegionFit
	 */
	this.setRegionFit = function(value) { this.regionFit = value; }
	/**
	 * property for the view right position. This position is relative to the view's parent. Can be either a float value or a dimension string ie 'auto' (default), '50%' (iPhone only).
	 * @alias Titanium_Map_MapView.right
	 * @property {Float,String}
	 */
	this.right = 0.0
	/**
	 * Get the property for the view right position. This position is relative to the view's parent. Can be either a float value or a dimension string ie 'auto' (default), '50%' (iPhone only).
	 * @alias Titanium_Map_MapView.getRight
	 * @return {Float,String}
	 */
	this.getRight = function() { return this.right; }
	/**
	 * Set the property for the view right position. This position is relative to the view's parent. Can be either a float value or a dimension string ie 'auto' (default), '50%' (iPhone only).
	 * @param {Float,String} value New value to set.
	 * @alias Titanium_Map_MapView.setRight
	 */
	this.setRight = function(value) { this.right = value; }
	/**
	 * the size of the view as a dictionary of width and height properties
	 * @alias Titanium_Map_MapView.size
	 * @property {Object}
	 */
	this.size = {}
	/**
	 * Get the the size of the view as a dictionary of width and height properties
	 * @alias Titanium_Map_MapView.getSize
	 * @return {Object}
	 */
	this.getSize = function() { return this.size; }
	/**
	 * Set the the size of the view as a dictionary of width and height properties
	 * @param {Object} value New value to set.
	 * @alias Titanium_Map_MapView.setSize
	 */
	this.setSize = function(value) { this.size = value; }
	/**
	 * One of Titanium.UI.Android.SOFT_KEYBOARD_DEFAULT_ON_FOCUS, Titanium.UI.Android.SOFT_KEYBOARD_HIDE_ON_FOCUS, or Titanium.UI.Android.SOFT_KEYBOARD_SHOW_ON_FOCUS. (Android only)
	 * @alias Titanium_Map_MapView.softKeyboardOnFocus
	 * @property {Integer}
	 */
	this.softKeyboardOnFocus = 0
	/**
	 * Get the One of Titanium.UI.Android.SOFT_KEYBOARD_DEFAULT_ON_FOCUS, Titanium.UI.Android.SOFT_KEYBOARD_HIDE_ON_FOCUS, or Titanium.UI.Android.SOFT_KEYBOARD_SHOW_ON_FOCUS. (Android only)
	 * @alias Titanium_Map_MapView.getSoftKeyboardOnFocus
	 * @return {Integer}
	 */
	this.getSoftKeyboardOnFocus = function() { return this.softKeyboardOnFocus; }
	/**
	 * Set the One of Titanium.UI.Android.SOFT_KEYBOARD_DEFAULT_ON_FOCUS, Titanium.UI.Android.SOFT_KEYBOARD_HIDE_ON_FOCUS, or Titanium.UI.Android.SOFT_KEYBOARD_SHOW_ON_FOCUS. (Android only)
	 * @param {Integer} value New value to set.
	 * @alias Titanium_Map_MapView.setSoftKeyboardOnFocus
	 */
	this.setSoftKeyboardOnFocus = function(value) { this.softKeyboardOnFocus = value; }
	/**
	 * property for the view top position. This position is relative to the view's parent. Can be either a float value or a dimension string ie 'auto' (default), '50%' (iPhone only).
	 * @alias Titanium_Map_MapView.top
	 * @property {Float,String}
	 */
	this.top = 0.0
	/**
	 * Get the property for the view top position. This position is relative to the view's parent. Can be either a float value or a dimension string ie 'auto' (default), '50%' (iPhone only).
	 * @alias Titanium_Map_MapView.getTop
	 * @return {Float,String}
	 */
	this.getTop = function() { return this.top; }
	/**
	 * Set the property for the view top position. This position is relative to the view's parent. Can be either a float value or a dimension string ie 'auto' (default), '50%' (iPhone only).
	 * @param {Float,String} value New value to set.
	 * @alias Titanium_Map_MapView.setTop
	 */
	this.setTop = function(value) { this.top = value; }
	/**
	 * a boolean indicating if the view should receive touch events (true, default) or forward them to peers (false)
	 * @alias Titanium_Map_MapView.touchEnabled
	 * @property {Boolean}
	 */
	this.touchEnabled = false
	/**
	 * Get the a boolean indicating if the view should receive touch events (true, default) or forward them to peers (false)
	 * @alias Titanium_Map_MapView.getTouchEnabled
	 * @return {Boolean}
	 */
	this.getTouchEnabled = function() { return this.touchEnabled; }
	/**
	 * Set the a boolean indicating if the view should receive touch events (true, default) or forward them to peers (false)
	 * @param {Boolean} value New value to set.
	 * @alias Titanium_Map_MapView.setTouchEnabled
	 */
	this.setTouchEnabled = function(value) { this.touchEnabled = value; }
	/**
	 * the transformation matrix to apply to the view
	 * @alias Titanium_Map_MapView.transform
	 * @property {Object}
	 */
	this.transform = {}
	/**
	 * Get the the transformation matrix to apply to the view
	 * @alias Titanium_Map_MapView.getTransform
	 * @return {Object}
	 */
	this.getTransform = function() { return this.transform; }
	/**
	 * Set the the transformation matrix to apply to the view
	 * @param {Object} value New value to set.
	 * @alias Titanium_Map_MapView.setTransform
	 */
	this.setTransform = function(value) { this.transform = value; }
	/**
	 * boolean to indicate if the map should show the user's current device location as a pin on the map
	 * @alias Titanium_Map_MapView.userLocation
	 * @property {Boolean}
	 */
	this.userLocation = false
	/**
	 * Get the boolean to indicate if the map should show the user's current device location as a pin on the map
	 * @alias Titanium_Map_MapView.getUserLocation
	 * @return {Boolean}
	 */
	this.getUserLocation = function() { return this.userLocation; }
	/**
	 * Set the boolean to indicate if the map should show the user's current device location as a pin on the map
	 * @param {Boolean} value New value to set.
	 * @alias Titanium_Map_MapView.setUserLocation
	 */
	this.setUserLocation = function(value) { this.userLocation = value; }
	/**
	 * a boolean of the visibility of the view
	 * @alias Titanium_Map_MapView.visible
	 * @property {Boolean}
	 */
	this.visible = false
	/**
	 * Get the a boolean of the visibility of the view
	 * @alias Titanium_Map_MapView.getVisible
	 * @return {Boolean}
	 */
	this.getVisible = function() { return this.visible; }
	/**
	 * Set the a boolean of the visibility of the view
	 * @param {Boolean} value New value to set.
	 * @alias Titanium_Map_MapView.setVisible
	 */
	this.setVisible = function(value) { this.visible = value; }
	/**
	 * property for the view width. Can be either a float value or a dimension string ie 'auto' (default), '50%' (iPhone only).
	 * @alias Titanium_Map_MapView.width
	 * @property {Float,String}
	 */
	this.width = 0.0
	/**
	 * Get the property for the view width. Can be either a float value or a dimension string ie 'auto' (default), '50%' (iPhone only).
	 * @alias Titanium_Map_MapView.getWidth
	 * @return {Float,String}
	 */
	this.getWidth = function() { return this.width; }
	/**
	 * Set the property for the view width. Can be either a float value or a dimension string ie 'auto' (default), '50%' (iPhone only).
	 * @param {Float,String} value New value to set.
	 * @alias Titanium_Map_MapView.setWidth
	 */
	this.setWidth = function(value) { this.width = value; }
	/**
	 * the z index position relative to other sibling views
	 * @alias Titanium_Map_MapView.zIndex
	 * @property {Integer}
	 */
	this.zIndex = 0
	/**
	 * Get the the z index position relative to other sibling views
	 * @alias Titanium_Map_MapView.getZIndex
	 * @return {Integer}
	 */
	this.getZIndex = function() { return this.zIndex; }
	/**
	 * Set the the z index position relative to other sibling views
	 * @param {Integer} value New value to set.
	 * @alias Titanium_Map_MapView.setZIndex
	 */
	this.setZIndex = function(value) { this.zIndex = value; }
	/**
	 * add a child to the view hierarchy
	 * @param {Object} view the view to add to this views hiearchy
	 * @alias Titanium_Map_MapView.add
	 */
	this.add = function add(view) { }
	/**
	 * add a new annotation to the map
	 * @param {Object} annotation either a dictionary of properties for the annotation or a [Titanium.Map.Annotation](Titanium.Map.Annotation) instance.
	 * @alias Titanium_Map_MapView.addAnnotation
	 */
	this.addAnnotation = function addAnnotation(annotation) { }
	/**
	 * add one or more new annotation to the map
	 * @param {Array} annotations an array of either a dictionary of properties for the annotation or a [Titanium.Map.Annotation](Titanium.Map.Annotation) instance.
	 * @alias Titanium_Map_MapView.addAnnotations
	 */
	this.addAnnotations = function addAnnotations(annotations) { }
	/**
	 * add an event listener for the instance to receive view triggered events
	 * @param {String} name name of the event
	 * @param {Function} callback callback function to invoke when the event is fired
	 * @alias Titanium_Map_MapView.addEventListener
	 */
	this.addEventListener = function addEventListener(name,callback) { }
	/**
	 * add a route. currently only supported on iphone
	 * @param {Object} route dictionary with the properties: <tt>name</tt> route name, <tt>points</tt> dictionary of values with longitude and latitude keys, <tt>color</tt> for the line color and <tt>width</tt> for the line width.
	 * @alias Titanium_Map_MapView.addRoute
	 */
	this.addRoute = function addRoute(route) { }
	/**
	 * animate the view
	 * @param {Object} obj either a dictionary of animation properties or an Animation object
	 * @param {Function} callback function to be invoked upon completion of the animation
	 * @alias Titanium_Map_MapView.animate
	 */
	this.animate = function animate(obj,callback) { }
	/**
	 * cause the annotation to be deselected (hidden).
	 * @param {String,Object} annotation either a string of the annotation title or a [Titanium.Map.Annotation](Titanium.Map.Annotation) reference.
	 * @alias Titanium_Map_MapView.deselectAnnotation
	 */
	this.deselectAnnotation = function deselectAnnotation(annotation) { }
	/**
	 * fire a synthesized event to the views listener
	 * @param {String} name name of the event
	 * @param {Object} event event object
	 * @alias Titanium_Map_MapView.fireEvent
	 */
	this.fireEvent = function fireEvent(name,event) { }
	/**
	 * hide the view
	 * @alias Titanium_Map_MapView.hide
	 */
	this.hide = function hide() { }
	/**
	 * remove a previously add view from the view hiearchy
	 * @param {Object} view the view to remove from this views hiearchy
	 * @alias Titanium_Map_MapView.remove
	 */
	this.remove = function remove(view) { }
	/**
	 * removes all annotations added to the map
	 * @alias Titanium_Map_MapView.removeAllAnnotations
	 */
	this.removeAllAnnotations = function removeAllAnnotations() { }
	/**
	 * remove an existing annotation from the map
	 * @param {String,Object} annotation either a string of the annotation title or a [Titanium.Map.Annotation](Titanium.Map.Annotation) reference.
	 * @alias Titanium_Map_MapView.removeAnnotation
	 */
	this.removeAnnotation = function removeAnnotation(annotation) { }
	/**
	 * remove one or more existing annotations from the map
	 * @param {Array} annotation an array of either a string of the annotation title or a [Titanium.Map.Annotation](Titanium.Map.Annotation) reference.
	 * @alias Titanium_Map_MapView.removeAnnotations
	 */
	this.removeAnnotations = function removeAnnotations(annotation) { }
	/**
	 * remove a previously added event listener
	 * @param {String} name name of the event
	 * @param {Function} callback callback function passed in addEventListener
	 * @alias Titanium_Map_MapView.removeEventListener
	 */
	this.removeEventListener = function removeEventListener(name,callback) { }
	/**
	 * remove a previously added route. currently only supported on iphone
	 * @param {Object} route same route object used during addRoute
	 * @alias Titanium_Map_MapView.removeRoute
	 */
	this.removeRoute = function removeRoute(route) { }
	/**
	 * cause the annotation to be selected (shown).
	 * @param {String,Object} annotation either a string of the annotation title or a [Titanium.Map.Annotation](Titanium.Map.Annotation) reference.
	 * @alias Titanium_Map_MapView.selectAnnotation
	 */
	this.selectAnnotation = function selectAnnotation(annotation) { }
	/**
	 * set and center the map location.
	 * @param {Object} location a dictionary that specifies the following properties specifying the location to set the map: <tt>latitudeDelta</tt>, <tt>longitudeDelta</tt>, <tt>latitude</tt>, <tt>longitude</tt>.
	 * @alias Titanium_Map_MapView.setLocation
	 */
	this.setLocation = function setLocation(location) { }
	/**
	 * set the type of map (satellite, hybrid, standard)
	 * @param {Integer} mapType the map type constant of either <a href="Titanium.Map.STANDARD_TYPE-property.html">Titanium.Map.STANDARD_TYPE</a>, <a href="Titanium.Map.SATELLITE_TYPE-property.html">Titanium.Map.SATELLITE_TYPE</a> or <a href="Titanium.Map.HYBRID_TYPE-property.html">Titanium.Map.HYBRID_TYPE</a>.
	 * @alias Titanium_Map_MapView.setMapType
	 */
	this.setMapType = function setMapType(mapType) { }
	/**
	 * make the view visible
	 * @alias Titanium_Map_MapView.show
	 */
	this.show = function show() { }
	/**
	 * return a Blob image of the rendered view
	 * @param {Function} f function to be invoked upon completion. if non-null, this method will be performed asynchronously. if null, it will be performed immediately
	 * @alias Titanium_Map_MapView.toImage
	 * @return {Object}
	 */
	this.toImage = function toImage(f) { return {}; }
	/**
	 * zoom in or out of the map
	 * @param {Double} level zoom level (can be positive or negative)
	 * @alias Titanium_Map_MapView.zoom
	 */
	this.zoom = function zoom(level) { }
};

/**
 * The AudioPlayer object is returned by Titanium.Media.createAudioPlayer and is used for streaming audio to the device and low-level control of the audio playback.
 * @since 0.9
 */
function Titanium_Media_AudioPlayer() {
	/**
	 * boolean to indicate if audio should continue playing even if Activity is paused (Android only as of 1.3.0)
	 * @alias Titanium_Media_AudioPlayer.allowBackground
	 * @property {Boolean}
	 */
	this.allowBackground = false
	/**
	 * Get the boolean to indicate if audio should continue playing even if Activity is paused (Android only as of 1.3.0)
	 * @alias Titanium_Media_AudioPlayer.getAllowBackground
	 * @return {Boolean}
	 */
	this.getAllowBackground = function() { return this.allowBackground; }
	/**
	 * Set the boolean to indicate if audio should continue playing even if Activity is paused (Android only as of 1.3.0)
	 * @param {Boolean} value New value to set.
	 * @alias Titanium_Media_AudioPlayer.setAllowBackground
	 */
	this.setAllowBackground = function(value) { this.allowBackground = value; }
	/**
	 * bit rate of the current playback stream
	 * @alias Titanium_Media_AudioPlayer.bitRate
	 * @property {Double}
	 */
	this.bitRate = 0.0
	/**
	 * Get the bit rate of the current playback stream
	 * @alias Titanium_Media_AudioPlayer.getBitRate
	 * @return {Double}
	 */
	this.getBitRate = function() { return this.bitRate; }
	/**
	 * Set the bit rate of the current playback stream
	 * @param {Double} value New value to set.
	 * @alias Titanium_Media_AudioPlayer.setBitRate
	 */
	this.setBitRate = function(value) { this.bitRate = value; }
	/**
	 * returns boolean indicating if the playback is idle
	 * @alias Titanium_Media_AudioPlayer.idle
	 * @property {Boolean}
	 */
	this.idle = false
	/**
	 * Get the returns boolean indicating if the playback is idle
	 * @alias Titanium_Media_AudioPlayer.getIdle
	 * @return {Boolean}
	 */
	this.getIdle = function() { return this.idle; }
	/**
	 * Set the returns boolean indicating if the playback is idle
	 * @param {Boolean} value New value to set.
	 * @alias Titanium_Media_AudioPlayer.setIdle
	 */
	this.setIdle = function(value) { this.idle = value; }
	/**
	 * returns boolean indicating if the playback is paused
	 * @alias Titanium_Media_AudioPlayer.paused
	 * @property {Boolean}
	 */
	this.paused = false
	/**
	 * Get the returns boolean indicating if the playback is paused
	 * @alias Titanium_Media_AudioPlayer.getPaused
	 * @return {Boolean}
	 */
	this.getPaused = function() { return this.paused; }
	/**
	 * Set the returns boolean indicating if the playback is paused
	 * @param {Boolean} value New value to set.
	 * @alias Titanium_Media_AudioPlayer.setPaused
	 */
	this.setPaused = function(value) { this.paused = value; }
	/**
	 * returns boolean indicating if the playback is streaming audio
	 * @alias Titanium_Media_AudioPlayer.playing
	 * @property {Boolean}
	 */
	this.playing = false
	/**
	 * Get the returns boolean indicating if the playback is streaming audio
	 * @alias Titanium_Media_AudioPlayer.getPlaying
	 * @return {Boolean}
	 */
	this.getPlaying = function() { return this.playing; }
	/**
	 * Set the returns boolean indicating if the playback is streaming audio
	 * @param {Boolean} value New value to set.
	 * @alias Titanium_Media_AudioPlayer.setPlaying
	 */
	this.setPlaying = function(value) { this.playing = value; }
	/**
	 * returns the current playback progress. Will return zero if sampleRate has not yet been detected
	 * @alias Titanium_Media_AudioPlayer.progress
	 * @property {Double}
	 */
	this.progress = 0.0
	/**
	 * Get the returns the current playback progress. Will return zero if sampleRate has not yet been detected
	 * @alias Titanium_Media_AudioPlayer.getProgress
	 * @return {Double}
	 */
	this.getProgress = function() { return this.progress; }
	/**
	 * Set the returns the current playback progress. Will return zero if sampleRate has not yet been detected
	 * @param {Double} value New value to set.
	 * @alias Titanium_Media_AudioPlayer.setProgress
	 */
	this.setProgress = function(value) { this.progress = value; }
	/**
	 * returns int for the current state of playback
	 * @alias Titanium_Media_AudioPlayer.state
	 * @property {Integer}
	 */
	this.state = 0
	/**
	 * Get the returns int for the current state of playback
	 * @alias Titanium_Media_AudioPlayer.getState
	 * @return {Integer}
	 */
	this.getState = function() { return this.state; }
	/**
	 * Set the returns int for the current state of playback
	 * @param {Integer} value New value to set.
	 * @alias Titanium_Media_AudioPlayer.setState
	 */
	this.setState = function(value) { this.state = value; }
	/**
	 * returns the url for the current playback
	 * @alias Titanium_Media_AudioPlayer.url
	 * @property {String}
	 */
	this.url = ''
	/**
	 * Get the returns the url for the current playback
	 * @alias Titanium_Media_AudioPlayer.getUrl
	 * @return {String}
	 */
	this.getUrl = function() { return this.url; }
	/**
	 * Set the returns the url for the current playback
	 * @param {String} value New value to set.
	 * @alias Titanium_Media_AudioPlayer.setUrl
	 */
	this.setUrl = function(value) { this.url = value; }
	/**
	 * returns boolean indicating if the playback is waiting for audio data from the network
	 * @alias Titanium_Media_AudioPlayer.waiting
	 * @property {Boolean}
	 */
	this.waiting = false
	/**
	 * Get the returns boolean indicating if the playback is waiting for audio data from the network
	 * @alias Titanium_Media_AudioPlayer.getWaiting
	 * @return {Boolean}
	 */
	this.getWaiting = function() { return this.waiting; }
	/**
	 * Set the returns boolean indicating if the playback is waiting for audio data from the network
	 * @param {Boolean} value New value to set.
	 * @alias Titanium_Media_AudioPlayer.setWaiting
	 */
	this.setWaiting = function(value) { this.waiting = value; }
	/**
	 * add an event listener for the instance to receive view triggered events
	 * @param {String} name name of the event
	 * @param {Function} callback callback function to invoke when the event is fired
	 * @alias Titanium_Media_AudioPlayer.addEventListener
	 */
	this.addEventListener = function addEventListener(name,callback) { }
	/**
	 * fire a synthesized event to the views listener
	 * @param {String} name name of the event
	 * @param {Object} event event object
	 * @alias Titanium_Media_AudioPlayer.fireEvent
	 */
	this.fireEvent = function fireEvent(name,event) { }
	/**
	 * pause playback
	 * @alias Titanium_Media_AudioPlayer.pause
	 */
	this.pause = function pause() { }
	/**
	 * remove a previously added event listener
	 * @param {String} name name of the event
	 * @param {Function} callback callback function passed in addEventListener
	 * @alias Titanium_Media_AudioPlayer.removeEventListener
	 */
	this.removeEventListener = function removeEventListener(name,callback) { }
	/**
	 * control the playback of the audio
	 * @param {Boolean} paused pass true to pause the current playback temporarily, false to unpause it
	 * @alias Titanium_Media_AudioPlayer.setPaused
	 */
	this.setPaused = function setPaused(paused) { }
	/**
	 * change the url of the audio playback
	 * @param {String} url the new url
	 * @alias Titanium_Media_AudioPlayer.setUrl
	 */
	this.setUrl = function setUrl(url) { }
	/**
	 * start playback
	 * @alias Titanium_Media_AudioPlayer.start
	 */
	this.start = function start() { }
	/**
	 * convert a state into a textual description suitable for display
	 * @alias Titanium_Media_AudioPlayer.stateDescription
	 * @return {String}
	 */
	this.stateDescription = function stateDescription() { return ''; }
	/**
	 * stop playback
	 * @alias Titanium_Media_AudioPlayer.stop
	 */
	this.stop = function stop() { }
};

/**
 * The AudioRecorder object is returned by Titanium.Media.createAudioRecorder and is used for recording audio from the device microphone.
 * @since 0.9
 */
function Titanium_Media_AudioRecorder() {
	/**
	 * audio compression constant to be used for the recording
	 * @alias Titanium_Media_AudioRecorder.compression
	 * @property {Integer}
	 */
	this.compression = 0
	/**
	 * Get the audio compression constant to be used for the recording
	 * @alias Titanium_Media_AudioRecorder.getCompression
	 * @return {Integer}
	 */
	this.getCompression = function() { return this.compression; }
	/**
	 * Set the audio compression constant to be used for the recording
	 * @param {Integer} value New value to set.
	 * @alias Titanium_Media_AudioRecorder.setCompression
	 */
	this.setCompression = function(value) { this.compression = value; }
	/**
	 * audio format constant for used for the recording
	 * @alias Titanium_Media_AudioRecorder.format
	 * @property {Integer}
	 */
	this.format = 0
	/**
	 * Get the audio format constant for used for the recording
	 * @alias Titanium_Media_AudioRecorder.getFormat
	 * @return {Integer}
	 */
	this.getFormat = function() { return this.format; }
	/**
	 * Set the audio format constant for used for the recording
	 * @param {Integer} value New value to set.
	 * @alias Titanium_Media_AudioRecorder.setFormat
	 */
	this.setFormat = function(value) { this.format = value; }
	/**
	 * readonly property to indicate if paused
	 * @alias Titanium_Media_AudioRecorder.paused
	 * @property {Boolean}
	 */
	this.paused = false
	/**
	 * Get the readonly property to indicate if paused
	 * @alias Titanium_Media_AudioRecorder.getPaused
	 * @return {Boolean}
	 */
	this.getPaused = function() { return this.paused; }
	/**
	 * Set the readonly property to indicate if paused
	 * @param {Boolean} value New value to set.
	 * @alias Titanium_Media_AudioRecorder.setPaused
	 */
	this.setPaused = function(value) { this.paused = value; }
	/**
	 * readonly property to indicate if recording
	 * @alias Titanium_Media_AudioRecorder.recording
	 * @property {Boolean}
	 */
	this.recording = false
	/**
	 * Get the readonly property to indicate if recording
	 * @alias Titanium_Media_AudioRecorder.getRecording
	 * @return {Boolean}
	 */
	this.getRecording = function() { return this.recording; }
	/**
	 * Set the readonly property to indicate if recording
	 * @param {Boolean} value New value to set.
	 * @alias Titanium_Media_AudioRecorder.setRecording
	 */
	this.setRecording = function(value) { this.recording = value; }
	/**
	 * readonly property to indicate if stopped
	 * @alias Titanium_Media_AudioRecorder.stopped
	 * @property {Boolean}
	 */
	this.stopped = false
	/**
	 * Get the readonly property to indicate if stopped
	 * @alias Titanium_Media_AudioRecorder.getStopped
	 * @return {Boolean}
	 */
	this.getStopped = function() { return this.stopped; }
	/**
	 * Set the readonly property to indicate if stopped
	 * @param {Boolean} value New value to set.
	 * @alias Titanium_Media_AudioRecorder.setStopped
	 */
	this.setStopped = function(value) { this.stopped = value; }
	/**
	 * add an event listener for the instance to receive view triggered events
	 * @param {String} name name of the event
	 * @param {Function} callback callback function to invoke when the event is fired
	 * @alias Titanium_Media_AudioRecorder.addEventListener
	 */
	this.addEventListener = function addEventListener(name,callback) { }
	/**
	 * fire a synthesized event to the views listener
	 * @param {String} name name of the event
	 * @param {Object} event event object
	 * @alias Titanium_Media_AudioRecorder.fireEvent
	 */
	this.fireEvent = function fireEvent(name,event) { }
	/**
	 * called to temporarily pause recording
	 * @alias Titanium_Media_AudioRecorder.pause
	 */
	this.pause = function pause() { }
	/**
	 * remove a previously added event listener
	 * @param {String} name name of the event
	 * @param {Function} callback callback function passed in addEventListener
	 * @alias Titanium_Media_AudioRecorder.removeEventListener
	 */
	this.removeEventListener = function removeEventListener(name,callback) { }
	/**
	 * called to resume audio recording
	 * @alias Titanium_Media_AudioRecorder.resume
	 */
	this.resume = function resume() { }
	/**
	 * called to start recording audio
	 * @alias Titanium_Media_AudioRecorder.start
	 */
	this.start = function start() { }
	/**
	 * called to stop recording audio
	 * @alias Titanium_Media_AudioRecorder.stop
	 */
	this.stop = function stop() { }
};

/**
 * A representation of a media item returned by the music picker as part of the items array in the dictionary passed to its success function.
 * @since 1.4.0
 */
function Titanium_Media_Item() {
	/**
	 * the artist for the album of the item
	 * @alias Titanium_Media_Item.albumArtist
	 * @property {String}
	 */
	this.albumArtist = ''
	/**
	 * Get the the artist for the album of the item
	 * @alias Titanium_Media_Item.getAlbumArtist
	 * @return {String}
	 */
	this.getAlbumArtist = function() { return this.albumArtist; }
	/**
	 * Set the the artist for the album of the item
	 * @param {String} value New value to set.
	 * @alias Titanium_Media_Item.setAlbumArtist
	 */
	this.setAlbumArtist = function(value) { this.albumArtist = value; }
	/**
	 * the album title of the item
	 * @alias Titanium_Media_Item.albumTitle
	 * @property {String}
	 */
	this.albumTitle = ''
	/**
	 * Get the the album title of the item
	 * @alias Titanium_Media_Item.getAlbumTitle
	 * @return {String}
	 */
	this.getAlbumTitle = function() { return this.albumTitle; }
	/**
	 * Set the the album title of the item
	 * @param {String} value New value to set.
	 * @alias Titanium_Media_Item.setAlbumTitle
	 */
	this.setAlbumTitle = function(value) { this.albumTitle = value; }
	/**
	 * the number of tracks for the album of the item
	 * @alias Titanium_Media_Item.albumTrackCount
	 * @property {Integer}
	 */
	this.albumTrackCount = 0
	/**
	 * Get the the number of tracks for the album of the item
	 * @alias Titanium_Media_Item.getAlbumTrackCount
	 * @return {Integer}
	 */
	this.getAlbumTrackCount = function() { return this.albumTrackCount; }
	/**
	 * Set the the number of tracks for the album of the item
	 * @param {Integer} value New value to set.
	 * @alias Titanium_Media_Item.setAlbumTrackCount
	 */
	this.setAlbumTrackCount = function(value) { this.albumTrackCount = value; }
	/**
	 * the track number of the item
	 * @alias Titanium_Media_Item.albumTrackNumber
	 * @property {Integer}
	 */
	this.albumTrackNumber = 0
	/**
	 * Get the the track number of the item
	 * @alias Titanium_Media_Item.getAlbumTrackNumber
	 * @return {Integer}
	 */
	this.getAlbumTrackNumber = function() { return this.albumTrackNumber; }
	/**
	 * Set the the track number of the item
	 * @param {Integer} value New value to set.
	 * @alias Titanium_Media_Item.setAlbumTrackNumber
	 */
	this.setAlbumTrackNumber = function(value) { this.albumTrackNumber = value; }
	/**
	 * the artist of the item
	 * @alias Titanium_Media_Item.artist
	 * @property {String}
	 */
	this.artist = ''
	/**
	 * Get the the artist of the item
	 * @alias Titanium_Media_Item.getArtist
	 * @return {String}
	 */
	this.getArtist = function() { return this.artist; }
	/**
	 * Set the the artist of the item
	 * @param {String} value New value to set.
	 * @alias Titanium_Media_Item.setArtist
	 */
	this.setArtist = function(value) { this.artist = value; }
	/**
	 * a blob object containing the image for the item's artwork, or null if none
	 * @alias Titanium_Media_Item.artwork
	 * @property {Object}
	 */
	this.artwork = {}
	/**
	 * Get the a blob object containing the image for the item's artwork, or null if none
	 * @alias Titanium_Media_Item.getArtwork
	 * @return {Object}
	 */
	this.getArtwork = function() { return this.artwork; }
	/**
	 * Set the a blob object containing the image for the item's artwork, or null if none
	 * @param {Object} value New value to set.
	 * @alias Titanium_Media_Item.setArtwork
	 */
	this.setArtwork = function(value) { this.artwork = value; }
	/**
	 * the composer of the item
	 * @alias Titanium_Media_Item.composer
	 * @property {String}
	 */
	this.composer = ''
	/**
	 * Get the the composer of the item
	 * @alias Titanium_Media_Item.getComposer
	 * @return {String}
	 */
	this.getComposer = function() { return this.composer; }
	/**
	 * Set the the composer of the item
	 * @param {String} value New value to set.
	 * @alias Titanium_Media_Item.setComposer
	 */
	this.setComposer = function(value) { this.composer = value; }
	/**
	 * the total number of discs of the item
	 * @alias Titanium_Media_Item.discCount
	 * @property {Integer}
	 */
	this.discCount = 0
	/**
	 * Get the the total number of discs of the item
	 * @alias Titanium_Media_Item.getDiscCount
	 * @return {Integer}
	 */
	this.getDiscCount = function() { return this.discCount; }
	/**
	 * Set the the total number of discs of the item
	 * @param {Integer} value New value to set.
	 * @alias Titanium_Media_Item.setDiscCount
	 */
	this.setDiscCount = function(value) { this.discCount = value; }
	/**
	 * the disc number of the item
	 * @alias Titanium_Media_Item.discNumber
	 * @property {Integer}
	 */
	this.discNumber = 0
	/**
	 * Get the the disc number of the item
	 * @alias Titanium_Media_Item.getDiscNumber
	 * @return {Integer}
	 */
	this.getDiscNumber = function() { return this.discNumber; }
	/**
	 * Set the the disc number of the item
	 * @param {Integer} value New value to set.
	 * @alias Titanium_Media_Item.setDiscNumber
	 */
	this.setDiscNumber = function(value) { this.discNumber = value; }
	/**
	 * the genre of the item
	 * @alias Titanium_Media_Item.genre
	 * @property {String}
	 */
	this.genre = ''
	/**
	 * Get the the genre of the item
	 * @alias Titanium_Media_Item.getGenre
	 * @return {String}
	 */
	this.getGenre = function() { return this.genre; }
	/**
	 * Set the the genre of the item
	 * @param {String} value New value to set.
	 * @alias Titanium_Media_Item.setGenre
	 */
	this.setGenre = function(value) { this.genre = value; }
	/**
	 * true if the item is part of a compilation album
	 * @alias Titanium_Media_Item.isCompilation
	 * @property {Boolean}
	 */
	this.isCompilation = false
	/**
	 * Get the true if the item is part of a compilation album
	 * @alias Titanium_Media_Item.getIsCompilation
	 * @return {Boolean}
	 */
	this.getIsCompilation = function() { return this.isCompilation; }
	/**
	 * Set the true if the item is part of a compilation album
	 * @param {Boolean} value New value to set.
	 * @alias Titanium_Media_Item.setIsCompilation
	 */
	this.setIsCompilation = function(value) { this.isCompilation = value; }
	/**
	 * the lyrics of the item
	 * @alias Titanium_Media_Item.lyrics
	 * @property {String}
	 */
	this.lyrics = ''
	/**
	 * Get the the lyrics of the item
	 * @alias Titanium_Media_Item.getLyrics
	 * @return {String}
	 */
	this.getLyrics = function() { return this.lyrics; }
	/**
	 * Set the the lyrics of the item
	 * @param {String} value New value to set.
	 * @alias Titanium_Media_Item.setLyrics
	 */
	this.setLyrics = function(value) { this.lyrics = value; }
	/**
	 * the type of the item
	 * @alias Titanium_Media_Item.mediaType
	 * @property {Integer}
	 */
	this.mediaType = 0
	/**
	 * Get the the type of the item
	 * @alias Titanium_Media_Item.getMediaType
	 * @return {Integer}
	 */
	this.getMediaType = function() { return this.mediaType; }
	/**
	 * Set the the type of the item
	 * @param {Integer} value New value to set.
	 * @alias Titanium_Media_Item.setMediaType
	 */
	this.setMediaType = function(value) { this.mediaType = value; }
	/**
	 * the number of times the item has been played
	 * @alias Titanium_Media_Item.playCount
	 * @property {Integer}
	 */
	this.playCount = 0
	/**
	 * Get the the number of times the item has been played
	 * @alias Titanium_Media_Item.getPlayCount
	 * @return {Integer}
	 */
	this.getPlayCount = function() { return this.playCount; }
	/**
	 * Set the the number of times the item has been played
	 * @param {Integer} value New value to set.
	 * @alias Titanium_Media_Item.setPlayCount
	 */
	this.setPlayCount = function(value) { this.playCount = value; }
	/**
	 * the length (in seconds) of the item
	 * @alias Titanium_Media_Item.playbackDuration
	 * @property {Double}
	 */
	this.playbackDuration = 0.0
	/**
	 * Get the the length (in seconds) of the item
	 * @alias Titanium_Media_Item.getPlaybackDuration
	 * @return {Double}
	 */
	this.getPlaybackDuration = function() { return this.playbackDuration; }
	/**
	 * Set the the length (in seconds) of the item
	 * @param {Double} value New value to set.
	 * @alias Titanium_Media_Item.setPlaybackDuration
	 */
	this.setPlaybackDuration = function(value) { this.playbackDuration = value; }
	/**
	 * the title of a podcast item.  Only for media types of Titanium.Media.MUSIC_MEDIA_TYPE_PODCAST.
	 * @alias Titanium_Media_Item.podcastTitle
	 * @property {String}
	 */
	this.podcastTitle = ''
	/**
	 * Get the the title of a podcast item.  Only for media types of Titanium.Media.MUSIC_MEDIA_TYPE_PODCAST.
	 * @alias Titanium_Media_Item.getPodcastTitle
	 * @return {String}
	 */
	this.getPodcastTitle = function() { return this.podcastTitle; }
	/**
	 * Set the the title of a podcast item.  Only for media types of Titanium.Media.MUSIC_MEDIA_TYPE_PODCAST.
	 * @param {String} value New value to set.
	 * @alias Titanium_Media_Item.setPodcastTitle
	 */
	this.setPodcastTitle = function(value) { this.podcastTitle = value; }
	/**
	 * the rating of the item
	 * @alias Titanium_Media_Item.rating
	 * @property {Integer}
	 */
	this.rating = 0
	/**
	 * Get the the rating of the item
	 * @alias Titanium_Media_Item.getRating
	 * @return {Integer}
	 */
	this.getRating = function() { return this.rating; }
	/**
	 * Set the the rating of the item
	 * @param {Integer} value New value to set.
	 * @alias Titanium_Media_Item.setRating
	 */
	this.setRating = function(value) { this.rating = value; }
	/**
	 * the number of times the item has been skipped
	 * @alias Titanium_Media_Item.skipCount
	 * @property {Integer}
	 */
	this.skipCount = 0
	/**
	 * Get the the number of times the item has been skipped
	 * @alias Titanium_Media_Item.getSkipCount
	 * @return {Integer}
	 */
	this.getSkipCount = function() { return this.skipCount; }
	/**
	 * Set the the number of times the item has been skipped
	 * @param {Integer} value New value to set.
	 * @alias Titanium_Media_Item.setSkipCount
	 */
	this.setSkipCount = function(value) { this.skipCount = value; }
	/**
	 * the title of the item
	 * @alias Titanium_Media_Item.title
	 * @property {String}
	 */
	this.title = ''
	/**
	 * Get the the title of the item
	 * @alias Titanium_Media_Item.getTitle
	 * @return {String}
	 */
	this.getTitle = function() { return this.title; }
	/**
	 * Set the the title of the item
	 * @param {String} value New value to set.
	 * @alias Titanium_Media_Item.setTitle
	 */
	this.setTitle = function(value) { this.title = value; }
};

/**
 * The MusicPlayer instance returned from Titanium.Media.createMusicPlayer.  This object represents a music controller.
 * @since 1.4.0
 */
function Titanium_Media_MusicPlayer() {
	/**
	 * the current point in song playback
	 * @alias Titanium_Media_MusicPlayer.currentPlaybackTime
	 * @property {Double}
	 */
	this.currentPlaybackTime = 0.0
	/**
	 * Get the the current point in song playback
	 * @alias Titanium_Media_MusicPlayer.getCurrentPlaybackTime
	 * @return {Double}
	 */
	this.getCurrentPlaybackTime = function() { return this.currentPlaybackTime; }
	/**
	 * Set the the current point in song playback
	 * @param {Double} value New value to set.
	 * @alias Titanium_Media_MusicPlayer.setCurrentPlaybackTime
	 */
	this.setCurrentPlaybackTime = function(value) { this.currentPlaybackTime = value; }
	/**
	 * an Item object which indicates the currently playing media
	 * @alias Titanium_Media_MusicPlayer.nowPlaying
	 * @property {Object}
	 */
	this.nowPlaying = {}
	/**
	 * Get the an Item object which indicates the currently playing media
	 * @alias Titanium_Media_MusicPlayer.getNowPlaying
	 * @return {Object}
	 */
	this.getNowPlaying = function() { return this.nowPlaying; }
	/**
	 * Set the an Item object which indicates the currently playing media
	 * @param {Object} value New value to set.
	 * @alias Titanium_Media_MusicPlayer.setNowPlaying
	 */
	this.setNowPlaying = function(value) { this.nowPlaying = value; }
	/**
	 * the playback state; one of Titanium.Media.MUSIC_PLAYER_STATE_STOPPED, Titanium.Media.MUSIC_PLAYER_STATE_PLAYING, Titanium.Media.MUSIC_PLAYER_STATE_PAUSED, Titanium.Media.MUSIC_PLAYER_STATE_INTERRUPTED, Titanium.Media.MUSIC_PLAYER_STATE_SKEEK_FORWARD, Titanium.Media.MUSIC_PLAYER_STATE_SEEK_BACKWARD
	 * @alias Titanium_Media_MusicPlayer.playbackState
	 * @property {Integer}
	 */
	this.playbackState = 0
	/**
	 * Get the the playback state; one of Titanium.Media.MUSIC_PLAYER_STATE_STOPPED, Titanium.Media.MUSIC_PLAYER_STATE_PLAYING, Titanium.Media.MUSIC_PLAYER_STATE_PAUSED, Titanium.Media.MUSIC_PLAYER_STATE_INTERRUPTED, Titanium.Media.MUSIC_PLAYER_STATE_SKEEK_FORWARD, Titanium.Media.MUSIC_PLAYER_STATE_SEEK_BACKWARD
	 * @alias Titanium_Media_MusicPlayer.getPlaybackState
	 * @return {Integer}
	 */
	this.getPlaybackState = function() { return this.playbackState; }
	/**
	 * Set the the playback state; one of Titanium.Media.MUSIC_PLAYER_STATE_STOPPED, Titanium.Media.MUSIC_PLAYER_STATE_PLAYING, Titanium.Media.MUSIC_PLAYER_STATE_PAUSED, Titanium.Media.MUSIC_PLAYER_STATE_INTERRUPTED, Titanium.Media.MUSIC_PLAYER_STATE_SKEEK_FORWARD, Titanium.Media.MUSIC_PLAYER_STATE_SEEK_BACKWARD
	 * @param {Integer} value New value to set.
	 * @alias Titanium_Media_MusicPlayer.setPlaybackState
	 */
	this.setPlaybackState = function(value) { this.playbackState = value; }
	/**
	 * the repeat setting; one of Titanium.Media.MUSIC_PLAYER_REPEAT_DEFAULT, Titanium.Media.MUSIC_PLAYER_REPEAT_NONE, Titanium.Media.MUSIC_PLAYER_REPEAT_ONE, Titanium.Media.MUSIC_PLAYER_REPEAT_ALL
	 * @alias Titanium_Media_MusicPlayer.repeatMode
	 * @property {Integer}
	 */
	this.repeatMode = 0
	/**
	 * Get the the repeat setting; one of Titanium.Media.MUSIC_PLAYER_REPEAT_DEFAULT, Titanium.Media.MUSIC_PLAYER_REPEAT_NONE, Titanium.Media.MUSIC_PLAYER_REPEAT_ONE, Titanium.Media.MUSIC_PLAYER_REPEAT_ALL
	 * @alias Titanium_Media_MusicPlayer.getRepeatMode
	 * @return {Integer}
	 */
	this.getRepeatMode = function() { return this.repeatMode; }
	/**
	 * Set the the repeat setting; one of Titanium.Media.MUSIC_PLAYER_REPEAT_DEFAULT, Titanium.Media.MUSIC_PLAYER_REPEAT_NONE, Titanium.Media.MUSIC_PLAYER_REPEAT_ONE, Titanium.Media.MUSIC_PLAYER_REPEAT_ALL
	 * @param {Integer} value New value to set.
	 * @alias Titanium_Media_MusicPlayer.setRepeatMode
	 */
	this.setRepeatMode = function(value) { this.repeatMode = value; }
	/**
	 * the shuffle setting; one of Titanium.Media.MUSIC_PLAYER_SHUFFLE_DEFAULT, Titanium.Media.MUSIC_PLAYER_SHUFFLE_NONE, Titanium.Media.MUSIC_PLAYER_SHUFFLE_SONGS, Titanium.Media.MUSIC_PLAYER_SHUFFLE_ALBUMS
	 * @alias Titanium_Media_MusicPlayer.shuffleMode
	 * @property {Integer}
	 */
	this.shuffleMode = 0
	/**
	 * Get the the shuffle setting; one of Titanium.Media.MUSIC_PLAYER_SHUFFLE_DEFAULT, Titanium.Media.MUSIC_PLAYER_SHUFFLE_NONE, Titanium.Media.MUSIC_PLAYER_SHUFFLE_SONGS, Titanium.Media.MUSIC_PLAYER_SHUFFLE_ALBUMS
	 * @alias Titanium_Media_MusicPlayer.getShuffleMode
	 * @return {Integer}
	 */
	this.getShuffleMode = function() { return this.shuffleMode; }
	/**
	 * Set the the shuffle setting; one of Titanium.Media.MUSIC_PLAYER_SHUFFLE_DEFAULT, Titanium.Media.MUSIC_PLAYER_SHUFFLE_NONE, Titanium.Media.MUSIC_PLAYER_SHUFFLE_SONGS, Titanium.Media.MUSIC_PLAYER_SHUFFLE_ALBUMS
	 * @param {Integer} value New value to set.
	 * @alias Titanium_Media_MusicPlayer.setShuffleMode
	 */
	this.setShuffleMode = function(value) { this.shuffleMode = value; }
	/**
	 * a value between 0.0 and 1.0 indicating the volume level for the music player
	 * @alias Titanium_Media_MusicPlayer.volume
	 * @property {Float}
	 */
	this.volume = 0.0
	/**
	 * Get the a value between 0.0 and 1.0 indicating the volume level for the music player
	 * @alias Titanium_Media_MusicPlayer.getVolume
	 * @return {Float}
	 */
	this.getVolume = function() { return this.volume; }
	/**
	 * Set the a value between 0.0 and 1.0 indicating the volume level for the music player
	 * @param {Float} value New value to set.
	 * @alias Titanium_Media_MusicPlayer.setVolume
	 */
	this.setVolume = function(value) { this.volume = value; }
	/**
	 * pause playback
	 * @alias Titanium_Media_MusicPlayer.pause
	 */
	this.pause = function pause() { }
	/**
	 * begin playback
	 * @alias Titanium_Media_MusicPlayer.play
	 */
	this.play = function play() { }
	/**
	 * seek backward in the currently playing media
	 * @alias Titanium_Media_MusicPlayer.seekBackward
	 */
	this.seekBackward = function seekBackward() { }
	/**
	 * seek forward in the currently playing media
	 * @alias Titanium_Media_MusicPlayer.seekForward
	 */
	this.seekForward = function seekForward() { }
	/**
	 * set the media queue
	 * @param {Object} queue a queue representation to set the player queue to.  Can be any of: A dictionary with an <tt>items</tt> key that is an array of <a href="Titanium.Media.Item-object.html">Titanium.Media.Item</a> objects, an array of <a href="Titanium.Media.Item-object.html">Titanium.Media.Item</a> objects, or a single <a href="Titanium.Media.Item-object.html">Titanium.Media.Item</a> object.
	 * @alias Titanium_Media_MusicPlayer.setQueue
	 */
	this.setQueue = function setQueue(queue) { }
	/**
	 * skip to the beginning of the currently playing media
	 * @alias Titanium_Media_MusicPlayer.skipToBeginning
	 */
	this.skipToBeginning = function skipToBeginning() { }
	/**
	 * skip to the next media in the queue
	 * @alias Titanium_Media_MusicPlayer.skipToNext
	 */
	this.skipToNext = function skipToNext() { }
	/**
	 * skip to the previous media in the queue
	 * @alias Titanium_Media_MusicPlayer.skipToPrevious
	 */
	this.skipToPrevious = function skipToPrevious() { }
	/**
	 * stop playback
	 * @alias Titanium_Media_MusicPlayer.stop
	 */
	this.stop = function stop() { }
	/**
	 * end a seek operation
	 * @alias Titanium_Media_MusicPlayer.stopSeeking
	 */
	this.stopSeeking = function stopSeeking() { }
};

/**
 * The Sound object is returned by Titanium.Media.createSound and is useful for playing basic sounds. The Sound object loads the entire media resource in memory before playing.  If you need to support streaming, use the Titanium.Media.createAudioPlayer API.
 * @since 0.8
 */
function Titanium_Media_Sound() {
	/**
	 * boolean to indicate if audio should continue playing even if Activity is paused (Android only as of 1.3.0)
	 * @alias Titanium_Media_Sound.allowBackground
	 * @property {Boolean}
	 */
	this.allowBackground = false
	/**
	 * Get the boolean to indicate if audio should continue playing even if Activity is paused (Android only as of 1.3.0)
	 * @alias Titanium_Media_Sound.getAllowBackground
	 * @return {Boolean}
	 */
	this.getAllowBackground = function() { return this.allowBackground; }
	/**
	 * Set the boolean to indicate if audio should continue playing even if Activity is paused (Android only as of 1.3.0)
	 * @param {Boolean} value New value to set.
	 * @alias Titanium_Media_Sound.setAllowBackground
	 */
	this.setAllowBackground = function(value) { this.allowBackground = value; }
	/**
	 * the duration of the audio.
	 * @alias Titanium_Media_Sound.duration
	 * @property {Float}
	 */
	this.duration = 0.0
	/**
	 * Get the the duration of the audio.
	 * @alias Titanium_Media_Sound.getDuration
	 * @return {Float}
	 */
	this.getDuration = function() { return this.duration; }
	/**
	 * Set the the duration of the audio.
	 * @param {Float} value New value to set.
	 * @alias Titanium_Media_Sound.setDuration
	 */
	this.setDuration = function(value) { this.duration = value; }
	/**
	 * boolean to indicate if the audio should loop upon completion
	 * @alias Titanium_Media_Sound.looping
	 * @property {Boolean}
	 */
	this.looping = false
	/**
	 * Get the boolean to indicate if the audio should loop upon completion
	 * @alias Titanium_Media_Sound.getLooping
	 * @return {Boolean}
	 */
	this.getLooping = function() { return this.looping; }
	/**
	 * Set the boolean to indicate if the audio should loop upon completion
	 * @param {Boolean} value New value to set.
	 * @alias Titanium_Media_Sound.setLooping
	 */
	this.setLooping = function(value) { this.looping = value; }
	/**
	 * boolean to indicate if the audio is paused
	 * @alias Titanium_Media_Sound.paused
	 * @property {Boolean}
	 */
	this.paused = false
	/**
	 * Get the boolean to indicate if the audio is paused
	 * @alias Titanium_Media_Sound.getPaused
	 * @return {Boolean}
	 */
	this.getPaused = function() { return this.paused; }
	/**
	 * Set the boolean to indicate if the audio is paused
	 * @param {Boolean} value New value to set.
	 * @alias Titanium_Media_Sound.setPaused
	 */
	this.setPaused = function(value) { this.paused = value; }
	/**
	 * boolean to indicate if the audio is playing
	 * @alias Titanium_Media_Sound.playing
	 * @property {Boolean}
	 */
	this.playing = false
	/**
	 * Get the boolean to indicate if the audio is playing
	 * @alias Titanium_Media_Sound.getPlaying
	 * @return {Boolean}
	 */
	this.getPlaying = function() { return this.playing; }
	/**
	 * Set the boolean to indicate if the audio is playing
	 * @param {Boolean} value New value to set.
	 * @alias Titanium_Media_Sound.setPlaying
	 */
	this.setPlaying = function(value) { this.playing = value; }
	/**
	 * the time position of the audio.
	 * @alias Titanium_Media_Sound.time
	 * @property {Float}
	 */
	this.time = 0.0
	/**
	 * Get the the time position of the audio.
	 * @alias Titanium_Media_Sound.getTime
	 * @return {Float}
	 */
	this.getTime = function() { return this.time; }
	/**
	 * Set the the time position of the audio.
	 * @param {Float} value New value to set.
	 * @alias Titanium_Media_Sound.setTime
	 */
	this.setTime = function(value) { this.time = value; }
	/**
	 * url to the audio
	 * @alias Titanium_Media_Sound.url
	 * @property {String}
	 */
	this.url = ''
	/**
	 * Get the url to the audio
	 * @alias Titanium_Media_Sound.getUrl
	 * @return {String}
	 */
	this.getUrl = function() { return this.url; }
	/**
	 * Set the url to the audio
	 * @param {String} value New value to set.
	 * @alias Titanium_Media_Sound.setUrl
	 */
	this.setUrl = function(value) { this.url = value; }
	/**
	 * the volume of the audio. this volume only affects the media, not the device audio.
	 * @alias Titanium_Media_Sound.volume
	 * @property {Float}
	 */
	this.volume = 0.0
	/**
	 * Get the the volume of the audio. this volume only affects the media, not the device audio.
	 * @alias Titanium_Media_Sound.getVolume
	 * @return {Float}
	 */
	this.getVolume = function() { return this.volume; }
	/**
	 * Set the the volume of the audio. this volume only affects the media, not the device audio.
	 * @param {Float} value New value to set.
	 * @alias Titanium_Media_Sound.setVolume
	 */
	this.setVolume = function(value) { this.volume = value; }
	/**
	 * add an event listener for the instance to receive view triggered events
	 * @param {String} name name of the event
	 * @param {Function} callback callback function to invoke when the event is fired
	 * @alias Titanium_Media_Sound.addEventListener
	 */
	this.addEventListener = function addEventListener(name,callback) { }
	/**
	 * fire a synthesized event to the views listener
	 * @param {String} name name of the event
	 * @param {Object} event event object
	 * @alias Titanium_Media_Sound.fireEvent
	 */
	this.fireEvent = function fireEvent(name,event) { }
	/**
	 * return the current time position of the audio
	 * @alias Titanium_Media_Sound.getTime
	 * @return {Double}
	 */
	this.getTime = function getTime() { return 0.0; }
	/**
	 * return the value of the audio
	 * @alias Titanium_Media_Sound.getVolume
	 * @return {Float}
	 */
	this.getVolume = function getVolume() { return 0.0; }
	/**
	 * returns true if the audio will loop
	 * @alias Titanium_Media_Sound.isLooping
	 * @return {Boolean}
	 */
	this.isLooping = function isLooping() { return false; }
	/**
	 * returns true if the audio is paused
	 * @alias Titanium_Media_Sound.isPaused
	 * @return {Boolean}
	 */
	this.isPaused = function isPaused() { return false; }
	/**
	 * returns true if the audio is playing
	 * @alias Titanium_Media_Sound.isPlaying
	 * @return {Boolean}
	 */
	this.isPlaying = function isPlaying() { return false; }
	/**
	 * temporarily pause the audio. to resume, invoke play.
	 * @alias Titanium_Media_Sound.pause
	 */
	this.pause = function pause() { }
	/**
	 * starting playing the source. if paused, will resume.
	 * @alias Titanium_Media_Sound.play
	 */
	this.play = function play() { }
	/**
	 * release all internal resources. this is typically unnecessary but can be useful if you load a large audio file in app.js and play it only once and you would like to release all releases after your final play to reduce memory.
	 * @alias Titanium_Media_Sound.release
	 */
	this.release = function release() { }
	/**
	 * remove a previously added event listener
	 * @param {String} name name of the event
	 * @param {Function} callback callback function passed in addEventListener
	 * @alias Titanium_Media_Sound.removeEventListener
	 */
	this.removeEventListener = function removeEventListener(name,callback) { }
	/**
	 * reset the audio to the beginning.
	 * @alias Titanium_Media_Sound.reset
	 */
	this.reset = function reset() { }
	/**
	 * control whether the audio should loop
	 * @alias Titanium_Media_Sound.setLooping
	 */
	this.setLooping = function setLooping() { }
	/**
	 * control whether the audio is paused
	 * @alias Titanium_Media_Sound.setPaused
	 */
	this.setPaused = function setPaused() { }
	/**
	 * set the time position of the audio
	 * @alias Titanium_Media_Sound.setTime
	 */
	this.setTime = function setTime() { }
	/**
	 * set the volume of the audio
	 * @alias Titanium_Media_Sound.setVolume
	 */
	this.setVolume = function setVolume() { }
	/**
	 * stop playing the audio and reset it to the beginning.
	 * @alias Titanium_Media_Sound.stop
	 */
	this.stop = function stop() { }
};

/**
 * The VideoPlayer object is returned by Titanium.Media.createVideoPlayer and is useful for playing videos.
 * @since 0.9
 */
function Titanium_Media_VideoPlayer() {
	/**
	 * a dictionary with properties x and y to indicate the anchor point value. anchor specifies the position by which animation should occur. center is 0.5, 0.5
	 * @alias Titanium_Media_VideoPlayer.anchorPoint
	 * @property {Object}
	 */
	this.anchorPoint = {}
	/**
	 * Get the a dictionary with properties x and y to indicate the anchor point value. anchor specifies the position by which animation should occur. center is 0.5, 0.5
	 * @alias Titanium_Media_VideoPlayer.getAnchorPoint
	 * @return {Object}
	 */
	this.getAnchorPoint = function() { return this.anchorPoint; }
	/**
	 * Set the a dictionary with properties x and y to indicate the anchor point value. anchor specifies the position by which animation should occur. center is 0.5, 0.5
	 * @param {Object} value New value to set.
	 * @alias Titanium_Media_VideoPlayer.setAnchorPoint
	 */
	this.setAnchorPoint = function(value) { this.anchorPoint = value; }
	/**
	 * read-only object with x and y properties of where the view is during animation
	 * @alias Titanium_Media_VideoPlayer.animatedCenterPoint
	 * @property {Object}
	 */
	this.animatedCenterPoint = {}
	/**
	 * Get the read-only object with x and y properties of where the view is during animation
	 * @alias Titanium_Media_VideoPlayer.getAnimatedCenterPoint
	 * @return {Object}
	 */
	this.getAnimatedCenterPoint = function() { return this.animatedCenterPoint; }
	/**
	 * Set the read-only object with x and y properties of where the view is during animation
	 * @param {Object} value New value to set.
	 * @alias Titanium_Media_VideoPlayer.setAnimatedCenterPoint
	 */
	this.setAnimatedCenterPoint = function(value) { this.animatedCenterPoint = value; }
	/**
	 * indicates if a movie should automatically start playback when it is likely to finish uninterrupted based on e.g. network conditions. Defaults to true.
	 * @alias Titanium_Media_VideoPlayer.autoplay
	 * @property {Boolean}
	 */
	this.autoplay = false
	/**
	 * Get the indicates if a movie should automatically start playback when it is likely to finish uninterrupted based on e.g. network conditions. Defaults to true.
	 * @alias Titanium_Media_VideoPlayer.getAutoplay
	 * @return {Boolean}
	 */
	this.getAutoplay = function() { return this.autoplay; }
	/**
	 * Set the indicates if a movie should automatically start playback when it is likely to finish uninterrupted based on e.g. network conditions. Defaults to true.
	 * @param {Boolean} value New value to set.
	 * @alias Titanium_Media_VideoPlayer.setAutoplay
	 */
	this.setAutoplay = function(value) { this.autoplay = value; }
	/**
	 * background color for the view. deprecated, set the background color on the view.
	 * @alias Titanium_Media_VideoPlayer.backgroundColor
	 * @property {String}
	 */
	this.backgroundColor = ''
	/**
	 * Get the background color for the view. deprecated, set the background color on the view.
	 * @alias Titanium_Media_VideoPlayer.getBackgroundColor
	 * @return {String}
	 */
	this.getBackgroundColor = function() { return this.backgroundColor; }
	/**
	 * Set the background color for the view. deprecated, set the background color on the view.
	 * @param {String} value New value to set.
	 * @alias Titanium_Media_VideoPlayer.setBackgroundColor
	 */
	this.setBackgroundColor = function(value) { this.backgroundColor = value; }
	/**
	 * the disabled background color of the view. (Android)
	 * @alias Titanium_Media_VideoPlayer.backgroundDisabledColor
	 * @property {String}
	 */
	this.backgroundDisabledColor = ''
	/**
	 * Get the the disabled background color of the view. (Android)
	 * @alias Titanium_Media_VideoPlayer.getBackgroundDisabledColor
	 * @return {String}
	 */
	this.getBackgroundDisabledColor = function() { return this.backgroundDisabledColor; }
	/**
	 * Set the the disabled background color of the view. (Android)
	 * @param {String} value New value to set.
	 * @alias Titanium_Media_VideoPlayer.setBackgroundDisabledColor
	 */
	this.setBackgroundDisabledColor = function(value) { this.backgroundDisabledColor = value; }
	/**
	 * the disabled background image url of the view. (Android)
	 * @alias Titanium_Media_VideoPlayer.backgroundDisabledImage
	 * @property {String}
	 */
	this.backgroundDisabledImage = ''
	/**
	 * Get the the disabled background image url of the view. (Android)
	 * @alias Titanium_Media_VideoPlayer.getBackgroundDisabledImage
	 * @return {String}
	 */
	this.getBackgroundDisabledImage = function() { return this.backgroundDisabledImage; }
	/**
	 * Set the the disabled background image url of the view. (Android)
	 * @param {String} value New value to set.
	 * @alias Titanium_Media_VideoPlayer.setBackgroundDisabledImage
	 */
	this.setBackgroundDisabledImage = function(value) { this.backgroundDisabledImage = value; }
	/**
	 * the focused background color of the view. focusable must be true for normal views. (Android)
	 * @alias Titanium_Media_VideoPlayer.backgroundFocusedColor
	 * @property {String}
	 */
	this.backgroundFocusedColor = ''
	/**
	 * Get the the focused background color of the view. focusable must be true for normal views. (Android)
	 * @alias Titanium_Media_VideoPlayer.getBackgroundFocusedColor
	 * @return {String}
	 */
	this.getBackgroundFocusedColor = function() { return this.backgroundFocusedColor; }
	/**
	 * Set the the focused background color of the view. focusable must be true for normal views. (Android)
	 * @param {String} value New value to set.
	 * @alias Titanium_Media_VideoPlayer.setBackgroundFocusedColor
	 */
	this.setBackgroundFocusedColor = function(value) { this.backgroundFocusedColor = value; }
	/**
	 * the focused background image url of the view. focusable must be true for normal views. (Android)
	 * @alias Titanium_Media_VideoPlayer.backgroundFocusedImage
	 * @property {String}
	 */
	this.backgroundFocusedImage = ''
	/**
	 * Get the the focused background image url of the view. focusable must be true for normal views. (Android)
	 * @alias Titanium_Media_VideoPlayer.getBackgroundFocusedImage
	 * @return {String}
	 */
	this.getBackgroundFocusedImage = function() { return this.backgroundFocusedImage; }
	/**
	 * Set the the focused background image url of the view. focusable must be true for normal views. (Android)
	 * @param {String} value New value to set.
	 * @alias Titanium_Media_VideoPlayer.setBackgroundFocusedImage
	 */
	this.setBackgroundFocusedImage = function(value) { this.backgroundFocusedImage = value; }
	/**
	 * a background gradient for the view with the properties: type,startPoint,endPoint,startRadius,endRadius,backfillStart,backfillEnd,colors.
	 * @alias Titanium_Media_VideoPlayer.backgroundGradient
	 * @property {Object}
	 */
	this.backgroundGradient = {}
	/**
	 * Get the a background gradient for the view with the properties: type,startPoint,endPoint,startRadius,endRadius,backfillStart,backfillEnd,colors.
	 * @alias Titanium_Media_VideoPlayer.getBackgroundGradient
	 * @return {Object}
	 */
	this.getBackgroundGradient = function() { return this.backgroundGradient; }
	/**
	 * Set the a background gradient for the view with the properties: type,startPoint,endPoint,startRadius,endRadius,backfillStart,backfillEnd,colors.
	 * @param {Object} value New value to set.
	 * @alias Titanium_Media_VideoPlayer.setBackgroundGradient
	 */
	this.setBackgroundGradient = function(value) { this.backgroundGradient = value; }
	/**
	 * the background image url of the view
	 * @alias Titanium_Media_VideoPlayer.backgroundImage
	 * @property {String}
	 */
	this.backgroundImage = ''
	/**
	 * Get the the background image url of the view
	 * @alias Titanium_Media_VideoPlayer.getBackgroundImage
	 * @return {String}
	 */
	this.getBackgroundImage = function() { return this.backgroundImage; }
	/**
	 * Set the the background image url of the view
	 * @param {String} value New value to set.
	 * @alias Titanium_Media_VideoPlayer.setBackgroundImage
	 */
	this.setBackgroundImage = function(value) { this.backgroundImage = value; }
	/**
	 * End caps specify the portion of an image that should not be resized when an image is stretched. This technique is used to implement buttons and other resizable image-based interface elements. When a button with end caps is resized, the resizing occurs only in the middle of the button, in the region between the end caps. The end caps themselves keep their original size and appearance. This property specifies the size of the left end cap. The middle (stretchable) portion is assumed to be 1 pixel wide. The right end cap is therefore computed by adding the size of the left end cap and the middle portion together and then subtracting that value from the width of the image
	 * @alias Titanium_Media_VideoPlayer.backgroundLeftCap
	 * @property {Float}
	 */
	this.backgroundLeftCap = 0.0
	/**
	 * Get the End caps specify the portion of an image that should not be resized when an image is stretched. This technique is used to implement buttons and other resizable image-based interface elements. When a button with end caps is resized, the resizing occurs only in the middle of the button, in the region between the end caps. The end caps themselves keep their original size and appearance. This property specifies the size of the left end cap. The middle (stretchable) portion is assumed to be 1 pixel wide. The right end cap is therefore computed by adding the size of the left end cap and the middle portion together and then subtracting that value from the width of the image
	 * @alias Titanium_Media_VideoPlayer.getBackgroundLeftCap
	 * @return {Float}
	 */
	this.getBackgroundLeftCap = function() { return this.backgroundLeftCap; }
	/**
	 * Set the End caps specify the portion of an image that should not be resized when an image is stretched. This technique is used to implement buttons and other resizable image-based interface elements. When a button with end caps is resized, the resizing occurs only in the middle of the button, in the region between the end caps. The end caps themselves keep their original size and appearance. This property specifies the size of the left end cap. The middle (stretchable) portion is assumed to be 1 pixel wide. The right end cap is therefore computed by adding the size of the left end cap and the middle portion together and then subtracting that value from the width of the image
	 * @param {Float} value New value to set.
	 * @alias Titanium_Media_VideoPlayer.setBackgroundLeftCap
	 */
	this.setBackgroundLeftCap = function(value) { this.backgroundLeftCap = value; }
	/**
	 * the selected background color of the view. focusable must be true for normal views. (Android)
	 * @alias Titanium_Media_VideoPlayer.backgroundSelectedColor
	 * @property {String}
	 */
	this.backgroundSelectedColor = ''
	/**
	 * Get the the selected background color of the view. focusable must be true for normal views. (Android)
	 * @alias Titanium_Media_VideoPlayer.getBackgroundSelectedColor
	 * @return {String}
	 */
	this.getBackgroundSelectedColor = function() { return this.backgroundSelectedColor; }
	/**
	 * Set the the selected background color of the view. focusable must be true for normal views. (Android)
	 * @param {String} value New value to set.
	 * @alias Titanium_Media_VideoPlayer.setBackgroundSelectedColor
	 */
	this.setBackgroundSelectedColor = function(value) { this.backgroundSelectedColor = value; }
	/**
	 * the selected background image url of the view. focusable must be true for normal views. (Android)
	 * @alias Titanium_Media_VideoPlayer.backgroundSelectedImage
	 * @property {String}
	 */
	this.backgroundSelectedImage = ''
	/**
	 * Get the the selected background image url of the view. focusable must be true for normal views. (Android)
	 * @alias Titanium_Media_VideoPlayer.getBackgroundSelectedImage
	 * @return {String}
	 */
	this.getBackgroundSelectedImage = function() { return this.backgroundSelectedImage; }
	/**
	 * Set the the selected background image url of the view. focusable must be true for normal views. (Android)
	 * @param {String} value New value to set.
	 * @alias Titanium_Media_VideoPlayer.setBackgroundSelectedImage
	 */
	this.setBackgroundSelectedImage = function(value) { this.backgroundSelectedImage = value; }
	/**
	 * End caps specify the portion of an image that should not be resized when an image is stretched. This technique is used to implement buttons and other resizable image-based interface elements. When a button with end caps is resized, the resizing occurs only in the middle of the button, in the region between the end caps. The end caps themselves keep their original size and appearance. This property specifies the size of the top end cap. The middle (stretchable) portion is assumed to be 1 pixel wide. The bottom end cap is therefore computed by adding the size of the top end cap and the middle portion together and then subtracting that value from the height of the image
	 * @alias Titanium_Media_VideoPlayer.backgroundTopCap
	 * @property {Float}
	 */
	this.backgroundTopCap = 0.0
	/**
	 * Get the End caps specify the portion of an image that should not be resized when an image is stretched. This technique is used to implement buttons and other resizable image-based interface elements. When a button with end caps is resized, the resizing occurs only in the middle of the button, in the region between the end caps. The end caps themselves keep their original size and appearance. This property specifies the size of the top end cap. The middle (stretchable) portion is assumed to be 1 pixel wide. The bottom end cap is therefore computed by adding the size of the top end cap and the middle portion together and then subtracting that value from the height of the image
	 * @alias Titanium_Media_VideoPlayer.getBackgroundTopCap
	 * @return {Float}
	 */
	this.getBackgroundTopCap = function() { return this.backgroundTopCap; }
	/**
	 * Set the End caps specify the portion of an image that should not be resized when an image is stretched. This technique is used to implement buttons and other resizable image-based interface elements. When a button with end caps is resized, the resizing occurs only in the middle of the button, in the region between the end caps. The end caps themselves keep their original size and appearance. This property specifies the size of the top end cap. The middle (stretchable) portion is assumed to be 1 pixel wide. The bottom end cap is therefore computed by adding the size of the top end cap and the middle portion together and then subtracting that value from the height of the image
	 * @param {Float} value New value to set.
	 * @alias Titanium_Media_VideoPlayer.setBackgroundTopCap
	 */
	this.setBackgroundTopCap = function(value) { this.backgroundTopCap = value; }
	/**
	 * the border color of the view
	 * @alias Titanium_Media_VideoPlayer.borderColor
	 * @property {String}
	 */
	this.borderColor = ''
	/**
	 * Get the the border color of the view
	 * @alias Titanium_Media_VideoPlayer.getBorderColor
	 * @return {String}
	 */
	this.getBorderColor = function() { return this.borderColor; }
	/**
	 * Set the the border color of the view
	 * @param {String} value New value to set.
	 * @alias Titanium_Media_VideoPlayer.setBorderColor
	 */
	this.setBorderColor = function(value) { this.borderColor = value; }
	/**
	 * the border radius of the view
	 * @alias Titanium_Media_VideoPlayer.borderRadius
	 * @property {Float}
	 */
	this.borderRadius = 0.0
	/**
	 * Get the the border radius of the view
	 * @alias Titanium_Media_VideoPlayer.getBorderRadius
	 * @return {Float}
	 */
	this.getBorderRadius = function() { return this.borderRadius; }
	/**
	 * Set the the border radius of the view
	 * @param {Float} value New value to set.
	 * @alias Titanium_Media_VideoPlayer.setBorderRadius
	 */
	this.setBorderRadius = function(value) { this.borderRadius = value; }
	/**
	 * the border width of the view
	 * @alias Titanium_Media_VideoPlayer.borderWidth
	 * @property {Float}
	 */
	this.borderWidth = 0.0
	/**
	 * Get the the border width of the view
	 * @alias Titanium_Media_VideoPlayer.getBorderWidth
	 * @return {Float}
	 */
	this.getBorderWidth = function() { return this.borderWidth; }
	/**
	 * Set the the border width of the view
	 * @param {Float} value New value to set.
	 * @alias Titanium_Media_VideoPlayer.setBorderWidth
	 */
	this.setBorderWidth = function(value) { this.borderWidth = value; }
	/**
	 * property for the view bottom position. This position is relative to the view's parent. Can be either a float value or a dimension string ie 'auto' (default), '50%' (iPhone only).
	 * @alias Titanium_Media_VideoPlayer.bottom
	 * @property {Float,String}
	 */
	this.bottom = 0.0
	/**
	 * Get the property for the view bottom position. This position is relative to the view's parent. Can be either a float value or a dimension string ie 'auto' (default), '50%' (iPhone only).
	 * @alias Titanium_Media_VideoPlayer.getBottom
	 * @return {Float,String}
	 */
	this.getBottom = function() { return this.bottom; }
	/**
	 * Set the property for the view bottom position. This position is relative to the view's parent. Can be either a float value or a dimension string ie 'auto' (default), '50%' (iPhone only).
	 * @param {Float,String} value New value to set.
	 * @alias Titanium_Media_VideoPlayer.setBottom
	 */
	this.setBottom = function(value) { this.bottom = value; }
	/**
	 * a dictionary with properties x and y to indicate the center of the views position relative to the parent view
	 * @alias Titanium_Media_VideoPlayer.center
	 * @property {Object}
	 */
	this.center = {}
	/**
	 * Get the a dictionary with properties x and y to indicate the center of the views position relative to the parent view
	 * @alias Titanium_Media_VideoPlayer.getCenter
	 * @return {Object}
	 */
	this.getCenter = function() { return this.center; }
	/**
	 * Set the a dictionary with properties x and y to indicate the center of the views position relative to the parent view
	 * @param {Object} value New value to set.
	 * @alias Titanium_Media_VideoPlayer.setCenter
	 */
	this.setCenter = function(value) { this.center = value; }
	/**
	 * deprecated. use url property instead.
	 * @alias Titanium_Media_VideoPlayer.contentURL
	 * @property {String}
	 */
	this.contentURL = ''
	/**
	 * Get the deprecated. use url property instead.
	 * @alias Titanium_Media_VideoPlayer.getContentURL
	 * @return {String}
	 */
	this.getContentURL = function() { return this.contentURL; }
	/**
	 * Set the deprecated. use url property instead.
	 * @param {String} value New value to set.
	 * @alias Titanium_Media_VideoPlayer.setContentURL
	 */
	this.setContentURL = function(value) { this.contentURL = value; }
	/**
	 * The duration of the movie, or 0.0 if not known.
	 * @alias Titanium_Media_VideoPlayer.duration
	 * @property {Double}
	 */
	this.duration = 0.0
	/**
	 * Get the The duration of the movie, or 0.0 if not known.
	 * @alias Titanium_Media_VideoPlayer.getDuration
	 * @return {Double}
	 */
	this.getDuration = function() { return this.duration; }
	/**
	 * Set the The duration of the movie, or 0.0 if not known.
	 * @param {Double} value New value to set.
	 * @alias Titanium_Media_VideoPlayer.setDuration
	 */
	this.setDuration = function(value) { this.duration = value; }
	/**
	 * The end time of movie playback. Defaults to NaN, which indicates natural end time of the movie.
	 * @alias Titanium_Media_VideoPlayer.endPlaybackTime
	 * @property {Double}
	 */
	this.endPlaybackTime = 0.0
	/**
	 * Get the The end time of movie playback. Defaults to NaN, which indicates natural end time of the movie.
	 * @alias Titanium_Media_VideoPlayer.getEndPlaybackTime
	 * @return {Double}
	 */
	this.getEndPlaybackTime = function() { return this.endPlaybackTime; }
	/**
	 * Set the The end time of movie playback. Defaults to NaN, which indicates natural end time of the movie.
	 * @param {Double} value New value to set.
	 * @alias Titanium_Media_VideoPlayer.setEndPlaybackTime
	 */
	this.setEndPlaybackTime = function(value) { this.endPlaybackTime = value; }
	/**
	 * Set true if you want a view to be focusable when navigating with the trackball or D-Pad. Default: false. (Android Only)
	 * @alias Titanium_Media_VideoPlayer.focusable
	 * @property {Boolean}
	 */
	this.focusable = false
	/**
	 * Get the Set true if you want a view to be focusable when navigating with the trackball or D-Pad. Default: false. (Android Only)
	 * @alias Titanium_Media_VideoPlayer.getFocusable
	 * @return {Boolean}
	 */
	this.getFocusable = function() { return this.focusable; }
	/**
	 * Set the Set true if you want a view to be focusable when navigating with the trackball or D-Pad. Default: false. (Android Only)
	 * @param {Boolean} value New value to set.
	 * @alias Titanium_Media_VideoPlayer.setFocusable
	 */
	this.setFocusable = function(value) { this.focusable = value; }
	/**
	 * the font family
	 * @alias Titanium_Media_VideoPlayer.font-family
	 * @property {String}
	 */
	this.font-family = ''
	/**
	 * Get the the font family
	 * @alias Titanium_Media_VideoPlayer.getFont-family
	 * @return {String}
	 */
	this.getFont-family = function() { return this.font-family; }
	/**
	 * Set the the font family
	 * @param {String} value New value to set.
	 * @alias Titanium_Media_VideoPlayer.setFont-family
	 */
	this.setFont-family = function(value) { this.font-family = value; }
	/**
	 * the font size
	 * @alias Titanium_Media_VideoPlayer.font-size
	 * @property {String}
	 */
	this.font-size = ''
	/**
	 * Get the the font size
	 * @alias Titanium_Media_VideoPlayer.getFont-size
	 * @return {String}
	 */
	this.getFont-size = function() { return this.font-size; }
	/**
	 * Set the the font size
	 * @param {String} value New value to set.
	 * @alias Titanium_Media_VideoPlayer.setFont-size
	 */
	this.setFont-size = function(value) { this.font-size = value; }
	/**
	 * the font style, either normal or italics
	 * @alias Titanium_Media_VideoPlayer.font-style
	 * @property {String}
	 */
	this.font-style = ''
	/**
	 * Get the the font style, either normal or italics
	 * @alias Titanium_Media_VideoPlayer.getFont-style
	 * @return {String}
	 */
	this.getFont-style = function() { return this.font-style; }
	/**
	 * Set the the font style, either normal or italics
	 * @param {String} value New value to set.
	 * @alias Titanium_Media_VideoPlayer.setFont-style
	 */
	this.setFont-style = function(value) { this.font-style = value; }
	/**
	 * the font weight, either normal or bold
	 * @alias Titanium_Media_VideoPlayer.font-weight
	 * @property {String}
	 */
	this.font-weight = ''
	/**
	 * Get the the font weight, either normal or bold
	 * @alias Titanium_Media_VideoPlayer.getFont-weight
	 * @return {String}
	 */
	this.getFont-weight = function() { return this.font-weight; }
	/**
	 * Set the the font weight, either normal or bold
	 * @param {String} value New value to set.
	 * @alias Titanium_Media_VideoPlayer.setFont-weight
	 */
	this.setFont-weight = function(value) { this.font-weight = value; }
	/**
	 * Determines if the movie is presented in the entire screen (obscuring all other application content). Default is false. Setting this property to true before the movie player's view is visible will have no effect.
	 * @alias Titanium_Media_VideoPlayer.fullscreen
	 * @property {Boolean}
	 */
	this.fullscreen = false
	/**
	 * Get the Determines if the movie is presented in the entire screen (obscuring all other application content). Default is false. Setting this property to true before the movie player's view is visible will have no effect.
	 * @alias Titanium_Media_VideoPlayer.getFullscreen
	 * @return {Boolean}
	 */
	this.getFullscreen = function() { return this.fullscreen; }
	/**
	 * Set the Determines if the movie is presented in the entire screen (obscuring all other application content). Default is false. Setting this property to true before the movie player's view is visible will have no effect.
	 * @param {Boolean} value New value to set.
	 * @alias Titanium_Media_VideoPlayer.setFullscreen
	 */
	this.setFullscreen = function(value) { this.fullscreen = value; }
	/**
	 * property for the view height. Can be either a float value or a dimension string ie 'auto' (default), '50%' (iPhone only).
	 * @alias Titanium_Media_VideoPlayer.height
	 * @property {Float,String}
	 */
	this.height = 0.0
	/**
	 * Get the property for the view height. Can be either a float value or a dimension string ie 'auto' (default), '50%' (iPhone only).
	 * @alias Titanium_Media_VideoPlayer.getHeight
	 * @return {Float,String}
	 */
	this.getHeight = function() { return this.height; }
	/**
	 * Set the property for the view height. Can be either a float value or a dimension string ie 'auto' (default), '50%' (iPhone only).
	 * @param {Float,String} value New value to set.
	 * @alias Titanium_Media_VideoPlayer.setHeight
	 */
	this.setHeight = function(value) { this.height = value; }
	/**
	 * The start time of movie playback. Defaults to NaN, indicating the natural start time of the movie.
	 * @alias Titanium_Media_VideoPlayer.initialPlaybackTime
	 * @property {Double}
	 */
	this.initialPlaybackTime = 0.0
	/**
	 * Get the The start time of movie playback. Defaults to NaN, indicating the natural start time of the movie.
	 * @alias Titanium_Media_VideoPlayer.getInitialPlaybackTime
	 * @return {Double}
	 */
	this.getInitialPlaybackTime = function() { return this.initialPlaybackTime; }
	/**
	 * Set the The start time of movie playback. Defaults to NaN, indicating the natural start time of the movie.
	 * @param {Double} value New value to set.
	 * @alias Titanium_Media_VideoPlayer.setInitialPlaybackTime
	 */
	this.setInitialPlaybackTime = function(value) { this.initialPlaybackTime = value; }
	/**
	 * property for the view left position. This position is relative to the view's parent. Can be either a float value or a dimension string ie 'auto' (default), '50%' (iPhone only).
	 * @alias Titanium_Media_VideoPlayer.left
	 * @property {Float,String}
	 */
	this.left = 0.0
	/**
	 * Get the property for the view left position. This position is relative to the view's parent. Can be either a float value or a dimension string ie 'auto' (default), '50%' (iPhone only).
	 * @alias Titanium_Media_VideoPlayer.getLeft
	 * @return {Float,String}
	 */
	this.getLeft = function() { return this.left; }
	/**
	 * Set the property for the view left position. This position is relative to the view's parent. Can be either a float value or a dimension string ie 'auto' (default), '50%' (iPhone only).
	 * @param {Float,String} value New value to set.
	 * @alias Titanium_Media_VideoPlayer.setLeft
	 */
	this.setLeft = function(value) { this.left = value; }
	/**
	 * Returns the network load state of the movie player.
	 * @alias Titanium_Media_VideoPlayer.loadState
	 * @property {Integer}
	 */
	this.loadState = 0
	/**
	 * Get the Returns the network load state of the movie player.
	 * @alias Titanium_Media_VideoPlayer.getLoadState
	 * @return {Integer}
	 */
	this.getLoadState = function() { return this.loadState; }
	/**
	 * Set the Returns the network load state of the movie player.
	 * @param {Integer} value New value to set.
	 * @alias Titanium_Media_VideoPlayer.setLoadState
	 */
	this.setLoadState = function(value) { this.loadState = value; }
	/**
	 * the media object, either a File or Blob.
	 * @alias Titanium_Media_VideoPlayer.media
	 * @property {Object}
	 */
	this.media = {}
	/**
	 * Get the the media object, either a File or Blob.
	 * @alias Titanium_Media_VideoPlayer.getMedia
	 * @return {Object}
	 */
	this.getMedia = function() { return this.media; }
	/**
	 * Set the the media object, either a File or Blob.
	 * @param {Object} value New value to set.
	 * @alias Titanium_Media_VideoPlayer.setMedia
	 */
	this.setMedia = function(value) { this.media = value; }
	/**
	 * The style of the playback controls. Defaults to Titanium.Media.VIDEO_CONTROL_DEFAULT
	 * @alias Titanium_Media_VideoPlayer.mediaControlStyle
	 * @property {Integer}
	 */
	this.mediaControlStyle = 0
	/**
	 * Get the The style of the playback controls. Defaults to Titanium.Media.VIDEO_CONTROL_DEFAULT
	 * @alias Titanium_Media_VideoPlayer.getMediaControlStyle
	 * @return {Integer}
	 */
	this.getMediaControlStyle = function() { return this.mediaControlStyle; }
	/**
	 * Set the The style of the playback controls. Defaults to Titanium.Media.VIDEO_CONTROL_DEFAULT
	 * @param {Integer} value New value to set.
	 * @alias Titanium_Media_VideoPlayer.setMediaControlStyle
	 */
	this.setMediaControlStyle = function(value) { this.mediaControlStyle = value; }
	/**
	 * The types of media in the movie, or Titanium.Media.VIDEO_MEDIA_TYPE_NONE if not known.
	 * @alias Titanium_Media_VideoPlayer.mediaTypes
	 * @property {Integer}
	 */
	this.mediaTypes = 0
	/**
	 * Get the The types of media in the movie, or Titanium.Media.VIDEO_MEDIA_TYPE_NONE if not known.
	 * @alias Titanium_Media_VideoPlayer.getMediaTypes
	 * @return {Integer}
	 */
	this.getMediaTypes = function() { return this.mediaTypes; }
	/**
	 * Set the The types of media in the movie, or Titanium.Media.VIDEO_MEDIA_TYPE_NONE if not known.
	 * @param {Integer} value New value to set.
	 * @alias Titanium_Media_VideoPlayer.setMediaTypes
	 */
	this.setMediaTypes = function(value) { this.mediaTypes = value; }
	/**
	 * deprecated in 3.2+ of the iPhone SDK - use mediaControlStyle. Provides the ability to set the control mode of the movie player. Defaults to Titanium.Media.VIDEO_CONTROL_DEFAULT.
	 * @alias Titanium_Media_VideoPlayer.movieControlMode
	 * @property {Integer}
	 */
	this.movieControlMode = 0
	/**
	 * Get the deprecated in 3.2+ of the iPhone SDK - use mediaControlStyle. Provides the ability to set the control mode of the movie player. Defaults to Titanium.Media.VIDEO_CONTROL_DEFAULT.
	 * @alias Titanium_Media_VideoPlayer.getMovieControlMode
	 * @return {Integer}
	 */
	this.getMovieControlMode = function() { return this.movieControlMode; }
	/**
	 * Set the deprecated in 3.2+ of the iPhone SDK - use mediaControlStyle. Provides the ability to set the control mode of the movie player. Defaults to Titanium.Media.VIDEO_CONTROL_DEFAULT.
	 * @param {Integer} value New value to set.
	 * @alias Titanium_Media_VideoPlayer.setMovieControlMode
	 */
	this.setMovieControlMode = function(value) { this.movieControlMode = value; }
	/**
	 * returns a dictionary with properties width and height. Returns the natural size of the movie or 0 for both properties if not known or applicable.
	 * @alias Titanium_Media_VideoPlayer.naturalSize
	 * @property {Object}
	 */
	this.naturalSize = {}
	/**
	 * Get the returns a dictionary with properties width and height. Returns the natural size of the movie or 0 for both properties if not known or applicable.
	 * @alias Titanium_Media_VideoPlayer.getNaturalSize
	 * @return {Object}
	 */
	this.getNaturalSize = function() { return this.naturalSize; }
	/**
	 * Set the returns a dictionary with properties width and height. Returns the natural size of the movie or 0 for both properties if not known or applicable.
	 * @param {Object} value New value to set.
	 * @alias Titanium_Media_VideoPlayer.setNaturalSize
	 */
	this.setNaturalSize = function(value) { this.naturalSize = value; }
	/**
	 * the opacity from 0.0-1.0
	 * @alias Titanium_Media_VideoPlayer.opacity
	 * @property {Float}
	 */
	this.opacity = 0.0
	/**
	 * Get the the opacity from 0.0-1.0
	 * @alias Titanium_Media_VideoPlayer.getOpacity
	 * @return {Float}
	 */
	this.getOpacity = function() { return this.opacity; }
	/**
	 * Set the the opacity from 0.0-1.0
	 * @param {Float} value New value to set.
	 * @alias Titanium_Media_VideoPlayer.setOpacity
	 */
	this.setOpacity = function(value) { this.opacity = value; }
	/**
	 * The currently playable duration of the movie, for progressively downloaded network content.
	 * @alias Titanium_Media_VideoPlayer.playableDuration
	 * @property {Double}
	 */
	this.playableDuration = 0.0
	/**
	 * Get the The currently playable duration of the movie, for progressively downloaded network content.
	 * @alias Titanium_Media_VideoPlayer.getPlayableDuration
	 * @return {Double}
	 */
	this.getPlayableDuration = function() { return this.playableDuration; }
	/**
	 * Set the The currently playable duration of the movie, for progressively downloaded network content.
	 * @param {Double} value New value to set.
	 * @alias Titanium_Media_VideoPlayer.setPlayableDuration
	 */
	this.setPlayableDuration = function(value) { this.playableDuration = value; }
	/**
	 * Returns the current playback state of the music player
	 * @alias Titanium_Media_VideoPlayer.playbackState
	 * @property {Integer}
	 */
	this.playbackState = 0
	/**
	 * Get the Returns the current playback state of the music player
	 * @alias Titanium_Media_VideoPlayer.getPlaybackState
	 * @return {Integer}
	 */
	this.getPlaybackState = function() { return this.playbackState; }
	/**
	 * Set the Returns the current playback state of the music player
	 * @param {Integer} value New value to set.
	 * @alias Titanium_Media_VideoPlayer.setPlaybackState
	 */
	this.setPlaybackState = function(value) { this.playbackState = value; }
	/**
	 * Boolean to indicate if the player has started playing.
	 * @alias Titanium_Media_VideoPlayer.playing
	 * @property {Boolean}
	 */
	this.playing = false
	/**
	 * Get the Boolean to indicate if the player has started playing.
	 * @alias Titanium_Media_VideoPlayer.getPlaying
	 * @return {Boolean}
	 */
	this.getPlaying = function() { return this.playing; }
	/**
	 * Set the Boolean to indicate if the player has started playing.
	 * @param {Boolean} value New value to set.
	 * @alias Titanium_Media_VideoPlayer.setPlaying
	 */
	this.setPlaying = function(value) { this.playing = value; }
	/**
	 * Determines how the movie player repeats when reaching the end of playback. Defaults to Titanium.Media.VIDEO_REPEAT_MODE_NONE.
	 * @alias Titanium_Media_VideoPlayer.repeatMode
	 * @property {Integer}
	 */
	this.repeatMode = 0
	/**
	 * Get the Determines how the movie player repeats when reaching the end of playback. Defaults to Titanium.Media.VIDEO_REPEAT_MODE_NONE.
	 * @alias Titanium_Media_VideoPlayer.getRepeatMode
	 * @return {Integer}
	 */
	this.getRepeatMode = function() { return this.repeatMode; }
	/**
	 * Set the Determines how the movie player repeats when reaching the end of playback. Defaults to Titanium.Media.VIDEO_REPEAT_MODE_NONE.
	 * @param {Integer} value New value to set.
	 * @alias Titanium_Media_VideoPlayer.setRepeatMode
	 */
	this.setRepeatMode = function(value) { this.repeatMode = value; }
	/**
	 * property for the view right position. This position is relative to the view's parent. Can be either a float value or a dimension string ie 'auto' (default), '50%' (iPhone only).
	 * @alias Titanium_Media_VideoPlayer.right
	 * @property {Float,String}
	 */
	this.right = 0.0
	/**
	 * Get the property for the view right position. This position is relative to the view's parent. Can be either a float value or a dimension string ie 'auto' (default), '50%' (iPhone only).
	 * @alias Titanium_Media_VideoPlayer.getRight
	 * @return {Float,String}
	 */
	this.getRight = function() { return this.right; }
	/**
	 * Set the property for the view right position. This position is relative to the view's parent. Can be either a float value or a dimension string ie 'auto' (default), '50%' (iPhone only).
	 * @param {Float,String} value New value to set.
	 * @alias Titanium_Media_VideoPlayer.setRight
	 */
	this.setRight = function(value) { this.right = value; }
	/**
	 * Determines how the content scales to fit the view. Defaults to Titanium.Media.VIDEO_SCALING_ASPECT_FIT.
	 * @alias Titanium_Media_VideoPlayer.scalingMode
	 * @property {Integer}
	 */
	this.scalingMode = 0
	/**
	 * Get the Determines how the content scales to fit the view. Defaults to Titanium.Media.VIDEO_SCALING_ASPECT_FIT.
	 * @alias Titanium_Media_VideoPlayer.getScalingMode
	 * @return {Integer}
	 */
	this.getScalingMode = function() { return this.scalingMode; }
	/**
	 * Set the Determines how the content scales to fit the view. Defaults to Titanium.Media.VIDEO_SCALING_ASPECT_FIT.
	 * @param {Integer} value New value to set.
	 * @alias Titanium_Media_VideoPlayer.setScalingMode
	 */
	this.setScalingMode = function(value) { this.scalingMode = value; }
	/**
	 * the size of the view as a dictionary of width and height properties
	 * @alias Titanium_Media_VideoPlayer.size
	 * @property {Object}
	 */
	this.size = {}
	/**
	 * Get the the size of the view as a dictionary of width and height properties
	 * @alias Titanium_Media_VideoPlayer.getSize
	 * @return {Object}
	 */
	this.getSize = function() { return this.size; }
	/**
	 * Set the the size of the view as a dictionary of width and height properties
	 * @param {Object} value New value to set.
	 * @alias Titanium_Media_VideoPlayer.setSize
	 */
	this.setSize = function(value) { this.size = value; }
	/**
	 * One of Titanium.UI.Android.SOFT_KEYBOARD_DEFAULT_ON_FOCUS, Titanium.UI.Android.SOFT_KEYBOARD_HIDE_ON_FOCUS, or Titanium.UI.Android.SOFT_KEYBOARD_SHOW_ON_FOCUS. (Android only)
	 * @alias Titanium_Media_VideoPlayer.softKeyboardOnFocus
	 * @property {Integer}
	 */
	this.softKeyboardOnFocus = 0
	/**
	 * Get the One of Titanium.UI.Android.SOFT_KEYBOARD_DEFAULT_ON_FOCUS, Titanium.UI.Android.SOFT_KEYBOARD_HIDE_ON_FOCUS, or Titanium.UI.Android.SOFT_KEYBOARD_SHOW_ON_FOCUS. (Android only)
	 * @alias Titanium_Media_VideoPlayer.getSoftKeyboardOnFocus
	 * @return {Integer}
	 */
	this.getSoftKeyboardOnFocus = function() { return this.softKeyboardOnFocus; }
	/**
	 * Set the One of Titanium.UI.Android.SOFT_KEYBOARD_DEFAULT_ON_FOCUS, Titanium.UI.Android.SOFT_KEYBOARD_HIDE_ON_FOCUS, or Titanium.UI.Android.SOFT_KEYBOARD_SHOW_ON_FOCUS. (Android only)
	 * @param {Integer} value New value to set.
	 * @alias Titanium_Media_VideoPlayer.setSoftKeyboardOnFocus
	 */
	this.setSoftKeyboardOnFocus = function(value) { this.softKeyboardOnFocus = value; }
	/**
	 * The playback type of the movie. Defaults to Titanium.Media.VIDEO_SOURCE_TYPE_UNKNOWN. Specifying a playback type before playing the movie can result in faster load times.
	 * @alias Titanium_Media_VideoPlayer.sourceType
	 * @property {Integer}
	 */
	this.sourceType = 0
	/**
	 * Get the The playback type of the movie. Defaults to Titanium.Media.VIDEO_SOURCE_TYPE_UNKNOWN. Specifying a playback type before playing the movie can result in faster load times.
	 * @alias Titanium_Media_VideoPlayer.getSourceType
	 * @return {Integer}
	 */
	this.getSourceType = function() { return this.sourceType; }
	/**
	 * Set the The playback type of the movie. Defaults to Titanium.Media.VIDEO_SOURCE_TYPE_UNKNOWN. Specifying a playback type before playing the movie can result in faster load times.
	 * @param {Integer} value New value to set.
	 * @alias Titanium_Media_VideoPlayer.setSourceType
	 */
	this.setSourceType = function(value) { this.sourceType = value; }
	/**
	 * property for the view top position. This position is relative to the view's parent. Can be either a float value or a dimension string ie 'auto' (default), '50%' (iPhone only).
	 * @alias Titanium_Media_VideoPlayer.top
	 * @property {Float,String}
	 */
	this.top = 0.0
	/**
	 * Get the property for the view top position. This position is relative to the view's parent. Can be either a float value or a dimension string ie 'auto' (default), '50%' (iPhone only).
	 * @alias Titanium_Media_VideoPlayer.getTop
	 * @return {Float,String}
	 */
	this.getTop = function() { return this.top; }
	/**
	 * Set the property for the view top position. This position is relative to the view's parent. Can be either a float value or a dimension string ie 'auto' (default), '50%' (iPhone only).
	 * @param {Float,String} value New value to set.
	 * @alias Titanium_Media_VideoPlayer.setTop
	 */
	this.setTop = function(value) { this.top = value; }
	/**
	 * a boolean indicating if the view should receive touch events (true, default) or forward them to peers (false)
	 * @alias Titanium_Media_VideoPlayer.touchEnabled
	 * @property {Boolean}
	 */
	this.touchEnabled = false
	/**
	 * Get the a boolean indicating if the view should receive touch events (true, default) or forward them to peers (false)
	 * @alias Titanium_Media_VideoPlayer.getTouchEnabled
	 * @return {Boolean}
	 */
	this.getTouchEnabled = function() { return this.touchEnabled; }
	/**
	 * Set the a boolean indicating if the view should receive touch events (true, default) or forward them to peers (false)
	 * @param {Boolean} value New value to set.
	 * @alias Titanium_Media_VideoPlayer.setTouchEnabled
	 */
	this.setTouchEnabled = function(value) { this.touchEnabled = value; }
	/**
	 * the transformation matrix to apply to the view
	 * @alias Titanium_Media_VideoPlayer.transform
	 * @property {Object}
	 */
	this.transform = {}
	/**
	 * Get the the transformation matrix to apply to the view
	 * @alias Titanium_Media_VideoPlayer.getTransform
	 * @return {Object}
	 */
	this.getTransform = function() { return this.transform; }
	/**
	 * Set the the transformation matrix to apply to the view
	 * @param {Object} value New value to set.
	 * @alias Titanium_Media_VideoPlayer.setTransform
	 */
	this.setTransform = function(value) { this.transform = value; }
	/**
	 * url of the media.
	 * @alias Titanium_Media_VideoPlayer.url
	 * @property {String}
	 */
	this.url = ''
	/**
	 * Get the url of the media.
	 * @alias Titanium_Media_VideoPlayer.getUrl
	 * @return {String}
	 */
	this.getUrl = function() { return this.url; }
	/**
	 * Set the url of the media.
	 * @param {String} value New value to set.
	 * @alias Titanium_Media_VideoPlayer.setUrl
	 */
	this.setUrl = function(value) { this.url = value; }
	/**
	 * Indicates if the movie player should inherit the application's audio session instead of creating a new session (which would interrupt the application's session). Defaults to true. Setting this property during playback will not take effect until playback is stopped and started again.
	 * @alias Titanium_Media_VideoPlayer.useApplicationAudioSession
	 * @property {Boolean}
	 */
	this.useApplicationAudioSession = false
	/**
	 * Get the Indicates if the movie player should inherit the application's audio session instead of creating a new session (which would interrupt the application's session). Defaults to true. Setting this property during playback will not take effect until playback is stopped and started again.
	 * @alias Titanium_Media_VideoPlayer.getUseApplicationAudioSession
	 * @return {Boolean}
	 */
	this.getUseApplicationAudioSession = function() { return this.useApplicationAudioSession; }
	/**
	 * Set the Indicates if the movie player should inherit the application's audio session instead of creating a new session (which would interrupt the application's session). Defaults to true. Setting this property during playback will not take effect until playback is stopped and started again.
	 * @param {Boolean} value New value to set.
	 * @alias Titanium_Media_VideoPlayer.setUseApplicationAudioSession
	 */
	this.setUseApplicationAudioSession = function(value) { this.useApplicationAudioSession = value; }
	/**
	 * a boolean of the visibility of the view
	 * @alias Titanium_Media_VideoPlayer.visible
	 * @property {Boolean}
	 */
	this.visible = false
	/**
	 * Get the a boolean of the visibility of the view
	 * @alias Titanium_Media_VideoPlayer.getVisible
	 * @return {Boolean}
	 */
	this.getVisible = function() { return this.visible; }
	/**
	 * Set the a boolean of the visibility of the view
	 * @param {Boolean} value New value to set.
	 * @alias Titanium_Media_VideoPlayer.setVisible
	 */
	this.setVisible = function(value) { this.visible = value; }
	/**
	 * property for the view width. Can be either a float value or a dimension string ie 'auto' (default), '50%' (iPhone only).
	 * @alias Titanium_Media_VideoPlayer.width
	 * @property {Float,String}
	 */
	this.width = 0.0
	/**
	 * Get the property for the view width. Can be either a float value or a dimension string ie 'auto' (default), '50%' (iPhone only).
	 * @alias Titanium_Media_VideoPlayer.getWidth
	 * @return {Float,String}
	 */
	this.getWidth = function() { return this.width; }
	/**
	 * Set the property for the view width. Can be either a float value or a dimension string ie 'auto' (default), '50%' (iPhone only).
	 * @param {Float,String} value New value to set.
	 * @alias Titanium_Media_VideoPlayer.setWidth
	 */
	this.setWidth = function(value) { this.width = value; }
	/**
	 * the z index position relative to other sibling views
	 * @alias Titanium_Media_VideoPlayer.zIndex
	 * @property {Integer}
	 */
	this.zIndex = 0
	/**
	 * Get the the z index position relative to other sibling views
	 * @alias Titanium_Media_VideoPlayer.getZIndex
	 * @return {Integer}
	 */
	this.getZIndex = function() { return this.zIndex; }
	/**
	 * Set the the z index position relative to other sibling views
	 * @param {Integer} value New value to set.
	 * @alias Titanium_Media_VideoPlayer.setZIndex
	 */
	this.setZIndex = function(value) { this.zIndex = value; }
	/**
	 * add a child to the view hierarchy
	 * @param {Object} view the view to add to this views hiearchy
	 * @alias Titanium_Media_VideoPlayer.add
	 */
	this.add = function add(view) { }
	/**
	 * add an event listener for the instance to receive view triggered events
	 * @param {String} name name of the event
	 * @param {Function} callback callback function to invoke when the event is fired
	 * @alias Titanium_Media_VideoPlayer.addEventListener
	 */
	this.addEventListener = function addEventListener(name,callback) { }
	/**
	 * animate the view
	 * @param {Object} obj either a dictionary of animation properties or an Animation object
	 * @param {Function} callback function to be invoked upon completion of the animation
	 * @alias Titanium_Media_VideoPlayer.animate
	 */
	this.animate = function animate(obj,callback) { }
	/**
	 * Cancels all pending asynchronous thumbnail requests.
	 * @alias Titanium_Media_VideoPlayer.cancelAllThumbnailImageRequests
	 */
	this.cancelAllThumbnailImageRequests = function cancelAllThumbnailImageRequests() { }
	/**
	 * fire a synthesized event to the views listener
	 * @param {String} name name of the event
	 * @param {Object} event event object
	 * @alias Titanium_Media_VideoPlayer.fireEvent
	 */
	this.fireEvent = function fireEvent(name,event) { }
	/**
	 * hide the view
	 * @alias Titanium_Media_VideoPlayer.hide
	 */
	this.hide = function hide() { }
	/**
	 * pause playing the video. On iOS only available under 3.2 and later
	 * @alias Titanium_Media_VideoPlayer.pause
	 */
	this.pause = function pause() { }
	/**
	 * start playing the video
	 * @alias Titanium_Media_VideoPlayer.play
	 */
	this.play = function play() { }
	/**
	 * release the internal video resources immediately.  this is not usually necessary but can help if you no longer need to use the player after it is used to help converse memory.
	 * @alias Titanium_Media_VideoPlayer.release
	 */
	this.release = function release() { }
	/**
	 * remove a previously add view from the view hiearchy
	 * @param {Object} view the view to remove from this views hiearchy
	 * @alias Titanium_Media_VideoPlayer.remove
	 */
	this.remove = function remove(view) { }
	/**
	 * remove a previously added event listener
	 * @param {String} name name of the event
	 * @param {Function} callback callback function passed in addEventListener
	 * @alias Titanium_Media_VideoPlayer.removeEventListener
	 */
	this.removeEventListener = function removeEventListener(name,callback) { }
	/**
	 * Asynchronously request thumbnails for one or more times, provided as an array of numbers (double). Fires a thumbnail event on completion. Optionally invokes the callback function passed in the method.
	 * @param {Array} times array of doubles for each time to request
	 * @param {Integer} option either [[Titanium.Media.VIDEO_TIME_OPTION_NEAREST_KEYFRAME]] or [[Titanium.Media.VIDEO_TIME_OPTION_EXACT]].
	 * @alias Titanium_Media_VideoPlayer.requestThumbnailImagesAtTimes
	 */
	this.requestThumbnailImagesAtTimes = function requestThumbnailImagesAtTimes(times,option) { }
	/**
	 * A view for customization which is always displayed behind movie content.
	 * @param {Object} view view to set
	 * @alias Titanium_Media_VideoPlayer.setBackgroundView
	 */
	this.setBackgroundView = function setBackgroundView(view) { }
	/**
	 * the a non-url based media to play, either a File or Blob.
	 * @param {Object} media media to play
	 * @alias Titanium_Media_VideoPlayer.setMedia
	 */
	this.setMedia = function setMedia(media) { }
	/**
	 * the url to play
	 * @param {String} url the url to play
	 * @alias Titanium_Media_VideoPlayer.setUrl
	 */
	this.setUrl = function setUrl(url) { }
	/**
	 * make the view visible
	 * @alias Titanium_Media_VideoPlayer.show
	 */
	this.show = function show() { }
	/**
	 * stop playing the video
	 * @alias Titanium_Media_VideoPlayer.stop
	 */
	this.stop = function stop() { }
	/**
	 * Returns a thumbnail at the given time as a blob.
	 * @param {Double} time playback time
	 * @param {Integer} option either [[Titanium.Media.VIDEO_TIME_OPTION_NEAREST_KEYFRAME]] or [[Titanium.Media.VIDEO_TIME_OPTION_EXACT]]
	 * @alias Titanium_Media_VideoPlayer.thumbnailImageAtTime
	 * @return {Object}
	 */
	this.thumbnailImageAtTime = function thumbnailImageAtTime(time,option) { return {}; }
	/**
	 * return a Blob image of the rendered view
	 * @param {Function} f function to be invoked upon completion. if non-null, this method will be performed asynchronously. if null, it will be performed immediately
	 * @alias Titanium_Media_VideoPlayer.toImage
	 * @return {Object}
	 */
	this.toImage = function toImage(f) { return {}; }
};

/**
 * The BonjourBrowser instance returned from Titanium.Network.createBonjourBrowser.  This object is a browser for the discovery and retrieval of Bonjour services available on the network.
 * @since 1.2.0
 */
function Titanium_Network_BonjourBrowser() {
	/**
	 * The domain the browser is searching in
	 * @alias Titanium_Network_BonjourBrowser.domain
	 * @property {String}
	 */
	this.domain = ''
	/**
	 * Get the The domain the browser is searching in
	 * @alias Titanium_Network_BonjourBrowser.getDomain
	 * @return {String}
	 */
	this.getDomain = function() { return this.domain; }
	/**
	 * Set the The domain the browser is searching in
	 * @param {String} value New value to set.
	 * @alias Titanium_Network_BonjourBrowser.setDomain
	 */
	this.setDomain = function(value) { this.domain = value; }
	/**
	 * Whether or not the browser is currently searching
	 * @alias Titanium_Network_BonjourBrowser.isSearching
	 * @property {Boolean}
	 */
	this.isSearching = false
	/**
	 * Get the Whether or not the browser is currently searching
	 * @alias Titanium_Network_BonjourBrowser.getIsSearching
	 * @return {Boolean}
	 */
	this.getIsSearching = function() { return this.isSearching; }
	/**
	 * Set the Whether or not the browser is currently searching
	 * @param {Boolean} value New value to set.
	 * @alias Titanium_Network_BonjourBrowser.setIsSearching
	 */
	this.setIsSearching = function(value) { this.isSearching = value; }
	/**
	 * The type of the service the browser searches for
	 * @alias Titanium_Network_BonjourBrowser.serviceType
	 * @property {String}
	 */
	this.serviceType = ''
	/**
	 * Get the The type of the service the browser searches for
	 * @alias Titanium_Network_BonjourBrowser.getServiceType
	 * @return {String}
	 */
	this.getServiceType = function() { return this.serviceType; }
	/**
	 * Set the The type of the service the browser searches for
	 * @param {String} value New value to set.
	 * @alias Titanium_Network_BonjourBrowser.setServiceType
	 */
	this.setServiceType = function(value) { this.serviceType = value; }
	/**
	 * Conduct a search for Bonjour services matching the type and domain specified during creation
	 * @alias Titanium_Network_BonjourBrowser.search
	 */
	this.search = function search() { }
	/**
	 * Halt an ongoing search
	 * @alias Titanium_Network_BonjourBrowser.stopSearch
	 */
	this.stopSearch = function stopSearch() { }
};

/**
 * The BonjourService instance returned either from Titanium.Network.createBonjourService or via the service list from a BonjourBrowser updatedServices event.  This object describes a service on the network which is published by Bonjour.
 * @since 1.2.0
 */
function Titanium_Network_BonjourService() {
	/**
	 * the domain of the service
	 * @alias Titanium_Network_BonjourService.domain
	 * @property {String}
	 */
	this.domain = ''
	/**
	 * Get the the domain of the service
	 * @alias Titanium_Network_BonjourService.getDomain
	 * @return {String}
	 */
	this.getDomain = function() { return this.domain; }
	/**
	 * Set the the domain of the service
	 * @param {String} value New value to set.
	 * @alias Titanium_Network_BonjourService.setDomain
	 */
	this.setDomain = function(value) { this.domain = value; }
	/**
	 * whether or not the service is local to the device
	 * @alias Titanium_Network_BonjourService.isLocal
	 * @property {Boolean}
	 */
	this.isLocal = false
	/**
	 * Get the whether or not the service is local to the device
	 * @alias Titanium_Network_BonjourService.getIsLocal
	 * @return {Boolean}
	 */
	this.getIsLocal = function() { return this.isLocal; }
	/**
	 * Set the whether or not the service is local to the device
	 * @param {Boolean} value New value to set.
	 * @alias Titanium_Network_BonjourService.setIsLocal
	 */
	this.setIsLocal = function(value) { this.isLocal = value; }
	/**
	 * the name of the service
	 * @alias Titanium_Network_BonjourService.name
	 * @property {String}
	 */
	this.name = ''
	/**
	 * Get the the name of the service
	 * @alias Titanium_Network_BonjourService.getName
	 * @return {String}
	 */
	this.getName = function() { return this.name; }
	/**
	 * Set the the name of the service
	 * @param {String} value New value to set.
	 * @alias Titanium_Network_BonjourService.setName
	 */
	this.setName = function(value) { this.name = value; }
	/**
	 * the TCPSocket object that is used to connect to the service
	 * @alias Titanium_Network_BonjourService.socket
	 * @property {Object}
	 */
	this.socket = {}
	/**
	 * Get the the TCPSocket object that is used to connect to the service
	 * @alias Titanium_Network_BonjourService.getSocket
	 * @return {Object}
	 */
	this.getSocket = function() { return this.socket; }
	/**
	 * Set the the TCPSocket object that is used to connect to the service
	 * @param {Object} value New value to set.
	 * @alias Titanium_Network_BonjourService.setSocket
	 */
	this.setSocket = function(value) { this.socket = value; }
	/**
	 * the type of the service
	 * @alias Titanium_Network_BonjourService.type
	 * @property {String}
	 */
	this.type = ''
	/**
	 * Get the the type of the service
	 * @alias Titanium_Network_BonjourService.getType
	 * @return {String}
	 */
	this.getType = function() { return this.type; }
	/**
	 * Set the the type of the service
	 * @param {String} value New value to set.
	 * @alias Titanium_Network_BonjourService.setType
	 */
	this.setType = function(value) { this.type = value; }
	/**
	 * Publish a Bonjour service to the network.  Only works if isLocal is TRUE
	 * @param {Object} socket a TCPSocket object to associate with the Bonjour service.
	 * @alias Titanium_Network_BonjourService.publish
	 */
	this.publish = function publish(socket) { }
	/**
	 * Resolve a Bonjour service from the network.  Must be done before attempting to access the service's socket information, if a remote service.  You cannot resolve a locally published service.
	 * @param {Double} timeout the timeout for service resolution, in seconds.  Optional, default is 120s.
	 * @alias Titanium_Network_BonjourService.resolve
	 */
	this.resolve = function resolve(timeout) { }
	/**
	 * Halts publication of a service.
	 * @alias Titanium_Network_BonjourService.stop
	 */
	this.stop = function stop() { }
};

/**
 * The HttpClient instance returned from Titanium.Network.createHTTPClient. This object (mostly) implements the XMLHttpRequest specification.
 * @since 0.1
 */
function Titanium_Network_HTTPClient() {
	/**
	 * boolean to indicate that the response was successful
	 * @alias Titanium_Network_HTTPClient.connected
	 * @property {Boolean}
	 */
	this.connected = false
	/**
	 * Get the boolean to indicate that the response was successful
	 * @alias Titanium_Network_HTTPClient.getConnected
	 * @return {Boolean}
	 */
	this.getConnected = function() { return this.connected; }
	/**
	 * Set the boolean to indicate that the response was successful
	 * @param {Boolean} value New value to set.
	 * @alias Titanium_Network_HTTPClient.setConnected
	 */
	this.setConnected = function(value) { this.connected = value; }
	/**
	 * the connection type, normally either GET or POST.
	 * @alias Titanium_Network_HTTPClient.connectionType
	 * @property {String}
	 */
	this.connectionType = ''
	/**
	 * Get the the connection type, normally either GET or POST.
	 * @alias Titanium_Network_HTTPClient.getConnectionType
	 * @return {String}
	 */
	this.getConnectionType = function() { return this.connectionType; }
	/**
	 * Set the the connection type, normally either GET or POST.
	 * @param {String} value New value to set.
	 * @alias Titanium_Network_HTTPClient.setConnectionType
	 */
	this.setConnectionType = function(value) { this.connectionType = value; }
	/**
	 * file to download contents to.  Can only be set after calling open.  iOS only
	 * @alias Titanium_Network_HTTPClient.file
	 * @property {String}
	 */
	this.file = ''
	/**
	 * Get the file to download contents to.  Can only be set after calling open.  iOS only
	 * @alias Titanium_Network_HTTPClient.getFile
	 * @return {String}
	 */
	this.getFile = function() { return this.file; }
	/**
	 * Set the file to download contents to.  Can only be set after calling open.  iOS only
	 * @param {String} value New value to set.
	 * @alias Titanium_Network_HTTPClient.setFile
	 */
	this.setFile = function(value) { this.file = value; }
	/**
	 * the absolute URL of the request
	 * @alias Titanium_Network_HTTPClient.location
	 * @property {String}
	 */
	this.location = ''
	/**
	 * Get the the absolute URL of the request
	 * @alias Titanium_Network_HTTPClient.getLocation
	 * @return {String}
	 */
	this.getLocation = function() { return this.location; }
	/**
	 * Set the the absolute URL of the request
	 * @param {String} value New value to set.
	 * @alias Titanium_Network_HTTPClient.setLocation
	 */
	this.setLocation = function(value) { this.location = value; }
	/**
	 * set this to a function before calling open to cause the function to be called at regular intervals as the request data is being received. the progress property of the event will contain a value from 0.0-1.0 with the progress.
	 * @alias Titanium_Network_HTTPClient.ondatastream
	 * @property {Function}
	 */
	this.ondatastream = {}
	/**
	 * Get the set this to a function before calling open to cause the function to be called at regular intervals as the request data is being received. the progress property of the event will contain a value from 0.0-1.0 with the progress.
	 * @alias Titanium_Network_HTTPClient.getOndatastream
	 * @return {Function}
	 */
	this.getOndatastream = function() { return this.ondatastream; }
	/**
	 * Set the set this to a function before calling open to cause the function to be called at regular intervals as the request data is being received. the progress property of the event will contain a value from 0.0-1.0 with the progress.
	 * @param {Function} value New value to set.
	 * @alias Titanium_Network_HTTPClient.setOndatastream
	 */
	this.setOndatastream = function(value) { this.ondatastream = value; }
	/**
	 * set this to a function before calling open to cause the function to be called upon a error response
	 * @alias Titanium_Network_HTTPClient.onerror
	 * @property {Function}
	 */
	this.onerror = {}
	/**
	 * Get the set this to a function before calling open to cause the function to be called upon a error response
	 * @alias Titanium_Network_HTTPClient.getOnerror
	 * @return {Function}
	 */
	this.getOnerror = function() { return this.onerror; }
	/**
	 * Set the set this to a function before calling open to cause the function to be called upon a error response
	 * @param {Function} value New value to set.
	 * @alias Titanium_Network_HTTPClient.setOnerror
	 */
	this.setOnerror = function(value) { this.onerror = value; }
	/**
	 * set this to a function before calling open to cause the function to be called upon a successful response
	 * @alias Titanium_Network_HTTPClient.onload
	 * @property {Function}
	 */
	this.onload = {}
	/**
	 * Get the set this to a function before calling open to cause the function to be called upon a successful response
	 * @alias Titanium_Network_HTTPClient.getOnload
	 * @return {Function}
	 */
	this.getOnload = function() { return this.onload; }
	/**
	 * Set the set this to a function before calling open to cause the function to be called upon a successful response
	 * @param {Function} value New value to set.
	 * @alias Titanium_Network_HTTPClient.setOnload
	 */
	this.setOnload = function(value) { this.onload = value; }
	/**
	 * set this to a function before calling open to cause the function to be called for each readyState change
	 * @alias Titanium_Network_HTTPClient.onreadystatechange
	 * @property {Function}
	 */
	this.onreadystatechange = {}
	/**
	 * Get the set this to a function before calling open to cause the function to be called for each readyState change
	 * @alias Titanium_Network_HTTPClient.getOnreadystatechange
	 * @return {Function}
	 */
	this.getOnreadystatechange = function() { return this.onreadystatechange; }
	/**
	 * Set the set this to a function before calling open to cause the function to be called for each readyState change
	 * @param {Function} value New value to set.
	 * @alias Titanium_Network_HTTPClient.setOnreadystatechange
	 */
	this.setOnreadystatechange = function(value) { this.onreadystatechange = value; }
	/**
	 * set this to a function before calling open to cause the function to be called at regular intervals as the request data is being transmitted. the progress property of the event will contain a value from 0.0-1.0 with the progress.
	 * @alias Titanium_Network_HTTPClient.onsendstream
	 * @property {Function}
	 */
	this.onsendstream = {}
	/**
	 * Get the set this to a function before calling open to cause the function to be called at regular intervals as the request data is being transmitted. the progress property of the event will contain a value from 0.0-1.0 with the progress.
	 * @alias Titanium_Network_HTTPClient.getOnsendstream
	 * @return {Function}
	 */
	this.getOnsendstream = function() { return this.onsendstream; }
	/**
	 * Set the set this to a function before calling open to cause the function to be called at regular intervals as the request data is being transmitted. the progress property of the event will contain a value from 0.0-1.0 with the progress.
	 * @param {Function} value New value to set.
	 * @alias Titanium_Network_HTTPClient.setOnsendstream
	 */
	this.setOnsendstream = function(value) { this.onsendstream = value; }
	/**
	 * the readyState value
	 * @alias Titanium_Network_HTTPClient.readyState
	 * @property {Integer}
	 */
	this.readyState = 0
	/**
	 * Get the the readyState value
	 * @alias Titanium_Network_HTTPClient.getReadyState
	 * @return {Integer}
	 */
	this.getReadyState = function() { return this.readyState; }
	/**
	 * Set the the readyState value
	 * @param {Integer} value New value to set.
	 * @alias Titanium_Network_HTTPClient.setReadyState
	 */
	this.setReadyState = function(value) { this.readyState = value; }
	/**
	 * the response data as a Blob object.
	 * @alias Titanium_Network_HTTPClient.responseData
	 * @property {Object}
	 */
	this.responseData = {}
	/**
	 * Get the the response data as a Blob object.
	 * @alias Titanium_Network_HTTPClient.getResponseData
	 * @return {Object}
	 */
	this.getResponseData = function() { return this.responseData; }
	/**
	 * Set the the response data as a Blob object.
	 * @param {Object} value New value to set.
	 * @alias Titanium_Network_HTTPClient.setResponseData
	 */
	this.setResponseData = function(value) { this.responseData = value; }
	/**
	 * the response as text or null if an error was received or no data was returned
	 * @alias Titanium_Network_HTTPClient.responseText
	 * @property {String}
	 */
	this.responseText = ''
	/**
	 * Get the the response as text or null if an error was received or no data was returned
	 * @alias Titanium_Network_HTTPClient.getResponseText
	 * @return {String}
	 */
	this.getResponseText = function() { return this.responseText; }
	/**
	 * Set the the response as text or null if an error was received or no data was returned
	 * @param {String} value New value to set.
	 * @alias Titanium_Network_HTTPClient.setResponseText
	 */
	this.setResponseText = function(value) { this.responseText = value; }
	/**
	 * the response object as an XML DOMDocument object. returns null if the content type returned by the server was not XML or the content could not be parsed
	 * @alias Titanium_Network_HTTPClient.responseXML
	 * @property {Object}
	 */
	this.responseXML = {}
	/**
	 * Get the the response object as an XML DOMDocument object. returns null if the content type returned by the server was not XML or the content could not be parsed
	 * @alias Titanium_Network_HTTPClient.getResponseXML
	 * @return {Object}
	 */
	this.getResponseXML = function() { return this.responseXML; }
	/**
	 * Set the the response object as an XML DOMDocument object. returns null if the content type returned by the server was not XML or the content could not be parsed
	 * @param {Object} value New value to set.
	 * @alias Titanium_Network_HTTPClient.setResponseXML
	 */
	this.setResponseXML = function(value) { this.responseXML = value; }
	/**
	 * the response HTTP status code
	 * @alias Titanium_Network_HTTPClient.status
	 * @property {Integer}
	 */
	this.status = 0
	/**
	 * Get the the response HTTP status code
	 * @alias Titanium_Network_HTTPClient.getStatus
	 * @return {Integer}
	 */
	this.getStatus = function() { return this.status; }
	/**
	 * Set the the response HTTP status code
	 * @param {Integer} value New value to set.
	 * @alias Titanium_Network_HTTPClient.setStatus
	 */
	this.setStatus = function(value) { this.status = value; }
	/**
	 * timeout is milliseconds when the connection should be aborted
	 * @alias Titanium_Network_HTTPClient.timeout
	 * @property {Integer}
	 */
	this.timeout = 0
	/**
	 * Get the timeout is milliseconds when the connection should be aborted
	 * @alias Titanium_Network_HTTPClient.getTimeout
	 * @return {Integer}
	 */
	this.getTimeout = function() { return this.timeout; }
	/**
	 * Set the timeout is milliseconds when the connection should be aborted
	 * @param {Integer} value New value to set.
	 * @alias Titanium_Network_HTTPClient.setTimeout
	 */
	this.setTimeout = function(value) { this.timeout = value; }
	/**
	 * set this to control how SSL certification validation is performed on connection.  defaults to false if in simulator or device testing and true if release for distribution mode.
	 * @alias Titanium_Network_HTTPClient.validatesSecureCertificate
	 * @property {Boolean}
	 */
	this.validatesSecureCertificate = false
	/**
	 * Get the set this to control how SSL certification validation is performed on connection.  defaults to false if in simulator or device testing and true if release for distribution mode.
	 * @alias Titanium_Network_HTTPClient.getValidatesSecureCertificate
	 * @return {Boolean}
	 */
	this.getValidatesSecureCertificate = function() { return this.validatesSecureCertificate; }
	/**
	 * Set the set this to control how SSL certification validation is performed on connection.  defaults to false if in simulator or device testing and true if release for distribution mode.
	 * @param {Boolean} value New value to set.
	 * @alias Titanium_Network_HTTPClient.setValidatesSecureCertificate
	 */
	this.setValidatesSecureCertificate = function(value) { this.validatesSecureCertificate = value; }
	/**
	 * abort a pending request
	 * @alias Titanium_Network_HTTPClient.abort
	 */
	this.abort = function abort() { }
	/**
	 * return the response header.
	 * @param {String} name the header name
	 * @alias Titanium_Network_HTTPClient.getResponseHeader
	 * @return {String}
	 */
	this.getResponseHeader = function getResponseHeader(name) { return ''; }
	/**
	 * open the request and ready the connection
	 * @param {String} method the HTTP method
	 * @param {String} url the URL for the request
	 * @param {Boolean} [async] optional property to indicate if asynchronous (default) or not
	 * @alias Titanium_Network_HTTPClient.open
	 */
	this.open = function open(method,url,async) { }
	/**
	 * send the request
	 * @param {Object} data the data to send in the request. can either be null, dictionary, string, File object or Blob.
	 * @alias Titanium_Network_HTTPClient.send
	 */
	this.send = function send(data) { }
	/**
	 * set the request header. Must be called after open but before send.
	 * @param {String} name name of the header
	 * @param {String} value value of the header. May be null to clearing out a property, such as X-Requested-With
	 * @alias Titanium_Network_HTTPClient.setRequestHeader
	 */
	this.setRequestHeader = function setRequestHeader(name,value) { }
	/**
	 * set the request timeout
	 * @param {Double} timeout the timeout in milliseconds
	 * @alias Titanium_Network_HTTPClient.setTimeout
	 */
	this.setTimeout = function setTimeout(timeout) { }
};

/**
 * The TCPSocket instance returned from Titanium.Network.createTCPSocket.  This object represents a socket which either listens locally on the device for connections, or connects to a remote machine.
 * @since 1.2.0
 */
function Titanium_Network_TCPSocket() {
	/**
	 * the host name to connect to.  Must be Titanium.Network.INADDR_ANY or an identifier for the local device in order to listen
	 * @alias Titanium_Network_TCPSocket.hostName
	 * @property {String}
	 */
	this.hostName = ''
	/**
	 * Get the the host name to connect to.  Must be Titanium.Network.INADDR_ANY or an identifier for the local device in order to listen
	 * @alias Titanium_Network_TCPSocket.getHostName
	 * @return {String}
	 */
	this.getHostName = function() { return this.hostName; }
	/**
	 * Set the the host name to connect to.  Must be Titanium.Network.INADDR_ANY or an identifier for the local device in order to listen
	 * @param {String} value New value to set.
	 * @alias Titanium_Network_TCPSocket.setHostName
	 */
	this.setHostName = function(value) { this.hostName = value; }
	/**
	 * whether or not the socket is valid
	 * @alias Titanium_Network_TCPSocket.isValid
	 * @property {Boolean}
	 */
	this.isValid = false
	/**
	 * Get the whether or not the socket is valid
	 * @alias Titanium_Network_TCPSocket.getIsValid
	 * @return {Boolean}
	 */
	this.getIsValid = function() { return this.isValid; }
	/**
	 * Set the whether or not the socket is valid
	 * @param {Boolean} value New value to set.
	 * @alias Titanium_Network_TCPSocket.setIsValid
	 */
	this.setIsValid = function(value) { this.isValid = value; }
	/**
	 * the socket's mode
	 * @alias Titanium_Network_TCPSocket.mode
	 * @property {Integer}
	 */
	this.mode = 0
	/**
	 * Get the the socket's mode
	 * @alias Titanium_Network_TCPSocket.getMode
	 * @return {Integer}
	 */
	this.getMode = function() { return this.mode; }
	/**
	 * Set the the socket's mode
	 * @param {Integer} value New value to set.
	 * @alias Titanium_Network_TCPSocket.setMode
	 */
	this.setMode = function(value) { this.mode = value; }
	/**
	 * the port to connect/listen on
	 * @alias Titanium_Network_TCPSocket.port
	 * @property {Integer}
	 */
	this.port = 0
	/**
	 * Get the the port to connect/listen on
	 * @alias Titanium_Network_TCPSocket.getPort
	 * @return {Integer}
	 */
	this.getPort = function() { return this.port; }
	/**
	 * Set the the port to connect/listen on
	 * @param {Integer} value New value to set.
	 * @alias Titanium_Network_TCPSocket.setPort
	 */
	this.setPort = function(value) { this.port = value; }
	/**
	 * strip terminating null character when sending string data; default is false
	 * @alias Titanium_Network_TCPSocket.stripTerminator
	 * @property {Boolean}
	 */
	this.stripTerminator = false
	/**
	 * Get the strip terminating null character when sending string data; default is false
	 * @alias Titanium_Network_TCPSocket.getStripTerminator
	 * @return {Boolean}
	 */
	this.getStripTerminator = function() { return this.stripTerminator; }
	/**
	 * Set the strip terminating null character when sending string data; default is false
	 * @param {Boolean} value New value to set.
	 * @alias Titanium_Network_TCPSocket.setStripTerminator
	 */
	this.setStripTerminator = function(value) { this.stripTerminator = value; }
	/**
	 * close the socket
	 * @alias Titanium_Network_TCPSocket.close
	 */
	this.close = function close() { }
	/**
	 * connect the scocket to a TCP server
	 * @alias Titanium_Network_TCPSocket.connect
	 */
	this.connect = function connect() { }
	/**
	 * set up the socket to receive connections
	 * @alias Titanium_Network_TCPSocket.listen
	 */
	this.listen = function listen() { }
	/**
	 * write data to the socket, if the mode is WRITE_MODE or READ_WRITE_MODE
	 * @param {Object,String} data either a string or blob object representing the data to be transferred
	 * @param {Integer} sendTo the socket reference to send the data to.  Default is to send to all connected sockets
	 * @alias Titanium_Network_TCPSocket.write
	 */
	this.write = function write(data,sendTo) { }
};

/**
 * The 2DMatrix is created by Titanium.UI.create2DMatrix.  The 2D Matrix is an object for holding values for an affine transformation matrix. A 2D matrix is used to rotate, scale, translate, or skew the objects in a two-dimensional space. A 2D matrix is represented by a 3 by 3 matrix. Because the third column is always (0,0,1), the data structure contains values for only the first two columns.
 * @since 0.9
 */
function Titanium_UI_2DMatrix() {
	/**
	 * add an event listener for the instance to receive view triggered events
	 * @param {String} name name of the event
	 * @param {Function} callback callback function to invoke when the event is fired
	 * @alias Titanium_UI_2DMatrix.addEventListener
	 */
	this.addEventListener = function addEventListener(name,callback) { }
	/**
	 * fire a synthesized event to the views listener
	 * @param {String} name name of the event
	 * @param {Object} event event object
	 * @alias Titanium_UI_2DMatrix.fireEvent
	 */
	this.fireEvent = function fireEvent(name,event) { }
	/**
	 * Returns a matrix constructed by inverting an existing matrix
	 * @alias Titanium_UI_2DMatrix.invert
	 */
	this.invert = function invert() { }
	/**
	 * Returns a matrix constructed by combining two existing matrix.
	 * @param {Object} t2 The second matrix. This matrix is concatenated to the matrix instance against which the function is invoked.  The result of this function is the first matrix multiplied by the second matrix. You might perform several multiplications in order to create a single matrix that contains the cumulative effects of several transformations. Note that matrix operations are not commutative - the order in which you concatenate matrices is important. That is, the result of multiplying matrix t1 by matrix t2 does not necessarily equal the result of multiplying matrix t2 by matrix t1.
	 * @alias Titanium_UI_2DMatrix.multiply
	 * @return {Object}
	 */
	this.multiply = function multiply(t2) { return {}; }
	/**
	 * remove a previously added event listener
	 * @param {String} name name of the event
	 * @param {Function} callback callback function passed in addEventListener
	 * @alias Titanium_UI_2DMatrix.removeEventListener
	 */
	this.removeEventListener = function removeEventListener(name,callback) { }
	/**
	 * Returns a matrix constructed by rotating an existing matrix
	 * @param {Float} angle The angle, in degrees, by which to rotate the matrix. A positive value specifies counterclockwise rotation and a negative value specifies clockwise rotation.
	 * @alias Titanium_UI_2DMatrix.rotate
	 * @return {Object}
	 */
	this.rotate = function rotate(angle) { return {}; }
	/**
	 * Returns a matrix constructed by scaling an existing matrix
	 * @param {Float} sx The value by which to scale x values of the matrix
	 * @param {Float} sy The value by which to scale y values of the matrix
	 * @alias Titanium_UI_2DMatrix.scale
	 * @return {Object}
	 */
	this.scale = function scale(sx,sy) { return {}; }
	/**
	 * Returns a matrix constructed by translating an existing matrix
	 * @param {Float} tx The value by which to move x values with the matrix
	 * @param {Float} ty The value by which to move y values with the matrix
	 * @alias Titanium_UI_2DMatrix.translate
	 * @return {Object}
	 */
	this.translate = function translate(tx,ty) { return {}; }
};

/**
 * The 3DMatrix is created by Titanium.UI.create3DMatrix.  The 3D Matrix is an object for holding values for an affine transformation matrix. A 3D matrix is used to rotate, scale, translate, or skew the objects in a three-dimensional space. A 3D matrix is represented by a 4 by 4 matrix. Because the forth column is always (0,0,1), the data structure contains values for only the first three columns.
 * @since 0.9
 */
function Titanium_UI_3DMatrix() {
	/**
	 * add an event listener for the instance to receive view triggered events
	 * @param {String} name name of the event
	 * @param {Function} callback callback function to invoke when the event is fired
	 * @alias Titanium_UI_3DMatrix.addEventListener
	 */
	this.addEventListener = function addEventListener(name,callback) { }
	/**
	 * fire a synthesized event to the views listener
	 * @param {String} name name of the event
	 * @param {Object} event event object
	 * @alias Titanium_UI_3DMatrix.fireEvent
	 */
	this.fireEvent = function fireEvent(name,event) { }
	/**
	 * Returns a matrix constructed by inverting an existing matrix
	 * @alias Titanium_UI_3DMatrix.invert
	 */
	this.invert = function invert() { }
	/**
	 * Returns a matrix constructed by combining two existing matrix.
	 * @param {Object} t2 The second matrix. This matrix is concatenated to the matrix instance against which the function is invoked.  The result of this function is the first matrix multiplied by the second matrix. You might perform several multiplications in order to create a single matrix that contains the cumulative effects of several transformations. Note that matrix operations are not commutative - the order in which you concatenate matrices is important. That is, the result of multiplying matrix t1 by matrix t2 does not necessarily equal the result of multiplying matrix t2 by matrix t1.
	 * @alias Titanium_UI_3DMatrix.multiply
	 * @return {Object}
	 */
	this.multiply = function multiply(t2) { return {}; }
	/**
	 * remove a previously added event listener
	 * @param {String} name name of the event
	 * @param {Function} callback callback function passed in addEventListener
	 * @alias Titanium_UI_3DMatrix.removeEventListener
	 */
	this.removeEventListener = function removeEventListener(name,callback) { }
	/**
	 * Returns a matrix constructed by rotating an existing matrix
	 * @param {Float} angle The angle, in degrees, by which to rotate the matrix. A positive value specifies counterclockwise rotation and a negative value specifies clockwise rotation.
	 * @param {Float} x The x part of the vector about which to rotate
	 * @param {Float} y The y part of the vector about which to rotate
	 * @param {Float} z The z part of the vector about which to rotate
	 * @alias Titanium_UI_3DMatrix.rotate
	 * @return {Object}
	 */
	this.rotate = function rotate(angle,x,y,z) { return {}; }
	/**
	 * Returns a matrix constructed by scaling an existing matrix
	 * @param {Float} sx The value by which to scale x values of the matrix
	 * @param {Float} sy The value by which to scale y values of the matrix
	 * @param {Float} sz The value by which to scale z values of the matrix
	 * @alias Titanium_UI_3DMatrix.scale
	 * @return {Object}
	 */
	this.scale = function scale(sx,sy,sz) { return {}; }
	/**
	 * Returns a matrix constructed by translating an existing matrix
	 * @param {Float} tx The value by which to move x values with the matrix
	 * @param {Float} ty The value by which to move y values with the matrix
	 * @param {Float} tz The value by which to move z values with the matrix
	 * @alias Titanium_UI_3DMatrix.translate
	 * @return {Object}
	 */
	this.translate = function translate(tx,ty,tz) { return {}; }
};

/**
 * An Activity Indicator is created by the method Titanium.UI.createActivityIndicator.  An activity indicator can be used to show the progress of an operation in the UI to let the user know some action is taking place.
 * @since 0.8
 */
function Titanium_UI_ActivityIndicator() {
	/**
	 * the color of the message label
	 * @alias Titanium_UI_ActivityIndicator.color
	 * @property {String}
	 */
	this.color = ''
	/**
	 * Get the the color of the message label
	 * @alias Titanium_UI_ActivityIndicator.getColor
	 * @return {String}
	 */
	this.getColor = function() { return this.color; }
	/**
	 * Set the the color of the message label
	 * @param {String} value New value to set.
	 * @alias Titanium_UI_ActivityIndicator.setColor
	 */
	this.setColor = function(value) { this.color = value; }
	/**
	 * the font object for the activity message label
	 * @alias Titanium_UI_ActivityIndicator.font
	 * @property {Object}
	 */
	this.font = {}
	/**
	 * Get the the font object for the activity message label
	 * @alias Titanium_UI_ActivityIndicator.getFont
	 * @return {Object}
	 */
	this.getFont = function() { return this.font; }
	/**
	 * Set the the font object for the activity message label
	 * @param {Object} value New value to set.
	 * @alias Titanium_UI_ActivityIndicator.setFont
	 */
	this.setFont = function(value) { this.font = value; }
	/**
	 * the activity message label text
	 * @alias Titanium_UI_ActivityIndicator.message
	 * @property {String}
	 */
	this.message = ''
	/**
	 * Get the the activity message label text
	 * @alias Titanium_UI_ActivityIndicator.getMessage
	 * @return {String}
	 */
	this.getMessage = function() { return this.message; }
	/**
	 * Set the the activity message label text
	 * @param {String} value New value to set.
	 * @alias Titanium_UI_ActivityIndicator.setMessage
	 */
	this.setMessage = function(value) { this.message = value; }
	/**
	 * the key in the locale file to use for the message property
	 * @alias Titanium_UI_ActivityIndicator.messageid
	 * @property {String}
	 */
	this.messageid = ''
	/**
	 * Get the the key in the locale file to use for the message property
	 * @alias Titanium_UI_ActivityIndicator.getMessageid
	 * @return {String}
	 */
	this.getMessageid = function() { return this.messageid; }
	/**
	 * Set the the key in the locale file to use for the message property
	 * @param {String} value New value to set.
	 * @alias Titanium_UI_ActivityIndicator.setMessageid
	 */
	this.setMessageid = function(value) { this.messageid = value; }
	/**
	 * the style constant of the activity indicator
	 * @alias Titanium_UI_ActivityIndicator.style
	 * @property {Integer}
	 */
	this.style = 0
	/**
	 * Get the the style constant of the activity indicator
	 * @alias Titanium_UI_ActivityIndicator.getStyle
	 * @return {Integer}
	 */
	this.getStyle = function() { return this.style; }
	/**
	 * Set the the style constant of the activity indicator
	 * @param {Integer} value New value to set.
	 * @alias Titanium_UI_ActivityIndicator.setStyle
	 */
	this.setStyle = function(value) { this.style = value; }
	/**
	 * call hide to make the activity indicator hidden and stop spinning
	 * @alias Titanium_UI_ActivityIndicator.hide
	 */
	this.hide = function hide() { }
	/**
	 * call show to make the activity indicator visible and start spinning
	 * @alias Titanium_UI_ActivityIndicator.show
	 */
	this.show = function show() { }
};

/**
 * The Alert Dialog is created by Titanium.UI.createAlertDialog and allows you to show a modal application dialog.
 * @since 0.8
 */
function Titanium_UI_AlertDialog() {
	/**
	 * array of button names as strings
	 * @alias Titanium_UI_AlertDialog.buttonNames
	 * @property {Array}
	 */
	this.buttonNames = []
	/**
	 * Get the array of button names as strings
	 * @alias Titanium_UI_AlertDialog.getButtonNames
	 * @return {Array}
	 */
	this.getButtonNames = function() { return this.buttonNames; }
	/**
	 * Set the array of button names as strings
	 * @param {Array} value New value to set.
	 * @alias Titanium_UI_AlertDialog.setButtonNames
	 */
	this.setButtonNames = function(value) { this.buttonNames = value; }
	/**
	 * an index to indicate which button should be the cancel button
	 * @alias Titanium_UI_AlertDialog.cancel
	 * @property {Integer}
	 */
	this.cancel = 0
	/**
	 * Get the an index to indicate which button should be the cancel button
	 * @alias Titanium_UI_AlertDialog.getCancel
	 * @return {Integer}
	 */
	this.getCancel = function() { return this.cancel; }
	/**
	 * Set the an index to indicate which button should be the cancel button
	 * @param {Integer} value New value to set.
	 * @alias Titanium_UI_AlertDialog.setCancel
	 */
	this.setCancel = function(value) { this.cancel = value; }
	/**
	 * the message of the dialog
	 * @alias Titanium_UI_AlertDialog.message
	 * @property {String}
	 */
	this.message = ''
	/**
	 * Get the the message of the dialog
	 * @alias Titanium_UI_AlertDialog.getMessage
	 * @return {String}
	 */
	this.getMessage = function() { return this.message; }
	/**
	 * Set the the message of the dialog
	 * @param {String} value New value to set.
	 * @alias Titanium_UI_AlertDialog.setMessage
	 */
	this.setMessage = function(value) { this.message = value; }
	/**
	 * the key in the locale file to use for the message property
	 * @alias Titanium_UI_AlertDialog.messageid
	 * @property {String}
	 */
	this.messageid = ''
	/**
	 * Get the the key in the locale file to use for the message property
	 * @alias Titanium_UI_AlertDialog.getMessageid
	 * @return {String}
	 */
	this.getMessageid = function() { return this.messageid; }
	/**
	 * Set the the key in the locale file to use for the message property
	 * @param {String} value New value to set.
	 * @alias Titanium_UI_AlertDialog.setMessageid
	 */
	this.setMessageid = function(value) { this.messageid = value; }
	/**
	 * the title of the dialog
	 * @alias Titanium_UI_AlertDialog.title
	 * @property {String}
	 */
	this.title = ''
	/**
	 * Get the the title of the dialog
	 * @alias Titanium_UI_AlertDialog.getTitle
	 * @return {String}
	 */
	this.getTitle = function() { return this.title; }
	/**
	 * Set the the title of the dialog
	 * @param {String} value New value to set.
	 * @alias Titanium_UI_AlertDialog.setTitle
	 */
	this.setTitle = function(value) { this.title = value; }
	/**
	 * add an event listener for the instance to receive view triggered events
	 * @param {String} name name of the event
	 * @param {Function} callback callback function to invoke when the event is fired
	 * @alias Titanium_UI_AlertDialog.addEventListener
	 */
	this.addEventListener = function addEventListener(name,callback) { }
	/**
	 * fire a synthesized event to the views listener
	 * @param {String} name name of the event
	 * @param {Object} event event object
	 * @alias Titanium_UI_AlertDialog.fireEvent
	 */
	this.fireEvent = function fireEvent(name,event) { }
	/**
	 * cause the dialog to become hidden
	 * @alias Titanium_UI_AlertDialog.hide
	 */
	this.hide = function hide() { }
	/**
	 * remove a previously added event listener
	 * @param {String} name name of the event
	 * @param {Function} callback callback function passed in addEventListener
	 * @alias Titanium_UI_AlertDialog.removeEventListener
	 */
	this.removeEventListener = function removeEventListener(name,callback) { }
	/**
	 * cause the dialog to become visible
	 * @alias Titanium_UI_AlertDialog.show
	 */
	this.show = function show() { }
};

/**
 * The Animation object is used for specifying lower-level animation properties and more low-level control of events during an animation. The Animation is created by the method Titanium.UI.createAnimation.
 * @since 0.9
 */
function Titanium_UI_Animation() {
	/**
	 * the property specifies if the animation should be replayed in reverse upon completion
	 * @alias Titanium_UI_Animation.autoreverse
	 * @property {Boolean}
	 */
	this.autoreverse = false
	/**
	 * Get the the property specifies if the animation should be replayed in reverse upon completion
	 * @alias Titanium_UI_Animation.getAutoreverse
	 * @return {Boolean}
	 */
	this.getAutoreverse = function() { return this.autoreverse; }
	/**
	 * Set the the property specifies if the animation should be replayed in reverse upon completion
	 * @param {Boolean} value New value to set.
	 * @alias Titanium_UI_Animation.setAutoreverse
	 */
	this.setAutoreverse = function(value) { this.autoreverse = value; }
	/**
	 * value of the backgroundColor property to change during animation
	 * @alias Titanium_UI_Animation.backgroundColor
	 * @property {String}
	 */
	this.backgroundColor = ''
	/**
	 * Get the value of the backgroundColor property to change during animation
	 * @alias Titanium_UI_Animation.getBackgroundColor
	 * @return {String}
	 */
	this.getBackgroundColor = function() { return this.backgroundColor; }
	/**
	 * Set the value of the backgroundColor property to change during animation
	 * @param {String} value New value to set.
	 * @alias Titanium_UI_Animation.setBackgroundColor
	 */
	this.setBackgroundColor = function(value) { this.backgroundColor = value; }
	/**
	 * value of the bottom property to change during animation
	 * @alias Titanium_UI_Animation.bottom
	 * @property {Float}
	 */
	this.bottom = 0.0
	/**
	 * Get the value of the bottom property to change during animation
	 * @alias Titanium_UI_Animation.getBottom
	 * @return {Float}
	 */
	this.getBottom = function() { return this.bottom; }
	/**
	 * Set the value of the bottom property to change during animation
	 * @param {Float} value New value to set.
	 * @alias Titanium_UI_Animation.setBottom
	 */
	this.setBottom = function(value) { this.bottom = value; }
	/**
	 * value of the center property to change during animation
	 * @alias Titanium_UI_Animation.center
	 * @property {Object}
	 */
	this.center = {}
	/**
	 * Get the value of the center property to change during animation
	 * @alias Titanium_UI_Animation.getCenter
	 * @return {Object}
	 */
	this.getCenter = function() { return this.center; }
	/**
	 * Set the value of the center property to change during animation
	 * @param {Object} value New value to set.
	 * @alias Titanium_UI_Animation.setCenter
	 */
	this.setCenter = function(value) { this.center = value; }
	/**
	 * value of the color property to change during animation
	 * @alias Titanium_UI_Animation.color
	 * @property {String}
	 */
	this.color = ''
	/**
	 * Get the value of the color property to change during animation
	 * @alias Titanium_UI_Animation.getColor
	 * @return {String}
	 */
	this.getColor = function() { return this.color; }
	/**
	 * Set the value of the color property to change during animation
	 * @param {String} value New value to set.
	 * @alias Titanium_UI_Animation.setColor
	 */
	this.setColor = function(value) { this.color = value; }
	/**
	 * the curve of the animation
	 * @alias Titanium_UI_Animation.curve
	 * @property {Integer}
	 */
	this.curve = 0
	/**
	 * Get the the curve of the animation
	 * @alias Titanium_UI_Animation.getCurve
	 * @return {Integer}
	 */
	this.getCurve = function() { return this.curve; }
	/**
	 * Set the the curve of the animation
	 * @param {Integer} value New value to set.
	 * @alias Titanium_UI_Animation.setCurve
	 */
	this.setCurve = function(value) { this.curve = value; }
	/**
	 * the duration of time in milliseconds before starting the animation
	 * @alias Titanium_UI_Animation.delay
	 * @property {Float}
	 */
	this.delay = 0.0
	/**
	 * Get the the duration of time in milliseconds before starting the animation
	 * @alias Titanium_UI_Animation.getDelay
	 * @return {Float}
	 */
	this.getDelay = function() { return this.delay; }
	/**
	 * Set the the duration of time in milliseconds before starting the animation
	 * @param {Float} value New value to set.
	 * @alias Titanium_UI_Animation.setDelay
	 */
	this.setDelay = function(value) { this.delay = value; }
	/**
	 * the duration of time in milliseconds to perform the animation
	 * @alias Titanium_UI_Animation.duration
	 * @property {Float}
	 */
	this.duration = 0.0
	/**
	 * Get the the duration of time in milliseconds to perform the animation
	 * @alias Titanium_UI_Animation.getDuration
	 * @return {Float}
	 */
	this.getDuration = function() { return this.duration; }
	/**
	 * Set the the duration of time in milliseconds to perform the animation
	 * @param {Float} value New value to set.
	 * @alias Titanium_UI_Animation.setDuration
	 */
	this.setDuration = function(value) { this.duration = value; }
	/**
	 * value of the height property to change during animation
	 * @alias Titanium_UI_Animation.height
	 * @property {Float}
	 */
	this.height = 0.0
	/**
	 * Get the value of the height property to change during animation
	 * @alias Titanium_UI_Animation.getHeight
	 * @return {Float}
	 */
	this.getHeight = function() { return this.height; }
	/**
	 * Set the value of the height property to change during animation
	 * @param {Float} value New value to set.
	 * @alias Titanium_UI_Animation.setHeight
	 */
	this.setHeight = function(value) { this.height = value; }
	/**
	 * value of the left property to change during animation
	 * @alias Titanium_UI_Animation.left
	 * @property {Float}
	 */
	this.left = 0.0
	/**
	 * Get the value of the left property to change during animation
	 * @alias Titanium_UI_Animation.getLeft
	 * @return {Float}
	 */
	this.getLeft = function() { return this.left; }
	/**
	 * Set the value of the left property to change during animation
	 * @param {Float} value New value to set.
	 * @alias Titanium_UI_Animation.setLeft
	 */
	this.setLeft = function(value) { this.left = value; }
	/**
	 * value of the opacity property to change during animation
	 * @alias Titanium_UI_Animation.opacity
	 * @property {Float}
	 */
	this.opacity = 0.0
	/**
	 * Get the value of the opacity property to change during animation
	 * @alias Titanium_UI_Animation.getOpacity
	 * @return {Float}
	 */
	this.getOpacity = function() { return this.opacity; }
	/**
	 * Set the value of the opacity property to change during animation
	 * @param {Float} value New value to set.
	 * @alias Titanium_UI_Animation.setOpacity
	 */
	this.setOpacity = function(value) { this.opacity = value; }
	/**
	 * value of the opaque property to change during animation
	 * @alias Titanium_UI_Animation.opaque
	 * @property {Boolean}
	 */
	this.opaque = false
	/**
	 * Get the value of the opaque property to change during animation
	 * @alias Titanium_UI_Animation.getOpaque
	 * @return {Boolean}
	 */
	this.getOpaque = function() { return this.opaque; }
	/**
	 * Set the value of the opaque property to change during animation
	 * @param {Boolean} value New value to set.
	 * @alias Titanium_UI_Animation.setOpaque
	 */
	this.setOpaque = function(value) { this.opaque = value; }
	/**
	 * the number of times the animation should be performed
	 * @alias Titanium_UI_Animation.repeat
	 * @property {Integer}
	 */
	this.repeat = 0
	/**
	 * Get the the number of times the animation should be performed
	 * @alias Titanium_UI_Animation.getRepeat
	 * @return {Integer}
	 */
	this.getRepeat = function() { return this.repeat; }
	/**
	 * Set the the number of times the animation should be performed
	 * @param {Integer} value New value to set.
	 * @alias Titanium_UI_Animation.setRepeat
	 */
	this.setRepeat = function(value) { this.repeat = value; }
	/**
	 * value of the right property to change during animation
	 * @alias Titanium_UI_Animation.right
	 * @property {Float}
	 */
	this.right = 0.0
	/**
	 * Get the value of the right property to change during animation
	 * @alias Titanium_UI_Animation.getRight
	 * @return {Float}
	 */
	this.getRight = function() { return this.right; }
	/**
	 * Set the value of the right property to change during animation
	 * @param {Float} value New value to set.
	 * @alias Titanium_UI_Animation.setRight
	 */
	this.setRight = function(value) { this.right = value; }
	/**
	 * value of the top property to change during animation
	 * @alias Titanium_UI_Animation.top
	 * @property {Float}
	 */
	this.top = 0.0
	/**
	 * Get the value of the top property to change during animation
	 * @alias Titanium_UI_Animation.getTop
	 * @return {Float}
	 */
	this.getTop = function() { return this.top; }
	/**
	 * Set the value of the top property to change during animation
	 * @param {Float} value New value to set.
	 * @alias Titanium_UI_Animation.setTop
	 */
	this.setTop = function(value) { this.top = value; }
	/**
	 * value of the transform property to change during animation
	 * @alias Titanium_UI_Animation.transform
	 * @property {Object}
	 */
	this.transform = {}
	/**
	 * Get the value of the transform property to change during animation
	 * @alias Titanium_UI_Animation.getTransform
	 * @return {Object}
	 */
	this.getTransform = function() { return this.transform; }
	/**
	 * Set the value of the transform property to change during animation
	 * @param {Object} value New value to set.
	 * @alias Titanium_UI_Animation.setTransform
	 */
	this.setTransform = function(value) { this.transform = value; }
	/**
	 * during a transition animation, this is the constant to the type of transition to use
	 * @alias Titanium_UI_Animation.transition
	 * @property {Integer}
	 */
	this.transition = 0
	/**
	 * Get the during a transition animation, this is the constant to the type of transition to use
	 * @alias Titanium_UI_Animation.getTransition
	 * @return {Integer}
	 */
	this.getTransition = function() { return this.transition; }
	/**
	 * Set the during a transition animation, this is the constant to the type of transition to use
	 * @param {Integer} value New value to set.
	 * @alias Titanium_UI_Animation.setTransition
	 */
	this.setTransition = function(value) { this.transition = value; }
	/**
	 * value of the visible property to change during animation
	 * @alias Titanium_UI_Animation.visible
	 * @property {Boolean}
	 */
	this.visible = false
	/**
	 * Get the value of the visible property to change during animation
	 * @alias Titanium_UI_Animation.getVisible
	 * @return {Boolean}
	 */
	this.getVisible = function() { return this.visible; }
	/**
	 * Set the value of the visible property to change during animation
	 * @param {Boolean} value New value to set.
	 * @alias Titanium_UI_Animation.setVisible
	 */
	this.setVisible = function(value) { this.visible = value; }
	/**
	 * value of the width property to change during animation
	 * @alias Titanium_UI_Animation.width
	 * @property {Float}
	 */
	this.width = 0.0
	/**
	 * Get the value of the width property to change during animation
	 * @alias Titanium_UI_Animation.getWidth
	 * @return {Float}
	 */
	this.getWidth = function() { return this.width; }
	/**
	 * Set the value of the width property to change during animation
	 * @param {Float} value New value to set.
	 * @alias Titanium_UI_Animation.setWidth
	 */
	this.setWidth = function(value) { this.width = value; }
	/**
	 * value of the zIndex property to change during animation
	 * @alias Titanium_UI_Animation.zIndex
	 * @property {Integer}
	 */
	this.zIndex = 0
	/**
	 * Get the value of the zIndex property to change during animation
	 * @alias Titanium_UI_Animation.getZIndex
	 * @return {Integer}
	 */
	this.getZIndex = function() { return this.zIndex; }
	/**
	 * Set the value of the zIndex property to change during animation
	 * @param {Integer} value New value to set.
	 * @alias Titanium_UI_Animation.setZIndex
	 */
	this.setZIndex = function(value) { this.zIndex = value; }
	/**
	 * add an event listener for the instance to receive view triggered events
	 * @param {String} name name of the event
	 * @param {Function} callback callback function to invoke when the event is fired
	 * @alias Titanium_UI_Animation.addEventListener
	 */
	this.addEventListener = function addEventListener(name,callback) { }
	/**
	 * fire a synthesized event to the views listener
	 * @param {String} name name of the event
	 * @param {Object} event event object
	 * @alias Titanium_UI_Animation.fireEvent
	 */
	this.fireEvent = function fireEvent(name,event) { }
	/**
	 * remove a previously added event listener
	 * @param {String} name name of the event
	 * @param {Function} callback callback function passed in addEventListener
	 * @alias Titanium_UI_Animation.removeEventListener
	 */
	this.removeEventListener = function removeEventListener(name,callback) { }
};

/**
 * A Button is created by the method Titanium.UI.createButton.
 * @since 0.8
 */
function Titanium_UI_Button() {
	/**
	 * a dictionary with properties x and y to indicate the anchor point value. anchor specifies the position by which animation should occur. center is 0.5, 0.5
	 * @alias Titanium_UI_Button.anchorPoint
	 * @property {Object}
	 */
	this.anchorPoint = {}
	/**
	 * Get the a dictionary with properties x and y to indicate the anchor point value. anchor specifies the position by which animation should occur. center is 0.5, 0.5
	 * @alias Titanium_UI_Button.getAnchorPoint
	 * @return {Object}
	 */
	this.getAnchorPoint = function() { return this.anchorPoint; }
	/**
	 * Set the a dictionary with properties x and y to indicate the anchor point value. anchor specifies the position by which animation should occur. center is 0.5, 0.5
	 * @param {Object} value New value to set.
	 * @alias Titanium_UI_Button.setAnchorPoint
	 */
	this.setAnchorPoint = function(value) { this.anchorPoint = value; }
	/**
	 * read-only object with x and y properties of where the view is during animation
	 * @alias Titanium_UI_Button.animatedCenterPoint
	 * @property {Object}
	 */
	this.animatedCenterPoint = {}
	/**
	 * Get the read-only object with x and y properties of where the view is during animation
	 * @alias Titanium_UI_Button.getAnimatedCenterPoint
	 * @return {Object}
	 */
	this.getAnimatedCenterPoint = function() { return this.animatedCenterPoint; }
	/**
	 * Set the read-only object with x and y properties of where the view is during animation
	 * @param {Object} value New value to set.
	 * @alias Titanium_UI_Button.setAnimatedCenterPoint
	 */
	this.setAnimatedCenterPoint = function(value) { this.animatedCenterPoint = value; }
	/**
	 * the buttons background color
	 * @alias Titanium_UI_Button.backgroundColor
	 * @property {String}
	 */
	this.backgroundColor = ''
	/**
	 * Get the the buttons background color
	 * @alias Titanium_UI_Button.getBackgroundColor
	 * @return {String}
	 */
	this.getBackgroundColor = function() { return this.backgroundColor; }
	/**
	 * Set the the buttons background color
	 * @param {String} value New value to set.
	 * @alias Titanium_UI_Button.setBackgroundColor
	 */
	this.setBackgroundColor = function(value) { this.backgroundColor = value; }
	/**
	 * the disabled background color of the view. (Android)
	 * @alias Titanium_UI_Button.backgroundDisabledColor
	 * @property {String}
	 */
	this.backgroundDisabledColor = ''
	/**
	 * Get the the disabled background color of the view. (Android)
	 * @alias Titanium_UI_Button.getBackgroundDisabledColor
	 * @return {String}
	 */
	this.getBackgroundDisabledColor = function() { return this.backgroundDisabledColor; }
	/**
	 * Set the the disabled background color of the view. (Android)
	 * @param {String} value New value to set.
	 * @alias Titanium_UI_Button.setBackgroundDisabledColor
	 */
	this.setBackgroundDisabledColor = function(value) { this.backgroundDisabledColor = value; }
	/**
	 * url to a button image that is drawn as the background of the button when the button is in the disabled state
	 * @alias Titanium_UI_Button.backgroundDisabledImage
	 * @property {String}
	 */
	this.backgroundDisabledImage = ''
	/**
	 * Get the url to a button image that is drawn as the background of the button when the button is in the disabled state
	 * @alias Titanium_UI_Button.getBackgroundDisabledImage
	 * @return {String}
	 */
	this.getBackgroundDisabledImage = function() { return this.backgroundDisabledImage; }
	/**
	 * Set the url to a button image that is drawn as the background of the button when the button is in the disabled state
	 * @param {String} value New value to set.
	 * @alias Titanium_UI_Button.setBackgroundDisabledImage
	 */
	this.setBackgroundDisabledImage = function(value) { this.backgroundDisabledImage = value; }
	/**
	 * the focused background color of the view. focusable must be true for normal views. (Android)
	 * @alias Titanium_UI_Button.backgroundFocusedColor
	 * @property {String}
	 */
	this.backgroundFocusedColor = ''
	/**
	 * Get the the focused background color of the view. focusable must be true for normal views. (Android)
	 * @alias Titanium_UI_Button.getBackgroundFocusedColor
	 * @return {String}
	 */
	this.getBackgroundFocusedColor = function() { return this.backgroundFocusedColor; }
	/**
	 * Set the the focused background color of the view. focusable must be true for normal views. (Android)
	 * @param {String} value New value to set.
	 * @alias Titanium_UI_Button.setBackgroundFocusedColor
	 */
	this.setBackgroundFocusedColor = function(value) { this.backgroundFocusedColor = value; }
	/**
	 * the focused background image url of the view. focusable must be true for normal views. (Android)
	 * @alias Titanium_UI_Button.backgroundFocusedImage
	 * @property {String}
	 */
	this.backgroundFocusedImage = ''
	/**
	 * Get the the focused background image url of the view. focusable must be true for normal views. (Android)
	 * @alias Titanium_UI_Button.getBackgroundFocusedImage
	 * @return {String}
	 */
	this.getBackgroundFocusedImage = function() { return this.backgroundFocusedImage; }
	/**
	 * Set the the focused background image url of the view. focusable must be true for normal views. (Android)
	 * @param {String} value New value to set.
	 * @alias Titanium_UI_Button.setBackgroundFocusedImage
	 */
	this.setBackgroundFocusedImage = function(value) { this.backgroundFocusedImage = value; }
	/**
	 * a background gradient for the view with the properties: type,startPoint,endPoint,startRadius,endRadius,backfillStart,backfillEnd,colors.
	 * @alias Titanium_UI_Button.backgroundGradient
	 * @property {Object}
	 */
	this.backgroundGradient = {}
	/**
	 * Get the a background gradient for the view with the properties: type,startPoint,endPoint,startRadius,endRadius,backfillStart,backfillEnd,colors.
	 * @alias Titanium_UI_Button.getBackgroundGradient
	 * @return {Object}
	 */
	this.getBackgroundGradient = function() { return this.backgroundGradient; }
	/**
	 * Set the a background gradient for the view with the properties: type,startPoint,endPoint,startRadius,endRadius,backfillStart,backfillEnd,colors.
	 * @param {Object} value New value to set.
	 * @alias Titanium_UI_Button.setBackgroundGradient
	 */
	this.setBackgroundGradient = function(value) { this.backgroundGradient = value; }
	/**
	 * url to a button image that is drawn as the background of the button
	 * @alias Titanium_UI_Button.backgroundImage
	 * @property {String}
	 */
	this.backgroundImage = ''
	/**
	 * Get the url to a button image that is drawn as the background of the button
	 * @alias Titanium_UI_Button.getBackgroundImage
	 * @return {String}
	 */
	this.getBackgroundImage = function() { return this.backgroundImage; }
	/**
	 * Set the url to a button image that is drawn as the background of the button
	 * @param {String} value New value to set.
	 * @alias Titanium_UI_Button.setBackgroundImage
	 */
	this.setBackgroundImage = function(value) { this.backgroundImage = value; }
	/**
	 * End caps specify the portion of an image that should not be resized when an image is stretched. This technique is used to implement buttons and other resizable image-based interface elements. When a button with end caps is resized, the resizing occurs only in the middle of the button, in the region between the end caps. The end caps themselves keep their original size and appearance. This property specifies the size of the left end cap. The middle (stretchable) portion is assumed to be 1 pixel wide. The right end cap is therefore computed by adding the size of the left end cap and the middle portion together and then subtracting that value from the width of the image
	 * @alias Titanium_UI_Button.backgroundLeftCap
	 * @property {Float}
	 */
	this.backgroundLeftCap = 0.0
	/**
	 * Get the End caps specify the portion of an image that should not be resized when an image is stretched. This technique is used to implement buttons and other resizable image-based interface elements. When a button with end caps is resized, the resizing occurs only in the middle of the button, in the region between the end caps. The end caps themselves keep their original size and appearance. This property specifies the size of the left end cap. The middle (stretchable) portion is assumed to be 1 pixel wide. The right end cap is therefore computed by adding the size of the left end cap and the middle portion together and then subtracting that value from the width of the image
	 * @alias Titanium_UI_Button.getBackgroundLeftCap
	 * @return {Float}
	 */
	this.getBackgroundLeftCap = function() { return this.backgroundLeftCap; }
	/**
	 * Set the End caps specify the portion of an image that should not be resized when an image is stretched. This technique is used to implement buttons and other resizable image-based interface elements. When a button with end caps is resized, the resizing occurs only in the middle of the button, in the region between the end caps. The end caps themselves keep their original size and appearance. This property specifies the size of the left end cap. The middle (stretchable) portion is assumed to be 1 pixel wide. The right end cap is therefore computed by adding the size of the left end cap and the middle portion together and then subtracting that value from the width of the image
	 * @param {Float} value New value to set.
	 * @alias Titanium_UI_Button.setBackgroundLeftCap
	 */
	this.setBackgroundLeftCap = function(value) { this.backgroundLeftCap = value; }
	/**
	 * the selected background color of the view. focusable must be true for normal views. (Android)
	 * @alias Titanium_UI_Button.backgroundSelectedColor
	 * @property {String}
	 */
	this.backgroundSelectedColor = ''
	/**
	 * Get the the selected background color of the view. focusable must be true for normal views. (Android)
	 * @alias Titanium_UI_Button.getBackgroundSelectedColor
	 * @return {String}
	 */
	this.getBackgroundSelectedColor = function() { return this.backgroundSelectedColor; }
	/**
	 * Set the the selected background color of the view. focusable must be true for normal views. (Android)
	 * @param {String} value New value to set.
	 * @alias Titanium_UI_Button.setBackgroundSelectedColor
	 */
	this.setBackgroundSelectedColor = function(value) { this.backgroundSelectedColor = value; }
	/**
	 * url to a button image that is drawn as the background of the button when the button is in the selected state
	 * @alias Titanium_UI_Button.backgroundSelectedImage
	 * @property {String}
	 */
	this.backgroundSelectedImage = ''
	/**
	 * Get the url to a button image that is drawn as the background of the button when the button is in the selected state
	 * @alias Titanium_UI_Button.getBackgroundSelectedImage
	 * @return {String}
	 */
	this.getBackgroundSelectedImage = function() { return this.backgroundSelectedImage; }
	/**
	 * Set the url to a button image that is drawn as the background of the button when the button is in the selected state
	 * @param {String} value New value to set.
	 * @alias Titanium_UI_Button.setBackgroundSelectedImage
	 */
	this.setBackgroundSelectedImage = function(value) { this.backgroundSelectedImage = value; }
	/**
	 * End caps specify the portion of an image that should not be resized when an image is stretched. This technique is used to implement buttons and other resizable image-based interface elements. When a button with end caps is resized, the resizing occurs only in the middle of the button, in the region between the end caps. The end caps themselves keep their original size and appearance. This property specifies the size of the top end cap. The middle (stretchable) portion is assumed to be 1 pixel wide. The bottom end cap is therefore computed by adding the size of the top end cap and the middle portion together and then subtracting that value from the height of the image
	 * @alias Titanium_UI_Button.backgroundTopCap
	 * @property {Float}
	 */
	this.backgroundTopCap = 0.0
	/**
	 * Get the End caps specify the portion of an image that should not be resized when an image is stretched. This technique is used to implement buttons and other resizable image-based interface elements. When a button with end caps is resized, the resizing occurs only in the middle of the button, in the region between the end caps. The end caps themselves keep their original size and appearance. This property specifies the size of the top end cap. The middle (stretchable) portion is assumed to be 1 pixel wide. The bottom end cap is therefore computed by adding the size of the top end cap and the middle portion together and then subtracting that value from the height of the image
	 * @alias Titanium_UI_Button.getBackgroundTopCap
	 * @return {Float}
	 */
	this.getBackgroundTopCap = function() { return this.backgroundTopCap; }
	/**
	 * Set the End caps specify the portion of an image that should not be resized when an image is stretched. This technique is used to implement buttons and other resizable image-based interface elements. When a button with end caps is resized, the resizing occurs only in the middle of the button, in the region between the end caps. The end caps themselves keep their original size and appearance. This property specifies the size of the top end cap. The middle (stretchable) portion is assumed to be 1 pixel wide. The bottom end cap is therefore computed by adding the size of the top end cap and the middle portion together and then subtracting that value from the height of the image
	 * @param {Float} value New value to set.
	 * @alias Titanium_UI_Button.setBackgroundTopCap
	 */
	this.setBackgroundTopCap = function(value) { this.backgroundTopCap = value; }
	/**
	 * the border color of the view
	 * @alias Titanium_UI_Button.borderColor
	 * @property {String}
	 */
	this.borderColor = ''
	/**
	 * Get the the border color of the view
	 * @alias Titanium_UI_Button.getBorderColor
	 * @return {String}
	 */
	this.getBorderColor = function() { return this.borderColor; }
	/**
	 * Set the the border color of the view
	 * @param {String} value New value to set.
	 * @alias Titanium_UI_Button.setBorderColor
	 */
	this.setBorderColor = function(value) { this.borderColor = value; }
	/**
	 * the border radius of the view
	 * @alias Titanium_UI_Button.borderRadius
	 * @property {Float}
	 */
	this.borderRadius = 0.0
	/**
	 * Get the the border radius of the view
	 * @alias Titanium_UI_Button.getBorderRadius
	 * @return {Float}
	 */
	this.getBorderRadius = function() { return this.borderRadius; }
	/**
	 * Set the the border radius of the view
	 * @param {Float} value New value to set.
	 * @alias Titanium_UI_Button.setBorderRadius
	 */
	this.setBorderRadius = function(value) { this.borderRadius = value; }
	/**
	 * the border width of the view
	 * @alias Titanium_UI_Button.borderWidth
	 * @property {Float}
	 */
	this.borderWidth = 0.0
	/**
	 * Get the the border width of the view
	 * @alias Titanium_UI_Button.getBorderWidth
	 * @return {Float}
	 */
	this.getBorderWidth = function() { return this.borderWidth; }
	/**
	 * Set the the border width of the view
	 * @param {Float} value New value to set.
	 * @alias Titanium_UI_Button.setBorderWidth
	 */
	this.setBorderWidth = function(value) { this.borderWidth = value; }
	/**
	 * property for the view bottom position. This position is relative to the view's parent. Can be either a float value or a dimension string ie 'auto' (default), '50%' (iPhone only).
	 * @alias Titanium_UI_Button.bottom
	 * @property {Float,String}
	 */
	this.bottom = 0.0
	/**
	 * Get the property for the view bottom position. This position is relative to the view's parent. Can be either a float value or a dimension string ie 'auto' (default), '50%' (iPhone only).
	 * @alias Titanium_UI_Button.getBottom
	 * @return {Float,String}
	 */
	this.getBottom = function() { return this.bottom; }
	/**
	 * Set the property for the view bottom position. This position is relative to the view's parent. Can be either a float value or a dimension string ie 'auto' (default), '50%' (iPhone only).
	 * @param {Float,String} value New value to set.
	 * @alias Titanium_UI_Button.setBottom
	 */
	this.setBottom = function(value) { this.bottom = value; }
	/**
	 * a dictionary with properties x and y to indicate the center of the views position relative to the parent view
	 * @alias Titanium_UI_Button.center
	 * @property {Object}
	 */
	this.center = {}
	/**
	 * Get the a dictionary with properties x and y to indicate the center of the views position relative to the parent view
	 * @alias Titanium_UI_Button.getCenter
	 * @return {Object}
	 */
	this.getCenter = function() { return this.center; }
	/**
	 * Set the a dictionary with properties x and y to indicate the center of the views position relative to the parent view
	 * @param {Object} value New value to set.
	 * @alias Titanium_UI_Button.setCenter
	 */
	this.setCenter = function(value) { this.center = value; }
	/**
	 * the foreground color of the button text
	 * @alias Titanium_UI_Button.color
	 * @property {String}
	 */
	this.color = ''
	/**
	 * Get the the foreground color of the button text
	 * @alias Titanium_UI_Button.getColor
	 * @return {String}
	 */
	this.getColor = function() { return this.color; }
	/**
	 * Set the the foreground color of the button text
	 * @param {String} value New value to set.
	 * @alias Titanium_UI_Button.setColor
	 */
	this.setColor = function(value) { this.color = value; }
	/**
	 * boolean that indicates if the button is enabled or not
	 * @alias Titanium_UI_Button.enabled
	 * @property {Boolean}
	 */
	this.enabled = false
	/**
	 * Get the boolean that indicates if the button is enabled or not
	 * @alias Titanium_UI_Button.getEnabled
	 * @return {Boolean}
	 */
	this.getEnabled = function() { return this.enabled; }
	/**
	 * Set the boolean that indicates if the button is enabled or not
	 * @param {Boolean} value New value to set.
	 * @alias Titanium_UI_Button.setEnabled
	 */
	this.setEnabled = function(value) { this.enabled = value; }
	/**
	 * Set true if you want a view to be focusable when navigating with the trackball or D-Pad. Default: false. (Android Only)
	 * @alias Titanium_UI_Button.focusable
	 * @property {Boolean}
	 */
	this.focusable = false
	/**
	 * Get the Set true if you want a view to be focusable when navigating with the trackball or D-Pad. Default: false. (Android Only)
	 * @alias Titanium_UI_Button.getFocusable
	 * @return {Boolean}
	 */
	this.getFocusable = function() { return this.focusable; }
	/**
	 * Set the Set true if you want a view to be focusable when navigating with the trackball or D-Pad. Default: false. (Android Only)
	 * @param {Boolean} value New value to set.
	 * @alias Titanium_UI_Button.setFocusable
	 */
	this.setFocusable = function(value) { this.focusable = value; }
	/**
	 * the font properties of the button
	 * @alias Titanium_UI_Button.font
	 * @property {Object}
	 */
	this.font = {}
	/**
	 * Get the the font properties of the button
	 * @alias Titanium_UI_Button.getFont
	 * @return {Object}
	 */
	this.getFont = function() { return this.font; }
	/**
	 * Set the the font properties of the button
	 * @param {Object} value New value to set.
	 * @alias Titanium_UI_Button.setFont
	 */
	this.setFont = function(value) { this.font = value; }
	/**
	 * the font family
	 * @alias Titanium_UI_Button.font-family
	 * @property {String}
	 */
	this.font-family = ''
	/**
	 * Get the the font family
	 * @alias Titanium_UI_Button.getFont-family
	 * @return {String}
	 */
	this.getFont-family = function() { return this.font-family; }
	/**
	 * Set the the font family
	 * @param {String} value New value to set.
	 * @alias Titanium_UI_Button.setFont-family
	 */
	this.setFont-family = function(value) { this.font-family = value; }
	/**
	 * the font size
	 * @alias Titanium_UI_Button.font-size
	 * @property {String}
	 */
	this.font-size = ''
	/**
	 * Get the the font size
	 * @alias Titanium_UI_Button.getFont-size
	 * @return {String}
	 */
	this.getFont-size = function() { return this.font-size; }
	/**
	 * Set the the font size
	 * @param {String} value New value to set.
	 * @alias Titanium_UI_Button.setFont-size
	 */
	this.setFont-size = function(value) { this.font-size = value; }
	/**
	 * the font style, either normal or italics
	 * @alias Titanium_UI_Button.font-style
	 * @property {String}
	 */
	this.font-style = ''
	/**
	 * Get the the font style, either normal or italics
	 * @alias Titanium_UI_Button.getFont-style
	 * @return {String}
	 */
	this.getFont-style = function() { return this.font-style; }
	/**
	 * Set the the font style, either normal or italics
	 * @param {String} value New value to set.
	 * @alias Titanium_UI_Button.setFont-style
	 */
	this.setFont-style = function(value) { this.font-style = value; }
	/**
	 * the font weight, either normal or bold
	 * @alias Titanium_UI_Button.font-weight
	 * @property {String}
	 */
	this.font-weight = ''
	/**
	 * Get the the font weight, either normal or bold
	 * @alias Titanium_UI_Button.getFont-weight
	 * @return {String}
	 */
	this.getFont-weight = function() { return this.font-weight; }
	/**
	 * Set the the font weight, either normal or bold
	 * @param {String} value New value to set.
	 * @alias Titanium_UI_Button.setFont-weight
	 */
	this.setFont-weight = function(value) { this.font-weight = value; }
	/**
	 * property for the view height. Can be either a float value or a dimension string ie 'auto' (default), '50%' (iPhone only).
	 * @alias Titanium_UI_Button.height
	 * @property {Float,String}
	 */
	this.height = 0.0
	/**
	 * Get the property for the view height. Can be either a float value or a dimension string ie 'auto' (default), '50%' (iPhone only).
	 * @alias Titanium_UI_Button.getHeight
	 * @return {Float,String}
	 */
	this.getHeight = function() { return this.height; }
	/**
	 * Set the property for the view height. Can be either a float value or a dimension string ie 'auto' (default), '50%' (iPhone only).
	 * @param {Float,String} value New value to set.
	 * @alias Titanium_UI_Button.setHeight
	 */
	this.setHeight = function(value) { this.height = value; }
	/**
	 * the image to display on the button to the left of the title
	 * @alias Titanium_UI_Button.image
	 * @property {String}
	 */
	this.image = ''
	/**
	 * Get the the image to display on the button to the left of the title
	 * @alias Titanium_UI_Button.getImage
	 * @return {String}
	 */
	this.getImage = function() { return this.image; }
	/**
	 * Set the the image to display on the button to the left of the title
	 * @param {String} value New value to set.
	 * @alias Titanium_UI_Button.setImage
	 */
	this.setImage = function(value) { this.image = value; }
	/**
	 * property for the view left position. This position is relative to the view's parent. Can be either a float value or a dimension string ie 'auto' (default), '50%' (iPhone only).
	 * @alias Titanium_UI_Button.left
	 * @property {Float,String}
	 */
	this.left = 0.0
	/**
	 * Get the property for the view left position. This position is relative to the view's parent. Can be either a float value or a dimension string ie 'auto' (default), '50%' (iPhone only).
	 * @alias Titanium_UI_Button.getLeft
	 * @return {Float,String}
	 */
	this.getLeft = function() { return this.left; }
	/**
	 * Set the property for the view left position. This position is relative to the view's parent. Can be either a float value or a dimension string ie 'auto' (default), '50%' (iPhone only).
	 * @param {Float,String} value New value to set.
	 * @alias Titanium_UI_Button.setLeft
	 */
	this.setLeft = function(value) { this.left = value; }
	/**
	 * the opacity from 0.0-1.0
	 * @alias Titanium_UI_Button.opacity
	 * @property {Float}
	 */
	this.opacity = 0.0
	/**
	 * Get the the opacity from 0.0-1.0
	 * @alias Titanium_UI_Button.getOpacity
	 * @return {Float}
	 */
	this.getOpacity = function() { return this.opacity; }
	/**
	 * Set the the opacity from 0.0-1.0
	 * @param {Float} value New value to set.
	 * @alias Titanium_UI_Button.setOpacity
	 */
	this.setOpacity = function(value) { this.opacity = value; }
	/**
	 * property for the view right position. This position is relative to the view's parent. Can be either a float value or a dimension string ie 'auto' (default), '50%' (iPhone only).
	 * @alias Titanium_UI_Button.right
	 * @property {Float,String}
	 */
	this.right = 0.0
	/**
	 * Get the property for the view right position. This position is relative to the view's parent. Can be either a float value or a dimension string ie 'auto' (default), '50%' (iPhone only).
	 * @alias Titanium_UI_Button.getRight
	 * @return {Float,String}
	 */
	this.getRight = function() { return this.right; }
	/**
	 * Set the property for the view right position. This position is relative to the view's parent. Can be either a float value or a dimension string ie 'auto' (default), '50%' (iPhone only).
	 * @param {Float,String} value New value to set.
	 * @alias Titanium_UI_Button.setRight
	 */
	this.setRight = function(value) { this.right = value; }
	/**
	 * the selected color of the button text when the button is in the selected state
	 * @alias Titanium_UI_Button.selectedColor
	 * @property {String}
	 */
	this.selectedColor = ''
	/**
	 * Get the the selected color of the button text when the button is in the selected state
	 * @alias Titanium_UI_Button.getSelectedColor
	 * @return {String}
	 */
	this.getSelectedColor = function() { return this.selectedColor; }
	/**
	 * Set the the selected color of the button text when the button is in the selected state
	 * @param {String} value New value to set.
	 * @alias Titanium_UI_Button.setSelectedColor
	 */
	this.setSelectedColor = function(value) { this.selectedColor = value; }
	/**
	 * the size of the view as a dictionary of width and height properties
	 * @alias Titanium_UI_Button.size
	 * @property {Object}
	 */
	this.size = {}
	/**
	 * Get the the size of the view as a dictionary of width and height properties
	 * @alias Titanium_UI_Button.getSize
	 * @return {Object}
	 */
	this.getSize = function() { return this.size; }
	/**
	 * Set the the size of the view as a dictionary of width and height properties
	 * @param {Object} value New value to set.
	 * @alias Titanium_UI_Button.setSize
	 */
	this.setSize = function(value) { this.size = value; }
	/**
	 * One of Titanium.UI.Android.SOFT_KEYBOARD_DEFAULT_ON_FOCUS, Titanium.UI.Android.SOFT_KEYBOARD_HIDE_ON_FOCUS, or Titanium.UI.Android.SOFT_KEYBOARD_SHOW_ON_FOCUS. (Android only)
	 * @alias Titanium_UI_Button.softKeyboardOnFocus
	 * @property {Integer}
	 */
	this.softKeyboardOnFocus = 0
	/**
	 * Get the One of Titanium.UI.Android.SOFT_KEYBOARD_DEFAULT_ON_FOCUS, Titanium.UI.Android.SOFT_KEYBOARD_HIDE_ON_FOCUS, or Titanium.UI.Android.SOFT_KEYBOARD_SHOW_ON_FOCUS. (Android only)
	 * @alias Titanium_UI_Button.getSoftKeyboardOnFocus
	 * @return {Integer}
	 */
	this.getSoftKeyboardOnFocus = function() { return this.softKeyboardOnFocus; }
	/**
	 * Set the One of Titanium.UI.Android.SOFT_KEYBOARD_DEFAULT_ON_FOCUS, Titanium.UI.Android.SOFT_KEYBOARD_HIDE_ON_FOCUS, or Titanium.UI.Android.SOFT_KEYBOARD_SHOW_ON_FOCUS. (Android only)
	 * @param {Integer} value New value to set.
	 * @alias Titanium_UI_Button.setSoftKeyboardOnFocus
	 */
	this.setSoftKeyboardOnFocus = function(value) { this.softKeyboardOnFocus = value; }
	/**
	 * style constant for the type of button
	 * @alias Titanium_UI_Button.style
	 * @property {Integer}
	 */
	this.style = 0
	/**
	 * Get the style constant for the type of button
	 * @alias Titanium_UI_Button.getStyle
	 * @return {Integer}
	 */
	this.getStyle = function() { return this.style; }
	/**
	 * Set the style constant for the type of button
	 * @param {Integer} value New value to set.
	 * @alias Titanium_UI_Button.setStyle
	 */
	this.setStyle = function(value) { this.style = value; }
	/**
	 * button title
	 * @alias Titanium_UI_Button.title
	 * @property {String}
	 */
	this.title = ''
	/**
	 * Get the button title
	 * @alias Titanium_UI_Button.getTitle
	 * @return {String}
	 */
	this.getTitle = function() { return this.title; }
	/**
	 * Set the button title
	 * @param {String} value New value to set.
	 * @alias Titanium_UI_Button.setTitle
	 */
	this.setTitle = function(value) { this.title = value; }
	/**
	 * the key in the locale file to use for the title property
	 * @alias Titanium_UI_Button.titleid
	 * @property {String}
	 */
	this.titleid = ''
	/**
	 * Get the the key in the locale file to use for the title property
	 * @alias Titanium_UI_Button.getTitleid
	 * @return {String}
	 */
	this.getTitleid = function() { return this.titleid; }
	/**
	 * Set the the key in the locale file to use for the title property
	 * @param {String} value New value to set.
	 * @alias Titanium_UI_Button.setTitleid
	 */
	this.setTitleid = function(value) { this.titleid = value; }
	/**
	 * property for the view top position. This position is relative to the view's parent. Can be either a float value or a dimension string ie 'auto' (default), '50%' (iPhone only).
	 * @alias Titanium_UI_Button.top
	 * @property {Float,String}
	 */
	this.top = 0.0
	/**
	 * Get the property for the view top position. This position is relative to the view's parent. Can be either a float value or a dimension string ie 'auto' (default), '50%' (iPhone only).
	 * @alias Titanium_UI_Button.getTop
	 * @return {Float,String}
	 */
	this.getTop = function() { return this.top; }
	/**
	 * Set the property for the view top position. This position is relative to the view's parent. Can be either a float value or a dimension string ie 'auto' (default), '50%' (iPhone only).
	 * @param {Float,String} value New value to set.
	 * @alias Titanium_UI_Button.setTop
	 */
	this.setTop = function(value) { this.top = value; }
	/**
	 * a boolean indicating if the view should receive touch events (true, default) or forward them to peers (false)
	 * @alias Titanium_UI_Button.touchEnabled
	 * @property {Boolean}
	 */
	this.touchEnabled = false
	/**
	 * Get the a boolean indicating if the view should receive touch events (true, default) or forward them to peers (false)
	 * @alias Titanium_UI_Button.getTouchEnabled
	 * @return {Boolean}
	 */
	this.getTouchEnabled = function() { return this.touchEnabled; }
	/**
	 * Set the a boolean indicating if the view should receive touch events (true, default) or forward them to peers (false)
	 * @param {Boolean} value New value to set.
	 * @alias Titanium_UI_Button.setTouchEnabled
	 */
	this.setTouchEnabled = function(value) { this.touchEnabled = value; }
	/**
	 * the transformation matrix to apply to the view
	 * @alias Titanium_UI_Button.transform
	 * @property {Object}
	 */
	this.transform = {}
	/**
	 * Get the the transformation matrix to apply to the view
	 * @alias Titanium_UI_Button.getTransform
	 * @return {Object}
	 */
	this.getTransform = function() { return this.transform; }
	/**
	 * Set the the transformation matrix to apply to the view
	 * @param {Object} value New value to set.
	 * @alias Titanium_UI_Button.setTransform
	 */
	this.setTransform = function(value) { this.transform = value; }
	/**
	 * a boolean of the visibility of the view
	 * @alias Titanium_UI_Button.visible
	 * @property {Boolean}
	 */
	this.visible = false
	/**
	 * Get the a boolean of the visibility of the view
	 * @alias Titanium_UI_Button.getVisible
	 * @return {Boolean}
	 */
	this.getVisible = function() { return this.visible; }
	/**
	 * Set the a boolean of the visibility of the view
	 * @param {Boolean} value New value to set.
	 * @alias Titanium_UI_Button.setVisible
	 */
	this.setVisible = function(value) { this.visible = value; }
	/**
	 * property for the view width. Can be either a float value or a dimension string ie 'auto' (default), '50%' (iPhone only).
	 * @alias Titanium_UI_Button.width
	 * @property {Float,String}
	 */
	this.width = 0.0
	/**
	 * Get the property for the view width. Can be either a float value or a dimension string ie 'auto' (default), '50%' (iPhone only).
	 * @alias Titanium_UI_Button.getWidth
	 * @return {Float,String}
	 */
	this.getWidth = function() { return this.width; }
	/**
	 * Set the property for the view width. Can be either a float value or a dimension string ie 'auto' (default), '50%' (iPhone only).
	 * @param {Float,String} value New value to set.
	 * @alias Titanium_UI_Button.setWidth
	 */
	this.setWidth = function(value) { this.width = value; }
	/**
	 * the z index position relative to other sibling views
	 * @alias Titanium_UI_Button.zIndex
	 * @property {Integer}
	 */
	this.zIndex = 0
	/**
	 * Get the the z index position relative to other sibling views
	 * @alias Titanium_UI_Button.getZIndex
	 * @return {Integer}
	 */
	this.getZIndex = function() { return this.zIndex; }
	/**
	 * Set the the z index position relative to other sibling views
	 * @param {Integer} value New value to set.
	 * @alias Titanium_UI_Button.setZIndex
	 */
	this.setZIndex = function(value) { this.zIndex = value; }
	/**
	 * add a child to the view hierarchy
	 * @param {Object} view the view to add to this views hiearchy
	 * @alias Titanium_UI_Button.add
	 */
	this.add = function add(view) { }
	/**
	 * add an event listener for the instance to receive view triggered events
	 * @param {String} name name of the event
	 * @param {Function} callback callback function to invoke when the event is fired
	 * @alias Titanium_UI_Button.addEventListener
	 */
	this.addEventListener = function addEventListener(name,callback) { }
	/**
	 * animate the view
	 * @param {Object} obj either a dictionary of animation properties or an Animation object
	 * @param {Function} callback function to be invoked upon completion of the animation
	 * @alias Titanium_UI_Button.animate
	 */
	this.animate = function animate(obj,callback) { }
	/**
	 * fire a synthesized event to the views listener
	 * @param {String} name name of the event
	 * @param {Object} event event object
	 * @alias Titanium_UI_Button.fireEvent
	 */
	this.fireEvent = function fireEvent(name,event) { }
	/**
	 * hide the view
	 * @alias Titanium_UI_Button.hide
	 */
	this.hide = function hide() { }
	/**
	 * remove a previously add view from the view hiearchy
	 * @param {Object} view the view to remove from this views hiearchy
	 * @alias Titanium_UI_Button.remove
	 */
	this.remove = function remove(view) { }
	/**
	 * remove a previously added event listener
	 * @param {String} name name of the event
	 * @param {Function} callback callback function passed in addEventListener
	 * @alias Titanium_UI_Button.removeEventListener
	 */
	this.removeEventListener = function removeEventListener(name,callback) { }
	/**
	 * make the view visible
	 * @alias Titanium_UI_Button.show
	 */
	this.show = function show() { }
	/**
	 * return a Blob image of the rendered view
	 * @param {Function} f function to be invoked upon completion. if non-null, this method will be performed asynchronously. if null, it will be performed immediately
	 * @alias Titanium_UI_Button.toImage
	 * @return {Object}
	 */
	this.toImage = function toImage(f) { return {}; }
};

/**
 * A Button Bar is created by the method Titanium.UI.createButtonBar.
 * @since 0.8
 */
function Titanium_UI_ButtonBar() {
	/**
	 * a dictionary with properties x and y to indicate the anchor point value. anchor specifies the position by which animation should occur. center is 0.5, 0.5
	 * @alias Titanium_UI_ButtonBar.anchorPoint
	 * @property {Object}
	 */
	this.anchorPoint = {}
	/**
	 * Get the a dictionary with properties x and y to indicate the anchor point value. anchor specifies the position by which animation should occur. center is 0.5, 0.5
	 * @alias Titanium_UI_ButtonBar.getAnchorPoint
	 * @return {Object}
	 */
	this.getAnchorPoint = function() { return this.anchorPoint; }
	/**
	 * Set the a dictionary with properties x and y to indicate the anchor point value. anchor specifies the position by which animation should occur. center is 0.5, 0.5
	 * @param {Object} value New value to set.
	 * @alias Titanium_UI_ButtonBar.setAnchorPoint
	 */
	this.setAnchorPoint = function(value) { this.anchorPoint = value; }
	/**
	 * read-only object with x and y properties of where the view is during animation
	 * @alias Titanium_UI_ButtonBar.animatedCenterPoint
	 * @property {Object}
	 */
	this.animatedCenterPoint = {}
	/**
	 * Get the read-only object with x and y properties of where the view is during animation
	 * @alias Titanium_UI_ButtonBar.getAnimatedCenterPoint
	 * @return {Object}
	 */
	this.getAnimatedCenterPoint = function() { return this.animatedCenterPoint; }
	/**
	 * Set the read-only object with x and y properties of where the view is during animation
	 * @param {Object} value New value to set.
	 * @alias Titanium_UI_ButtonBar.setAnimatedCenterPoint
	 */
	this.setAnimatedCenterPoint = function(value) { this.animatedCenterPoint = value; }
	/**
	 * the background color of the button bar
	 * @alias Titanium_UI_ButtonBar.backgroundColor
	 * @property {String}
	 */
	this.backgroundColor = ''
	/**
	 * Get the the background color of the button bar
	 * @alias Titanium_UI_ButtonBar.getBackgroundColor
	 * @return {String}
	 */
	this.getBackgroundColor = function() { return this.backgroundColor; }
	/**
	 * Set the the background color of the button bar
	 * @param {String} value New value to set.
	 * @alias Titanium_UI_ButtonBar.setBackgroundColor
	 */
	this.setBackgroundColor = function(value) { this.backgroundColor = value; }
	/**
	 * the disabled background color of the view. (Android)
	 * @alias Titanium_UI_ButtonBar.backgroundDisabledColor
	 * @property {String}
	 */
	this.backgroundDisabledColor = ''
	/**
	 * Get the the disabled background color of the view. (Android)
	 * @alias Titanium_UI_ButtonBar.getBackgroundDisabledColor
	 * @return {String}
	 */
	this.getBackgroundDisabledColor = function() { return this.backgroundDisabledColor; }
	/**
	 * Set the the disabled background color of the view. (Android)
	 * @param {String} value New value to set.
	 * @alias Titanium_UI_ButtonBar.setBackgroundDisabledColor
	 */
	this.setBackgroundDisabledColor = function(value) { this.backgroundDisabledColor = value; }
	/**
	 * the disabled background image url of the view. (Android)
	 * @alias Titanium_UI_ButtonBar.backgroundDisabledImage
	 * @property {String}
	 */
	this.backgroundDisabledImage = ''
	/**
	 * Get the the disabled background image url of the view. (Android)
	 * @alias Titanium_UI_ButtonBar.getBackgroundDisabledImage
	 * @return {String}
	 */
	this.getBackgroundDisabledImage = function() { return this.backgroundDisabledImage; }
	/**
	 * Set the the disabled background image url of the view. (Android)
	 * @param {String} value New value to set.
	 * @alias Titanium_UI_ButtonBar.setBackgroundDisabledImage
	 */
	this.setBackgroundDisabledImage = function(value) { this.backgroundDisabledImage = value; }
	/**
	 * the focused background color of the view. focusable must be true for normal views. (Android)
	 * @alias Titanium_UI_ButtonBar.backgroundFocusedColor
	 * @property {String}
	 */
	this.backgroundFocusedColor = ''
	/**
	 * Get the the focused background color of the view. focusable must be true for normal views. (Android)
	 * @alias Titanium_UI_ButtonBar.getBackgroundFocusedColor
	 * @return {String}
	 */
	this.getBackgroundFocusedColor = function() { return this.backgroundFocusedColor; }
	/**
	 * Set the the focused background color of the view. focusable must be true for normal views. (Android)
	 * @param {String} value New value to set.
	 * @alias Titanium_UI_ButtonBar.setBackgroundFocusedColor
	 */
	this.setBackgroundFocusedColor = function(value) { this.backgroundFocusedColor = value; }
	/**
	 * the focused background image url of the view. focusable must be true for normal views. (Android)
	 * @alias Titanium_UI_ButtonBar.backgroundFocusedImage
	 * @property {String}
	 */
	this.backgroundFocusedImage = ''
	/**
	 * Get the the focused background image url of the view. focusable must be true for normal views. (Android)
	 * @alias Titanium_UI_ButtonBar.getBackgroundFocusedImage
	 * @return {String}
	 */
	this.getBackgroundFocusedImage = function() { return this.backgroundFocusedImage; }
	/**
	 * Set the the focused background image url of the view. focusable must be true for normal views. (Android)
	 * @param {String} value New value to set.
	 * @alias Titanium_UI_ButtonBar.setBackgroundFocusedImage
	 */
	this.setBackgroundFocusedImage = function(value) { this.backgroundFocusedImage = value; }
	/**
	 * a background gradient for the view with the properties: type,startPoint,endPoint,startRadius,endRadius,backfillStart,backfillEnd,colors.
	 * @alias Titanium_UI_ButtonBar.backgroundGradient
	 * @property {Object}
	 */
	this.backgroundGradient = {}
	/**
	 * Get the a background gradient for the view with the properties: type,startPoint,endPoint,startRadius,endRadius,backfillStart,backfillEnd,colors.
	 * @alias Titanium_UI_ButtonBar.getBackgroundGradient
	 * @return {Object}
	 */
	this.getBackgroundGradient = function() { return this.backgroundGradient; }
	/**
	 * Set the a background gradient for the view with the properties: type,startPoint,endPoint,startRadius,endRadius,backfillStart,backfillEnd,colors.
	 * @param {Object} value New value to set.
	 * @alias Titanium_UI_ButtonBar.setBackgroundGradient
	 */
	this.setBackgroundGradient = function(value) { this.backgroundGradient = value; }
	/**
	 * the background image url of the view
	 * @alias Titanium_UI_ButtonBar.backgroundImage
	 * @property {String}
	 */
	this.backgroundImage = ''
	/**
	 * Get the the background image url of the view
	 * @alias Titanium_UI_ButtonBar.getBackgroundImage
	 * @return {String}
	 */
	this.getBackgroundImage = function() { return this.backgroundImage; }
	/**
	 * Set the the background image url of the view
	 * @param {String} value New value to set.
	 * @alias Titanium_UI_ButtonBar.setBackgroundImage
	 */
	this.setBackgroundImage = function(value) { this.backgroundImage = value; }
	/**
	 * End caps specify the portion of an image that should not be resized when an image is stretched. This technique is used to implement buttons and other resizable image-based interface elements. When a button with end caps is resized, the resizing occurs only in the middle of the button, in the region between the end caps. The end caps themselves keep their original size and appearance. This property specifies the size of the left end cap. The middle (stretchable) portion is assumed to be 1 pixel wide. The right end cap is therefore computed by adding the size of the left end cap and the middle portion together and then subtracting that value from the width of the image
	 * @alias Titanium_UI_ButtonBar.backgroundLeftCap
	 * @property {Float}
	 */
	this.backgroundLeftCap = 0.0
	/**
	 * Get the End caps specify the portion of an image that should not be resized when an image is stretched. This technique is used to implement buttons and other resizable image-based interface elements. When a button with end caps is resized, the resizing occurs only in the middle of the button, in the region between the end caps. The end caps themselves keep their original size and appearance. This property specifies the size of the left end cap. The middle (stretchable) portion is assumed to be 1 pixel wide. The right end cap is therefore computed by adding the size of the left end cap and the middle portion together and then subtracting that value from the width of the image
	 * @alias Titanium_UI_ButtonBar.getBackgroundLeftCap
	 * @return {Float}
	 */
	this.getBackgroundLeftCap = function() { return this.backgroundLeftCap; }
	/**
	 * Set the End caps specify the portion of an image that should not be resized when an image is stretched. This technique is used to implement buttons and other resizable image-based interface elements. When a button with end caps is resized, the resizing occurs only in the middle of the button, in the region between the end caps. The end caps themselves keep their original size and appearance. This property specifies the size of the left end cap. The middle (stretchable) portion is assumed to be 1 pixel wide. The right end cap is therefore computed by adding the size of the left end cap and the middle portion together and then subtracting that value from the width of the image
	 * @param {Float} value New value to set.
	 * @alias Titanium_UI_ButtonBar.setBackgroundLeftCap
	 */
	this.setBackgroundLeftCap = function(value) { this.backgroundLeftCap = value; }
	/**
	 * the selected background color of the view. focusable must be true for normal views. (Android)
	 * @alias Titanium_UI_ButtonBar.backgroundSelectedColor
	 * @property {String}
	 */
	this.backgroundSelectedColor = ''
	/**
	 * Get the the selected background color of the view. focusable must be true for normal views. (Android)
	 * @alias Titanium_UI_ButtonBar.getBackgroundSelectedColor
	 * @return {String}
	 */
	this.getBackgroundSelectedColor = function() { return this.backgroundSelectedColor; }
	/**
	 * Set the the selected background color of the view. focusable must be true for normal views. (Android)
	 * @param {String} value New value to set.
	 * @alias Titanium_UI_ButtonBar.setBackgroundSelectedColor
	 */
	this.setBackgroundSelectedColor = function(value) { this.backgroundSelectedColor = value; }
	/**
	 * the selected background image url of the view. focusable must be true for normal views. (Android)
	 * @alias Titanium_UI_ButtonBar.backgroundSelectedImage
	 * @property {String}
	 */
	this.backgroundSelectedImage = ''
	/**
	 * Get the the selected background image url of the view. focusable must be true for normal views. (Android)
	 * @alias Titanium_UI_ButtonBar.getBackgroundSelectedImage
	 * @return {String}
	 */
	this.getBackgroundSelectedImage = function() { return this.backgroundSelectedImage; }
	/**
	 * Set the the selected background image url of the view. focusable must be true for normal views. (Android)
	 * @param {String} value New value to set.
	 * @alias Titanium_UI_ButtonBar.setBackgroundSelectedImage
	 */
	this.setBackgroundSelectedImage = function(value) { this.backgroundSelectedImage = value; }
	/**
	 * End caps specify the portion of an image that should not be resized when an image is stretched. This technique is used to implement buttons and other resizable image-based interface elements. When a button with end caps is resized, the resizing occurs only in the middle of the button, in the region between the end caps. The end caps themselves keep their original size and appearance. This property specifies the size of the top end cap. The middle (stretchable) portion is assumed to be 1 pixel wide. The bottom end cap is therefore computed by adding the size of the top end cap and the middle portion together and then subtracting that value from the height of the image
	 * @alias Titanium_UI_ButtonBar.backgroundTopCap
	 * @property {Float}
	 */
	this.backgroundTopCap = 0.0
	/**
	 * Get the End caps specify the portion of an image that should not be resized when an image is stretched. This technique is used to implement buttons and other resizable image-based interface elements. When a button with end caps is resized, the resizing occurs only in the middle of the button, in the region between the end caps. The end caps themselves keep their original size and appearance. This property specifies the size of the top end cap. The middle (stretchable) portion is assumed to be 1 pixel wide. The bottom end cap is therefore computed by adding the size of the top end cap and the middle portion together and then subtracting that value from the height of the image
	 * @alias Titanium_UI_ButtonBar.getBackgroundTopCap
	 * @return {Float}
	 */
	this.getBackgroundTopCap = function() { return this.backgroundTopCap; }
	/**
	 * Set the End caps specify the portion of an image that should not be resized when an image is stretched. This technique is used to implement buttons and other resizable image-based interface elements. When a button with end caps is resized, the resizing occurs only in the middle of the button, in the region between the end caps. The end caps themselves keep their original size and appearance. This property specifies the size of the top end cap. The middle (stretchable) portion is assumed to be 1 pixel wide. The bottom end cap is therefore computed by adding the size of the top end cap and the middle portion together and then subtracting that value from the height of the image
	 * @param {Float} value New value to set.
	 * @alias Titanium_UI_ButtonBar.setBackgroundTopCap
	 */
	this.setBackgroundTopCap = function(value) { this.backgroundTopCap = value; }
	/**
	 * the border color of the view
	 * @alias Titanium_UI_ButtonBar.borderColor
	 * @property {String}
	 */
	this.borderColor = ''
	/**
	 * Get the the border color of the view
	 * @alias Titanium_UI_ButtonBar.getBorderColor
	 * @return {String}
	 */
	this.getBorderColor = function() { return this.borderColor; }
	/**
	 * Set the the border color of the view
	 * @param {String} value New value to set.
	 * @alias Titanium_UI_ButtonBar.setBorderColor
	 */
	this.setBorderColor = function(value) { this.borderColor = value; }
	/**
	 * the border radius of the view
	 * @alias Titanium_UI_ButtonBar.borderRadius
	 * @property {Float}
	 */
	this.borderRadius = 0.0
	/**
	 * Get the the border radius of the view
	 * @alias Titanium_UI_ButtonBar.getBorderRadius
	 * @return {Float}
	 */
	this.getBorderRadius = function() { return this.borderRadius; }
	/**
	 * Set the the border radius of the view
	 * @param {Float} value New value to set.
	 * @alias Titanium_UI_ButtonBar.setBorderRadius
	 */
	this.setBorderRadius = function(value) { this.borderRadius = value; }
	/**
	 * the border width of the view
	 * @alias Titanium_UI_ButtonBar.borderWidth
	 * @property {Float}
	 */
	this.borderWidth = 0.0
	/**
	 * Get the the border width of the view
	 * @alias Titanium_UI_ButtonBar.getBorderWidth
	 * @return {Float}
	 */
	this.getBorderWidth = function() { return this.borderWidth; }
	/**
	 * Set the the border width of the view
	 * @param {Float} value New value to set.
	 * @alias Titanium_UI_ButtonBar.setBorderWidth
	 */
	this.setBorderWidth = function(value) { this.borderWidth = value; }
	/**
	 * property for the view bottom position. This position is relative to the view's parent. Can be either a float value or a dimension string ie 'auto' (default), '50%' (iPhone only).
	 * @alias Titanium_UI_ButtonBar.bottom
	 * @property {Float,String}
	 */
	this.bottom = 0.0
	/**
	 * Get the property for the view bottom position. This position is relative to the view's parent. Can be either a float value or a dimension string ie 'auto' (default), '50%' (iPhone only).
	 * @alias Titanium_UI_ButtonBar.getBottom
	 * @return {Float,String}
	 */
	this.getBottom = function() { return this.bottom; }
	/**
	 * Set the property for the view bottom position. This position is relative to the view's parent. Can be either a float value or a dimension string ie 'auto' (default), '50%' (iPhone only).
	 * @param {Float,String} value New value to set.
	 * @alias Titanium_UI_ButtonBar.setBottom
	 */
	this.setBottom = function(value) { this.bottom = value; }
	/**
	 * a dictionary with properties x and y to indicate the center of the views position relative to the parent view
	 * @alias Titanium_UI_ButtonBar.center
	 * @property {Object}
	 */
	this.center = {}
	/**
	 * Get the a dictionary with properties x and y to indicate the center of the views position relative to the parent view
	 * @alias Titanium_UI_ButtonBar.getCenter
	 * @return {Object}
	 */
	this.getCenter = function() { return this.center; }
	/**
	 * Set the a dictionary with properties x and y to indicate the center of the views position relative to the parent view
	 * @param {Object} value New value to set.
	 * @alias Titanium_UI_ButtonBar.setCenter
	 */
	this.setCenter = function(value) { this.center = value; }
	/**
	 * Set true if you want a view to be focusable when navigating with the trackball or D-Pad. Default: false. (Android Only)
	 * @alias Titanium_UI_ButtonBar.focusable
	 * @property {Boolean}
	 */
	this.focusable = false
	/**
	 * Get the Set true if you want a view to be focusable when navigating with the trackball or D-Pad. Default: false. (Android Only)
	 * @alias Titanium_UI_ButtonBar.getFocusable
	 * @return {Boolean}
	 */
	this.getFocusable = function() { return this.focusable; }
	/**
	 * Set the Set true if you want a view to be focusable when navigating with the trackball or D-Pad. Default: false. (Android Only)
	 * @param {Boolean} value New value to set.
	 * @alias Titanium_UI_ButtonBar.setFocusable
	 */
	this.setFocusable = function(value) { this.focusable = value; }
	/**
	 * the font family
	 * @alias Titanium_UI_ButtonBar.font-family
	 * @property {String}
	 */
	this.font-family = ''
	/**
	 * Get the the font family
	 * @alias Titanium_UI_ButtonBar.getFont-family
	 * @return {String}
	 */
	this.getFont-family = function() { return this.font-family; }
	/**
	 * Set the the font family
	 * @param {String} value New value to set.
	 * @alias Titanium_UI_ButtonBar.setFont-family
	 */
	this.setFont-family = function(value) { this.font-family = value; }
	/**
	 * the font size
	 * @alias Titanium_UI_ButtonBar.font-size
	 * @property {String}
	 */
	this.font-size = ''
	/**
	 * Get the the font size
	 * @alias Titanium_UI_ButtonBar.getFont-size
	 * @return {String}
	 */
	this.getFont-size = function() { return this.font-size; }
	/**
	 * Set the the font size
	 * @param {String} value New value to set.
	 * @alias Titanium_UI_ButtonBar.setFont-size
	 */
	this.setFont-size = function(value) { this.font-size = value; }
	/**
	 * the font style, either normal or italics
	 * @alias Titanium_UI_ButtonBar.font-style
	 * @property {String}
	 */
	this.font-style = ''
	/**
	 * Get the the font style, either normal or italics
	 * @alias Titanium_UI_ButtonBar.getFont-style
	 * @return {String}
	 */
	this.getFont-style = function() { return this.font-style; }
	/**
	 * Set the the font style, either normal or italics
	 * @param {String} value New value to set.
	 * @alias Titanium_UI_ButtonBar.setFont-style
	 */
	this.setFont-style = function(value) { this.font-style = value; }
	/**
	 * the font weight, either normal or bold
	 * @alias Titanium_UI_ButtonBar.font-weight
	 * @property {String}
	 */
	this.font-weight = ''
	/**
	 * Get the the font weight, either normal or bold
	 * @alias Titanium_UI_ButtonBar.getFont-weight
	 * @return {String}
	 */
	this.getFont-weight = function() { return this.font-weight; }
	/**
	 * Set the the font weight, either normal or bold
	 * @param {String} value New value to set.
	 * @alias Titanium_UI_ButtonBar.setFont-weight
	 */
	this.setFont-weight = function(value) { this.font-weight = value; }
	/**
	 * property for the view height. Can be either a float value or a dimension string ie 'auto' (default), '50%' (iPhone only).
	 * @alias Titanium_UI_ButtonBar.height
	 * @property {Float,String}
	 */
	this.height = 0.0
	/**
	 * Get the property for the view height. Can be either a float value or a dimension string ie 'auto' (default), '50%' (iPhone only).
	 * @alias Titanium_UI_ButtonBar.getHeight
	 * @return {Float,String}
	 */
	this.getHeight = function() { return this.height; }
	/**
	 * Set the property for the view height. Can be either a float value or a dimension string ie 'auto' (default), '50%' (iPhone only).
	 * @param {Float,String} value New value to set.
	 * @alias Titanium_UI_ButtonBar.setHeight
	 */
	this.setHeight = function(value) { this.height = value; }
	/**
	 * the selected index
	 * @alias Titanium_UI_ButtonBar.index
	 * @property {Integer}
	 */
	this.index = 0
	/**
	 * Get the the selected index
	 * @alias Titanium_UI_ButtonBar.getIndex
	 * @return {Integer}
	 */
	this.getIndex = function() { return this.index; }
	/**
	 * Set the the selected index
	 * @param {Integer} value New value to set.
	 * @alias Titanium_UI_ButtonBar.setIndex
	 */
	this.setIndex = function(value) { this.index = value; }
	/**
	 * the array of labels for the button bar. each object should have the properties title, image, width and enabled.
	 * @alias Titanium_UI_ButtonBar.labels
	 * @property {Array}
	 */
	this.labels = []
	/**
	 * Get the the array of labels for the button bar. each object should have the properties title, image, width and enabled.
	 * @alias Titanium_UI_ButtonBar.getLabels
	 * @return {Array}
	 */
	this.getLabels = function() { return this.labels; }
	/**
	 * Set the the array of labels for the button bar. each object should have the properties title, image, width and enabled.
	 * @param {Array} value New value to set.
	 * @alias Titanium_UI_ButtonBar.setLabels
	 */
	this.setLabels = function(value) { this.labels = value; }
	/**
	 * property for the view left position. This position is relative to the view's parent. Can be either a float value or a dimension string ie 'auto' (default), '50%' (iPhone only).
	 * @alias Titanium_UI_ButtonBar.left
	 * @property {Float,String}
	 */
	this.left = 0.0
	/**
	 * Get the property for the view left position. This position is relative to the view's parent. Can be either a float value or a dimension string ie 'auto' (default), '50%' (iPhone only).
	 * @alias Titanium_UI_ButtonBar.getLeft
	 * @return {Float,String}
	 */
	this.getLeft = function() { return this.left; }
	/**
	 * Set the property for the view left position. This position is relative to the view's parent. Can be either a float value or a dimension string ie 'auto' (default), '50%' (iPhone only).
	 * @param {Float,String} value New value to set.
	 * @alias Titanium_UI_ButtonBar.setLeft
	 */
	this.setLeft = function(value) { this.left = value; }
	/**
	 * the opacity from 0.0-1.0
	 * @alias Titanium_UI_ButtonBar.opacity
	 * @property {Float}
	 */
	this.opacity = 0.0
	/**
	 * Get the the opacity from 0.0-1.0
	 * @alias Titanium_UI_ButtonBar.getOpacity
	 * @return {Float}
	 */
	this.getOpacity = function() { return this.opacity; }
	/**
	 * Set the the opacity from 0.0-1.0
	 * @param {Float} value New value to set.
	 * @alias Titanium_UI_ButtonBar.setOpacity
	 */
	this.setOpacity = function(value) { this.opacity = value; }
	/**
	 * property for the view right position. This position is relative to the view's parent. Can be either a float value or a dimension string ie 'auto' (default), '50%' (iPhone only).
	 * @alias Titanium_UI_ButtonBar.right
	 * @property {Float,String}
	 */
	this.right = 0.0
	/**
	 * Get the property for the view right position. This position is relative to the view's parent. Can be either a float value or a dimension string ie 'auto' (default), '50%' (iPhone only).
	 * @alias Titanium_UI_ButtonBar.getRight
	 * @return {Float,String}
	 */
	this.getRight = function() { return this.right; }
	/**
	 * Set the property for the view right position. This position is relative to the view's parent. Can be either a float value or a dimension string ie 'auto' (default), '50%' (iPhone only).
	 * @param {Float,String} value New value to set.
	 * @alias Titanium_UI_ButtonBar.setRight
	 */
	this.setRight = function(value) { this.right = value; }
	/**
	 * the size of the view as a dictionary of width and height properties
	 * @alias Titanium_UI_ButtonBar.size
	 * @property {Object}
	 */
	this.size = {}
	/**
	 * Get the the size of the view as a dictionary of width and height properties
	 * @alias Titanium_UI_ButtonBar.getSize
	 * @return {Object}
	 */
	this.getSize = function() { return this.size; }
	/**
	 * Set the the size of the view as a dictionary of width and height properties
	 * @param {Object} value New value to set.
	 * @alias Titanium_UI_ButtonBar.setSize
	 */
	this.setSize = function(value) { this.size = value; }
	/**
	 * One of Titanium.UI.Android.SOFT_KEYBOARD_DEFAULT_ON_FOCUS, Titanium.UI.Android.SOFT_KEYBOARD_HIDE_ON_FOCUS, or Titanium.UI.Android.SOFT_KEYBOARD_SHOW_ON_FOCUS. (Android only)
	 * @alias Titanium_UI_ButtonBar.softKeyboardOnFocus
	 * @property {Integer}
	 */
	this.softKeyboardOnFocus = 0
	/**
	 * Get the One of Titanium.UI.Android.SOFT_KEYBOARD_DEFAULT_ON_FOCUS, Titanium.UI.Android.SOFT_KEYBOARD_HIDE_ON_FOCUS, or Titanium.UI.Android.SOFT_KEYBOARD_SHOW_ON_FOCUS. (Android only)
	 * @alias Titanium_UI_ButtonBar.getSoftKeyboardOnFocus
	 * @return {Integer}
	 */
	this.getSoftKeyboardOnFocus = function() { return this.softKeyboardOnFocus; }
	/**
	 * Set the One of Titanium.UI.Android.SOFT_KEYBOARD_DEFAULT_ON_FOCUS, Titanium.UI.Android.SOFT_KEYBOARD_HIDE_ON_FOCUS, or Titanium.UI.Android.SOFT_KEYBOARD_SHOW_ON_FOCUS. (Android only)
	 * @param {Integer} value New value to set.
	 * @alias Titanium_UI_ButtonBar.setSoftKeyboardOnFocus
	 */
	this.setSoftKeyboardOnFocus = function(value) { this.softKeyboardOnFocus = value; }
	/**
	 * the style of the button bar
	 * @alias Titanium_UI_ButtonBar.style
	 * @property {Integer}
	 */
	this.style = 0
	/**
	 * Get the the style of the button bar
	 * @alias Titanium_UI_ButtonBar.getStyle
	 * @return {Integer}
	 */
	this.getStyle = function() { return this.style; }
	/**
	 * Set the the style of the button bar
	 * @param {Integer} value New value to set.
	 * @alias Titanium_UI_ButtonBar.setStyle
	 */
	this.setStyle = function(value) { this.style = value; }
	/**
	 * property for the view top position. This position is relative to the view's parent. Can be either a float value or a dimension string ie 'auto' (default), '50%' (iPhone only).
	 * @alias Titanium_UI_ButtonBar.top
	 * @property {Float,String}
	 */
	this.top = 0.0
	/**
	 * Get the property for the view top position. This position is relative to the view's parent. Can be either a float value or a dimension string ie 'auto' (default), '50%' (iPhone only).
	 * @alias Titanium_UI_ButtonBar.getTop
	 * @return {Float,String}
	 */
	this.getTop = function() { return this.top; }
	/**
	 * Set the property for the view top position. This position is relative to the view's parent. Can be either a float value or a dimension string ie 'auto' (default), '50%' (iPhone only).
	 * @param {Float,String} value New value to set.
	 * @alias Titanium_UI_ButtonBar.setTop
	 */
	this.setTop = function(value) { this.top = value; }
	/**
	 * a boolean indicating if the view should receive touch events (true, default) or forward them to peers (false)
	 * @alias Titanium_UI_ButtonBar.touchEnabled
	 * @property {Boolean}
	 */
	this.touchEnabled = false
	/**
	 * Get the a boolean indicating if the view should receive touch events (true, default) or forward them to peers (false)
	 * @alias Titanium_UI_ButtonBar.getTouchEnabled
	 * @return {Boolean}
	 */
	this.getTouchEnabled = function() { return this.touchEnabled; }
	/**
	 * Set the a boolean indicating if the view should receive touch events (true, default) or forward them to peers (false)
	 * @param {Boolean} value New value to set.
	 * @alias Titanium_UI_ButtonBar.setTouchEnabled
	 */
	this.setTouchEnabled = function(value) { this.touchEnabled = value; }
	/**
	 * the transformation matrix to apply to the view
	 * @alias Titanium_UI_ButtonBar.transform
	 * @property {Object}
	 */
	this.transform = {}
	/**
	 * Get the the transformation matrix to apply to the view
	 * @alias Titanium_UI_ButtonBar.getTransform
	 * @return {Object}
	 */
	this.getTransform = function() { return this.transform; }
	/**
	 * Set the the transformation matrix to apply to the view
	 * @param {Object} value New value to set.
	 * @alias Titanium_UI_ButtonBar.setTransform
	 */
	this.setTransform = function(value) { this.transform = value; }
	/**
	 * a boolean of the visibility of the view
	 * @alias Titanium_UI_ButtonBar.visible
	 * @property {Boolean}
	 */
	this.visible = false
	/**
	 * Get the a boolean of the visibility of the view
	 * @alias Titanium_UI_ButtonBar.getVisible
	 * @return {Boolean}
	 */
	this.getVisible = function() { return this.visible; }
	/**
	 * Set the a boolean of the visibility of the view
	 * @param {Boolean} value New value to set.
	 * @alias Titanium_UI_ButtonBar.setVisible
	 */
	this.setVisible = function(value) { this.visible = value; }
	/**
	 * property for the view width. Can be either a float value or a dimension string ie 'auto' (default), '50%' (iPhone only).
	 * @alias Titanium_UI_ButtonBar.width
	 * @property {Float,String}
	 */
	this.width = 0.0
	/**
	 * Get the property for the view width. Can be either a float value or a dimension string ie 'auto' (default), '50%' (iPhone only).
	 * @alias Titanium_UI_ButtonBar.getWidth
	 * @return {Float,String}
	 */
	this.getWidth = function() { return this.width; }
	/**
	 * Set the property for the view width. Can be either a float value or a dimension string ie 'auto' (default), '50%' (iPhone only).
	 * @param {Float,String} value New value to set.
	 * @alias Titanium_UI_ButtonBar.setWidth
	 */
	this.setWidth = function(value) { this.width = value; }
	/**
	 * the z index position relative to other sibling views
	 * @alias Titanium_UI_ButtonBar.zIndex
	 * @property {Integer}
	 */
	this.zIndex = 0
	/**
	 * Get the the z index position relative to other sibling views
	 * @alias Titanium_UI_ButtonBar.getZIndex
	 * @return {Integer}
	 */
	this.getZIndex = function() { return this.zIndex; }
	/**
	 * Set the the z index position relative to other sibling views
	 * @param {Integer} value New value to set.
	 * @alias Titanium_UI_ButtonBar.setZIndex
	 */
	this.setZIndex = function(value) { this.zIndex = value; }
	/**
	 * add a child to the view hierarchy
	 * @param {Object} view the view to add to this views hiearchy
	 * @alias Titanium_UI_ButtonBar.add
	 */
	this.add = function add(view) { }
	/**
	 * add an event listener for the instance to receive view triggered events
	 * @param {String} name name of the event
	 * @param {Function} callback callback function to invoke when the event is fired
	 * @alias Titanium_UI_ButtonBar.addEventListener
	 */
	this.addEventListener = function addEventListener(name,callback) { }
	/**
	 * animate the view
	 * @param {Object} obj either a dictionary of animation properties or an Animation object
	 * @param {Function} callback function to be invoked upon completion of the animation
	 * @alias Titanium_UI_ButtonBar.animate
	 */
	this.animate = function animate(obj,callback) { }
	/**
	 * fire a synthesized event to the views listener
	 * @param {String} name name of the event
	 * @param {Object} event event object
	 * @alias Titanium_UI_ButtonBar.fireEvent
	 */
	this.fireEvent = function fireEvent(name,event) { }
	/**
	 * hide the view
	 * @alias Titanium_UI_ButtonBar.hide
	 */
	this.hide = function hide() { }
	/**
	 * remove a previously add view from the view hiearchy
	 * @param {Object} view the view to remove from this views hiearchy
	 * @alias Titanium_UI_ButtonBar.remove
	 */
	this.remove = function remove(view) { }
	/**
	 * remove a previously added event listener
	 * @param {String} name name of the event
	 * @param {Function} callback callback function passed in addEventListener
	 * @alias Titanium_UI_ButtonBar.removeEventListener
	 */
	this.removeEventListener = function removeEventListener(name,callback) { }
	/**
	 * make the view visible
	 * @alias Titanium_UI_ButtonBar.show
	 */
	this.show = function show() { }
	/**
	 * return a Blob image of the rendered view
	 * @param {Function} f function to be invoked upon completion. if non-null, this method will be performed asynchronously. if null, it will be performed immediately
	 * @alias Titanium_UI_ButtonBar.toImage
	 * @return {Object}
	 */
	this.toImage = function toImage(f) { return {}; }
};

/**
 * The Cover Flow view is container for showing  animated, three dimensional images in a nice UI. The Cover Flow view is created by the method Titanium.UI.createCoverFlowView.
 * @since 0.8
 */
function Titanium_UI_CoverFlowView() {
	/**
	 * a dictionary with properties x and y to indicate the anchor point value. anchor specifies the position by which animation should occur. center is 0.5, 0.5
	 * @alias Titanium_UI_CoverFlowView.anchorPoint
	 * @property {Object}
	 */
	this.anchorPoint = {}
	/**
	 * Get the a dictionary with properties x and y to indicate the anchor point value. anchor specifies the position by which animation should occur. center is 0.5, 0.5
	 * @alias Titanium_UI_CoverFlowView.getAnchorPoint
	 * @return {Object}
	 */
	this.getAnchorPoint = function() { return this.anchorPoint; }
	/**
	 * Set the a dictionary with properties x and y to indicate the anchor point value. anchor specifies the position by which animation should occur. center is 0.5, 0.5
	 * @param {Object} value New value to set.
	 * @alias Titanium_UI_CoverFlowView.setAnchorPoint
	 */
	this.setAnchorPoint = function(value) { this.anchorPoint = value; }
	/**
	 * read-only object with x and y properties of where the view is during animation
	 * @alias Titanium_UI_CoverFlowView.animatedCenterPoint
	 * @property {Object}
	 */
	this.animatedCenterPoint = {}
	/**
	 * Get the read-only object with x and y properties of where the view is during animation
	 * @alias Titanium_UI_CoverFlowView.getAnimatedCenterPoint
	 * @return {Object}
	 */
	this.getAnimatedCenterPoint = function() { return this.animatedCenterPoint; }
	/**
	 * Set the read-only object with x and y properties of where the view is during animation
	 * @param {Object} value New value to set.
	 * @alias Titanium_UI_CoverFlowView.setAnimatedCenterPoint
	 */
	this.setAnimatedCenterPoint = function(value) { this.animatedCenterPoint = value; }
	/**
	 * the background color of the view
	 * @alias Titanium_UI_CoverFlowView.backgroundColor
	 * @property {String}
	 */
	this.backgroundColor = ''
	/**
	 * Get the the background color of the view
	 * @alias Titanium_UI_CoverFlowView.getBackgroundColor
	 * @return {String}
	 */
	this.getBackgroundColor = function() { return this.backgroundColor; }
	/**
	 * Set the the background color of the view
	 * @param {String} value New value to set.
	 * @alias Titanium_UI_CoverFlowView.setBackgroundColor
	 */
	this.setBackgroundColor = function(value) { this.backgroundColor = value; }
	/**
	 * the disabled background color of the view. (Android)
	 * @alias Titanium_UI_CoverFlowView.backgroundDisabledColor
	 * @property {String}
	 */
	this.backgroundDisabledColor = ''
	/**
	 * Get the the disabled background color of the view. (Android)
	 * @alias Titanium_UI_CoverFlowView.getBackgroundDisabledColor
	 * @return {String}
	 */
	this.getBackgroundDisabledColor = function() { return this.backgroundDisabledColor; }
	/**
	 * Set the the disabled background color of the view. (Android)
	 * @param {String} value New value to set.
	 * @alias Titanium_UI_CoverFlowView.setBackgroundDisabledColor
	 */
	this.setBackgroundDisabledColor = function(value) { this.backgroundDisabledColor = value; }
	/**
	 * the disabled background image url of the view. (Android)
	 * @alias Titanium_UI_CoverFlowView.backgroundDisabledImage
	 * @property {String}
	 */
	this.backgroundDisabledImage = ''
	/**
	 * Get the the disabled background image url of the view. (Android)
	 * @alias Titanium_UI_CoverFlowView.getBackgroundDisabledImage
	 * @return {String}
	 */
	this.getBackgroundDisabledImage = function() { return this.backgroundDisabledImage; }
	/**
	 * Set the the disabled background image url of the view. (Android)
	 * @param {String} value New value to set.
	 * @alias Titanium_UI_CoverFlowView.setBackgroundDisabledImage
	 */
	this.setBackgroundDisabledImage = function(value) { this.backgroundDisabledImage = value; }
	/**
	 * the focused background color of the view. focusable must be true for normal views. (Android)
	 * @alias Titanium_UI_CoverFlowView.backgroundFocusedColor
	 * @property {String}
	 */
	this.backgroundFocusedColor = ''
	/**
	 * Get the the focused background color of the view. focusable must be true for normal views. (Android)
	 * @alias Titanium_UI_CoverFlowView.getBackgroundFocusedColor
	 * @return {String}
	 */
	this.getBackgroundFocusedColor = function() { return this.backgroundFocusedColor; }
	/**
	 * Set the the focused background color of the view. focusable must be true for normal views. (Android)
	 * @param {String} value New value to set.
	 * @alias Titanium_UI_CoverFlowView.setBackgroundFocusedColor
	 */
	this.setBackgroundFocusedColor = function(value) { this.backgroundFocusedColor = value; }
	/**
	 * the focused background image url of the view. focusable must be true for normal views. (Android)
	 * @alias Titanium_UI_CoverFlowView.backgroundFocusedImage
	 * @property {String}
	 */
	this.backgroundFocusedImage = ''
	/**
	 * Get the the focused background image url of the view. focusable must be true for normal views. (Android)
	 * @alias Titanium_UI_CoverFlowView.getBackgroundFocusedImage
	 * @return {String}
	 */
	this.getBackgroundFocusedImage = function() { return this.backgroundFocusedImage; }
	/**
	 * Set the the focused background image url of the view. focusable must be true for normal views. (Android)
	 * @param {String} value New value to set.
	 * @alias Titanium_UI_CoverFlowView.setBackgroundFocusedImage
	 */
	this.setBackgroundFocusedImage = function(value) { this.backgroundFocusedImage = value; }
	/**
	 * a background gradient for the view with the properties: type,startPoint,endPoint,startRadius,endRadius,backfillStart,backfillEnd,colors.
	 * @alias Titanium_UI_CoverFlowView.backgroundGradient
	 * @property {Object}
	 */
	this.backgroundGradient = {}
	/**
	 * Get the a background gradient for the view with the properties: type,startPoint,endPoint,startRadius,endRadius,backfillStart,backfillEnd,colors.
	 * @alias Titanium_UI_CoverFlowView.getBackgroundGradient
	 * @return {Object}
	 */
	this.getBackgroundGradient = function() { return this.backgroundGradient; }
	/**
	 * Set the a background gradient for the view with the properties: type,startPoint,endPoint,startRadius,endRadius,backfillStart,backfillEnd,colors.
	 * @param {Object} value New value to set.
	 * @alias Titanium_UI_CoverFlowView.setBackgroundGradient
	 */
	this.setBackgroundGradient = function(value) { this.backgroundGradient = value; }
	/**
	 * the background image url of the view
	 * @alias Titanium_UI_CoverFlowView.backgroundImage
	 * @property {String}
	 */
	this.backgroundImage = ''
	/**
	 * Get the the background image url of the view
	 * @alias Titanium_UI_CoverFlowView.getBackgroundImage
	 * @return {String}
	 */
	this.getBackgroundImage = function() { return this.backgroundImage; }
	/**
	 * Set the the background image url of the view
	 * @param {String} value New value to set.
	 * @alias Titanium_UI_CoverFlowView.setBackgroundImage
	 */
	this.setBackgroundImage = function(value) { this.backgroundImage = value; }
	/**
	 * End caps specify the portion of an image that should not be resized when an image is stretched. This technique is used to implement buttons and other resizable image-based interface elements. When a button with end caps is resized, the resizing occurs only in the middle of the button, in the region between the end caps. The end caps themselves keep their original size and appearance. This property specifies the size of the left end cap. The middle (stretchable) portion is assumed to be 1 pixel wide. The right end cap is therefore computed by adding the size of the left end cap and the middle portion together and then subtracting that value from the width of the image
	 * @alias Titanium_UI_CoverFlowView.backgroundLeftCap
	 * @property {Float}
	 */
	this.backgroundLeftCap = 0.0
	/**
	 * Get the End caps specify the portion of an image that should not be resized when an image is stretched. This technique is used to implement buttons and other resizable image-based interface elements. When a button with end caps is resized, the resizing occurs only in the middle of the button, in the region between the end caps. The end caps themselves keep their original size and appearance. This property specifies the size of the left end cap. The middle (stretchable) portion is assumed to be 1 pixel wide. The right end cap is therefore computed by adding the size of the left end cap and the middle portion together and then subtracting that value from the width of the image
	 * @alias Titanium_UI_CoverFlowView.getBackgroundLeftCap
	 * @return {Float}
	 */
	this.getBackgroundLeftCap = function() { return this.backgroundLeftCap; }
	/**
	 * Set the End caps specify the portion of an image that should not be resized when an image is stretched. This technique is used to implement buttons and other resizable image-based interface elements. When a button with end caps is resized, the resizing occurs only in the middle of the button, in the region between the end caps. The end caps themselves keep their original size and appearance. This property specifies the size of the left end cap. The middle (stretchable) portion is assumed to be 1 pixel wide. The right end cap is therefore computed by adding the size of the left end cap and the middle portion together and then subtracting that value from the width of the image
	 * @param {Float} value New value to set.
	 * @alias Titanium_UI_CoverFlowView.setBackgroundLeftCap
	 */
	this.setBackgroundLeftCap = function(value) { this.backgroundLeftCap = value; }
	/**
	 * the selected background color of the view. focusable must be true for normal views. (Android)
	 * @alias Titanium_UI_CoverFlowView.backgroundSelectedColor
	 * @property {String}
	 */
	this.backgroundSelectedColor = ''
	/**
	 * Get the the selected background color of the view. focusable must be true for normal views. (Android)
	 * @alias Titanium_UI_CoverFlowView.getBackgroundSelectedColor
	 * @return {String}
	 */
	this.getBackgroundSelectedColor = function() { return this.backgroundSelectedColor; }
	/**
	 * Set the the selected background color of the view. focusable must be true for normal views. (Android)
	 * @param {String} value New value to set.
	 * @alias Titanium_UI_CoverFlowView.setBackgroundSelectedColor
	 */
	this.setBackgroundSelectedColor = function(value) { this.backgroundSelectedColor = value; }
	/**
	 * the selected background image url of the view. focusable must be true for normal views. (Android)
	 * @alias Titanium_UI_CoverFlowView.backgroundSelectedImage
	 * @property {String}
	 */
	this.backgroundSelectedImage = ''
	/**
	 * Get the the selected background image url of the view. focusable must be true for normal views. (Android)
	 * @alias Titanium_UI_CoverFlowView.getBackgroundSelectedImage
	 * @return {String}
	 */
	this.getBackgroundSelectedImage = function() { return this.backgroundSelectedImage; }
	/**
	 * Set the the selected background image url of the view. focusable must be true for normal views. (Android)
	 * @param {String} value New value to set.
	 * @alias Titanium_UI_CoverFlowView.setBackgroundSelectedImage
	 */
	this.setBackgroundSelectedImage = function(value) { this.backgroundSelectedImage = value; }
	/**
	 * End caps specify the portion of an image that should not be resized when an image is stretched. This technique is used to implement buttons and other resizable image-based interface elements. When a button with end caps is resized, the resizing occurs only in the middle of the button, in the region between the end caps. The end caps themselves keep their original size and appearance. This property specifies the size of the top end cap. The middle (stretchable) portion is assumed to be 1 pixel wide. The bottom end cap is therefore computed by adding the size of the top end cap and the middle portion together and then subtracting that value from the height of the image
	 * @alias Titanium_UI_CoverFlowView.backgroundTopCap
	 * @property {Float}
	 */
	this.backgroundTopCap = 0.0
	/**
	 * Get the End caps specify the portion of an image that should not be resized when an image is stretched. This technique is used to implement buttons and other resizable image-based interface elements. When a button with end caps is resized, the resizing occurs only in the middle of the button, in the region between the end caps. The end caps themselves keep their original size and appearance. This property specifies the size of the top end cap. The middle (stretchable) portion is assumed to be 1 pixel wide. The bottom end cap is therefore computed by adding the size of the top end cap and the middle portion together and then subtracting that value from the height of the image
	 * @alias Titanium_UI_CoverFlowView.getBackgroundTopCap
	 * @return {Float}
	 */
	this.getBackgroundTopCap = function() { return this.backgroundTopCap; }
	/**
	 * Set the End caps specify the portion of an image that should not be resized when an image is stretched. This technique is used to implement buttons and other resizable image-based interface elements. When a button with end caps is resized, the resizing occurs only in the middle of the button, in the region between the end caps. The end caps themselves keep their original size and appearance. This property specifies the size of the top end cap. The middle (stretchable) portion is assumed to be 1 pixel wide. The bottom end cap is therefore computed by adding the size of the top end cap and the middle portion together and then subtracting that value from the height of the image
	 * @param {Float} value New value to set.
	 * @alias Titanium_UI_CoverFlowView.setBackgroundTopCap
	 */
	this.setBackgroundTopCap = function(value) { this.backgroundTopCap = value; }
	/**
	 * the border color of the view
	 * @alias Titanium_UI_CoverFlowView.borderColor
	 * @property {String}
	 */
	this.borderColor = ''
	/**
	 * Get the the border color of the view
	 * @alias Titanium_UI_CoverFlowView.getBorderColor
	 * @return {String}
	 */
	this.getBorderColor = function() { return this.borderColor; }
	/**
	 * Set the the border color of the view
	 * @param {String} value New value to set.
	 * @alias Titanium_UI_CoverFlowView.setBorderColor
	 */
	this.setBorderColor = function(value) { this.borderColor = value; }
	/**
	 * the border radius of the view
	 * @alias Titanium_UI_CoverFlowView.borderRadius
	 * @property {Float}
	 */
	this.borderRadius = 0.0
	/**
	 * Get the the border radius of the view
	 * @alias Titanium_UI_CoverFlowView.getBorderRadius
	 * @return {Float}
	 */
	this.getBorderRadius = function() { return this.borderRadius; }
	/**
	 * Set the the border radius of the view
	 * @param {Float} value New value to set.
	 * @alias Titanium_UI_CoverFlowView.setBorderRadius
	 */
	this.setBorderRadius = function(value) { this.borderRadius = value; }
	/**
	 * the border width of the view
	 * @alias Titanium_UI_CoverFlowView.borderWidth
	 * @property {Float}
	 */
	this.borderWidth = 0.0
	/**
	 * Get the the border width of the view
	 * @alias Titanium_UI_CoverFlowView.getBorderWidth
	 * @return {Float}
	 */
	this.getBorderWidth = function() { return this.borderWidth; }
	/**
	 * Set the the border width of the view
	 * @param {Float} value New value to set.
	 * @alias Titanium_UI_CoverFlowView.setBorderWidth
	 */
	this.setBorderWidth = function(value) { this.borderWidth = value; }
	/**
	 * property for the view bottom position. This position is relative to the view's parent. Can be either a float value or a dimension string ie 'auto' (default), '50%' (iPhone only).
	 * @alias Titanium_UI_CoverFlowView.bottom
	 * @property {Float,String}
	 */
	this.bottom = 0.0
	/**
	 * Get the property for the view bottom position. This position is relative to the view's parent. Can be either a float value or a dimension string ie 'auto' (default), '50%' (iPhone only).
	 * @alias Titanium_UI_CoverFlowView.getBottom
	 * @return {Float,String}
	 */
	this.getBottom = function() { return this.bottom; }
	/**
	 * Set the property for the view bottom position. This position is relative to the view's parent. Can be either a float value or a dimension string ie 'auto' (default), '50%' (iPhone only).
	 * @param {Float,String} value New value to set.
	 * @alias Titanium_UI_CoverFlowView.setBottom
	 */
	this.setBottom = function(value) { this.bottom = value; }
	/**
	 * a dictionary with properties x and y to indicate the center of the views position relative to the parent view
	 * @alias Titanium_UI_CoverFlowView.center
	 * @property {Object}
	 */
	this.center = {}
	/**
	 * Get the a dictionary with properties x and y to indicate the center of the views position relative to the parent view
	 * @alias Titanium_UI_CoverFlowView.getCenter
	 * @return {Object}
	 */
	this.getCenter = function() { return this.center; }
	/**
	 * Set the a dictionary with properties x and y to indicate the center of the views position relative to the parent view
	 * @param {Object} value New value to set.
	 * @alias Titanium_UI_CoverFlowView.setCenter
	 */
	this.setCenter = function(value) { this.center = value; }
	/**
	 * Set true if you want a view to be focusable when navigating with the trackball or D-Pad. Default: false. (Android Only)
	 * @alias Titanium_UI_CoverFlowView.focusable
	 * @property {Boolean}
	 */
	this.focusable = false
	/**
	 * Get the Set true if you want a view to be focusable when navigating with the trackball or D-Pad. Default: false. (Android Only)
	 * @alias Titanium_UI_CoverFlowView.getFocusable
	 * @return {Boolean}
	 */
	this.getFocusable = function() { return this.focusable; }
	/**
	 * Set the Set true if you want a view to be focusable when navigating with the trackball or D-Pad. Default: false. (Android Only)
	 * @param {Boolean} value New value to set.
	 * @alias Titanium_UI_CoverFlowView.setFocusable
	 */
	this.setFocusable = function(value) { this.focusable = value; }
	/**
	 * the font family
	 * @alias Titanium_UI_CoverFlowView.font-family
	 * @property {String}
	 */
	this.font-family = ''
	/**
	 * Get the the font family
	 * @alias Titanium_UI_CoverFlowView.getFont-family
	 * @return {String}
	 */
	this.getFont-family = function() { return this.font-family; }
	/**
	 * Set the the font family
	 * @param {String} value New value to set.
	 * @alias Titanium_UI_CoverFlowView.setFont-family
	 */
	this.setFont-family = function(value) { this.font-family = value; }
	/**
	 * the font size
	 * @alias Titanium_UI_CoverFlowView.font-size
	 * @property {String}
	 */
	this.font-size = ''
	/**
	 * Get the the font size
	 * @alias Titanium_UI_CoverFlowView.getFont-size
	 * @return {String}
	 */
	this.getFont-size = function() { return this.font-size; }
	/**
	 * Set the the font size
	 * @param {String} value New value to set.
	 * @alias Titanium_UI_CoverFlowView.setFont-size
	 */
	this.setFont-size = function(value) { this.font-size = value; }
	/**
	 * the font style, either normal or italics
	 * @alias Titanium_UI_CoverFlowView.font-style
	 * @property {String}
	 */
	this.font-style = ''
	/**
	 * Get the the font style, either normal or italics
	 * @alias Titanium_UI_CoverFlowView.getFont-style
	 * @return {String}
	 */
	this.getFont-style = function() { return this.font-style; }
	/**
	 * Set the the font style, either normal or italics
	 * @param {String} value New value to set.
	 * @alias Titanium_UI_CoverFlowView.setFont-style
	 */
	this.setFont-style = function(value) { this.font-style = value; }
	/**
	 * the font weight, either normal or bold
	 * @alias Titanium_UI_CoverFlowView.font-weight
	 * @property {String}
	 */
	this.font-weight = ''
	/**
	 * Get the the font weight, either normal or bold
	 * @alias Titanium_UI_CoverFlowView.getFont-weight
	 * @return {String}
	 */
	this.getFont-weight = function() { return this.font-weight; }
	/**
	 * Set the the font weight, either normal or bold
	 * @param {String} value New value to set.
	 * @alias Titanium_UI_CoverFlowView.setFont-weight
	 */
	this.setFont-weight = function(value) { this.font-weight = value; }
	/**
	 * property for the view height. Can be either a float value or a dimension string ie 'auto' (default), '50%' (iPhone only).
	 * @alias Titanium_UI_CoverFlowView.height
	 * @property {Float,String}
	 */
	this.height = 0.0
	/**
	 * Get the property for the view height. Can be either a float value or a dimension string ie 'auto' (default), '50%' (iPhone only).
	 * @alias Titanium_UI_CoverFlowView.getHeight
	 * @return {Float,String}
	 */
	this.getHeight = function() { return this.height; }
	/**
	 * Set the property for the view height. Can be either a float value or a dimension string ie 'auto' (default), '50%' (iPhone only).
	 * @param {Float,String} value New value to set.
	 * @alias Titanium_UI_CoverFlowView.setHeight
	 */
	this.setHeight = function(value) { this.height = value; }
	/**
	 * array of images to display in the view
	 * @alias Titanium_UI_CoverFlowView.images
	 * @property {Array}
	 */
	this.images = []
	/**
	 * Get the array of images to display in the view
	 * @alias Titanium_UI_CoverFlowView.getImages
	 * @return {Array}
	 */
	this.getImages = function() { return this.images; }
	/**
	 * Set the array of images to display in the view
	 * @param {Array} value New value to set.
	 * @alias Titanium_UI_CoverFlowView.setImages
	 */
	this.setImages = function(value) { this.images = value; }
	/**
	 * property for the view left position. This position is relative to the view's parent. Can be either a float value or a dimension string ie 'auto' (default), '50%' (iPhone only).
	 * @alias Titanium_UI_CoverFlowView.left
	 * @property {Float,String}
	 */
	this.left = 0.0
	/**
	 * Get the property for the view left position. This position is relative to the view's parent. Can be either a float value or a dimension string ie 'auto' (default), '50%' (iPhone only).
	 * @alias Titanium_UI_CoverFlowView.getLeft
	 * @return {Float,String}
	 */
	this.getLeft = function() { return this.left; }
	/**
	 * Set the property for the view left position. This position is relative to the view's parent. Can be either a float value or a dimension string ie 'auto' (default), '50%' (iPhone only).
	 * @param {Float,String} value New value to set.
	 * @alias Titanium_UI_CoverFlowView.setLeft
	 */
	this.setLeft = function(value) { this.left = value; }
	/**
	 * the opacity from 0.0-1.0
	 * @alias Titanium_UI_CoverFlowView.opacity
	 * @property {Float}
	 */
	this.opacity = 0.0
	/**
	 * Get the the opacity from 0.0-1.0
	 * @alias Titanium_UI_CoverFlowView.getOpacity
	 * @return {Float}
	 */
	this.getOpacity = function() { return this.opacity; }
	/**
	 * Set the the opacity from 0.0-1.0
	 * @param {Float} value New value to set.
	 * @alias Titanium_UI_CoverFlowView.setOpacity
	 */
	this.setOpacity = function(value) { this.opacity = value; }
	/**
	 * property for the view right position. This position is relative to the view's parent. Can be either a float value or a dimension string ie 'auto' (default), '50%' (iPhone only).
	 * @alias Titanium_UI_CoverFlowView.right
	 * @property {Float,String}
	 */
	this.right = 0.0
	/**
	 * Get the property for the view right position. This position is relative to the view's parent. Can be either a float value or a dimension string ie 'auto' (default), '50%' (iPhone only).
	 * @alias Titanium_UI_CoverFlowView.getRight
	 * @return {Float,String}
	 */
	this.getRight = function() { return this.right; }
	/**
	 * Set the property for the view right position. This position is relative to the view's parent. Can be either a float value or a dimension string ie 'auto' (default), '50%' (iPhone only).
	 * @param {Float,String} value New value to set.
	 * @alias Titanium_UI_CoverFlowView.setRight
	 */
	this.setRight = function(value) { this.right = value; }
	/**
	 * index to make selected
	 * @alias Titanium_UI_CoverFlowView.selected
	 * @property {Integer}
	 */
	this.selected = 0
	/**
	 * Get the index to make selected
	 * @alias Titanium_UI_CoverFlowView.getSelected
	 * @return {Integer}
	 */
	this.getSelected = function() { return this.selected; }
	/**
	 * Set the index to make selected
	 * @param {Integer} value New value to set.
	 * @alias Titanium_UI_CoverFlowView.setSelected
	 */
	this.setSelected = function(value) { this.selected = value; }
	/**
	 * the size of the view as a dictionary of width and height properties
	 * @alias Titanium_UI_CoverFlowView.size
	 * @property {Object}
	 */
	this.size = {}
	/**
	 * Get the the size of the view as a dictionary of width and height properties
	 * @alias Titanium_UI_CoverFlowView.getSize
	 * @return {Object}
	 */
	this.getSize = function() { return this.size; }
	/**
	 * Set the the size of the view as a dictionary of width and height properties
	 * @param {Object} value New value to set.
	 * @alias Titanium_UI_CoverFlowView.setSize
	 */
	this.setSize = function(value) { this.size = value; }
	/**
	 * One of Titanium.UI.Android.SOFT_KEYBOARD_DEFAULT_ON_FOCUS, Titanium.UI.Android.SOFT_KEYBOARD_HIDE_ON_FOCUS, or Titanium.UI.Android.SOFT_KEYBOARD_SHOW_ON_FOCUS. (Android only)
	 * @alias Titanium_UI_CoverFlowView.softKeyboardOnFocus
	 * @property {Integer}
	 */
	this.softKeyboardOnFocus = 0
	/**
	 * Get the One of Titanium.UI.Android.SOFT_KEYBOARD_DEFAULT_ON_FOCUS, Titanium.UI.Android.SOFT_KEYBOARD_HIDE_ON_FOCUS, or Titanium.UI.Android.SOFT_KEYBOARD_SHOW_ON_FOCUS. (Android only)
	 * @alias Titanium_UI_CoverFlowView.getSoftKeyboardOnFocus
	 * @return {Integer}
	 */
	this.getSoftKeyboardOnFocus = function() { return this.softKeyboardOnFocus; }
	/**
	 * Set the One of Titanium.UI.Android.SOFT_KEYBOARD_DEFAULT_ON_FOCUS, Titanium.UI.Android.SOFT_KEYBOARD_HIDE_ON_FOCUS, or Titanium.UI.Android.SOFT_KEYBOARD_SHOW_ON_FOCUS. (Android only)
	 * @param {Integer} value New value to set.
	 * @alias Titanium_UI_CoverFlowView.setSoftKeyboardOnFocus
	 */
	this.setSoftKeyboardOnFocus = function(value) { this.softKeyboardOnFocus = value; }
	/**
	 * property for the view top position. This position is relative to the view's parent. Can be either a float value or a dimension string ie 'auto' (default), '50%' (iPhone only).
	 * @alias Titanium_UI_CoverFlowView.top
	 * @property {Float,String}
	 */
	this.top = 0.0
	/**
	 * Get the property for the view top position. This position is relative to the view's parent. Can be either a float value or a dimension string ie 'auto' (default), '50%' (iPhone only).
	 * @alias Titanium_UI_CoverFlowView.getTop
	 * @return {Float,String}
	 */
	this.getTop = function() { return this.top; }
	/**
	 * Set the property for the view top position. This position is relative to the view's parent. Can be either a float value or a dimension string ie 'auto' (default), '50%' (iPhone only).
	 * @param {Float,String} value New value to set.
	 * @alias Titanium_UI_CoverFlowView.setTop
	 */
	this.setTop = function(value) { this.top = value; }
	/**
	 * a boolean indicating if the view should receive touch events (true, default) or forward them to peers (false)
	 * @alias Titanium_UI_CoverFlowView.touchEnabled
	 * @property {Boolean}
	 */
	this.touchEnabled = false
	/**
	 * Get the a boolean indicating if the view should receive touch events (true, default) or forward them to peers (false)
	 * @alias Titanium_UI_CoverFlowView.getTouchEnabled
	 * @return {Boolean}
	 */
	this.getTouchEnabled = function() { return this.touchEnabled; }
	/**
	 * Set the a boolean indicating if the view should receive touch events (true, default) or forward them to peers (false)
	 * @param {Boolean} value New value to set.
	 * @alias Titanium_UI_CoverFlowView.setTouchEnabled
	 */
	this.setTouchEnabled = function(value) { this.touchEnabled = value; }
	/**
	 * the transformation matrix to apply to the view
	 * @alias Titanium_UI_CoverFlowView.transform
	 * @property {Object}
	 */
	this.transform = {}
	/**
	 * Get the the transformation matrix to apply to the view
	 * @alias Titanium_UI_CoverFlowView.getTransform
	 * @return {Object}
	 */
	this.getTransform = function() { return this.transform; }
	/**
	 * Set the the transformation matrix to apply to the view
	 * @param {Object} value New value to set.
	 * @alias Titanium_UI_CoverFlowView.setTransform
	 */
	this.setTransform = function(value) { this.transform = value; }
	/**
	 * a boolean of the visibility of the view
	 * @alias Titanium_UI_CoverFlowView.visible
	 * @property {Boolean}
	 */
	this.visible = false
	/**
	 * Get the a boolean of the visibility of the view
	 * @alias Titanium_UI_CoverFlowView.getVisible
	 * @return {Boolean}
	 */
	this.getVisible = function() { return this.visible; }
	/**
	 * Set the a boolean of the visibility of the view
	 * @param {Boolean} value New value to set.
	 * @alias Titanium_UI_CoverFlowView.setVisible
	 */
	this.setVisible = function(value) { this.visible = value; }
	/**
	 * property for the view width. Can be either a float value or a dimension string ie 'auto' (default), '50%' (iPhone only).
	 * @alias Titanium_UI_CoverFlowView.width
	 * @property {Float,String}
	 */
	this.width = 0.0
	/**
	 * Get the property for the view width. Can be either a float value or a dimension string ie 'auto' (default), '50%' (iPhone only).
	 * @alias Titanium_UI_CoverFlowView.getWidth
	 * @return {Float,String}
	 */
	this.getWidth = function() { return this.width; }
	/**
	 * Set the property for the view width. Can be either a float value or a dimension string ie 'auto' (default), '50%' (iPhone only).
	 * @param {Float,String} value New value to set.
	 * @alias Titanium_UI_CoverFlowView.setWidth
	 */
	this.setWidth = function(value) { this.width = value; }
	/**
	 * the z index position relative to other sibling views
	 * @alias Titanium_UI_CoverFlowView.zIndex
	 * @property {Integer}
	 */
	this.zIndex = 0
	/**
	 * Get the the z index position relative to other sibling views
	 * @alias Titanium_UI_CoverFlowView.getZIndex
	 * @return {Integer}
	 */
	this.getZIndex = function() { return this.zIndex; }
	/**
	 * Set the the z index position relative to other sibling views
	 * @param {Integer} value New value to set.
	 * @alias Titanium_UI_CoverFlowView.setZIndex
	 */
	this.setZIndex = function(value) { this.zIndex = value; }
	/**
	 * add a child to the view hierarchy
	 * @param {Object} view the view to add to this views hiearchy
	 * @alias Titanium_UI_CoverFlowView.add
	 */
	this.add = function add(view) { }
	/**
	 * add an event listener for the instance to receive view triggered events
	 * @param {String} name name of the event
	 * @param {Function} callback callback function to invoke when the event is fired
	 * @alias Titanium_UI_CoverFlowView.addEventListener
	 */
	this.addEventListener = function addEventListener(name,callback) { }
	/**
	 * animate the view
	 * @param {Object} obj either a dictionary of animation properties or an Animation object
	 * @param {Function} callback function to be invoked upon completion of the animation
	 * @alias Titanium_UI_CoverFlowView.animate
	 */
	this.animate = function animate(obj,callback) { }
	/**
	 * fire a synthesized event to the views listener
	 * @param {String} name name of the event
	 * @param {Object} event event object
	 * @alias Titanium_UI_CoverFlowView.fireEvent
	 */
	this.fireEvent = function fireEvent(name,event) { }
	/**
	 * hide the view
	 * @alias Titanium_UI_CoverFlowView.hide
	 */
	this.hide = function hide() { }
	/**
	 * remove a previously add view from the view hiearchy
	 * @param {Object} view the view to remove from this views hiearchy
	 * @alias Titanium_UI_CoverFlowView.remove
	 */
	this.remove = function remove(view) { }
	/**
	 * remove a previously added event listener
	 * @param {String} name name of the event
	 * @param {Function} callback callback function passed in addEventListener
	 * @alias Titanium_UI_CoverFlowView.removeEventListener
	 */
	this.removeEventListener = function removeEventListener(name,callback) { }
	/**
	 * change an image for a index
	 * @param {Integer} index index to change
	 * @param {Object} image the image to set the index to. May be a TiBlob, TiFile, URL, or dictionary with 'image' (may be any of TiBlob, TiFile, URL), 'width', 'height' keys.  'auto' is not allowed, only exact sizes (although a size may be omitted to keep the image at that size).  If passed as a TiFile or URL, will perform a check for '@2x' on Retina displays
	 * @alias Titanium_UI_CoverFlowView.setImage
	 */
	this.setImage = function setImage(index,image) { }
	/**
	 * make the view visible
	 * @alias Titanium_UI_CoverFlowView.show
	 */
	this.show = function show() { }
	/**
	 * return a Blob image of the rendered view
	 * @param {Function} f function to be invoked upon completion. if non-null, this method will be performed asynchronously. if null, it will be performed immediately
	 * @alias Titanium_UI_CoverFlowView.toImage
	 * @return {Object}
	 */
	this.toImage = function toImage(f) { return {}; }
};

/**
 * An item that represents a visual icon in the Titanium.UI.DashboardView. The Dashboard Item is created by the method Titanium.UI.createDashboardItem.
 * @since 1.2
 */
function Titanium_UI_DashboardItem() {
	/**
	 * the badge value or 0 to remove the badge
	 * @alias Titanium_UI_DashboardItem.badge
	 * @property {Integer}
	 */
	this.badge = 0
	/**
	 * Get the the badge value or 0 to remove the badge
	 * @alias Titanium_UI_DashboardItem.getBadge
	 * @return {Integer}
	 */
	this.getBadge = function() { return this.badge; }
	/**
	 * Set the the badge value or 0 to remove the badge
	 * @param {Integer} value New value to set.
	 * @alias Titanium_UI_DashboardItem.setBadge
	 */
	this.setBadge = function(value) { this.badge = value; }
	/**
	 * a boolean to indicate if this item can be deleted when it edit mode
	 * @alias Titanium_UI_DashboardItem.canDelete
	 * @property {Boolean}
	 */
	this.canDelete = false
	/**
	 * Get the a boolean to indicate if this item can be deleted when it edit mode
	 * @alias Titanium_UI_DashboardItem.getCanDelete
	 * @return {Boolean}
	 */
	this.getCanDelete = function() { return this.canDelete; }
	/**
	 * Set the a boolean to indicate if this item can be deleted when it edit mode
	 * @param {Boolean} value New value to set.
	 * @alias Titanium_UI_DashboardItem.setCanDelete
	 */
	this.setCanDelete = function(value) { this.canDelete = value; }
	/**
	 * the URL to the image
	 * @alias Titanium_UI_DashboardItem.image
	 * @property {String}
	 */
	this.image = ''
	/**
	 * Get the the URL to the image
	 * @alias Titanium_UI_DashboardItem.getImage
	 * @return {String}
	 */
	this.getImage = function() { return this.image; }
	/**
	 * Set the the URL to the image
	 * @param {String} value New value to set.
	 * @alias Titanium_UI_DashboardItem.setImage
	 */
	this.setImage = function(value) { this.image = value; }
	/**
	 * the URL to the image to display when the item is depressed (clicked)
	 * @alias Titanium_UI_DashboardItem.selectedImage
	 * @property {String}
	 */
	this.selectedImage = ''
	/**
	 * Get the the URL to the image to display when the item is depressed (clicked)
	 * @alias Titanium_UI_DashboardItem.getSelectedImage
	 * @return {String}
	 */
	this.getSelectedImage = function() { return this.selectedImage; }
	/**
	 * Set the the URL to the image to display when the item is depressed (clicked)
	 * @param {String} value New value to set.
	 * @alias Titanium_UI_DashboardItem.setSelectedImage
	 */
	this.setSelectedImage = function(value) { this.selectedImage = value; }
	/**
	 * add an event listener for the instance to receive view triggered events
	 * @param {String} name name of the event
	 * @param {Function} callback callback function to invoke when the event is fired
	 * @alias Titanium_UI_DashboardItem.addEventListener
	 */
	this.addEventListener = function addEventListener(name,callback) { }
	/**
	 * fire a synthesized event to the views listener
	 * @param {String} name name of the event
	 * @param {Object} event event object
	 * @alias Titanium_UI_DashboardItem.fireEvent
	 */
	this.fireEvent = function fireEvent(name,event) { }
	/**
	 * remove a previously added event listener
	 * @param {String} name name of the event
	 * @param {Function} callback callback function passed in addEventListener
	 * @alias Titanium_UI_DashboardItem.removeEventListener
	 */
	this.removeEventListener = function removeEventListener(name,callback) { }
};

/**
 * The Dashboard View provides a view that supports the ability to have Springboard-like view of icons which can be reordered by dragging and can contain multiple pages of icons in a scrollable view. The Dashboard View is created by the method Titanium.UI.createDashboardView.
 * @since 1.2
 */
function Titanium_UI_DashboardView() {
	/**
	 * a dictionary with properties x and y to indicate the anchor point value. anchor specifies the position by which animation should occur. center is 0.5, 0.5
	 * @alias Titanium_UI_DashboardView.anchorPoint
	 * @property {Object}
	 */
	this.anchorPoint = {}
	/**
	 * Get the a dictionary with properties x and y to indicate the anchor point value. anchor specifies the position by which animation should occur. center is 0.5, 0.5
	 * @alias Titanium_UI_DashboardView.getAnchorPoint
	 * @return {Object}
	 */
	this.getAnchorPoint = function() { return this.anchorPoint; }
	/**
	 * Set the a dictionary with properties x and y to indicate the anchor point value. anchor specifies the position by which animation should occur. center is 0.5, 0.5
	 * @param {Object} value New value to set.
	 * @alias Titanium_UI_DashboardView.setAnchorPoint
	 */
	this.setAnchorPoint = function(value) { this.anchorPoint = value; }
	/**
	 * read-only object with x and y properties of where the view is during animation
	 * @alias Titanium_UI_DashboardView.animatedCenterPoint
	 * @property {Object}
	 */
	this.animatedCenterPoint = {}
	/**
	 * Get the read-only object with x and y properties of where the view is during animation
	 * @alias Titanium_UI_DashboardView.getAnimatedCenterPoint
	 * @return {Object}
	 */
	this.getAnimatedCenterPoint = function() { return this.animatedCenterPoint; }
	/**
	 * Set the read-only object with x and y properties of where the view is during animation
	 * @param {Object} value New value to set.
	 * @alias Titanium_UI_DashboardView.setAnimatedCenterPoint
	 */
	this.setAnimatedCenterPoint = function(value) { this.animatedCenterPoint = value; }
	/**
	 * the background color of the view
	 * @alias Titanium_UI_DashboardView.backgroundColor
	 * @property {String}
	 */
	this.backgroundColor = ''
	/**
	 * Get the the background color of the view
	 * @alias Titanium_UI_DashboardView.getBackgroundColor
	 * @return {String}
	 */
	this.getBackgroundColor = function() { return this.backgroundColor; }
	/**
	 * Set the the background color of the view
	 * @param {String} value New value to set.
	 * @alias Titanium_UI_DashboardView.setBackgroundColor
	 */
	this.setBackgroundColor = function(value) { this.backgroundColor = value; }
	/**
	 * the disabled background color of the view. (Android)
	 * @alias Titanium_UI_DashboardView.backgroundDisabledColor
	 * @property {String}
	 */
	this.backgroundDisabledColor = ''
	/**
	 * Get the the disabled background color of the view. (Android)
	 * @alias Titanium_UI_DashboardView.getBackgroundDisabledColor
	 * @return {String}
	 */
	this.getBackgroundDisabledColor = function() { return this.backgroundDisabledColor; }
	/**
	 * Set the the disabled background color of the view. (Android)
	 * @param {String} value New value to set.
	 * @alias Titanium_UI_DashboardView.setBackgroundDisabledColor
	 */
	this.setBackgroundDisabledColor = function(value) { this.backgroundDisabledColor = value; }
	/**
	 * the disabled background image url of the view. (Android)
	 * @alias Titanium_UI_DashboardView.backgroundDisabledImage
	 * @property {String}
	 */
	this.backgroundDisabledImage = ''
	/**
	 * Get the the disabled background image url of the view. (Android)
	 * @alias Titanium_UI_DashboardView.getBackgroundDisabledImage
	 * @return {String}
	 */
	this.getBackgroundDisabledImage = function() { return this.backgroundDisabledImage; }
	/**
	 * Set the the disabled background image url of the view. (Android)
	 * @param {String} value New value to set.
	 * @alias Titanium_UI_DashboardView.setBackgroundDisabledImage
	 */
	this.setBackgroundDisabledImage = function(value) { this.backgroundDisabledImage = value; }
	/**
	 * the focused background color of the view. focusable must be true for normal views. (Android)
	 * @alias Titanium_UI_DashboardView.backgroundFocusedColor
	 * @property {String}
	 */
	this.backgroundFocusedColor = ''
	/**
	 * Get the the focused background color of the view. focusable must be true for normal views. (Android)
	 * @alias Titanium_UI_DashboardView.getBackgroundFocusedColor
	 * @return {String}
	 */
	this.getBackgroundFocusedColor = function() { return this.backgroundFocusedColor; }
	/**
	 * Set the the focused background color of the view. focusable must be true for normal views. (Android)
	 * @param {String} value New value to set.
	 * @alias Titanium_UI_DashboardView.setBackgroundFocusedColor
	 */
	this.setBackgroundFocusedColor = function(value) { this.backgroundFocusedColor = value; }
	/**
	 * the focused background image url of the view. focusable must be true for normal views. (Android)
	 * @alias Titanium_UI_DashboardView.backgroundFocusedImage
	 * @property {String}
	 */
	this.backgroundFocusedImage = ''
	/**
	 * Get the the focused background image url of the view. focusable must be true for normal views. (Android)
	 * @alias Titanium_UI_DashboardView.getBackgroundFocusedImage
	 * @return {String}
	 */
	this.getBackgroundFocusedImage = function() { return this.backgroundFocusedImage; }
	/**
	 * Set the the focused background image url of the view. focusable must be true for normal views. (Android)
	 * @param {String} value New value to set.
	 * @alias Titanium_UI_DashboardView.setBackgroundFocusedImage
	 */
	this.setBackgroundFocusedImage = function(value) { this.backgroundFocusedImage = value; }
	/**
	 * a background gradient for the view with the properties: type,startPoint,endPoint,startRadius,endRadius,backfillStart,backfillEnd,colors.
	 * @alias Titanium_UI_DashboardView.backgroundGradient
	 * @property {Object}
	 */
	this.backgroundGradient = {}
	/**
	 * Get the a background gradient for the view with the properties: type,startPoint,endPoint,startRadius,endRadius,backfillStart,backfillEnd,colors.
	 * @alias Titanium_UI_DashboardView.getBackgroundGradient
	 * @return {Object}
	 */
	this.getBackgroundGradient = function() { return this.backgroundGradient; }
	/**
	 * Set the a background gradient for the view with the properties: type,startPoint,endPoint,startRadius,endRadius,backfillStart,backfillEnd,colors.
	 * @param {Object} value New value to set.
	 * @alias Titanium_UI_DashboardView.setBackgroundGradient
	 */
	this.setBackgroundGradient = function(value) { this.backgroundGradient = value; }
	/**
	 * the background image url of the view
	 * @alias Titanium_UI_DashboardView.backgroundImage
	 * @property {String}
	 */
	this.backgroundImage = ''
	/**
	 * Get the the background image url of the view
	 * @alias Titanium_UI_DashboardView.getBackgroundImage
	 * @return {String}
	 */
	this.getBackgroundImage = function() { return this.backgroundImage; }
	/**
	 * Set the the background image url of the view
	 * @param {String} value New value to set.
	 * @alias Titanium_UI_DashboardView.setBackgroundImage
	 */
	this.setBackgroundImage = function(value) { this.backgroundImage = value; }
	/**
	 * End caps specify the portion of an image that should not be resized when an image is stretched. This technique is used to implement buttons and other resizable image-based interface elements. When a button with end caps is resized, the resizing occurs only in the middle of the button, in the region between the end caps. The end caps themselves keep their original size and appearance. This property specifies the size of the left end cap. The middle (stretchable) portion is assumed to be 1 pixel wide. The right end cap is therefore computed by adding the size of the left end cap and the middle portion together and then subtracting that value from the width of the image
	 * @alias Titanium_UI_DashboardView.backgroundLeftCap
	 * @property {Float}
	 */
	this.backgroundLeftCap = 0.0
	/**
	 * Get the End caps specify the portion of an image that should not be resized when an image is stretched. This technique is used to implement buttons and other resizable image-based interface elements. When a button with end caps is resized, the resizing occurs only in the middle of the button, in the region between the end caps. The end caps themselves keep their original size and appearance. This property specifies the size of the left end cap. The middle (stretchable) portion is assumed to be 1 pixel wide. The right end cap is therefore computed by adding the size of the left end cap and the middle portion together and then subtracting that value from the width of the image
	 * @alias Titanium_UI_DashboardView.getBackgroundLeftCap
	 * @return {Float}
	 */
	this.getBackgroundLeftCap = function() { return this.backgroundLeftCap; }
	/**
	 * Set the End caps specify the portion of an image that should not be resized when an image is stretched. This technique is used to implement buttons and other resizable image-based interface elements. When a button with end caps is resized, the resizing occurs only in the middle of the button, in the region between the end caps. The end caps themselves keep their original size and appearance. This property specifies the size of the left end cap. The middle (stretchable) portion is assumed to be 1 pixel wide. The right end cap is therefore computed by adding the size of the left end cap and the middle portion together and then subtracting that value from the width of the image
	 * @param {Float} value New value to set.
	 * @alias Titanium_UI_DashboardView.setBackgroundLeftCap
	 */
	this.setBackgroundLeftCap = function(value) { this.backgroundLeftCap = value; }
	/**
	 * the selected background color of the view. focusable must be true for normal views. (Android)
	 * @alias Titanium_UI_DashboardView.backgroundSelectedColor
	 * @property {String}
	 */
	this.backgroundSelectedColor = ''
	/**
	 * Get the the selected background color of the view. focusable must be true for normal views. (Android)
	 * @alias Titanium_UI_DashboardView.getBackgroundSelectedColor
	 * @return {String}
	 */
	this.getBackgroundSelectedColor = function() { return this.backgroundSelectedColor; }
	/**
	 * Set the the selected background color of the view. focusable must be true for normal views. (Android)
	 * @param {String} value New value to set.
	 * @alias Titanium_UI_DashboardView.setBackgroundSelectedColor
	 */
	this.setBackgroundSelectedColor = function(value) { this.backgroundSelectedColor = value; }
	/**
	 * the selected background image url of the view. focusable must be true for normal views. (Android)
	 * @alias Titanium_UI_DashboardView.backgroundSelectedImage
	 * @property {String}
	 */
	this.backgroundSelectedImage = ''
	/**
	 * Get the the selected background image url of the view. focusable must be true for normal views. (Android)
	 * @alias Titanium_UI_DashboardView.getBackgroundSelectedImage
	 * @return {String}
	 */
	this.getBackgroundSelectedImage = function() { return this.backgroundSelectedImage; }
	/**
	 * Set the the selected background image url of the view. focusable must be true for normal views. (Android)
	 * @param {String} value New value to set.
	 * @alias Titanium_UI_DashboardView.setBackgroundSelectedImage
	 */
	this.setBackgroundSelectedImage = function(value) { this.backgroundSelectedImage = value; }
	/**
	 * End caps specify the portion of an image that should not be resized when an image is stretched. This technique is used to implement buttons and other resizable image-based interface elements. When a button with end caps is resized, the resizing occurs only in the middle of the button, in the region between the end caps. The end caps themselves keep their original size and appearance. This property specifies the size of the top end cap. The middle (stretchable) portion is assumed to be 1 pixel wide. The bottom end cap is therefore computed by adding the size of the top end cap and the middle portion together and then subtracting that value from the height of the image
	 * @alias Titanium_UI_DashboardView.backgroundTopCap
	 * @property {Float}
	 */
	this.backgroundTopCap = 0.0
	/**
	 * Get the End caps specify the portion of an image that should not be resized when an image is stretched. This technique is used to implement buttons and other resizable image-based interface elements. When a button with end caps is resized, the resizing occurs only in the middle of the button, in the region between the end caps. The end caps themselves keep their original size and appearance. This property specifies the size of the top end cap. The middle (stretchable) portion is assumed to be 1 pixel wide. The bottom end cap is therefore computed by adding the size of the top end cap and the middle portion together and then subtracting that value from the height of the image
	 * @alias Titanium_UI_DashboardView.getBackgroundTopCap
	 * @return {Float}
	 */
	this.getBackgroundTopCap = function() { return this.backgroundTopCap; }
	/**
	 * Set the End caps specify the portion of an image that should not be resized when an image is stretched. This technique is used to implement buttons and other resizable image-based interface elements. When a button with end caps is resized, the resizing occurs only in the middle of the button, in the region between the end caps. The end caps themselves keep their original size and appearance. This property specifies the size of the top end cap. The middle (stretchable) portion is assumed to be 1 pixel wide. The bottom end cap is therefore computed by adding the size of the top end cap and the middle portion together and then subtracting that value from the height of the image
	 * @param {Float} value New value to set.
	 * @alias Titanium_UI_DashboardView.setBackgroundTopCap
	 */
	this.setBackgroundTopCap = function(value) { this.backgroundTopCap = value; }
	/**
	 * the border color of the view
	 * @alias Titanium_UI_DashboardView.borderColor
	 * @property {String}
	 */
	this.borderColor = ''
	/**
	 * Get the the border color of the view
	 * @alias Titanium_UI_DashboardView.getBorderColor
	 * @return {String}
	 */
	this.getBorderColor = function() { return this.borderColor; }
	/**
	 * Set the the border color of the view
	 * @param {String} value New value to set.
	 * @alias Titanium_UI_DashboardView.setBorderColor
	 */
	this.setBorderColor = function(value) { this.borderColor = value; }
	/**
	 * the border radius of the view
	 * @alias Titanium_UI_DashboardView.borderRadius
	 * @property {Float}
	 */
	this.borderRadius = 0.0
	/**
	 * Get the the border radius of the view
	 * @alias Titanium_UI_DashboardView.getBorderRadius
	 * @return {Float}
	 */
	this.getBorderRadius = function() { return this.borderRadius; }
	/**
	 * Set the the border radius of the view
	 * @param {Float} value New value to set.
	 * @alias Titanium_UI_DashboardView.setBorderRadius
	 */
	this.setBorderRadius = function(value) { this.borderRadius = value; }
	/**
	 * the border width of the view
	 * @alias Titanium_UI_DashboardView.borderWidth
	 * @property {Float}
	 */
	this.borderWidth = 0.0
	/**
	 * Get the the border width of the view
	 * @alias Titanium_UI_DashboardView.getBorderWidth
	 * @return {Float}
	 */
	this.getBorderWidth = function() { return this.borderWidth; }
	/**
	 * Set the the border width of the view
	 * @param {Float} value New value to set.
	 * @alias Titanium_UI_DashboardView.setBorderWidth
	 */
	this.setBorderWidth = function(value) { this.borderWidth = value; }
	/**
	 * property for the view bottom position. This position is relative to the view's parent. Can be either a float value or a dimension string ie 'auto' (default), '50%' (iPhone only).
	 * @alias Titanium_UI_DashboardView.bottom
	 * @property {Float,String}
	 */
	this.bottom = 0.0
	/**
	 * Get the property for the view bottom position. This position is relative to the view's parent. Can be either a float value or a dimension string ie 'auto' (default), '50%' (iPhone only).
	 * @alias Titanium_UI_DashboardView.getBottom
	 * @return {Float,String}
	 */
	this.getBottom = function() { return this.bottom; }
	/**
	 * Set the property for the view bottom position. This position is relative to the view's parent. Can be either a float value or a dimension string ie 'auto' (default), '50%' (iPhone only).
	 * @param {Float,String} value New value to set.
	 * @alias Titanium_UI_DashboardView.setBottom
	 */
	this.setBottom = function(value) { this.bottom = value; }
	/**
	 * a dictionary with properties x and y to indicate the center of the views position relative to the parent view
	 * @alias Titanium_UI_DashboardView.center
	 * @property {Object}
	 */
	this.center = {}
	/**
	 * Get the a dictionary with properties x and y to indicate the center of the views position relative to the parent view
	 * @alias Titanium_UI_DashboardView.getCenter
	 * @return {Object}
	 */
	this.getCenter = function() { return this.center; }
	/**
	 * Set the a dictionary with properties x and y to indicate the center of the views position relative to the parent view
	 * @param {Object} value New value to set.
	 * @alias Titanium_UI_DashboardView.setCenter
	 */
	this.setCenter = function(value) { this.center = value; }
	/**
	 * an array of Titanium.UI.DashboardItem objects to display in the view
	 * @alias Titanium_UI_DashboardView.data
	 * @property {Array}
	 */
	this.data = []
	/**
	 * Get the an array of Titanium.UI.DashboardItem objects to display in the view
	 * @alias Titanium_UI_DashboardView.getData
	 * @return {Array}
	 */
	this.getData = function() { return this.data; }
	/**
	 * Set the an array of Titanium.UI.DashboardItem objects to display in the view
	 * @param {Array} value New value to set.
	 * @alias Titanium_UI_DashboardView.setData
	 */
	this.setData = function(value) { this.data = value; }
	/**
	 * Set true if you want a view to be focusable when navigating with the trackball or D-Pad. Default: false. (Android Only)
	 * @alias Titanium_UI_DashboardView.focusable
	 * @property {Boolean}
	 */
	this.focusable = false
	/**
	 * Get the Set true if you want a view to be focusable when navigating with the trackball or D-Pad. Default: false. (Android Only)
	 * @alias Titanium_UI_DashboardView.getFocusable
	 * @return {Boolean}
	 */
	this.getFocusable = function() { return this.focusable; }
	/**
	 * Set the Set true if you want a view to be focusable when navigating with the trackball or D-Pad. Default: false. (Android Only)
	 * @param {Boolean} value New value to set.
	 * @alias Titanium_UI_DashboardView.setFocusable
	 */
	this.setFocusable = function(value) { this.focusable = value; }
	/**
	 * the font family
	 * @alias Titanium_UI_DashboardView.font-family
	 * @property {String}
	 */
	this.font-family = ''
	/**
	 * Get the the font family
	 * @alias Titanium_UI_DashboardView.getFont-family
	 * @return {String}
	 */
	this.getFont-family = function() { return this.font-family; }
	/**
	 * Set the the font family
	 * @param {String} value New value to set.
	 * @alias Titanium_UI_DashboardView.setFont-family
	 */
	this.setFont-family = function(value) { this.font-family = value; }
	/**
	 * the font size
	 * @alias Titanium_UI_DashboardView.font-size
	 * @property {String}
	 */
	this.font-size = ''
	/**
	 * Get the the font size
	 * @alias Titanium_UI_DashboardView.getFont-size
	 * @return {String}
	 */
	this.getFont-size = function() { return this.font-size; }
	/**
	 * Set the the font size
	 * @param {String} value New value to set.
	 * @alias Titanium_UI_DashboardView.setFont-size
	 */
	this.setFont-size = function(value) { this.font-size = value; }
	/**
	 * the font style, either normal or italics
	 * @alias Titanium_UI_DashboardView.font-style
	 * @property {String}
	 */
	this.font-style = ''
	/**
	 * Get the the font style, either normal or italics
	 * @alias Titanium_UI_DashboardView.getFont-style
	 * @return {String}
	 */
	this.getFont-style = function() { return this.font-style; }
	/**
	 * Set the the font style, either normal or italics
	 * @param {String} value New value to set.
	 * @alias Titanium_UI_DashboardView.setFont-style
	 */
	this.setFont-style = function(value) { this.font-style = value; }
	/**
	 * the font weight, either normal or bold
	 * @alias Titanium_UI_DashboardView.font-weight
	 * @property {String}
	 */
	this.font-weight = ''
	/**
	 * Get the the font weight, either normal or bold
	 * @alias Titanium_UI_DashboardView.getFont-weight
	 * @return {String}
	 */
	this.getFont-weight = function() { return this.font-weight; }
	/**
	 * Set the the font weight, either normal or bold
	 * @param {String} value New value to set.
	 * @alias Titanium_UI_DashboardView.setFont-weight
	 */
	this.setFont-weight = function(value) { this.font-weight = value; }
	/**
	 * property for the view height. Can be either a float value or a dimension string ie 'auto' (default), '50%' (iPhone only).
	 * @alias Titanium_UI_DashboardView.height
	 * @property {Float,String}
	 */
	this.height = 0.0
	/**
	 * Get the property for the view height. Can be either a float value or a dimension string ie 'auto' (default), '50%' (iPhone only).
	 * @alias Titanium_UI_DashboardView.getHeight
	 * @return {Float,String}
	 */
	this.getHeight = function() { return this.height; }
	/**
	 * Set the property for the view height. Can be either a float value or a dimension string ie 'auto' (default), '50%' (iPhone only).
	 * @param {Float,String} value New value to set.
	 * @alias Titanium_UI_DashboardView.setHeight
	 */
	this.setHeight = function(value) { this.height = value; }
	/**
	 * property for the view left position. This position is relative to the view's parent. Can be either a float value or a dimension string ie 'auto' (default), '50%' (iPhone only).
	 * @alias Titanium_UI_DashboardView.left
	 * @property {Float,String}
	 */
	this.left = 0.0
	/**
	 * Get the property for the view left position. This position is relative to the view's parent. Can be either a float value or a dimension string ie 'auto' (default), '50%' (iPhone only).
	 * @alias Titanium_UI_DashboardView.getLeft
	 * @return {Float,String}
	 */
	this.getLeft = function() { return this.left; }
	/**
	 * Set the property for the view left position. This position is relative to the view's parent. Can be either a float value or a dimension string ie 'auto' (default), '50%' (iPhone only).
	 * @param {Float,String} value New value to set.
	 * @alias Titanium_UI_DashboardView.setLeft
	 */
	this.setLeft = function(value) { this.left = value; }
	/**
	 * the opacity from 0.0-1.0
	 * @alias Titanium_UI_DashboardView.opacity
	 * @property {Float}
	 */
	this.opacity = 0.0
	/**
	 * Get the the opacity from 0.0-1.0
	 * @alias Titanium_UI_DashboardView.getOpacity
	 * @return {Float}
	 */
	this.getOpacity = function() { return this.opacity; }
	/**
	 * Set the the opacity from 0.0-1.0
	 * @param {Float} value New value to set.
	 * @alias Titanium_UI_DashboardView.setOpacity
	 */
	this.setOpacity = function(value) { this.opacity = value; }
	/**
	 * property for the view right position. This position is relative to the view's parent. Can be either a float value or a dimension string ie 'auto' (default), '50%' (iPhone only).
	 * @alias Titanium_UI_DashboardView.right
	 * @property {Float,String}
	 */
	this.right = 0.0
	/**
	 * Get the property for the view right position. This position is relative to the view's parent. Can be either a float value or a dimension string ie 'auto' (default), '50%' (iPhone only).
	 * @alias Titanium_UI_DashboardView.getRight
	 * @return {Float,String}
	 */
	this.getRight = function() { return this.right; }
	/**
	 * Set the property for the view right position. This position is relative to the view's parent. Can be either a float value or a dimension string ie 'auto' (default), '50%' (iPhone only).
	 * @param {Float,String} value New value to set.
	 * @alias Titanium_UI_DashboardView.setRight
	 */
	this.setRight = function(value) { this.right = value; }
	/**
	 * the size of the view as a dictionary of width and height properties
	 * @alias Titanium_UI_DashboardView.size
	 * @property {Object}
	 */
	this.size = {}
	/**
	 * Get the the size of the view as a dictionary of width and height properties
	 * @alias Titanium_UI_DashboardView.getSize
	 * @return {Object}
	 */
	this.getSize = function() { return this.size; }
	/**
	 * Set the the size of the view as a dictionary of width and height properties
	 * @param {Object} value New value to set.
	 * @alias Titanium_UI_DashboardView.setSize
	 */
	this.setSize = function(value) { this.size = value; }
	/**
	 * One of Titanium.UI.Android.SOFT_KEYBOARD_DEFAULT_ON_FOCUS, Titanium.UI.Android.SOFT_KEYBOARD_HIDE_ON_FOCUS, or Titanium.UI.Android.SOFT_KEYBOARD_SHOW_ON_FOCUS. (Android only)
	 * @alias Titanium_UI_DashboardView.softKeyboardOnFocus
	 * @property {Integer}
	 */
	this.softKeyboardOnFocus = 0
	/**
	 * Get the One of Titanium.UI.Android.SOFT_KEYBOARD_DEFAULT_ON_FOCUS, Titanium.UI.Android.SOFT_KEYBOARD_HIDE_ON_FOCUS, or Titanium.UI.Android.SOFT_KEYBOARD_SHOW_ON_FOCUS. (Android only)
	 * @alias Titanium_UI_DashboardView.getSoftKeyboardOnFocus
	 * @return {Integer}
	 */
	this.getSoftKeyboardOnFocus = function() { return this.softKeyboardOnFocus; }
	/**
	 * Set the One of Titanium.UI.Android.SOFT_KEYBOARD_DEFAULT_ON_FOCUS, Titanium.UI.Android.SOFT_KEYBOARD_HIDE_ON_FOCUS, or Titanium.UI.Android.SOFT_KEYBOARD_SHOW_ON_FOCUS. (Android only)
	 * @param {Integer} value New value to set.
	 * @alias Titanium_UI_DashboardView.setSoftKeyboardOnFocus
	 */
	this.setSoftKeyboardOnFocus = function(value) { this.softKeyboardOnFocus = value; }
	/**
	 * property for the view top position. This position is relative to the view's parent. Can be either a float value or a dimension string ie 'auto' (default), '50%' (iPhone only).
	 * @alias Titanium_UI_DashboardView.top
	 * @property {Float,String}
	 */
	this.top = 0.0
	/**
	 * Get the property for the view top position. This position is relative to the view's parent. Can be either a float value or a dimension string ie 'auto' (default), '50%' (iPhone only).
	 * @alias Titanium_UI_DashboardView.getTop
	 * @return {Float,String}
	 */
	this.getTop = function() { return this.top; }
	/**
	 * Set the property for the view top position. This position is relative to the view's parent. Can be either a float value or a dimension string ie 'auto' (default), '50%' (iPhone only).
	 * @param {Float,String} value New value to set.
	 * @alias Titanium_UI_DashboardView.setTop
	 */
	this.setTop = function(value) { this.top = value; }
	/**
	 * a boolean indicating if the view should receive touch events (true, default) or forward them to peers (false)
	 * @alias Titanium_UI_DashboardView.touchEnabled
	 * @property {Boolean}
	 */
	this.touchEnabled = false
	/**
	 * Get the a boolean indicating if the view should receive touch events (true, default) or forward them to peers (false)
	 * @alias Titanium_UI_DashboardView.getTouchEnabled
	 * @return {Boolean}
	 */
	this.getTouchEnabled = function() { return this.touchEnabled; }
	/**
	 * Set the a boolean indicating if the view should receive touch events (true, default) or forward them to peers (false)
	 * @param {Boolean} value New value to set.
	 * @alias Titanium_UI_DashboardView.setTouchEnabled
	 */
	this.setTouchEnabled = function(value) { this.touchEnabled = value; }
	/**
	 * the transformation matrix to apply to the view
	 * @alias Titanium_UI_DashboardView.transform
	 * @property {Object}
	 */
	this.transform = {}
	/**
	 * Get the the transformation matrix to apply to the view
	 * @alias Titanium_UI_DashboardView.getTransform
	 * @return {Object}
	 */
	this.getTransform = function() { return this.transform; }
	/**
	 * Set the the transformation matrix to apply to the view
	 * @param {Object} value New value to set.
	 * @alias Titanium_UI_DashboardView.setTransform
	 */
	this.setTransform = function(value) { this.transform = value; }
	/**
	 * a boolean of the visibility of the view
	 * @alias Titanium_UI_DashboardView.visible
	 * @property {Boolean}
	 */
	this.visible = false
	/**
	 * Get the a boolean of the visibility of the view
	 * @alias Titanium_UI_DashboardView.getVisible
	 * @return {Boolean}
	 */
	this.getVisible = function() { return this.visible; }
	/**
	 * Set the a boolean of the visibility of the view
	 * @param {Boolean} value New value to set.
	 * @alias Titanium_UI_DashboardView.setVisible
	 */
	this.setVisible = function(value) { this.visible = value; }
	/**
	 * property for the view width. Can be either a float value or a dimension string ie 'auto' (default), '50%' (iPhone only).
	 * @alias Titanium_UI_DashboardView.width
	 * @property {Float,String}
	 */
	this.width = 0.0
	/**
	 * Get the property for the view width. Can be either a float value or a dimension string ie 'auto' (default), '50%' (iPhone only).
	 * @alias Titanium_UI_DashboardView.getWidth
	 * @return {Float,String}
	 */
	this.getWidth = function() { return this.width; }
	/**
	 * Set the property for the view width. Can be either a float value or a dimension string ie 'auto' (default), '50%' (iPhone only).
	 * @param {Float,String} value New value to set.
	 * @alias Titanium_UI_DashboardView.setWidth
	 */
	this.setWidth = function(value) { this.width = value; }
	/**
	 * true (default) to wobble during edit, false to disable wobble effect
	 * @alias Titanium_UI_DashboardView.wobble
	 * @property {Boolean}
	 */
	this.wobble = false
	/**
	 * Get the true (default) to wobble during edit, false to disable wobble effect
	 * @alias Titanium_UI_DashboardView.getWobble
	 * @return {Boolean}
	 */
	this.getWobble = function() { return this.wobble; }
	/**
	 * Set the true (default) to wobble during edit, false to disable wobble effect
	 * @param {Boolean} value New value to set.
	 * @alias Titanium_UI_DashboardView.setWobble
	 */
	this.setWobble = function(value) { this.wobble = value; }
	/**
	 * the z index position relative to other sibling views
	 * @alias Titanium_UI_DashboardView.zIndex
	 * @property {Integer}
	 */
	this.zIndex = 0
	/**
	 * Get the the z index position relative to other sibling views
	 * @alias Titanium_UI_DashboardView.getZIndex
	 * @return {Integer}
	 */
	this.getZIndex = function() { return this.zIndex; }
	/**
	 * Set the the z index position relative to other sibling views
	 * @param {Integer} value New value to set.
	 * @alias Titanium_UI_DashboardView.setZIndex
	 */
	this.setZIndex = function(value) { this.zIndex = value; }
	/**
	 * add a child to the view hierarchy
	 * @param {Object} view the view to add to this views hiearchy
	 * @alias Titanium_UI_DashboardView.add
	 */
	this.add = function add(view) { }
	/**
	 * add an event listener for the instance to receive view triggered events
	 * @param {String} name name of the event
	 * @param {Function} callback callback function to invoke when the event is fired
	 * @alias Titanium_UI_DashboardView.addEventListener
	 */
	this.addEventListener = function addEventListener(name,callback) { }
	/**
	 * animate the view
	 * @param {Object} obj either a dictionary of animation properties or an Animation object
	 * @param {Function} callback function to be invoked upon completion of the animation
	 * @alias Titanium_UI_DashboardView.animate
	 */
	this.animate = function animate(obj,callback) { }
	/**
	 * fire a synthesized event to the views listener
	 * @param {String} name name of the event
	 * @param {Object} event event object
	 * @alias Titanium_UI_DashboardView.fireEvent
	 */
	this.fireEvent = function fireEvent(name,event) { }
	/**
	 * hide the view
	 * @alias Titanium_UI_DashboardView.hide
	 */
	this.hide = function hide() { }
	/**
	 * remove a previously add view from the view hiearchy
	 * @param {Object} view the view to remove from this views hiearchy
	 * @alias Titanium_UI_DashboardView.remove
	 */
	this.remove = function remove(view) { }
	/**
	 * remove a previously added event listener
	 * @param {String} name name of the event
	 * @param {Function} callback callback function passed in addEventListener
	 * @alias Titanium_UI_DashboardView.removeEventListener
	 */
	this.removeEventListener = function removeEventListener(name,callback) { }
	/**
	 * make the view visible
	 * @alias Titanium_UI_DashboardView.show
	 */
	this.show = function show() { }
	/**
	 * put the dashboard in edit mode
	 * @alias Titanium_UI_DashboardView.startEditing
	 */
	this.startEditing = function startEditing() { }
	/**
	 * cancel editing
	 * @alias Titanium_UI_DashboardView.stopEditing
	 */
	this.stopEditing = function stopEditing() { }
	/**
	 * return a Blob image of the rendered view
	 * @param {Function} f function to be invoked upon completion. if non-null, this method will be performed asynchronously. if null, it will be performed immediately
	 * @alias Titanium_UI_DashboardView.toImage
	 * @return {Object}
	 */
	this.toImage = function toImage(f) { return {}; }
};

/**
 * The Email Dialog is created by Titanium.UI.createEmailDialog and allows you to send in application emails on behalf of the application user.
 * @since 0.8
 */
function Titanium_UI_EmailDialog() {
	/**
	 * the bar color of the email dialog window when opened
	 * @alias Titanium_UI_EmailDialog.barColor
	 * @property {String}
	 */
	this.barColor = ''
	/**
	 * Get the the bar color of the email dialog window when opened
	 * @alias Titanium_UI_EmailDialog.getBarColor
	 * @return {String}
	 */
	this.getBarColor = function() { return this.barColor; }
	/**
	 * Set the the bar color of the email dialog window when opened
	 * @param {String} value New value to set.
	 * @alias Titanium_UI_EmailDialog.setBarColor
	 */
	this.setBarColor = function(value) { this.barColor = value; }
	/**
	 * array of email BCC: recipients
	 * @alias Titanium_UI_EmailDialog.bccRecipients
	 * @property {Array}
	 */
	this.bccRecipients = []
	/**
	 * Get the array of email BCC: recipients
	 * @alias Titanium_UI_EmailDialog.getBccRecipients
	 * @return {Array}
	 */
	this.getBccRecipients = function() { return this.bccRecipients; }
	/**
	 * Set the array of email BCC: recipients
	 * @param {Array} value New value to set.
	 * @alias Titanium_UI_EmailDialog.setBccRecipients
	 */
	this.setBccRecipients = function(value) { this.bccRecipients = value; }
	/**
	 * array of email CC: recipients
	 * @alias Titanium_UI_EmailDialog.ccRecipients
	 * @property {Array}
	 */
	this.ccRecipients = []
	/**
	 * Get the array of email CC: recipients
	 * @alias Titanium_UI_EmailDialog.getCcRecipients
	 * @return {Array}
	 */
	this.getCcRecipients = function() { return this.ccRecipients; }
	/**
	 * Set the array of email CC: recipients
	 * @param {Array} value New value to set.
	 * @alias Titanium_UI_EmailDialog.setCcRecipients
	 */
	this.setCcRecipients = function(value) { this.ccRecipients = value; }
	/**
	 * boolean to indicate whether the email messageBody should be sent as HTML content type. defaults to false. (Android note: you should not use html messages in 1.6: after that is okay.)
	 * @alias Titanium_UI_EmailDialog.html
	 * @property {Boolean}
	 */
	this.html = false
	/**
	 * Get the boolean to indicate whether the email messageBody should be sent as HTML content type. defaults to false. (Android note: you should not use html messages in 1.6: after that is okay.)
	 * @alias Titanium_UI_EmailDialog.getHtml
	 * @return {Boolean}
	 */
	this.getHtml = function() { return this.html; }
	/**
	 * Set the boolean to indicate whether the email messageBody should be sent as HTML content type. defaults to false. (Android note: you should not use html messages in 1.6: after that is okay.)
	 * @param {Boolean} value New value to set.
	 * @alias Titanium_UI_EmailDialog.setHtml
	 */
	this.setHtml = function(value) { this.html = value; }
	/**
	 * the email message body
	 * @alias Titanium_UI_EmailDialog.messageBody
	 * @property {String}
	 */
	this.messageBody = ''
	/**
	 * Get the the email message body
	 * @alias Titanium_UI_EmailDialog.getMessageBody
	 * @return {String}
	 */
	this.getMessageBody = function() { return this.messageBody; }
	/**
	 * Set the the email message body
	 * @param {String} value New value to set.
	 * @alias Titanium_UI_EmailDialog.setMessageBody
	 */
	this.setMessageBody = function(value) { this.messageBody = value; }
	/**
	 * the subject line for the email
	 * @alias Titanium_UI_EmailDialog.subject
	 * @property {String}
	 */
	this.subject = ''
	/**
	 * Get the the subject line for the email
	 * @alias Titanium_UI_EmailDialog.getSubject
	 * @return {String}
	 */
	this.getSubject = function() { return this.subject; }
	/**
	 * Set the the subject line for the email
	 * @param {String} value New value to set.
	 * @alias Titanium_UI_EmailDialog.setSubject
	 */
	this.setSubject = function(value) { this.subject = value; }
	/**
	 * array of email recipients
	 * @alias Titanium_UI_EmailDialog.toRecipients
	 * @property {Array}
	 */
	this.toRecipients = []
	/**
	 * Get the array of email recipients
	 * @alias Titanium_UI_EmailDialog.getToRecipients
	 * @return {Array}
	 */
	this.getToRecipients = function() { return this.toRecipients; }
	/**
	 * Set the array of email recipients
	 * @param {Array} value New value to set.
	 * @alias Titanium_UI_EmailDialog.setToRecipients
	 */
	this.setToRecipients = function(value) { this.toRecipients = value; }
	/**
	 * add an attachment to the email. the attachment can either be a Blob or File object. (Note: Android will only accept one attachment at this time.)
	 * @param {Object} attachment attachment object as either a Blob or File object
	 * @alias Titanium_UI_EmailDialog.addAttachment
	 */
	this.addAttachment = function addAttachment(attachment) { }
	/**
	 * add an event listener for the instance to receive view triggered events
	 * @param {String} name name of the event
	 * @param {Function} callback callback function to invoke when the event is fired
	 * @alias Titanium_UI_EmailDialog.addEventListener
	 */
	this.addEventListener = function addEventListener(name,callback) { }
	/**
	 * fire a synthesized event to the views listener
	 * @param {String} name name of the event
	 * @param {Object} event event object
	 * @alias Titanium_UI_EmailDialog.fireEvent
	 */
	this.fireEvent = function fireEvent(name,event) { }
	/**
	 * return whether or not sending email is supported
	 * @alias Titanium_UI_EmailDialog.isSupported
	 */
	this.isSupported = function isSupported() { }
	/**
	 * open the email dialog. the email dialog itself is a modal window
	 * @param {Object} properties object of animation properties. pass <tt>animated</tt> property (as boolean) to indicate if the dialog should be animated on open.
	 * @alias Titanium_UI_EmailDialog.open
	 */
	this.open = function open(properties) { }
	/**
	 * remove a previously added event listener
	 * @param {String} name name of the event
	 * @param {Function} callback callback function passed in addEventListener
	 * @alias Titanium_UI_EmailDialog.removeEventListener
	 */
	this.removeEventListener = function removeEventListener(name,callback) { }
};

/**
 * An Image View is used to display an image or a series of images in an animation. The Image View is created by the method Titanium.UI.createImageView.
 * @since 0.9
 */
function Titanium_UI_ImageView() {
	/**
	 * a dictionary with properties x and y to indicate the anchor point value. anchor specifies the position by which animation should occur. center is 0.5, 0.5
	 * @alias Titanium_UI_ImageView.anchorPoint
	 * @property {Object}
	 */
	this.anchorPoint = {}
	/**
	 * Get the a dictionary with properties x and y to indicate the anchor point value. anchor specifies the position by which animation should occur. center is 0.5, 0.5
	 * @alias Titanium_UI_ImageView.getAnchorPoint
	 * @return {Object}
	 */
	this.getAnchorPoint = function() { return this.anchorPoint; }
	/**
	 * Set the a dictionary with properties x and y to indicate the anchor point value. anchor specifies the position by which animation should occur. center is 0.5, 0.5
	 * @param {Object} value New value to set.
	 * @alias Titanium_UI_ImageView.setAnchorPoint
	 */
	this.setAnchorPoint = function(value) { this.anchorPoint = value; }
	/**
	 * read-only object with x and y properties of where the view is during animation
	 * @alias Titanium_UI_ImageView.animatedCenterPoint
	 * @property {Object}
	 */
	this.animatedCenterPoint = {}
	/**
	 * Get the read-only object with x and y properties of where the view is during animation
	 * @alias Titanium_UI_ImageView.getAnimatedCenterPoint
	 * @return {Object}
	 */
	this.getAnimatedCenterPoint = function() { return this.animatedCenterPoint; }
	/**
	 * Set the read-only object with x and y properties of where the view is during animation
	 * @param {Object} value New value to set.
	 * @alias Titanium_UI_ImageView.setAnimatedCenterPoint
	 */
	this.setAnimatedCenterPoint = function(value) { this.animatedCenterPoint = value; }
	/**
	 * readonly boolean to indicate if the animation is animating
	 * @alias Titanium_UI_ImageView.animating
	 * @property {Boolean}
	 */
	this.animating = false
	/**
	 * Get the readonly boolean to indicate if the animation is animating
	 * @alias Titanium_UI_ImageView.getAnimating
	 * @return {Boolean}
	 */
	this.getAnimating = function() { return this.animating; }
	/**
	 * Set the readonly boolean to indicate if the animation is animating
	 * @param {Boolean} value New value to set.
	 * @alias Titanium_UI_ImageView.setAnimating
	 */
	this.setAnimating = function(value) { this.animating = value; }
	/**
	 * the background color of the view
	 * @alias Titanium_UI_ImageView.backgroundColor
	 * @property {String}
	 */
	this.backgroundColor = ''
	/**
	 * Get the the background color of the view
	 * @alias Titanium_UI_ImageView.getBackgroundColor
	 * @return {String}
	 */
	this.getBackgroundColor = function() { return this.backgroundColor; }
	/**
	 * Set the the background color of the view
	 * @param {String} value New value to set.
	 * @alias Titanium_UI_ImageView.setBackgroundColor
	 */
	this.setBackgroundColor = function(value) { this.backgroundColor = value; }
	/**
	 * the disabled background color of the view. (Android)
	 * @alias Titanium_UI_ImageView.backgroundDisabledColor
	 * @property {String}
	 */
	this.backgroundDisabledColor = ''
	/**
	 * Get the the disabled background color of the view. (Android)
	 * @alias Titanium_UI_ImageView.getBackgroundDisabledColor
	 * @return {String}
	 */
	this.getBackgroundDisabledColor = function() { return this.backgroundDisabledColor; }
	/**
	 * Set the the disabled background color of the view. (Android)
	 * @param {String} value New value to set.
	 * @alias Titanium_UI_ImageView.setBackgroundDisabledColor
	 */
	this.setBackgroundDisabledColor = function(value) { this.backgroundDisabledColor = value; }
	/**
	 * the disabled background image url of the view. (Android)
	 * @alias Titanium_UI_ImageView.backgroundDisabledImage
	 * @property {String}
	 */
	this.backgroundDisabledImage = ''
	/**
	 * Get the the disabled background image url of the view. (Android)
	 * @alias Titanium_UI_ImageView.getBackgroundDisabledImage
	 * @return {String}
	 */
	this.getBackgroundDisabledImage = function() { return this.backgroundDisabledImage; }
	/**
	 * Set the the disabled background image url of the view. (Android)
	 * @param {String} value New value to set.
	 * @alias Titanium_UI_ImageView.setBackgroundDisabledImage
	 */
	this.setBackgroundDisabledImage = function(value) { this.backgroundDisabledImage = value; }
	/**
	 * the focused background color of the view. focusable must be true for normal views. (Android)
	 * @alias Titanium_UI_ImageView.backgroundFocusedColor
	 * @property {String}
	 */
	this.backgroundFocusedColor = ''
	/**
	 * Get the the focused background color of the view. focusable must be true for normal views. (Android)
	 * @alias Titanium_UI_ImageView.getBackgroundFocusedColor
	 * @return {String}
	 */
	this.getBackgroundFocusedColor = function() { return this.backgroundFocusedColor; }
	/**
	 * Set the the focused background color of the view. focusable must be true for normal views. (Android)
	 * @param {String} value New value to set.
	 * @alias Titanium_UI_ImageView.setBackgroundFocusedColor
	 */
	this.setBackgroundFocusedColor = function(value) { this.backgroundFocusedColor = value; }
	/**
	 * the focused background image url of the view. focusable must be true for normal views. (Android)
	 * @alias Titanium_UI_ImageView.backgroundFocusedImage
	 * @property {String}
	 */
	this.backgroundFocusedImage = ''
	/**
	 * Get the the focused background image url of the view. focusable must be true for normal views. (Android)
	 * @alias Titanium_UI_ImageView.getBackgroundFocusedImage
	 * @return {String}
	 */
	this.getBackgroundFocusedImage = function() { return this.backgroundFocusedImage; }
	/**
	 * Set the the focused background image url of the view. focusable must be true for normal views. (Android)
	 * @param {String} value New value to set.
	 * @alias Titanium_UI_ImageView.setBackgroundFocusedImage
	 */
	this.setBackgroundFocusedImage = function(value) { this.backgroundFocusedImage = value; }
	/**
	 * a background gradient for the view with the properties: type,startPoint,endPoint,startRadius,endRadius,backfillStart,backfillEnd,colors.
	 * @alias Titanium_UI_ImageView.backgroundGradient
	 * @property {Object}
	 */
	this.backgroundGradient = {}
	/**
	 * Get the a background gradient for the view with the properties: type,startPoint,endPoint,startRadius,endRadius,backfillStart,backfillEnd,colors.
	 * @alias Titanium_UI_ImageView.getBackgroundGradient
	 * @return {Object}
	 */
	this.getBackgroundGradient = function() { return this.backgroundGradient; }
	/**
	 * Set the a background gradient for the view with the properties: type,startPoint,endPoint,startRadius,endRadius,backfillStart,backfillEnd,colors.
	 * @param {Object} value New value to set.
	 * @alias Titanium_UI_ImageView.setBackgroundGradient
	 */
	this.setBackgroundGradient = function(value) { this.backgroundGradient = value; }
	/**
	 * the background image url of the view
	 * @alias Titanium_UI_ImageView.backgroundImage
	 * @property {String}
	 */
	this.backgroundImage = ''
	/**
	 * Get the the background image url of the view
	 * @alias Titanium_UI_ImageView.getBackgroundImage
	 * @return {String}
	 */
	this.getBackgroundImage = function() { return this.backgroundImage; }
	/**
	 * Set the the background image url of the view
	 * @param {String} value New value to set.
	 * @alias Titanium_UI_ImageView.setBackgroundImage
	 */
	this.setBackgroundImage = function(value) { this.backgroundImage = value; }
	/**
	 * End caps specify the portion of an image that should not be resized when an image is stretched. This technique is used to implement buttons and other resizable image-based interface elements. When a button with end caps is resized, the resizing occurs only in the middle of the button, in the region between the end caps. The end caps themselves keep their original size and appearance. This property specifies the size of the left end cap. The middle (stretchable) portion is assumed to be 1 pixel wide. The right end cap is therefore computed by adding the size of the left end cap and the middle portion together and then subtracting that value from the width of the image
	 * @alias Titanium_UI_ImageView.backgroundLeftCap
	 * @property {Float}
	 */
	this.backgroundLeftCap = 0.0
	/**
	 * Get the End caps specify the portion of an image that should not be resized when an image is stretched. This technique is used to implement buttons and other resizable image-based interface elements. When a button with end caps is resized, the resizing occurs only in the middle of the button, in the region between the end caps. The end caps themselves keep their original size and appearance. This property specifies the size of the left end cap. The middle (stretchable) portion is assumed to be 1 pixel wide. The right end cap is therefore computed by adding the size of the left end cap and the middle portion together and then subtracting that value from the width of the image
	 * @alias Titanium_UI_ImageView.getBackgroundLeftCap
	 * @return {Float}
	 */
	this.getBackgroundLeftCap = function() { return this.backgroundLeftCap; }
	/**
	 * Set the End caps specify the portion of an image that should not be resized when an image is stretched. This technique is used to implement buttons and other resizable image-based interface elements. When a button with end caps is resized, the resizing occurs only in the middle of the button, in the region between the end caps. The end caps themselves keep their original size and appearance. This property specifies the size of the left end cap. The middle (stretchable) portion is assumed to be 1 pixel wide. The right end cap is therefore computed by adding the size of the left end cap and the middle portion together and then subtracting that value from the width of the image
	 * @param {Float} value New value to set.
	 * @alias Titanium_UI_ImageView.setBackgroundLeftCap
	 */
	this.setBackgroundLeftCap = function(value) { this.backgroundLeftCap = value; }
	/**
	 * the selected background color of the view. focusable must be true for normal views. (Android)
	 * @alias Titanium_UI_ImageView.backgroundSelectedColor
	 * @property {String}
	 */
	this.backgroundSelectedColor = ''
	/**
	 * Get the the selected background color of the view. focusable must be true for normal views. (Android)
	 * @alias Titanium_UI_ImageView.getBackgroundSelectedColor
	 * @return {String}
	 */
	this.getBackgroundSelectedColor = function() { return this.backgroundSelectedColor; }
	/**
	 * Set the the selected background color of the view. focusable must be true for normal views. (Android)
	 * @param {String} value New value to set.
	 * @alias Titanium_UI_ImageView.setBackgroundSelectedColor
	 */
	this.setBackgroundSelectedColor = function(value) { this.backgroundSelectedColor = value; }
	/**
	 * the selected background image url of the view. focusable must be true for normal views. (Android)
	 * @alias Titanium_UI_ImageView.backgroundSelectedImage
	 * @property {String}
	 */
	this.backgroundSelectedImage = ''
	/**
	 * Get the the selected background image url of the view. focusable must be true for normal views. (Android)
	 * @alias Titanium_UI_ImageView.getBackgroundSelectedImage
	 * @return {String}
	 */
	this.getBackgroundSelectedImage = function() { return this.backgroundSelectedImage; }
	/**
	 * Set the the selected background image url of the view. focusable must be true for normal views. (Android)
	 * @param {String} value New value to set.
	 * @alias Titanium_UI_ImageView.setBackgroundSelectedImage
	 */
	this.setBackgroundSelectedImage = function(value) { this.backgroundSelectedImage = value; }
	/**
	 * End caps specify the portion of an image that should not be resized when an image is stretched. This technique is used to implement buttons and other resizable image-based interface elements. When a button with end caps is resized, the resizing occurs only in the middle of the button, in the region between the end caps. The end caps themselves keep their original size and appearance. This property specifies the size of the top end cap. The middle (stretchable) portion is assumed to be 1 pixel wide. The bottom end cap is therefore computed by adding the size of the top end cap and the middle portion together and then subtracting that value from the height of the image
	 * @alias Titanium_UI_ImageView.backgroundTopCap
	 * @property {Float}
	 */
	this.backgroundTopCap = 0.0
	/**
	 * Get the End caps specify the portion of an image that should not be resized when an image is stretched. This technique is used to implement buttons and other resizable image-based interface elements. When a button with end caps is resized, the resizing occurs only in the middle of the button, in the region between the end caps. The end caps themselves keep their original size and appearance. This property specifies the size of the top end cap. The middle (stretchable) portion is assumed to be 1 pixel wide. The bottom end cap is therefore computed by adding the size of the top end cap and the middle portion together and then subtracting that value from the height of the image
	 * @alias Titanium_UI_ImageView.getBackgroundTopCap
	 * @return {Float}
	 */
	this.getBackgroundTopCap = function() { return this.backgroundTopCap; }
	/**
	 * Set the End caps specify the portion of an image that should not be resized when an image is stretched. This technique is used to implement buttons and other resizable image-based interface elements. When a button with end caps is resized, the resizing occurs only in the middle of the button, in the region between the end caps. The end caps themselves keep their original size and appearance. This property specifies the size of the top end cap. The middle (stretchable) portion is assumed to be 1 pixel wide. The bottom end cap is therefore computed by adding the size of the top end cap and the middle portion together and then subtracting that value from the height of the image
	 * @param {Float} value New value to set.
	 * @alias Titanium_UI_ImageView.setBackgroundTopCap
	 */
	this.setBackgroundTopCap = function(value) { this.backgroundTopCap = value; }
	/**
	 * the border color of the view
	 * @alias Titanium_UI_ImageView.borderColor
	 * @property {String}
	 */
	this.borderColor = ''
	/**
	 * Get the the border color of the view
	 * @alias Titanium_UI_ImageView.getBorderColor
	 * @return {String}
	 */
	this.getBorderColor = function() { return this.borderColor; }
	/**
	 * Set the the border color of the view
	 * @param {String} value New value to set.
	 * @alias Titanium_UI_ImageView.setBorderColor
	 */
	this.setBorderColor = function(value) { this.borderColor = value; }
	/**
	 * the border radius of the view
	 * @alias Titanium_UI_ImageView.borderRadius
	 * @property {Float}
	 */
	this.borderRadius = 0.0
	/**
	 * Get the the border radius of the view
	 * @alias Titanium_UI_ImageView.getBorderRadius
	 * @return {Float}
	 */
	this.getBorderRadius = function() { return this.borderRadius; }
	/**
	 * Set the the border radius of the view
	 * @param {Float} value New value to set.
	 * @alias Titanium_UI_ImageView.setBorderRadius
	 */
	this.setBorderRadius = function(value) { this.borderRadius = value; }
	/**
	 * the border width of the view
	 * @alias Titanium_UI_ImageView.borderWidth
	 * @property {Float}
	 */
	this.borderWidth = 0.0
	/**
	 * Get the the border width of the view
	 * @alias Titanium_UI_ImageView.getBorderWidth
	 * @return {Float}
	 */
	this.getBorderWidth = function() { return this.borderWidth; }
	/**
	 * Set the the border width of the view
	 * @param {Float} value New value to set.
	 * @alias Titanium_UI_ImageView.setBorderWidth
	 */
	this.setBorderWidth = function(value) { this.borderWidth = value; }
	/**
	 * property for the view bottom position. This position is relative to the view's parent. Can be either a float value or a dimension string ie 'auto' (default), '50%' (iPhone only).
	 * @alias Titanium_UI_ImageView.bottom
	 * @property {Float,String}
	 */
	this.bottom = 0.0
	/**
	 * Get the property for the view bottom position. This position is relative to the view's parent. Can be either a float value or a dimension string ie 'auto' (default), '50%' (iPhone only).
	 * @alias Titanium_UI_ImageView.getBottom
	 * @return {Float,String}
	 */
	this.getBottom = function() { return this.bottom; }
	/**
	 * Set the property for the view bottom position. This position is relative to the view's parent. Can be either a float value or a dimension string ie 'auto' (default), '50%' (iPhone only).
	 * @param {Float,String} value New value to set.
	 * @alias Titanium_UI_ImageView.setBottom
	 */
	this.setBottom = function(value) { this.bottom = value; }
	/**
	 * allow image to scale (Android)
	 * @alias Titanium_UI_ImageView.canScale
	 * @property {Boolean}
	 */
	this.canScale = false
	/**
	 * Get the allow image to scale (Android)
	 * @alias Titanium_UI_ImageView.getCanScale
	 * @return {Boolean}
	 */
	this.getCanScale = function() { return this.canScale; }
	/**
	 * Set the allow image to scale (Android)
	 * @param {Boolean} value New value to set.
	 * @alias Titanium_UI_ImageView.setCanScale
	 */
	this.setCanScale = function(value) { this.canScale = value; }
	/**
	 * a dictionary with properties x and y to indicate the center of the views position relative to the parent view
	 * @alias Titanium_UI_ImageView.center
	 * @property {Object}
	 */
	this.center = {}
	/**
	 * Get the a dictionary with properties x and y to indicate the center of the views position relative to the parent view
	 * @alias Titanium_UI_ImageView.getCenter
	 * @return {Object}
	 */
	this.getCenter = function() { return this.center; }
	/**
	 * Set the a dictionary with properties x and y to indicate the center of the views position relative to the parent view
	 * @param {Object} value New value to set.
	 * @alias Titanium_UI_ImageView.setCenter
	 */
	this.setCenter = function(value) { this.center = value; }
	/**
	 * url to the default image to display while loading a remote image
	 * @alias Titanium_UI_ImageView.defaultImage
	 * @property {String}
	 */
	this.defaultImage = ''
	/**
	 * Get the url to the default image to display while loading a remote image
	 * @alias Titanium_UI_ImageView.getDefaultImage
	 * @return {String}
	 */
	this.getDefaultImage = function() { return this.defaultImage; }
	/**
	 * Set the url to the default image to display while loading a remote image
	 * @param {String} value New value to set.
	 * @alias Titanium_UI_ImageView.setDefaultImage
	 */
	this.setDefaultImage = function(value) { this.defaultImage = value; }
	/**
	 * amount of time in milliseconds to animate one cycle
	 * @alias Titanium_UI_ImageView.duration
	 * @property {Float}
	 */
	this.duration = 0.0
	/**
	 * Get the amount of time in milliseconds to animate one cycle
	 * @alias Titanium_UI_ImageView.getDuration
	 * @return {Float}
	 */
	this.getDuration = function() { return this.duration; }
	/**
	 * Set the amount of time in milliseconds to animate one cycle
	 * @param {Float} value New value to set.
	 * @alias Titanium_UI_ImageView.setDuration
	 */
	this.setDuration = function(value) { this.duration = value; }
	/**
	 * enable zoom controls on Android. Default is true for backward compatibility. (1.3.0)
	 * @alias Titanium_UI_ImageView.enableZoomControls
	 * @property {Boolean}
	 */
	this.enableZoomControls = false
	/**
	 * Get the enable zoom controls on Android. Default is true for backward compatibility. (1.3.0)
	 * @alias Titanium_UI_ImageView.getEnableZoomControls
	 * @return {Boolean}
	 */
	this.getEnableZoomControls = function() { return this.enableZoomControls; }
	/**
	 * Set the enable zoom controls on Android. Default is true for backward compatibility. (1.3.0)
	 * @param {Boolean} value New value to set.
	 * @alias Titanium_UI_ImageView.setEnableZoomControls
	 */
	this.setEnableZoomControls = function(value) { this.enableZoomControls = value; }
	/**
	 * Set true if you want a view to be focusable when navigating with the trackball or D-Pad. Default: false. (Android Only)
	 * @alias Titanium_UI_ImageView.focusable
	 * @property {Boolean}
	 */
	this.focusable = false
	/**
	 * Get the Set true if you want a view to be focusable when navigating with the trackball or D-Pad. Default: false. (Android Only)
	 * @alias Titanium_UI_ImageView.getFocusable
	 * @return {Boolean}
	 */
	this.getFocusable = function() { return this.focusable; }
	/**
	 * Set the Set true if you want a view to be focusable when navigating with the trackball or D-Pad. Default: false. (Android Only)
	 * @param {Boolean} value New value to set.
	 * @alias Titanium_UI_ImageView.setFocusable
	 */
	this.setFocusable = function(value) { this.focusable = value; }
	/**
	 * the font family
	 * @alias Titanium_UI_ImageView.font-family
	 * @property {String}
	 */
	this.font-family = ''
	/**
	 * Get the the font family
	 * @alias Titanium_UI_ImageView.getFont-family
	 * @return {String}
	 */
	this.getFont-family = function() { return this.font-family; }
	/**
	 * Set the the font family
	 * @param {String} value New value to set.
	 * @alias Titanium_UI_ImageView.setFont-family
	 */
	this.setFont-family = function(value) { this.font-family = value; }
	/**
	 * the font size
	 * @alias Titanium_UI_ImageView.font-size
	 * @property {String}
	 */
	this.font-size = ''
	/**
	 * Get the the font size
	 * @alias Titanium_UI_ImageView.getFont-size
	 * @return {String}
	 */
	this.getFont-size = function() { return this.font-size; }
	/**
	 * Set the the font size
	 * @param {String} value New value to set.
	 * @alias Titanium_UI_ImageView.setFont-size
	 */
	this.setFont-size = function(value) { this.font-size = value; }
	/**
	 * the font style, either normal or italics
	 * @alias Titanium_UI_ImageView.font-style
	 * @property {String}
	 */
	this.font-style = ''
	/**
	 * Get the the font style, either normal or italics
	 * @alias Titanium_UI_ImageView.getFont-style
	 * @return {String}
	 */
	this.getFont-style = function() { return this.font-style; }
	/**
	 * Set the the font style, either normal or italics
	 * @param {String} value New value to set.
	 * @alias Titanium_UI_ImageView.setFont-style
	 */
	this.setFont-style = function(value) { this.font-style = value; }
	/**
	 * the font weight, either normal or bold
	 * @alias Titanium_UI_ImageView.font-weight
	 * @property {String}
	 */
	this.font-weight = ''
	/**
	 * Get the the font weight, either normal or bold
	 * @alias Titanium_UI_ImageView.getFont-weight
	 * @return {String}
	 */
	this.getFont-weight = function() { return this.font-weight; }
	/**
	 * Set the the font weight, either normal or bold
	 * @param {String} value New value to set.
	 * @alias Titanium_UI_ImageView.setFont-weight
	 */
	this.setFont-weight = function(value) { this.font-weight = value; }
	/**
	 * height of the image display
	 * @alias Titanium_UI_ImageView.height
	 * @property {Float}
	 */
	this.height = 0.0
	/**
	 * Get the height of the image display
	 * @alias Titanium_UI_ImageView.getHeight
	 * @return {Float}
	 */
	this.getHeight = function() { return this.height; }
	/**
	 * Set the height of the image display
	 * @param {Float} value New value to set.
	 * @alias Titanium_UI_ImageView.setHeight
	 */
	this.setHeight = function(value) { this.height = value; }
	/**
	 * image to display either as string url, Blob or File
	 * @alias Titanium_UI_ImageView.image
	 * @property {Object}
	 */
	this.image = {}
	/**
	 * Get the image to display either as string url, Blob or File
	 * @alias Titanium_UI_ImageView.getImage
	 * @return {Object}
	 */
	this.getImage = function() { return this.image; }
	/**
	 * Set the image to display either as string url, Blob or File
	 * @param {Object} value New value to set.
	 * @alias Titanium_UI_ImageView.setImage
	 */
	this.setImage = function(value) { this.image = value; }
	/**
	 * array of images (either as string url, Blob or File) to display in an animation
	 * @alias Titanium_UI_ImageView.images
	 * @property {Array}
	 */
	this.images = []
	/**
	 * Get the array of images (either as string url, Blob or File) to display in an animation
	 * @alias Titanium_UI_ImageView.getImages
	 * @return {Array}
	 */
	this.getImages = function() { return this.images; }
	/**
	 * Set the array of images (either as string url, Blob or File) to display in an animation
	 * @param {Array} value New value to set.
	 * @alias Titanium_UI_ImageView.setImages
	 */
	this.setImages = function(value) { this.images = value; }
	/**
	 * property for the view left position. This position is relative to the view's parent. Can be either a float value or a dimension string ie 'auto' (default), '50%' (iPhone only).
	 * @alias Titanium_UI_ImageView.left
	 * @property {Float,String}
	 */
	this.left = 0.0
	/**
	 * Get the property for the view left position. This position is relative to the view's parent. Can be either a float value or a dimension string ie 'auto' (default), '50%' (iPhone only).
	 * @alias Titanium_UI_ImageView.getLeft
	 * @return {Float,String}
	 */
	this.getLeft = function() { return this.left; }
	/**
	 * Set the property for the view left position. This position is relative to the view's parent. Can be either a float value or a dimension string ie 'auto' (default), '50%' (iPhone only).
	 * @param {Float,String} value New value to set.
	 * @alias Titanium_UI_ImageView.setLeft
	 */
	this.setLeft = function(value) { this.left = value; }
	/**
	 * the opacity from 0.0-1.0
	 * @alias Titanium_UI_ImageView.opacity
	 * @property {Float}
	 */
	this.opacity = 0.0
	/**
	 * Get the the opacity from 0.0-1.0
	 * @alias Titanium_UI_ImageView.getOpacity
	 * @return {Float}
	 */
	this.getOpacity = function() { return this.opacity; }
	/**
	 * Set the the opacity from 0.0-1.0
	 * @param {Float} value New value to set.
	 * @alias Titanium_UI_ImageView.setOpacity
	 */
	this.setOpacity = function(value) { this.opacity = value; }
	/**
	 * readonly boolean to indicate if the animation is paused
	 * @alias Titanium_UI_ImageView.paused
	 * @property {Boolean}
	 */
	this.paused = false
	/**
	 * Get the readonly boolean to indicate if the animation is paused
	 * @alias Titanium_UI_ImageView.getPaused
	 * @return {Boolean}
	 */
	this.getPaused = function() { return this.paused; }
	/**
	 * Set the readonly boolean to indicate if the animation is paused
	 * @param {Boolean} value New value to set.
	 * @alias Titanium_UI_ImageView.setPaused
	 */
	this.setPaused = function(value) { this.paused = value; }
	/**
	 * boolean to indicate if the default image should be displaying while loading a remote image
	 * @alias Titanium_UI_ImageView.preventDefaultImage
	 * @property {Boolean}
	 */
	this.preventDefaultImage = false
	/**
	 * Get the boolean to indicate if the default image should be displaying while loading a remote image
	 * @alias Titanium_UI_ImageView.getPreventDefaultImage
	 * @return {Boolean}
	 */
	this.getPreventDefaultImage = function() { return this.preventDefaultImage; }
	/**
	 * Set the boolean to indicate if the default image should be displaying while loading a remote image
	 * @param {Boolean} value New value to set.
	 * @alias Titanium_UI_ImageView.setPreventDefaultImage
	 */
	this.setPreventDefaultImage = function(value) { this.preventDefaultImage = value; }
	/**
	 * number of times to repeat the image animation
	 * @alias Titanium_UI_ImageView.repeatCount
	 * @property {Integer}
	 */
	this.repeatCount = 0
	/**
	 * Get the number of times to repeat the image animation
	 * @alias Titanium_UI_ImageView.getRepeatCount
	 * @return {Integer}
	 */
	this.getRepeatCount = function() { return this.repeatCount; }
	/**
	 * Set the number of times to repeat the image animation
	 * @param {Integer} value New value to set.
	 * @alias Titanium_UI_ImageView.setRepeatCount
	 */
	this.setRepeatCount = function(value) { this.repeatCount = value; }
	/**
	 * boolean to indicate if the animation should happen in reverse (from last to first)
	 * @alias Titanium_UI_ImageView.reverse
	 * @property {Boolean}
	 */
	this.reverse = false
	/**
	 * Get the boolean to indicate if the animation should happen in reverse (from last to first)
	 * @alias Titanium_UI_ImageView.getReverse
	 * @return {Boolean}
	 */
	this.getReverse = function() { return this.reverse; }
	/**
	 * Set the boolean to indicate if the animation should happen in reverse (from last to first)
	 * @param {Boolean} value New value to set.
	 * @alias Titanium_UI_ImageView.setReverse
	 */
	this.setReverse = function(value) { this.reverse = value; }
	/**
	 * property for the view right position. This position is relative to the view's parent. Can be either a float value or a dimension string ie 'auto' (default), '50%' (iPhone only).
	 * @alias Titanium_UI_ImageView.right
	 * @property {Float,String}
	 */
	this.right = 0.0
	/**
	 * Get the property for the view right position. This position is relative to the view's parent. Can be either a float value or a dimension string ie 'auto' (default), '50%' (iPhone only).
	 * @alias Titanium_UI_ImageView.getRight
	 * @return {Float,String}
	 */
	this.getRight = function() { return this.right; }
	/**
	 * Set the property for the view right position. This position is relative to the view's parent. Can be either a float value or a dimension string ie 'auto' (default), '50%' (iPhone only).
	 * @param {Float,String} value New value to set.
	 * @alias Titanium_UI_ImageView.setRight
	 */
	this.setRight = function(value) { this.right = value; }
	/**
	 * the size of the view as a dictionary of width and height properties
	 * @alias Titanium_UI_ImageView.size
	 * @property {Object}
	 */
	this.size = {}
	/**
	 * Get the the size of the view as a dictionary of width and height properties
	 * @alias Titanium_UI_ImageView.getSize
	 * @return {Object}
	 */
	this.getSize = function() { return this.size; }
	/**
	 * Set the the size of the view as a dictionary of width and height properties
	 * @param {Object} value New value to set.
	 * @alias Titanium_UI_ImageView.setSize
	 */
	this.setSize = function(value) { this.size = value; }
	/**
	 * One of Titanium.UI.Android.SOFT_KEYBOARD_DEFAULT_ON_FOCUS, Titanium.UI.Android.SOFT_KEYBOARD_HIDE_ON_FOCUS, or Titanium.UI.Android.SOFT_KEYBOARD_SHOW_ON_FOCUS. (Android only)
	 * @alias Titanium_UI_ImageView.softKeyboardOnFocus
	 * @property {Integer}
	 */
	this.softKeyboardOnFocus = 0
	/**
	 * Get the One of Titanium.UI.Android.SOFT_KEYBOARD_DEFAULT_ON_FOCUS, Titanium.UI.Android.SOFT_KEYBOARD_HIDE_ON_FOCUS, or Titanium.UI.Android.SOFT_KEYBOARD_SHOW_ON_FOCUS. (Android only)
	 * @alias Titanium_UI_ImageView.getSoftKeyboardOnFocus
	 * @return {Integer}
	 */
	this.getSoftKeyboardOnFocus = function() { return this.softKeyboardOnFocus; }
	/**
	 * Set the One of Titanium.UI.Android.SOFT_KEYBOARD_DEFAULT_ON_FOCUS, Titanium.UI.Android.SOFT_KEYBOARD_HIDE_ON_FOCUS, or Titanium.UI.Android.SOFT_KEYBOARD_SHOW_ON_FOCUS. (Android only)
	 * @param {Integer} value New value to set.
	 * @alias Titanium_UI_ImageView.setSoftKeyboardOnFocus
	 */
	this.setSoftKeyboardOnFocus = function(value) { this.softKeyboardOnFocus = value; }
	/**
	 * property for the view top position. This position is relative to the view's parent. Can be either a float value or a dimension string ie 'auto' (default), '50%' (iPhone only).
	 * @alias Titanium_UI_ImageView.top
	 * @property {Float,String}
	 */
	this.top = 0.0
	/**
	 * Get the property for the view top position. This position is relative to the view's parent. Can be either a float value or a dimension string ie 'auto' (default), '50%' (iPhone only).
	 * @alias Titanium_UI_ImageView.getTop
	 * @return {Float,String}
	 */
	this.getTop = function() { return this.top; }
	/**
	 * Set the property for the view top position. This position is relative to the view's parent. Can be either a float value or a dimension string ie 'auto' (default), '50%' (iPhone only).
	 * @param {Float,String} value New value to set.
	 * @alias Titanium_UI_ImageView.setTop
	 */
	this.setTop = function(value) { this.top = value; }
	/**
	 * a boolean indicating if the view should receive touch events (true, default) or forward them to peers (false)
	 * @alias Titanium_UI_ImageView.touchEnabled
	 * @property {Boolean}
	 */
	this.touchEnabled = false
	/**
	 * Get the a boolean indicating if the view should receive touch events (true, default) or forward them to peers (false)
	 * @alias Titanium_UI_ImageView.getTouchEnabled
	 * @return {Boolean}
	 */
	this.getTouchEnabled = function() { return this.touchEnabled; }
	/**
	 * Set the a boolean indicating if the view should receive touch events (true, default) or forward them to peers (false)
	 * @param {Boolean} value New value to set.
	 * @alias Titanium_UI_ImageView.setTouchEnabled
	 */
	this.setTouchEnabled = function(value) { this.touchEnabled = value; }
	/**
	 * the transformation matrix to apply to the view
	 * @alias Titanium_UI_ImageView.transform
	 * @property {Object}
	 */
	this.transform = {}
	/**
	 * Get the the transformation matrix to apply to the view
	 * @alias Titanium_UI_ImageView.getTransform
	 * @return {Object}
	 */
	this.getTransform = function() { return this.transform; }
	/**
	 * Set the the transformation matrix to apply to the view
	 * @param {Object} value New value to set.
	 * @alias Titanium_UI_ImageView.setTransform
	 */
	this.setTransform = function(value) { this.transform = value; }
	/**
	 * url to the image to display (NOTE: this property is deprecated. use image instead)
	 * @alias Titanium_UI_ImageView.url
	 * @property {String}
	 */
	this.url = ''
	/**
	 * Get the url to the image to display (NOTE: this property is deprecated. use image instead)
	 * @alias Titanium_UI_ImageView.getUrl
	 * @return {String}
	 */
	this.getUrl = function() { return this.url; }
	/**
	 * Set the url to the image to display (NOTE: this property is deprecated. use image instead)
	 * @param {String} value New value to set.
	 * @alias Titanium_UI_ImageView.setUrl
	 */
	this.setUrl = function(value) { this.url = value; }
	/**
	 * a boolean of the visibility of the view
	 * @alias Titanium_UI_ImageView.visible
	 * @property {Boolean}
	 */
	this.visible = false
	/**
	 * Get the a boolean of the visibility of the view
	 * @alias Titanium_UI_ImageView.getVisible
	 * @return {Boolean}
	 */
	this.getVisible = function() { return this.visible; }
	/**
	 * Set the a boolean of the visibility of the view
	 * @param {Boolean} value New value to set.
	 * @alias Titanium_UI_ImageView.setVisible
	 */
	this.setVisible = function(value) { this.visible = value; }
	/**
	 * width of the image display
	 * @alias Titanium_UI_ImageView.width
	 * @property {Float}
	 */
	this.width = 0.0
	/**
	 * Get the width of the image display
	 * @alias Titanium_UI_ImageView.getWidth
	 * @return {Float}
	 */
	this.getWidth = function() { return this.width; }
	/**
	 * Set the width of the image display
	 * @param {Float} value New value to set.
	 * @alias Titanium_UI_ImageView.setWidth
	 */
	this.setWidth = function(value) { this.width = value; }
	/**
	 * the z index position relative to other sibling views
	 * @alias Titanium_UI_ImageView.zIndex
	 * @property {Integer}
	 */
	this.zIndex = 0
	/**
	 * Get the the z index position relative to other sibling views
	 * @alias Titanium_UI_ImageView.getZIndex
	 * @return {Integer}
	 */
	this.getZIndex = function() { return this.zIndex; }
	/**
	 * Set the the z index position relative to other sibling views
	 * @param {Integer} value New value to set.
	 * @alias Titanium_UI_ImageView.setZIndex
	 */
	this.setZIndex = function(value) { this.zIndex = value; }
	/**
	 * add a child to the view hierarchy
	 * @param {Object} view the view to add to this views hiearchy
	 * @alias Titanium_UI_ImageView.add
	 */
	this.add = function add(view) { }
	/**
	 * add an event listener for the instance to receive view triggered events
	 * @param {String} name name of the event
	 * @param {Function} callback callback function to invoke when the event is fired
	 * @alias Titanium_UI_ImageView.addEventListener
	 */
	this.addEventListener = function addEventListener(name,callback) { }
	/**
	 * animate the view
	 * @param {Object} obj either a dictionary of animation properties or an Animation object
	 * @param {Function} callback function to be invoked upon completion of the animation
	 * @alias Titanium_UI_ImageView.animate
	 */
	this.animate = function animate(obj,callback) { }
	/**
	 * fire a synthesized event to the views listener
	 * @param {String} name name of the event
	 * @param {Object} event event object
	 * @alias Titanium_UI_ImageView.fireEvent
	 */
	this.fireEvent = function fireEvent(name,event) { }
	/**
	 * hide the view
	 * @alias Titanium_UI_ImageView.hide
	 */
	this.hide = function hide() { }
	/**
	 * pause a started animation.
	 * @alias Titanium_UI_ImageView.pause
	 */
	this.pause = function pause() { }
	/**
	 * remove a previously add view from the view hiearchy
	 * @param {Object} view the view to remove from this views hiearchy
	 * @alias Titanium_UI_ImageView.remove
	 */
	this.remove = function remove(view) { }
	/**
	 * remove a previously added event listener
	 * @param {String} name name of the event
	 * @param {Function} callback callback function passed in addEventListener
	 * @alias Titanium_UI_ImageView.removeEventListener
	 */
	this.removeEventListener = function removeEventListener(name,callback) { }
	/**
	 * make the view visible
	 * @alias Titanium_UI_ImageView.show
	 */
	this.show = function show() { }
	/**
	 * start the image animation. this method only works if you set multiple images
	 * @alias Titanium_UI_ImageView.start
	 */
	this.start = function start() { }
	/**
	 * stop a started animation and reset the index to the first image
	 * @alias Titanium_UI_ImageView.stop
	 */
	this.stop = function stop() { }
	/**
	 * return the image as a Blob object
	 * @alias Titanium_UI_ImageView.toBlob
	 */
	this.toBlob = function toBlob() { }
	/**
	 * return a Blob image of the rendered view
	 * @param {Function} f function to be invoked upon completion. if non-null, this method will be performed asynchronously. if null, it will be performed immediately
	 * @alias Titanium_UI_ImageView.toImage
	 * @return {Object}
	 */
	this.toImage = function toImage(f) { return {}; }
};

/**
 * A Label is created by the method Titanium.UI.createLabel.
 * @since 0.8
 */
function Titanium_UI_Label() {
	/**
	 * a dictionary with properties x and y to indicate the anchor point value. anchor specifies the position by which animation should occur. center is 0.5, 0.5
	 * @alias Titanium_UI_Label.anchorPoint
	 * @property {Object}
	 */
	this.anchorPoint = {}
	/**
	 * Get the a dictionary with properties x and y to indicate the anchor point value. anchor specifies the position by which animation should occur. center is 0.5, 0.5
	 * @alias Titanium_UI_Label.getAnchorPoint
	 * @return {Object}
	 */
	this.getAnchorPoint = function() { return this.anchorPoint; }
	/**
	 * Set the a dictionary with properties x and y to indicate the anchor point value. anchor specifies the position by which animation should occur. center is 0.5, 0.5
	 * @param {Object} value New value to set.
	 * @alias Titanium_UI_Label.setAnchorPoint
	 */
	this.setAnchorPoint = function(value) { this.anchorPoint = value; }
	/**
	 * read-only object with x and y properties of where the view is during animation
	 * @alias Titanium_UI_Label.animatedCenterPoint
	 * @property {Object}
	 */
	this.animatedCenterPoint = {}
	/**
	 * Get the read-only object with x and y properties of where the view is during animation
	 * @alias Titanium_UI_Label.getAnimatedCenterPoint
	 * @return {Object}
	 */
	this.getAnimatedCenterPoint = function() { return this.animatedCenterPoint; }
	/**
	 * Set the read-only object with x and y properties of where the view is during animation
	 * @param {Object} value New value to set.
	 * @alias Titanium_UI_Label.setAnimatedCenterPoint
	 */
	this.setAnimatedCenterPoint = function(value) { this.animatedCenterPoint = value; }
	/**
	 * One of Ti.UI.Android.LINKIFY constants. Automatically create clickable links for the specified type. (Android Only)
	 * @alias Titanium_UI_Label.autoLink
	 * @property {Integer}
	 */
	this.autoLink = 0
	/**
	 * Get the One of Ti.UI.Android.LINKIFY constants. Automatically create clickable links for the specified type. (Android Only)
	 * @alias Titanium_UI_Label.getAutoLink
	 * @return {Integer}
	 */
	this.getAutoLink = function() { return this.autoLink; }
	/**
	 * Set the One of Ti.UI.Android.LINKIFY constants. Automatically create clickable links for the specified type. (Android Only)
	 * @param {Integer} value New value to set.
	 * @alias Titanium_UI_Label.setAutoLink
	 */
	this.setAutoLink = function(value) { this.autoLink = value; }
	/**
	 * the background color of the view
	 * @alias Titanium_UI_Label.backgroundColor
	 * @property {String}
	 */
	this.backgroundColor = ''
	/**
	 * Get the the background color of the view
	 * @alias Titanium_UI_Label.getBackgroundColor
	 * @return {String}
	 */
	this.getBackgroundColor = function() { return this.backgroundColor; }
	/**
	 * Set the the background color of the view
	 * @param {String} value New value to set.
	 * @alias Titanium_UI_Label.setBackgroundColor
	 */
	this.setBackgroundColor = function(value) { this.backgroundColor = value; }
	/**
	 * the disabled background color of the view. (Android)
	 * @alias Titanium_UI_Label.backgroundDisabledColor
	 * @property {String}
	 */
	this.backgroundDisabledColor = ''
	/**
	 * Get the the disabled background color of the view. (Android)
	 * @alias Titanium_UI_Label.getBackgroundDisabledColor
	 * @return {String}
	 */
	this.getBackgroundDisabledColor = function() { return this.backgroundDisabledColor; }
	/**
	 * Set the the disabled background color of the view. (Android)
	 * @param {String} value New value to set.
	 * @alias Titanium_UI_Label.setBackgroundDisabledColor
	 */
	this.setBackgroundDisabledColor = function(value) { this.backgroundDisabledColor = value; }
	/**
	 * the disabled background image url of the view. (Android)
	 * @alias Titanium_UI_Label.backgroundDisabledImage
	 * @property {String}
	 */
	this.backgroundDisabledImage = ''
	/**
	 * Get the the disabled background image url of the view. (Android)
	 * @alias Titanium_UI_Label.getBackgroundDisabledImage
	 * @return {String}
	 */
	this.getBackgroundDisabledImage = function() { return this.backgroundDisabledImage; }
	/**
	 * Set the the disabled background image url of the view. (Android)
	 * @param {String} value New value to set.
	 * @alias Titanium_UI_Label.setBackgroundDisabledImage
	 */
	this.setBackgroundDisabledImage = function(value) { this.backgroundDisabledImage = value; }
	/**
	 * the focused background color of the view. focusable must be true for normal views. (Android)
	 * @alias Titanium_UI_Label.backgroundFocusedColor
	 * @property {String}
	 */
	this.backgroundFocusedColor = ''
	/**
	 * Get the the focused background color of the view. focusable must be true for normal views. (Android)
	 * @alias Titanium_UI_Label.getBackgroundFocusedColor
	 * @return {String}
	 */
	this.getBackgroundFocusedColor = function() { return this.backgroundFocusedColor; }
	/**
	 * Set the the focused background color of the view. focusable must be true for normal views. (Android)
	 * @param {String} value New value to set.
	 * @alias Titanium_UI_Label.setBackgroundFocusedColor
	 */
	this.setBackgroundFocusedColor = function(value) { this.backgroundFocusedColor = value; }
	/**
	 * the focused background image url of the view. focusable must be true for normal views. (Android)
	 * @alias Titanium_UI_Label.backgroundFocusedImage
	 * @property {String}
	 */
	this.backgroundFocusedImage = ''
	/**
	 * Get the the focused background image url of the view. focusable must be true for normal views. (Android)
	 * @alias Titanium_UI_Label.getBackgroundFocusedImage
	 * @return {String}
	 */
	this.getBackgroundFocusedImage = function() { return this.backgroundFocusedImage; }
	/**
	 * Set the the focused background image url of the view. focusable must be true for normal views. (Android)
	 * @param {String} value New value to set.
	 * @alias Titanium_UI_Label.setBackgroundFocusedImage
	 */
	this.setBackgroundFocusedImage = function(value) { this.backgroundFocusedImage = value; }
	/**
	 * a background gradient for the view with the properties: type,startPoint,endPoint,startRadius,endRadius,backfillStart,backfillEnd,colors.
	 * @alias Titanium_UI_Label.backgroundGradient
	 * @property {Object}
	 */
	this.backgroundGradient = {}
	/**
	 * Get the a background gradient for the view with the properties: type,startPoint,endPoint,startRadius,endRadius,backfillStart,backfillEnd,colors.
	 * @alias Titanium_UI_Label.getBackgroundGradient
	 * @return {Object}
	 */
	this.getBackgroundGradient = function() { return this.backgroundGradient; }
	/**
	 * Set the a background gradient for the view with the properties: type,startPoint,endPoint,startRadius,endRadius,backfillStart,backfillEnd,colors.
	 * @param {Object} value New value to set.
	 * @alias Titanium_UI_Label.setBackgroundGradient
	 */
	this.setBackgroundGradient = function(value) { this.backgroundGradient = value; }
	/**
	 * background image for the label
	 * @alias Titanium_UI_Label.backgroundImage
	 * @property {String}
	 */
	this.backgroundImage = ''
	/**
	 * Get the background image for the label
	 * @alias Titanium_UI_Label.getBackgroundImage
	 * @return {String}
	 */
	this.getBackgroundImage = function() { return this.backgroundImage; }
	/**
	 * Set the background image for the label
	 * @param {String} value New value to set.
	 * @alias Titanium_UI_Label.setBackgroundImage
	 */
	this.setBackgroundImage = function(value) { this.backgroundImage = value; }
	/**
	 * End caps specify the portion of an image that should not be resized when an image is stretched. This technique is used to implement buttons and other resizable image-based interface elements. When a button with end caps is resized, the resizing occurs only in the middle of the button, in the region between the end caps. The end caps themselves keep their original size and appearance. This property specifies the size of the left end cap. The middle (stretchable) portion is assumed to be 1 pixel wide. The right end cap is therefore computed by adding the size of the left end cap and the middle portion together and then subtracting that value from the width of the image
	 * @alias Titanium_UI_Label.backgroundLeftCap
	 * @property {Float}
	 */
	this.backgroundLeftCap = 0.0
	/**
	 * Get the End caps specify the portion of an image that should not be resized when an image is stretched. This technique is used to implement buttons and other resizable image-based interface elements. When a button with end caps is resized, the resizing occurs only in the middle of the button, in the region between the end caps. The end caps themselves keep their original size and appearance. This property specifies the size of the left end cap. The middle (stretchable) portion is assumed to be 1 pixel wide. The right end cap is therefore computed by adding the size of the left end cap and the middle portion together and then subtracting that value from the width of the image
	 * @alias Titanium_UI_Label.getBackgroundLeftCap
	 * @return {Float}
	 */
	this.getBackgroundLeftCap = function() { return this.backgroundLeftCap; }
	/**
	 * Set the End caps specify the portion of an image that should not be resized when an image is stretched. This technique is used to implement buttons and other resizable image-based interface elements. When a button with end caps is resized, the resizing occurs only in the middle of the button, in the region between the end caps. The end caps themselves keep their original size and appearance. This property specifies the size of the left end cap. The middle (stretchable) portion is assumed to be 1 pixel wide. The right end cap is therefore computed by adding the size of the left end cap and the middle portion together and then subtracting that value from the width of the image
	 * @param {Float} value New value to set.
	 * @alias Titanium_UI_Label.setBackgroundLeftCap
	 */
	this.setBackgroundLeftCap = function(value) { this.backgroundLeftCap = value; }
	/**
	 * the number of pixels to extend the background image past the label on the bottom
	 * @alias Titanium_UI_Label.backgroundPaddingBottom
	 * @property {Integer}
	 */
	this.backgroundPaddingBottom = 0
	/**
	 * Get the the number of pixels to extend the background image past the label on the bottom
	 * @alias Titanium_UI_Label.getBackgroundPaddingBottom
	 * @return {Integer}
	 */
	this.getBackgroundPaddingBottom = function() { return this.backgroundPaddingBottom; }
	/**
	 * Set the the number of pixels to extend the background image past the label on the bottom
	 * @param {Integer} value New value to set.
	 * @alias Titanium_UI_Label.setBackgroundPaddingBottom
	 */
	this.setBackgroundPaddingBottom = function(value) { this.backgroundPaddingBottom = value; }
	/**
	 * the number of pixels to extend the background image past the label on the left
	 * @alias Titanium_UI_Label.backgroundPaddingLeft
	 * @property {Integer}
	 */
	this.backgroundPaddingLeft = 0
	/**
	 * Get the the number of pixels to extend the background image past the label on the left
	 * @alias Titanium_UI_Label.getBackgroundPaddingLeft
	 * @return {Integer}
	 */
	this.getBackgroundPaddingLeft = function() { return this.backgroundPaddingLeft; }
	/**
	 * Set the the number of pixels to extend the background image past the label on the left
	 * @param {Integer} value New value to set.
	 * @alias Titanium_UI_Label.setBackgroundPaddingLeft
	 */
	this.setBackgroundPaddingLeft = function(value) { this.backgroundPaddingLeft = value; }
	/**
	 * the number of pixels to extend the background image past the label on the right
	 * @alias Titanium_UI_Label.backgroundPaddingRight
	 * @property {Integer}
	 */
	this.backgroundPaddingRight = 0
	/**
	 * Get the the number of pixels to extend the background image past the label on the right
	 * @alias Titanium_UI_Label.getBackgroundPaddingRight
	 * @return {Integer}
	 */
	this.getBackgroundPaddingRight = function() { return this.backgroundPaddingRight; }
	/**
	 * Set the the number of pixels to extend the background image past the label on the right
	 * @param {Integer} value New value to set.
	 * @alias Titanium_UI_Label.setBackgroundPaddingRight
	 */
	this.setBackgroundPaddingRight = function(value) { this.backgroundPaddingRight = value; }
	/**
	 * the number of pixels to extend the background image past the label on the top
	 * @alias Titanium_UI_Label.backgroundPaddingTop
	 * @property {Integer}
	 */
	this.backgroundPaddingTop = 0
	/**
	 * Get the the number of pixels to extend the background image past the label on the top
	 * @alias Titanium_UI_Label.getBackgroundPaddingTop
	 * @return {Integer}
	 */
	this.getBackgroundPaddingTop = function() { return this.backgroundPaddingTop; }
	/**
	 * Set the the number of pixels to extend the background image past the label on the top
	 * @param {Integer} value New value to set.
	 * @alias Titanium_UI_Label.setBackgroundPaddingTop
	 */
	this.setBackgroundPaddingTop = function(value) { this.backgroundPaddingTop = value; }
	/**
	 * the selected background color of the view. focusable must be true for normal views. (Android)
	 * @alias Titanium_UI_Label.backgroundSelectedColor
	 * @property {String}
	 */
	this.backgroundSelectedColor = ''
	/**
	 * Get the the selected background color of the view. focusable must be true for normal views. (Android)
	 * @alias Titanium_UI_Label.getBackgroundSelectedColor
	 * @return {String}
	 */
	this.getBackgroundSelectedColor = function() { return this.backgroundSelectedColor; }
	/**
	 * Set the the selected background color of the view. focusable must be true for normal views. (Android)
	 * @param {String} value New value to set.
	 * @alias Titanium_UI_Label.setBackgroundSelectedColor
	 */
	this.setBackgroundSelectedColor = function(value) { this.backgroundSelectedColor = value; }
	/**
	 * the selected background image url of the view. focusable must be true for normal views. (Android)
	 * @alias Titanium_UI_Label.backgroundSelectedImage
	 * @property {String}
	 */
	this.backgroundSelectedImage = ''
	/**
	 * Get the the selected background image url of the view. focusable must be true for normal views. (Android)
	 * @alias Titanium_UI_Label.getBackgroundSelectedImage
	 * @return {String}
	 */
	this.getBackgroundSelectedImage = function() { return this.backgroundSelectedImage; }
	/**
	 * Set the the selected background image url of the view. focusable must be true for normal views. (Android)
	 * @param {String} value New value to set.
	 * @alias Titanium_UI_Label.setBackgroundSelectedImage
	 */
	this.setBackgroundSelectedImage = function(value) { this.backgroundSelectedImage = value; }
	/**
	 * End caps specify the portion of an image that should not be resized when an image is stretched. This technique is used to implement buttons and other resizable image-based interface elements. When a button with end caps is resized, the resizing occurs only in the middle of the button, in the region between the end caps. The end caps themselves keep their original size and appearance. This property specifies the size of the top end cap. The middle (stretchable) portion is assumed to be 1 pixel wide. The bottom end cap is therefore computed by adding the size of the top end cap and the middle portion together and then subtracting that value from the height of the image
	 * @alias Titanium_UI_Label.backgroundTopCap
	 * @property {Float}
	 */
	this.backgroundTopCap = 0.0
	/**
	 * Get the End caps specify the portion of an image that should not be resized when an image is stretched. This technique is used to implement buttons and other resizable image-based interface elements. When a button with end caps is resized, the resizing occurs only in the middle of the button, in the region between the end caps. The end caps themselves keep their original size and appearance. This property specifies the size of the top end cap. The middle (stretchable) portion is assumed to be 1 pixel wide. The bottom end cap is therefore computed by adding the size of the top end cap and the middle portion together and then subtracting that value from the height of the image
	 * @alias Titanium_UI_Label.getBackgroundTopCap
	 * @return {Float}
	 */
	this.getBackgroundTopCap = function() { return this.backgroundTopCap; }
	/**
	 * Set the End caps specify the portion of an image that should not be resized when an image is stretched. This technique is used to implement buttons and other resizable image-based interface elements. When a button with end caps is resized, the resizing occurs only in the middle of the button, in the region between the end caps. The end caps themselves keep their original size and appearance. This property specifies the size of the top end cap. The middle (stretchable) portion is assumed to be 1 pixel wide. The bottom end cap is therefore computed by adding the size of the top end cap and the middle portion together and then subtracting that value from the height of the image
	 * @param {Float} value New value to set.
	 * @alias Titanium_UI_Label.setBackgroundTopCap
	 */
	this.setBackgroundTopCap = function(value) { this.backgroundTopCap = value; }
	/**
	 * the border color of the view
	 * @alias Titanium_UI_Label.borderColor
	 * @property {String}
	 */
	this.borderColor = ''
	/**
	 * Get the the border color of the view
	 * @alias Titanium_UI_Label.getBorderColor
	 * @return {String}
	 */
	this.getBorderColor = function() { return this.borderColor; }
	/**
	 * Set the the border color of the view
	 * @param {String} value New value to set.
	 * @alias Titanium_UI_Label.setBorderColor
	 */
	this.setBorderColor = function(value) { this.borderColor = value; }
	/**
	 * the border radius of the view
	 * @alias Titanium_UI_Label.borderRadius
	 * @property {Float}
	 */
	this.borderRadius = 0.0
	/**
	 * Get the the border radius of the view
	 * @alias Titanium_UI_Label.getBorderRadius
	 * @return {Float}
	 */
	this.getBorderRadius = function() { return this.borderRadius; }
	/**
	 * Set the the border radius of the view
	 * @param {Float} value New value to set.
	 * @alias Titanium_UI_Label.setBorderRadius
	 */
	this.setBorderRadius = function(value) { this.borderRadius = value; }
	/**
	 * the border width of the view
	 * @alias Titanium_UI_Label.borderWidth
	 * @property {Float}
	 */
	this.borderWidth = 0.0
	/**
	 * Get the the border width of the view
	 * @alias Titanium_UI_Label.getBorderWidth
	 * @return {Float}
	 */
	this.getBorderWidth = function() { return this.borderWidth; }
	/**
	 * Set the the border width of the view
	 * @param {Float} value New value to set.
	 * @alias Titanium_UI_Label.setBorderWidth
	 */
	this.setBorderWidth = function(value) { this.borderWidth = value; }
	/**
	 * property for the view bottom position. This position is relative to the view's parent. Can be either a float value or a dimension string ie 'auto' (default), '50%' (iPhone only).
	 * @alias Titanium_UI_Label.bottom
	 * @property {Float,String}
	 */
	this.bottom = 0.0
	/**
	 * Get the property for the view bottom position. This position is relative to the view's parent. Can be either a float value or a dimension string ie 'auto' (default), '50%' (iPhone only).
	 * @alias Titanium_UI_Label.getBottom
	 * @return {Float,String}
	 */
	this.getBottom = function() { return this.bottom; }
	/**
	 * Set the property for the view bottom position. This position is relative to the view's parent. Can be either a float value or a dimension string ie 'auto' (default), '50%' (iPhone only).
	 * @param {Float,String} value New value to set.
	 * @alias Titanium_UI_Label.setBottom
	 */
	this.setBottom = function(value) { this.bottom = value; }
	/**
	 * a dictionary with properties x and y to indicate the center of the views position relative to the parent view
	 * @alias Titanium_UI_Label.center
	 * @property {Object}
	 */
	this.center = {}
	/**
	 * Get the a dictionary with properties x and y to indicate the center of the views position relative to the parent view
	 * @alias Titanium_UI_Label.getCenter
	 * @return {Object}
	 */
	this.getCenter = function() { return this.center; }
	/**
	 * Set the a dictionary with properties x and y to indicate the center of the views position relative to the parent view
	 * @param {Object} value New value to set.
	 * @alias Titanium_UI_Label.setCenter
	 */
	this.setCenter = function(value) { this.center = value; }
	/**
	 * the color of the label
	 * @alias Titanium_UI_Label.color
	 * @property {String}
	 */
	this.color = ''
	/**
	 * Get the the color of the label
	 * @alias Titanium_UI_Label.getColor
	 * @return {String}
	 */
	this.getColor = function() { return this.color; }
	/**
	 * Set the the color of the label
	 * @param {String} value New value to set.
	 * @alias Titanium_UI_Label.setColor
	 */
	this.setColor = function(value) { this.color = value; }
	/**
	 * Turn on/off the addition of ellipses at the end of the label if the text is too large to fit. (Android Only, default false)
	 * @alias Titanium_UI_Label.ellipsize
	 * @property {bool}
	 */
	this.ellipsize = {}
	/**
	 * Get the Turn on/off the addition of ellipses at the end of the label if the text is too large to fit. (Android Only, default false)
	 * @alias Titanium_UI_Label.getEllipsize
	 * @return {bool}
	 */
	this.getEllipsize = function() { return this.ellipsize; }
	/**
	 * Set the Turn on/off the addition of ellipses at the end of the label if the text is too large to fit. (Android Only, default false)
	 * @param {bool} value New value to set.
	 * @alias Titanium_UI_Label.setEllipsize
	 */
	this.setEllipsize = function(value) { this.ellipsize = value; }
	/**
	 * Set true if you want a view to be focusable when navigating with the trackball or D-Pad. Default: false. (Android Only)
	 * @alias Titanium_UI_Label.focusable
	 * @property {Boolean}
	 */
	this.focusable = false
	/**
	 * Get the Set true if you want a view to be focusable when navigating with the trackball or D-Pad. Default: false. (Android Only)
	 * @alias Titanium_UI_Label.getFocusable
	 * @return {Boolean}
	 */
	this.getFocusable = function() { return this.focusable; }
	/**
	 * Set the Set true if you want a view to be focusable when navigating with the trackball or D-Pad. Default: false. (Android Only)
	 * @param {Boolean} value New value to set.
	 * @alias Titanium_UI_Label.setFocusable
	 */
	this.setFocusable = function(value) { this.focusable = value; }
	/**
	 * the label font object properties
	 * @alias Titanium_UI_Label.font
	 * @property {Object}
	 */
	this.font = {}
	/**
	 * Get the the label font object properties
	 * @alias Titanium_UI_Label.getFont
	 * @return {Object}
	 */
	this.getFont = function() { return this.font; }
	/**
	 * Set the the label font object properties
	 * @param {Object} value New value to set.
	 * @alias Titanium_UI_Label.setFont
	 */
	this.setFont = function(value) { this.font = value; }
	/**
	 * the font family
	 * @alias Titanium_UI_Label.font-family
	 * @property {String}
	 */
	this.font-family = ''
	/**
	 * Get the the font family
	 * @alias Titanium_UI_Label.getFont-family
	 * @return {String}
	 */
	this.getFont-family = function() { return this.font-family; }
	/**
	 * Set the the font family
	 * @param {String} value New value to set.
	 * @alias Titanium_UI_Label.setFont-family
	 */
	this.setFont-family = function(value) { this.font-family = value; }
	/**
	 * the font size
	 * @alias Titanium_UI_Label.font-size
	 * @property {String}
	 */
	this.font-size = ''
	/**
	 * Get the the font size
	 * @alias Titanium_UI_Label.getFont-size
	 * @return {String}
	 */
	this.getFont-size = function() { return this.font-size; }
	/**
	 * Set the the font size
	 * @param {String} value New value to set.
	 * @alias Titanium_UI_Label.setFont-size
	 */
	this.setFont-size = function(value) { this.font-size = value; }
	/**
	 * the font style, either normal or italics
	 * @alias Titanium_UI_Label.font-style
	 * @property {String}
	 */
	this.font-style = ''
	/**
	 * Get the the font style, either normal or italics
	 * @alias Titanium_UI_Label.getFont-style
	 * @return {String}
	 */
	this.getFont-style = function() { return this.font-style; }
	/**
	 * Set the the font style, either normal or italics
	 * @param {String} value New value to set.
	 * @alias Titanium_UI_Label.setFont-style
	 */
	this.setFont-style = function(value) { this.font-style = value; }
	/**
	 * the font weight, either normal or bold
	 * @alias Titanium_UI_Label.font-weight
	 * @property {String}
	 */
	this.font-weight = ''
	/**
	 * Get the the font weight, either normal or bold
	 * @alias Titanium_UI_Label.getFont-weight
	 * @return {String}
	 */
	this.getFont-weight = function() { return this.font-weight; }
	/**
	 * Set the the font weight, either normal or bold
	 * @param {String} value New value to set.
	 * @alias Titanium_UI_Label.setFont-weight
	 */
	this.setFont-weight = function(value) { this.font-weight = value; }
	/**
	 * property for the view height. Can be either a float value or a dimension string ie 'auto' (default), '50%' (iPhone only).
	 * @alias Titanium_UI_Label.height
	 * @property {Float,String}
	 */
	this.height = 0.0
	/**
	 * Get the property for the view height. Can be either a float value or a dimension string ie 'auto' (default), '50%' (iPhone only).
	 * @alias Titanium_UI_Label.getHeight
	 * @return {Float,String}
	 */
	this.getHeight = function() { return this.height; }
	/**
	 * Set the property for the view height. Can be either a float value or a dimension string ie 'auto' (default), '50%' (iPhone only).
	 * @param {Float,String} value New value to set.
	 * @alias Titanium_UI_Label.setHeight
	 */
	this.setHeight = function(value) { this.height = value; }
	/**
	 * the color of the label when in the highlighted state
	 * @alias Titanium_UI_Label.highlightedColor
	 * @property {String}
	 */
	this.highlightedColor = ''
	/**
	 * Get the the color of the label when in the highlighted state
	 * @alias Titanium_UI_Label.getHighlightedColor
	 * @return {String}
	 */
	this.getHighlightedColor = function() { return this.highlightedColor; }
	/**
	 * Set the the color of the label when in the highlighted state
	 * @param {String} value New value to set.
	 * @alias Titanium_UI_Label.setHighlightedColor
	 */
	this.setHighlightedColor = function(value) { this.highlightedColor = value; }
	/**
	 * simple html formatting. (Android Only)
	 * @alias Titanium_UI_Label.html
	 * @property {String}
	 */
	this.html = ''
	/**
	 * Get the simple html formatting. (Android Only)
	 * @alias Titanium_UI_Label.getHtml
	 * @return {String}
	 */
	this.getHtml = function() { return this.html; }
	/**
	 * Set the simple html formatting. (Android Only)
	 * @param {String} value New value to set.
	 * @alias Titanium_UI_Label.setHtml
	 */
	this.setHtml = function(value) { this.html = value; }
	/**
	 * property for the view left position. This position is relative to the view's parent. Can be either a float value or a dimension string ie 'auto' (default), '50%' (iPhone only).
	 * @alias Titanium_UI_Label.left
	 * @property {Float,String}
	 */
	this.left = 0.0
	/**
	 * Get the property for the view left position. This position is relative to the view's parent. Can be either a float value or a dimension string ie 'auto' (default), '50%' (iPhone only).
	 * @alias Titanium_UI_Label.getLeft
	 * @return {Float,String}
	 */
	this.getLeft = function() { return this.left; }
	/**
	 * Set the property for the view left position. This position is relative to the view's parent. Can be either a float value or a dimension string ie 'auto' (default), '50%' (iPhone only).
	 * @param {Float,String} value New value to set.
	 * @alias Titanium_UI_Label.setLeft
	 */
	this.setLeft = function(value) { this.left = value; }
	/**
	 * the minimum size of the font when the font is sized based on the contents.  Enables font scaling to fit and forces the label content to be limited to a single line
	 * @alias Titanium_UI_Label.minimumFontSize
	 * @property {Integer}
	 */
	this.minimumFontSize = 0
	/**
	 * Get the the minimum size of the font when the font is sized based on the contents.  Enables font scaling to fit and forces the label content to be limited to a single line
	 * @alias Titanium_UI_Label.getMinimumFontSize
	 * @return {Integer}
	 */
	this.getMinimumFontSize = function() { return this.minimumFontSize; }
	/**
	 * Set the the minimum size of the font when the font is sized based on the contents.  Enables font scaling to fit and forces the label content to be limited to a single line
	 * @param {Integer} value New value to set.
	 * @alias Titanium_UI_Label.setMinimumFontSize
	 */
	this.setMinimumFontSize = function(value) { this.minimumFontSize = value; }
	/**
	 * the opacity from 0.0-1.0
	 * @alias Titanium_UI_Label.opacity
	 * @property {Float}
	 */
	this.opacity = 0.0
	/**
	 * Get the the opacity from 0.0-1.0
	 * @alias Titanium_UI_Label.getOpacity
	 * @return {Float}
	 */
	this.getOpacity = function() { return this.opacity; }
	/**
	 * Set the the opacity from 0.0-1.0
	 * @param {Float} value New value to set.
	 * @alias Titanium_UI_Label.setOpacity
	 */
	this.setOpacity = function(value) { this.opacity = value; }
	/**
	 * property for the view right position. This position is relative to the view's parent. Can be either a float value or a dimension string ie 'auto' (default), '50%' (iPhone only).
	 * @alias Titanium_UI_Label.right
	 * @property {Float,String}
	 */
	this.right = 0.0
	/**
	 * Get the property for the view right position. This position is relative to the view's parent. Can be either a float value or a dimension string ie 'auto' (default), '50%' (iPhone only).
	 * @alias Titanium_UI_Label.getRight
	 * @return {Float,String}
	 */
	this.getRight = function() { return this.right; }
	/**
	 * Set the property for the view right position. This position is relative to the view's parent. Can be either a float value or a dimension string ie 'auto' (default), '50%' (iPhone only).
	 * @param {Float,String} value New value to set.
	 * @alias Titanium_UI_Label.setRight
	 */
	this.setRight = function(value) { this.right = value; }
	/**
	 * the text shadow color
	 * @alias Titanium_UI_Label.shadowColor
	 * @property {String}
	 */
	this.shadowColor = ''
	/**
	 * Get the the text shadow color
	 * @alias Titanium_UI_Label.getShadowColor
	 * @return {String}
	 */
	this.getShadowColor = function() { return this.shadowColor; }
	/**
	 * Set the the text shadow color
	 * @param {String} value New value to set.
	 * @alias Titanium_UI_Label.setShadowColor
	 */
	this.setShadowColor = function(value) { this.shadowColor = value; }
	/**
	 * the shadow offset as a dictionary with the properties x and y
	 * @alias Titanium_UI_Label.shadowOffset
	 * @property {Object}
	 */
	this.shadowOffset = {}
	/**
	 * Get the the shadow offset as a dictionary with the properties x and y
	 * @alias Titanium_UI_Label.getShadowOffset
	 * @return {Object}
	 */
	this.getShadowOffset = function() { return this.shadowOffset; }
	/**
	 * Set the the shadow offset as a dictionary with the properties x and y
	 * @param {Object} value New value to set.
	 * @alias Titanium_UI_Label.setShadowOffset
	 */
	this.setShadowOffset = function(value) { this.shadowOffset = value; }
	/**
	 * the size of the view as a dictionary of width and height properties
	 * @alias Titanium_UI_Label.size
	 * @property {Object}
	 */
	this.size = {}
	/**
	 * Get the the size of the view as a dictionary of width and height properties
	 * @alias Titanium_UI_Label.getSize
	 * @return {Object}
	 */
	this.getSize = function() { return this.size; }
	/**
	 * Set the the size of the view as a dictionary of width and height properties
	 * @param {Object} value New value to set.
	 * @alias Titanium_UI_Label.setSize
	 */
	this.setSize = function(value) { this.size = value; }
	/**
	 * One of Titanium.UI.Android.SOFT_KEYBOARD_DEFAULT_ON_FOCUS, Titanium.UI.Android.SOFT_KEYBOARD_HIDE_ON_FOCUS, or Titanium.UI.Android.SOFT_KEYBOARD_SHOW_ON_FOCUS. (Android only)
	 * @alias Titanium_UI_Label.softKeyboardOnFocus
	 * @property {Integer}
	 */
	this.softKeyboardOnFocus = 0
	/**
	 * Get the One of Titanium.UI.Android.SOFT_KEYBOARD_DEFAULT_ON_FOCUS, Titanium.UI.Android.SOFT_KEYBOARD_HIDE_ON_FOCUS, or Titanium.UI.Android.SOFT_KEYBOARD_SHOW_ON_FOCUS. (Android only)
	 * @alias Titanium_UI_Label.getSoftKeyboardOnFocus
	 * @return {Integer}
	 */
	this.getSoftKeyboardOnFocus = function() { return this.softKeyboardOnFocus; }
	/**
	 * Set the One of Titanium.UI.Android.SOFT_KEYBOARD_DEFAULT_ON_FOCUS, Titanium.UI.Android.SOFT_KEYBOARD_HIDE_ON_FOCUS, or Titanium.UI.Android.SOFT_KEYBOARD_SHOW_ON_FOCUS. (Android only)
	 * @param {Integer} value New value to set.
	 * @alias Titanium_UI_Label.setSoftKeyboardOnFocus
	 */
	this.setSoftKeyboardOnFocus = function(value) { this.softKeyboardOnFocus = value; }
	/**
	 * the text of the label
	 * @alias Titanium_UI_Label.text
	 * @property {String}
	 */
	this.text = ''
	/**
	 * Get the the text of the label
	 * @alias Titanium_UI_Label.getText
	 * @return {String}
	 */
	this.getText = function() { return this.text; }
	/**
	 * Set the the text of the label
	 * @param {String} value New value to set.
	 * @alias Titanium_UI_Label.setText
	 */
	this.setText = function(value) { this.text = value; }
	/**
	 * the alignment constant or string value such as left, center or right
	 * @alias Titanium_UI_Label.textAlign
	 * @property {String,Integer}
	 */
	this.textAlign = ''
	/**
	 * Get the the alignment constant or string value such as left, center or right
	 * @alias Titanium_UI_Label.getTextAlign
	 * @return {String,Integer}
	 */
	this.getTextAlign = function() { return this.textAlign; }
	/**
	 * Set the the alignment constant or string value such as left, center or right
	 * @param {String,Integer} value New value to set.
	 * @alias Titanium_UI_Label.setTextAlign
	 */
	this.setTextAlign = function(value) { this.textAlign = value; }
	/**
	 * the key in the locale file to use for the text property
	 * @alias Titanium_UI_Label.textid
	 * @property {String}
	 */
	this.textid = ''
	/**
	 * Get the the key in the locale file to use for the text property
	 * @alias Titanium_UI_Label.getTextid
	 * @return {String}
	 */
	this.getTextid = function() { return this.textid; }
	/**
	 * Set the the key in the locale file to use for the text property
	 * @param {String} value New value to set.
	 * @alias Titanium_UI_Label.setTextid
	 */
	this.setTextid = function(value) { this.textid = value; }
	/**
	 * property for the view top position. This position is relative to the view's parent. Can be either a float value or a dimension string ie 'auto' (default), '50%' (iPhone only).
	 * @alias Titanium_UI_Label.top
	 * @property {Float,String}
	 */
	this.top = 0.0
	/**
	 * Get the property for the view top position. This position is relative to the view's parent. Can be either a float value or a dimension string ie 'auto' (default), '50%' (iPhone only).
	 * @alias Titanium_UI_Label.getTop
	 * @return {Float,String}
	 */
	this.getTop = function() { return this.top; }
	/**
	 * Set the property for the view top position. This position is relative to the view's parent. Can be either a float value or a dimension string ie 'auto' (default), '50%' (iPhone only).
	 * @param {Float,String} value New value to set.
	 * @alias Titanium_UI_Label.setTop
	 */
	this.setTop = function(value) { this.top = value; }
	/**
	 * a boolean indicating if the view should receive touch events (true, default) or forward them to peers (false)
	 * @alias Titanium_UI_Label.touchEnabled
	 * @property {Boolean}
	 */
	this.touchEnabled = false
	/**
	 * Get the a boolean indicating if the view should receive touch events (true, default) or forward them to peers (false)
	 * @alias Titanium_UI_Label.getTouchEnabled
	 * @return {Boolean}
	 */
	this.getTouchEnabled = function() { return this.touchEnabled; }
	/**
	 * Set the a boolean indicating if the view should receive touch events (true, default) or forward them to peers (false)
	 * @param {Boolean} value New value to set.
	 * @alias Titanium_UI_Label.setTouchEnabled
	 */
	this.setTouchEnabled = function(value) { this.touchEnabled = value; }
	/**
	 * the transformation matrix to apply to the view
	 * @alias Titanium_UI_Label.transform
	 * @property {Object}
	 */
	this.transform = {}
	/**
	 * Get the the transformation matrix to apply to the view
	 * @alias Titanium_UI_Label.getTransform
	 * @return {Object}
	 */
	this.getTransform = function() { return this.transform; }
	/**
	 * Set the the transformation matrix to apply to the view
	 * @param {Object} value New value to set.
	 * @alias Titanium_UI_Label.setTransform
	 */
	this.setTransform = function(value) { this.transform = value; }
	/**
	 * a boolean of the visibility of the view
	 * @alias Titanium_UI_Label.visible
	 * @property {Boolean}
	 */
	this.visible = false
	/**
	 * Get the a boolean of the visibility of the view
	 * @alias Titanium_UI_Label.getVisible
	 * @return {Boolean}
	 */
	this.getVisible = function() { return this.visible; }
	/**
	 * Set the a boolean of the visibility of the view
	 * @param {Boolean} value New value to set.
	 * @alias Titanium_UI_Label.setVisible
	 */
	this.setVisible = function(value) { this.visible = value; }
	/**
	 * property for the view width. Can be either a float value or a dimension string ie 'auto' (default), '50%' (iPhone only).
	 * @alias Titanium_UI_Label.width
	 * @property {Float,String}
	 */
	this.width = 0.0
	/**
	 * Get the property for the view width. Can be either a float value or a dimension string ie 'auto' (default), '50%' (iPhone only).
	 * @alias Titanium_UI_Label.getWidth
	 * @return {Float,String}
	 */
	this.getWidth = function() { return this.width; }
	/**
	 * Set the property for the view width. Can be either a float value or a dimension string ie 'auto' (default), '50%' (iPhone only).
	 * @param {Float,String} value New value to set.
	 * @alias Titanium_UI_Label.setWidth
	 */
	this.setWidth = function(value) { this.width = value; }
	/**
	 * Turn on/off word wrapping in the label. (Android Only - default true)
	 * @alias Titanium_UI_Label.wordWrap
	 * @property {bool}
	 */
	this.wordWrap = {}
	/**
	 * Get the Turn on/off word wrapping in the label. (Android Only - default true)
	 * @alias Titanium_UI_Label.getWordWrap
	 * @return {bool}
	 */
	this.getWordWrap = function() { return this.wordWrap; }
	/**
	 * Set the Turn on/off word wrapping in the label. (Android Only - default true)
	 * @param {bool} value New value to set.
	 * @alias Titanium_UI_Label.setWordWrap
	 */
	this.setWordWrap = function(value) { this.wordWrap = value; }
	/**
	 * the z index position relative to other sibling views
	 * @alias Titanium_UI_Label.zIndex
	 * @property {Integer}
	 */
	this.zIndex = 0
	/**
	 * Get the the z index position relative to other sibling views
	 * @alias Titanium_UI_Label.getZIndex
	 * @return {Integer}
	 */
	this.getZIndex = function() { return this.zIndex; }
	/**
	 * Set the the z index position relative to other sibling views
	 * @param {Integer} value New value to set.
	 * @alias Titanium_UI_Label.setZIndex
	 */
	this.setZIndex = function(value) { this.zIndex = value; }
	/**
	 * add a child to the view hierarchy
	 * @param {Object} view the view to add to this views hiearchy
	 * @alias Titanium_UI_Label.add
	 */
	this.add = function add(view) { }
	/**
	 * add an event listener for the instance to receive view triggered events
	 * @param {String} name name of the event
	 * @param {Function} callback callback function to invoke when the event is fired
	 * @alias Titanium_UI_Label.addEventListener
	 */
	this.addEventListener = function addEventListener(name,callback) { }
	/**
	 * animate the view
	 * @param {Object} obj either a dictionary of animation properties or an Animation object
	 * @param {Function} callback function to be invoked upon completion of the animation
	 * @alias Titanium_UI_Label.animate
	 */
	this.animate = function animate(obj,callback) { }
	/**
	 * fire a synthesized event to the views listener
	 * @param {String} name name of the event
	 * @param {Object} event event object
	 * @alias Titanium_UI_Label.fireEvent
	 */
	this.fireEvent = function fireEvent(name,event) { }
	/**
	 * hide the view
	 * @alias Titanium_UI_Label.hide
	 */
	this.hide = function hide() { }
	/**
	 * remove a previously add view from the view hiearchy
	 * @param {Object} view the view to remove from this views hiearchy
	 * @alias Titanium_UI_Label.remove
	 */
	this.remove = function remove(view) { }
	/**
	 * remove a previously added event listener
	 * @param {String} name name of the event
	 * @param {Function} callback callback function passed in addEventListener
	 * @alias Titanium_UI_Label.removeEventListener
	 */
	this.removeEventListener = function removeEventListener(name,callback) { }
	/**
	 * make the view visible
	 * @alias Titanium_UI_Label.show
	 */
	this.show = function show() { }
	/**
	 * return a Blob image of the rendered view
	 * @param {Function} f function to be invoked upon completion. if non-null, this method will be performed asynchronously. if null, it will be performed immediately
	 * @alias Titanium_UI_Label.toImage
	 * @return {Object}
	 */
	this.toImage = function toImage(f) { return {}; }
};

/**
 * The Option Dialog is created by Titanium.UI.createOptionDialog and allows you to show a modal dialog of one or more options to the user.
 * @since 0.8
 */
function Titanium_UI_OptionDialog() {
	/**
	 * A Titanium.UI.View. Allows for arbitrary contents inside a native dialog. Works for any dialog. (Android)
	 * @alias Titanium_UI_OptionDialog.androidView
	 * @property {Object}
	 */
	this.androidView = {}
	/**
	 * Get the A Titanium.UI.View. Allows for arbitrary contents inside a native dialog. Works for any dialog. (Android)
	 * @alias Titanium_UI_OptionDialog.getAndroidView
	 * @return {Object}
	 */
	this.getAndroidView = function() { return this.androidView; }
	/**
	 * Set the A Titanium.UI.View. Allows for arbitrary contents inside a native dialog. Works for any dialog. (Android)
	 * @param {Object} value New value to set.
	 * @alias Titanium_UI_OptionDialog.setAndroidView
	 */
	this.setAndroidView = function(value) { this.androidView = value; }
	/**
	 * an index to indicate which button should be the cancel button
	 * @alias Titanium_UI_OptionDialog.cancel
	 * @property {Integer}
	 */
	this.cancel = 0
	/**
	 * Get the an index to indicate which button should be the cancel button
	 * @alias Titanium_UI_OptionDialog.getCancel
	 * @return {Integer}
	 */
	this.getCancel = function() { return this.cancel; }
	/**
	 * Set the an index to indicate which button should be the cancel button
	 * @param {Integer} value New value to set.
	 * @alias Titanium_UI_OptionDialog.setCancel
	 */
	this.setCancel = function(value) { this.cancel = value; }
	/**
	 * the destructive button (indicated by a visual clue in the UI)
	 * @alias Titanium_UI_OptionDialog.destructive
	 * @property {Integer}
	 */
	this.destructive = 0
	/**
	 * Get the the destructive button (indicated by a visual clue in the UI)
	 * @alias Titanium_UI_OptionDialog.getDestructive
	 * @return {Integer}
	 */
	this.getDestructive = function() { return this.destructive; }
	/**
	 * Set the the destructive button (indicated by a visual clue in the UI)
	 * @param {Integer} value New value to set.
	 * @alias Titanium_UI_OptionDialog.setDestructive
	 */
	this.setDestructive = function(value) { this.destructive = value; }
	/**
	 * array of button names as strings
	 * @alias Titanium_UI_OptionDialog.options
	 * @property {Array}
	 */
	this.options = []
	/**
	 * Get the array of button names as strings
	 * @alias Titanium_UI_OptionDialog.getOptions
	 * @return {Array}
	 */
	this.getOptions = function() { return this.options; }
	/**
	 * Set the array of button names as strings
	 * @param {Array} value New value to set.
	 * @alias Titanium_UI_OptionDialog.setOptions
	 */
	this.setOptions = function(value) { this.options = value; }
	/**
	 * the title of the dialog
	 * @alias Titanium_UI_OptionDialog.title
	 * @property {String}
	 */
	this.title = ''
	/**
	 * Get the the title of the dialog
	 * @alias Titanium_UI_OptionDialog.getTitle
	 * @return {String}
	 */
	this.getTitle = function() { return this.title; }
	/**
	 * Set the the title of the dialog
	 * @param {String} value New value to set.
	 * @alias Titanium_UI_OptionDialog.setTitle
	 */
	this.setTitle = function(value) { this.title = value; }
	/**
	 * the key in the locale file to use for the title property
	 * @alias Titanium_UI_OptionDialog.titleid
	 * @property {String}
	 */
	this.titleid = ''
	/**
	 * Get the the key in the locale file to use for the title property
	 * @alias Titanium_UI_OptionDialog.getTitleid
	 * @return {String}
	 */
	this.getTitleid = function() { return this.titleid; }
	/**
	 * Set the the key in the locale file to use for the title property
	 * @param {String} value New value to set.
	 * @alias Titanium_UI_OptionDialog.setTitleid
	 */
	this.setTitleid = function(value) { this.titleid = value; }
	/**
	 * cause the dialog to become visible
	 * @alias Titanium_UI_OptionDialog.show
	 */
	this.show = function show() { }
};

/**
 * A Picker is created by the method Titanium.UI.createPicker.  A Picker can be used to select one or more fixed values.
 * @since 0.8
 */
function Titanium_UI_Picker() {
	/**
	 * array of column values
	 * @alias Titanium_UI_Picker.columns
	 * @property {Array}
	 */
	this.columns = []
	/**
	 * Get the array of column values
	 * @alias Titanium_UI_Picker.getColumns
	 * @return {Array}
	 */
	this.getColumns = function() { return this.columns; }
	/**
	 * Set the array of column values
	 * @param {Array} value New value to set.
	 * @alias Titanium_UI_Picker.setColumns
	 */
	this.setColumns = function(value) { this.columns = value; }
	/**
	 * the duration value in milliseconds for count down timer pickers. (Note that Titanium's Android implementation does not support the countdown timer.)
	 * @alias Titanium_UI_Picker.countDownDuration
	 * @property {Double}
	 */
	this.countDownDuration = 0.0
	/**
	 * Get the the duration value in milliseconds for count down timer pickers. (Note that Titanium's Android implementation does not support the countdown timer.)
	 * @alias Titanium_UI_Picker.getCountDownDuration
	 * @return {Double}
	 */
	this.getCountDownDuration = function() { return this.countDownDuration; }
	/**
	 * Set the the duration value in milliseconds for count down timer pickers. (Note that Titanium's Android implementation does not support the countdown timer.)
	 * @param {Double} value New value to set.
	 * @alias Titanium_UI_Picker.setCountDownDuration
	 */
	this.setCountDownDuration = function(value) { this.countDownDuration = value; }
	/**
	 * the locale used for displaying Date/Time pickers values
	 * @alias Titanium_UI_Picker.locale
	 * @property {String}
	 */
	this.locale = ''
	/**
	 * Get the the locale used for displaying Date/Time pickers values
	 * @alias Titanium_UI_Picker.getLocale
	 * @return {String}
	 */
	this.getLocale = function() { return this.locale; }
	/**
	 * Set the the locale used for displaying Date/Time pickers values
	 * @param {String} value New value to set.
	 * @alias Titanium_UI_Picker.setLocale
	 */
	this.setLocale = function(value) { this.locale = value; }
	/**
	 * the minimum Date/Time for value for date pickers
	 * @alias Titanium_UI_Picker.minDate
	 * @property {Date}
	 */
	this.minDate = new Date()
	/**
	 * Get the the minimum Date/Time for value for date pickers
	 * @alias Titanium_UI_Picker.getMinDate
	 * @return {Date}
	 */
	this.getMinDate = function() { return this.minDate; }
	/**
	 * Set the the minimum Date/Time for value for date pickers
	 * @param {Date} value New value to set.
	 * @alias Titanium_UI_Picker.setMinDate
	 */
	this.setMinDate = function(value) { this.minDate = value; }
	/**
	 * property to set the interval displayed by the minutes wheel (for example, 15 minutes). The interval value must be evenly divided into 60; if it is not, the default value is used. The default and minimum values are 1; the maximum value is 30.  (Not currently supported on Android.)
	 * @alias Titanium_UI_Picker.minuteInterval
	 * @property {Integer}
	 */
	this.minuteInterval = 0
	/**
	 * Get the property to set the interval displayed by the minutes wheel (for example, 15 minutes). The interval value must be evenly divided into 60; if it is not, the default value is used. The default and minimum values are 1; the maximum value is 30.  (Not currently supported on Android.)
	 * @alias Titanium_UI_Picker.getMinuteInterval
	 * @return {Integer}
	 */
	this.getMinuteInterval = function() { return this.minuteInterval; }
	/**
	 * Set the property to set the interval displayed by the minutes wheel (for example, 15 minutes). The interval value must be evenly divided into 60; if it is not, the default value is used. The default and minimum values are 1; the maximum value is 30.  (Not currently supported on Android.)
	 * @param {Integer} value New value to set.
	 * @alias Titanium_UI_Picker.setMinuteInterval
	 */
	this.setMinuteInterval = function(value) { this.minuteInterval = value; }
	/**
	 * for basic picker, boolean value to indicate whether the visual selection style is shown. On the iPhone, this is a blue selected bar.
	 * @alias Titanium_UI_Picker.selectionIndicator
	 * @property {Boolean}
	 */
	this.selectionIndicator = false
	/**
	 * Get the for basic picker, boolean value to indicate whether the visual selection style is shown. On the iPhone, this is a blue selected bar.
	 * @alias Titanium_UI_Picker.getSelectionIndicator
	 * @return {Boolean}
	 */
	this.getSelectionIndicator = function() { return this.selectionIndicator; }
	/**
	 * Set the for basic picker, boolean value to indicate whether the visual selection style is shown. On the iPhone, this is a blue selected bar.
	 * @param {Boolean} value New value to set.
	 * @alias Titanium_UI_Picker.setSelectionIndicator
	 */
	this.setSelectionIndicator = function(value) { this.selectionIndicator = value; }
	/**
	 * the type constant for the picker. One of Titanium.UI.PICKER_TYPE_PLAIN (default), Titanium.UI.PICKER_TYPE_DATE_AND_TIME, Titanium.UI.PICKER_TYPE_DATE, Titanium.UI.PICKER_TYPE_TIME or Titanium.UI.PICKER_TYPE_COUNT_DOWN_TIMER. (Note that Titanium's Android implementation does not support the countdown timer or date+time varieties.)
	 * @alias Titanium_UI_Picker.type
	 * @property {Integer}
	 */
	this.type = 0
	/**
	 * Get the the type constant for the picker. One of Titanium.UI.PICKER_TYPE_PLAIN (default), Titanium.UI.PICKER_TYPE_DATE_AND_TIME, Titanium.UI.PICKER_TYPE_DATE, Titanium.UI.PICKER_TYPE_TIME or Titanium.UI.PICKER_TYPE_COUNT_DOWN_TIMER. (Note that Titanium's Android implementation does not support the countdown timer or date+time varieties.)
	 * @alias Titanium_UI_Picker.getType
	 * @return {Integer}
	 */
	this.getType = function() { return this.type; }
	/**
	 * Set the the type constant for the picker. One of Titanium.UI.PICKER_TYPE_PLAIN (default), Titanium.UI.PICKER_TYPE_DATE_AND_TIME, Titanium.UI.PICKER_TYPE_DATE, Titanium.UI.PICKER_TYPE_TIME or Titanium.UI.PICKER_TYPE_COUNT_DOWN_TIMER. (Note that Titanium's Android implementation does not support the countdown timer or date+time varieties.)
	 * @param {Integer} value New value to set.
	 * @alias Titanium_UI_Picker.setType
	 */
	this.setType = function(value) { this.type = value; }
	/**
	 * (Android only, default false.) An indicator that you wish to use a non-native Android control that looks and behaves more like the iOS picker in the sense that the user selects values by spinning a wheel.  (The native Android spinner is more like a conventional "dropdown".)  Note that this option works both plain pickers, date pickers and time pickers.
	 * @alias Titanium_UI_Picker.useSpinner
	 * @property {Boolean}
	 */
	this.useSpinner = false
	/**
	 * Get the (Android only, default false.) An indicator that you wish to use a non-native Android control that looks and behaves more like the iOS picker in the sense that the user selects values by spinning a wheel.  (The native Android spinner is more like a conventional "dropdown".)  Note that this option works both plain pickers, date pickers and time pickers.
	 * @alias Titanium_UI_Picker.getUseSpinner
	 * @return {Boolean}
	 */
	this.getUseSpinner = function() { return this.useSpinner; }
	/**
	 * Set the (Android only, default false.) An indicator that you wish to use a non-native Android control that looks and behaves more like the iOS picker in the sense that the user selects values by spinning a wheel.  (The native Android spinner is more like a conventional "dropdown".)  Note that this option works both plain pickers, date pickers and time pickers.
	 * @param {Boolean} value New value to set.
	 * @alias Titanium_UI_Picker.setUseSpinner
	 */
	this.setUseSpinner = function(value) { this.useSpinner = value; }
	/**
	 * the Date/Time value for date pickers
	 * @alias Titanium_UI_Picker.value
	 * @property {Date}
	 */
	this.value = new Date()
	/**
	 * Get the the Date/Time value for date pickers
	 * @alias Titanium_UI_Picker.getValue
	 * @return {Date}
	 */
	this.getValue = function() { return this.value; }
	/**
	 * Set the the Date/Time value for date pickers
	 * @param {Date} value New value to set.
	 * @alias Titanium_UI_Picker.setValue
	 */
	this.setValue = function(value) { this.value = value; }
	/**
	 * (Android only.)  This is relevant only if you set useSpinner to true, and it is relevant only for the plain picker (not date/time).  By default, the spinner-style Android picker will show 5 rows: the one in the middle which is selected, and then 2 above and below.  You can set this to allow more (use an odd number to be sure the selected row is in the middle.)
	 * @alias Titanium_UI_Picker.visibleItems
	 * @property {Integer}
	 */
	this.visibleItems = 0
	/**
	 * Get the (Android only.)  This is relevant only if you set useSpinner to true, and it is relevant only for the plain picker (not date/time).  By default, the spinner-style Android picker will show 5 rows: the one in the middle which is selected, and then 2 above and below.  You can set this to allow more (use an odd number to be sure the selected row is in the middle.)
	 * @alias Titanium_UI_Picker.getVisibleItems
	 * @return {Integer}
	 */
	this.getVisibleItems = function() { return this.visibleItems; }
	/**
	 * Set the (Android only.)  This is relevant only if you set useSpinner to true, and it is relevant only for the plain picker (not date/time).  By default, the spinner-style Android picker will show 5 rows: the one in the middle which is selected, and then 2 above and below.  You can set this to allow more (use an odd number to be sure the selected row is in the middle.)
	 * @param {Integer} value New value to set.
	 * @alias Titanium_UI_Picker.setVisibleItems
	 */
	this.setVisibleItems = function(value) { this.visibleItems = value; }
	/**
	 * add an array of rows, a single row or a column to the picker
	 * @param {Array,Object} data add an array of rows, a single row or a column to the picker
	 * @alias Titanium_UI_Picker.add
	 */
	this.add = function add(data) { }
	/**
	 * add an event listener for the instance to receive view triggered events
	 * @param {String} name name of the event
	 * @param {Function} callback callback function to invoke when the event is fired
	 * @alias Titanium_UI_Picker.addEventListener
	 */
	this.addEventListener = function addEventListener(name,callback) { }
	/**
	 * fire a synthesized event to the views listener
	 * @param {String} name name of the event
	 * @param {Object} event event object
	 * @alias Titanium_UI_Picker.fireEvent
	 */
	this.fireEvent = function fireEvent(name,event) { }
	/**
	 * get the selected row object for column
	 * @param {Integer} index for the column index, return the row object or nil if not found
	 * @alias Titanium_UI_Picker.getSelectedRow
	 * @return {Object}
	 */
	this.getSelectedRow = function getSelectedRow(index) { return {}; }
	/**
	 * causes the picker to reload the values from the new column.
	 * @param {Object} column new column to load
	 * @alias Titanium_UI_Picker.reloadColumn
	 */
	this.reloadColumn = function reloadColumn(column) { }
	/**
	 * remove a previously added event listener
	 * @param {String} name name of the event
	 * @param {Function} callback callback function passed in addEventListener
	 * @alias Titanium_UI_Picker.removeEventListener
	 */
	this.removeEventListener = function removeEventListener(name,callback) { }
	/**
	 * set the column's row to the selected state
	 * @param {Integer} column the column index
	 * @param {Integer} row the row index
	 * @param {Boolean} animated boolean to indicate if the selection should be animated (default) (optional)
	 * @alias Titanium_UI_Picker.setSelectedRow
	 */
	this.setSelectedRow = function setSelectedRow(column,row,animated) { }
};

/**
 * The picker row object created by Titanium.UI.createPickerColumn.
 * @since 0.9
 */
function Titanium_UI_PickerColumn() {
	/**
	 * a dictionary with properties x and y to indicate the anchor point value. anchor specifies the position by which animation should occur. center is 0.5, 0.5
	 * @alias Titanium_UI_PickerColumn.anchorPoint
	 * @property {Object}
	 */
	this.anchorPoint = {}
	/**
	 * Get the a dictionary with properties x and y to indicate the anchor point value. anchor specifies the position by which animation should occur. center is 0.5, 0.5
	 * @alias Titanium_UI_PickerColumn.getAnchorPoint
	 * @return {Object}
	 */
	this.getAnchorPoint = function() { return this.anchorPoint; }
	/**
	 * Set the a dictionary with properties x and y to indicate the anchor point value. anchor specifies the position by which animation should occur. center is 0.5, 0.5
	 * @param {Object} value New value to set.
	 * @alias Titanium_UI_PickerColumn.setAnchorPoint
	 */
	this.setAnchorPoint = function(value) { this.anchorPoint = value; }
	/**
	 * read-only object with x and y properties of where the view is during animation
	 * @alias Titanium_UI_PickerColumn.animatedCenterPoint
	 * @property {Object}
	 */
	this.animatedCenterPoint = {}
	/**
	 * Get the read-only object with x and y properties of where the view is during animation
	 * @alias Titanium_UI_PickerColumn.getAnimatedCenterPoint
	 * @return {Object}
	 */
	this.getAnimatedCenterPoint = function() { return this.animatedCenterPoint; }
	/**
	 * Set the read-only object with x and y properties of where the view is during animation
	 * @param {Object} value New value to set.
	 * @alias Titanium_UI_PickerColumn.setAnimatedCenterPoint
	 */
	this.setAnimatedCenterPoint = function(value) { this.animatedCenterPoint = value; }
	/**
	 * the background color of the view
	 * @alias Titanium_UI_PickerColumn.backgroundColor
	 * @property {String}
	 */
	this.backgroundColor = ''
	/**
	 * Get the the background color of the view
	 * @alias Titanium_UI_PickerColumn.getBackgroundColor
	 * @return {String}
	 */
	this.getBackgroundColor = function() { return this.backgroundColor; }
	/**
	 * Set the the background color of the view
	 * @param {String} value New value to set.
	 * @alias Titanium_UI_PickerColumn.setBackgroundColor
	 */
	this.setBackgroundColor = function(value) { this.backgroundColor = value; }
	/**
	 * the disabled background color of the view. (Android)
	 * @alias Titanium_UI_PickerColumn.backgroundDisabledColor
	 * @property {String}
	 */
	this.backgroundDisabledColor = ''
	/**
	 * Get the the disabled background color of the view. (Android)
	 * @alias Titanium_UI_PickerColumn.getBackgroundDisabledColor
	 * @return {String}
	 */
	this.getBackgroundDisabledColor = function() { return this.backgroundDisabledColor; }
	/**
	 * Set the the disabled background color of the view. (Android)
	 * @param {String} value New value to set.
	 * @alias Titanium_UI_PickerColumn.setBackgroundDisabledColor
	 */
	this.setBackgroundDisabledColor = function(value) { this.backgroundDisabledColor = value; }
	/**
	 * the disabled background image url of the view. (Android)
	 * @alias Titanium_UI_PickerColumn.backgroundDisabledImage
	 * @property {String}
	 */
	this.backgroundDisabledImage = ''
	/**
	 * Get the the disabled background image url of the view. (Android)
	 * @alias Titanium_UI_PickerColumn.getBackgroundDisabledImage
	 * @return {String}
	 */
	this.getBackgroundDisabledImage = function() { return this.backgroundDisabledImage; }
	/**
	 * Set the the disabled background image url of the view. (Android)
	 * @param {String} value New value to set.
	 * @alias Titanium_UI_PickerColumn.setBackgroundDisabledImage
	 */
	this.setBackgroundDisabledImage = function(value) { this.backgroundDisabledImage = value; }
	/**
	 * the focused background color of the view. focusable must be true for normal views. (Android)
	 * @alias Titanium_UI_PickerColumn.backgroundFocusedColor
	 * @property {String}
	 */
	this.backgroundFocusedColor = ''
	/**
	 * Get the the focused background color of the view. focusable must be true for normal views. (Android)
	 * @alias Titanium_UI_PickerColumn.getBackgroundFocusedColor
	 * @return {String}
	 */
	this.getBackgroundFocusedColor = function() { return this.backgroundFocusedColor; }
	/**
	 * Set the the focused background color of the view. focusable must be true for normal views. (Android)
	 * @param {String} value New value to set.
	 * @alias Titanium_UI_PickerColumn.setBackgroundFocusedColor
	 */
	this.setBackgroundFocusedColor = function(value) { this.backgroundFocusedColor = value; }
	/**
	 * the focused background image url of the view. focusable must be true for normal views. (Android)
	 * @alias Titanium_UI_PickerColumn.backgroundFocusedImage
	 * @property {String}
	 */
	this.backgroundFocusedImage = ''
	/**
	 * Get the the focused background image url of the view. focusable must be true for normal views. (Android)
	 * @alias Titanium_UI_PickerColumn.getBackgroundFocusedImage
	 * @return {String}
	 */
	this.getBackgroundFocusedImage = function() { return this.backgroundFocusedImage; }
	/**
	 * Set the the focused background image url of the view. focusable must be true for normal views. (Android)
	 * @param {String} value New value to set.
	 * @alias Titanium_UI_PickerColumn.setBackgroundFocusedImage
	 */
	this.setBackgroundFocusedImage = function(value) { this.backgroundFocusedImage = value; }
	/**
	 * a background gradient for the view with the properties: type,startPoint,endPoint,startRadius,endRadius,backfillStart,backfillEnd,colors.
	 * @alias Titanium_UI_PickerColumn.backgroundGradient
	 * @property {Object}
	 */
	this.backgroundGradient = {}
	/**
	 * Get the a background gradient for the view with the properties: type,startPoint,endPoint,startRadius,endRadius,backfillStart,backfillEnd,colors.
	 * @alias Titanium_UI_PickerColumn.getBackgroundGradient
	 * @return {Object}
	 */
	this.getBackgroundGradient = function() { return this.backgroundGradient; }
	/**
	 * Set the a background gradient for the view with the properties: type,startPoint,endPoint,startRadius,endRadius,backfillStart,backfillEnd,colors.
	 * @param {Object} value New value to set.
	 * @alias Titanium_UI_PickerColumn.setBackgroundGradient
	 */
	this.setBackgroundGradient = function(value) { this.backgroundGradient = value; }
	/**
	 * the background image url of the view
	 * @alias Titanium_UI_PickerColumn.backgroundImage
	 * @property {String}
	 */
	this.backgroundImage = ''
	/**
	 * Get the the background image url of the view
	 * @alias Titanium_UI_PickerColumn.getBackgroundImage
	 * @return {String}
	 */
	this.getBackgroundImage = function() { return this.backgroundImage; }
	/**
	 * Set the the background image url of the view
	 * @param {String} value New value to set.
	 * @alias Titanium_UI_PickerColumn.setBackgroundImage
	 */
	this.setBackgroundImage = function(value) { this.backgroundImage = value; }
	/**
	 * End caps specify the portion of an image that should not be resized when an image is stretched. This technique is used to implement buttons and other resizable image-based interface elements. When a button with end caps is resized, the resizing occurs only in the middle of the button, in the region between the end caps. The end caps themselves keep their original size and appearance. This property specifies the size of the left end cap. The middle (stretchable) portion is assumed to be 1 pixel wide. The right end cap is therefore computed by adding the size of the left end cap and the middle portion together and then subtracting that value from the width of the image
	 * @alias Titanium_UI_PickerColumn.backgroundLeftCap
	 * @property {Float}
	 */
	this.backgroundLeftCap = 0.0
	/**
	 * Get the End caps specify the portion of an image that should not be resized when an image is stretched. This technique is used to implement buttons and other resizable image-based interface elements. When a button with end caps is resized, the resizing occurs only in the middle of the button, in the region between the end caps. The end caps themselves keep their original size and appearance. This property specifies the size of the left end cap. The middle (stretchable) portion is assumed to be 1 pixel wide. The right end cap is therefore computed by adding the size of the left end cap and the middle portion together and then subtracting that value from the width of the image
	 * @alias Titanium_UI_PickerColumn.getBackgroundLeftCap
	 * @return {Float}
	 */
	this.getBackgroundLeftCap = function() { return this.backgroundLeftCap; }
	/**
	 * Set the End caps specify the portion of an image that should not be resized when an image is stretched. This technique is used to implement buttons and other resizable image-based interface elements. When a button with end caps is resized, the resizing occurs only in the middle of the button, in the region between the end caps. The end caps themselves keep their original size and appearance. This property specifies the size of the left end cap. The middle (stretchable) portion is assumed to be 1 pixel wide. The right end cap is therefore computed by adding the size of the left end cap and the middle portion together and then subtracting that value from the width of the image
	 * @param {Float} value New value to set.
	 * @alias Titanium_UI_PickerColumn.setBackgroundLeftCap
	 */
	this.setBackgroundLeftCap = function(value) { this.backgroundLeftCap = value; }
	/**
	 * the selected background color of the view. focusable must be true for normal views. (Android)
	 * @alias Titanium_UI_PickerColumn.backgroundSelectedColor
	 * @property {String}
	 */
	this.backgroundSelectedColor = ''
	/**
	 * Get the the selected background color of the view. focusable must be true for normal views. (Android)
	 * @alias Titanium_UI_PickerColumn.getBackgroundSelectedColor
	 * @return {String}
	 */
	this.getBackgroundSelectedColor = function() { return this.backgroundSelectedColor; }
	/**
	 * Set the the selected background color of the view. focusable must be true for normal views. (Android)
	 * @param {String} value New value to set.
	 * @alias Titanium_UI_PickerColumn.setBackgroundSelectedColor
	 */
	this.setBackgroundSelectedColor = function(value) { this.backgroundSelectedColor = value; }
	/**
	 * the selected background image url of the view. focusable must be true for normal views. (Android)
	 * @alias Titanium_UI_PickerColumn.backgroundSelectedImage
	 * @property {String}
	 */
	this.backgroundSelectedImage = ''
	/**
	 * Get the the selected background image url of the view. focusable must be true for normal views. (Android)
	 * @alias Titanium_UI_PickerColumn.getBackgroundSelectedImage
	 * @return {String}
	 */
	this.getBackgroundSelectedImage = function() { return this.backgroundSelectedImage; }
	/**
	 * Set the the selected background image url of the view. focusable must be true for normal views. (Android)
	 * @param {String} value New value to set.
	 * @alias Titanium_UI_PickerColumn.setBackgroundSelectedImage
	 */
	this.setBackgroundSelectedImage = function(value) { this.backgroundSelectedImage = value; }
	/**
	 * End caps specify the portion of an image that should not be resized when an image is stretched. This technique is used to implement buttons and other resizable image-based interface elements. When a button with end caps is resized, the resizing occurs only in the middle of the button, in the region between the end caps. The end caps themselves keep their original size and appearance. This property specifies the size of the top end cap. The middle (stretchable) portion is assumed to be 1 pixel wide. The bottom end cap is therefore computed by adding the size of the top end cap and the middle portion together and then subtracting that value from the height of the image
	 * @alias Titanium_UI_PickerColumn.backgroundTopCap
	 * @property {Float}
	 */
	this.backgroundTopCap = 0.0
	/**
	 * Get the End caps specify the portion of an image that should not be resized when an image is stretched. This technique is used to implement buttons and other resizable image-based interface elements. When a button with end caps is resized, the resizing occurs only in the middle of the button, in the region between the end caps. The end caps themselves keep their original size and appearance. This property specifies the size of the top end cap. The middle (stretchable) portion is assumed to be 1 pixel wide. The bottom end cap is therefore computed by adding the size of the top end cap and the middle portion together and then subtracting that value from the height of the image
	 * @alias Titanium_UI_PickerColumn.getBackgroundTopCap
	 * @return {Float}
	 */
	this.getBackgroundTopCap = function() { return this.backgroundTopCap; }
	/**
	 * Set the End caps specify the portion of an image that should not be resized when an image is stretched. This technique is used to implement buttons and other resizable image-based interface elements. When a button with end caps is resized, the resizing occurs only in the middle of the button, in the region between the end caps. The end caps themselves keep their original size and appearance. This property specifies the size of the top end cap. The middle (stretchable) portion is assumed to be 1 pixel wide. The bottom end cap is therefore computed by adding the size of the top end cap and the middle portion together and then subtracting that value from the height of the image
	 * @param {Float} value New value to set.
	 * @alias Titanium_UI_PickerColumn.setBackgroundTopCap
	 */
	this.setBackgroundTopCap = function(value) { this.backgroundTopCap = value; }
	/**
	 * the border color of the view
	 * @alias Titanium_UI_PickerColumn.borderColor
	 * @property {String}
	 */
	this.borderColor = ''
	/**
	 * Get the the border color of the view
	 * @alias Titanium_UI_PickerColumn.getBorderColor
	 * @return {String}
	 */
	this.getBorderColor = function() { return this.borderColor; }
	/**
	 * Set the the border color of the view
	 * @param {String} value New value to set.
	 * @alias Titanium_UI_PickerColumn.setBorderColor
	 */
	this.setBorderColor = function(value) { this.borderColor = value; }
	/**
	 * the border radius of the view
	 * @alias Titanium_UI_PickerColumn.borderRadius
	 * @property {Float}
	 */
	this.borderRadius = 0.0
	/**
	 * Get the the border radius of the view
	 * @alias Titanium_UI_PickerColumn.getBorderRadius
	 * @return {Float}
	 */
	this.getBorderRadius = function() { return this.borderRadius; }
	/**
	 * Set the the border radius of the view
	 * @param {Float} value New value to set.
	 * @alias Titanium_UI_PickerColumn.setBorderRadius
	 */
	this.setBorderRadius = function(value) { this.borderRadius = value; }
	/**
	 * the border width of the view
	 * @alias Titanium_UI_PickerColumn.borderWidth
	 * @property {Float}
	 */
	this.borderWidth = 0.0
	/**
	 * Get the the border width of the view
	 * @alias Titanium_UI_PickerColumn.getBorderWidth
	 * @return {Float}
	 */
	this.getBorderWidth = function() { return this.borderWidth; }
	/**
	 * Set the the border width of the view
	 * @param {Float} value New value to set.
	 * @alias Titanium_UI_PickerColumn.setBorderWidth
	 */
	this.setBorderWidth = function(value) { this.borderWidth = value; }
	/**
	 * property for the view bottom position. This position is relative to the view's parent. Can be either a float value or a dimension string ie 'auto' (default), '50%' (iPhone only).
	 * @alias Titanium_UI_PickerColumn.bottom
	 * @property {Float,String}
	 */
	this.bottom = 0.0
	/**
	 * Get the property for the view bottom position. This position is relative to the view's parent. Can be either a float value or a dimension string ie 'auto' (default), '50%' (iPhone only).
	 * @alias Titanium_UI_PickerColumn.getBottom
	 * @return {Float,String}
	 */
	this.getBottom = function() { return this.bottom; }
	/**
	 * Set the property for the view bottom position. This position is relative to the view's parent. Can be either a float value or a dimension string ie 'auto' (default), '50%' (iPhone only).
	 * @param {Float,String} value New value to set.
	 * @alias Titanium_UI_PickerColumn.setBottom
	 */
	this.setBottom = function(value) { this.bottom = value; }
	/**
	 * a dictionary with properties x and y to indicate the center of the views position relative to the parent view
	 * @alias Titanium_UI_PickerColumn.center
	 * @property {Object}
	 */
	this.center = {}
	/**
	 * Get the a dictionary with properties x and y to indicate the center of the views position relative to the parent view
	 * @alias Titanium_UI_PickerColumn.getCenter
	 * @return {Object}
	 */
	this.getCenter = function() { return this.center; }
	/**
	 * Set the a dictionary with properties x and y to indicate the center of the views position relative to the parent view
	 * @param {Object} value New value to set.
	 * @alias Titanium_UI_PickerColumn.setCenter
	 */
	this.setCenter = function(value) { this.center = value; }
	/**
	 * Set true if you want a view to be focusable when navigating with the trackball or D-Pad. Default: false. (Android Only)
	 * @alias Titanium_UI_PickerColumn.focusable
	 * @property {Boolean}
	 */
	this.focusable = false
	/**
	 * Get the Set true if you want a view to be focusable when navigating with the trackball or D-Pad. Default: false. (Android Only)
	 * @alias Titanium_UI_PickerColumn.getFocusable
	 * @return {Boolean}
	 */
	this.getFocusable = function() { return this.focusable; }
	/**
	 * Set the Set true if you want a view to be focusable when navigating with the trackball or D-Pad. Default: false. (Android Only)
	 * @param {Boolean} value New value to set.
	 * @alias Titanium_UI_PickerColumn.setFocusable
	 */
	this.setFocusable = function(value) { this.focusable = value; }
	/**
	 * the font family
	 * @alias Titanium_UI_PickerColumn.font-family
	 * @property {String}
	 */
	this.font-family = ''
	/**
	 * Get the the font family
	 * @alias Titanium_UI_PickerColumn.getFont-family
	 * @return {String}
	 */
	this.getFont-family = function() { return this.font-family; }
	/**
	 * Set the the font family
	 * @param {String} value New value to set.
	 * @alias Titanium_UI_PickerColumn.setFont-family
	 */
	this.setFont-family = function(value) { this.font-family = value; }
	/**
	 * the font size
	 * @alias Titanium_UI_PickerColumn.font-size
	 * @property {String}
	 */
	this.font-size = ''
	/**
	 * Get the the font size
	 * @alias Titanium_UI_PickerColumn.getFont-size
	 * @return {String}
	 */
	this.getFont-size = function() { return this.font-size; }
	/**
	 * Set the the font size
	 * @param {String} value New value to set.
	 * @alias Titanium_UI_PickerColumn.setFont-size
	 */
	this.setFont-size = function(value) { this.font-size = value; }
	/**
	 * the font style, either normal or italics
	 * @alias Titanium_UI_PickerColumn.font-style
	 * @property {String}
	 */
	this.font-style = ''
	/**
	 * Get the the font style, either normal or italics
	 * @alias Titanium_UI_PickerColumn.getFont-style
	 * @return {String}
	 */
	this.getFont-style = function() { return this.font-style; }
	/**
	 * Set the the font style, either normal or italics
	 * @param {String} value New value to set.
	 * @alias Titanium_UI_PickerColumn.setFont-style
	 */
	this.setFont-style = function(value) { this.font-style = value; }
	/**
	 * the font weight, either normal or bold
	 * @alias Titanium_UI_PickerColumn.font-weight
	 * @property {String}
	 */
	this.font-weight = ''
	/**
	 * Get the the font weight, either normal or bold
	 * @alias Titanium_UI_PickerColumn.getFont-weight
	 * @return {String}
	 */
	this.getFont-weight = function() { return this.font-weight; }
	/**
	 * Set the the font weight, either normal or bold
	 * @param {String} value New value to set.
	 * @alias Titanium_UI_PickerColumn.setFont-weight
	 */
	this.setFont-weight = function(value) { this.font-weight = value; }
	/**
	 * property for the view height. Can be either a float value or a dimension string ie 'auto' (default), '50%' (iPhone only).
	 * @alias Titanium_UI_PickerColumn.height
	 * @property {Float,String}
	 */
	this.height = 0.0
	/**
	 * Get the property for the view height. Can be either a float value or a dimension string ie 'auto' (default), '50%' (iPhone only).
	 * @alias Titanium_UI_PickerColumn.getHeight
	 * @return {Float,String}
	 */
	this.getHeight = function() { return this.height; }
	/**
	 * Set the property for the view height. Can be either a float value or a dimension string ie 'auto' (default), '50%' (iPhone only).
	 * @param {Float,String} value New value to set.
	 * @alias Titanium_UI_PickerColumn.setHeight
	 */
	this.setHeight = function(value) { this.height = value; }
	/**
	 * property for the view left position. This position is relative to the view's parent. Can be either a float value or a dimension string ie 'auto' (default), '50%' (iPhone only).
	 * @alias Titanium_UI_PickerColumn.left
	 * @property {Float,String}
	 */
	this.left = 0.0
	/**
	 * Get the property for the view left position. This position is relative to the view's parent. Can be either a float value or a dimension string ie 'auto' (default), '50%' (iPhone only).
	 * @alias Titanium_UI_PickerColumn.getLeft
	 * @return {Float,String}
	 */
	this.getLeft = function() { return this.left; }
	/**
	 * Set the property for the view left position. This position is relative to the view's parent. Can be either a float value or a dimension string ie 'auto' (default), '50%' (iPhone only).
	 * @param {Float,String} value New value to set.
	 * @alias Titanium_UI_PickerColumn.setLeft
	 */
	this.setLeft = function(value) { this.left = value; }
	/**
	 * the opacity from 0.0-1.0
	 * @alias Titanium_UI_PickerColumn.opacity
	 * @property {Float}
	 */
	this.opacity = 0.0
	/**
	 * Get the the opacity from 0.0-1.0
	 * @alias Titanium_UI_PickerColumn.getOpacity
	 * @return {Float}
	 */
	this.getOpacity = function() { return this.opacity; }
	/**
	 * Set the the opacity from 0.0-1.0
	 * @param {Float} value New value to set.
	 * @alias Titanium_UI_PickerColumn.setOpacity
	 */
	this.setOpacity = function(value) { this.opacity = value; }
	/**
	 * property for the view right position. This position is relative to the view's parent. Can be either a float value or a dimension string ie 'auto' (default), '50%' (iPhone only).
	 * @alias Titanium_UI_PickerColumn.right
	 * @property {Float,String}
	 */
	this.right = 0.0
	/**
	 * Get the property for the view right position. This position is relative to the view's parent. Can be either a float value or a dimension string ie 'auto' (default), '50%' (iPhone only).
	 * @alias Titanium_UI_PickerColumn.getRight
	 * @return {Float,String}
	 */
	this.getRight = function() { return this.right; }
	/**
	 * Set the property for the view right position. This position is relative to the view's parent. Can be either a float value or a dimension string ie 'auto' (default), '50%' (iPhone only).
	 * @param {Float,String} value New value to set.
	 * @alias Titanium_UI_PickerColumn.setRight
	 */
	this.setRight = function(value) { this.right = value; }
	/**
	 * number of rows in the column (readonly)
	 * @alias Titanium_UI_PickerColumn.rowCount
	 * @property {Integer}
	 */
	this.rowCount = 0
	/**
	 * Get the number of rows in the column (readonly)
	 * @alias Titanium_UI_PickerColumn.getRowCount
	 * @return {Integer}
	 */
	this.getRowCount = function() { return this.rowCount; }
	/**
	 * Set the number of rows in the column (readonly)
	 * @param {Integer} value New value to set.
	 * @alias Titanium_UI_PickerColumn.setRowCount
	 */
	this.setRowCount = function(value) { this.rowCount = value; }
	/**
	 * an array of rows
	 * @alias Titanium_UI_PickerColumn.rows
	 * @property {Array}
	 */
	this.rows = []
	/**
	 * Get the an array of rows
	 * @alias Titanium_UI_PickerColumn.getRows
	 * @return {Array}
	 */
	this.getRows = function() { return this.rows; }
	/**
	 * Set the an array of rows
	 * @param {Array} value New value to set.
	 * @alias Titanium_UI_PickerColumn.setRows
	 */
	this.setRows = function(value) { this.rows = value; }
	/**
	 * the size of the view as a dictionary of width and height properties
	 * @alias Titanium_UI_PickerColumn.size
	 * @property {Object}
	 */
	this.size = {}
	/**
	 * Get the the size of the view as a dictionary of width and height properties
	 * @alias Titanium_UI_PickerColumn.getSize
	 * @return {Object}
	 */
	this.getSize = function() { return this.size; }
	/**
	 * Set the the size of the view as a dictionary of width and height properties
	 * @param {Object} value New value to set.
	 * @alias Titanium_UI_PickerColumn.setSize
	 */
	this.setSize = function(value) { this.size = value; }
	/**
	 * One of Titanium.UI.Android.SOFT_KEYBOARD_DEFAULT_ON_FOCUS, Titanium.UI.Android.SOFT_KEYBOARD_HIDE_ON_FOCUS, or Titanium.UI.Android.SOFT_KEYBOARD_SHOW_ON_FOCUS. (Android only)
	 * @alias Titanium_UI_PickerColumn.softKeyboardOnFocus
	 * @property {Integer}
	 */
	this.softKeyboardOnFocus = 0
	/**
	 * Get the One of Titanium.UI.Android.SOFT_KEYBOARD_DEFAULT_ON_FOCUS, Titanium.UI.Android.SOFT_KEYBOARD_HIDE_ON_FOCUS, or Titanium.UI.Android.SOFT_KEYBOARD_SHOW_ON_FOCUS. (Android only)
	 * @alias Titanium_UI_PickerColumn.getSoftKeyboardOnFocus
	 * @return {Integer}
	 */
	this.getSoftKeyboardOnFocus = function() { return this.softKeyboardOnFocus; }
	/**
	 * Set the One of Titanium.UI.Android.SOFT_KEYBOARD_DEFAULT_ON_FOCUS, Titanium.UI.Android.SOFT_KEYBOARD_HIDE_ON_FOCUS, or Titanium.UI.Android.SOFT_KEYBOARD_SHOW_ON_FOCUS. (Android only)
	 * @param {Integer} value New value to set.
	 * @alias Titanium_UI_PickerColumn.setSoftKeyboardOnFocus
	 */
	this.setSoftKeyboardOnFocus = function(value) { this.softKeyboardOnFocus = value; }
	/**
	 * property for the view top position. This position is relative to the view's parent. Can be either a float value or a dimension string ie 'auto' (default), '50%' (iPhone only).
	 * @alias Titanium_UI_PickerColumn.top
	 * @property {Float,String}
	 */
	this.top = 0.0
	/**
	 * Get the property for the view top position. This position is relative to the view's parent. Can be either a float value or a dimension string ie 'auto' (default), '50%' (iPhone only).
	 * @alias Titanium_UI_PickerColumn.getTop
	 * @return {Float,String}
	 */
	this.getTop = function() { return this.top; }
	/**
	 * Set the property for the view top position. This position is relative to the view's parent. Can be either a float value or a dimension string ie 'auto' (default), '50%' (iPhone only).
	 * @param {Float,String} value New value to set.
	 * @alias Titanium_UI_PickerColumn.setTop
	 */
	this.setTop = function(value) { this.top = value; }
	/**
	 * a boolean indicating if the view should receive touch events (true, default) or forward them to peers (false)
	 * @alias Titanium_UI_PickerColumn.touchEnabled
	 * @property {Boolean}
	 */
	this.touchEnabled = false
	/**
	 * Get the a boolean indicating if the view should receive touch events (true, default) or forward them to peers (false)
	 * @alias Titanium_UI_PickerColumn.getTouchEnabled
	 * @return {Boolean}
	 */
	this.getTouchEnabled = function() { return this.touchEnabled; }
	/**
	 * Set the a boolean indicating if the view should receive touch events (true, default) or forward them to peers (false)
	 * @param {Boolean} value New value to set.
	 * @alias Titanium_UI_PickerColumn.setTouchEnabled
	 */
	this.setTouchEnabled = function(value) { this.touchEnabled = value; }
	/**
	 * the transformation matrix to apply to the view
	 * @alias Titanium_UI_PickerColumn.transform
	 * @property {Object}
	 */
	this.transform = {}
	/**
	 * Get the the transformation matrix to apply to the view
	 * @alias Titanium_UI_PickerColumn.getTransform
	 * @return {Object}
	 */
	this.getTransform = function() { return this.transform; }
	/**
	 * Set the the transformation matrix to apply to the view
	 * @param {Object} value New value to set.
	 * @alias Titanium_UI_PickerColumn.setTransform
	 */
	this.setTransform = function(value) { this.transform = value; }
	/**
	 * a boolean of the visibility of the view
	 * @alias Titanium_UI_PickerColumn.visible
	 * @property {Boolean}
	 */
	this.visible = false
	/**
	 * Get the a boolean of the visibility of the view
	 * @alias Titanium_UI_PickerColumn.getVisible
	 * @return {Boolean}
	 */
	this.getVisible = function() { return this.visible; }
	/**
	 * Set the a boolean of the visibility of the view
	 * @param {Boolean} value New value to set.
	 * @alias Titanium_UI_PickerColumn.setVisible
	 */
	this.setVisible = function(value) { this.visible = value; }
	/**
	 * property for the view width. Can be either a float value or a dimension string ie 'auto' (default), '50%' (iPhone only).
	 * @alias Titanium_UI_PickerColumn.width
	 * @property {Float,String}
	 */
	this.width = 0.0
	/**
	 * Get the property for the view width. Can be either a float value or a dimension string ie 'auto' (default), '50%' (iPhone only).
	 * @alias Titanium_UI_PickerColumn.getWidth
	 * @return {Float,String}
	 */
	this.getWidth = function() { return this.width; }
	/**
	 * Set the property for the view width. Can be either a float value or a dimension string ie 'auto' (default), '50%' (iPhone only).
	 * @param {Float,String} value New value to set.
	 * @alias Titanium_UI_PickerColumn.setWidth
	 */
	this.setWidth = function(value) { this.width = value; }
	/**
	 * the z index position relative to other sibling views
	 * @alias Titanium_UI_PickerColumn.zIndex
	 * @property {Integer}
	 */
	this.zIndex = 0
	/**
	 * Get the the z index position relative to other sibling views
	 * @alias Titanium_UI_PickerColumn.getZIndex
	 * @return {Integer}
	 */
	this.getZIndex = function() { return this.zIndex; }
	/**
	 * Set the the z index position relative to other sibling views
	 * @param {Integer} value New value to set.
	 * @alias Titanium_UI_PickerColumn.setZIndex
	 */
	this.setZIndex = function(value) { this.zIndex = value; }
	/**
	 * add a child to the view hierarchy
	 * @param {Object} view the view to add to this views hiearchy
	 * @alias Titanium_UI_PickerColumn.add
	 */
	this.add = function add(view) { }
	/**
	 * add an event listener for the instance to receive view triggered events
	 * @param {String} name name of the event
	 * @param {Function} callback callback function to invoke when the event is fired
	 * @alias Titanium_UI_PickerColumn.addEventListener
	 */
	this.addEventListener = function addEventListener(name,callback) { }
	/**
	 * a Titanium.UI.PickerRow object to add to the column
	 * @alias Titanium_UI_PickerColumn.addRow
	 */
	this.addRow = function addRow() { }
	/**
	 * animate the view
	 * @param {Object} obj either a dictionary of animation properties or an Animation object
	 * @param {Function} callback function to be invoked upon completion of the animation
	 * @alias Titanium_UI_PickerColumn.animate
	 */
	this.animate = function animate(obj,callback) { }
	/**
	 * fire a synthesized event to the views listener
	 * @param {String} name name of the event
	 * @param {Object} event event object
	 * @alias Titanium_UI_PickerColumn.fireEvent
	 */
	this.fireEvent = function fireEvent(name,event) { }
	/**
	 * hide the view
	 * @alias Titanium_UI_PickerColumn.hide
	 */
	this.hide = function hide() { }
	/**
	 * remove a previously add view from the view hiearchy
	 * @param {Object} view the view to remove from this views hiearchy
	 * @alias Titanium_UI_PickerColumn.remove
	 */
	this.remove = function remove(view) { }
	/**
	 * remove a previously added event listener
	 * @param {String} name name of the event
	 * @param {Function} callback callback function passed in addEventListener
	 * @alias Titanium_UI_PickerColumn.removeEventListener
	 */
	this.removeEventListener = function removeEventListener(name,callback) { }
	/**
	 * a Titanium.UI.PickerRow object to remove
	 * @alias Titanium_UI_PickerColumn.removeRow
	 */
	this.removeRow = function removeRow() { }
	/**
	 * make the view visible
	 * @alias Titanium_UI_PickerColumn.show
	 */
	this.show = function show() { }
	/**
	 * return a Blob image of the rendered view
	 * @param {Function} f function to be invoked upon completion. if non-null, this method will be performed asynchronously. if null, it will be performed immediately
	 * @alias Titanium_UI_PickerColumn.toImage
	 * @return {Object}
	 */
	this.toImage = function toImage(f) { return {}; }
};

/**
 * The picker row object created by Titanium.UI.createPickerRow.
 * @since 0.9
 */
function Titanium_UI_PickerRow() {
	/**
	 * a dictionary with properties x and y to indicate the anchor point value. anchor specifies the position by which animation should occur. center is 0.5, 0.5
	 * @alias Titanium_UI_PickerRow.anchorPoint
	 * @property {Object}
	 */
	this.anchorPoint = {}
	/**
	 * Get the a dictionary with properties x and y to indicate the anchor point value. anchor specifies the position by which animation should occur. center is 0.5, 0.5
	 * @alias Titanium_UI_PickerRow.getAnchorPoint
	 * @return {Object}
	 */
	this.getAnchorPoint = function() { return this.anchorPoint; }
	/**
	 * Set the a dictionary with properties x and y to indicate the anchor point value. anchor specifies the position by which animation should occur. center is 0.5, 0.5
	 * @param {Object} value New value to set.
	 * @alias Titanium_UI_PickerRow.setAnchorPoint
	 */
	this.setAnchorPoint = function(value) { this.anchorPoint = value; }
	/**
	 * read-only object with x and y properties of where the view is during animation
	 * @alias Titanium_UI_PickerRow.animatedCenterPoint
	 * @property {Object}
	 */
	this.animatedCenterPoint = {}
	/**
	 * Get the read-only object with x and y properties of where the view is during animation
	 * @alias Titanium_UI_PickerRow.getAnimatedCenterPoint
	 * @return {Object}
	 */
	this.getAnimatedCenterPoint = function() { return this.animatedCenterPoint; }
	/**
	 * Set the read-only object with x and y properties of where the view is during animation
	 * @param {Object} value New value to set.
	 * @alias Titanium_UI_PickerRow.setAnimatedCenterPoint
	 */
	this.setAnimatedCenterPoint = function(value) { this.animatedCenterPoint = value; }
	/**
	 * the background color of the view
	 * @alias Titanium_UI_PickerRow.backgroundColor
	 * @property {String}
	 */
	this.backgroundColor = ''
	/**
	 * Get the the background color of the view
	 * @alias Titanium_UI_PickerRow.getBackgroundColor
	 * @return {String}
	 */
	this.getBackgroundColor = function() { return this.backgroundColor; }
	/**
	 * Set the the background color of the view
	 * @param {String} value New value to set.
	 * @alias Titanium_UI_PickerRow.setBackgroundColor
	 */
	this.setBackgroundColor = function(value) { this.backgroundColor = value; }
	/**
	 * the disabled background color of the view. (Android)
	 * @alias Titanium_UI_PickerRow.backgroundDisabledColor
	 * @property {String}
	 */
	this.backgroundDisabledColor = ''
	/**
	 * Get the the disabled background color of the view. (Android)
	 * @alias Titanium_UI_PickerRow.getBackgroundDisabledColor
	 * @return {String}
	 */
	this.getBackgroundDisabledColor = function() { return this.backgroundDisabledColor; }
	/**
	 * Set the the disabled background color of the view. (Android)
	 * @param {String} value New value to set.
	 * @alias Titanium_UI_PickerRow.setBackgroundDisabledColor
	 */
	this.setBackgroundDisabledColor = function(value) { this.backgroundDisabledColor = value; }
	/**
	 * the disabled background image url of the view. (Android)
	 * @alias Titanium_UI_PickerRow.backgroundDisabledImage
	 * @property {String}
	 */
	this.backgroundDisabledImage = ''
	/**
	 * Get the the disabled background image url of the view. (Android)
	 * @alias Titanium_UI_PickerRow.getBackgroundDisabledImage
	 * @return {String}
	 */
	this.getBackgroundDisabledImage = function() { return this.backgroundDisabledImage; }
	/**
	 * Set the the disabled background image url of the view. (Android)
	 * @param {String} value New value to set.
	 * @alias Titanium_UI_PickerRow.setBackgroundDisabledImage
	 */
	this.setBackgroundDisabledImage = function(value) { this.backgroundDisabledImage = value; }
	/**
	 * the focused background color of the view. focusable must be true for normal views. (Android)
	 * @alias Titanium_UI_PickerRow.backgroundFocusedColor
	 * @property {String}
	 */
	this.backgroundFocusedColor = ''
	/**
	 * Get the the focused background color of the view. focusable must be true for normal views. (Android)
	 * @alias Titanium_UI_PickerRow.getBackgroundFocusedColor
	 * @return {String}
	 */
	this.getBackgroundFocusedColor = function() { return this.backgroundFocusedColor; }
	/**
	 * Set the the focused background color of the view. focusable must be true for normal views. (Android)
	 * @param {String} value New value to set.
	 * @alias Titanium_UI_PickerRow.setBackgroundFocusedColor
	 */
	this.setBackgroundFocusedColor = function(value) { this.backgroundFocusedColor = value; }
	/**
	 * the focused background image url of the view. focusable must be true for normal views. (Android)
	 * @alias Titanium_UI_PickerRow.backgroundFocusedImage
	 * @property {String}
	 */
	this.backgroundFocusedImage = ''
	/**
	 * Get the the focused background image url of the view. focusable must be true for normal views. (Android)
	 * @alias Titanium_UI_PickerRow.getBackgroundFocusedImage
	 * @return {String}
	 */
	this.getBackgroundFocusedImage = function() { return this.backgroundFocusedImage; }
	/**
	 * Set the the focused background image url of the view. focusable must be true for normal views. (Android)
	 * @param {String} value New value to set.
	 * @alias Titanium_UI_PickerRow.setBackgroundFocusedImage
	 */
	this.setBackgroundFocusedImage = function(value) { this.backgroundFocusedImage = value; }
	/**
	 * a background gradient for the view with the properties: type,startPoint,endPoint,startRadius,endRadius,backfillStart,backfillEnd,colors.
	 * @alias Titanium_UI_PickerRow.backgroundGradient
	 * @property {Object}
	 */
	this.backgroundGradient = {}
	/**
	 * Get the a background gradient for the view with the properties: type,startPoint,endPoint,startRadius,endRadius,backfillStart,backfillEnd,colors.
	 * @alias Titanium_UI_PickerRow.getBackgroundGradient
	 * @return {Object}
	 */
	this.getBackgroundGradient = function() { return this.backgroundGradient; }
	/**
	 * Set the a background gradient for the view with the properties: type,startPoint,endPoint,startRadius,endRadius,backfillStart,backfillEnd,colors.
	 * @param {Object} value New value to set.
	 * @alias Titanium_UI_PickerRow.setBackgroundGradient
	 */
	this.setBackgroundGradient = function(value) { this.backgroundGradient = value; }
	/**
	 * the background image url of the view
	 * @alias Titanium_UI_PickerRow.backgroundImage
	 * @property {String}
	 */
	this.backgroundImage = ''
	/**
	 * Get the the background image url of the view
	 * @alias Titanium_UI_PickerRow.getBackgroundImage
	 * @return {String}
	 */
	this.getBackgroundImage = function() { return this.backgroundImage; }
	/**
	 * Set the the background image url of the view
	 * @param {String} value New value to set.
	 * @alias Titanium_UI_PickerRow.setBackgroundImage
	 */
	this.setBackgroundImage = function(value) { this.backgroundImage = value; }
	/**
	 * End caps specify the portion of an image that should not be resized when an image is stretched. This technique is used to implement buttons and other resizable image-based interface elements. When a button with end caps is resized, the resizing occurs only in the middle of the button, in the region between the end caps. The end caps themselves keep their original size and appearance. This property specifies the size of the left end cap. The middle (stretchable) portion is assumed to be 1 pixel wide. The right end cap is therefore computed by adding the size of the left end cap and the middle portion together and then subtracting that value from the width of the image
	 * @alias Titanium_UI_PickerRow.backgroundLeftCap
	 * @property {Float}
	 */
	this.backgroundLeftCap = 0.0
	/**
	 * Get the End caps specify the portion of an image that should not be resized when an image is stretched. This technique is used to implement buttons and other resizable image-based interface elements. When a button with end caps is resized, the resizing occurs only in the middle of the button, in the region between the end caps. The end caps themselves keep their original size and appearance. This property specifies the size of the left end cap. The middle (stretchable) portion is assumed to be 1 pixel wide. The right end cap is therefore computed by adding the size of the left end cap and the middle portion together and then subtracting that value from the width of the image
	 * @alias Titanium_UI_PickerRow.getBackgroundLeftCap
	 * @return {Float}
	 */
	this.getBackgroundLeftCap = function() { return this.backgroundLeftCap; }
	/**
	 * Set the End caps specify the portion of an image that should not be resized when an image is stretched. This technique is used to implement buttons and other resizable image-based interface elements. When a button with end caps is resized, the resizing occurs only in the middle of the button, in the region between the end caps. The end caps themselves keep their original size and appearance. This property specifies the size of the left end cap. The middle (stretchable) portion is assumed to be 1 pixel wide. The right end cap is therefore computed by adding the size of the left end cap and the middle portion together and then subtracting that value from the width of the image
	 * @param {Float} value New value to set.
	 * @alias Titanium_UI_PickerRow.setBackgroundLeftCap
	 */
	this.setBackgroundLeftCap = function(value) { this.backgroundLeftCap = value; }
	/**
	 * the selected background color of the view. focusable must be true for normal views. (Android)
	 * @alias Titanium_UI_PickerRow.backgroundSelectedColor
	 * @property {String}
	 */
	this.backgroundSelectedColor = ''
	/**
	 * Get the the selected background color of the view. focusable must be true for normal views. (Android)
	 * @alias Titanium_UI_PickerRow.getBackgroundSelectedColor
	 * @return {String}
	 */
	this.getBackgroundSelectedColor = function() { return this.backgroundSelectedColor; }
	/**
	 * Set the the selected background color of the view. focusable must be true for normal views. (Android)
	 * @param {String} value New value to set.
	 * @alias Titanium_UI_PickerRow.setBackgroundSelectedColor
	 */
	this.setBackgroundSelectedColor = function(value) { this.backgroundSelectedColor = value; }
	/**
	 * the selected background image url of the view. focusable must be true for normal views. (Android)
	 * @alias Titanium_UI_PickerRow.backgroundSelectedImage
	 * @property {String}
	 */
	this.backgroundSelectedImage = ''
	/**
	 * Get the the selected background image url of the view. focusable must be true for normal views. (Android)
	 * @alias Titanium_UI_PickerRow.getBackgroundSelectedImage
	 * @return {String}
	 */
	this.getBackgroundSelectedImage = function() { return this.backgroundSelectedImage; }
	/**
	 * Set the the selected background image url of the view. focusable must be true for normal views. (Android)
	 * @param {String} value New value to set.
	 * @alias Titanium_UI_PickerRow.setBackgroundSelectedImage
	 */
	this.setBackgroundSelectedImage = function(value) { this.backgroundSelectedImage = value; }
	/**
	 * End caps specify the portion of an image that should not be resized when an image is stretched. This technique is used to implement buttons and other resizable image-based interface elements. When a button with end caps is resized, the resizing occurs only in the middle of the button, in the region between the end caps. The end caps themselves keep their original size and appearance. This property specifies the size of the top end cap. The middle (stretchable) portion is assumed to be 1 pixel wide. The bottom end cap is therefore computed by adding the size of the top end cap and the middle portion together and then subtracting that value from the height of the image
	 * @alias Titanium_UI_PickerRow.backgroundTopCap
	 * @property {Float}
	 */
	this.backgroundTopCap = 0.0
	/**
	 * Get the End caps specify the portion of an image that should not be resized when an image is stretched. This technique is used to implement buttons and other resizable image-based interface elements. When a button with end caps is resized, the resizing occurs only in the middle of the button, in the region between the end caps. The end caps themselves keep their original size and appearance. This property specifies the size of the top end cap. The middle (stretchable) portion is assumed to be 1 pixel wide. The bottom end cap is therefore computed by adding the size of the top end cap and the middle portion together and then subtracting that value from the height of the image
	 * @alias Titanium_UI_PickerRow.getBackgroundTopCap
	 * @return {Float}
	 */
	this.getBackgroundTopCap = function() { return this.backgroundTopCap; }
	/**
	 * Set the End caps specify the portion of an image that should not be resized when an image is stretched. This technique is used to implement buttons and other resizable image-based interface elements. When a button with end caps is resized, the resizing occurs only in the middle of the button, in the region between the end caps. The end caps themselves keep their original size and appearance. This property specifies the size of the top end cap. The middle (stretchable) portion is assumed to be 1 pixel wide. The bottom end cap is therefore computed by adding the size of the top end cap and the middle portion together and then subtracting that value from the height of the image
	 * @param {Float} value New value to set.
	 * @alias Titanium_UI_PickerRow.setBackgroundTopCap
	 */
	this.setBackgroundTopCap = function(value) { this.backgroundTopCap = value; }
	/**
	 * the border color of the view
	 * @alias Titanium_UI_PickerRow.borderColor
	 * @property {String}
	 */
	this.borderColor = ''
	/**
	 * Get the the border color of the view
	 * @alias Titanium_UI_PickerRow.getBorderColor
	 * @return {String}
	 */
	this.getBorderColor = function() { return this.borderColor; }
	/**
	 * Set the the border color of the view
	 * @param {String} value New value to set.
	 * @alias Titanium_UI_PickerRow.setBorderColor
	 */
	this.setBorderColor = function(value) { this.borderColor = value; }
	/**
	 * the border radius of the view
	 * @alias Titanium_UI_PickerRow.borderRadius
	 * @property {Float}
	 */
	this.borderRadius = 0.0
	/**
	 * Get the the border radius of the view
	 * @alias Titanium_UI_PickerRow.getBorderRadius
	 * @return {Float}
	 */
	this.getBorderRadius = function() { return this.borderRadius; }
	/**
	 * Set the the border radius of the view
	 * @param {Float} value New value to set.
	 * @alias Titanium_UI_PickerRow.setBorderRadius
	 */
	this.setBorderRadius = function(value) { this.borderRadius = value; }
	/**
	 * the border width of the view
	 * @alias Titanium_UI_PickerRow.borderWidth
	 * @property {Float}
	 */
	this.borderWidth = 0.0
	/**
	 * Get the the border width of the view
	 * @alias Titanium_UI_PickerRow.getBorderWidth
	 * @return {Float}
	 */
	this.getBorderWidth = function() { return this.borderWidth; }
	/**
	 * Set the the border width of the view
	 * @param {Float} value New value to set.
	 * @alias Titanium_UI_PickerRow.setBorderWidth
	 */
	this.setBorderWidth = function(value) { this.borderWidth = value; }
	/**
	 * property for the view bottom position. This position is relative to the view's parent. Can be either a float value or a dimension string ie 'auto' (default), '50%' (iPhone only).
	 * @alias Titanium_UI_PickerRow.bottom
	 * @property {Float,String}
	 */
	this.bottom = 0.0
	/**
	 * Get the property for the view bottom position. This position is relative to the view's parent. Can be either a float value or a dimension string ie 'auto' (default), '50%' (iPhone only).
	 * @alias Titanium_UI_PickerRow.getBottom
	 * @return {Float,String}
	 */
	this.getBottom = function() { return this.bottom; }
	/**
	 * Set the property for the view bottom position. This position is relative to the view's parent. Can be either a float value or a dimension string ie 'auto' (default), '50%' (iPhone only).
	 * @param {Float,String} value New value to set.
	 * @alias Titanium_UI_PickerRow.setBottom
	 */
	this.setBottom = function(value) { this.bottom = value; }
	/**
	 * a dictionary with properties x and y to indicate the center of the views position relative to the parent view
	 * @alias Titanium_UI_PickerRow.center
	 * @property {Object}
	 */
	this.center = {}
	/**
	 * Get the a dictionary with properties x and y to indicate the center of the views position relative to the parent view
	 * @alias Titanium_UI_PickerRow.getCenter
	 * @return {Object}
	 */
	this.getCenter = function() { return this.center; }
	/**
	 * Set the a dictionary with properties x and y to indicate the center of the views position relative to the parent view
	 * @param {Object} value New value to set.
	 * @alias Titanium_UI_PickerRow.setCenter
	 */
	this.setCenter = function(value) { this.center = value; }
	/**
	 * Set true if you want a view to be focusable when navigating with the trackball or D-Pad. Default: false. (Android Only)
	 * @alias Titanium_UI_PickerRow.focusable
	 * @property {Boolean}
	 */
	this.focusable = false
	/**
	 * Get the Set true if you want a view to be focusable when navigating with the trackball or D-Pad. Default: false. (Android Only)
	 * @alias Titanium_UI_PickerRow.getFocusable
	 * @return {Boolean}
	 */
	this.getFocusable = function() { return this.focusable; }
	/**
	 * Set the Set true if you want a view to be focusable when navigating with the trackball or D-Pad. Default: false. (Android Only)
	 * @param {Boolean} value New value to set.
	 * @alias Titanium_UI_PickerRow.setFocusable
	 */
	this.setFocusable = function(value) { this.focusable = value; }
	/**
	 * the font family
	 * @alias Titanium_UI_PickerRow.font-family
	 * @property {String}
	 */
	this.font-family = ''
	/**
	 * Get the the font family
	 * @alias Titanium_UI_PickerRow.getFont-family
	 * @return {String}
	 */
	this.getFont-family = function() { return this.font-family; }
	/**
	 * Set the the font family
	 * @param {String} value New value to set.
	 * @alias Titanium_UI_PickerRow.setFont-family
	 */
	this.setFont-family = function(value) { this.font-family = value; }
	/**
	 * the font size
	 * @alias Titanium_UI_PickerRow.font-size
	 * @property {String}
	 */
	this.font-size = ''
	/**
	 * Get the the font size
	 * @alias Titanium_UI_PickerRow.getFont-size
	 * @return {String}
	 */
	this.getFont-size = function() { return this.font-size; }
	/**
	 * Set the the font size
	 * @param {String} value New value to set.
	 * @alias Titanium_UI_PickerRow.setFont-size
	 */
	this.setFont-size = function(value) { this.font-size = value; }
	/**
	 * the font style, either normal or italics
	 * @alias Titanium_UI_PickerRow.font-style
	 * @property {String}
	 */
	this.font-style = ''
	/**
	 * Get the the font style, either normal or italics
	 * @alias Titanium_UI_PickerRow.getFont-style
	 * @return {String}
	 */
	this.getFont-style = function() { return this.font-style; }
	/**
	 * Set the the font style, either normal or italics
	 * @param {String} value New value to set.
	 * @alias Titanium_UI_PickerRow.setFont-style
	 */
	this.setFont-style = function(value) { this.font-style = value; }
	/**
	 * the font weight, either normal or bold
	 * @alias Titanium_UI_PickerRow.font-weight
	 * @property {String}
	 */
	this.font-weight = ''
	/**
	 * Get the the font weight, either normal or bold
	 * @alias Titanium_UI_PickerRow.getFont-weight
	 * @return {String}
	 */
	this.getFont-weight = function() { return this.font-weight; }
	/**
	 * Set the the font weight, either normal or bold
	 * @param {String} value New value to set.
	 * @alias Titanium_UI_PickerRow.setFont-weight
	 */
	this.setFont-weight = function(value) { this.font-weight = value; }
	/**
	 * the font size when displaying the text. ignored when using a custom view
	 * @alias Titanium_UI_PickerRow.fontSize
	 * @property {Integer}
	 */
	this.fontSize = 0
	/**
	 * Get the the font size when displaying the text. ignored when using a custom view
	 * @alias Titanium_UI_PickerRow.getFontSize
	 * @return {Integer}
	 */
	this.getFontSize = function() { return this.fontSize; }
	/**
	 * Set the the font size when displaying the text. ignored when using a custom view
	 * @param {Integer} value New value to set.
	 * @alias Titanium_UI_PickerRow.setFontSize
	 */
	this.setFontSize = function(value) { this.fontSize = value; }
	/**
	 * property for the view height. Can be either a float value or a dimension string ie 'auto' (default), '50%' (iPhone only).
	 * @alias Titanium_UI_PickerRow.height
	 * @property {Float,String}
	 */
	this.height = 0.0
	/**
	 * Get the property for the view height. Can be either a float value or a dimension string ie 'auto' (default), '50%' (iPhone only).
	 * @alias Titanium_UI_PickerRow.getHeight
	 * @return {Float,String}
	 */
	this.getHeight = function() { return this.height; }
	/**
	 * Set the property for the view height. Can be either a float value or a dimension string ie 'auto' (default), '50%' (iPhone only).
	 * @param {Float,String} value New value to set.
	 * @alias Titanium_UI_PickerRow.setHeight
	 */
	this.setHeight = function(value) { this.height = value; }
	/**
	 * property for the view left position. This position is relative to the view's parent. Can be either a float value or a dimension string ie 'auto' (default), '50%' (iPhone only).
	 * @alias Titanium_UI_PickerRow.left
	 * @property {Float,String}
	 */
	this.left = 0.0
	/**
	 * Get the property for the view left position. This position is relative to the view's parent. Can be either a float value or a dimension string ie 'auto' (default), '50%' (iPhone only).
	 * @alias Titanium_UI_PickerRow.getLeft
	 * @return {Float,String}
	 */
	this.getLeft = function() { return this.left; }
	/**
	 * Set the property for the view left position. This position is relative to the view's parent. Can be either a float value or a dimension string ie 'auto' (default), '50%' (iPhone only).
	 * @param {Float,String} value New value to set.
	 * @alias Titanium_UI_PickerRow.setLeft
	 */
	this.setLeft = function(value) { this.left = value; }
	/**
	 * the opacity from 0.0-1.0
	 * @alias Titanium_UI_PickerRow.opacity
	 * @property {Float}
	 */
	this.opacity = 0.0
	/**
	 * Get the the opacity from 0.0-1.0
	 * @alias Titanium_UI_PickerRow.getOpacity
	 * @return {Float}
	 */
	this.getOpacity = function() { return this.opacity; }
	/**
	 * Set the the opacity from 0.0-1.0
	 * @param {Float} value New value to set.
	 * @alias Titanium_UI_PickerRow.setOpacity
	 */
	this.setOpacity = function(value) { this.opacity = value; }
	/**
	 * property for the view right position. This position is relative to the view's parent. Can be either a float value or a dimension string ie 'auto' (default), '50%' (iPhone only).
	 * @alias Titanium_UI_PickerRow.right
	 * @property {Float,String}
	 */
	this.right = 0.0
	/**
	 * Get the property for the view right position. This position is relative to the view's parent. Can be either a float value or a dimension string ie 'auto' (default), '50%' (iPhone only).
	 * @alias Titanium_UI_PickerRow.getRight
	 * @return {Float,String}
	 */
	this.getRight = function() { return this.right; }
	/**
	 * Set the property for the view right position. This position is relative to the view's parent. Can be either a float value or a dimension string ie 'auto' (default), '50%' (iPhone only).
	 * @param {Float,String} value New value to set.
	 * @alias Titanium_UI_PickerRow.setRight
	 */
	this.setRight = function(value) { this.right = value; }
	/**
	 * when used in the constructor, set the row to selected on initial display
	 * @alias Titanium_UI_PickerRow.selected
	 * @property {Boolean}
	 */
	this.selected = false
	/**
	 * Get the when used in the constructor, set the row to selected on initial display
	 * @alias Titanium_UI_PickerRow.getSelected
	 * @return {Boolean}
	 */
	this.getSelected = function() { return this.selected; }
	/**
	 * Set the when used in the constructor, set the row to selected on initial display
	 * @param {Boolean} value New value to set.
	 * @alias Titanium_UI_PickerRow.setSelected
	 */
	this.setSelected = function(value) { this.selected = value; }
	/**
	 * the size of the view as a dictionary of width and height properties
	 * @alias Titanium_UI_PickerRow.size
	 * @property {Object}
	 */
	this.size = {}
	/**
	 * Get the the size of the view as a dictionary of width and height properties
	 * @alias Titanium_UI_PickerRow.getSize
	 * @return {Object}
	 */
	this.getSize = function() { return this.size; }
	/**
	 * Set the the size of the view as a dictionary of width and height properties
	 * @param {Object} value New value to set.
	 * @alias Titanium_UI_PickerRow.setSize
	 */
	this.setSize = function(value) { this.size = value; }
	/**
	 * One of Titanium.UI.Android.SOFT_KEYBOARD_DEFAULT_ON_FOCUS, Titanium.UI.Android.SOFT_KEYBOARD_HIDE_ON_FOCUS, or Titanium.UI.Android.SOFT_KEYBOARD_SHOW_ON_FOCUS. (Android only)
	 * @alias Titanium_UI_PickerRow.softKeyboardOnFocus
	 * @property {Integer}
	 */
	this.softKeyboardOnFocus = 0
	/**
	 * Get the One of Titanium.UI.Android.SOFT_KEYBOARD_DEFAULT_ON_FOCUS, Titanium.UI.Android.SOFT_KEYBOARD_HIDE_ON_FOCUS, or Titanium.UI.Android.SOFT_KEYBOARD_SHOW_ON_FOCUS. (Android only)
	 * @alias Titanium_UI_PickerRow.getSoftKeyboardOnFocus
	 * @return {Integer}
	 */
	this.getSoftKeyboardOnFocus = function() { return this.softKeyboardOnFocus; }
	/**
	 * Set the One of Titanium.UI.Android.SOFT_KEYBOARD_DEFAULT_ON_FOCUS, Titanium.UI.Android.SOFT_KEYBOARD_HIDE_ON_FOCUS, or Titanium.UI.Android.SOFT_KEYBOARD_SHOW_ON_FOCUS. (Android only)
	 * @param {Integer} value New value to set.
	 * @alias Titanium_UI_PickerRow.setSoftKeyboardOnFocus
	 */
	this.setSoftKeyboardOnFocus = function(value) { this.softKeyboardOnFocus = value; }
	/**
	 * the display text
	 * @alias Titanium_UI_PickerRow.title
	 * @property {String}
	 */
	this.title = ''
	/**
	 * Get the the display text
	 * @alias Titanium_UI_PickerRow.getTitle
	 * @return {String}
	 */
	this.getTitle = function() { return this.title; }
	/**
	 * Set the the display text
	 * @param {String} value New value to set.
	 * @alias Titanium_UI_PickerRow.setTitle
	 */
	this.setTitle = function(value) { this.title = value; }
	/**
	 * property for the view top position. This position is relative to the view's parent. Can be either a float value or a dimension string ie 'auto' (default), '50%' (iPhone only).
	 * @alias Titanium_UI_PickerRow.top
	 * @property {Float,String}
	 */
	this.top = 0.0
	/**
	 * Get the property for the view top position. This position is relative to the view's parent. Can be either a float value or a dimension string ie 'auto' (default), '50%' (iPhone only).
	 * @alias Titanium_UI_PickerRow.getTop
	 * @return {Float,String}
	 */
	this.getTop = function() { return this.top; }
	/**
	 * Set the property for the view top position. This position is relative to the view's parent. Can be either a float value or a dimension string ie 'auto' (default), '50%' (iPhone only).
	 * @param {Float,String} value New value to set.
	 * @alias Titanium_UI_PickerRow.setTop
	 */
	this.setTop = function(value) { this.top = value; }
	/**
	 * a boolean indicating if the view should receive touch events (true, default) or forward them to peers (false)
	 * @alias Titanium_UI_PickerRow.touchEnabled
	 * @property {Boolean}
	 */
	this.touchEnabled = false
	/**
	 * Get the a boolean indicating if the view should receive touch events (true, default) or forward them to peers (false)
	 * @alias Titanium_UI_PickerRow.getTouchEnabled
	 * @return {Boolean}
	 */
	this.getTouchEnabled = function() { return this.touchEnabled; }
	/**
	 * Set the a boolean indicating if the view should receive touch events (true, default) or forward them to peers (false)
	 * @param {Boolean} value New value to set.
	 * @alias Titanium_UI_PickerRow.setTouchEnabled
	 */
	this.setTouchEnabled = function(value) { this.touchEnabled = value; }
	/**
	 * the transformation matrix to apply to the view
	 * @alias Titanium_UI_PickerRow.transform
	 * @property {Object}
	 */
	this.transform = {}
	/**
	 * Get the the transformation matrix to apply to the view
	 * @alias Titanium_UI_PickerRow.getTransform
	 * @return {Object}
	 */
	this.getTransform = function() { return this.transform; }
	/**
	 * Set the the transformation matrix to apply to the view
	 * @param {Object} value New value to set.
	 * @alias Titanium_UI_PickerRow.setTransform
	 */
	this.setTransform = function(value) { this.transform = value; }
	/**
	 * a boolean of the visibility of the view
	 * @alias Titanium_UI_PickerRow.visible
	 * @property {Boolean}
	 */
	this.visible = false
	/**
	 * Get the a boolean of the visibility of the view
	 * @alias Titanium_UI_PickerRow.getVisible
	 * @return {Boolean}
	 */
	this.getVisible = function() { return this.visible; }
	/**
	 * Set the a boolean of the visibility of the view
	 * @param {Boolean} value New value to set.
	 * @alias Titanium_UI_PickerRow.setVisible
	 */
	this.setVisible = function(value) { this.visible = value; }
	/**
	 * property for the view width. Can be either a float value or a dimension string ie 'auto' (default), '50%' (iPhone only).
	 * @alias Titanium_UI_PickerRow.width
	 * @property {Float,String}
	 */
	this.width = 0.0
	/**
	 * Get the property for the view width. Can be either a float value or a dimension string ie 'auto' (default), '50%' (iPhone only).
	 * @alias Titanium_UI_PickerRow.getWidth
	 * @return {Float,String}
	 */
	this.getWidth = function() { return this.width; }
	/**
	 * Set the property for the view width. Can be either a float value or a dimension string ie 'auto' (default), '50%' (iPhone only).
	 * @param {Float,String} value New value to set.
	 * @alias Titanium_UI_PickerRow.setWidth
	 */
	this.setWidth = function(value) { this.width = value; }
	/**
	 * the z index position relative to other sibling views
	 * @alias Titanium_UI_PickerRow.zIndex
	 * @property {Integer}
	 */
	this.zIndex = 0
	/**
	 * Get the the z index position relative to other sibling views
	 * @alias Titanium_UI_PickerRow.getZIndex
	 * @return {Integer}
	 */
	this.getZIndex = function() { return this.zIndex; }
	/**
	 * Set the the z index position relative to other sibling views
	 * @param {Integer} value New value to set.
	 * @alias Titanium_UI_PickerRow.setZIndex
	 */
	this.setZIndex = function(value) { this.zIndex = value; }
	/**
	 * add a child to the view hierarchy
	 * @param {Object} view the view to add to this views hiearchy
	 * @alias Titanium_UI_PickerRow.add
	 */
	this.add = function add(view) { }
	/**
	 * add an event listener for the instance to receive view triggered events
	 * @param {String} name name of the event
	 * @param {Function} callback callback function to invoke when the event is fired
	 * @alias Titanium_UI_PickerRow.addEventListener
	 */
	this.addEventListener = function addEventListener(name,callback) { }
	/**
	 * animate the view
	 * @param {Object} obj either a dictionary of animation properties or an Animation object
	 * @param {Function} callback function to be invoked upon completion of the animation
	 * @alias Titanium_UI_PickerRow.animate
	 */
	this.animate = function animate(obj,callback) { }
	/**
	 * fire a synthesized event to the views listener
	 * @param {String} name name of the event
	 * @param {Object} event event object
	 * @alias Titanium_UI_PickerRow.fireEvent
	 */
	this.fireEvent = function fireEvent(name,event) { }
	/**
	 * hide the view
	 * @alias Titanium_UI_PickerRow.hide
	 */
	this.hide = function hide() { }
	/**
	 * remove a previously add view from the view hiearchy
	 * @param {Object} view the view to remove from this views hiearchy
	 * @alias Titanium_UI_PickerRow.remove
	 */
	this.remove = function remove(view) { }
	/**
	 * remove a previously added event listener
	 * @param {String} name name of the event
	 * @param {Function} callback callback function passed in addEventListener
	 * @alias Titanium_UI_PickerRow.removeEventListener
	 */
	this.removeEventListener = function removeEventListener(name,callback) { }
	/**
	 * make the view visible
	 * @alias Titanium_UI_PickerRow.show
	 */
	this.show = function show() { }
	/**
	 * return a Blob image of the rendered view
	 * @param {Function} f function to be invoked upon completion. if non-null, this method will be performed asynchronously. if null, it will be performed immediately
	 * @alias Titanium_UI_PickerRow.toImage
	 * @return {Object}
	 */
	this.toImage = function toImage(f) { return {}; }
};

/**
 * A Progress Bar is created by the method Titanium.UI.createProgressBar.
 * @since 0.8
 */
function Titanium_UI_ProgressBar() {
	/**
	 * the color of the progress bar text
	 * @alias Titanium_UI_ProgressBar.color
	 * @property {String}
	 */
	this.color = ''
	/**
	 * Get the the color of the progress bar text
	 * @alias Titanium_UI_ProgressBar.getColor
	 * @return {String}
	 */
	this.getColor = function() { return this.color; }
	/**
	 * Set the the color of the progress bar text
	 * @param {String} value New value to set.
	 * @alias Titanium_UI_ProgressBar.setColor
	 */
	this.setColor = function(value) { this.color = value; }
	/**
	 * the font object for the progress bar text
	 * @alias Titanium_UI_ProgressBar.font
	 * @property {Object}
	 */
	this.font = {}
	/**
	 * Get the the font object for the progress bar text
	 * @alias Titanium_UI_ProgressBar.getFont
	 * @return {Object}
	 */
	this.getFont = function() { return this.font; }
	/**
	 * Set the the font object for the progress bar text
	 * @param {Object} value New value to set.
	 * @alias Titanium_UI_ProgressBar.setFont
	 */
	this.setFont = function(value) { this.font = value; }
	/**
	 * the maximum value of the progress bar
	 * @alias Titanium_UI_ProgressBar.max
	 * @property {Float}
	 */
	this.max = 0.0
	/**
	 * Get the the maximum value of the progress bar
	 * @alias Titanium_UI_ProgressBar.getMax
	 * @return {Float}
	 */
	this.getMax = function() { return this.max; }
	/**
	 * Set the the maximum value of the progress bar
	 * @param {Float} value New value to set.
	 * @alias Titanium_UI_ProgressBar.setMax
	 */
	this.setMax = function(value) { this.max = value; }
	/**
	 * the progress bar message
	 * @alias Titanium_UI_ProgressBar.message
	 * @property {String}
	 */
	this.message = ''
	/**
	 * Get the the progress bar message
	 * @alias Titanium_UI_ProgressBar.getMessage
	 * @return {String}
	 */
	this.getMessage = function() { return this.message; }
	/**
	 * Set the the progress bar message
	 * @param {String} value New value to set.
	 * @alias Titanium_UI_ProgressBar.setMessage
	 */
	this.setMessage = function(value) { this.message = value; }
	/**
	 * the minimum value of the progress bar
	 * @alias Titanium_UI_ProgressBar.min
	 * @property {Float}
	 */
	this.min = 0.0
	/**
	 * Get the the minimum value of the progress bar
	 * @alias Titanium_UI_ProgressBar.getMin
	 * @return {Float}
	 */
	this.getMin = function() { return this.min; }
	/**
	 * Set the the minimum value of the progress bar
	 * @param {Float} value New value to set.
	 * @alias Titanium_UI_ProgressBar.setMin
	 */
	this.setMin = function(value) { this.min = value; }
	/**
	 * the style of the progress bar
	 * @alias Titanium_UI_ProgressBar.style
	 * @property {Integer}
	 */
	this.style = 0
	/**
	 * Get the the style of the progress bar
	 * @alias Titanium_UI_ProgressBar.getStyle
	 * @return {Integer}
	 */
	this.getStyle = function() { return this.style; }
	/**
	 * Set the the style of the progress bar
	 * @param {Integer} value New value to set.
	 * @alias Titanium_UI_ProgressBar.setStyle
	 */
	this.setStyle = function(value) { this.style = value; }
	/**
	 * the current value of the progress bar
	 * @alias Titanium_UI_ProgressBar.value
	 * @property {Float}
	 */
	this.value = 0.0
	/**
	 * Get the the current value of the progress bar
	 * @alias Titanium_UI_ProgressBar.getValue
	 * @return {Float}
	 */
	this.getValue = function() { return this.value; }
	/**
	 * Set the the current value of the progress bar
	 * @param {Float} value New value to set.
	 * @alias Titanium_UI_ProgressBar.setValue
	 */
	this.setValue = function(value) { this.value = value; }
};

/**
 * A Scroll View is used to create a scrollable region of content.  Views added to the Scroll View will be scrolled based on the content size of the Scroll View. The Scroll View is created by the method Titanium.UI.createScrollView. Note: In Android, Scroll Views can only scroll in one direction, either vertical or horizontal, but not both at the same time. See the Titanium.UI.ScrollView.scrollType property
 * @since 0.9
 */
function Titanium_UI_ScrollView() {
	/**
	 * a dictionary with properties x and y to indicate the anchor point value. anchor specifies the position by which animation should occur. center is 0.5, 0.5
	 * @alias Titanium_UI_ScrollView.anchorPoint
	 * @property {Object}
	 */
	this.anchorPoint = {}
	/**
	 * Get the a dictionary with properties x and y to indicate the anchor point value. anchor specifies the position by which animation should occur. center is 0.5, 0.5
	 * @alias Titanium_UI_ScrollView.getAnchorPoint
	 * @return {Object}
	 */
	this.getAnchorPoint = function() { return this.anchorPoint; }
	/**
	 * Set the a dictionary with properties x and y to indicate the anchor point value. anchor specifies the position by which animation should occur. center is 0.5, 0.5
	 * @param {Object} value New value to set.
	 * @alias Titanium_UI_ScrollView.setAnchorPoint
	 */
	this.setAnchorPoint = function(value) { this.anchorPoint = value; }
	/**
	 * read-only object with x and y properties of where the view is during animation
	 * @alias Titanium_UI_ScrollView.animatedCenterPoint
	 * @property {Object}
	 */
	this.animatedCenterPoint = {}
	/**
	 * Get the read-only object with x and y properties of where the view is during animation
	 * @alias Titanium_UI_ScrollView.getAnimatedCenterPoint
	 * @return {Object}
	 */
	this.getAnimatedCenterPoint = function() { return this.animatedCenterPoint; }
	/**
	 * Set the read-only object with x and y properties of where the view is during animation
	 * @param {Object} value New value to set.
	 * @alias Titanium_UI_ScrollView.setAnimatedCenterPoint
	 */
	this.setAnimatedCenterPoint = function(value) { this.animatedCenterPoint = value; }
	/**
	 * the background color of the view
	 * @alias Titanium_UI_ScrollView.backgroundColor
	 * @property {String}
	 */
	this.backgroundColor = ''
	/**
	 * Get the the background color of the view
	 * @alias Titanium_UI_ScrollView.getBackgroundColor
	 * @return {String}
	 */
	this.getBackgroundColor = function() { return this.backgroundColor; }
	/**
	 * Set the the background color of the view
	 * @param {String} value New value to set.
	 * @alias Titanium_UI_ScrollView.setBackgroundColor
	 */
	this.setBackgroundColor = function(value) { this.backgroundColor = value; }
	/**
	 * the disabled background color of the view. (Android)
	 * @alias Titanium_UI_ScrollView.backgroundDisabledColor
	 * @property {String}
	 */
	this.backgroundDisabledColor = ''
	/**
	 * Get the the disabled background color of the view. (Android)
	 * @alias Titanium_UI_ScrollView.getBackgroundDisabledColor
	 * @return {String}
	 */
	this.getBackgroundDisabledColor = function() { return this.backgroundDisabledColor; }
	/**
	 * Set the the disabled background color of the view. (Android)
	 * @param {String} value New value to set.
	 * @alias Titanium_UI_ScrollView.setBackgroundDisabledColor
	 */
	this.setBackgroundDisabledColor = function(value) { this.backgroundDisabledColor = value; }
	/**
	 * the disabled background image url of the view. (Android)
	 * @alias Titanium_UI_ScrollView.backgroundDisabledImage
	 * @property {String}
	 */
	this.backgroundDisabledImage = ''
	/**
	 * Get the the disabled background image url of the view. (Android)
	 * @alias Titanium_UI_ScrollView.getBackgroundDisabledImage
	 * @return {String}
	 */
	this.getBackgroundDisabledImage = function() { return this.backgroundDisabledImage; }
	/**
	 * Set the the disabled background image url of the view. (Android)
	 * @param {String} value New value to set.
	 * @alias Titanium_UI_ScrollView.setBackgroundDisabledImage
	 */
	this.setBackgroundDisabledImage = function(value) { this.backgroundDisabledImage = value; }
	/**
	 * the focused background color of the view. focusable must be true for normal views. (Android)
	 * @alias Titanium_UI_ScrollView.backgroundFocusedColor
	 * @property {String}
	 */
	this.backgroundFocusedColor = ''
	/**
	 * Get the the focused background color of the view. focusable must be true for normal views. (Android)
	 * @alias Titanium_UI_ScrollView.getBackgroundFocusedColor
	 * @return {String}
	 */
	this.getBackgroundFocusedColor = function() { return this.backgroundFocusedColor; }
	/**
	 * Set the the focused background color of the view. focusable must be true for normal views. (Android)
	 * @param {String} value New value to set.
	 * @alias Titanium_UI_ScrollView.setBackgroundFocusedColor
	 */
	this.setBackgroundFocusedColor = function(value) { this.backgroundFocusedColor = value; }
	/**
	 * the focused background image url of the view. focusable must be true for normal views. (Android)
	 * @alias Titanium_UI_ScrollView.backgroundFocusedImage
	 * @property {String}
	 */
	this.backgroundFocusedImage = ''
	/**
	 * Get the the focused background image url of the view. focusable must be true for normal views. (Android)
	 * @alias Titanium_UI_ScrollView.getBackgroundFocusedImage
	 * @return {String}
	 */
	this.getBackgroundFocusedImage = function() { return this.backgroundFocusedImage; }
	/**
	 * Set the the focused background image url of the view. focusable must be true for normal views. (Android)
	 * @param {String} value New value to set.
	 * @alias Titanium_UI_ScrollView.setBackgroundFocusedImage
	 */
	this.setBackgroundFocusedImage = function(value) { this.backgroundFocusedImage = value; }
	/**
	 * a background gradient for the view with the properties: type,startPoint,endPoint,startRadius,endRadius,backfillStart,backfillEnd,colors.
	 * @alias Titanium_UI_ScrollView.backgroundGradient
	 * @property {Object}
	 */
	this.backgroundGradient = {}
	/**
	 * Get the a background gradient for the view with the properties: type,startPoint,endPoint,startRadius,endRadius,backfillStart,backfillEnd,colors.
	 * @alias Titanium_UI_ScrollView.getBackgroundGradient
	 * @return {Object}
	 */
	this.getBackgroundGradient = function() { return this.backgroundGradient; }
	/**
	 * Set the a background gradient for the view with the properties: type,startPoint,endPoint,startRadius,endRadius,backfillStart,backfillEnd,colors.
	 * @param {Object} value New value to set.
	 * @alias Titanium_UI_ScrollView.setBackgroundGradient
	 */
	this.setBackgroundGradient = function(value) { this.backgroundGradient = value; }
	/**
	 * the background image url of the view
	 * @alias Titanium_UI_ScrollView.backgroundImage
	 * @property {String}
	 */
	this.backgroundImage = ''
	/**
	 * Get the the background image url of the view
	 * @alias Titanium_UI_ScrollView.getBackgroundImage
	 * @return {String}
	 */
	this.getBackgroundImage = function() { return this.backgroundImage; }
	/**
	 * Set the the background image url of the view
	 * @param {String} value New value to set.
	 * @alias Titanium_UI_ScrollView.setBackgroundImage
	 */
	this.setBackgroundImage = function(value) { this.backgroundImage = value; }
	/**
	 * End caps specify the portion of an image that should not be resized when an image is stretched. This technique is used to implement buttons and other resizable image-based interface elements. When a button with end caps is resized, the resizing occurs only in the middle of the button, in the region between the end caps. The end caps themselves keep their original size and appearance. This property specifies the size of the left end cap. The middle (stretchable) portion is assumed to be 1 pixel wide. The right end cap is therefore computed by adding the size of the left end cap and the middle portion together and then subtracting that value from the width of the image
	 * @alias Titanium_UI_ScrollView.backgroundLeftCap
	 * @property {Float}
	 */
	this.backgroundLeftCap = 0.0
	/**
	 * Get the End caps specify the portion of an image that should not be resized when an image is stretched. This technique is used to implement buttons and other resizable image-based interface elements. When a button with end caps is resized, the resizing occurs only in the middle of the button, in the region between the end caps. The end caps themselves keep their original size and appearance. This property specifies the size of the left end cap. The middle (stretchable) portion is assumed to be 1 pixel wide. The right end cap is therefore computed by adding the size of the left end cap and the middle portion together and then subtracting that value from the width of the image
	 * @alias Titanium_UI_ScrollView.getBackgroundLeftCap
	 * @return {Float}
	 */
	this.getBackgroundLeftCap = function() { return this.backgroundLeftCap; }
	/**
	 * Set the End caps specify the portion of an image that should not be resized when an image is stretched. This technique is used to implement buttons and other resizable image-based interface elements. When a button with end caps is resized, the resizing occurs only in the middle of the button, in the region between the end caps. The end caps themselves keep their original size and appearance. This property specifies the size of the left end cap. The middle (stretchable) portion is assumed to be 1 pixel wide. The right end cap is therefore computed by adding the size of the left end cap and the middle portion together and then subtracting that value from the width of the image
	 * @param {Float} value New value to set.
	 * @alias Titanium_UI_ScrollView.setBackgroundLeftCap
	 */
	this.setBackgroundLeftCap = function(value) { this.backgroundLeftCap = value; }
	/**
	 * the selected background color of the view. focusable must be true for normal views. (Android)
	 * @alias Titanium_UI_ScrollView.backgroundSelectedColor
	 * @property {String}
	 */
	this.backgroundSelectedColor = ''
	/**
	 * Get the the selected background color of the view. focusable must be true for normal views. (Android)
	 * @alias Titanium_UI_ScrollView.getBackgroundSelectedColor
	 * @return {String}
	 */
	this.getBackgroundSelectedColor = function() { return this.backgroundSelectedColor; }
	/**
	 * Set the the selected background color of the view. focusable must be true for normal views. (Android)
	 * @param {String} value New value to set.
	 * @alias Titanium_UI_ScrollView.setBackgroundSelectedColor
	 */
	this.setBackgroundSelectedColor = function(value) { this.backgroundSelectedColor = value; }
	/**
	 * the selected background image url of the view. focusable must be true for normal views. (Android)
	 * @alias Titanium_UI_ScrollView.backgroundSelectedImage
	 * @property {String}
	 */
	this.backgroundSelectedImage = ''
	/**
	 * Get the the selected background image url of the view. focusable must be true for normal views. (Android)
	 * @alias Titanium_UI_ScrollView.getBackgroundSelectedImage
	 * @return {String}
	 */
	this.getBackgroundSelectedImage = function() { return this.backgroundSelectedImage; }
	/**
	 * Set the the selected background image url of the view. focusable must be true for normal views. (Android)
	 * @param {String} value New value to set.
	 * @alias Titanium_UI_ScrollView.setBackgroundSelectedImage
	 */
	this.setBackgroundSelectedImage = function(value) { this.backgroundSelectedImage = value; }
	/**
	 * End caps specify the portion of an image that should not be resized when an image is stretched. This technique is used to implement buttons and other resizable image-based interface elements. When a button with end caps is resized, the resizing occurs only in the middle of the button, in the region between the end caps. The end caps themselves keep their original size and appearance. This property specifies the size of the top end cap. The middle (stretchable) portion is assumed to be 1 pixel wide. The bottom end cap is therefore computed by adding the size of the top end cap and the middle portion together and then subtracting that value from the height of the image
	 * @alias Titanium_UI_ScrollView.backgroundTopCap
	 * @property {Float}
	 */
	this.backgroundTopCap = 0.0
	/**
	 * Get the End caps specify the portion of an image that should not be resized when an image is stretched. This technique is used to implement buttons and other resizable image-based interface elements. When a button with end caps is resized, the resizing occurs only in the middle of the button, in the region between the end caps. The end caps themselves keep their original size and appearance. This property specifies the size of the top end cap. The middle (stretchable) portion is assumed to be 1 pixel wide. The bottom end cap is therefore computed by adding the size of the top end cap and the middle portion together and then subtracting that value from the height of the image
	 * @alias Titanium_UI_ScrollView.getBackgroundTopCap
	 * @return {Float}
	 */
	this.getBackgroundTopCap = function() { return this.backgroundTopCap; }
	/**
	 * Set the End caps specify the portion of an image that should not be resized when an image is stretched. This technique is used to implement buttons and other resizable image-based interface elements. When a button with end caps is resized, the resizing occurs only in the middle of the button, in the region between the end caps. The end caps themselves keep their original size and appearance. This property specifies the size of the top end cap. The middle (stretchable) portion is assumed to be 1 pixel wide. The bottom end cap is therefore computed by adding the size of the top end cap and the middle portion together and then subtracting that value from the height of the image
	 * @param {Float} value New value to set.
	 * @alias Titanium_UI_ScrollView.setBackgroundTopCap
	 */
	this.setBackgroundTopCap = function(value) { this.backgroundTopCap = value; }
	/**
	 * the border color of the view
	 * @alias Titanium_UI_ScrollView.borderColor
	 * @property {String}
	 */
	this.borderColor = ''
	/**
	 * Get the the border color of the view
	 * @alias Titanium_UI_ScrollView.getBorderColor
	 * @return {String}
	 */
	this.getBorderColor = function() { return this.borderColor; }
	/**
	 * Set the the border color of the view
	 * @param {String} value New value to set.
	 * @alias Titanium_UI_ScrollView.setBorderColor
	 */
	this.setBorderColor = function(value) { this.borderColor = value; }
	/**
	 * the border radius of the view
	 * @alias Titanium_UI_ScrollView.borderRadius
	 * @property {Float}
	 */
	this.borderRadius = 0.0
	/**
	 * Get the the border radius of the view
	 * @alias Titanium_UI_ScrollView.getBorderRadius
	 * @return {Float}
	 */
	this.getBorderRadius = function() { return this.borderRadius; }
	/**
	 * Set the the border radius of the view
	 * @param {Float} value New value to set.
	 * @alias Titanium_UI_ScrollView.setBorderRadius
	 */
	this.setBorderRadius = function(value) { this.borderRadius = value; }
	/**
	 * the border width of the view
	 * @alias Titanium_UI_ScrollView.borderWidth
	 * @property {Float}
	 */
	this.borderWidth = 0.0
	/**
	 * Get the the border width of the view
	 * @alias Titanium_UI_ScrollView.getBorderWidth
	 * @return {Float}
	 */
	this.getBorderWidth = function() { return this.borderWidth; }
	/**
	 * Set the the border width of the view
	 * @param {Float} value New value to set.
	 * @alias Titanium_UI_ScrollView.setBorderWidth
	 */
	this.setBorderWidth = function(value) { this.borderWidth = value; }
	/**
	 * property for the view bottom position. This position is relative to the view's parent. Can be either a float value or a dimension string ie 'auto' (default), '50%' (iPhone only).
	 * @alias Titanium_UI_ScrollView.bottom
	 * @property {Float,String}
	 */
	this.bottom = 0.0
	/**
	 * Get the property for the view bottom position. This position is relative to the view's parent. Can be either a float value or a dimension string ie 'auto' (default), '50%' (iPhone only).
	 * @alias Titanium_UI_ScrollView.getBottom
	 * @return {Float,String}
	 */
	this.getBottom = function() { return this.bottom; }
	/**
	 * Set the property for the view bottom position. This position is relative to the view's parent. Can be either a float value or a dimension string ie 'auto' (default), '50%' (iPhone only).
	 * @param {Float,String} value New value to set.
	 * @alias Titanium_UI_ScrollView.setBottom
	 */
	this.setBottom = function(value) { this.bottom = value; }
	/**
	 * (iPhone only) boolean to indicate if the scroll view can cancel subview touches in order to scroll instead. Default of true
	 * @alias Titanium_UI_ScrollView.canCancelEvents
	 * @property {Boolean}
	 */
	this.canCancelEvents = false
	/**
	 * Get the (iPhone only) boolean to indicate if the scroll view can cancel subview touches in order to scroll instead. Default of true
	 * @alias Titanium_UI_ScrollView.getCanCancelEvents
	 * @return {Boolean}
	 */
	this.getCanCancelEvents = function() { return this.canCancelEvents; }
	/**
	 * Set the (iPhone only) boolean to indicate if the scroll view can cancel subview touches in order to scroll instead. Default of true
	 * @param {Boolean} value New value to set.
	 * @alias Titanium_UI_ScrollView.setCanCancelEvents
	 */
	this.setCanCancelEvents = function(value) { this.canCancelEvents = value; }
	/**
	 * a dictionary with properties x and y to indicate the center of the views position relative to the parent view
	 * @alias Titanium_UI_ScrollView.center
	 * @property {Object}
	 */
	this.center = {}
	/**
	 * Get the a dictionary with properties x and y to indicate the center of the views position relative to the parent view
	 * @alias Titanium_UI_ScrollView.getCenter
	 * @return {Object}
	 */
	this.getCenter = function() { return this.center; }
	/**
	 * Set the a dictionary with properties x and y to indicate the center of the views position relative to the parent view
	 * @param {Object} value New value to set.
	 * @alias Titanium_UI_ScrollView.setCenter
	 */
	this.setCenter = function(value) { this.center = value; }
	/**
	 * the height of the scrollable area
	 * @alias Titanium_UI_ScrollView.contentHeight
	 * @property {Float}
	 */
	this.contentHeight = 0.0
	/**
	 * Get the the height of the scrollable area
	 * @alias Titanium_UI_ScrollView.getContentHeight
	 * @return {Float}
	 */
	this.getContentHeight = function() { return this.contentHeight; }
	/**
	 * Set the the height of the scrollable area
	 * @param {Float} value New value to set.
	 * @alias Titanium_UI_ScrollView.setContentHeight
	 */
	this.setContentHeight = function(value) { this.contentHeight = value; }
	/**
	 * an object (with x and y properties) to indicate the offset of the content area
	 * @alias Titanium_UI_ScrollView.contentOffset
	 * @property {Object}
	 */
	this.contentOffset = {}
	/**
	 * Get the an object (with x and y properties) to indicate the offset of the content area
	 * @alias Titanium_UI_ScrollView.getContentOffset
	 * @return {Object}
	 */
	this.getContentOffset = function() { return this.contentOffset; }
	/**
	 * Set the an object (with x and y properties) to indicate the offset of the content area
	 * @param {Object} value New value to set.
	 * @alias Titanium_UI_ScrollView.setContentOffset
	 */
	this.setContentOffset = function(value) { this.contentOffset = value; }
	/**
	 * the width of the scrollable area
	 * @alias Titanium_UI_ScrollView.contentWidth
	 * @property {Float}
	 */
	this.contentWidth = 0.0
	/**
	 * Get the the width of the scrollable area
	 * @alias Titanium_UI_ScrollView.getContentWidth
	 * @return {Float}
	 */
	this.getContentWidth = function() { return this.contentWidth; }
	/**
	 * Set the the width of the scrollable area
	 * @param {Float} value New value to set.
	 * @alias Titanium_UI_ScrollView.setContentWidth
	 */
	this.setContentWidth = function(value) { this.contentWidth = value; }
	/**
	 * boolean to control bounce during scrolling
	 * @alias Titanium_UI_ScrollView.disableBounce
	 * @property {Boolean}
	 */
	this.disableBounce = false
	/**
	 * Get the boolean to control bounce during scrolling
	 * @alias Titanium_UI_ScrollView.getDisableBounce
	 * @return {Boolean}
	 */
	this.getDisableBounce = function() { return this.disableBounce; }
	/**
	 * Set the boolean to control bounce during scrolling
	 * @param {Boolean} value New value to set.
	 * @alias Titanium_UI_ScrollView.setDisableBounce
	 */
	this.setDisableBounce = function(value) { this.disableBounce = value; }
	/**
	 * Set true if you want a view to be focusable when navigating with the trackball or D-Pad. Default: false. (Android Only)
	 * @alias Titanium_UI_ScrollView.focusable
	 * @property {Boolean}
	 */
	this.focusable = false
	/**
	 * Get the Set true if you want a view to be focusable when navigating with the trackball or D-Pad. Default: false. (Android Only)
	 * @alias Titanium_UI_ScrollView.getFocusable
	 * @return {Boolean}
	 */
	this.getFocusable = function() { return this.focusable; }
	/**
	 * Set the Set true if you want a view to be focusable when navigating with the trackball or D-Pad. Default: false. (Android Only)
	 * @param {Boolean} value New value to set.
	 * @alias Titanium_UI_ScrollView.setFocusable
	 */
	this.setFocusable = function(value) { this.focusable = value; }
	/**
	 * the font family
	 * @alias Titanium_UI_ScrollView.font-family
	 * @property {String}
	 */
	this.font-family = ''
	/**
	 * Get the the font family
	 * @alias Titanium_UI_ScrollView.getFont-family
	 * @return {String}
	 */
	this.getFont-family = function() { return this.font-family; }
	/**
	 * Set the the font family
	 * @param {String} value New value to set.
	 * @alias Titanium_UI_ScrollView.setFont-family
	 */
	this.setFont-family = function(value) { this.font-family = value; }
	/**
	 * the font size
	 * @alias Titanium_UI_ScrollView.font-size
	 * @property {String}
	 */
	this.font-size = ''
	/**
	 * Get the the font size
	 * @alias Titanium_UI_ScrollView.getFont-size
	 * @return {String}
	 */
	this.getFont-size = function() { return this.font-size; }
	/**
	 * Set the the font size
	 * @param {String} value New value to set.
	 * @alias Titanium_UI_ScrollView.setFont-size
	 */
	this.setFont-size = function(value) { this.font-size = value; }
	/**
	 * the font style, either normal or italics
	 * @alias Titanium_UI_ScrollView.font-style
	 * @property {String}
	 */
	this.font-style = ''
	/**
	 * Get the the font style, either normal or italics
	 * @alias Titanium_UI_ScrollView.getFont-style
	 * @return {String}
	 */
	this.getFont-style = function() { return this.font-style; }
	/**
	 * Set the the font style, either normal or italics
	 * @param {String} value New value to set.
	 * @alias Titanium_UI_ScrollView.setFont-style
	 */
	this.setFont-style = function(value) { this.font-style = value; }
	/**
	 * the font weight, either normal or bold
	 * @alias Titanium_UI_ScrollView.font-weight
	 * @property {String}
	 */
	this.font-weight = ''
	/**
	 * Get the the font weight, either normal or bold
	 * @alias Titanium_UI_ScrollView.getFont-weight
	 * @return {String}
	 */
	this.getFont-weight = function() { return this.font-weight; }
	/**
	 * Set the the font weight, either normal or bold
	 * @param {String} value New value to set.
	 * @alias Titanium_UI_ScrollView.setFont-weight
	 */
	this.setFont-weight = function(value) { this.font-weight = value; }
	/**
	 * property for the view height. Can be either a float value or a dimension string ie 'auto' (default), '50%' (iPhone only).
	 * @alias Titanium_UI_ScrollView.height
	 * @property {Float,String}
	 */
	this.height = 0.0
	/**
	 * Get the property for the view height. Can be either a float value or a dimension string ie 'auto' (default), '50%' (iPhone only).
	 * @alias Titanium_UI_ScrollView.getHeight
	 * @return {Float,String}
	 */
	this.getHeight = function() { return this.height; }
	/**
	 * Set the property for the view height. Can be either a float value or a dimension string ie 'auto' (default), '50%' (iPhone only).
	 * @param {Float,String} value New value to set.
	 * @alias Titanium_UI_ScrollView.setHeight
	 */
	this.setHeight = function(value) { this.height = value; }
	/**
	 * boolean to control the horizontal bounce during scrolling
	 * @alias Titanium_UI_ScrollView.horizontalBounce
	 * @property {Boolean}
	 */
	this.horizontalBounce = false
	/**
	 * Get the boolean to control the horizontal bounce during scrolling
	 * @alias Titanium_UI_ScrollView.getHorizontalBounce
	 * @return {Boolean}
	 */
	this.getHorizontalBounce = function() { return this.horizontalBounce; }
	/**
	 * Set the boolean to control the horizontal bounce during scrolling
	 * @param {Boolean} value New value to set.
	 * @alias Titanium_UI_ScrollView.setHorizontalBounce
	 */
	this.setHorizontalBounce = function(value) { this.horizontalBounce = value; }
	/**
	 * property for the view left position. This position is relative to the view's parent. Can be either a float value or a dimension string ie 'auto' (default), '50%' (iPhone only).
	 * @alias Titanium_UI_ScrollView.left
	 * @property {Float,String}
	 */
	this.left = 0.0
	/**
	 * Get the property for the view left position. This position is relative to the view's parent. Can be either a float value or a dimension string ie 'auto' (default), '50%' (iPhone only).
	 * @alias Titanium_UI_ScrollView.getLeft
	 * @return {Float,String}
	 */
	this.getLeft = function() { return this.left; }
	/**
	 * Set the property for the view left position. This position is relative to the view's parent. Can be either a float value or a dimension string ie 'auto' (default), '50%' (iPhone only).
	 * @param {Float,String} value New value to set.
	 * @alias Titanium_UI_ScrollView.setLeft
	 */
	this.setLeft = function(value) { this.left = value; }
	/**
	 * the maximum scale of the content
	 * @alias Titanium_UI_ScrollView.maxZoomScale
	 * @property {Float}
	 */
	this.maxZoomScale = 0.0
	/**
	 * Get the the maximum scale of the content
	 * @alias Titanium_UI_ScrollView.getMaxZoomScale
	 * @return {Float}
	 */
	this.getMaxZoomScale = function() { return this.maxZoomScale; }
	/**
	 * Set the the maximum scale of the content
	 * @param {Float} value New value to set.
	 * @alias Titanium_UI_ScrollView.setMaxZoomScale
	 */
	this.setMaxZoomScale = function(value) { this.maxZoomScale = value; }
	/**
	 * the minimum scale of the content
	 * @alias Titanium_UI_ScrollView.minZoomScale
	 * @property {Float}
	 */
	this.minZoomScale = 0.0
	/**
	 * Get the the minimum scale of the content
	 * @alias Titanium_UI_ScrollView.getMinZoomScale
	 * @return {Float}
	 */
	this.getMinZoomScale = function() { return this.minZoomScale; }
	/**
	 * Set the the minimum scale of the content
	 * @param {Float} value New value to set.
	 * @alias Titanium_UI_ScrollView.setMinZoomScale
	 */
	this.setMinZoomScale = function(value) { this.minZoomScale = value; }
	/**
	 * the opacity from 0.0-1.0
	 * @alias Titanium_UI_ScrollView.opacity
	 * @property {Float}
	 */
	this.opacity = 0.0
	/**
	 * Get the the opacity from 0.0-1.0
	 * @alias Titanium_UI_ScrollView.getOpacity
	 * @return {Float}
	 */
	this.getOpacity = function() { return this.opacity; }
	/**
	 * Set the the opacity from 0.0-1.0
	 * @param {Float} value New value to set.
	 * @alias Titanium_UI_ScrollView.setOpacity
	 */
	this.setOpacity = function(value) { this.opacity = value; }
	/**
	 * property for the view right position. This position is relative to the view's parent. Can be either a float value or a dimension string ie 'auto' (default), '50%' (iPhone only).
	 * @alias Titanium_UI_ScrollView.right
	 * @property {Float,String}
	 */
	this.right = 0.0
	/**
	 * Get the property for the view right position. This position is relative to the view's parent. Can be either a float value or a dimension string ie 'auto' (default), '50%' (iPhone only).
	 * @alias Titanium_UI_ScrollView.getRight
	 * @return {Float,String}
	 */
	this.getRight = function() { return this.right; }
	/**
	 * Set the property for the view right position. This position is relative to the view's parent. Can be either a float value or a dimension string ie 'auto' (default), '50%' (iPhone only).
	 * @param {Float,String} value New value to set.
	 * @alias Titanium_UI_ScrollView.setRight
	 */
	this.setRight = function(value) { this.right = value; }
	/**
	 * (Android only) the type of ScrollView: "vertical" or "horizontal"
	 * @alias Titanium_UI_ScrollView.scrollType
	 * @property {String}
	 */
	this.scrollType = ''
	/**
	 * Get the (Android only) the type of ScrollView: "vertical" or "horizontal"
	 * @alias Titanium_UI_ScrollView.getScrollType
	 * @return {String}
	 */
	this.getScrollType = function() { return this.scrollType; }
	/**
	 * Set the (Android only) the type of ScrollView: "vertical" or "horizontal"
	 * @param {String} value New value to set.
	 * @alias Titanium_UI_ScrollView.setScrollType
	 */
	this.setScrollType = function(value) { this.scrollType = value; }
	/**
	 * boolean to indicate whether the horizontal scroll indicator is visible
	 * @alias Titanium_UI_ScrollView.showHorizontalScrollIndicator
	 * @property {Boolean}
	 */
	this.showHorizontalScrollIndicator = false
	/**
	 * Get the boolean to indicate whether the horizontal scroll indicator is visible
	 * @alias Titanium_UI_ScrollView.getShowHorizontalScrollIndicator
	 * @return {Boolean}
	 */
	this.getShowHorizontalScrollIndicator = function() { return this.showHorizontalScrollIndicator; }
	/**
	 * Set the boolean to indicate whether the horizontal scroll indicator is visible
	 * @param {Boolean} value New value to set.
	 * @alias Titanium_UI_ScrollView.setShowHorizontalScrollIndicator
	 */
	this.setShowHorizontalScrollIndicator = function(value) { this.showHorizontalScrollIndicator = value; }
	/**
	 * boolean to indicate whether the vertical scroll indicator is visible
	 * @alias Titanium_UI_ScrollView.showVerticalScrollIndicator
	 * @property {Boolean}
	 */
	this.showVerticalScrollIndicator = false
	/**
	 * Get the boolean to indicate whether the vertical scroll indicator is visible
	 * @alias Titanium_UI_ScrollView.getShowVerticalScrollIndicator
	 * @return {Boolean}
	 */
	this.getShowVerticalScrollIndicator = function() { return this.showVerticalScrollIndicator; }
	/**
	 * Set the boolean to indicate whether the vertical scroll indicator is visible
	 * @param {Boolean} value New value to set.
	 * @alias Titanium_UI_ScrollView.setShowVerticalScrollIndicator
	 */
	this.setShowVerticalScrollIndicator = function(value) { this.showVerticalScrollIndicator = value; }
	/**
	 * the size of the view as a dictionary of width and height properties
	 * @alias Titanium_UI_ScrollView.size
	 * @property {Object}
	 */
	this.size = {}
	/**
	 * Get the the size of the view as a dictionary of width and height properties
	 * @alias Titanium_UI_ScrollView.getSize
	 * @return {Object}
	 */
	this.getSize = function() { return this.size; }
	/**
	 * Set the the size of the view as a dictionary of width and height properties
	 * @param {Object} value New value to set.
	 * @alias Titanium_UI_ScrollView.setSize
	 */
	this.setSize = function(value) { this.size = value; }
	/**
	 * One of Titanium.UI.Android.SOFT_KEYBOARD_DEFAULT_ON_FOCUS, Titanium.UI.Android.SOFT_KEYBOARD_HIDE_ON_FOCUS, or Titanium.UI.Android.SOFT_KEYBOARD_SHOW_ON_FOCUS. (Android only)
	 * @alias Titanium_UI_ScrollView.softKeyboardOnFocus
	 * @property {Integer}
	 */
	this.softKeyboardOnFocus = 0
	/**
	 * Get the One of Titanium.UI.Android.SOFT_KEYBOARD_DEFAULT_ON_FOCUS, Titanium.UI.Android.SOFT_KEYBOARD_HIDE_ON_FOCUS, or Titanium.UI.Android.SOFT_KEYBOARD_SHOW_ON_FOCUS. (Android only)
	 * @alias Titanium_UI_ScrollView.getSoftKeyboardOnFocus
	 * @return {Integer}
	 */
	this.getSoftKeyboardOnFocus = function() { return this.softKeyboardOnFocus; }
	/**
	 * Set the One of Titanium.UI.Android.SOFT_KEYBOARD_DEFAULT_ON_FOCUS, Titanium.UI.Android.SOFT_KEYBOARD_HIDE_ON_FOCUS, or Titanium.UI.Android.SOFT_KEYBOARD_SHOW_ON_FOCUS. (Android only)
	 * @param {Integer} value New value to set.
	 * @alias Titanium_UI_ScrollView.setSoftKeyboardOnFocus
	 */
	this.setSoftKeyboardOnFocus = function(value) { this.softKeyboardOnFocus = value; }
	/**
	 * property for the view top position. This position is relative to the view's parent. Can be either a float value or a dimension string ie 'auto' (default), '50%' (iPhone only).
	 * @alias Titanium_UI_ScrollView.top
	 * @property {Float,String}
	 */
	this.top = 0.0
	/**
	 * Get the property for the view top position. This position is relative to the view's parent. Can be either a float value or a dimension string ie 'auto' (default), '50%' (iPhone only).
	 * @alias Titanium_UI_ScrollView.getTop
	 * @return {Float,String}
	 */
	this.getTop = function() { return this.top; }
	/**
	 * Set the property for the view top position. This position is relative to the view's parent. Can be either a float value or a dimension string ie 'auto' (default), '50%' (iPhone only).
	 * @param {Float,String} value New value to set.
	 * @alias Titanium_UI_ScrollView.setTop
	 */
	this.setTop = function(value) { this.top = value; }
	/**
	 * a boolean indicating if the view should receive touch events (true, default) or forward them to peers (false)
	 * @alias Titanium_UI_ScrollView.touchEnabled
	 * @property {Boolean}
	 */
	this.touchEnabled = false
	/**
	 * Get the a boolean indicating if the view should receive touch events (true, default) or forward them to peers (false)
	 * @alias Titanium_UI_ScrollView.getTouchEnabled
	 * @return {Boolean}
	 */
	this.getTouchEnabled = function() { return this.touchEnabled; }
	/**
	 * Set the a boolean indicating if the view should receive touch events (true, default) or forward them to peers (false)
	 * @param {Boolean} value New value to set.
	 * @alias Titanium_UI_ScrollView.setTouchEnabled
	 */
	this.setTouchEnabled = function(value) { this.touchEnabled = value; }
	/**
	 * the transformation matrix to apply to the view
	 * @alias Titanium_UI_ScrollView.transform
	 * @property {Object}
	 */
	this.transform = {}
	/**
	 * Get the the transformation matrix to apply to the view
	 * @alias Titanium_UI_ScrollView.getTransform
	 * @return {Object}
	 */
	this.getTransform = function() { return this.transform; }
	/**
	 * Set the the transformation matrix to apply to the view
	 * @param {Object} value New value to set.
	 * @alias Titanium_UI_ScrollView.setTransform
	 */
	this.setTransform = function(value) { this.transform = value; }
	/**
	 * boolean to control the vertical bounce during scrolling
	 * @alias Titanium_UI_ScrollView.verticalBounce
	 * @property {Boolean}
	 */
	this.verticalBounce = false
	/**
	 * Get the boolean to control the vertical bounce during scrolling
	 * @alias Titanium_UI_ScrollView.getVerticalBounce
	 * @return {Boolean}
	 */
	this.getVerticalBounce = function() { return this.verticalBounce; }
	/**
	 * Set the boolean to control the vertical bounce during scrolling
	 * @param {Boolean} value New value to set.
	 * @alias Titanium_UI_ScrollView.setVerticalBounce
	 */
	this.setVerticalBounce = function(value) { this.verticalBounce = value; }
	/**
	 * a boolean of the visibility of the view
	 * @alias Titanium_UI_ScrollView.visible
	 * @property {Boolean}
	 */
	this.visible = false
	/**
	 * Get the a boolean of the visibility of the view
	 * @alias Titanium_UI_ScrollView.getVisible
	 * @return {Boolean}
	 */
	this.getVisible = function() { return this.visible; }
	/**
	 * Set the a boolean of the visibility of the view
	 * @param {Boolean} value New value to set.
	 * @alias Titanium_UI_ScrollView.setVisible
	 */
	this.setVisible = function(value) { this.visible = value; }
	/**
	 * property for the view width. Can be either a float value or a dimension string ie 'auto' (default), '50%' (iPhone only).
	 * @alias Titanium_UI_ScrollView.width
	 * @property {Float,String}
	 */
	this.width = 0.0
	/**
	 * Get the property for the view width. Can be either a float value or a dimension string ie 'auto' (default), '50%' (iPhone only).
	 * @alias Titanium_UI_ScrollView.getWidth
	 * @return {Float,String}
	 */
	this.getWidth = function() { return this.width; }
	/**
	 * Set the property for the view width. Can be either a float value or a dimension string ie 'auto' (default), '50%' (iPhone only).
	 * @param {Float,String} value New value to set.
	 * @alias Titanium_UI_ScrollView.setWidth
	 */
	this.setWidth = function(value) { this.width = value; }
	/**
	 * the z index position relative to other sibling views
	 * @alias Titanium_UI_ScrollView.zIndex
	 * @property {Integer}
	 */
	this.zIndex = 0
	/**
	 * Get the the z index position relative to other sibling views
	 * @alias Titanium_UI_ScrollView.getZIndex
	 * @return {Integer}
	 */
	this.getZIndex = function() { return this.zIndex; }
	/**
	 * Set the the z index position relative to other sibling views
	 * @param {Integer} value New value to set.
	 * @alias Titanium_UI_ScrollView.setZIndex
	 */
	this.setZIndex = function(value) { this.zIndex = value; }
	/**
	 * set the zoom scale for the current content area
	 * @alias Titanium_UI_ScrollView.zoomScale
	 * @property {Float}
	 */
	this.zoomScale = 0.0
	/**
	 * Get the set the zoom scale for the current content area
	 * @alias Titanium_UI_ScrollView.getZoomScale
	 * @return {Float}
	 */
	this.getZoomScale = function() { return this.zoomScale; }
	/**
	 * Set the set the zoom scale for the current content area
	 * @param {Float} value New value to set.
	 * @alias Titanium_UI_ScrollView.setZoomScale
	 */
	this.setZoomScale = function(value) { this.zoomScale = value; }
	/**
	 * add a child to the view hierarchy
	 * @param {Object} view the view to add to this views hiearchy
	 * @alias Titanium_UI_ScrollView.add
	 */
	this.add = function add(view) { }
	/**
	 * add an event listener for the instance to receive view triggered events
	 * @param {String} name name of the event
	 * @param {Function} callback callback function to invoke when the event is fired
	 * @alias Titanium_UI_ScrollView.addEventListener
	 */
	this.addEventListener = function addEventListener(name,callback) { }
	/**
	 * animate the view
	 * @param {Object} obj either a dictionary of animation properties or an Animation object
	 * @param {Function} callback function to be invoked upon completion of the animation
	 * @alias Titanium_UI_ScrollView.animate
	 */
	this.animate = function animate(obj,callback) { }
	/**
	 * fire a synthesized event to the views listener
	 * @param {String} name name of the event
	 * @param {Object} event event object
	 * @alias Titanium_UI_ScrollView.fireEvent
	 */
	this.fireEvent = function fireEvent(name,event) { }
	/**
	 * hide the view
	 * @alias Titanium_UI_ScrollView.hide
	 */
	this.hide = function hide() { }
	/**
	 * remove a previously add view from the view hiearchy
	 * @param {Object} view the view to remove from this views hiearchy
	 * @alias Titanium_UI_ScrollView.remove
	 */
	this.remove = function remove(view) { }
	/**
	 * remove a previously added event listener
	 * @param {String} name name of the event
	 * @param {Function} callback callback function passed in addEventListener
	 * @alias Titanium_UI_ScrollView.removeEventListener
	 */
	this.removeEventListener = function removeEventListener(name,callback) { }
	/**
	 * scrollTo a particular point
	 * @param {Float} x the x point within the view
	 * @param {Float} y the y point within the view
	 * @alias Titanium_UI_ScrollView.scrollTo
	 */
	this.scrollTo = function scrollTo(x,y) { }
	/**
	 * make the view visible
	 * @alias Titanium_UI_ScrollView.show
	 */
	this.show = function show() { }
	/**
	 * return a Blob image of the rendered view
	 * @param {Function} f function to be invoked upon completion. if non-null, this method will be performed asynchronously. if null, it will be performed immediately
	 * @alias Titanium_UI_ScrollView.toImage
	 * @return {Object}
	 */
	this.toImage = function toImage(f) { return {}; }
};

/**
 * The Scrollable View provides a view that supports horizontal scrolling on one or more views in a gesture motion.  The Scrollable View also optionally supports a visual paging control to indicate the page that the view is visible. The Scrollable View is created by the method Titanium.UI.createScrollableView.
 * @since 0.8
 */
function Titanium_UI_ScrollableView() {
	/**
	 * a dictionary with properties x and y to indicate the anchor point value. anchor specifies the position by which animation should occur. center is 0.5, 0.5
	 * @alias Titanium_UI_ScrollableView.anchorPoint
	 * @property {Object}
	 */
	this.anchorPoint = {}
	/**
	 * Get the a dictionary with properties x and y to indicate the anchor point value. anchor specifies the position by which animation should occur. center is 0.5, 0.5
	 * @alias Titanium_UI_ScrollableView.getAnchorPoint
	 * @return {Object}
	 */
	this.getAnchorPoint = function() { return this.anchorPoint; }
	/**
	 * Set the a dictionary with properties x and y to indicate the anchor point value. anchor specifies the position by which animation should occur. center is 0.5, 0.5
	 * @param {Object} value New value to set.
	 * @alias Titanium_UI_ScrollableView.setAnchorPoint
	 */
	this.setAnchorPoint = function(value) { this.anchorPoint = value; }
	/**
	 * read-only object with x and y properties of where the view is during animation
	 * @alias Titanium_UI_ScrollableView.animatedCenterPoint
	 * @property {Object}
	 */
	this.animatedCenterPoint = {}
	/**
	 * Get the read-only object with x and y properties of where the view is during animation
	 * @alias Titanium_UI_ScrollableView.getAnimatedCenterPoint
	 * @return {Object}
	 */
	this.getAnimatedCenterPoint = function() { return this.animatedCenterPoint; }
	/**
	 * Set the read-only object with x and y properties of where the view is during animation
	 * @param {Object} value New value to set.
	 * @alias Titanium_UI_ScrollableView.setAnimatedCenterPoint
	 */
	this.setAnimatedCenterPoint = function(value) { this.animatedCenterPoint = value; }
	/**
	 * the background color of the view
	 * @alias Titanium_UI_ScrollableView.backgroundColor
	 * @property {String}
	 */
	this.backgroundColor = ''
	/**
	 * Get the the background color of the view
	 * @alias Titanium_UI_ScrollableView.getBackgroundColor
	 * @return {String}
	 */
	this.getBackgroundColor = function() { return this.backgroundColor; }
	/**
	 * Set the the background color of the view
	 * @param {String} value New value to set.
	 * @alias Titanium_UI_ScrollableView.setBackgroundColor
	 */
	this.setBackgroundColor = function(value) { this.backgroundColor = value; }
	/**
	 * the disabled background color of the view. (Android)
	 * @alias Titanium_UI_ScrollableView.backgroundDisabledColor
	 * @property {String}
	 */
	this.backgroundDisabledColor = ''
	/**
	 * Get the the disabled background color of the view. (Android)
	 * @alias Titanium_UI_ScrollableView.getBackgroundDisabledColor
	 * @return {String}
	 */
	this.getBackgroundDisabledColor = function() { return this.backgroundDisabledColor; }
	/**
	 * Set the the disabled background color of the view. (Android)
	 * @param {String} value New value to set.
	 * @alias Titanium_UI_ScrollableView.setBackgroundDisabledColor
	 */
	this.setBackgroundDisabledColor = function(value) { this.backgroundDisabledColor = value; }
	/**
	 * the disabled background image url of the view. (Android)
	 * @alias Titanium_UI_ScrollableView.backgroundDisabledImage
	 * @property {String}
	 */
	this.backgroundDisabledImage = ''
	/**
	 * Get the the disabled background image url of the view. (Android)
	 * @alias Titanium_UI_ScrollableView.getBackgroundDisabledImage
	 * @return {String}
	 */
	this.getBackgroundDisabledImage = function() { return this.backgroundDisabledImage; }
	/**
	 * Set the the disabled background image url of the view. (Android)
	 * @param {String} value New value to set.
	 * @alias Titanium_UI_ScrollableView.setBackgroundDisabledImage
	 */
	this.setBackgroundDisabledImage = function(value) { this.backgroundDisabledImage = value; }
	/**
	 * the focused background color of the view. focusable must be true for normal views. (Android)
	 * @alias Titanium_UI_ScrollableView.backgroundFocusedColor
	 * @property {String}
	 */
	this.backgroundFocusedColor = ''
	/**
	 * Get the the focused background color of the view. focusable must be true for normal views. (Android)
	 * @alias Titanium_UI_ScrollableView.getBackgroundFocusedColor
	 * @return {String}
	 */
	this.getBackgroundFocusedColor = function() { return this.backgroundFocusedColor; }
	/**
	 * Set the the focused background color of the view. focusable must be true for normal views. (Android)
	 * @param {String} value New value to set.
	 * @alias Titanium_UI_ScrollableView.setBackgroundFocusedColor
	 */
	this.setBackgroundFocusedColor = function(value) { this.backgroundFocusedColor = value; }
	/**
	 * the focused background image url of the view. focusable must be true for normal views. (Android)
	 * @alias Titanium_UI_ScrollableView.backgroundFocusedImage
	 * @property {String}
	 */
	this.backgroundFocusedImage = ''
	/**
	 * Get the the focused background image url of the view. focusable must be true for normal views. (Android)
	 * @alias Titanium_UI_ScrollableView.getBackgroundFocusedImage
	 * @return {String}
	 */
	this.getBackgroundFocusedImage = function() { return this.backgroundFocusedImage; }
	/**
	 * Set the the focused background image url of the view. focusable must be true for normal views. (Android)
	 * @param {String} value New value to set.
	 * @alias Titanium_UI_ScrollableView.setBackgroundFocusedImage
	 */
	this.setBackgroundFocusedImage = function(value) { this.backgroundFocusedImage = value; }
	/**
	 * a background gradient for the view with the properties: type,startPoint,endPoint,startRadius,endRadius,backfillStart,backfillEnd,colors.
	 * @alias Titanium_UI_ScrollableView.backgroundGradient
	 * @property {Object}
	 */
	this.backgroundGradient = {}
	/**
	 * Get the a background gradient for the view with the properties: type,startPoint,endPoint,startRadius,endRadius,backfillStart,backfillEnd,colors.
	 * @alias Titanium_UI_ScrollableView.getBackgroundGradient
	 * @return {Object}
	 */
	this.getBackgroundGradient = function() { return this.backgroundGradient; }
	/**
	 * Set the a background gradient for the view with the properties: type,startPoint,endPoint,startRadius,endRadius,backfillStart,backfillEnd,colors.
	 * @param {Object} value New value to set.
	 * @alias Titanium_UI_ScrollableView.setBackgroundGradient
	 */
	this.setBackgroundGradient = function(value) { this.backgroundGradient = value; }
	/**
	 * the background image url of the view
	 * @alias Titanium_UI_ScrollableView.backgroundImage
	 * @property {String}
	 */
	this.backgroundImage = ''
	/**
	 * Get the the background image url of the view
	 * @alias Titanium_UI_ScrollableView.getBackgroundImage
	 * @return {String}
	 */
	this.getBackgroundImage = function() { return this.backgroundImage; }
	/**
	 * Set the the background image url of the view
	 * @param {String} value New value to set.
	 * @alias Titanium_UI_ScrollableView.setBackgroundImage
	 */
	this.setBackgroundImage = function(value) { this.backgroundImage = value; }
	/**
	 * End caps specify the portion of an image that should not be resized when an image is stretched. This technique is used to implement buttons and other resizable image-based interface elements. When a button with end caps is resized, the resizing occurs only in the middle of the button, in the region between the end caps. The end caps themselves keep their original size and appearance. This property specifies the size of the left end cap. The middle (stretchable) portion is assumed to be 1 pixel wide. The right end cap is therefore computed by adding the size of the left end cap and the middle portion together and then subtracting that value from the width of the image
	 * @alias Titanium_UI_ScrollableView.backgroundLeftCap
	 * @property {Float}
	 */
	this.backgroundLeftCap = 0.0
	/**
	 * Get the End caps specify the portion of an image that should not be resized when an image is stretched. This technique is used to implement buttons and other resizable image-based interface elements. When a button with end caps is resized, the resizing occurs only in the middle of the button, in the region between the end caps. The end caps themselves keep their original size and appearance. This property specifies the size of the left end cap. The middle (stretchable) portion is assumed to be 1 pixel wide. The right end cap is therefore computed by adding the size of the left end cap and the middle portion together and then subtracting that value from the width of the image
	 * @alias Titanium_UI_ScrollableView.getBackgroundLeftCap
	 * @return {Float}
	 */
	this.getBackgroundLeftCap = function() { return this.backgroundLeftCap; }
	/**
	 * Set the End caps specify the portion of an image that should not be resized when an image is stretched. This technique is used to implement buttons and other resizable image-based interface elements. When a button with end caps is resized, the resizing occurs only in the middle of the button, in the region between the end caps. The end caps themselves keep their original size and appearance. This property specifies the size of the left end cap. The middle (stretchable) portion is assumed to be 1 pixel wide. The right end cap is therefore computed by adding the size of the left end cap and the middle portion together and then subtracting that value from the width of the image
	 * @param {Float} value New value to set.
	 * @alias Titanium_UI_ScrollableView.setBackgroundLeftCap
	 */
	this.setBackgroundLeftCap = function(value) { this.backgroundLeftCap = value; }
	/**
	 * the selected background color of the view. focusable must be true for normal views. (Android)
	 * @alias Titanium_UI_ScrollableView.backgroundSelectedColor
	 * @property {String}
	 */
	this.backgroundSelectedColor = ''
	/**
	 * Get the the selected background color of the view. focusable must be true for normal views. (Android)
	 * @alias Titanium_UI_ScrollableView.getBackgroundSelectedColor
	 * @return {String}
	 */
	this.getBackgroundSelectedColor = function() { return this.backgroundSelectedColor; }
	/**
	 * Set the the selected background color of the view. focusable must be true for normal views. (Android)
	 * @param {String} value New value to set.
	 * @alias Titanium_UI_ScrollableView.setBackgroundSelectedColor
	 */
	this.setBackgroundSelectedColor = function(value) { this.backgroundSelectedColor = value; }
	/**
	 * the selected background image url of the view. focusable must be true for normal views. (Android)
	 * @alias Titanium_UI_ScrollableView.backgroundSelectedImage
	 * @property {String}
	 */
	this.backgroundSelectedImage = ''
	/**
	 * Get the the selected background image url of the view. focusable must be true for normal views. (Android)
	 * @alias Titanium_UI_ScrollableView.getBackgroundSelectedImage
	 * @return {String}
	 */
	this.getBackgroundSelectedImage = function() { return this.backgroundSelectedImage; }
	/**
	 * Set the the selected background image url of the view. focusable must be true for normal views. (Android)
	 * @param {String} value New value to set.
	 * @alias Titanium_UI_ScrollableView.setBackgroundSelectedImage
	 */
	this.setBackgroundSelectedImage = function(value) { this.backgroundSelectedImage = value; }
	/**
	 * End caps specify the portion of an image that should not be resized when an image is stretched. This technique is used to implement buttons and other resizable image-based interface elements. When a button with end caps is resized, the resizing occurs only in the middle of the button, in the region between the end caps. The end caps themselves keep their original size and appearance. This property specifies the size of the top end cap. The middle (stretchable) portion is assumed to be 1 pixel wide. The bottom end cap is therefore computed by adding the size of the top end cap and the middle portion together and then subtracting that value from the height of the image
	 * @alias Titanium_UI_ScrollableView.backgroundTopCap
	 * @property {Float}
	 */
	this.backgroundTopCap = 0.0
	/**
	 * Get the End caps specify the portion of an image that should not be resized when an image is stretched. This technique is used to implement buttons and other resizable image-based interface elements. When a button with end caps is resized, the resizing occurs only in the middle of the button, in the region between the end caps. The end caps themselves keep their original size and appearance. This property specifies the size of the top end cap. The middle (stretchable) portion is assumed to be 1 pixel wide. The bottom end cap is therefore computed by adding the size of the top end cap and the middle portion together and then subtracting that value from the height of the image
	 * @alias Titanium_UI_ScrollableView.getBackgroundTopCap
	 * @return {Float}
	 */
	this.getBackgroundTopCap = function() { return this.backgroundTopCap; }
	/**
	 * Set the End caps specify the portion of an image that should not be resized when an image is stretched. This technique is used to implement buttons and other resizable image-based interface elements. When a button with end caps is resized, the resizing occurs only in the middle of the button, in the region between the end caps. The end caps themselves keep their original size and appearance. This property specifies the size of the top end cap. The middle (stretchable) portion is assumed to be 1 pixel wide. The bottom end cap is therefore computed by adding the size of the top end cap and the middle portion together and then subtracting that value from the height of the image
	 * @param {Float} value New value to set.
	 * @alias Titanium_UI_ScrollableView.setBackgroundTopCap
	 */
	this.setBackgroundTopCap = function(value) { this.backgroundTopCap = value; }
	/**
	 * the border color of the view
	 * @alias Titanium_UI_ScrollableView.borderColor
	 * @property {String}
	 */
	this.borderColor = ''
	/**
	 * Get the the border color of the view
	 * @alias Titanium_UI_ScrollableView.getBorderColor
	 * @return {String}
	 */
	this.getBorderColor = function() { return this.borderColor; }
	/**
	 * Set the the border color of the view
	 * @param {String} value New value to set.
	 * @alias Titanium_UI_ScrollableView.setBorderColor
	 */
	this.setBorderColor = function(value) { this.borderColor = value; }
	/**
	 * the border radius of the view
	 * @alias Titanium_UI_ScrollableView.borderRadius
	 * @property {Float}
	 */
	this.borderRadius = 0.0
	/**
	 * Get the the border radius of the view
	 * @alias Titanium_UI_ScrollableView.getBorderRadius
	 * @return {Float}
	 */
	this.getBorderRadius = function() { return this.borderRadius; }
	/**
	 * Set the the border radius of the view
	 * @param {Float} value New value to set.
	 * @alias Titanium_UI_ScrollableView.setBorderRadius
	 */
	this.setBorderRadius = function(value) { this.borderRadius = value; }
	/**
	 * the border width of the view
	 * @alias Titanium_UI_ScrollableView.borderWidth
	 * @property {Float}
	 */
	this.borderWidth = 0.0
	/**
	 * Get the the border width of the view
	 * @alias Titanium_UI_ScrollableView.getBorderWidth
	 * @return {Float}
	 */
	this.getBorderWidth = function() { return this.borderWidth; }
	/**
	 * Set the the border width of the view
	 * @param {Float} value New value to set.
	 * @alias Titanium_UI_ScrollableView.setBorderWidth
	 */
	this.setBorderWidth = function(value) { this.borderWidth = value; }
	/**
	 * property for the view bottom position. This position is relative to the view's parent. Can be either a float value or a dimension string ie 'auto' (default), '50%' (iPhone only).
	 * @alias Titanium_UI_ScrollableView.bottom
	 * @property {Float,String}
	 */
	this.bottom = 0.0
	/**
	 * Get the property for the view bottom position. This position is relative to the view's parent. Can be either a float value or a dimension string ie 'auto' (default), '50%' (iPhone only).
	 * @alias Titanium_UI_ScrollableView.getBottom
	 * @return {Float,String}
	 */
	this.getBottom = function() { return this.bottom; }
	/**
	 * Set the property for the view bottom position. This position is relative to the view's parent. Can be either a float value or a dimension string ie 'auto' (default), '50%' (iPhone only).
	 * @param {Float,String} value New value to set.
	 * @alias Titanium_UI_ScrollableView.setBottom
	 */
	this.setBottom = function(value) { this.bottom = value; }
	/**
	 * a dictionary with properties x and y to indicate the center of the views position relative to the parent view
	 * @alias Titanium_UI_ScrollableView.center
	 * @property {Object}
	 */
	this.center = {}
	/**
	 * Get the a dictionary with properties x and y to indicate the center of the views position relative to the parent view
	 * @alias Titanium_UI_ScrollableView.getCenter
	 * @return {Object}
	 */
	this.getCenter = function() { return this.center; }
	/**
	 * Set the a dictionary with properties x and y to indicate the center of the views position relative to the parent view
	 * @param {Object} value New value to set.
	 * @alias Titanium_UI_ScrollableView.setCenter
	 */
	this.setCenter = function(value) { this.center = value; }
	/**
	 * the current page visible in the view
	 * @alias Titanium_UI_ScrollableView.currentPage
	 * @property {Integer}
	 */
	this.currentPage = 0
	/**
	 * Get the the current page visible in the view
	 * @alias Titanium_UI_ScrollableView.getCurrentPage
	 * @return {Integer}
	 */
	this.getCurrentPage = function() { return this.currentPage; }
	/**
	 * Set the the current page visible in the view
	 * @param {Integer} value New value to set.
	 * @alias Titanium_UI_ScrollableView.setCurrentPage
	 */
	this.setCurrentPage = function(value) { this.currentPage = value; }
	/**
	 * Set true if you want a view to be focusable when navigating with the trackball or D-Pad. Default: false. (Android Only)
	 * @alias Titanium_UI_ScrollableView.focusable
	 * @property {Boolean}
	 */
	this.focusable = false
	/**
	 * Get the Set true if you want a view to be focusable when navigating with the trackball or D-Pad. Default: false. (Android Only)
	 * @alias Titanium_UI_ScrollableView.getFocusable
	 * @return {Boolean}
	 */
	this.getFocusable = function() { return this.focusable; }
	/**
	 * Set the Set true if you want a view to be focusable when navigating with the trackball or D-Pad. Default: false. (Android Only)
	 * @param {Boolean} value New value to set.
	 * @alias Titanium_UI_ScrollableView.setFocusable
	 */
	this.setFocusable = function(value) { this.focusable = value; }
	/**
	 * the font family
	 * @alias Titanium_UI_ScrollableView.font-family
	 * @property {String}
	 */
	this.font-family = ''
	/**
	 * Get the the font family
	 * @alias Titanium_UI_ScrollableView.getFont-family
	 * @return {String}
	 */
	this.getFont-family = function() { return this.font-family; }
	/**
	 * Set the the font family
	 * @param {String} value New value to set.
	 * @alias Titanium_UI_ScrollableView.setFont-family
	 */
	this.setFont-family = function(value) { this.font-family = value; }
	/**
	 * the font size
	 * @alias Titanium_UI_ScrollableView.font-size
	 * @property {String}
	 */
	this.font-size = ''
	/**
	 * Get the the font size
	 * @alias Titanium_UI_ScrollableView.getFont-size
	 * @return {String}
	 */
	this.getFont-size = function() { return this.font-size; }
	/**
	 * Set the the font size
	 * @param {String} value New value to set.
	 * @alias Titanium_UI_ScrollableView.setFont-size
	 */
	this.setFont-size = function(value) { this.font-size = value; }
	/**
	 * the font style, either normal or italics
	 * @alias Titanium_UI_ScrollableView.font-style
	 * @property {String}
	 */
	this.font-style = ''
	/**
	 * Get the the font style, either normal or italics
	 * @alias Titanium_UI_ScrollableView.getFont-style
	 * @return {String}
	 */
	this.getFont-style = function() { return this.font-style; }
	/**
	 * Set the the font style, either normal or italics
	 * @param {String} value New value to set.
	 * @alias Titanium_UI_ScrollableView.setFont-style
	 */
	this.setFont-style = function(value) { this.font-style = value; }
	/**
	 * the font weight, either normal or bold
	 * @alias Titanium_UI_ScrollableView.font-weight
	 * @property {String}
	 */
	this.font-weight = ''
	/**
	 * Get the the font weight, either normal or bold
	 * @alias Titanium_UI_ScrollableView.getFont-weight
	 * @return {String}
	 */
	this.getFont-weight = function() { return this.font-weight; }
	/**
	 * Set the the font weight, either normal or bold
	 * @param {String} value New value to set.
	 * @alias Titanium_UI_ScrollableView.setFont-weight
	 */
	this.setFont-weight = function(value) { this.font-weight = value; }
	/**
	 * property for the view height. Can be either a float value or a dimension string ie 'auto' (default), '50%' (iPhone only).
	 * @alias Titanium_UI_ScrollableView.height
	 * @property {Float,String}
	 */
	this.height = 0.0
	/**
	 * Get the property for the view height. Can be either a float value or a dimension string ie 'auto' (default), '50%' (iPhone only).
	 * @alias Titanium_UI_ScrollableView.getHeight
	 * @return {Float,String}
	 */
	this.getHeight = function() { return this.height; }
	/**
	 * Set the property for the view height. Can be either a float value or a dimension string ie 'auto' (default), '50%' (iPhone only).
	 * @param {Float,String} value New value to set.
	 * @alias Titanium_UI_ScrollableView.setHeight
	 */
	this.setHeight = function(value) { this.height = value; }
	/**
	 * property for the view left position. This position is relative to the view's parent. Can be either a float value or a dimension string ie 'auto' (default), '50%' (iPhone only).
	 * @alias Titanium_UI_ScrollableView.left
	 * @property {Float,String}
	 */
	this.left = 0.0
	/**
	 * Get the property for the view left position. This position is relative to the view's parent. Can be either a float value or a dimension string ie 'auto' (default), '50%' (iPhone only).
	 * @alias Titanium_UI_ScrollableView.getLeft
	 * @return {Float,String}
	 */
	this.getLeft = function() { return this.left; }
	/**
	 * Set the property for the view left position. This position is relative to the view's parent. Can be either a float value or a dimension string ie 'auto' (default), '50%' (iPhone only).
	 * @param {Float,String} value New value to set.
	 * @alias Titanium_UI_ScrollableView.setLeft
	 */
	this.setLeft = function(value) { this.left = value; }
	/**
	 * the maximum zoom scale for the view
	 * @alias Titanium_UI_ScrollableView.maxZoomScale
	 * @property {Float}
	 */
	this.maxZoomScale = 0.0
	/**
	 * Get the the maximum zoom scale for the view
	 * @alias Titanium_UI_ScrollableView.getMaxZoomScale
	 * @return {Float}
	 */
	this.getMaxZoomScale = function() { return this.maxZoomScale; }
	/**
	 * Set the the maximum zoom scale for the view
	 * @param {Float} value New value to set.
	 * @alias Titanium_UI_ScrollableView.setMaxZoomScale
	 */
	this.setMaxZoomScale = function(value) { this.maxZoomScale = value; }
	/**
	 * the minimum zoom scale for the view
	 * @alias Titanium_UI_ScrollableView.minZoomScale
	 * @property {Float}
	 */
	this.minZoomScale = 0.0
	/**
	 * Get the the minimum zoom scale for the view
	 * @alias Titanium_UI_ScrollableView.getMinZoomScale
	 * @return {Float}
	 */
	this.getMinZoomScale = function() { return this.minZoomScale; }
	/**
	 * Set the the minimum zoom scale for the view
	 * @param {Float} value New value to set.
	 * @alias Titanium_UI_ScrollableView.setMinZoomScale
	 */
	this.setMinZoomScale = function(value) { this.minZoomScale = value; }
	/**
	 * the opacity from 0.0-1.0
	 * @alias Titanium_UI_ScrollableView.opacity
	 * @property {Float}
	 */
	this.opacity = 0.0
	/**
	 * Get the the opacity from 0.0-1.0
	 * @alias Titanium_UI_ScrollableView.getOpacity
	 * @return {Float}
	 */
	this.getOpacity = function() { return this.opacity; }
	/**
	 * Set the the opacity from 0.0-1.0
	 * @param {Float} value New value to set.
	 * @alias Titanium_UI_ScrollableView.setOpacity
	 */
	this.setOpacity = function(value) { this.opacity = value; }
	/**
	 * the color of the paging control. defaults to black.
	 * @alias Titanium_UI_ScrollableView.pagingControlColor
	 * @property {String}
	 */
	this.pagingControlColor = ''
	/**
	 * Get the the color of the paging control. defaults to black.
	 * @alias Titanium_UI_ScrollableView.getPagingControlColor
	 * @return {String}
	 */
	this.getPagingControlColor = function() { return this.pagingControlColor; }
	/**
	 * Set the the color of the paging control. defaults to black.
	 * @param {String} value New value to set.
	 * @alias Titanium_UI_ScrollableView.setPagingControlColor
	 */
	this.setPagingControlColor = function(value) { this.pagingControlColor = value; }
	/**
	 * the height in pixels of the paging control, if visible. defaults to 20
	 * @alias Titanium_UI_ScrollableView.pagingControlHeight
	 * @property {Float}
	 */
	this.pagingControlHeight = 0.0
	/**
	 * Get the the height in pixels of the paging control, if visible. defaults to 20
	 * @alias Titanium_UI_ScrollableView.getPagingControlHeight
	 * @return {Float}
	 */
	this.getPagingControlHeight = function() { return this.pagingControlHeight; }
	/**
	 * Set the the height in pixels of the paging control, if visible. defaults to 20
	 * @param {Float} value New value to set.
	 * @alias Titanium_UI_ScrollableView.setPagingControlHeight
	 */
	this.setPagingControlHeight = function(value) { this.pagingControlHeight = value; }
	/**
	 * property for the view right position. This position is relative to the view's parent. Can be either a float value or a dimension string ie 'auto' (default), '50%' (iPhone only).
	 * @alias Titanium_UI_ScrollableView.right
	 * @property {Float,String}
	 */
	this.right = 0.0
	/**
	 * Get the property for the view right position. This position is relative to the view's parent. Can be either a float value or a dimension string ie 'auto' (default), '50%' (iPhone only).
	 * @alias Titanium_UI_ScrollableView.getRight
	 * @return {Float,String}
	 */
	this.getRight = function() { return this.right; }
	/**
	 * Set the property for the view right position. This position is relative to the view's parent. Can be either a float value or a dimension string ie 'auto' (default), '50%' (iPhone only).
	 * @param {Float,String} value New value to set.
	 * @alias Titanium_UI_ScrollableView.setRight
	 */
	this.setRight = function(value) { this.right = value; }
	/**
	 * boolean to indicate whether the paging control UI is visible
	 * @alias Titanium_UI_ScrollableView.showPagingControl
	 * @property {Boolean}
	 */
	this.showPagingControl = false
	/**
	 * Get the boolean to indicate whether the paging control UI is visible
	 * @alias Titanium_UI_ScrollableView.getShowPagingControl
	 * @return {Boolean}
	 */
	this.getShowPagingControl = function() { return this.showPagingControl; }
	/**
	 * Set the boolean to indicate whether the paging control UI is visible
	 * @param {Boolean} value New value to set.
	 * @alias Titanium_UI_ScrollableView.setShowPagingControl
	 */
	this.setShowPagingControl = function(value) { this.showPagingControl = value; }
	/**
	 * the size of the view as a dictionary of width and height properties
	 * @alias Titanium_UI_ScrollableView.size
	 * @property {Object}
	 */
	this.size = {}
	/**
	 * Get the the size of the view as a dictionary of width and height properties
	 * @alias Titanium_UI_ScrollableView.getSize
	 * @return {Object}
	 */
	this.getSize = function() { return this.size; }
	/**
	 * Set the the size of the view as a dictionary of width and height properties
	 * @param {Object} value New value to set.
	 * @alias Titanium_UI_ScrollableView.setSize
	 */
	this.setSize = function(value) { this.size = value; }
	/**
	 * One of Titanium.UI.Android.SOFT_KEYBOARD_DEFAULT_ON_FOCUS, Titanium.UI.Android.SOFT_KEYBOARD_HIDE_ON_FOCUS, or Titanium.UI.Android.SOFT_KEYBOARD_SHOW_ON_FOCUS. (Android only)
	 * @alias Titanium_UI_ScrollableView.softKeyboardOnFocus
	 * @property {Integer}
	 */
	this.softKeyboardOnFocus = 0
	/**
	 * Get the One of Titanium.UI.Android.SOFT_KEYBOARD_DEFAULT_ON_FOCUS, Titanium.UI.Android.SOFT_KEYBOARD_HIDE_ON_FOCUS, or Titanium.UI.Android.SOFT_KEYBOARD_SHOW_ON_FOCUS. (Android only)
	 * @alias Titanium_UI_ScrollableView.getSoftKeyboardOnFocus
	 * @return {Integer}
	 */
	this.getSoftKeyboardOnFocus = function() { return this.softKeyboardOnFocus; }
	/**
	 * Set the One of Titanium.UI.Android.SOFT_KEYBOARD_DEFAULT_ON_FOCUS, Titanium.UI.Android.SOFT_KEYBOARD_HIDE_ON_FOCUS, or Titanium.UI.Android.SOFT_KEYBOARD_SHOW_ON_FOCUS. (Android only)
	 * @param {Integer} value New value to set.
	 * @alias Titanium_UI_ScrollableView.setSoftKeyboardOnFocus
	 */
	this.setSoftKeyboardOnFocus = function(value) { this.softKeyboardOnFocus = value; }
	/**
	 * property for the view top position. This position is relative to the view's parent. Can be either a float value or a dimension string ie 'auto' (default), '50%' (iPhone only).
	 * @alias Titanium_UI_ScrollableView.top
	 * @property {Float,String}
	 */
	this.top = 0.0
	/**
	 * Get the property for the view top position. This position is relative to the view's parent. Can be either a float value or a dimension string ie 'auto' (default), '50%' (iPhone only).
	 * @alias Titanium_UI_ScrollableView.getTop
	 * @return {Float,String}
	 */
	this.getTop = function() { return this.top; }
	/**
	 * Set the property for the view top position. This position is relative to the view's parent. Can be either a float value or a dimension string ie 'auto' (default), '50%' (iPhone only).
	 * @param {Float,String} value New value to set.
	 * @alias Titanium_UI_ScrollableView.setTop
	 */
	this.setTop = function(value) { this.top = value; }
	/**
	 * a boolean indicating if the view should receive touch events (true, default) or forward them to peers (false)
	 * @alias Titanium_UI_ScrollableView.touchEnabled
	 * @property {Boolean}
	 */
	this.touchEnabled = false
	/**
	 * Get the a boolean indicating if the view should receive touch events (true, default) or forward them to peers (false)
	 * @alias Titanium_UI_ScrollableView.getTouchEnabled
	 * @return {Boolean}
	 */
	this.getTouchEnabled = function() { return this.touchEnabled; }
	/**
	 * Set the a boolean indicating if the view should receive touch events (true, default) or forward them to peers (false)
	 * @param {Boolean} value New value to set.
	 * @alias Titanium_UI_ScrollableView.setTouchEnabled
	 */
	this.setTouchEnabled = function(value) { this.touchEnabled = value; }
	/**
	 * the transformation matrix to apply to the view
	 * @alias Titanium_UI_ScrollableView.transform
	 * @property {Object}
	 */
	this.transform = {}
	/**
	 * Get the the transformation matrix to apply to the view
	 * @alias Titanium_UI_ScrollableView.getTransform
	 * @return {Object}
	 */
	this.getTransform = function() { return this.transform; }
	/**
	 * Set the the transformation matrix to apply to the view
	 * @param {Object} value New value to set.
	 * @alias Titanium_UI_ScrollableView.setTransform
	 */
	this.setTransform = function(value) { this.transform = value; }
	/**
	 * array of view objects to place in the view
	 * @alias Titanium_UI_ScrollableView.views
	 * @property {Array}
	 */
	this.views = []
	/**
	 * Get the array of view objects to place in the view
	 * @alias Titanium_UI_ScrollableView.getViews
	 * @return {Array}
	 */
	this.getViews = function() { return this.views; }
	/**
	 * Set the array of view objects to place in the view
	 * @param {Array} value New value to set.
	 * @alias Titanium_UI_ScrollableView.setViews
	 */
	this.setViews = function(value) { this.views = value; }
	/**
	 * a boolean of the visibility of the view
	 * @alias Titanium_UI_ScrollableView.visible
	 * @property {Boolean}
	 */
	this.visible = false
	/**
	 * Get the a boolean of the visibility of the view
	 * @alias Titanium_UI_ScrollableView.getVisible
	 * @return {Boolean}
	 */
	this.getVisible = function() { return this.visible; }
	/**
	 * Set the a boolean of the visibility of the view
	 * @param {Boolean} value New value to set.
	 * @alias Titanium_UI_ScrollableView.setVisible
	 */
	this.setVisible = function(value) { this.visible = value; }
	/**
	 * property for the view width. Can be either a float value or a dimension string ie 'auto' (default), '50%' (iPhone only).
	 * @alias Titanium_UI_ScrollableView.width
	 * @property {Float,String}
	 */
	this.width = 0.0
	/**
	 * Get the property for the view width. Can be either a float value or a dimension string ie 'auto' (default), '50%' (iPhone only).
	 * @alias Titanium_UI_ScrollableView.getWidth
	 * @return {Float,String}
	 */
	this.getWidth = function() { return this.width; }
	/**
	 * Set the property for the view width. Can be either a float value or a dimension string ie 'auto' (default), '50%' (iPhone only).
	 * @param {Float,String} value New value to set.
	 * @alias Titanium_UI_ScrollableView.setWidth
	 */
	this.setWidth = function(value) { this.width = value; }
	/**
	 * the z index position relative to other sibling views
	 * @alias Titanium_UI_ScrollableView.zIndex
	 * @property {Integer}
	 */
	this.zIndex = 0
	/**
	 * Get the the z index position relative to other sibling views
	 * @alias Titanium_UI_ScrollableView.getZIndex
	 * @return {Integer}
	 */
	this.getZIndex = function() { return this.zIndex; }
	/**
	 * Set the the z index position relative to other sibling views
	 * @param {Integer} value New value to set.
	 * @alias Titanium_UI_ScrollableView.setZIndex
	 */
	this.setZIndex = function(value) { this.zIndex = value; }
	/**
	 * add a child to the view hierarchy
	 * @param {Object} view the view to add to this views hiearchy
	 * @alias Titanium_UI_ScrollableView.add
	 */
	this.add = function add(view) { }
	/**
	 * add an event listener for the instance to receive view triggered events
	 * @param {String} name name of the event
	 * @param {Function} callback callback function to invoke when the event is fired
	 * @alias Titanium_UI_ScrollableView.addEventListener
	 */
	this.addEventListener = function addEventListener(name,callback) { }
	/**
	 * add a new view to the Scrollable View
	 * @param {Object} view the view to add
	 * @alias Titanium_UI_ScrollableView.addView
	 */
	this.addView = function addView(view) { }
	/**
	 * animate the view
	 * @param {Object} obj either a dictionary of animation properties or an Animation object
	 * @param {Function} callback function to be invoked upon completion of the animation
	 * @alias Titanium_UI_ScrollableView.animate
	 */
	this.animate = function animate(obj,callback) { }
	/**
	 * fire a synthesized event to the views listener
	 * @param {String} name name of the event
	 * @param {Object} event event object
	 * @alias Titanium_UI_ScrollableView.fireEvent
	 */
	this.fireEvent = function fireEvent(name,event) { }
	/**
	 * hide the view
	 * @alias Titanium_UI_ScrollableView.hide
	 */
	this.hide = function hide() { }
	/**
	 * remove a previously add view from the view hiearchy
	 * @param {Object} view the view to remove from this views hiearchy
	 * @alias Titanium_UI_ScrollableView.remove
	 */
	this.remove = function remove(view) { }
	/**
	 * remove a previously added event listener
	 * @param {String} name name of the event
	 * @param {Function} callback callback function passed in addEventListener
	 * @alias Titanium_UI_ScrollableView.removeEventListener
	 */
	this.removeEventListener = function removeEventListener(name,callback) { }
	/**
	 * remove an existing view from the Scrollable View
	 * @param {Object} view the view to remove
	 * @alias Titanium_UI_ScrollableView.removeView
	 */
	this.removeView = function removeView(view) { }
	/**
	 * scroll to a specific view
	 * @param {Integer,Object} view either an integer index or the view object to bring into view as the currentPage
	 * @alias Titanium_UI_ScrollableView.scrollToView
	 */
	this.scrollToView = function scrollToView(view) { }
	/**
	 * make the view visible
	 * @alias Titanium_UI_ScrollableView.show
	 */
	this.show = function show() { }
	/**
	 * return a Blob image of the rendered view
	 * @param {Function} f function to be invoked upon completion. if non-null, this method will be performed asynchronously. if null, it will be performed immediately
	 * @alias Titanium_UI_ScrollableView.toImage
	 * @return {Object}
	 */
	this.toImage = function toImage(f) { return {}; }
};

/**
 * A Search Bar is created by the method Titanium.UI.createSearchBar.
 * @since 0.8
 */
function Titanium_UI_SearchBar() {
	/**
	 * a dictionary with properties x and y to indicate the anchor point value. anchor specifies the position by which animation should occur. center is 0.5, 0.5
	 * @alias Titanium_UI_SearchBar.anchorPoint
	 * @property {Object}
	 */
	this.anchorPoint = {}
	/**
	 * Get the a dictionary with properties x and y to indicate the anchor point value. anchor specifies the position by which animation should occur. center is 0.5, 0.5
	 * @alias Titanium_UI_SearchBar.getAnchorPoint
	 * @return {Object}
	 */
	this.getAnchorPoint = function() { return this.anchorPoint; }
	/**
	 * Set the a dictionary with properties x and y to indicate the anchor point value. anchor specifies the position by which animation should occur. center is 0.5, 0.5
	 * @param {Object} value New value to set.
	 * @alias Titanium_UI_SearchBar.setAnchorPoint
	 */
	this.setAnchorPoint = function(value) { this.anchorPoint = value; }
	/**
	 * read-only object with x and y properties of where the view is during animation
	 * @alias Titanium_UI_SearchBar.animatedCenterPoint
	 * @property {Object}
	 */
	this.animatedCenterPoint = {}
	/**
	 * Get the read-only object with x and y properties of where the view is during animation
	 * @alias Titanium_UI_SearchBar.getAnimatedCenterPoint
	 * @return {Object}
	 */
	this.getAnimatedCenterPoint = function() { return this.animatedCenterPoint; }
	/**
	 * Set the read-only object with x and y properties of where the view is during animation
	 * @param {Object} value New value to set.
	 * @alias Titanium_UI_SearchBar.setAnimatedCenterPoint
	 */
	this.setAnimatedCenterPoint = function(value) { this.animatedCenterPoint = value; }
	/**
	 * boolean to indicate if the text in the field should be autocapitalized as typed
	 * @alias Titanium_UI_SearchBar.autocapitalization
	 * @property {Boolean}
	 */
	this.autocapitalization = false
	/**
	 * Get the boolean to indicate if the text in the field should be autocapitalized as typed
	 * @alias Titanium_UI_SearchBar.getAutocapitalization
	 * @return {Boolean}
	 */
	this.getAutocapitalization = function() { return this.autocapitalization; }
	/**
	 * Set the boolean to indicate if the text in the field should be autocapitalized as typed
	 * @param {Boolean} value New value to set.
	 * @alias Titanium_UI_SearchBar.setAutocapitalization
	 */
	this.setAutocapitalization = function(value) { this.autocapitalization = value; }
	/**
	 * boolean to indicate if the text in the field should be autocorrected as typed
	 * @alias Titanium_UI_SearchBar.autocorrect
	 * @property {Boolean}
	 */
	this.autocorrect = false
	/**
	 * Get the boolean to indicate if the text in the field should be autocorrected as typed
	 * @alias Titanium_UI_SearchBar.getAutocorrect
	 * @return {Boolean}
	 */
	this.getAutocorrect = function() { return this.autocorrect; }
	/**
	 * Set the boolean to indicate if the text in the field should be autocorrected as typed
	 * @param {Boolean} value New value to set.
	 * @alias Titanium_UI_SearchBar.setAutocorrect
	 */
	this.setAutocorrect = function(value) { this.autocorrect = value; }
	/**
	 * the background color of the view
	 * @alias Titanium_UI_SearchBar.backgroundColor
	 * @property {String}
	 */
	this.backgroundColor = ''
	/**
	 * Get the the background color of the view
	 * @alias Titanium_UI_SearchBar.getBackgroundColor
	 * @return {String}
	 */
	this.getBackgroundColor = function() { return this.backgroundColor; }
	/**
	 * Set the the background color of the view
	 * @param {String} value New value to set.
	 * @alias Titanium_UI_SearchBar.setBackgroundColor
	 */
	this.setBackgroundColor = function(value) { this.backgroundColor = value; }
	/**
	 * the disabled background color of the view. (Android)
	 * @alias Titanium_UI_SearchBar.backgroundDisabledColor
	 * @property {String}
	 */
	this.backgroundDisabledColor = ''
	/**
	 * Get the the disabled background color of the view. (Android)
	 * @alias Titanium_UI_SearchBar.getBackgroundDisabledColor
	 * @return {String}
	 */
	this.getBackgroundDisabledColor = function() { return this.backgroundDisabledColor; }
	/**
	 * Set the the disabled background color of the view. (Android)
	 * @param {String} value New value to set.
	 * @alias Titanium_UI_SearchBar.setBackgroundDisabledColor
	 */
	this.setBackgroundDisabledColor = function(value) { this.backgroundDisabledColor = value; }
	/**
	 * the disabled background image url of the view. (Android)
	 * @alias Titanium_UI_SearchBar.backgroundDisabledImage
	 * @property {String}
	 */
	this.backgroundDisabledImage = ''
	/**
	 * Get the the disabled background image url of the view. (Android)
	 * @alias Titanium_UI_SearchBar.getBackgroundDisabledImage
	 * @return {String}
	 */
	this.getBackgroundDisabledImage = function() { return this.backgroundDisabledImage; }
	/**
	 * Set the the disabled background image url of the view. (Android)
	 * @param {String} value New value to set.
	 * @alias Titanium_UI_SearchBar.setBackgroundDisabledImage
	 */
	this.setBackgroundDisabledImage = function(value) { this.backgroundDisabledImage = value; }
	/**
	 * the focused background color of the view. focusable must be true for normal views. (Android)
	 * @alias Titanium_UI_SearchBar.backgroundFocusedColor
	 * @property {String}
	 */
	this.backgroundFocusedColor = ''
	/**
	 * Get the the focused background color of the view. focusable must be true for normal views. (Android)
	 * @alias Titanium_UI_SearchBar.getBackgroundFocusedColor
	 * @return {String}
	 */
	this.getBackgroundFocusedColor = function() { return this.backgroundFocusedColor; }
	/**
	 * Set the the focused background color of the view. focusable must be true for normal views. (Android)
	 * @param {String} value New value to set.
	 * @alias Titanium_UI_SearchBar.setBackgroundFocusedColor
	 */
	this.setBackgroundFocusedColor = function(value) { this.backgroundFocusedColor = value; }
	/**
	 * the focused background image url of the view. focusable must be true for normal views. (Android)
	 * @alias Titanium_UI_SearchBar.backgroundFocusedImage
	 * @property {String}
	 */
	this.backgroundFocusedImage = ''
	/**
	 * Get the the focused background image url of the view. focusable must be true for normal views. (Android)
	 * @alias Titanium_UI_SearchBar.getBackgroundFocusedImage
	 * @return {String}
	 */
	this.getBackgroundFocusedImage = function() { return this.backgroundFocusedImage; }
	/**
	 * Set the the focused background image url of the view. focusable must be true for normal views. (Android)
	 * @param {String} value New value to set.
	 * @alias Titanium_UI_SearchBar.setBackgroundFocusedImage
	 */
	this.setBackgroundFocusedImage = function(value) { this.backgroundFocusedImage = value; }
	/**
	 * a background gradient for the view with the properties: type,startPoint,endPoint,startRadius,endRadius,backfillStart,backfillEnd,colors.
	 * @alias Titanium_UI_SearchBar.backgroundGradient
	 * @property {Object}
	 */
	this.backgroundGradient = {}
	/**
	 * Get the a background gradient for the view with the properties: type,startPoint,endPoint,startRadius,endRadius,backfillStart,backfillEnd,colors.
	 * @alias Titanium_UI_SearchBar.getBackgroundGradient
	 * @return {Object}
	 */
	this.getBackgroundGradient = function() { return this.backgroundGradient; }
	/**
	 * Set the a background gradient for the view with the properties: type,startPoint,endPoint,startRadius,endRadius,backfillStart,backfillEnd,colors.
	 * @param {Object} value New value to set.
	 * @alias Titanium_UI_SearchBar.setBackgroundGradient
	 */
	this.setBackgroundGradient = function(value) { this.backgroundGradient = value; }
	/**
	 * the background image url of the view
	 * @alias Titanium_UI_SearchBar.backgroundImage
	 * @property {String}
	 */
	this.backgroundImage = ''
	/**
	 * Get the the background image url of the view
	 * @alias Titanium_UI_SearchBar.getBackgroundImage
	 * @return {String}
	 */
	this.getBackgroundImage = function() { return this.backgroundImage; }
	/**
	 * Set the the background image url of the view
	 * @param {String} value New value to set.
	 * @alias Titanium_UI_SearchBar.setBackgroundImage
	 */
	this.setBackgroundImage = function(value) { this.backgroundImage = value; }
	/**
	 * End caps specify the portion of an image that should not be resized when an image is stretched. This technique is used to implement buttons and other resizable image-based interface elements. When a button with end caps is resized, the resizing occurs only in the middle of the button, in the region between the end caps. The end caps themselves keep their original size and appearance. This property specifies the size of the left end cap. The middle (stretchable) portion is assumed to be 1 pixel wide. The right end cap is therefore computed by adding the size of the left end cap and the middle portion together and then subtracting that value from the width of the image
	 * @alias Titanium_UI_SearchBar.backgroundLeftCap
	 * @property {Float}
	 */
	this.backgroundLeftCap = 0.0
	/**
	 * Get the End caps specify the portion of an image that should not be resized when an image is stretched. This technique is used to implement buttons and other resizable image-based interface elements. When a button with end caps is resized, the resizing occurs only in the middle of the button, in the region between the end caps. The end caps themselves keep their original size and appearance. This property specifies the size of the left end cap. The middle (stretchable) portion is assumed to be 1 pixel wide. The right end cap is therefore computed by adding the size of the left end cap and the middle portion together and then subtracting that value from the width of the image
	 * @alias Titanium_UI_SearchBar.getBackgroundLeftCap
	 * @return {Float}
	 */
	this.getBackgroundLeftCap = function() { return this.backgroundLeftCap; }
	/**
	 * Set the End caps specify the portion of an image that should not be resized when an image is stretched. This technique is used to implement buttons and other resizable image-based interface elements. When a button with end caps is resized, the resizing occurs only in the middle of the button, in the region between the end caps. The end caps themselves keep their original size and appearance. This property specifies the size of the left end cap. The middle (stretchable) portion is assumed to be 1 pixel wide. The right end cap is therefore computed by adding the size of the left end cap and the middle portion together and then subtracting that value from the width of the image
	 * @param {Float} value New value to set.
	 * @alias Titanium_UI_SearchBar.setBackgroundLeftCap
	 */
	this.setBackgroundLeftCap = function(value) { this.backgroundLeftCap = value; }
	/**
	 * the selected background color of the view. focusable must be true for normal views. (Android)
	 * @alias Titanium_UI_SearchBar.backgroundSelectedColor
	 * @property {String}
	 */
	this.backgroundSelectedColor = ''
	/**
	 * Get the the selected background color of the view. focusable must be true for normal views. (Android)
	 * @alias Titanium_UI_SearchBar.getBackgroundSelectedColor
	 * @return {String}
	 */
	this.getBackgroundSelectedColor = function() { return this.backgroundSelectedColor; }
	/**
	 * Set the the selected background color of the view. focusable must be true for normal views. (Android)
	 * @param {String} value New value to set.
	 * @alias Titanium_UI_SearchBar.setBackgroundSelectedColor
	 */
	this.setBackgroundSelectedColor = function(value) { this.backgroundSelectedColor = value; }
	/**
	 * the selected background image url of the view. focusable must be true for normal views. (Android)
	 * @alias Titanium_UI_SearchBar.backgroundSelectedImage
	 * @property {String}
	 */
	this.backgroundSelectedImage = ''
	/**
	 * Get the the selected background image url of the view. focusable must be true for normal views. (Android)
	 * @alias Titanium_UI_SearchBar.getBackgroundSelectedImage
	 * @return {String}
	 */
	this.getBackgroundSelectedImage = function() { return this.backgroundSelectedImage; }
	/**
	 * Set the the selected background image url of the view. focusable must be true for normal views. (Android)
	 * @param {String} value New value to set.
	 * @alias Titanium_UI_SearchBar.setBackgroundSelectedImage
	 */
	this.setBackgroundSelectedImage = function(value) { this.backgroundSelectedImage = value; }
	/**
	 * End caps specify the portion of an image that should not be resized when an image is stretched. This technique is used to implement buttons and other resizable image-based interface elements. When a button with end caps is resized, the resizing occurs only in the middle of the button, in the region between the end caps. The end caps themselves keep their original size and appearance. This property specifies the size of the top end cap. The middle (stretchable) portion is assumed to be 1 pixel wide. The bottom end cap is therefore computed by adding the size of the top end cap and the middle portion together and then subtracting that value from the height of the image
	 * @alias Titanium_UI_SearchBar.backgroundTopCap
	 * @property {Float}
	 */
	this.backgroundTopCap = 0.0
	/**
	 * Get the End caps specify the portion of an image that should not be resized when an image is stretched. This technique is used to implement buttons and other resizable image-based interface elements. When a button with end caps is resized, the resizing occurs only in the middle of the button, in the region between the end caps. The end caps themselves keep their original size and appearance. This property specifies the size of the top end cap. The middle (stretchable) portion is assumed to be 1 pixel wide. The bottom end cap is therefore computed by adding the size of the top end cap and the middle portion together and then subtracting that value from the height of the image
	 * @alias Titanium_UI_SearchBar.getBackgroundTopCap
	 * @return {Float}
	 */
	this.getBackgroundTopCap = function() { return this.backgroundTopCap; }
	/**
	 * Set the End caps specify the portion of an image that should not be resized when an image is stretched. This technique is used to implement buttons and other resizable image-based interface elements. When a button with end caps is resized, the resizing occurs only in the middle of the button, in the region between the end caps. The end caps themselves keep their original size and appearance. This property specifies the size of the top end cap. The middle (stretchable) portion is assumed to be 1 pixel wide. The bottom end cap is therefore computed by adding the size of the top end cap and the middle portion together and then subtracting that value from the height of the image
	 * @param {Float} value New value to set.
	 * @alias Titanium_UI_SearchBar.setBackgroundTopCap
	 */
	this.setBackgroundTopCap = function(value) { this.backgroundTopCap = value; }
	/**
	 * the bar color of the search bar view
	 * @alias Titanium_UI_SearchBar.barColor
	 * @property {String}
	 */
	this.barColor = ''
	/**
	 * Get the the bar color of the search bar view
	 * @alias Titanium_UI_SearchBar.getBarColor
	 * @return {String}
	 */
	this.getBarColor = function() { return this.barColor; }
	/**
	 * Set the the bar color of the search bar view
	 * @param {String} value New value to set.
	 * @alias Titanium_UI_SearchBar.setBarColor
	 */
	this.setBarColor = function(value) { this.barColor = value; }
	/**
	 * the border color of the view
	 * @alias Titanium_UI_SearchBar.borderColor
	 * @property {String}
	 */
	this.borderColor = ''
	/**
	 * Get the the border color of the view
	 * @alias Titanium_UI_SearchBar.getBorderColor
	 * @return {String}
	 */
	this.getBorderColor = function() { return this.borderColor; }
	/**
	 * Set the the border color of the view
	 * @param {String} value New value to set.
	 * @alias Titanium_UI_SearchBar.setBorderColor
	 */
	this.setBorderColor = function(value) { this.borderColor = value; }
	/**
	 * the border radius of the view
	 * @alias Titanium_UI_SearchBar.borderRadius
	 * @property {Float}
	 */
	this.borderRadius = 0.0
	/**
	 * Get the the border radius of the view
	 * @alias Titanium_UI_SearchBar.getBorderRadius
	 * @return {Float}
	 */
	this.getBorderRadius = function() { return this.borderRadius; }
	/**
	 * Set the the border radius of the view
	 * @param {Float} value New value to set.
	 * @alias Titanium_UI_SearchBar.setBorderRadius
	 */
	this.setBorderRadius = function(value) { this.borderRadius = value; }
	/**
	 * the border width of the view
	 * @alias Titanium_UI_SearchBar.borderWidth
	 * @property {Float}
	 */
	this.borderWidth = 0.0
	/**
	 * Get the the border width of the view
	 * @alias Titanium_UI_SearchBar.getBorderWidth
	 * @return {Float}
	 */
	this.getBorderWidth = function() { return this.borderWidth; }
	/**
	 * Set the the border width of the view
	 * @param {Float} value New value to set.
	 * @alias Titanium_UI_SearchBar.setBorderWidth
	 */
	this.setBorderWidth = function(value) { this.borderWidth = value; }
	/**
	 * property for the view bottom position. This position is relative to the view's parent. Can be either a float value or a dimension string ie 'auto' (default), '50%' (iPhone only).
	 * @alias Titanium_UI_SearchBar.bottom
	 * @property {Float,String}
	 */
	this.bottom = 0.0
	/**
	 * Get the property for the view bottom position. This position is relative to the view's parent. Can be either a float value or a dimension string ie 'auto' (default), '50%' (iPhone only).
	 * @alias Titanium_UI_SearchBar.getBottom
	 * @return {Float,String}
	 */
	this.getBottom = function() { return this.bottom; }
	/**
	 * Set the property for the view bottom position. This position is relative to the view's parent. Can be either a float value or a dimension string ie 'auto' (default), '50%' (iPhone only).
	 * @param {Float,String} value New value to set.
	 * @alias Titanium_UI_SearchBar.setBottom
	 */
	this.setBottom = function(value) { this.bottom = value; }
	/**
	 * a dictionary with properties x and y to indicate the center of the views position relative to the parent view
	 * @alias Titanium_UI_SearchBar.center
	 * @property {Object}
	 */
	this.center = {}
	/**
	 * Get the a dictionary with properties x and y to indicate the center of the views position relative to the parent view
	 * @alias Titanium_UI_SearchBar.getCenter
	 * @return {Object}
	 */
	this.getCenter = function() { return this.center; }
	/**
	 * Set the a dictionary with properties x and y to indicate the center of the views position relative to the parent view
	 * @param {Object} value New value to set.
	 * @alias Titanium_UI_SearchBar.setCenter
	 */
	this.setCenter = function(value) { this.center = value; }
	/**
	 * Set true if you want a view to be focusable when navigating with the trackball or D-Pad. Default: false. (Android Only)
	 * @alias Titanium_UI_SearchBar.focusable
	 * @property {Boolean}
	 */
	this.focusable = false
	/**
	 * Get the Set true if you want a view to be focusable when navigating with the trackball or D-Pad. Default: false. (Android Only)
	 * @alias Titanium_UI_SearchBar.getFocusable
	 * @return {Boolean}
	 */
	this.getFocusable = function() { return this.focusable; }
	/**
	 * Set the Set true if you want a view to be focusable when navigating with the trackball or D-Pad. Default: false. (Android Only)
	 * @param {Boolean} value New value to set.
	 * @alias Titanium_UI_SearchBar.setFocusable
	 */
	this.setFocusable = function(value) { this.focusable = value; }
	/**
	 * the font family
	 * @alias Titanium_UI_SearchBar.font-family
	 * @property {String}
	 */
	this.font-family = ''
	/**
	 * Get the the font family
	 * @alias Titanium_UI_SearchBar.getFont-family
	 * @return {String}
	 */
	this.getFont-family = function() { return this.font-family; }
	/**
	 * Set the the font family
	 * @param {String} value New value to set.
	 * @alias Titanium_UI_SearchBar.setFont-family
	 */
	this.setFont-family = function(value) { this.font-family = value; }
	/**
	 * the font size
	 * @alias Titanium_UI_SearchBar.font-size
	 * @property {String}
	 */
	this.font-size = ''
	/**
	 * Get the the font size
	 * @alias Titanium_UI_SearchBar.getFont-size
	 * @return {String}
	 */
	this.getFont-size = function() { return this.font-size; }
	/**
	 * Set the the font size
	 * @param {String} value New value to set.
	 * @alias Titanium_UI_SearchBar.setFont-size
	 */
	this.setFont-size = function(value) { this.font-size = value; }
	/**
	 * the font style, either normal or italics
	 * @alias Titanium_UI_SearchBar.font-style
	 * @property {String}
	 */
	this.font-style = ''
	/**
	 * Get the the font style, either normal or italics
	 * @alias Titanium_UI_SearchBar.getFont-style
	 * @return {String}
	 */
	this.getFont-style = function() { return this.font-style; }
	/**
	 * Set the the font style, either normal or italics
	 * @param {String} value New value to set.
	 * @alias Titanium_UI_SearchBar.setFont-style
	 */
	this.setFont-style = function(value) { this.font-style = value; }
	/**
	 * the font weight, either normal or bold
	 * @alias Titanium_UI_SearchBar.font-weight
	 * @property {String}
	 */
	this.font-weight = ''
	/**
	 * Get the the font weight, either normal or bold
	 * @alias Titanium_UI_SearchBar.getFont-weight
	 * @return {String}
	 */
	this.getFont-weight = function() { return this.font-weight; }
	/**
	 * Set the the font weight, either normal or bold
	 * @param {String} value New value to set.
	 * @alias Titanium_UI_SearchBar.setFont-weight
	 */
	this.setFont-weight = function(value) { this.font-weight = value; }
	/**
	 * property for the view height. Can be either a float value or a dimension string ie 'auto' (default), '50%' (iPhone only).
	 * @alias Titanium_UI_SearchBar.height
	 * @property {Float,String}
	 */
	this.height = 0.0
	/**
	 * Get the property for the view height. Can be either a float value or a dimension string ie 'auto' (default), '50%' (iPhone only).
	 * @alias Titanium_UI_SearchBar.getHeight
	 * @return {Float,String}
	 */
	this.getHeight = function() { return this.height; }
	/**
	 * Set the property for the view height. Can be either a float value or a dimension string ie 'auto' (default), '50%' (iPhone only).
	 * @param {Float,String} value New value to set.
	 * @alias Titanium_UI_SearchBar.setHeight
	 */
	this.setHeight = function(value) { this.height = value; }
	/**
	 * the text to show when the search bar field is not focused
	 * @alias Titanium_UI_SearchBar.hintText
	 * @property {String}
	 */
	this.hintText = ''
	/**
	 * Get the the text to show when the search bar field is not focused
	 * @alias Titanium_UI_SearchBar.getHintText
	 * @return {String}
	 */
	this.getHintText = function() { return this.hintText; }
	/**
	 * Set the the text to show when the search bar field is not focused
	 * @param {String} value New value to set.
	 * @alias Titanium_UI_SearchBar.setHintText
	 */
	this.setHintText = function(value) { this.hintText = value; }
	/**
	 * the key in the locale file to use for the hintText property
	 * @alias Titanium_UI_SearchBar.hinttextid
	 * @property {String}
	 */
	this.hinttextid = ''
	/**
	 * Get the the key in the locale file to use for the hintText property
	 * @alias Titanium_UI_SearchBar.getHinttextid
	 * @return {String}
	 */
	this.getHinttextid = function() { return this.hinttextid; }
	/**
	 * Set the the key in the locale file to use for the hintText property
	 * @param {String} value New value to set.
	 * @alias Titanium_UI_SearchBar.setHinttextid
	 */
	this.setHinttextid = function(value) { this.hinttextid = value; }
	/**
	 * the keyboard type constant to use when the field is focused
	 * @alias Titanium_UI_SearchBar.keyboardType
	 * @property {Integer}
	 */
	this.keyboardType = 0
	/**
	 * Get the the keyboard type constant to use when the field is focused
	 * @alias Titanium_UI_SearchBar.getKeyboardType
	 * @return {Integer}
	 */
	this.getKeyboardType = function() { return this.keyboardType; }
	/**
	 * Set the the keyboard type constant to use when the field is focused
	 * @param {Integer} value New value to set.
	 * @alias Titanium_UI_SearchBar.setKeyboardType
	 */
	this.setKeyboardType = function(value) { this.keyboardType = value; }
	/**
	 * property for the view left position. This position is relative to the view's parent. Can be either a float value or a dimension string ie 'auto' (default), '50%' (iPhone only).
	 * @alias Titanium_UI_SearchBar.left
	 * @property {Float,String}
	 */
	this.left = 0.0
	/**
	 * Get the property for the view left position. This position is relative to the view's parent. Can be either a float value or a dimension string ie 'auto' (default), '50%' (iPhone only).
	 * @alias Titanium_UI_SearchBar.getLeft
	 * @return {Float,String}
	 */
	this.getLeft = function() { return this.left; }
	/**
	 * Set the property for the view left position. This position is relative to the view's parent. Can be either a float value or a dimension string ie 'auto' (default), '50%' (iPhone only).
	 * @param {Float,String} value New value to set.
	 * @alias Titanium_UI_SearchBar.setLeft
	 */
	this.setLeft = function(value) { this.left = value; }
	/**
	 * the opacity from 0.0-1.0
	 * @alias Titanium_UI_SearchBar.opacity
	 * @property {Float}
	 */
	this.opacity = 0.0
	/**
	 * Get the the opacity from 0.0-1.0
	 * @alias Titanium_UI_SearchBar.getOpacity
	 * @return {Float}
	 */
	this.getOpacity = function() { return this.opacity; }
	/**
	 * Set the the opacity from 0.0-1.0
	 * @param {Float} value New value to set.
	 * @alias Titanium_UI_SearchBar.setOpacity
	 */
	this.setOpacity = function(value) { this.opacity = value; }
	/**
	 * a single line of text displayed at the top of the search bar
	 * @alias Titanium_UI_SearchBar.prompt
	 * @property {String}
	 */
	this.prompt = ''
	/**
	 * Get the a single line of text displayed at the top of the search bar
	 * @alias Titanium_UI_SearchBar.getPrompt
	 * @return {String}
	 */
	this.getPrompt = function() { return this.prompt; }
	/**
	 * Set the a single line of text displayed at the top of the search bar
	 * @param {String} value New value to set.
	 * @alias Titanium_UI_SearchBar.setPrompt
	 */
	this.setPrompt = function(value) { this.prompt = value; }
	/**
	 * the key in the locale file to use for the prompt property
	 * @alias Titanium_UI_SearchBar.promptid
	 * @property {String}
	 */
	this.promptid = ''
	/**
	 * Get the the key in the locale file to use for the prompt property
	 * @alias Titanium_UI_SearchBar.getPromptid
	 * @return {String}
	 */
	this.getPromptid = function() { return this.promptid; }
	/**
	 * Set the the key in the locale file to use for the prompt property
	 * @param {String} value New value to set.
	 * @alias Titanium_UI_SearchBar.setPromptid
	 */
	this.setPromptid = function(value) { this.promptid = value; }
	/**
	 * property for the view right position. This position is relative to the view's parent. Can be either a float value or a dimension string ie 'auto' (default), '50%' (iPhone only).
	 * @alias Titanium_UI_SearchBar.right
	 * @property {Float,String}
	 */
	this.right = 0.0
	/**
	 * Get the property for the view right position. This position is relative to the view's parent. Can be either a float value or a dimension string ie 'auto' (default), '50%' (iPhone only).
	 * @alias Titanium_UI_SearchBar.getRight
	 * @return {Float,String}
	 */
	this.getRight = function() { return this.right; }
	/**
	 * Set the property for the view right position. This position is relative to the view's parent. Can be either a float value or a dimension string ie 'auto' (default), '50%' (iPhone only).
	 * @param {Float,String} value New value to set.
	 * @alias Titanium_UI_SearchBar.setRight
	 */
	this.setRight = function(value) { this.right = value; }
	/**
	 * boolean indicates whether the cancel button is displayed
	 * @alias Titanium_UI_SearchBar.showCancel
	 * @property {Boolean}
	 */
	this.showCancel = false
	/**
	 * Get the boolean indicates whether the cancel button is displayed
	 * @alias Titanium_UI_SearchBar.getShowCancel
	 * @return {Boolean}
	 */
	this.getShowCancel = function() { return this.showCancel; }
	/**
	 * Set the boolean indicates whether the cancel button is displayed
	 * @param {Boolean} value New value to set.
	 * @alias Titanium_UI_SearchBar.setShowCancel
	 */
	this.setShowCancel = function(value) { this.showCancel = value; }
	/**
	 * the size of the view as a dictionary of width and height properties
	 * @alias Titanium_UI_SearchBar.size
	 * @property {Object}
	 */
	this.size = {}
	/**
	 * Get the the size of the view as a dictionary of width and height properties
	 * @alias Titanium_UI_SearchBar.getSize
	 * @return {Object}
	 */
	this.getSize = function() { return this.size; }
	/**
	 * Set the the size of the view as a dictionary of width and height properties
	 * @param {Object} value New value to set.
	 * @alias Titanium_UI_SearchBar.setSize
	 */
	this.setSize = function(value) { this.size = value; }
	/**
	 * One of Titanium.UI.Android.SOFT_KEYBOARD_DEFAULT_ON_FOCUS, Titanium.UI.Android.SOFT_KEYBOARD_HIDE_ON_FOCUS, or Titanium.UI.Android.SOFT_KEYBOARD_SHOW_ON_FOCUS. (Android only)
	 * @alias Titanium_UI_SearchBar.softKeyboardOnFocus
	 * @property {Integer}
	 */
	this.softKeyboardOnFocus = 0
	/**
	 * Get the One of Titanium.UI.Android.SOFT_KEYBOARD_DEFAULT_ON_FOCUS, Titanium.UI.Android.SOFT_KEYBOARD_HIDE_ON_FOCUS, or Titanium.UI.Android.SOFT_KEYBOARD_SHOW_ON_FOCUS. (Android only)
	 * @alias Titanium_UI_SearchBar.getSoftKeyboardOnFocus
	 * @return {Integer}
	 */
	this.getSoftKeyboardOnFocus = function() { return this.softKeyboardOnFocus; }
	/**
	 * Set the One of Titanium.UI.Android.SOFT_KEYBOARD_DEFAULT_ON_FOCUS, Titanium.UI.Android.SOFT_KEYBOARD_HIDE_ON_FOCUS, or Titanium.UI.Android.SOFT_KEYBOARD_SHOW_ON_FOCUS. (Android only)
	 * @param {Integer} value New value to set.
	 * @alias Titanium_UI_SearchBar.setSoftKeyboardOnFocus
	 */
	this.setSoftKeyboardOnFocus = function(value) { this.softKeyboardOnFocus = value; }
	/**
	 * property for the view top position. This position is relative to the view's parent. Can be either a float value or a dimension string ie 'auto' (default), '50%' (iPhone only).
	 * @alias Titanium_UI_SearchBar.top
	 * @property {Float,String}
	 */
	this.top = 0.0
	/**
	 * Get the property for the view top position. This position is relative to the view's parent. Can be either a float value or a dimension string ie 'auto' (default), '50%' (iPhone only).
	 * @alias Titanium_UI_SearchBar.getTop
	 * @return {Float,String}
	 */
	this.getTop = function() { return this.top; }
	/**
	 * Set the property for the view top position. This position is relative to the view's parent. Can be either a float value or a dimension string ie 'auto' (default), '50%' (iPhone only).
	 * @param {Float,String} value New value to set.
	 * @alias Titanium_UI_SearchBar.setTop
	 */
	this.setTop = function(value) { this.top = value; }
	/**
	 * a boolean indicating if the view should receive touch events (true, default) or forward them to peers (false)
	 * @alias Titanium_UI_SearchBar.touchEnabled
	 * @property {Boolean}
	 */
	this.touchEnabled = false
	/**
	 * Get the a boolean indicating if the view should receive touch events (true, default) or forward them to peers (false)
	 * @alias Titanium_UI_SearchBar.getTouchEnabled
	 * @return {Boolean}
	 */
	this.getTouchEnabled = function() { return this.touchEnabled; }
	/**
	 * Set the a boolean indicating if the view should receive touch events (true, default) or forward them to peers (false)
	 * @param {Boolean} value New value to set.
	 * @alias Titanium_UI_SearchBar.setTouchEnabled
	 */
	this.setTouchEnabled = function(value) { this.touchEnabled = value; }
	/**
	 * the transformation matrix to apply to the view
	 * @alias Titanium_UI_SearchBar.transform
	 * @property {Object}
	 */
	this.transform = {}
	/**
	 * Get the the transformation matrix to apply to the view
	 * @alias Titanium_UI_SearchBar.getTransform
	 * @return {Object}
	 */
	this.getTransform = function() { return this.transform; }
	/**
	 * Set the the transformation matrix to apply to the view
	 * @param {Object} value New value to set.
	 * @alias Titanium_UI_SearchBar.setTransform
	 */
	this.setTransform = function(value) { this.transform = value; }
	/**
	 * the value of the search bar
	 * @alias Titanium_UI_SearchBar.value
	 * @property {String}
	 */
	this.value = ''
	/**
	 * Get the the value of the search bar
	 * @alias Titanium_UI_SearchBar.getValue
	 * @return {String}
	 */
	this.getValue = function() { return this.value; }
	/**
	 * Set the the value of the search bar
	 * @param {String} value New value to set.
	 * @alias Titanium_UI_SearchBar.setValue
	 */
	this.setValue = function(value) { this.value = value; }
	/**
	 * a boolean of the visibility of the view
	 * @alias Titanium_UI_SearchBar.visible
	 * @property {Boolean}
	 */
	this.visible = false
	/**
	 * Get the a boolean of the visibility of the view
	 * @alias Titanium_UI_SearchBar.getVisible
	 * @return {Boolean}
	 */
	this.getVisible = function() { return this.visible; }
	/**
	 * Set the a boolean of the visibility of the view
	 * @param {Boolean} value New value to set.
	 * @alias Titanium_UI_SearchBar.setVisible
	 */
	this.setVisible = function(value) { this.visible = value; }
	/**
	 * property for the view width. Can be either a float value or a dimension string ie 'auto' (default), '50%' (iPhone only).
	 * @alias Titanium_UI_SearchBar.width
	 * @property {Float,String}
	 */
	this.width = 0.0
	/**
	 * Get the property for the view width. Can be either a float value or a dimension string ie 'auto' (default), '50%' (iPhone only).
	 * @alias Titanium_UI_SearchBar.getWidth
	 * @return {Float,String}
	 */
	this.getWidth = function() { return this.width; }
	/**
	 * Set the property for the view width. Can be either a float value or a dimension string ie 'auto' (default), '50%' (iPhone only).
	 * @param {Float,String} value New value to set.
	 * @alias Titanium_UI_SearchBar.setWidth
	 */
	this.setWidth = function(value) { this.width = value; }
	/**
	 * the z index position relative to other sibling views
	 * @alias Titanium_UI_SearchBar.zIndex
	 * @property {Integer}
	 */
	this.zIndex = 0
	/**
	 * Get the the z index position relative to other sibling views
	 * @alias Titanium_UI_SearchBar.getZIndex
	 * @return {Integer}
	 */
	this.getZIndex = function() { return this.zIndex; }
	/**
	 * Set the the z index position relative to other sibling views
	 * @param {Integer} value New value to set.
	 * @alias Titanium_UI_SearchBar.setZIndex
	 */
	this.setZIndex = function(value) { this.zIndex = value; }
	/**
	 * add a child to the view hierarchy
	 * @param {Object} view the view to add to this views hiearchy
	 * @alias Titanium_UI_SearchBar.add
	 */
	this.add = function add(view) { }
	/**
	 * add an event listener for the instance to receive view triggered events
	 * @param {String} name name of the event
	 * @param {Function} callback callback function to invoke when the event is fired
	 * @alias Titanium_UI_SearchBar.addEventListener
	 */
	this.addEventListener = function addEventListener(name,callback) { }
	/**
	 * animate the view
	 * @param {Object} obj either a dictionary of animation properties or an Animation object
	 * @param {Function} callback function to be invoked upon completion of the animation
	 * @alias Titanium_UI_SearchBar.animate
	 */
	this.animate = function animate(obj,callback) { }
	/**
	 * called to force the search bar to lose focus
	 * @alias Titanium_UI_SearchBar.blur
	 */
	this.blur = function blur() { }
	/**
	 * fire a synthesized event to the views listener
	 * @param {String} name name of the event
	 * @param {Object} event event object
	 * @alias Titanium_UI_SearchBar.fireEvent
	 */
	this.fireEvent = function fireEvent(name,event) { }
	/**
	 * called to force the search bar to focus
	 * @alias Titanium_UI_SearchBar.focus
	 */
	this.focus = function focus() { }
	/**
	 * hide the view
	 * @alias Titanium_UI_SearchBar.hide
	 */
	this.hide = function hide() { }
	/**
	 * remove a previously add view from the view hiearchy
	 * @param {Object} view the view to remove from this views hiearchy
	 * @alias Titanium_UI_SearchBar.remove
	 */
	this.remove = function remove(view) { }
	/**
	 * remove a previously added event listener
	 * @param {String} name name of the event
	 * @param {Function} callback callback function passed in addEventListener
	 * @alias Titanium_UI_SearchBar.removeEventListener
	 */
	this.removeEventListener = function removeEventListener(name,callback) { }
	/**
	 * make the view visible
	 * @alias Titanium_UI_SearchBar.show
	 */
	this.show = function show() { }
	/**
	 * return a Blob image of the rendered view
	 * @param {Function} f function to be invoked upon completion. if non-null, this method will be performed asynchronously. if null, it will be performed immediately
	 * @alias Titanium_UI_SearchBar.toImage
	 * @return {Object}
	 */
	this.toImage = function toImage(f) { return {}; }
};

/**
 * A Slider is created by the method Titanium.UI.createSlider.
 * @since 0.8
 */
function Titanium_UI_Slider() {
	/**
	 * a dictionary with properties x and y to indicate the anchor point value. anchor specifies the position by which animation should occur. center is 0.5, 0.5
	 * @alias Titanium_UI_Slider.anchorPoint
	 * @property {Object}
	 */
	this.anchorPoint = {}
	/**
	 * Get the a dictionary with properties x and y to indicate the anchor point value. anchor specifies the position by which animation should occur. center is 0.5, 0.5
	 * @alias Titanium_UI_Slider.getAnchorPoint
	 * @return {Object}
	 */
	this.getAnchorPoint = function() { return this.anchorPoint; }
	/**
	 * Set the a dictionary with properties x and y to indicate the anchor point value. anchor specifies the position by which animation should occur. center is 0.5, 0.5
	 * @param {Object} value New value to set.
	 * @alias Titanium_UI_Slider.setAnchorPoint
	 */
	this.setAnchorPoint = function(value) { this.anchorPoint = value; }
	/**
	 * read-only object with x and y properties of where the view is during animation
	 * @alias Titanium_UI_Slider.animatedCenterPoint
	 * @property {Object}
	 */
	this.animatedCenterPoint = {}
	/**
	 * Get the read-only object with x and y properties of where the view is during animation
	 * @alias Titanium_UI_Slider.getAnimatedCenterPoint
	 * @return {Object}
	 */
	this.getAnimatedCenterPoint = function() { return this.animatedCenterPoint; }
	/**
	 * Set the read-only object with x and y properties of where the view is during animation
	 * @param {Object} value New value to set.
	 * @alias Titanium_UI_Slider.setAnimatedCenterPoint
	 */
	this.setAnimatedCenterPoint = function(value) { this.animatedCenterPoint = value; }
	/**
	 * the background color of the view
	 * @alias Titanium_UI_Slider.backgroundColor
	 * @property {String}
	 */
	this.backgroundColor = ''
	/**
	 * Get the the background color of the view
	 * @alias Titanium_UI_Slider.getBackgroundColor
	 * @return {String}
	 */
	this.getBackgroundColor = function() { return this.backgroundColor; }
	/**
	 * Set the the background color of the view
	 * @param {String} value New value to set.
	 * @alias Titanium_UI_Slider.setBackgroundColor
	 */
	this.setBackgroundColor = function(value) { this.backgroundColor = value; }
	/**
	 * the disabled background color of the view. (Android)
	 * @alias Titanium_UI_Slider.backgroundDisabledColor
	 * @property {String}
	 */
	this.backgroundDisabledColor = ''
	/**
	 * Get the the disabled background color of the view. (Android)
	 * @alias Titanium_UI_Slider.getBackgroundDisabledColor
	 * @return {String}
	 */
	this.getBackgroundDisabledColor = function() { return this.backgroundDisabledColor; }
	/**
	 * Set the the disabled background color of the view. (Android)
	 * @param {String} value New value to set.
	 * @alias Titanium_UI_Slider.setBackgroundDisabledColor
	 */
	this.setBackgroundDisabledColor = function(value) { this.backgroundDisabledColor = value; }
	/**
	 * the disabled background image url of the view. (Android)
	 * @alias Titanium_UI_Slider.backgroundDisabledImage
	 * @property {String}
	 */
	this.backgroundDisabledImage = ''
	/**
	 * Get the the disabled background image url of the view. (Android)
	 * @alias Titanium_UI_Slider.getBackgroundDisabledImage
	 * @return {String}
	 */
	this.getBackgroundDisabledImage = function() { return this.backgroundDisabledImage; }
	/**
	 * Set the the disabled background image url of the view. (Android)
	 * @param {String} value New value to set.
	 * @alias Titanium_UI_Slider.setBackgroundDisabledImage
	 */
	this.setBackgroundDisabledImage = function(value) { this.backgroundDisabledImage = value; }
	/**
	 * the focused background color of the view. focusable must be true for normal views. (Android)
	 * @alias Titanium_UI_Slider.backgroundFocusedColor
	 * @property {String}
	 */
	this.backgroundFocusedColor = ''
	/**
	 * Get the the focused background color of the view. focusable must be true for normal views. (Android)
	 * @alias Titanium_UI_Slider.getBackgroundFocusedColor
	 * @return {String}
	 */
	this.getBackgroundFocusedColor = function() { return this.backgroundFocusedColor; }
	/**
	 * Set the the focused background color of the view. focusable must be true for normal views. (Android)
	 * @param {String} value New value to set.
	 * @alias Titanium_UI_Slider.setBackgroundFocusedColor
	 */
	this.setBackgroundFocusedColor = function(value) { this.backgroundFocusedColor = value; }
	/**
	 * the focused background image url of the view. focusable must be true for normal views. (Android)
	 * @alias Titanium_UI_Slider.backgroundFocusedImage
	 * @property {String}
	 */
	this.backgroundFocusedImage = ''
	/**
	 * Get the the focused background image url of the view. focusable must be true for normal views. (Android)
	 * @alias Titanium_UI_Slider.getBackgroundFocusedImage
	 * @return {String}
	 */
	this.getBackgroundFocusedImage = function() { return this.backgroundFocusedImage; }
	/**
	 * Set the the focused background image url of the view. focusable must be true for normal views. (Android)
	 * @param {String} value New value to set.
	 * @alias Titanium_UI_Slider.setBackgroundFocusedImage
	 */
	this.setBackgroundFocusedImage = function(value) { this.backgroundFocusedImage = value; }
	/**
	 * a background gradient for the view with the properties: type,startPoint,endPoint,startRadius,endRadius,backfillStart,backfillEnd,colors.
	 * @alias Titanium_UI_Slider.backgroundGradient
	 * @property {Object}
	 */
	this.backgroundGradient = {}
	/**
	 * Get the a background gradient for the view with the properties: type,startPoint,endPoint,startRadius,endRadius,backfillStart,backfillEnd,colors.
	 * @alias Titanium_UI_Slider.getBackgroundGradient
	 * @return {Object}
	 */
	this.getBackgroundGradient = function() { return this.backgroundGradient; }
	/**
	 * Set the a background gradient for the view with the properties: type,startPoint,endPoint,startRadius,endRadius,backfillStart,backfillEnd,colors.
	 * @param {Object} value New value to set.
	 * @alias Titanium_UI_Slider.setBackgroundGradient
	 */
	this.setBackgroundGradient = function(value) { this.backgroundGradient = value; }
	/**
	 * the background image url of the view
	 * @alias Titanium_UI_Slider.backgroundImage
	 * @property {String}
	 */
	this.backgroundImage = ''
	/**
	 * Get the the background image url of the view
	 * @alias Titanium_UI_Slider.getBackgroundImage
	 * @return {String}
	 */
	this.getBackgroundImage = function() { return this.backgroundImage; }
	/**
	 * Set the the background image url of the view
	 * @param {String} value New value to set.
	 * @alias Titanium_UI_Slider.setBackgroundImage
	 */
	this.setBackgroundImage = function(value) { this.backgroundImage = value; }
	/**
	 * End caps specify the portion of an image that should not be resized when an image is stretched. This technique is used to implement buttons and other resizable image-based interface elements. When a button with end caps is resized, the resizing occurs only in the middle of the button, in the region between the end caps. The end caps themselves keep their original size and appearance. This property specifies the size of the left end cap. The middle (stretchable) portion is assumed to be 1 pixel wide. The right end cap is therefore computed by adding the size of the left end cap and the middle portion together and then subtracting that value from the width of the image
	 * @alias Titanium_UI_Slider.backgroundLeftCap
	 * @property {Float}
	 */
	this.backgroundLeftCap = 0.0
	/**
	 * Get the End caps specify the portion of an image that should not be resized when an image is stretched. This technique is used to implement buttons and other resizable image-based interface elements. When a button with end caps is resized, the resizing occurs only in the middle of the button, in the region between the end caps. The end caps themselves keep their original size and appearance. This property specifies the size of the left end cap. The middle (stretchable) portion is assumed to be 1 pixel wide. The right end cap is therefore computed by adding the size of the left end cap and the middle portion together and then subtracting that value from the width of the image
	 * @alias Titanium_UI_Slider.getBackgroundLeftCap
	 * @return {Float}
	 */
	this.getBackgroundLeftCap = function() { return this.backgroundLeftCap; }
	/**
	 * Set the End caps specify the portion of an image that should not be resized when an image is stretched. This technique is used to implement buttons and other resizable image-based interface elements. When a button with end caps is resized, the resizing occurs only in the middle of the button, in the region between the end caps. The end caps themselves keep their original size and appearance. This property specifies the size of the left end cap. The middle (stretchable) portion is assumed to be 1 pixel wide. The right end cap is therefore computed by adding the size of the left end cap and the middle portion together and then subtracting that value from the width of the image
	 * @param {Float} value New value to set.
	 * @alias Titanium_UI_Slider.setBackgroundLeftCap
	 */
	this.setBackgroundLeftCap = function(value) { this.backgroundLeftCap = value; }
	/**
	 * the selected background color of the view. focusable must be true for normal views. (Android)
	 * @alias Titanium_UI_Slider.backgroundSelectedColor
	 * @property {String}
	 */
	this.backgroundSelectedColor = ''
	/**
	 * Get the the selected background color of the view. focusable must be true for normal views. (Android)
	 * @alias Titanium_UI_Slider.getBackgroundSelectedColor
	 * @return {String}
	 */
	this.getBackgroundSelectedColor = function() { return this.backgroundSelectedColor; }
	/**
	 * Set the the selected background color of the view. focusable must be true for normal views. (Android)
	 * @param {String} value New value to set.
	 * @alias Titanium_UI_Slider.setBackgroundSelectedColor
	 */
	this.setBackgroundSelectedColor = function(value) { this.backgroundSelectedColor = value; }
	/**
	 * the selected background image url of the view. focusable must be true for normal views. (Android)
	 * @alias Titanium_UI_Slider.backgroundSelectedImage
	 * @property {String}
	 */
	this.backgroundSelectedImage = ''
	/**
	 * Get the the selected background image url of the view. focusable must be true for normal views. (Android)
	 * @alias Titanium_UI_Slider.getBackgroundSelectedImage
	 * @return {String}
	 */
	this.getBackgroundSelectedImage = function() { return this.backgroundSelectedImage; }
	/**
	 * Set the the selected background image url of the view. focusable must be true for normal views. (Android)
	 * @param {String} value New value to set.
	 * @alias Titanium_UI_Slider.setBackgroundSelectedImage
	 */
	this.setBackgroundSelectedImage = function(value) { this.backgroundSelectedImage = value; }
	/**
	 * End caps specify the portion of an image that should not be resized when an image is stretched. This technique is used to implement buttons and other resizable image-based interface elements. When a button with end caps is resized, the resizing occurs only in the middle of the button, in the region between the end caps. The end caps themselves keep their original size and appearance. This property specifies the size of the top end cap. The middle (stretchable) portion is assumed to be 1 pixel wide. The bottom end cap is therefore computed by adding the size of the top end cap and the middle portion together and then subtracting that value from the height of the image
	 * @alias Titanium_UI_Slider.backgroundTopCap
	 * @property {Float}
	 */
	this.backgroundTopCap = 0.0
	/**
	 * Get the End caps specify the portion of an image that should not be resized when an image is stretched. This technique is used to implement buttons and other resizable image-based interface elements. When a button with end caps is resized, the resizing occurs only in the middle of the button, in the region between the end caps. The end caps themselves keep their original size and appearance. This property specifies the size of the top end cap. The middle (stretchable) portion is assumed to be 1 pixel wide. The bottom end cap is therefore computed by adding the size of the top end cap and the middle portion together and then subtracting that value from the height of the image
	 * @alias Titanium_UI_Slider.getBackgroundTopCap
	 * @return {Float}
	 */
	this.getBackgroundTopCap = function() { return this.backgroundTopCap; }
	/**
	 * Set the End caps specify the portion of an image that should not be resized when an image is stretched. This technique is used to implement buttons and other resizable image-based interface elements. When a button with end caps is resized, the resizing occurs only in the middle of the button, in the region between the end caps. The end caps themselves keep their original size and appearance. This property specifies the size of the top end cap. The middle (stretchable) portion is assumed to be 1 pixel wide. The bottom end cap is therefore computed by adding the size of the top end cap and the middle portion together and then subtracting that value from the height of the image
	 * @param {Float} value New value to set.
	 * @alias Titanium_UI_Slider.setBackgroundTopCap
	 */
	this.setBackgroundTopCap = function(value) { this.backgroundTopCap = value; }
	/**
	 * the border color of the view
	 * @alias Titanium_UI_Slider.borderColor
	 * @property {String}
	 */
	this.borderColor = ''
	/**
	 * Get the the border color of the view
	 * @alias Titanium_UI_Slider.getBorderColor
	 * @return {String}
	 */
	this.getBorderColor = function() { return this.borderColor; }
	/**
	 * Set the the border color of the view
	 * @param {String} value New value to set.
	 * @alias Titanium_UI_Slider.setBorderColor
	 */
	this.setBorderColor = function(value) { this.borderColor = value; }
	/**
	 * the border radius of the view
	 * @alias Titanium_UI_Slider.borderRadius
	 * @property {Float}
	 */
	this.borderRadius = 0.0
	/**
	 * Get the the border radius of the view
	 * @alias Titanium_UI_Slider.getBorderRadius
	 * @return {Float}
	 */
	this.getBorderRadius = function() { return this.borderRadius; }
	/**
	 * Set the the border radius of the view
	 * @param {Float} value New value to set.
	 * @alias Titanium_UI_Slider.setBorderRadius
	 */
	this.setBorderRadius = function(value) { this.borderRadius = value; }
	/**
	 * the border width of the view
	 * @alias Titanium_UI_Slider.borderWidth
	 * @property {Float}
	 */
	this.borderWidth = 0.0
	/**
	 * Get the the border width of the view
	 * @alias Titanium_UI_Slider.getBorderWidth
	 * @return {Float}
	 */
	this.getBorderWidth = function() { return this.borderWidth; }
	/**
	 * Set the the border width of the view
	 * @param {Float} value New value to set.
	 * @alias Titanium_UI_Slider.setBorderWidth
	 */
	this.setBorderWidth = function(value) { this.borderWidth = value; }
	/**
	 * property for the view bottom position. This position is relative to the view's parent. Can be either a float value or a dimension string ie 'auto' (default), '50%' (iPhone only).
	 * @alias Titanium_UI_Slider.bottom
	 * @property {Float,String}
	 */
	this.bottom = 0.0
	/**
	 * Get the property for the view bottom position. This position is relative to the view's parent. Can be either a float value or a dimension string ie 'auto' (default), '50%' (iPhone only).
	 * @alias Titanium_UI_Slider.getBottom
	 * @return {Float,String}
	 */
	this.getBottom = function() { return this.bottom; }
	/**
	 * Set the property for the view bottom position. This position is relative to the view's parent. Can be either a float value or a dimension string ie 'auto' (default), '50%' (iPhone only).
	 * @param {Float,String} value New value to set.
	 * @alias Titanium_UI_Slider.setBottom
	 */
	this.setBottom = function(value) { this.bottom = value; }
	/**
	 * a dictionary with properties x and y to indicate the center of the views position relative to the parent view
	 * @alias Titanium_UI_Slider.center
	 * @property {Object}
	 */
	this.center = {}
	/**
	 * Get the a dictionary with properties x and y to indicate the center of the views position relative to the parent view
	 * @alias Titanium_UI_Slider.getCenter
	 * @return {Object}
	 */
	this.getCenter = function() { return this.center; }
	/**
	 * Set the a dictionary with properties x and y to indicate the center of the views position relative to the parent view
	 * @param {Object} value New value to set.
	 * @alias Titanium_UI_Slider.setCenter
	 */
	this.setCenter = function(value) { this.center = value; }
	/**
	 * the image url of the slider left track when in the disabled state
	 * @alias Titanium_UI_Slider.disabledLeftTrackImage
	 * @property {String}
	 */
	this.disabledLeftTrackImage = ''
	/**
	 * Get the the image url of the slider left track when in the disabled state
	 * @alias Titanium_UI_Slider.getDisabledLeftTrackImage
	 * @return {String}
	 */
	this.getDisabledLeftTrackImage = function() { return this.disabledLeftTrackImage; }
	/**
	 * Set the the image url of the slider left track when in the disabled state
	 * @param {String} value New value to set.
	 * @alias Titanium_UI_Slider.setDisabledLeftTrackImage
	 */
	this.setDisabledLeftTrackImage = function(value) { this.disabledLeftTrackImage = value; }
	/**
	 * the image url of the slider right track when in the disabled state
	 * @alias Titanium_UI_Slider.disabledRightTrackImage
	 * @property {String}
	 */
	this.disabledRightTrackImage = ''
	/**
	 * Get the the image url of the slider right track when in the disabled state
	 * @alias Titanium_UI_Slider.getDisabledRightTrackImage
	 * @return {String}
	 */
	this.getDisabledRightTrackImage = function() { return this.disabledRightTrackImage; }
	/**
	 * Set the the image url of the slider right track when in the disabled state
	 * @param {String} value New value to set.
	 * @alias Titanium_UI_Slider.setDisabledRightTrackImage
	 */
	this.setDisabledRightTrackImage = function(value) { this.disabledRightTrackImage = value; }
	/**
	 * the image url of the slider thumb when in the disabled state
	 * @alias Titanium_UI_Slider.disabledThumbImage
	 * @property {String}
	 */
	this.disabledThumbImage = ''
	/**
	 * Get the the image url of the slider thumb when in the disabled state
	 * @alias Titanium_UI_Slider.getDisabledThumbImage
	 * @return {String}
	 */
	this.getDisabledThumbImage = function() { return this.disabledThumbImage; }
	/**
	 * Set the the image url of the slider thumb when in the disabled state
	 * @param {String} value New value to set.
	 * @alias Titanium_UI_Slider.setDisabledThumbImage
	 */
	this.setDisabledThumbImage = function(value) { this.disabledThumbImage = value; }
	/**
	 * boolean to indicate the enabled state of the slider
	 * @alias Titanium_UI_Slider.enabled
	 * @property {Boolean}
	 */
	this.enabled = false
	/**
	 * Get the boolean to indicate the enabled state of the slider
	 * @alias Titanium_UI_Slider.getEnabled
	 * @return {Boolean}
	 */
	this.getEnabled = function() { return this.enabled; }
	/**
	 * Set the boolean to indicate the enabled state of the slider
	 * @param {Boolean} value New value to set.
	 * @alias Titanium_UI_Slider.setEnabled
	 */
	this.setEnabled = function(value) { this.enabled = value; }
	/**
	 * Set true if you want a view to be focusable when navigating with the trackball or D-Pad. Default: false. (Android Only)
	 * @alias Titanium_UI_Slider.focusable
	 * @property {Boolean}
	 */
	this.focusable = false
	/**
	 * Get the Set true if you want a view to be focusable when navigating with the trackball or D-Pad. Default: false. (Android Only)
	 * @alias Titanium_UI_Slider.getFocusable
	 * @return {Boolean}
	 */
	this.getFocusable = function() { return this.focusable; }
	/**
	 * Set the Set true if you want a view to be focusable when navigating with the trackball or D-Pad. Default: false. (Android Only)
	 * @param {Boolean} value New value to set.
	 * @alias Titanium_UI_Slider.setFocusable
	 */
	this.setFocusable = function(value) { this.focusable = value; }
	/**
	 * the font family
	 * @alias Titanium_UI_Slider.font-family
	 * @property {String}
	 */
	this.font-family = ''
	/**
	 * Get the the font family
	 * @alias Titanium_UI_Slider.getFont-family
	 * @return {String}
	 */
	this.getFont-family = function() { return this.font-family; }
	/**
	 * Set the the font family
	 * @param {String} value New value to set.
	 * @alias Titanium_UI_Slider.setFont-family
	 */
	this.setFont-family = function(value) { this.font-family = value; }
	/**
	 * the font size
	 * @alias Titanium_UI_Slider.font-size
	 * @property {String}
	 */
	this.font-size = ''
	/**
	 * Get the the font size
	 * @alias Titanium_UI_Slider.getFont-size
	 * @return {String}
	 */
	this.getFont-size = function() { return this.font-size; }
	/**
	 * Set the the font size
	 * @param {String} value New value to set.
	 * @alias Titanium_UI_Slider.setFont-size
	 */
	this.setFont-size = function(value) { this.font-size = value; }
	/**
	 * the font style, either normal or italics
	 * @alias Titanium_UI_Slider.font-style
	 * @property {String}
	 */
	this.font-style = ''
	/**
	 * Get the the font style, either normal or italics
	 * @alias Titanium_UI_Slider.getFont-style
	 * @return {String}
	 */
	this.getFont-style = function() { return this.font-style; }
	/**
	 * Set the the font style, either normal or italics
	 * @param {String} value New value to set.
	 * @alias Titanium_UI_Slider.setFont-style
	 */
	this.setFont-style = function(value) { this.font-style = value; }
	/**
	 * the font weight, either normal or bold
	 * @alias Titanium_UI_Slider.font-weight
	 * @property {String}
	 */
	this.font-weight = ''
	/**
	 * Get the the font weight, either normal or bold
	 * @alias Titanium_UI_Slider.getFont-weight
	 * @return {String}
	 */
	this.getFont-weight = function() { return this.font-weight; }
	/**
	 * Set the the font weight, either normal or bold
	 * @param {String} value New value to set.
	 * @alias Titanium_UI_Slider.setFont-weight
	 */
	this.setFont-weight = function(value) { this.font-weight = value; }
	/**
	 * property for the view height. Can be either a float value or a dimension string ie 'auto' (default), '50%' (iPhone only).
	 * @alias Titanium_UI_Slider.height
	 * @property {Float,String}
	 */
	this.height = 0.0
	/**
	 * Get the property for the view height. Can be either a float value or a dimension string ie 'auto' (default), '50%' (iPhone only).
	 * @alias Titanium_UI_Slider.getHeight
	 * @return {Float,String}
	 */
	this.getHeight = function() { return this.height; }
	/**
	 * Set the property for the view height. Can be either a float value or a dimension string ie 'auto' (default), '50%' (iPhone only).
	 * @param {Float,String} value New value to set.
	 * @alias Titanium_UI_Slider.setHeight
	 */
	this.setHeight = function(value) { this.height = value; }
	/**
	 * the image url of the slider left track when in the highlighted state
	 * @alias Titanium_UI_Slider.highlightedLeftTrackImage
	 * @property {String}
	 */
	this.highlightedLeftTrackImage = ''
	/**
	 * Get the the image url of the slider left track when in the highlighted state
	 * @alias Titanium_UI_Slider.getHighlightedLeftTrackImage
	 * @return {String}
	 */
	this.getHighlightedLeftTrackImage = function() { return this.highlightedLeftTrackImage; }
	/**
	 * Set the the image url of the slider left track when in the highlighted state
	 * @param {String} value New value to set.
	 * @alias Titanium_UI_Slider.setHighlightedLeftTrackImage
	 */
	this.setHighlightedLeftTrackImage = function(value) { this.highlightedLeftTrackImage = value; }
	/**
	 * the image url of the slider right track when in the highlighted state
	 * @alias Titanium_UI_Slider.highlightedRightTrackImage
	 * @property {String}
	 */
	this.highlightedRightTrackImage = ''
	/**
	 * Get the the image url of the slider right track when in the highlighted state
	 * @alias Titanium_UI_Slider.getHighlightedRightTrackImage
	 * @return {String}
	 */
	this.getHighlightedRightTrackImage = function() { return this.highlightedRightTrackImage; }
	/**
	 * Set the the image url of the slider right track when in the highlighted state
	 * @param {String} value New value to set.
	 * @alias Titanium_UI_Slider.setHighlightedRightTrackImage
	 */
	this.setHighlightedRightTrackImage = function(value) { this.highlightedRightTrackImage = value; }
	/**
	 * the image url of the slider thumb when in the highlighted state
	 * @alias Titanium_UI_Slider.highlightedThumbImage
	 * @property {String}
	 */
	this.highlightedThumbImage = ''
	/**
	 * Get the the image url of the slider thumb when in the highlighted state
	 * @alias Titanium_UI_Slider.getHighlightedThumbImage
	 * @return {String}
	 */
	this.getHighlightedThumbImage = function() { return this.highlightedThumbImage; }
	/**
	 * Set the the image url of the slider thumb when in the highlighted state
	 * @param {String} value New value to set.
	 * @alias Titanium_UI_Slider.setHighlightedThumbImage
	 */
	this.setHighlightedThumbImage = function(value) { this.highlightedThumbImage = value; }
	/**
	 * property for the view left position. This position is relative to the view's parent. Can be either a float value or a dimension string ie 'auto' (default), '50%' (iPhone only).
	 * @alias Titanium_UI_Slider.left
	 * @property {Float,String}
	 */
	this.left = 0.0
	/**
	 * Get the property for the view left position. This position is relative to the view's parent. Can be either a float value or a dimension string ie 'auto' (default), '50%' (iPhone only).
	 * @alias Titanium_UI_Slider.getLeft
	 * @return {Float,String}
	 */
	this.getLeft = function() { return this.left; }
	/**
	 * Set the property for the view left position. This position is relative to the view's parent. Can be either a float value or a dimension string ie 'auto' (default), '50%' (iPhone only).
	 * @param {Float,String} value New value to set.
	 * @alias Titanium_UI_Slider.setLeft
	 */
	this.setLeft = function(value) { this.left = value; }
	/**
	 * the image url of the slider left track
	 * @alias Titanium_UI_Slider.leftTrackImage
	 * @property {String}
	 */
	this.leftTrackImage = ''
	/**
	 * Get the the image url of the slider left track
	 * @alias Titanium_UI_Slider.getLeftTrackImage
	 * @return {String}
	 */
	this.getLeftTrackImage = function() { return this.leftTrackImage; }
	/**
	 * Set the the image url of the slider left track
	 * @param {String} value New value to set.
	 * @alias Titanium_UI_Slider.setLeftTrackImage
	 */
	this.setLeftTrackImage = function(value) { this.leftTrackImage = value; }
	/**
	 * the maximum slider value
	 * @alias Titanium_UI_Slider.max
	 * @property {Float}
	 */
	this.max = 0.0
	/**
	 * Get the the maximum slider value
	 * @alias Titanium_UI_Slider.getMax
	 * @return {Float}
	 */
	this.getMax = function() { return this.max; }
	/**
	 * Set the the maximum slider value
	 * @param {Float} value New value to set.
	 * @alias Titanium_UI_Slider.setMax
	 */
	this.setMax = function(value) { this.max = value; }
	/**
	 * value can't be moved higher than maxRange. maxRange equals max by default. (Android)
	 * @alias Titanium_UI_Slider.maxRange
	 * @property {Integer}
	 */
	this.maxRange = 0
	/**
	 * Get the value can't be moved higher than maxRange. maxRange equals max by default. (Android)
	 * @alias Titanium_UI_Slider.getMaxRange
	 * @return {Integer}
	 */
	this.getMaxRange = function() { return this.maxRange; }
	/**
	 * Set the value can't be moved higher than maxRange. maxRange equals max by default. (Android)
	 * @param {Integer} value New value to set.
	 * @alias Titanium_UI_Slider.setMaxRange
	 */
	this.setMaxRange = function(value) { this.maxRange = value; }
	/**
	 * the minimum slider value
	 * @alias Titanium_UI_Slider.min
	 * @property {Float}
	 */
	this.min = 0.0
	/**
	 * Get the the minimum slider value
	 * @alias Titanium_UI_Slider.getMin
	 * @return {Float}
	 */
	this.getMin = function() { return this.min; }
	/**
	 * Set the the minimum slider value
	 * @param {Float} value New value to set.
	 * @alias Titanium_UI_Slider.setMin
	 */
	this.setMin = function(value) { this.min = value; }
	/**
	 * value can't be moved lower than minRange. minRange equals min by default. (Android)
	 * @alias Titanium_UI_Slider.minRange
	 * @property {Integer}
	 */
	this.minRange = 0
	/**
	 * Get the value can't be moved lower than minRange. minRange equals min by default. (Android)
	 * @alias Titanium_UI_Slider.getMinRange
	 * @return {Integer}
	 */
	this.getMinRange = function() { return this.minRange; }
	/**
	 * Set the value can't be moved lower than minRange. minRange equals min by default. (Android)
	 * @param {Integer} value New value to set.
	 * @alias Titanium_UI_Slider.setMinRange
	 */
	this.setMinRange = function(value) { this.minRange = value; }
	/**
	 * the opacity from 0.0-1.0
	 * @alias Titanium_UI_Slider.opacity
	 * @property {Float}
	 */
	this.opacity = 0.0
	/**
	 * Get the the opacity from 0.0-1.0
	 * @alias Titanium_UI_Slider.getOpacity
	 * @return {Float}
	 */
	this.getOpacity = function() { return this.opacity; }
	/**
	 * Set the the opacity from 0.0-1.0
	 * @param {Float} value New value to set.
	 * @alias Titanium_UI_Slider.setOpacity
	 */
	this.setOpacity = function(value) { this.opacity = value; }
	/**
	 * property for the view right position. This position is relative to the view's parent. Can be either a float value or a dimension string ie 'auto' (default), '50%' (iPhone only).
	 * @alias Titanium_UI_Slider.right
	 * @property {Float,String}
	 */
	this.right = 0.0
	/**
	 * Get the property for the view right position. This position is relative to the view's parent. Can be either a float value or a dimension string ie 'auto' (default), '50%' (iPhone only).
	 * @alias Titanium_UI_Slider.getRight
	 * @return {Float,String}
	 */
	this.getRight = function() { return this.right; }
	/**
	 * Set the property for the view right position. This position is relative to the view's parent. Can be either a float value or a dimension string ie 'auto' (default), '50%' (iPhone only).
	 * @param {Float,String} value New value to set.
	 * @alias Titanium_UI_Slider.setRight
	 */
	this.setRight = function(value) { this.right = value; }
	/**
	 * the image url of the slider right track
	 * @alias Titanium_UI_Slider.rightTrackImage
	 * @property {String}
	 */
	this.rightTrackImage = ''
	/**
	 * Get the the image url of the slider right track
	 * @alias Titanium_UI_Slider.getRightTrackImage
	 * @return {String}
	 */
	this.getRightTrackImage = function() { return this.rightTrackImage; }
	/**
	 * Set the the image url of the slider right track
	 * @param {String} value New value to set.
	 * @alias Titanium_UI_Slider.setRightTrackImage
	 */
	this.setRightTrackImage = function(value) { this.rightTrackImage = value; }
	/**
	 * the image url of the slider left track when in the selected state
	 * @alias Titanium_UI_Slider.selectedLeftTrackImage
	 * @property {String}
	 */
	this.selectedLeftTrackImage = ''
	/**
	 * Get the the image url of the slider left track when in the selected state
	 * @alias Titanium_UI_Slider.getSelectedLeftTrackImage
	 * @return {String}
	 */
	this.getSelectedLeftTrackImage = function() { return this.selectedLeftTrackImage; }
	/**
	 * Set the the image url of the slider left track when in the selected state
	 * @param {String} value New value to set.
	 * @alias Titanium_UI_Slider.setSelectedLeftTrackImage
	 */
	this.setSelectedLeftTrackImage = function(value) { this.selectedLeftTrackImage = value; }
	/**
	 * the image url of the slider right track when in the selected state
	 * @alias Titanium_UI_Slider.selectedRightTrackImage
	 * @property {String}
	 */
	this.selectedRightTrackImage = ''
	/**
	 * Get the the image url of the slider right track when in the selected state
	 * @alias Titanium_UI_Slider.getSelectedRightTrackImage
	 * @return {String}
	 */
	this.getSelectedRightTrackImage = function() { return this.selectedRightTrackImage; }
	/**
	 * Set the the image url of the slider right track when in the selected state
	 * @param {String} value New value to set.
	 * @alias Titanium_UI_Slider.setSelectedRightTrackImage
	 */
	this.setSelectedRightTrackImage = function(value) { this.selectedRightTrackImage = value; }
	/**
	 * the image url of the slider thumb when in the selected state
	 * @alias Titanium_UI_Slider.selectedThumbImage
	 * @property {String}
	 */
	this.selectedThumbImage = ''
	/**
	 * Get the the image url of the slider thumb when in the selected state
	 * @alias Titanium_UI_Slider.getSelectedThumbImage
	 * @return {String}
	 */
	this.getSelectedThumbImage = function() { return this.selectedThumbImage; }
	/**
	 * Set the the image url of the slider thumb when in the selected state
	 * @param {String} value New value to set.
	 * @alias Titanium_UI_Slider.setSelectedThumbImage
	 */
	this.setSelectedThumbImage = function(value) { this.selectedThumbImage = value; }
	/**
	 * the size of the view as a dictionary of width and height properties
	 * @alias Titanium_UI_Slider.size
	 * @property {Object}
	 */
	this.size = {}
	/**
	 * Get the the size of the view as a dictionary of width and height properties
	 * @alias Titanium_UI_Slider.getSize
	 * @return {Object}
	 */
	this.getSize = function() { return this.size; }
	/**
	 * Set the the size of the view as a dictionary of width and height properties
	 * @param {Object} value New value to set.
	 * @alias Titanium_UI_Slider.setSize
	 */
	this.setSize = function(value) { this.size = value; }
	/**
	 * One of Titanium.UI.Android.SOFT_KEYBOARD_DEFAULT_ON_FOCUS, Titanium.UI.Android.SOFT_KEYBOARD_HIDE_ON_FOCUS, or Titanium.UI.Android.SOFT_KEYBOARD_SHOW_ON_FOCUS. (Android only)
	 * @alias Titanium_UI_Slider.softKeyboardOnFocus
	 * @property {Integer}
	 */
	this.softKeyboardOnFocus = 0
	/**
	 * Get the One of Titanium.UI.Android.SOFT_KEYBOARD_DEFAULT_ON_FOCUS, Titanium.UI.Android.SOFT_KEYBOARD_HIDE_ON_FOCUS, or Titanium.UI.Android.SOFT_KEYBOARD_SHOW_ON_FOCUS. (Android only)
	 * @alias Titanium_UI_Slider.getSoftKeyboardOnFocus
	 * @return {Integer}
	 */
	this.getSoftKeyboardOnFocus = function() { return this.softKeyboardOnFocus; }
	/**
	 * Set the One of Titanium.UI.Android.SOFT_KEYBOARD_DEFAULT_ON_FOCUS, Titanium.UI.Android.SOFT_KEYBOARD_HIDE_ON_FOCUS, or Titanium.UI.Android.SOFT_KEYBOARD_SHOW_ON_FOCUS. (Android only)
	 * @param {Integer} value New value to set.
	 * @alias Titanium_UI_Slider.setSoftKeyboardOnFocus
	 */
	this.setSoftKeyboardOnFocus = function(value) { this.softKeyboardOnFocus = value; }
	/**
	 * the image url to the slider thumb
	 * @alias Titanium_UI_Slider.thumbImage
	 * @property {String}
	 */
	this.thumbImage = ''
	/**
	 * Get the the image url to the slider thumb
	 * @alias Titanium_UI_Slider.getThumbImage
	 * @return {String}
	 */
	this.getThumbImage = function() { return this.thumbImage; }
	/**
	 * Set the the image url to the slider thumb
	 * @param {String} value New value to set.
	 * @alias Titanium_UI_Slider.setThumbImage
	 */
	this.setThumbImage = function(value) { this.thumbImage = value; }
	/**
	 * property for the view top position. This position is relative to the view's parent. Can be either a float value or a dimension string ie 'auto' (default), '50%' (iPhone only).
	 * @alias Titanium_UI_Slider.top
	 * @property {Float,String}
	 */
	this.top = 0.0
	/**
	 * Get the property for the view top position. This position is relative to the view's parent. Can be either a float value or a dimension string ie 'auto' (default), '50%' (iPhone only).
	 * @alias Titanium_UI_Slider.getTop
	 * @return {Float,String}
	 */
	this.getTop = function() { return this.top; }
	/**
	 * Set the property for the view top position. This position is relative to the view's parent. Can be either a float value or a dimension string ie 'auto' (default), '50%' (iPhone only).
	 * @param {Float,String} value New value to set.
	 * @alias Titanium_UI_Slider.setTop
	 */
	this.setTop = function(value) { this.top = value; }
	/**
	 * a boolean indicating if the view should receive touch events (true, default) or forward them to peers (false)
	 * @alias Titanium_UI_Slider.touchEnabled
	 * @property {Boolean}
	 */
	this.touchEnabled = false
	/**
	 * Get the a boolean indicating if the view should receive touch events (true, default) or forward them to peers (false)
	 * @alias Titanium_UI_Slider.getTouchEnabled
	 * @return {Boolean}
	 */
	this.getTouchEnabled = function() { return this.touchEnabled; }
	/**
	 * Set the a boolean indicating if the view should receive touch events (true, default) or forward them to peers (false)
	 * @param {Boolean} value New value to set.
	 * @alias Titanium_UI_Slider.setTouchEnabled
	 */
	this.setTouchEnabled = function(value) { this.touchEnabled = value; }
	/**
	 * the transformation matrix to apply to the view
	 * @alias Titanium_UI_Slider.transform
	 * @property {Object}
	 */
	this.transform = {}
	/**
	 * Get the the transformation matrix to apply to the view
	 * @alias Titanium_UI_Slider.getTransform
	 * @return {Object}
	 */
	this.getTransform = function() { return this.transform; }
	/**
	 * Set the the transformation matrix to apply to the view
	 * @param {Object} value New value to set.
	 * @alias Titanium_UI_Slider.setTransform
	 */
	this.setTransform = function(value) { this.transform = value; }
	/**
	 * the value of the slider
	 * @alias Titanium_UI_Slider.value
	 * @property {String}
	 */
	this.value = ''
	/**
	 * Get the the value of the slider
	 * @alias Titanium_UI_Slider.getValue
	 * @return {String}
	 */
	this.getValue = function() { return this.value; }
	/**
	 * Set the the value of the slider
	 * @param {String} value New value to set.
	 * @alias Titanium_UI_Slider.setValue
	 */
	this.setValue = function(value) { this.value = value; }
	/**
	 * a boolean of the visibility of the view
	 * @alias Titanium_UI_Slider.visible
	 * @property {Boolean}
	 */
	this.visible = false
	/**
	 * Get the a boolean of the visibility of the view
	 * @alias Titanium_UI_Slider.getVisible
	 * @return {Boolean}
	 */
	this.getVisible = function() { return this.visible; }
	/**
	 * Set the a boolean of the visibility of the view
	 * @param {Boolean} value New value to set.
	 * @alias Titanium_UI_Slider.setVisible
	 */
	this.setVisible = function(value) { this.visible = value; }
	/**
	 * property for the view width. Can be either a float value or a dimension string ie 'auto' (default), '50%' (iPhone only).
	 * @alias Titanium_UI_Slider.width
	 * @property {Float,String}
	 */
	this.width = 0.0
	/**
	 * Get the property for the view width. Can be either a float value or a dimension string ie 'auto' (default), '50%' (iPhone only).
	 * @alias Titanium_UI_Slider.getWidth
	 * @return {Float,String}
	 */
	this.getWidth = function() { return this.width; }
	/**
	 * Set the property for the view width. Can be either a float value or a dimension string ie 'auto' (default), '50%' (iPhone only).
	 * @param {Float,String} value New value to set.
	 * @alias Titanium_UI_Slider.setWidth
	 */
	this.setWidth = function(value) { this.width = value; }
	/**
	 * the z index position relative to other sibling views
	 * @alias Titanium_UI_Slider.zIndex
	 * @property {Integer}
	 */
	this.zIndex = 0
	/**
	 * Get the the z index position relative to other sibling views
	 * @alias Titanium_UI_Slider.getZIndex
	 * @return {Integer}
	 */
	this.getZIndex = function() { return this.zIndex; }
	/**
	 * Set the the z index position relative to other sibling views
	 * @param {Integer} value New value to set.
	 * @alias Titanium_UI_Slider.setZIndex
	 */
	this.setZIndex = function(value) { this.zIndex = value; }
	/**
	 * add a child to the view hierarchy
	 * @param {Object} view the view to add to this views hiearchy
	 * @alias Titanium_UI_Slider.add
	 */
	this.add = function add(view) { }
	/**
	 * add an event listener for the instance to receive view triggered events
	 * @param {String} name name of the event
	 * @param {Function} callback callback function to invoke when the event is fired
	 * @alias Titanium_UI_Slider.addEventListener
	 */
	this.addEventListener = function addEventListener(name,callback) { }
	/**
	 * animate the view
	 * @param {Object} obj either a dictionary of animation properties or an Animation object
	 * @param {Function} callback function to be invoked upon completion of the animation
	 * @alias Titanium_UI_Slider.animate
	 */
	this.animate = function animate(obj,callback) { }
	/**
	 * fire a synthesized event to the views listener
	 * @param {String} name name of the event
	 * @param {Object} event event object
	 * @alias Titanium_UI_Slider.fireEvent
	 */
	this.fireEvent = function fireEvent(name,event) { }
	/**
	 * hide the view
	 * @alias Titanium_UI_Slider.hide
	 */
	this.hide = function hide() { }
	/**
	 * remove a previously add view from the view hiearchy
	 * @param {Object} view the view to remove from this views hiearchy
	 * @alias Titanium_UI_Slider.remove
	 */
	this.remove = function remove(view) { }
	/**
	 * remove a previously added event listener
	 * @param {String} name name of the event
	 * @param {Function} callback callback function passed in addEventListener
	 * @alias Titanium_UI_Slider.removeEventListener
	 */
	this.removeEventListener = function removeEventListener(name,callback) { }
	/**
	 * make the view visible
	 * @alias Titanium_UI_Slider.show
	 */
	this.show = function show() { }
	/**
	 * return a Blob image of the rendered view
	 * @param {Function} f function to be invoked upon completion. if non-null, this method will be performed asynchronously. if null, it will be performed immediately
	 * @alias Titanium_UI_Slider.toImage
	 * @return {Object}
	 */
	this.toImage = function toImage(f) { return {}; }
};

/**
 * A Switch is created by the method Titanium.UI.createSwitch.
 * @since 0.8
 */
function Titanium_UI_Switch() {
	/**
	 * a dictionary with properties x and y to indicate the anchor point value. anchor specifies the position by which animation should occur. center is 0.5, 0.5
	 * @alias Titanium_UI_Switch.anchorPoint
	 * @property {Object}
	 */
	this.anchorPoint = {}
	/**
	 * Get the a dictionary with properties x and y to indicate the anchor point value. anchor specifies the position by which animation should occur. center is 0.5, 0.5
	 * @alias Titanium_UI_Switch.getAnchorPoint
	 * @return {Object}
	 */
	this.getAnchorPoint = function() { return this.anchorPoint; }
	/**
	 * Set the a dictionary with properties x and y to indicate the anchor point value. anchor specifies the position by which animation should occur. center is 0.5, 0.5
	 * @param {Object} value New value to set.
	 * @alias Titanium_UI_Switch.setAnchorPoint
	 */
	this.setAnchorPoint = function(value) { this.anchorPoint = value; }
	/**
	 * read-only object with x and y properties of where the view is during animation
	 * @alias Titanium_UI_Switch.animatedCenterPoint
	 * @property {Object}
	 */
	this.animatedCenterPoint = {}
	/**
	 * Get the read-only object with x and y properties of where the view is during animation
	 * @alias Titanium_UI_Switch.getAnimatedCenterPoint
	 * @return {Object}
	 */
	this.getAnimatedCenterPoint = function() { return this.animatedCenterPoint; }
	/**
	 * Set the read-only object with x and y properties of where the view is during animation
	 * @param {Object} value New value to set.
	 * @alias Titanium_UI_Switch.setAnimatedCenterPoint
	 */
	this.setAnimatedCenterPoint = function(value) { this.animatedCenterPoint = value; }
	/**
	 * the background color of the view
	 * @alias Titanium_UI_Switch.backgroundColor
	 * @property {String}
	 */
	this.backgroundColor = ''
	/**
	 * Get the the background color of the view
	 * @alias Titanium_UI_Switch.getBackgroundColor
	 * @return {String}
	 */
	this.getBackgroundColor = function() { return this.backgroundColor; }
	/**
	 * Set the the background color of the view
	 * @param {String} value New value to set.
	 * @alias Titanium_UI_Switch.setBackgroundColor
	 */
	this.setBackgroundColor = function(value) { this.backgroundColor = value; }
	/**
	 * the disabled background color of the view. (Android)
	 * @alias Titanium_UI_Switch.backgroundDisabledColor
	 * @property {String}
	 */
	this.backgroundDisabledColor = ''
	/**
	 * Get the the disabled background color of the view. (Android)
	 * @alias Titanium_UI_Switch.getBackgroundDisabledColor
	 * @return {String}
	 */
	this.getBackgroundDisabledColor = function() { return this.backgroundDisabledColor; }
	/**
	 * Set the the disabled background color of the view. (Android)
	 * @param {String} value New value to set.
	 * @alias Titanium_UI_Switch.setBackgroundDisabledColor
	 */
	this.setBackgroundDisabledColor = function(value) { this.backgroundDisabledColor = value; }
	/**
	 * the disabled background image url of the view. (Android)
	 * @alias Titanium_UI_Switch.backgroundDisabledImage
	 * @property {String}
	 */
	this.backgroundDisabledImage = ''
	/**
	 * Get the the disabled background image url of the view. (Android)
	 * @alias Titanium_UI_Switch.getBackgroundDisabledImage
	 * @return {String}
	 */
	this.getBackgroundDisabledImage = function() { return this.backgroundDisabledImage; }
	/**
	 * Set the the disabled background image url of the view. (Android)
	 * @param {String} value New value to set.
	 * @alias Titanium_UI_Switch.setBackgroundDisabledImage
	 */
	this.setBackgroundDisabledImage = function(value) { this.backgroundDisabledImage = value; }
	/**
	 * the focused background color of the view. focusable must be true for normal views. (Android)
	 * @alias Titanium_UI_Switch.backgroundFocusedColor
	 * @property {String}
	 */
	this.backgroundFocusedColor = ''
	/**
	 * Get the the focused background color of the view. focusable must be true for normal views. (Android)
	 * @alias Titanium_UI_Switch.getBackgroundFocusedColor
	 * @return {String}
	 */
	this.getBackgroundFocusedColor = function() { return this.backgroundFocusedColor; }
	/**
	 * Set the the focused background color of the view. focusable must be true for normal views. (Android)
	 * @param {String} value New value to set.
	 * @alias Titanium_UI_Switch.setBackgroundFocusedColor
	 */
	this.setBackgroundFocusedColor = function(value) { this.backgroundFocusedColor = value; }
	/**
	 * the focused background image url of the view. focusable must be true for normal views. (Android)
	 * @alias Titanium_UI_Switch.backgroundFocusedImage
	 * @property {String}
	 */
	this.backgroundFocusedImage = ''
	/**
	 * Get the the focused background image url of the view. focusable must be true for normal views. (Android)
	 * @alias Titanium_UI_Switch.getBackgroundFocusedImage
	 * @return {String}
	 */
	this.getBackgroundFocusedImage = function() { return this.backgroundFocusedImage; }
	/**
	 * Set the the focused background image url of the view. focusable must be true for normal views. (Android)
	 * @param {String} value New value to set.
	 * @alias Titanium_UI_Switch.setBackgroundFocusedImage
	 */
	this.setBackgroundFocusedImage = function(value) { this.backgroundFocusedImage = value; }
	/**
	 * a background gradient for the view with the properties: type,startPoint,endPoint,startRadius,endRadius,backfillStart,backfillEnd,colors.
	 * @alias Titanium_UI_Switch.backgroundGradient
	 * @property {Object}
	 */
	this.backgroundGradient = {}
	/**
	 * Get the a background gradient for the view with the properties: type,startPoint,endPoint,startRadius,endRadius,backfillStart,backfillEnd,colors.
	 * @alias Titanium_UI_Switch.getBackgroundGradient
	 * @return {Object}
	 */
	this.getBackgroundGradient = function() { return this.backgroundGradient; }
	/**
	 * Set the a background gradient for the view with the properties: type,startPoint,endPoint,startRadius,endRadius,backfillStart,backfillEnd,colors.
	 * @param {Object} value New value to set.
	 * @alias Titanium_UI_Switch.setBackgroundGradient
	 */
	this.setBackgroundGradient = function(value) { this.backgroundGradient = value; }
	/**
	 * the background image url of the view
	 * @alias Titanium_UI_Switch.backgroundImage
	 * @property {String}
	 */
	this.backgroundImage = ''
	/**
	 * Get the the background image url of the view
	 * @alias Titanium_UI_Switch.getBackgroundImage
	 * @return {String}
	 */
	this.getBackgroundImage = function() { return this.backgroundImage; }
	/**
	 * Set the the background image url of the view
	 * @param {String} value New value to set.
	 * @alias Titanium_UI_Switch.setBackgroundImage
	 */
	this.setBackgroundImage = function(value) { this.backgroundImage = value; }
	/**
	 * End caps specify the portion of an image that should not be resized when an image is stretched. This technique is used to implement buttons and other resizable image-based interface elements. When a button with end caps is resized, the resizing occurs only in the middle of the button, in the region between the end caps. The end caps themselves keep their original size and appearance. This property specifies the size of the left end cap. The middle (stretchable) portion is assumed to be 1 pixel wide. The right end cap is therefore computed by adding the size of the left end cap and the middle portion together and then subtracting that value from the width of the image
	 * @alias Titanium_UI_Switch.backgroundLeftCap
	 * @property {Float}
	 */
	this.backgroundLeftCap = 0.0
	/**
	 * Get the End caps specify the portion of an image that should not be resized when an image is stretched. This technique is used to implement buttons and other resizable image-based interface elements. When a button with end caps is resized, the resizing occurs only in the middle of the button, in the region between the end caps. The end caps themselves keep their original size and appearance. This property specifies the size of the left end cap. The middle (stretchable) portion is assumed to be 1 pixel wide. The right end cap is therefore computed by adding the size of the left end cap and the middle portion together and then subtracting that value from the width of the image
	 * @alias Titanium_UI_Switch.getBackgroundLeftCap
	 * @return {Float}
	 */
	this.getBackgroundLeftCap = function() { return this.backgroundLeftCap; }
	/**
	 * Set the End caps specify the portion of an image that should not be resized when an image is stretched. This technique is used to implement buttons and other resizable image-based interface elements. When a button with end caps is resized, the resizing occurs only in the middle of the button, in the region between the end caps. The end caps themselves keep their original size and appearance. This property specifies the size of the left end cap. The middle (stretchable) portion is assumed to be 1 pixel wide. The right end cap is therefore computed by adding the size of the left end cap and the middle portion together and then subtracting that value from the width of the image
	 * @param {Float} value New value to set.
	 * @alias Titanium_UI_Switch.setBackgroundLeftCap
	 */
	this.setBackgroundLeftCap = function(value) { this.backgroundLeftCap = value; }
	/**
	 * the selected background color of the view. focusable must be true for normal views. (Android)
	 * @alias Titanium_UI_Switch.backgroundSelectedColor
	 * @property {String}
	 */
	this.backgroundSelectedColor = ''
	/**
	 * Get the the selected background color of the view. focusable must be true for normal views. (Android)
	 * @alias Titanium_UI_Switch.getBackgroundSelectedColor
	 * @return {String}
	 */
	this.getBackgroundSelectedColor = function() { return this.backgroundSelectedColor; }
	/**
	 * Set the the selected background color of the view. focusable must be true for normal views. (Android)
	 * @param {String} value New value to set.
	 * @alias Titanium_UI_Switch.setBackgroundSelectedColor
	 */
	this.setBackgroundSelectedColor = function(value) { this.backgroundSelectedColor = value; }
	/**
	 * the selected background image url of the view. focusable must be true for normal views. (Android)
	 * @alias Titanium_UI_Switch.backgroundSelectedImage
	 * @property {String}
	 */
	this.backgroundSelectedImage = ''
	/**
	 * Get the the selected background image url of the view. focusable must be true for normal views. (Android)
	 * @alias Titanium_UI_Switch.getBackgroundSelectedImage
	 * @return {String}
	 */
	this.getBackgroundSelectedImage = function() { return this.backgroundSelectedImage; }
	/**
	 * Set the the selected background image url of the view. focusable must be true for normal views. (Android)
	 * @param {String} value New value to set.
	 * @alias Titanium_UI_Switch.setBackgroundSelectedImage
	 */
	this.setBackgroundSelectedImage = function(value) { this.backgroundSelectedImage = value; }
	/**
	 * End caps specify the portion of an image that should not be resized when an image is stretched. This technique is used to implement buttons and other resizable image-based interface elements. When a button with end caps is resized, the resizing occurs only in the middle of the button, in the region between the end caps. The end caps themselves keep their original size and appearance. This property specifies the size of the top end cap. The middle (stretchable) portion is assumed to be 1 pixel wide. The bottom end cap is therefore computed by adding the size of the top end cap and the middle portion together and then subtracting that value from the height of the image
	 * @alias Titanium_UI_Switch.backgroundTopCap
	 * @property {Float}
	 */
	this.backgroundTopCap = 0.0
	/**
	 * Get the End caps specify the portion of an image that should not be resized when an image is stretched. This technique is used to implement buttons and other resizable image-based interface elements. When a button with end caps is resized, the resizing occurs only in the middle of the button, in the region between the end caps. The end caps themselves keep their original size and appearance. This property specifies the size of the top end cap. The middle (stretchable) portion is assumed to be 1 pixel wide. The bottom end cap is therefore computed by adding the size of the top end cap and the middle portion together and then subtracting that value from the height of the image
	 * @alias Titanium_UI_Switch.getBackgroundTopCap
	 * @return {Float}
	 */
	this.getBackgroundTopCap = function() { return this.backgroundTopCap; }
	/**
	 * Set the End caps specify the portion of an image that should not be resized when an image is stretched. This technique is used to implement buttons and other resizable image-based interface elements. When a button with end caps is resized, the resizing occurs only in the middle of the button, in the region between the end caps. The end caps themselves keep their original size and appearance. This property specifies the size of the top end cap. The middle (stretchable) portion is assumed to be 1 pixel wide. The bottom end cap is therefore computed by adding the size of the top end cap and the middle portion together and then subtracting that value from the height of the image
	 * @param {Float} value New value to set.
	 * @alias Titanium_UI_Switch.setBackgroundTopCap
	 */
	this.setBackgroundTopCap = function(value) { this.backgroundTopCap = value; }
	/**
	 * the border color of the view
	 * @alias Titanium_UI_Switch.borderColor
	 * @property {String}
	 */
	this.borderColor = ''
	/**
	 * Get the the border color of the view
	 * @alias Titanium_UI_Switch.getBorderColor
	 * @return {String}
	 */
	this.getBorderColor = function() { return this.borderColor; }
	/**
	 * Set the the border color of the view
	 * @param {String} value New value to set.
	 * @alias Titanium_UI_Switch.setBorderColor
	 */
	this.setBorderColor = function(value) { this.borderColor = value; }
	/**
	 * the border radius of the view
	 * @alias Titanium_UI_Switch.borderRadius
	 * @property {Float}
	 */
	this.borderRadius = 0.0
	/**
	 * Get the the border radius of the view
	 * @alias Titanium_UI_Switch.getBorderRadius
	 * @return {Float}
	 */
	this.getBorderRadius = function() { return this.borderRadius; }
	/**
	 * Set the the border radius of the view
	 * @param {Float} value New value to set.
	 * @alias Titanium_UI_Switch.setBorderRadius
	 */
	this.setBorderRadius = function(value) { this.borderRadius = value; }
	/**
	 * the border width of the view
	 * @alias Titanium_UI_Switch.borderWidth
	 * @property {Float}
	 */
	this.borderWidth = 0.0
	/**
	 * Get the the border width of the view
	 * @alias Titanium_UI_Switch.getBorderWidth
	 * @return {Float}
	 */
	this.getBorderWidth = function() { return this.borderWidth; }
	/**
	 * Set the the border width of the view
	 * @param {Float} value New value to set.
	 * @alias Titanium_UI_Switch.setBorderWidth
	 */
	this.setBorderWidth = function(value) { this.borderWidth = value; }
	/**
	 * property for the view bottom position. This position is relative to the view's parent. Can be either a float value or a dimension string ie 'auto' (default), '50%' (iPhone only).
	 * @alias Titanium_UI_Switch.bottom
	 * @property {Float,String}
	 */
	this.bottom = 0.0
	/**
	 * Get the property for the view bottom position. This position is relative to the view's parent. Can be either a float value or a dimension string ie 'auto' (default), '50%' (iPhone only).
	 * @alias Titanium_UI_Switch.getBottom
	 * @return {Float,String}
	 */
	this.getBottom = function() { return this.bottom; }
	/**
	 * Set the property for the view bottom position. This position is relative to the view's parent. Can be either a float value or a dimension string ie 'auto' (default), '50%' (iPhone only).
	 * @param {Float,String} value New value to set.
	 * @alias Titanium_UI_Switch.setBottom
	 */
	this.setBottom = function(value) { this.bottom = value; }
	/**
	 * a dictionary with properties x and y to indicate the center of the views position relative to the parent view
	 * @alias Titanium_UI_Switch.center
	 * @property {Object}
	 */
	this.center = {}
	/**
	 * Get the a dictionary with properties x and y to indicate the center of the views position relative to the parent view
	 * @alias Titanium_UI_Switch.getCenter
	 * @return {Object}
	 */
	this.getCenter = function() { return this.center; }
	/**
	 * Set the a dictionary with properties x and y to indicate the center of the views position relative to the parent view
	 * @param {Object} value New value to set.
	 * @alias Titanium_UI_Switch.setCenter
	 */
	this.setCenter = function(value) { this.center = value; }
	/**
	 * boolean for the state of the switch
	 * @alias Titanium_UI_Switch.enabled
	 * @property {Boolean}
	 */
	this.enabled = false
	/**
	 * Get the boolean for the state of the switch
	 * @alias Titanium_UI_Switch.getEnabled
	 * @return {Boolean}
	 */
	this.getEnabled = function() { return this.enabled; }
	/**
	 * Set the boolean for the state of the switch
	 * @param {Boolean} value New value to set.
	 * @alias Titanium_UI_Switch.setEnabled
	 */
	this.setEnabled = function(value) { this.enabled = value; }
	/**
	 * Set true if you want a view to be focusable when navigating with the trackball or D-Pad. Default: false. (Android Only)
	 * @alias Titanium_UI_Switch.focusable
	 * @property {Boolean}
	 */
	this.focusable = false
	/**
	 * Get the Set true if you want a view to be focusable when navigating with the trackball or D-Pad. Default: false. (Android Only)
	 * @alias Titanium_UI_Switch.getFocusable
	 * @return {Boolean}
	 */
	this.getFocusable = function() { return this.focusable; }
	/**
	 * Set the Set true if you want a view to be focusable when navigating with the trackball or D-Pad. Default: false. (Android Only)
	 * @param {Boolean} value New value to set.
	 * @alias Titanium_UI_Switch.setFocusable
	 */
	this.setFocusable = function(value) { this.focusable = value; }
	/**
	 * the font family
	 * @alias Titanium_UI_Switch.font-family
	 * @property {String}
	 */
	this.font-family = ''
	/**
	 * Get the the font family
	 * @alias Titanium_UI_Switch.getFont-family
	 * @return {String}
	 */
	this.getFont-family = function() { return this.font-family; }
	/**
	 * Set the the font family
	 * @param {String} value New value to set.
	 * @alias Titanium_UI_Switch.setFont-family
	 */
	this.setFont-family = function(value) { this.font-family = value; }
	/**
	 * the font size
	 * @alias Titanium_UI_Switch.font-size
	 * @property {String}
	 */
	this.font-size = ''
	/**
	 * Get the the font size
	 * @alias Titanium_UI_Switch.getFont-size
	 * @return {String}
	 */
	this.getFont-size = function() { return this.font-size; }
	/**
	 * Set the the font size
	 * @param {String} value New value to set.
	 * @alias Titanium_UI_Switch.setFont-size
	 */
	this.setFont-size = function(value) { this.font-size = value; }
	/**
	 * the font style, either normal or italics
	 * @alias Titanium_UI_Switch.font-style
	 * @property {String}
	 */
	this.font-style = ''
	/**
	 * Get the the font style, either normal or italics
	 * @alias Titanium_UI_Switch.getFont-style
	 * @return {String}
	 */
	this.getFont-style = function() { return this.font-style; }
	/**
	 * Set the the font style, either normal or italics
	 * @param {String} value New value to set.
	 * @alias Titanium_UI_Switch.setFont-style
	 */
	this.setFont-style = function(value) { this.font-style = value; }
	/**
	 * the font weight, either normal or bold
	 * @alias Titanium_UI_Switch.font-weight
	 * @property {String}
	 */
	this.font-weight = ''
	/**
	 * Get the the font weight, either normal or bold
	 * @alias Titanium_UI_Switch.getFont-weight
	 * @return {String}
	 */
	this.getFont-weight = function() { return this.font-weight; }
	/**
	 * Set the the font weight, either normal or bold
	 * @param {String} value New value to set.
	 * @alias Titanium_UI_Switch.setFont-weight
	 */
	this.setFont-weight = function(value) { this.font-weight = value; }
	/**
	 * property for the view height. Can be either a float value or a dimension string ie 'auto' (default), '50%' (iPhone only).
	 * @alias Titanium_UI_Switch.height
	 * @property {Float,String}
	 */
	this.height = 0.0
	/**
	 * Get the property for the view height. Can be either a float value or a dimension string ie 'auto' (default), '50%' (iPhone only).
	 * @alias Titanium_UI_Switch.getHeight
	 * @return {Float,String}
	 */
	this.getHeight = function() { return this.height; }
	/**
	 * Set the property for the view height. Can be either a float value or a dimension string ie 'auto' (default), '50%' (iPhone only).
	 * @param {Float,String} value New value to set.
	 * @alias Titanium_UI_Switch.setHeight
	 */
	this.setHeight = function(value) { this.height = value; }
	/**
	 * property for the view left position. This position is relative to the view's parent. Can be either a float value or a dimension string ie 'auto' (default), '50%' (iPhone only).
	 * @alias Titanium_UI_Switch.left
	 * @property {Float,String}
	 */
	this.left = 0.0
	/**
	 * Get the property for the view left position. This position is relative to the view's parent. Can be either a float value or a dimension string ie 'auto' (default), '50%' (iPhone only).
	 * @alias Titanium_UI_Switch.getLeft
	 * @return {Float,String}
	 */
	this.getLeft = function() { return this.left; }
	/**
	 * Set the property for the view left position. This position is relative to the view's parent. Can be either a float value or a dimension string ie 'auto' (default), '50%' (iPhone only).
	 * @param {Float,String} value New value to set.
	 * @alias Titanium_UI_Switch.setLeft
	 */
	this.setLeft = function(value) { this.left = value; }
	/**
	 * the opacity from 0.0-1.0
	 * @alias Titanium_UI_Switch.opacity
	 * @property {Float}
	 */
	this.opacity = 0.0
	/**
	 * Get the the opacity from 0.0-1.0
	 * @alias Titanium_UI_Switch.getOpacity
	 * @return {Float}
	 */
	this.getOpacity = function() { return this.opacity; }
	/**
	 * Set the the opacity from 0.0-1.0
	 * @param {Float} value New value to set.
	 * @alias Titanium_UI_Switch.setOpacity
	 */
	this.setOpacity = function(value) { this.opacity = value; }
	/**
	 * property for the view right position. This position is relative to the view's parent. Can be either a float value or a dimension string ie 'auto' (default), '50%' (iPhone only).
	 * @alias Titanium_UI_Switch.right
	 * @property {Float,String}
	 */
	this.right = 0.0
	/**
	 * Get the property for the view right position. This position is relative to the view's parent. Can be either a float value or a dimension string ie 'auto' (default), '50%' (iPhone only).
	 * @alias Titanium_UI_Switch.getRight
	 * @return {Float,String}
	 */
	this.getRight = function() { return this.right; }
	/**
	 * Set the property for the view right position. This position is relative to the view's parent. Can be either a float value or a dimension string ie 'auto' (default), '50%' (iPhone only).
	 * @param {Float,String} value New value to set.
	 * @alias Titanium_UI_Switch.setRight
	 */
	this.setRight = function(value) { this.right = value; }
	/**
	 * the size of the view as a dictionary of width and height properties
	 * @alias Titanium_UI_Switch.size
	 * @property {Object}
	 */
	this.size = {}
	/**
	 * Get the the size of the view as a dictionary of width and height properties
	 * @alias Titanium_UI_Switch.getSize
	 * @return {Object}
	 */
	this.getSize = function() { return this.size; }
	/**
	 * Set the the size of the view as a dictionary of width and height properties
	 * @param {Object} value New value to set.
	 * @alias Titanium_UI_Switch.setSize
	 */
	this.setSize = function(value) { this.size = value; }
	/**
	 * One of Titanium.UI.Android.SOFT_KEYBOARD_DEFAULT_ON_FOCUS, Titanium.UI.Android.SOFT_KEYBOARD_HIDE_ON_FOCUS, or Titanium.UI.Android.SOFT_KEYBOARD_SHOW_ON_FOCUS. (Android only)
	 * @alias Titanium_UI_Switch.softKeyboardOnFocus
	 * @property {Integer}
	 */
	this.softKeyboardOnFocus = 0
	/**
	 * Get the One of Titanium.UI.Android.SOFT_KEYBOARD_DEFAULT_ON_FOCUS, Titanium.UI.Android.SOFT_KEYBOARD_HIDE_ON_FOCUS, or Titanium.UI.Android.SOFT_KEYBOARD_SHOW_ON_FOCUS. (Android only)
	 * @alias Titanium_UI_Switch.getSoftKeyboardOnFocus
	 * @return {Integer}
	 */
	this.getSoftKeyboardOnFocus = function() { return this.softKeyboardOnFocus; }
	/**
	 * Set the One of Titanium.UI.Android.SOFT_KEYBOARD_DEFAULT_ON_FOCUS, Titanium.UI.Android.SOFT_KEYBOARD_HIDE_ON_FOCUS, or Titanium.UI.Android.SOFT_KEYBOARD_SHOW_ON_FOCUS. (Android only)
	 * @param {Integer} value New value to set.
	 * @alias Titanium_UI_Switch.setSoftKeyboardOnFocus
	 */
	this.setSoftKeyboardOnFocus = function(value) { this.softKeyboardOnFocus = value; }
	/**
	 * one of Ti.UI.Android.SWITCH_STYLE_CHECKBOX or Ti.UI.Android.SWITCH_STYLE_TOGGLEBUTTON (default). (Android only)
	 * @alias Titanium_UI_Switch.style
	 * @property {Integer}
	 */
	this.style = 0
	/**
	 * Get the one of Ti.UI.Android.SWITCH_STYLE_CHECKBOX or Ti.UI.Android.SWITCH_STYLE_TOGGLEBUTTON (default). (Android only)
	 * @alias Titanium_UI_Switch.getStyle
	 * @return {Integer}
	 */
	this.getStyle = function() { return this.style; }
	/**
	 * Set the one of Ti.UI.Android.SWITCH_STYLE_CHECKBOX or Ti.UI.Android.SWITCH_STYLE_TOGGLEBUTTON (default). (Android only)
	 * @param {Integer} value New value to set.
	 * @alias Titanium_UI_Switch.setStyle
	 */
	this.setStyle = function(value) { this.style = value; }
	/**
	 * text to display with checkbox. Used if style is Ti.UI.Android.SWITCH_STYLE_CHECKBOX (Android only)
	 * @alias Titanium_UI_Switch.title
	 * @property {String}
	 */
	this.title = ''
	/**
	 * Get the text to display with checkbox. Used if style is Ti.UI.Android.SWITCH_STYLE_CHECKBOX (Android only)
	 * @alias Titanium_UI_Switch.getTitle
	 * @return {String}
	 */
	this.getTitle = function() { return this.title; }
	/**
	 * Set the text to display with checkbox. Used if style is Ti.UI.Android.SWITCH_STYLE_CHECKBOX (Android only)
	 * @param {String} value New value to set.
	 * @alias Titanium_UI_Switch.setTitle
	 */
	this.setTitle = function(value) { this.title = value; }
	/**
	 * text to display when value is false. used if style is Ti.UI.Android.SWITCH_STYLE_TOGGLEBUTTON (Android only)
	 * @alias Titanium_UI_Switch.titleOff
	 * @property {String}
	 */
	this.titleOff = ''
	/**
	 * Get the text to display when value is false. used if style is Ti.UI.Android.SWITCH_STYLE_TOGGLEBUTTON (Android only)
	 * @alias Titanium_UI_Switch.getTitleOff
	 * @return {String}
	 */
	this.getTitleOff = function() { return this.titleOff; }
	/**
	 * Set the text to display when value is false. used if style is Ti.UI.Android.SWITCH_STYLE_TOGGLEBUTTON (Android only)
	 * @param {String} value New value to set.
	 * @alias Titanium_UI_Switch.setTitleOff
	 */
	this.setTitleOff = function(value) { this.titleOff = value; }
	/**
	 * text to display when value is true. used if style is Ti.UI.Android.SWITCH_STYLE_TOGGLEBUTTON (Android only)
	 * @alias Titanium_UI_Switch.titleOn
	 * @property {String}
	 */
	this.titleOn = ''
	/**
	 * Get the text to display when value is true. used if style is Ti.UI.Android.SWITCH_STYLE_TOGGLEBUTTON (Android only)
	 * @alias Titanium_UI_Switch.getTitleOn
	 * @return {String}
	 */
	this.getTitleOn = function() { return this.titleOn; }
	/**
	 * Set the text to display when value is true. used if style is Ti.UI.Android.SWITCH_STYLE_TOGGLEBUTTON (Android only)
	 * @param {String} value New value to set.
	 * @alias Titanium_UI_Switch.setTitleOn
	 */
	this.setTitleOn = function(value) { this.titleOn = value; }
	/**
	 * property for the view top position. This position is relative to the view's parent. Can be either a float value or a dimension string ie 'auto' (default), '50%' (iPhone only).
	 * @alias Titanium_UI_Switch.top
	 * @property {Float,String}
	 */
	this.top = 0.0
	/**
	 * Get the property for the view top position. This position is relative to the view's parent. Can be either a float value or a dimension string ie 'auto' (default), '50%' (iPhone only).
	 * @alias Titanium_UI_Switch.getTop
	 * @return {Float,String}
	 */
	this.getTop = function() { return this.top; }
	/**
	 * Set the property for the view top position. This position is relative to the view's parent. Can be either a float value or a dimension string ie 'auto' (default), '50%' (iPhone only).
	 * @param {Float,String} value New value to set.
	 * @alias Titanium_UI_Switch.setTop
	 */
	this.setTop = function(value) { this.top = value; }
	/**
	 * a boolean indicating if the view should receive touch events (true, default) or forward them to peers (false)
	 * @alias Titanium_UI_Switch.touchEnabled
	 * @property {Boolean}
	 */
	this.touchEnabled = false
	/**
	 * Get the a boolean indicating if the view should receive touch events (true, default) or forward them to peers (false)
	 * @alias Titanium_UI_Switch.getTouchEnabled
	 * @return {Boolean}
	 */
	this.getTouchEnabled = function() { return this.touchEnabled; }
	/**
	 * Set the a boolean indicating if the view should receive touch events (true, default) or forward them to peers (false)
	 * @param {Boolean} value New value to set.
	 * @alias Titanium_UI_Switch.setTouchEnabled
	 */
	this.setTouchEnabled = function(value) { this.touchEnabled = value; }
	/**
	 * the transformation matrix to apply to the view
	 * @alias Titanium_UI_Switch.transform
	 * @property {Object}
	 */
	this.transform = {}
	/**
	 * Get the the transformation matrix to apply to the view
	 * @alias Titanium_UI_Switch.getTransform
	 * @return {Object}
	 */
	this.getTransform = function() { return this.transform; }
	/**
	 * Set the the transformation matrix to apply to the view
	 * @param {Object} value New value to set.
	 * @alias Titanium_UI_Switch.setTransform
	 */
	this.setTransform = function(value) { this.transform = value; }
	/**
	 * boolean value of the switch where true is the switch is on and false the switch if off
	 * @alias Titanium_UI_Switch.value
	 * @property {Boolean}
	 */
	this.value = false
	/**
	 * Get the boolean value of the switch where true is the switch is on and false the switch if off
	 * @alias Titanium_UI_Switch.getValue
	 * @return {Boolean}
	 */
	this.getValue = function() { return this.value; }
	/**
	 * Set the boolean value of the switch where true is the switch is on and false the switch if off
	 * @param {Boolean} value New value to set.
	 * @alias Titanium_UI_Switch.setValue
	 */
	this.setValue = function(value) { this.value = value; }
	/**
	 * a boolean of the visibility of the view
	 * @alias Titanium_UI_Switch.visible
	 * @property {Boolean}
	 */
	this.visible = false
	/**
	 * Get the a boolean of the visibility of the view
	 * @alias Titanium_UI_Switch.getVisible
	 * @return {Boolean}
	 */
	this.getVisible = function() { return this.visible; }
	/**
	 * Set the a boolean of the visibility of the view
	 * @param {Boolean} value New value to set.
	 * @alias Titanium_UI_Switch.setVisible
	 */
	this.setVisible = function(value) { this.visible = value; }
	/**
	 * property for the view width. Can be either a float value or a dimension string ie 'auto' (default), '50%' (iPhone only).
	 * @alias Titanium_UI_Switch.width
	 * @property {Float,String}
	 */
	this.width = 0.0
	/**
	 * Get the property for the view width. Can be either a float value or a dimension string ie 'auto' (default), '50%' (iPhone only).
	 * @alias Titanium_UI_Switch.getWidth
	 * @return {Float,String}
	 */
	this.getWidth = function() { return this.width; }
	/**
	 * Set the property for the view width. Can be either a float value or a dimension string ie 'auto' (default), '50%' (iPhone only).
	 * @param {Float,String} value New value to set.
	 * @alias Titanium_UI_Switch.setWidth
	 */
	this.setWidth = function(value) { this.width = value; }
	/**
	 * the z index position relative to other sibling views
	 * @alias Titanium_UI_Switch.zIndex
	 * @property {Integer}
	 */
	this.zIndex = 0
	/**
	 * Get the the z index position relative to other sibling views
	 * @alias Titanium_UI_Switch.getZIndex
	 * @return {Integer}
	 */
	this.getZIndex = function() { return this.zIndex; }
	/**
	 * Set the the z index position relative to other sibling views
	 * @param {Integer} value New value to set.
	 * @alias Titanium_UI_Switch.setZIndex
	 */
	this.setZIndex = function(value) { this.zIndex = value; }
	/**
	 * add a child to the view hierarchy
	 * @param {Object} view the view to add to this views hiearchy
	 * @alias Titanium_UI_Switch.add
	 */
	this.add = function add(view) { }
	/**
	 * add an event listener for the instance to receive view triggered events
	 * @param {String} name name of the event
	 * @param {Function} callback callback function to invoke when the event is fired
	 * @alias Titanium_UI_Switch.addEventListener
	 */
	this.addEventListener = function addEventListener(name,callback) { }
	/**
	 * animate the view
	 * @param {Object} obj either a dictionary of animation properties or an Animation object
	 * @param {Function} callback function to be invoked upon completion of the animation
	 * @alias Titanium_UI_Switch.animate
	 */
	this.animate = function animate(obj,callback) { }
	/**
	 * fire a synthesized event to the views listener
	 * @param {String} name name of the event
	 * @param {Object} event event object
	 * @alias Titanium_UI_Switch.fireEvent
	 */
	this.fireEvent = function fireEvent(name,event) { }
	/**
	 * hide the view
	 * @alias Titanium_UI_Switch.hide
	 */
	this.hide = function hide() { }
	/**
	 * remove a previously add view from the view hiearchy
	 * @param {Object} view the view to remove from this views hiearchy
	 * @alias Titanium_UI_Switch.remove
	 */
	this.remove = function remove(view) { }
	/**
	 * remove a previously added event listener
	 * @param {String} name name of the event
	 * @param {Function} callback callback function passed in addEventListener
	 * @alias Titanium_UI_Switch.removeEventListener
	 */
	this.removeEventListener = function removeEventListener(name,callback) { }
	/**
	 * make the view visible
	 * @alias Titanium_UI_Switch.show
	 */
	this.show = function show() { }
	/**
	 * return a Blob image of the rendered view
	 * @param {Function} f function to be invoked upon completion. if non-null, this method will be performed asynchronously. if null, it will be performed immediately
	 * @alias Titanium_UI_Switch.toImage
	 * @return {Object}
	 */
	this.toImage = function toImage(f) { return {}; }
};

/**
 * A TabGroup Tab instance.  Each Tab instance maintains a stack of tab windows. Only one window within in the Tab can be visible at a time.  When a window is closed, either by the user or by code, the window is removed from the stack, make the previous window visible. The root tab window cannot be removed. The Tab Group is created by the method Titanium.UI.createTab.
 * @since 0.8
 */
function Titanium_UI_Tab() {
	/**
	 * a dictionary with properties x and y to indicate the anchor point value. anchor specifies the position by which animation should occur. center is 0.5, 0.5
	 * @alias Titanium_UI_Tab.anchorPoint
	 * @property {Object}
	 */
	this.anchorPoint = {}
	/**
	 * Get the a dictionary with properties x and y to indicate the anchor point value. anchor specifies the position by which animation should occur. center is 0.5, 0.5
	 * @alias Titanium_UI_Tab.getAnchorPoint
	 * @return {Object}
	 */
	this.getAnchorPoint = function() { return this.anchorPoint; }
	/**
	 * Set the a dictionary with properties x and y to indicate the anchor point value. anchor specifies the position by which animation should occur. center is 0.5, 0.5
	 * @param {Object} value New value to set.
	 * @alias Titanium_UI_Tab.setAnchorPoint
	 */
	this.setAnchorPoint = function(value) { this.anchorPoint = value; }
	/**
	 * read-only object with x and y properties of where the view is during animation
	 * @alias Titanium_UI_Tab.animatedCenterPoint
	 * @property {Object}
	 */
	this.animatedCenterPoint = {}
	/**
	 * Get the read-only object with x and y properties of where the view is during animation
	 * @alias Titanium_UI_Tab.getAnimatedCenterPoint
	 * @return {Object}
	 */
	this.getAnimatedCenterPoint = function() { return this.animatedCenterPoint; }
	/**
	 * Set the read-only object with x and y properties of where the view is during animation
	 * @param {Object} value New value to set.
	 * @alias Titanium_UI_Tab.setAnimatedCenterPoint
	 */
	this.setAnimatedCenterPoint = function(value) { this.animatedCenterPoint = value; }
	/**
	 * the background color of the view
	 * @alias Titanium_UI_Tab.backgroundColor
	 * @property {String}
	 */
	this.backgroundColor = ''
	/**
	 * Get the the background color of the view
	 * @alias Titanium_UI_Tab.getBackgroundColor
	 * @return {String}
	 */
	this.getBackgroundColor = function() { return this.backgroundColor; }
	/**
	 * Set the the background color of the view
	 * @param {String} value New value to set.
	 * @alias Titanium_UI_Tab.setBackgroundColor
	 */
	this.setBackgroundColor = function(value) { this.backgroundColor = value; }
	/**
	 * the disabled background color of the view. (Android)
	 * @alias Titanium_UI_Tab.backgroundDisabledColor
	 * @property {String}
	 */
	this.backgroundDisabledColor = ''
	/**
	 * Get the the disabled background color of the view. (Android)
	 * @alias Titanium_UI_Tab.getBackgroundDisabledColor
	 * @return {String}
	 */
	this.getBackgroundDisabledColor = function() { return this.backgroundDisabledColor; }
	/**
	 * Set the the disabled background color of the view. (Android)
	 * @param {String} value New value to set.
	 * @alias Titanium_UI_Tab.setBackgroundDisabledColor
	 */
	this.setBackgroundDisabledColor = function(value) { this.backgroundDisabledColor = value; }
	/**
	 * the disabled background image url of the view. (Android)
	 * @alias Titanium_UI_Tab.backgroundDisabledImage
	 * @property {String}
	 */
	this.backgroundDisabledImage = ''
	/**
	 * Get the the disabled background image url of the view. (Android)
	 * @alias Titanium_UI_Tab.getBackgroundDisabledImage
	 * @return {String}
	 */
	this.getBackgroundDisabledImage = function() { return this.backgroundDisabledImage; }
	/**
	 * Set the the disabled background image url of the view. (Android)
	 * @param {String} value New value to set.
	 * @alias Titanium_UI_Tab.setBackgroundDisabledImage
	 */
	this.setBackgroundDisabledImage = function(value) { this.backgroundDisabledImage = value; }
	/**
	 * the focused background color of the view. focusable must be true for normal views. (Android)
	 * @alias Titanium_UI_Tab.backgroundFocusedColor
	 * @property {String}
	 */
	this.backgroundFocusedColor = ''
	/**
	 * Get the the focused background color of the view. focusable must be true for normal views. (Android)
	 * @alias Titanium_UI_Tab.getBackgroundFocusedColor
	 * @return {String}
	 */
	this.getBackgroundFocusedColor = function() { return this.backgroundFocusedColor; }
	/**
	 * Set the the focused background color of the view. focusable must be true for normal views. (Android)
	 * @param {String} value New value to set.
	 * @alias Titanium_UI_Tab.setBackgroundFocusedColor
	 */
	this.setBackgroundFocusedColor = function(value) { this.backgroundFocusedColor = value; }
	/**
	 * the focused background image url of the view. focusable must be true for normal views. (Android)
	 * @alias Titanium_UI_Tab.backgroundFocusedImage
	 * @property {String}
	 */
	this.backgroundFocusedImage = ''
	/**
	 * Get the the focused background image url of the view. focusable must be true for normal views. (Android)
	 * @alias Titanium_UI_Tab.getBackgroundFocusedImage
	 * @return {String}
	 */
	this.getBackgroundFocusedImage = function() { return this.backgroundFocusedImage; }
	/**
	 * Set the the focused background image url of the view. focusable must be true for normal views. (Android)
	 * @param {String} value New value to set.
	 * @alias Titanium_UI_Tab.setBackgroundFocusedImage
	 */
	this.setBackgroundFocusedImage = function(value) { this.backgroundFocusedImage = value; }
	/**
	 * a background gradient for the view with the properties: type,startPoint,endPoint,startRadius,endRadius,backfillStart,backfillEnd,colors.
	 * @alias Titanium_UI_Tab.backgroundGradient
	 * @property {Object}
	 */
	this.backgroundGradient = {}
	/**
	 * Get the a background gradient for the view with the properties: type,startPoint,endPoint,startRadius,endRadius,backfillStart,backfillEnd,colors.
	 * @alias Titanium_UI_Tab.getBackgroundGradient
	 * @return {Object}
	 */
	this.getBackgroundGradient = function() { return this.backgroundGradient; }
	/**
	 * Set the a background gradient for the view with the properties: type,startPoint,endPoint,startRadius,endRadius,backfillStart,backfillEnd,colors.
	 * @param {Object} value New value to set.
	 * @alias Titanium_UI_Tab.setBackgroundGradient
	 */
	this.setBackgroundGradient = function(value) { this.backgroundGradient = value; }
	/**
	 * the background image url of the view
	 * @alias Titanium_UI_Tab.backgroundImage
	 * @property {String}
	 */
	this.backgroundImage = ''
	/**
	 * Get the the background image url of the view
	 * @alias Titanium_UI_Tab.getBackgroundImage
	 * @return {String}
	 */
	this.getBackgroundImage = function() { return this.backgroundImage; }
	/**
	 * Set the the background image url of the view
	 * @param {String} value New value to set.
	 * @alias Titanium_UI_Tab.setBackgroundImage
	 */
	this.setBackgroundImage = function(value) { this.backgroundImage = value; }
	/**
	 * End caps specify the portion of an image that should not be resized when an image is stretched. This technique is used to implement buttons and other resizable image-based interface elements. When a button with end caps is resized, the resizing occurs only in the middle of the button, in the region between the end caps. The end caps themselves keep their original size and appearance. This property specifies the size of the left end cap. The middle (stretchable) portion is assumed to be 1 pixel wide. The right end cap is therefore computed by adding the size of the left end cap and the middle portion together and then subtracting that value from the width of the image
	 * @alias Titanium_UI_Tab.backgroundLeftCap
	 * @property {Float}
	 */
	this.backgroundLeftCap = 0.0
	/**
	 * Get the End caps specify the portion of an image that should not be resized when an image is stretched. This technique is used to implement buttons and other resizable image-based interface elements. When a button with end caps is resized, the resizing occurs only in the middle of the button, in the region between the end caps. The end caps themselves keep their original size and appearance. This property specifies the size of the left end cap. The middle (stretchable) portion is assumed to be 1 pixel wide. The right end cap is therefore computed by adding the size of the left end cap and the middle portion together and then subtracting that value from the width of the image
	 * @alias Titanium_UI_Tab.getBackgroundLeftCap
	 * @return {Float}
	 */
	this.getBackgroundLeftCap = function() { return this.backgroundLeftCap; }
	/**
	 * Set the End caps specify the portion of an image that should not be resized when an image is stretched. This technique is used to implement buttons and other resizable image-based interface elements. When a button with end caps is resized, the resizing occurs only in the middle of the button, in the region between the end caps. The end caps themselves keep their original size and appearance. This property specifies the size of the left end cap. The middle (stretchable) portion is assumed to be 1 pixel wide. The right end cap is therefore computed by adding the size of the left end cap and the middle portion together and then subtracting that value from the width of the image
	 * @param {Float} value New value to set.
	 * @alias Titanium_UI_Tab.setBackgroundLeftCap
	 */
	this.setBackgroundLeftCap = function(value) { this.backgroundLeftCap = value; }
	/**
	 * the selected background color of the view. focusable must be true for normal views. (Android)
	 * @alias Titanium_UI_Tab.backgroundSelectedColor
	 * @property {String}
	 */
	this.backgroundSelectedColor = ''
	/**
	 * Get the the selected background color of the view. focusable must be true for normal views. (Android)
	 * @alias Titanium_UI_Tab.getBackgroundSelectedColor
	 * @return {String}
	 */
	this.getBackgroundSelectedColor = function() { return this.backgroundSelectedColor; }
	/**
	 * Set the the selected background color of the view. focusable must be true for normal views. (Android)
	 * @param {String} value New value to set.
	 * @alias Titanium_UI_Tab.setBackgroundSelectedColor
	 */
	this.setBackgroundSelectedColor = function(value) { this.backgroundSelectedColor = value; }
	/**
	 * the selected background image url of the view. focusable must be true for normal views. (Android)
	 * @alias Titanium_UI_Tab.backgroundSelectedImage
	 * @property {String}
	 */
	this.backgroundSelectedImage = ''
	/**
	 * Get the the selected background image url of the view. focusable must be true for normal views. (Android)
	 * @alias Titanium_UI_Tab.getBackgroundSelectedImage
	 * @return {String}
	 */
	this.getBackgroundSelectedImage = function() { return this.backgroundSelectedImage; }
	/**
	 * Set the the selected background image url of the view. focusable must be true for normal views. (Android)
	 * @param {String} value New value to set.
	 * @alias Titanium_UI_Tab.setBackgroundSelectedImage
	 */
	this.setBackgroundSelectedImage = function(value) { this.backgroundSelectedImage = value; }
	/**
	 * End caps specify the portion of an image that should not be resized when an image is stretched. This technique is used to implement buttons and other resizable image-based interface elements. When a button with end caps is resized, the resizing occurs only in the middle of the button, in the region between the end caps. The end caps themselves keep their original size and appearance. This property specifies the size of the top end cap. The middle (stretchable) portion is assumed to be 1 pixel wide. The bottom end cap is therefore computed by adding the size of the top end cap and the middle portion together and then subtracting that value from the height of the image
	 * @alias Titanium_UI_Tab.backgroundTopCap
	 * @property {Float}
	 */
	this.backgroundTopCap = 0.0
	/**
	 * Get the End caps specify the portion of an image that should not be resized when an image is stretched. This technique is used to implement buttons and other resizable image-based interface elements. When a button with end caps is resized, the resizing occurs only in the middle of the button, in the region between the end caps. The end caps themselves keep their original size and appearance. This property specifies the size of the top end cap. The middle (stretchable) portion is assumed to be 1 pixel wide. The bottom end cap is therefore computed by adding the size of the top end cap and the middle portion together and then subtracting that value from the height of the image
	 * @alias Titanium_UI_Tab.getBackgroundTopCap
	 * @return {Float}
	 */
	this.getBackgroundTopCap = function() { return this.backgroundTopCap; }
	/**
	 * Set the End caps specify the portion of an image that should not be resized when an image is stretched. This technique is used to implement buttons and other resizable image-based interface elements. When a button with end caps is resized, the resizing occurs only in the middle of the button, in the region between the end caps. The end caps themselves keep their original size and appearance. This property specifies the size of the top end cap. The middle (stretchable) portion is assumed to be 1 pixel wide. The bottom end cap is therefore computed by adding the size of the top end cap and the middle portion together and then subtracting that value from the height of the image
	 * @param {Float} value New value to set.
	 * @alias Titanium_UI_Tab.setBackgroundTopCap
	 */
	this.setBackgroundTopCap = function(value) { this.backgroundTopCap = value; }
	/**
	 * the badge value for the tab group for this tab. null indicates no badge is value
	 * @alias Titanium_UI_Tab.badge
	 * @property {String}
	 */
	this.badge = ''
	/**
	 * Get the the badge value for the tab group for this tab. null indicates no badge is value
	 * @alias Titanium_UI_Tab.getBadge
	 * @return {String}
	 */
	this.getBadge = function() { return this.badge; }
	/**
	 * Set the the badge value for the tab group for this tab. null indicates no badge is value
	 * @param {String} value New value to set.
	 * @alias Titanium_UI_Tab.setBadge
	 */
	this.setBadge = function(value) { this.badge = value; }
	/**
	 * the border color of the view
	 * @alias Titanium_UI_Tab.borderColor
	 * @property {String}
	 */
	this.borderColor = ''
	/**
	 * Get the the border color of the view
	 * @alias Titanium_UI_Tab.getBorderColor
	 * @return {String}
	 */
	this.getBorderColor = function() { return this.borderColor; }
	/**
	 * Set the the border color of the view
	 * @param {String} value New value to set.
	 * @alias Titanium_UI_Tab.setBorderColor
	 */
	this.setBorderColor = function(value) { this.borderColor = value; }
	/**
	 * the border radius of the view
	 * @alias Titanium_UI_Tab.borderRadius
	 * @property {Float}
	 */
	this.borderRadius = 0.0
	/**
	 * Get the the border radius of the view
	 * @alias Titanium_UI_Tab.getBorderRadius
	 * @return {Float}
	 */
	this.getBorderRadius = function() { return this.borderRadius; }
	/**
	 * Set the the border radius of the view
	 * @param {Float} value New value to set.
	 * @alias Titanium_UI_Tab.setBorderRadius
	 */
	this.setBorderRadius = function(value) { this.borderRadius = value; }
	/**
	 * the border width of the view
	 * @alias Titanium_UI_Tab.borderWidth
	 * @property {Float}
	 */
	this.borderWidth = 0.0
	/**
	 * Get the the border width of the view
	 * @alias Titanium_UI_Tab.getBorderWidth
	 * @return {Float}
	 */
	this.getBorderWidth = function() { return this.borderWidth; }
	/**
	 * Set the the border width of the view
	 * @param {Float} value New value to set.
	 * @alias Titanium_UI_Tab.setBorderWidth
	 */
	this.setBorderWidth = function(value) { this.borderWidth = value; }
	/**
	 * property for the view bottom position. This position is relative to the view's parent. Can be either a float value or a dimension string ie 'auto' (default), '50%' (iPhone only).
	 * @alias Titanium_UI_Tab.bottom
	 * @property {Float,String}
	 */
	this.bottom = 0.0
	/**
	 * Get the property for the view bottom position. This position is relative to the view's parent. Can be either a float value or a dimension string ie 'auto' (default), '50%' (iPhone only).
	 * @alias Titanium_UI_Tab.getBottom
	 * @return {Float,String}
	 */
	this.getBottom = function() { return this.bottom; }
	/**
	 * Set the property for the view bottom position. This position is relative to the view's parent. Can be either a float value or a dimension string ie 'auto' (default), '50%' (iPhone only).
	 * @param {Float,String} value New value to set.
	 * @alias Titanium_UI_Tab.setBottom
	 */
	this.setBottom = function(value) { this.bottom = value; }
	/**
	 * a dictionary with properties x and y to indicate the center of the views position relative to the parent view
	 * @alias Titanium_UI_Tab.center
	 * @property {Object}
	 */
	this.center = {}
	/**
	 * Get the a dictionary with properties x and y to indicate the center of the views position relative to the parent view
	 * @alias Titanium_UI_Tab.getCenter
	 * @return {Object}
	 */
	this.getCenter = function() { return this.center; }
	/**
	 * Set the a dictionary with properties x and y to indicate the center of the views position relative to the parent view
	 * @param {Object} value New value to set.
	 * @alias Titanium_UI_Tab.setCenter
	 */
	this.setCenter = function(value) { this.center = value; }
	/**
	 * Set true if you want a view to be focusable when navigating with the trackball or D-Pad. Default: false. (Android Only)
	 * @alias Titanium_UI_Tab.focusable
	 * @property {Boolean}
	 */
	this.focusable = false
	/**
	 * Get the Set true if you want a view to be focusable when navigating with the trackball or D-Pad. Default: false. (Android Only)
	 * @alias Titanium_UI_Tab.getFocusable
	 * @return {Boolean}
	 */
	this.getFocusable = function() { return this.focusable; }
	/**
	 * Set the Set true if you want a view to be focusable when navigating with the trackball or D-Pad. Default: false. (Android Only)
	 * @param {Boolean} value New value to set.
	 * @alias Titanium_UI_Tab.setFocusable
	 */
	this.setFocusable = function(value) { this.focusable = value; }
	/**
	 * the font family
	 * @alias Titanium_UI_Tab.font-family
	 * @property {String}
	 */
	this.font-family = ''
	/**
	 * Get the the font family
	 * @alias Titanium_UI_Tab.getFont-family
	 * @return {String}
	 */
	this.getFont-family = function() { return this.font-family; }
	/**
	 * Set the the font family
	 * @param {String} value New value to set.
	 * @alias Titanium_UI_Tab.setFont-family
	 */
	this.setFont-family = function(value) { this.font-family = value; }
	/**
	 * the font size
	 * @alias Titanium_UI_Tab.font-size
	 * @property {String}
	 */
	this.font-size = ''
	/**
	 * Get the the font size
	 * @alias Titanium_UI_Tab.getFont-size
	 * @return {String}
	 */
	this.getFont-size = function() { return this.font-size; }
	/**
	 * Set the the font size
	 * @param {String} value New value to set.
	 * @alias Titanium_UI_Tab.setFont-size
	 */
	this.setFont-size = function(value) { this.font-size = value; }
	/**
	 * the font style, either normal or italics
	 * @alias Titanium_UI_Tab.font-style
	 * @property {String}
	 */
	this.font-style = ''
	/**
	 * Get the the font style, either normal or italics
	 * @alias Titanium_UI_Tab.getFont-style
	 * @return {String}
	 */
	this.getFont-style = function() { return this.font-style; }
	/**
	 * Set the the font style, either normal or italics
	 * @param {String} value New value to set.
	 * @alias Titanium_UI_Tab.setFont-style
	 */
	this.setFont-style = function(value) { this.font-style = value; }
	/**
	 * the font weight, either normal or bold
	 * @alias Titanium_UI_Tab.font-weight
	 * @property {String}
	 */
	this.font-weight = ''
	/**
	 * Get the the font weight, either normal or bold
	 * @alias Titanium_UI_Tab.getFont-weight
	 * @return {String}
	 */
	this.getFont-weight = function() { return this.font-weight; }
	/**
	 * Set the the font weight, either normal or bold
	 * @param {String} value New value to set.
	 * @alias Titanium_UI_Tab.setFont-weight
	 */
	this.setFont-weight = function(value) { this.font-weight = value; }
	/**
	 * property for the view height. Can be either a float value or a dimension string ie 'auto' (default), '50%' (iPhone only).
	 * @alias Titanium_UI_Tab.height
	 * @property {Float,String}
	 */
	this.height = 0.0
	/**
	 * Get the property for the view height. Can be either a float value or a dimension string ie 'auto' (default), '50%' (iPhone only).
	 * @alias Titanium_UI_Tab.getHeight
	 * @return {Float,String}
	 */
	this.getHeight = function() { return this.height; }
	/**
	 * Set the property for the view height. Can be either a float value or a dimension string ie 'auto' (default), '50%' (iPhone only).
	 * @param {Float,String} value New value to set.
	 * @alias Titanium_UI_Tab.setHeight
	 */
	this.setHeight = function(value) { this.height = value; }
	/**
	 * the icon url for the tab group for this tab
	 * @alias Titanium_UI_Tab.icon
	 * @property {String}
	 */
	this.icon = ''
	/**
	 * Get the the icon url for the tab group for this tab
	 * @alias Titanium_UI_Tab.getIcon
	 * @return {String}
	 */
	this.getIcon = function() { return this.icon; }
	/**
	 * Set the the icon url for the tab group for this tab
	 * @param {String} value New value to set.
	 * @alias Titanium_UI_Tab.setIcon
	 */
	this.setIcon = function(value) { this.icon = value; }
	/**
	 * property for the view left position. This position is relative to the view's parent. Can be either a float value or a dimension string ie 'auto' (default), '50%' (iPhone only).
	 * @alias Titanium_UI_Tab.left
	 * @property {Float,String}
	 */
	this.left = 0.0
	/**
	 * Get the property for the view left position. This position is relative to the view's parent. Can be either a float value or a dimension string ie 'auto' (default), '50%' (iPhone only).
	 * @alias Titanium_UI_Tab.getLeft
	 * @return {Float,String}
	 */
	this.getLeft = function() { return this.left; }
	/**
	 * Set the property for the view left position. This position is relative to the view's parent. Can be either a float value or a dimension string ie 'auto' (default), '50%' (iPhone only).
	 * @param {Float,String} value New value to set.
	 * @alias Titanium_UI_Tab.setLeft
	 */
	this.setLeft = function(value) { this.left = value; }
	/**
	 * the opacity from 0.0-1.0
	 * @alias Titanium_UI_Tab.opacity
	 * @property {Float}
	 */
	this.opacity = 0.0
	/**
	 * Get the the opacity from 0.0-1.0
	 * @alias Titanium_UI_Tab.getOpacity
	 * @return {Float}
	 */
	this.getOpacity = function() { return this.opacity; }
	/**
	 * Set the the opacity from 0.0-1.0
	 * @param {Float} value New value to set.
	 * @alias Titanium_UI_Tab.setOpacity
	 */
	this.setOpacity = function(value) { this.opacity = value; }
	/**
	 * property for the view right position. This position is relative to the view's parent. Can be either a float value or a dimension string ie 'auto' (default), '50%' (iPhone only).
	 * @alias Titanium_UI_Tab.right
	 * @property {Float,String}
	 */
	this.right = 0.0
	/**
	 * Get the property for the view right position. This position is relative to the view's parent. Can be either a float value or a dimension string ie 'auto' (default), '50%' (iPhone only).
	 * @alias Titanium_UI_Tab.getRight
	 * @return {Float,String}
	 */
	this.getRight = function() { return this.right; }
	/**
	 * Set the property for the view right position. This position is relative to the view's parent. Can be either a float value or a dimension string ie 'auto' (default), '50%' (iPhone only).
	 * @param {Float,String} value New value to set.
	 * @alias Titanium_UI_Tab.setRight
	 */
	this.setRight = function(value) { this.right = value; }
	/**
	 * the size of the view as a dictionary of width and height properties
	 * @alias Titanium_UI_Tab.size
	 * @property {Object}
	 */
	this.size = {}
	/**
	 * Get the the size of the view as a dictionary of width and height properties
	 * @alias Titanium_UI_Tab.getSize
	 * @return {Object}
	 */
	this.getSize = function() { return this.size; }
	/**
	 * Set the the size of the view as a dictionary of width and height properties
	 * @param {Object} value New value to set.
	 * @alias Titanium_UI_Tab.setSize
	 */
	this.setSize = function(value) { this.size = value; }
	/**
	 * One of Titanium.UI.Android.SOFT_KEYBOARD_DEFAULT_ON_FOCUS, Titanium.UI.Android.SOFT_KEYBOARD_HIDE_ON_FOCUS, or Titanium.UI.Android.SOFT_KEYBOARD_SHOW_ON_FOCUS. (Android only)
	 * @alias Titanium_UI_Tab.softKeyboardOnFocus
	 * @property {Integer}
	 */
	this.softKeyboardOnFocus = 0
	/**
	 * Get the One of Titanium.UI.Android.SOFT_KEYBOARD_DEFAULT_ON_FOCUS, Titanium.UI.Android.SOFT_KEYBOARD_HIDE_ON_FOCUS, or Titanium.UI.Android.SOFT_KEYBOARD_SHOW_ON_FOCUS. (Android only)
	 * @alias Titanium_UI_Tab.getSoftKeyboardOnFocus
	 * @return {Integer}
	 */
	this.getSoftKeyboardOnFocus = function() { return this.softKeyboardOnFocus; }
	/**
	 * Set the One of Titanium.UI.Android.SOFT_KEYBOARD_DEFAULT_ON_FOCUS, Titanium.UI.Android.SOFT_KEYBOARD_HIDE_ON_FOCUS, or Titanium.UI.Android.SOFT_KEYBOARD_SHOW_ON_FOCUS. (Android only)
	 * @param {Integer} value New value to set.
	 * @alias Titanium_UI_Tab.setSoftKeyboardOnFocus
	 */
	this.setSoftKeyboardOnFocus = function(value) { this.softKeyboardOnFocus = value; }
	/**
	 * the title for the tab group for this tab
	 * @alias Titanium_UI_Tab.title
	 * @property {String}
	 */
	this.title = ''
	/**
	 * Get the the title for the tab group for this tab
	 * @alias Titanium_UI_Tab.getTitle
	 * @return {String}
	 */
	this.getTitle = function() { return this.title; }
	/**
	 * Set the the title for the tab group for this tab
	 * @param {String} value New value to set.
	 * @alias Titanium_UI_Tab.setTitle
	 */
	this.setTitle = function(value) { this.title = value; }
	/**
	 * property for the view top position. This position is relative to the view's parent. Can be either a float value or a dimension string ie 'auto' (default), '50%' (iPhone only).
	 * @alias Titanium_UI_Tab.top
	 * @property {Float,String}
	 */
	this.top = 0.0
	/**
	 * Get the property for the view top position. This position is relative to the view's parent. Can be either a float value or a dimension string ie 'auto' (default), '50%' (iPhone only).
	 * @alias Titanium_UI_Tab.getTop
	 * @return {Float,String}
	 */
	this.getTop = function() { return this.top; }
	/**
	 * Set the property for the view top position. This position is relative to the view's parent. Can be either a float value or a dimension string ie 'auto' (default), '50%' (iPhone only).
	 * @param {Float,String} value New value to set.
	 * @alias Titanium_UI_Tab.setTop
	 */
	this.setTop = function(value) { this.top = value; }
	/**
	 * a boolean indicating if the view should receive touch events (true, default) or forward them to peers (false)
	 * @alias Titanium_UI_Tab.touchEnabled
	 * @property {Boolean}
	 */
	this.touchEnabled = false
	/**
	 * Get the a boolean indicating if the view should receive touch events (true, default) or forward them to peers (false)
	 * @alias Titanium_UI_Tab.getTouchEnabled
	 * @return {Boolean}
	 */
	this.getTouchEnabled = function() { return this.touchEnabled; }
	/**
	 * Set the a boolean indicating if the view should receive touch events (true, default) or forward them to peers (false)
	 * @param {Boolean} value New value to set.
	 * @alias Titanium_UI_Tab.setTouchEnabled
	 */
	this.setTouchEnabled = function(value) { this.touchEnabled = value; }
	/**
	 * the transformation matrix to apply to the view
	 * @alias Titanium_UI_Tab.transform
	 * @property {Object}
	 */
	this.transform = {}
	/**
	 * Get the the transformation matrix to apply to the view
	 * @alias Titanium_UI_Tab.getTransform
	 * @return {Object}
	 */
	this.getTransform = function() { return this.transform; }
	/**
	 * Set the the transformation matrix to apply to the view
	 * @param {Object} value New value to set.
	 * @alias Titanium_UI_Tab.setTransform
	 */
	this.setTransform = function(value) { this.transform = value; }
	/**
	 * a boolean of the visibility of the view
	 * @alias Titanium_UI_Tab.visible
	 * @property {Boolean}
	 */
	this.visible = false
	/**
	 * Get the a boolean of the visibility of the view
	 * @alias Titanium_UI_Tab.getVisible
	 * @return {Boolean}
	 */
	this.getVisible = function() { return this.visible; }
	/**
	 * Set the a boolean of the visibility of the view
	 * @param {Boolean} value New value to set.
	 * @alias Titanium_UI_Tab.setVisible
	 */
	this.setVisible = function(value) { this.visible = value; }
	/**
	 * property for the view width. Can be either a float value or a dimension string ie 'auto' (default), '50%' (iPhone only).
	 * @alias Titanium_UI_Tab.width
	 * @property {Float,String}
	 */
	this.width = 0.0
	/**
	 * Get the property for the view width. Can be either a float value or a dimension string ie 'auto' (default), '50%' (iPhone only).
	 * @alias Titanium_UI_Tab.getWidth
	 * @return {Float,String}
	 */
	this.getWidth = function() { return this.width; }
	/**
	 * Set the property for the view width. Can be either a float value or a dimension string ie 'auto' (default), '50%' (iPhone only).
	 * @param {Float,String} value New value to set.
	 * @alias Titanium_UI_Tab.setWidth
	 */
	this.setWidth = function(value) { this.width = value; }
	/**
	 * the root level tab window.  all tabs must have at least one root level tab window.
	 * @alias Titanium_UI_Tab.window
	 * @property {Object}
	 */
	this.window = {}
	/**
	 * Get the the root level tab window.  all tabs must have at least one root level tab window.
	 * @alias Titanium_UI_Tab.getWindow
	 * @return {Object}
	 */
	this.getWindow = function() { return this.window; }
	/**
	 * Set the the root level tab window.  all tabs must have at least one root level tab window.
	 * @param {Object} value New value to set.
	 * @alias Titanium_UI_Tab.setWindow
	 */
	this.setWindow = function(value) { this.window = value; }
	/**
	 * the z index position relative to other sibling views
	 * @alias Titanium_UI_Tab.zIndex
	 * @property {Integer}
	 */
	this.zIndex = 0
	/**
	 * Get the the z index position relative to other sibling views
	 * @alias Titanium_UI_Tab.getZIndex
	 * @return {Integer}
	 */
	this.getZIndex = function() { return this.zIndex; }
	/**
	 * Set the the z index position relative to other sibling views
	 * @param {Integer} value New value to set.
	 * @alias Titanium_UI_Tab.setZIndex
	 */
	this.setZIndex = function(value) { this.zIndex = value; }
	/**
	 * add a child to the view hierarchy
	 * @param {Object} view the view to add to this views hiearchy
	 * @alias Titanium_UI_Tab.add
	 */
	this.add = function add(view) { }
	/**
	 * add an event listener for the instance to receive view triggered events
	 * @param {String} name name of the event
	 * @param {Function} callback callback function to invoke when the event is fired
	 * @alias Titanium_UI_Tab.addEventListener
	 */
	this.addEventListener = function addEventListener(name,callback) { }
	/**
	 * animate the view
	 * @param {Object} obj either a dictionary of animation properties or an Animation object
	 * @param {Function} callback function to be invoked upon completion of the animation
	 * @alias Titanium_UI_Tab.animate
	 */
	this.animate = function animate(obj,callback) { }
	/**
	 * fire a synthesized event to the views listener
	 * @param {String} name name of the event
	 * @param {Object} event event object
	 * @alias Titanium_UI_Tab.fireEvent
	 */
	this.fireEvent = function fireEvent(name,event) { }
	/**
	 * hide the view
	 * @alias Titanium_UI_Tab.hide
	 */
	this.hide = function hide() { }
	/**
	 * remove a previously add view from the view hiearchy
	 * @param {Object} view the view to remove from this views hiearchy
	 * @alias Titanium_UI_Tab.remove
	 */
	this.remove = function remove(view) { }
	/**
	 * remove a previously added event listener
	 * @param {String} name name of the event
	 * @param {Function} callback callback function passed in addEventListener
	 * @alias Titanium_UI_Tab.removeEventListener
	 */
	this.removeEventListener = function removeEventListener(name,callback) { }
	/**
	 * make the view visible
	 * @alias Titanium_UI_Tab.show
	 */
	this.show = function show() { }
	/**
	 * return a Blob image of the rendered view
	 * @param {Function} f function to be invoked upon completion. if non-null, this method will be performed asynchronously. if null, it will be performed immediately
	 * @alias Titanium_UI_Tab.toImage
	 * @return {Object}
	 */
	this.toImage = function toImage(f) { return {}; }
};

/**
 * The Tab Group allows you to manage a tabbed UI of one or more windows. The Tab Group is created by the method Titanium.UI.createTabGroup.
 * @since 0.9
 */
function Titanium_UI_TabGroup() {
	/**
	 * the active tab
	 * @alias Titanium_UI_TabGroup.activeTab
	 * @property {Object}
	 */
	this.activeTab = {}
	/**
	 * Get the the active tab
	 * @alias Titanium_UI_TabGroup.getActiveTab
	 * @return {Object}
	 */
	this.getActiveTab = function() { return this.activeTab; }
	/**
	 * Set the the active tab
	 * @param {Object} value New value to set.
	 * @alias Titanium_UI_TabGroup.setActiveTab
	 */
	this.setActiveTab = function(value) { this.activeTab = value; }
	/**
	 * whether or not the user can configure the tab group via the 'More' tab's edit functionality.  iPhone/iPad only
	 * @alias Titanium_UI_TabGroup.allowUserCustomization
	 * @property {Boolean}
	 */
	this.allowUserCustomization = false
	/**
	 * Get the whether or not the user can configure the tab group via the 'More' tab's edit functionality.  iPhone/iPad only
	 * @alias Titanium_UI_TabGroup.getAllowUserCustomization
	 * @return {Boolean}
	 */
	this.getAllowUserCustomization = function() { return this.allowUserCustomization; }
	/**
	 * Set the whether or not the user can configure the tab group via the 'More' tab's edit functionality.  iPhone/iPad only
	 * @param {Boolean} value New value to set.
	 * @alias Titanium_UI_TabGroup.setAllowUserCustomization
	 */
	this.setAllowUserCustomization = function(value) { this.allowUserCustomization = value; }
	/**
	 * a dictionary with properties x and y to indicate the anchor point value. anchor specifies the position by which animation should occur. center is 0.5, 0.5
	 * @alias Titanium_UI_TabGroup.anchorPoint
	 * @property {Object}
	 */
	this.anchorPoint = {}
	/**
	 * Get the a dictionary with properties x and y to indicate the anchor point value. anchor specifies the position by which animation should occur. center is 0.5, 0.5
	 * @alias Titanium_UI_TabGroup.getAnchorPoint
	 * @return {Object}
	 */
	this.getAnchorPoint = function() { return this.anchorPoint; }
	/**
	 * Set the a dictionary with properties x and y to indicate the anchor point value. anchor specifies the position by which animation should occur. center is 0.5, 0.5
	 * @param {Object} value New value to set.
	 * @alias Titanium_UI_TabGroup.setAnchorPoint
	 */
	this.setAnchorPoint = function(value) { this.anchorPoint = value; }
	/**
	 * read-only object with x and y properties of where the view is during animation
	 * @alias Titanium_UI_TabGroup.animatedCenterPoint
	 * @property {Object}
	 */
	this.animatedCenterPoint = {}
	/**
	 * Get the read-only object with x and y properties of where the view is during animation
	 * @alias Titanium_UI_TabGroup.getAnimatedCenterPoint
	 * @return {Object}
	 */
	this.getAnimatedCenterPoint = function() { return this.animatedCenterPoint; }
	/**
	 * Set the read-only object with x and y properties of where the view is during animation
	 * @param {Object} value New value to set.
	 * @alias Titanium_UI_TabGroup.setAnimatedCenterPoint
	 */
	this.setAnimatedCenterPoint = function(value) { this.animatedCenterPoint = value; }
	/**
	 * the background color of the view
	 * @alias Titanium_UI_TabGroup.backgroundColor
	 * @property {String}
	 */
	this.backgroundColor = ''
	/**
	 * Get the the background color of the view
	 * @alias Titanium_UI_TabGroup.getBackgroundColor
	 * @return {String}
	 */
	this.getBackgroundColor = function() { return this.backgroundColor; }
	/**
	 * Set the the background color of the view
	 * @param {String} value New value to set.
	 * @alias Titanium_UI_TabGroup.setBackgroundColor
	 */
	this.setBackgroundColor = function(value) { this.backgroundColor = value; }
	/**
	 * the disabled background color of the view. (Android)
	 * @alias Titanium_UI_TabGroup.backgroundDisabledColor
	 * @property {String}
	 */
	this.backgroundDisabledColor = ''
	/**
	 * Get the the disabled background color of the view. (Android)
	 * @alias Titanium_UI_TabGroup.getBackgroundDisabledColor
	 * @return {String}
	 */
	this.getBackgroundDisabledColor = function() { return this.backgroundDisabledColor; }
	/**
	 * Set the the disabled background color of the view. (Android)
	 * @param {String} value New value to set.
	 * @alias Titanium_UI_TabGroup.setBackgroundDisabledColor
	 */
	this.setBackgroundDisabledColor = function(value) { this.backgroundDisabledColor = value; }
	/**
	 * the disabled background image url of the view. (Android)
	 * @alias Titanium_UI_TabGroup.backgroundDisabledImage
	 * @property {String}
	 */
	this.backgroundDisabledImage = ''
	/**
	 * Get the the disabled background image url of the view. (Android)
	 * @alias Titanium_UI_TabGroup.getBackgroundDisabledImage
	 * @return {String}
	 */
	this.getBackgroundDisabledImage = function() { return this.backgroundDisabledImage; }
	/**
	 * Set the the disabled background image url of the view. (Android)
	 * @param {String} value New value to set.
	 * @alias Titanium_UI_TabGroup.setBackgroundDisabledImage
	 */
	this.setBackgroundDisabledImage = function(value) { this.backgroundDisabledImage = value; }
	/**
	 * the focused background color of the view. focusable must be true for normal views. (Android)
	 * @alias Titanium_UI_TabGroup.backgroundFocusedColor
	 * @property {String}
	 */
	this.backgroundFocusedColor = ''
	/**
	 * Get the the focused background color of the view. focusable must be true for normal views. (Android)
	 * @alias Titanium_UI_TabGroup.getBackgroundFocusedColor
	 * @return {String}
	 */
	this.getBackgroundFocusedColor = function() { return this.backgroundFocusedColor; }
	/**
	 * Set the the focused background color of the view. focusable must be true for normal views. (Android)
	 * @param {String} value New value to set.
	 * @alias Titanium_UI_TabGroup.setBackgroundFocusedColor
	 */
	this.setBackgroundFocusedColor = function(value) { this.backgroundFocusedColor = value; }
	/**
	 * the focused background image url of the view. focusable must be true for normal views. (Android)
	 * @alias Titanium_UI_TabGroup.backgroundFocusedImage
	 * @property {String}
	 */
	this.backgroundFocusedImage = ''
	/**
	 * Get the the focused background image url of the view. focusable must be true for normal views. (Android)
	 * @alias Titanium_UI_TabGroup.getBackgroundFocusedImage
	 * @return {String}
	 */
	this.getBackgroundFocusedImage = function() { return this.backgroundFocusedImage; }
	/**
	 * Set the the focused background image url of the view. focusable must be true for normal views. (Android)
	 * @param {String} value New value to set.
	 * @alias Titanium_UI_TabGroup.setBackgroundFocusedImage
	 */
	this.setBackgroundFocusedImage = function(value) { this.backgroundFocusedImage = value; }
	/**
	 * a background gradient for the view with the properties: type,startPoint,endPoint,startRadius,endRadius,backfillStart,backfillEnd,colors.
	 * @alias Titanium_UI_TabGroup.backgroundGradient
	 * @property {Object}
	 */
	this.backgroundGradient = {}
	/**
	 * Get the a background gradient for the view with the properties: type,startPoint,endPoint,startRadius,endRadius,backfillStart,backfillEnd,colors.
	 * @alias Titanium_UI_TabGroup.getBackgroundGradient
	 * @return {Object}
	 */
	this.getBackgroundGradient = function() { return this.backgroundGradient; }
	/**
	 * Set the a background gradient for the view with the properties: type,startPoint,endPoint,startRadius,endRadius,backfillStart,backfillEnd,colors.
	 * @param {Object} value New value to set.
	 * @alias Titanium_UI_TabGroup.setBackgroundGradient
	 */
	this.setBackgroundGradient = function(value) { this.backgroundGradient = value; }
	/**
	 * the background image url of the view
	 * @alias Titanium_UI_TabGroup.backgroundImage
	 * @property {String}
	 */
	this.backgroundImage = ''
	/**
	 * Get the the background image url of the view
	 * @alias Titanium_UI_TabGroup.getBackgroundImage
	 * @return {String}
	 */
	this.getBackgroundImage = function() { return this.backgroundImage; }
	/**
	 * Set the the background image url of the view
	 * @param {String} value New value to set.
	 * @alias Titanium_UI_TabGroup.setBackgroundImage
	 */
	this.setBackgroundImage = function(value) { this.backgroundImage = value; }
	/**
	 * End caps specify the portion of an image that should not be resized when an image is stretched. This technique is used to implement buttons and other resizable image-based interface elements. When a button with end caps is resized, the resizing occurs only in the middle of the button, in the region between the end caps. The end caps themselves keep their original size and appearance. This property specifies the size of the left end cap. The middle (stretchable) portion is assumed to be 1 pixel wide. The right end cap is therefore computed by adding the size of the left end cap and the middle portion together and then subtracting that value from the width of the image
	 * @alias Titanium_UI_TabGroup.backgroundLeftCap
	 * @property {Float}
	 */
	this.backgroundLeftCap = 0.0
	/**
	 * Get the End caps specify the portion of an image that should not be resized when an image is stretched. This technique is used to implement buttons and other resizable image-based interface elements. When a button with end caps is resized, the resizing occurs only in the middle of the button, in the region between the end caps. The end caps themselves keep their original size and appearance. This property specifies the size of the left end cap. The middle (stretchable) portion is assumed to be 1 pixel wide. The right end cap is therefore computed by adding the size of the left end cap and the middle portion together and then subtracting that value from the width of the image
	 * @alias Titanium_UI_TabGroup.getBackgroundLeftCap
	 * @return {Float}
	 */
	this.getBackgroundLeftCap = function() { return this.backgroundLeftCap; }
	/**
	 * Set the End caps specify the portion of an image that should not be resized when an image is stretched. This technique is used to implement buttons and other resizable image-based interface elements. When a button with end caps is resized, the resizing occurs only in the middle of the button, in the region between the end caps. The end caps themselves keep their original size and appearance. This property specifies the size of the left end cap. The middle (stretchable) portion is assumed to be 1 pixel wide. The right end cap is therefore computed by adding the size of the left end cap and the middle portion together and then subtracting that value from the width of the image
	 * @param {Float} value New value to set.
	 * @alias Titanium_UI_TabGroup.setBackgroundLeftCap
	 */
	this.setBackgroundLeftCap = function(value) { this.backgroundLeftCap = value; }
	/**
	 * the selected background color of the view. focusable must be true for normal views. (Android)
	 * @alias Titanium_UI_TabGroup.backgroundSelectedColor
	 * @property {String}
	 */
	this.backgroundSelectedColor = ''
	/**
	 * Get the the selected background color of the view. focusable must be true for normal views. (Android)
	 * @alias Titanium_UI_TabGroup.getBackgroundSelectedColor
	 * @return {String}
	 */
	this.getBackgroundSelectedColor = function() { return this.backgroundSelectedColor; }
	/**
	 * Set the the selected background color of the view. focusable must be true for normal views. (Android)
	 * @param {String} value New value to set.
	 * @alias Titanium_UI_TabGroup.setBackgroundSelectedColor
	 */
	this.setBackgroundSelectedColor = function(value) { this.backgroundSelectedColor = value; }
	/**
	 * the selected background image url of the view. focusable must be true for normal views. (Android)
	 * @alias Titanium_UI_TabGroup.backgroundSelectedImage
	 * @property {String}
	 */
	this.backgroundSelectedImage = ''
	/**
	 * Get the the selected background image url of the view. focusable must be true for normal views. (Android)
	 * @alias Titanium_UI_TabGroup.getBackgroundSelectedImage
	 * @return {String}
	 */
	this.getBackgroundSelectedImage = function() { return this.backgroundSelectedImage; }
	/**
	 * Set the the selected background image url of the view. focusable must be true for normal views. (Android)
	 * @param {String} value New value to set.
	 * @alias Titanium_UI_TabGroup.setBackgroundSelectedImage
	 */
	this.setBackgroundSelectedImage = function(value) { this.backgroundSelectedImage = value; }
	/**
	 * End caps specify the portion of an image that should not be resized when an image is stretched. This technique is used to implement buttons and other resizable image-based interface elements. When a button with end caps is resized, the resizing occurs only in the middle of the button, in the region between the end caps. The end caps themselves keep their original size and appearance. This property specifies the size of the top end cap. The middle (stretchable) portion is assumed to be 1 pixel wide. The bottom end cap is therefore computed by adding the size of the top end cap and the middle portion together and then subtracting that value from the height of the image
	 * @alias Titanium_UI_TabGroup.backgroundTopCap
	 * @property {Float}
	 */
	this.backgroundTopCap = 0.0
	/**
	 * Get the End caps specify the portion of an image that should not be resized when an image is stretched. This technique is used to implement buttons and other resizable image-based interface elements. When a button with end caps is resized, the resizing occurs only in the middle of the button, in the region between the end caps. The end caps themselves keep their original size and appearance. This property specifies the size of the top end cap. The middle (stretchable) portion is assumed to be 1 pixel wide. The bottom end cap is therefore computed by adding the size of the top end cap and the middle portion together and then subtracting that value from the height of the image
	 * @alias Titanium_UI_TabGroup.getBackgroundTopCap
	 * @return {Float}
	 */
	this.getBackgroundTopCap = function() { return this.backgroundTopCap; }
	/**
	 * Set the End caps specify the portion of an image that should not be resized when an image is stretched. This technique is used to implement buttons and other resizable image-based interface elements. When a button with end caps is resized, the resizing occurs only in the middle of the button, in the region between the end caps. The end caps themselves keep their original size and appearance. This property specifies the size of the top end cap. The middle (stretchable) portion is assumed to be 1 pixel wide. The bottom end cap is therefore computed by adding the size of the top end cap and the middle portion together and then subtracting that value from the height of the image
	 * @param {Float} value New value to set.
	 * @alias Titanium_UI_TabGroup.setBackgroundTopCap
	 */
	this.setBackgroundTopCap = function(value) { this.backgroundTopCap = value; }
	/**
	 * the default navigation bar color (typically for the "More" tab)
	 * @alias Titanium_UI_TabGroup.barColor
	 * @property {String}
	 */
	this.barColor = ''
	/**
	 * Get the the default navigation bar color (typically for the "More" tab)
	 * @alias Titanium_UI_TabGroup.getBarColor
	 * @return {String}
	 */
	this.getBarColor = function() { return this.barColor; }
	/**
	 * Set the the default navigation bar color (typically for the "More" tab)
	 * @param {String} value New value to set.
	 * @alias Titanium_UI_TabGroup.setBarColor
	 */
	this.setBarColor = function(value) { this.barColor = value; }
	/**
	 * the border color of the view
	 * @alias Titanium_UI_TabGroup.borderColor
	 * @property {String}
	 */
	this.borderColor = ''
	/**
	 * Get the the border color of the view
	 * @alias Titanium_UI_TabGroup.getBorderColor
	 * @return {String}
	 */
	this.getBorderColor = function() { return this.borderColor; }
	/**
	 * Set the the border color of the view
	 * @param {String} value New value to set.
	 * @alias Titanium_UI_TabGroup.setBorderColor
	 */
	this.setBorderColor = function(value) { this.borderColor = value; }
	/**
	 * the border radius of the view
	 * @alias Titanium_UI_TabGroup.borderRadius
	 * @property {Float}
	 */
	this.borderRadius = 0.0
	/**
	 * Get the the border radius of the view
	 * @alias Titanium_UI_TabGroup.getBorderRadius
	 * @return {Float}
	 */
	this.getBorderRadius = function() { return this.borderRadius; }
	/**
	 * Set the the border radius of the view
	 * @param {Float} value New value to set.
	 * @alias Titanium_UI_TabGroup.setBorderRadius
	 */
	this.setBorderRadius = function(value) { this.borderRadius = value; }
	/**
	 * the border width of the view
	 * @alias Titanium_UI_TabGroup.borderWidth
	 * @property {Float}
	 */
	this.borderWidth = 0.0
	/**
	 * Get the the border width of the view
	 * @alias Titanium_UI_TabGroup.getBorderWidth
	 * @return {Float}
	 */
	this.getBorderWidth = function() { return this.borderWidth; }
	/**
	 * Set the the border width of the view
	 * @param {Float} value New value to set.
	 * @alias Titanium_UI_TabGroup.setBorderWidth
	 */
	this.setBorderWidth = function(value) { this.borderWidth = value; }
	/**
	 * property for the view bottom position. This position is relative to the view's parent. Can be either a float value or a dimension string ie 'auto' (default), '50%' (iPhone only).
	 * @alias Titanium_UI_TabGroup.bottom
	 * @property {Float,String}
	 */
	this.bottom = 0.0
	/**
	 * Get the property for the view bottom position. This position is relative to the view's parent. Can be either a float value or a dimension string ie 'auto' (default), '50%' (iPhone only).
	 * @alias Titanium_UI_TabGroup.getBottom
	 * @return {Float,String}
	 */
	this.getBottom = function() { return this.bottom; }
	/**
	 * Set the property for the view bottom position. This position is relative to the view's parent. Can be either a float value or a dimension string ie 'auto' (default), '50%' (iPhone only).
	 * @param {Float,String} value New value to set.
	 * @alias Titanium_UI_TabGroup.setBottom
	 */
	this.setBottom = function(value) { this.bottom = value; }
	/**
	 * a dictionary with properties x and y to indicate the center of the views position relative to the parent view
	 * @alias Titanium_UI_TabGroup.center
	 * @property {Object}
	 */
	this.center = {}
	/**
	 * Get the a dictionary with properties x and y to indicate the center of the views position relative to the parent view
	 * @alias Titanium_UI_TabGroup.getCenter
	 * @return {Object}
	 */
	this.getCenter = function() { return this.center; }
	/**
	 * Set the a dictionary with properties x and y to indicate the center of the views position relative to the parent view
	 * @param {Object} value New value to set.
	 * @alias Titanium_UI_TabGroup.setCenter
	 */
	this.setCenter = function(value) { this.center = value; }
	/**
	 * the title for the 'More' tab edit button.  iPhone/iPad only
	 * @alias Titanium_UI_TabGroup.editButtonTitle
	 * @property {String}
	 */
	this.editButtonTitle = ''
	/**
	 * Get the the title for the 'More' tab edit button.  iPhone/iPad only
	 * @alias Titanium_UI_TabGroup.getEditButtonTitle
	 * @return {String}
	 */
	this.getEditButtonTitle = function() { return this.editButtonTitle; }
	/**
	 * Set the the title for the 'More' tab edit button.  iPhone/iPad only
	 * @param {String} value New value to set.
	 * @alias Titanium_UI_TabGroup.setEditButtonTitle
	 */
	this.setEditButtonTitle = function(value) { this.editButtonTitle = value; }
	/**
	 * Set true if you want a view to be focusable when navigating with the trackball or D-Pad. Default: false. (Android Only)
	 * @alias Titanium_UI_TabGroup.focusable
	 * @property {Boolean}
	 */
	this.focusable = false
	/**
	 * Get the Set true if you want a view to be focusable when navigating with the trackball or D-Pad. Default: false. (Android Only)
	 * @alias Titanium_UI_TabGroup.getFocusable
	 * @return {Boolean}
	 */
	this.getFocusable = function() { return this.focusable; }
	/**
	 * Set the Set true if you want a view to be focusable when navigating with the trackball or D-Pad. Default: false. (Android Only)
	 * @param {Boolean} value New value to set.
	 * @alias Titanium_UI_TabGroup.setFocusable
	 */
	this.setFocusable = function(value) { this.focusable = value; }
	/**
	 * the font family
	 * @alias Titanium_UI_TabGroup.font-family
	 * @property {String}
	 */
	this.font-family = ''
	/**
	 * Get the the font family
	 * @alias Titanium_UI_TabGroup.getFont-family
	 * @return {String}
	 */
	this.getFont-family = function() { return this.font-family; }
	/**
	 * Set the the font family
	 * @param {String} value New value to set.
	 * @alias Titanium_UI_TabGroup.setFont-family
	 */
	this.setFont-family = function(value) { this.font-family = value; }
	/**
	 * the font size
	 * @alias Titanium_UI_TabGroup.font-size
	 * @property {String}
	 */
	this.font-size = ''
	/**
	 * Get the the font size
	 * @alias Titanium_UI_TabGroup.getFont-size
	 * @return {String}
	 */
	this.getFont-size = function() { return this.font-size; }
	/**
	 * Set the the font size
	 * @param {String} value New value to set.
	 * @alias Titanium_UI_TabGroup.setFont-size
	 */
	this.setFont-size = function(value) { this.font-size = value; }
	/**
	 * the font style, either normal or italics
	 * @alias Titanium_UI_TabGroup.font-style
	 * @property {String}
	 */
	this.font-style = ''
	/**
	 * Get the the font style, either normal or italics
	 * @alias Titanium_UI_TabGroup.getFont-style
	 * @return {String}
	 */
	this.getFont-style = function() { return this.font-style; }
	/**
	 * Set the the font style, either normal or italics
	 * @param {String} value New value to set.
	 * @alias Titanium_UI_TabGroup.setFont-style
	 */
	this.setFont-style = function(value) { this.font-style = value; }
	/**
	 * the font weight, either normal or bold
	 * @alias Titanium_UI_TabGroup.font-weight
	 * @property {String}
	 */
	this.font-weight = ''
	/**
	 * Get the the font weight, either normal or bold
	 * @alias Titanium_UI_TabGroup.getFont-weight
	 * @return {String}
	 */
	this.getFont-weight = function() { return this.font-weight; }
	/**
	 * Set the the font weight, either normal or bold
	 * @param {String} value New value to set.
	 * @alias Titanium_UI_TabGroup.setFont-weight
	 */
	this.setFont-weight = function(value) { this.font-weight = value; }
	/**
	 * property for the view height. Can be either a float value or a dimension string ie 'auto' (default), '50%' (iPhone only).
	 * @alias Titanium_UI_TabGroup.height
	 * @property {Float,String}
	 */
	this.height = 0.0
	/**
	 * Get the property for the view height. Can be either a float value or a dimension string ie 'auto' (default), '50%' (iPhone only).
	 * @alias Titanium_UI_TabGroup.getHeight
	 * @return {Float,String}
	 */
	this.getHeight = function() { return this.height; }
	/**
	 * Set the property for the view height. Can be either a float value or a dimension string ie 'auto' (default), '50%' (iPhone only).
	 * @param {Float,String} value New value to set.
	 * @alias Titanium_UI_TabGroup.setHeight
	 */
	this.setHeight = function(value) { this.height = value; }
	/**
	 * property for the view left position. This position is relative to the view's parent. Can be either a float value or a dimension string ie 'auto' (default), '50%' (iPhone only).
	 * @alias Titanium_UI_TabGroup.left
	 * @property {Float,String}
	 */
	this.left = 0.0
	/**
	 * Get the property for the view left position. This position is relative to the view's parent. Can be either a float value or a dimension string ie 'auto' (default), '50%' (iPhone only).
	 * @alias Titanium_UI_TabGroup.getLeft
	 * @return {Float,String}
	 */
	this.getLeft = function() { return this.left; }
	/**
	 * Set the property for the view left position. This position is relative to the view's parent. Can be either a float value or a dimension string ie 'auto' (default), '50%' (iPhone only).
	 * @param {Float,String} value New value to set.
	 * @alias Titanium_UI_TabGroup.setLeft
	 */
	this.setLeft = function(value) { this.left = value; }
	/**
	 * the opacity from 0.0-1.0
	 * @alias Titanium_UI_TabGroup.opacity
	 * @property {Float}
	 */
	this.opacity = 0.0
	/**
	 * Get the the opacity from 0.0-1.0
	 * @alias Titanium_UI_TabGroup.getOpacity
	 * @return {Float}
	 */
	this.getOpacity = function() { return this.opacity; }
	/**
	 * Set the the opacity from 0.0-1.0
	 * @param {Float} value New value to set.
	 * @alias Titanium_UI_TabGroup.setOpacity
	 */
	this.setOpacity = function(value) { this.opacity = value; }
	/**
	 * property for the view right position. This position is relative to the view's parent. Can be either a float value or a dimension string ie 'auto' (default), '50%' (iPhone only).
	 * @alias Titanium_UI_TabGroup.right
	 * @property {Float,String}
	 */
	this.right = 0.0
	/**
	 * Get the property for the view right position. This position is relative to the view's parent. Can be either a float value or a dimension string ie 'auto' (default), '50%' (iPhone only).
	 * @alias Titanium_UI_TabGroup.getRight
	 * @return {Float,String}
	 */
	this.getRight = function() { return this.right; }
	/**
	 * Set the property for the view right position. This position is relative to the view's parent. Can be either a float value or a dimension string ie 'auto' (default), '50%' (iPhone only).
	 * @param {Float,String} value New value to set.
	 * @alias Titanium_UI_TabGroup.setRight
	 */
	this.setRight = function(value) { this.right = value; }
	/**
	 * the size of the view as a dictionary of width and height properties
	 * @alias Titanium_UI_TabGroup.size
	 * @property {Object}
	 */
	this.size = {}
	/**
	 * Get the the size of the view as a dictionary of width and height properties
	 * @alias Titanium_UI_TabGroup.getSize
	 * @return {Object}
	 */
	this.getSize = function() { return this.size; }
	/**
	 * Set the the size of the view as a dictionary of width and height properties
	 * @param {Object} value New value to set.
	 * @alias Titanium_UI_TabGroup.setSize
	 */
	this.setSize = function(value) { this.size = value; }
	/**
	 * One of Titanium.UI.Android.SOFT_KEYBOARD_DEFAULT_ON_FOCUS, Titanium.UI.Android.SOFT_KEYBOARD_HIDE_ON_FOCUS, or Titanium.UI.Android.SOFT_KEYBOARD_SHOW_ON_FOCUS. (Android only)
	 * @alias Titanium_UI_TabGroup.softKeyboardOnFocus
	 * @property {Integer}
	 */
	this.softKeyboardOnFocus = 0
	/**
	 * Get the One of Titanium.UI.Android.SOFT_KEYBOARD_DEFAULT_ON_FOCUS, Titanium.UI.Android.SOFT_KEYBOARD_HIDE_ON_FOCUS, or Titanium.UI.Android.SOFT_KEYBOARD_SHOW_ON_FOCUS. (Android only)
	 * @alias Titanium_UI_TabGroup.getSoftKeyboardOnFocus
	 * @return {Integer}
	 */
	this.getSoftKeyboardOnFocus = function() { return this.softKeyboardOnFocus; }
	/**
	 * Set the One of Titanium.UI.Android.SOFT_KEYBOARD_DEFAULT_ON_FOCUS, Titanium.UI.Android.SOFT_KEYBOARD_HIDE_ON_FOCUS, or Titanium.UI.Android.SOFT_KEYBOARD_SHOW_ON_FOCUS. (Android only)
	 * @param {Integer} value New value to set.
	 * @alias Titanium_UI_TabGroup.setSoftKeyboardOnFocus
	 */
	this.setSoftKeyboardOnFocus = function(value) { this.softKeyboardOnFocus = value; }
	/**
	 * array of tab objects that are managed by the tab group
	 * @alias Titanium_UI_TabGroup.tabs
	 * @property {Array}
	 */
	this.tabs = []
	/**
	 * Get the array of tab objects that are managed by the tab group
	 * @alias Titanium_UI_TabGroup.getTabs
	 * @return {Array}
	 */
	this.getTabs = function() { return this.tabs; }
	/**
	 * Set the array of tab objects that are managed by the tab group
	 * @param {Array} value New value to set.
	 * @alias Titanium_UI_TabGroup.setTabs
	 */
	this.setTabs = function(value) { this.tabs = value; }
	/**
	 * property for the view top position. This position is relative to the view's parent. Can be either a float value or a dimension string ie 'auto' (default), '50%' (iPhone only).
	 * @alias Titanium_UI_TabGroup.top
	 * @property {Float,String}
	 */
	this.top = 0.0
	/**
	 * Get the property for the view top position. This position is relative to the view's parent. Can be either a float value or a dimension string ie 'auto' (default), '50%' (iPhone only).
	 * @alias Titanium_UI_TabGroup.getTop
	 * @return {Float,String}
	 */
	this.getTop = function() { return this.top; }
	/**
	 * Set the property for the view top position. This position is relative to the view's parent. Can be either a float value or a dimension string ie 'auto' (default), '50%' (iPhone only).
	 * @param {Float,String} value New value to set.
	 * @alias Titanium_UI_TabGroup.setTop
	 */
	this.setTop = function(value) { this.top = value; }
	/**
	 * a boolean indicating if the view should receive touch events (true, default) or forward them to peers (false)
	 * @alias Titanium_UI_TabGroup.touchEnabled
	 * @property {Boolean}
	 */
	this.touchEnabled = false
	/**
	 * Get the a boolean indicating if the view should receive touch events (true, default) or forward them to peers (false)
	 * @alias Titanium_UI_TabGroup.getTouchEnabled
	 * @return {Boolean}
	 */
	this.getTouchEnabled = function() { return this.touchEnabled; }
	/**
	 * Set the a boolean indicating if the view should receive touch events (true, default) or forward them to peers (false)
	 * @param {Boolean} value New value to set.
	 * @alias Titanium_UI_TabGroup.setTouchEnabled
	 */
	this.setTouchEnabled = function(value) { this.touchEnabled = value; }
	/**
	 * the transformation matrix to apply to the view
	 * @alias Titanium_UI_TabGroup.transform
	 * @property {Object}
	 */
	this.transform = {}
	/**
	 * Get the the transformation matrix to apply to the view
	 * @alias Titanium_UI_TabGroup.getTransform
	 * @return {Object}
	 */
	this.getTransform = function() { return this.transform; }
	/**
	 * Set the the transformation matrix to apply to the view
	 * @param {Object} value New value to set.
	 * @alias Titanium_UI_TabGroup.setTransform
	 */
	this.setTransform = function(value) { this.transform = value; }
	/**
	 * a boolean of the visibility of the view
	 * @alias Titanium_UI_TabGroup.visible
	 * @property {Boolean}
	 */
	this.visible = false
	/**
	 * Get the a boolean of the visibility of the view
	 * @alias Titanium_UI_TabGroup.getVisible
	 * @return {Boolean}
	 */
	this.getVisible = function() { return this.visible; }
	/**
	 * Set the a boolean of the visibility of the view
	 * @param {Boolean} value New value to set.
	 * @alias Titanium_UI_TabGroup.setVisible
	 */
	this.setVisible = function(value) { this.visible = value; }
	/**
	 * property for the view width. Can be either a float value or a dimension string ie 'auto' (default), '50%' (iPhone only).
	 * @alias Titanium_UI_TabGroup.width
	 * @property {Float,String}
	 */
	this.width = 0.0
	/**
	 * Get the property for the view width. Can be either a float value or a dimension string ie 'auto' (default), '50%' (iPhone only).
	 * @alias Titanium_UI_TabGroup.getWidth
	 * @return {Float,String}
	 */
	this.getWidth = function() { return this.width; }
	/**
	 * Set the property for the view width. Can be either a float value or a dimension string ie 'auto' (default), '50%' (iPhone only).
	 * @param {Float,String} value New value to set.
	 * @alias Titanium_UI_TabGroup.setWidth
	 */
	this.setWidth = function(value) { this.width = value; }
	/**
	 * the z index position relative to other sibling views
	 * @alias Titanium_UI_TabGroup.zIndex
	 * @property {Integer}
	 */
	this.zIndex = 0
	/**
	 * Get the the z index position relative to other sibling views
	 * @alias Titanium_UI_TabGroup.getZIndex
	 * @return {Integer}
	 */
	this.getZIndex = function() { return this.zIndex; }
	/**
	 * Set the the z index position relative to other sibling views
	 * @param {Integer} value New value to set.
	 * @alias Titanium_UI_TabGroup.setZIndex
	 */
	this.setZIndex = function(value) { this.zIndex = value; }
	/**
	 * add a child to the view hierarchy
	 * @param {Object} view the view to add to this views hiearchy
	 * @alias Titanium_UI_TabGroup.add
	 */
	this.add = function add(view) { }
	/**
	 * add an event listener for the instance to receive view triggered events
	 * @param {String} name name of the event
	 * @param {Function} callback callback function to invoke when the event is fired
	 * @alias Titanium_UI_TabGroup.addEventListener
	 */
	this.addEventListener = function addEventListener(name,callback) { }
	/**
	 * add a tab to the tab group
	 * @alias Titanium_UI_TabGroup.addTab
	 */
	this.addTab = function addTab() { }
	/**
	 * animate the view
	 * @param {Object} obj either a dictionary of animation properties or an Animation object
	 * @param {Function} callback function to be invoked upon completion of the animation
	 * @alias Titanium_UI_TabGroup.animate
	 */
	this.animate = function animate(obj,callback) { }
	/**
	 * close the tab group and remove it from the UI
	 * @alias Titanium_UI_TabGroup.close
	 */
	this.close = function close() { }
	/**
	 * fire a synthesized event to the views listener
	 * @param {String} name name of the event
	 * @param {Object} event event object
	 * @alias Titanium_UI_TabGroup.fireEvent
	 */
	this.fireEvent = function fireEvent(name,event) { }
	/**
	 * hide the view
	 * @alias Titanium_UI_TabGroup.hide
	 */
	this.hide = function hide() { }
	/**
	 * open the tab group and make it visible
	 * @alias Titanium_UI_TabGroup.open
	 */
	this.open = function open() { }
	/**
	 * remove a previously add view from the view hiearchy
	 * @param {Object} view the view to remove from this views hiearchy
	 * @alias Titanium_UI_TabGroup.remove
	 */
	this.remove = function remove(view) { }
	/**
	 * remove a previously added event listener
	 * @param {String} name name of the event
	 * @param {Function} callback callback function passed in addEventListener
	 * @alias Titanium_UI_TabGroup.removeEventListener
	 */
	this.removeEventListener = function removeEventListener(name,callback) { }
	/**
	 * remove a tab from the tab group
	 * @alias Titanium_UI_TabGroup.removeTab
	 */
	this.removeTab = function removeTab() { }
	/**
	 * select the currently active tab in a tab group
	 * @param {Object} indexOrObject an int representing the desired tab index or a reference to the tab object you'd like to switch to
	 * @alias Titanium_UI_TabGroup.setActiveTab
	 */
	this.setActiveTab = function setActiveTab(indexOrObject) { }
	/**
	 * make the view visible
	 * @alias Titanium_UI_TabGroup.show
	 */
	this.show = function show() { }
	/**
	 * return a Blob image of the rendered view
	 * @param {Function} f function to be invoked upon completion. if non-null, this method will be performed asynchronously. if null, it will be performed immediately
	 * @alias Titanium_UI_TabGroup.toImage
	 * @return {Object}
	 */
	this.toImage = function toImage(f) { return {}; }
};

/**
 * A Tabbed Bar is created by the method Titanium.UI.createTabbedBar. The difference between the Tabbed Bar and the Button Bar is that the tabbed bar visually maintains a state (visually distinguished as a pressed or selected look).
 * @since 0.8
 */
function Titanium_UI_TabbedBar() {
	/**
	 * a dictionary with properties x and y to indicate the anchor point value. anchor specifies the position by which animation should occur. center is 0.5, 0.5
	 * @alias Titanium_UI_TabbedBar.anchorPoint
	 * @property {Object}
	 */
	this.anchorPoint = {}
	/**
	 * Get the a dictionary with properties x and y to indicate the anchor point value. anchor specifies the position by which animation should occur. center is 0.5, 0.5
	 * @alias Titanium_UI_TabbedBar.getAnchorPoint
	 * @return {Object}
	 */
	this.getAnchorPoint = function() { return this.anchorPoint; }
	/**
	 * Set the a dictionary with properties x and y to indicate the anchor point value. anchor specifies the position by which animation should occur. center is 0.5, 0.5
	 * @param {Object} value New value to set.
	 * @alias Titanium_UI_TabbedBar.setAnchorPoint
	 */
	this.setAnchorPoint = function(value) { this.anchorPoint = value; }
	/**
	 * read-only object with x and y properties of where the view is during animation
	 * @alias Titanium_UI_TabbedBar.animatedCenterPoint
	 * @property {Object}
	 */
	this.animatedCenterPoint = {}
	/**
	 * Get the read-only object with x and y properties of where the view is during animation
	 * @alias Titanium_UI_TabbedBar.getAnimatedCenterPoint
	 * @return {Object}
	 */
	this.getAnimatedCenterPoint = function() { return this.animatedCenterPoint; }
	/**
	 * Set the read-only object with x and y properties of where the view is during animation
	 * @param {Object} value New value to set.
	 * @alias Titanium_UI_TabbedBar.setAnimatedCenterPoint
	 */
	this.setAnimatedCenterPoint = function(value) { this.animatedCenterPoint = value; }
	/**
	 * the background color of the tabbed bar
	 * @alias Titanium_UI_TabbedBar.backgroundColor
	 * @property {String}
	 */
	this.backgroundColor = ''
	/**
	 * Get the the background color of the tabbed bar
	 * @alias Titanium_UI_TabbedBar.getBackgroundColor
	 * @return {String}
	 */
	this.getBackgroundColor = function() { return this.backgroundColor; }
	/**
	 * Set the the background color of the tabbed bar
	 * @param {String} value New value to set.
	 * @alias Titanium_UI_TabbedBar.setBackgroundColor
	 */
	this.setBackgroundColor = function(value) { this.backgroundColor = value; }
	/**
	 * the disabled background color of the view. (Android)
	 * @alias Titanium_UI_TabbedBar.backgroundDisabledColor
	 * @property {String}
	 */
	this.backgroundDisabledColor = ''
	/**
	 * Get the the disabled background color of the view. (Android)
	 * @alias Titanium_UI_TabbedBar.getBackgroundDisabledColor
	 * @return {String}
	 */
	this.getBackgroundDisabledColor = function() { return this.backgroundDisabledColor; }
	/**
	 * Set the the disabled background color of the view. (Android)
	 * @param {String} value New value to set.
	 * @alias Titanium_UI_TabbedBar.setBackgroundDisabledColor
	 */
	this.setBackgroundDisabledColor = function(value) { this.backgroundDisabledColor = value; }
	/**
	 * the disabled background image url of the view. (Android)
	 * @alias Titanium_UI_TabbedBar.backgroundDisabledImage
	 * @property {String}
	 */
	this.backgroundDisabledImage = ''
	/**
	 * Get the the disabled background image url of the view. (Android)
	 * @alias Titanium_UI_TabbedBar.getBackgroundDisabledImage
	 * @return {String}
	 */
	this.getBackgroundDisabledImage = function() { return this.backgroundDisabledImage; }
	/**
	 * Set the the disabled background image url of the view. (Android)
	 * @param {String} value New value to set.
	 * @alias Titanium_UI_TabbedBar.setBackgroundDisabledImage
	 */
	this.setBackgroundDisabledImage = function(value) { this.backgroundDisabledImage = value; }
	/**
	 * the focused background color of the view. focusable must be true for normal views. (Android)
	 * @alias Titanium_UI_TabbedBar.backgroundFocusedColor
	 * @property {String}
	 */
	this.backgroundFocusedColor = ''
	/**
	 * Get the the focused background color of the view. focusable must be true for normal views. (Android)
	 * @alias Titanium_UI_TabbedBar.getBackgroundFocusedColor
	 * @return {String}
	 */
	this.getBackgroundFocusedColor = function() { return this.backgroundFocusedColor; }
	/**
	 * Set the the focused background color of the view. focusable must be true for normal views. (Android)
	 * @param {String} value New value to set.
	 * @alias Titanium_UI_TabbedBar.setBackgroundFocusedColor
	 */
	this.setBackgroundFocusedColor = function(value) { this.backgroundFocusedColor = value; }
	/**
	 * the focused background image url of the view. focusable must be true for normal views. (Android)
	 * @alias Titanium_UI_TabbedBar.backgroundFocusedImage
	 * @property {String}
	 */
	this.backgroundFocusedImage = ''
	/**
	 * Get the the focused background image url of the view. focusable must be true for normal views. (Android)
	 * @alias Titanium_UI_TabbedBar.getBackgroundFocusedImage
	 * @return {String}
	 */
	this.getBackgroundFocusedImage = function() { return this.backgroundFocusedImage; }
	/**
	 * Set the the focused background image url of the view. focusable must be true for normal views. (Android)
	 * @param {String} value New value to set.
	 * @alias Titanium_UI_TabbedBar.setBackgroundFocusedImage
	 */
	this.setBackgroundFocusedImage = function(value) { this.backgroundFocusedImage = value; }
	/**
	 * a background gradient for the view with the properties: type,startPoint,endPoint,startRadius,endRadius,backfillStart,backfillEnd,colors.
	 * @alias Titanium_UI_TabbedBar.backgroundGradient
	 * @property {Object}
	 */
	this.backgroundGradient = {}
	/**
	 * Get the a background gradient for the view with the properties: type,startPoint,endPoint,startRadius,endRadius,backfillStart,backfillEnd,colors.
	 * @alias Titanium_UI_TabbedBar.getBackgroundGradient
	 * @return {Object}
	 */
	this.getBackgroundGradient = function() { return this.backgroundGradient; }
	/**
	 * Set the a background gradient for the view with the properties: type,startPoint,endPoint,startRadius,endRadius,backfillStart,backfillEnd,colors.
	 * @param {Object} value New value to set.
	 * @alias Titanium_UI_TabbedBar.setBackgroundGradient
	 */
	this.setBackgroundGradient = function(value) { this.backgroundGradient = value; }
	/**
	 * the background image url of the view
	 * @alias Titanium_UI_TabbedBar.backgroundImage
	 * @property {String}
	 */
	this.backgroundImage = ''
	/**
	 * Get the the background image url of the view
	 * @alias Titanium_UI_TabbedBar.getBackgroundImage
	 * @return {String}
	 */
	this.getBackgroundImage = function() { return this.backgroundImage; }
	/**
	 * Set the the background image url of the view
	 * @param {String} value New value to set.
	 * @alias Titanium_UI_TabbedBar.setBackgroundImage
	 */
	this.setBackgroundImage = function(value) { this.backgroundImage = value; }
	/**
	 * End caps specify the portion of an image that should not be resized when an image is stretched. This technique is used to implement buttons and other resizable image-based interface elements. When a button with end caps is resized, the resizing occurs only in the middle of the button, in the region between the end caps. The end caps themselves keep their original size and appearance. This property specifies the size of the left end cap. The middle (stretchable) portion is assumed to be 1 pixel wide. The right end cap is therefore computed by adding the size of the left end cap and the middle portion together and then subtracting that value from the width of the image
	 * @alias Titanium_UI_TabbedBar.backgroundLeftCap
	 * @property {Float}
	 */
	this.backgroundLeftCap = 0.0
	/**
	 * Get the End caps specify the portion of an image that should not be resized when an image is stretched. This technique is used to implement buttons and other resizable image-based interface elements. When a button with end caps is resized, the resizing occurs only in the middle of the button, in the region between the end caps. The end caps themselves keep their original size and appearance. This property specifies the size of the left end cap. The middle (stretchable) portion is assumed to be 1 pixel wide. The right end cap is therefore computed by adding the size of the left end cap and the middle portion together and then subtracting that value from the width of the image
	 * @alias Titanium_UI_TabbedBar.getBackgroundLeftCap
	 * @return {Float}
	 */
	this.getBackgroundLeftCap = function() { return this.backgroundLeftCap; }
	/**
	 * Set the End caps specify the portion of an image that should not be resized when an image is stretched. This technique is used to implement buttons and other resizable image-based interface elements. When a button with end caps is resized, the resizing occurs only in the middle of the button, in the region between the end caps. The end caps themselves keep their original size and appearance. This property specifies the size of the left end cap. The middle (stretchable) portion is assumed to be 1 pixel wide. The right end cap is therefore computed by adding the size of the left end cap and the middle portion together and then subtracting that value from the width of the image
	 * @param {Float} value New value to set.
	 * @alias Titanium_UI_TabbedBar.setBackgroundLeftCap
	 */
	this.setBackgroundLeftCap = function(value) { this.backgroundLeftCap = value; }
	/**
	 * the selected background color of the view. focusable must be true for normal views. (Android)
	 * @alias Titanium_UI_TabbedBar.backgroundSelectedColor
	 * @property {String}
	 */
	this.backgroundSelectedColor = ''
	/**
	 * Get the the selected background color of the view. focusable must be true for normal views. (Android)
	 * @alias Titanium_UI_TabbedBar.getBackgroundSelectedColor
	 * @return {String}
	 */
	this.getBackgroundSelectedColor = function() { return this.backgroundSelectedColor; }
	/**
	 * Set the the selected background color of the view. focusable must be true for normal views. (Android)
	 * @param {String} value New value to set.
	 * @alias Titanium_UI_TabbedBar.setBackgroundSelectedColor
	 */
	this.setBackgroundSelectedColor = function(value) { this.backgroundSelectedColor = value; }
	/**
	 * the selected background image url of the view. focusable must be true for normal views. (Android)
	 * @alias Titanium_UI_TabbedBar.backgroundSelectedImage
	 * @property {String}
	 */
	this.backgroundSelectedImage = ''
	/**
	 * Get the the selected background image url of the view. focusable must be true for normal views. (Android)
	 * @alias Titanium_UI_TabbedBar.getBackgroundSelectedImage
	 * @return {String}
	 */
	this.getBackgroundSelectedImage = function() { return this.backgroundSelectedImage; }
	/**
	 * Set the the selected background image url of the view. focusable must be true for normal views. (Android)
	 * @param {String} value New value to set.
	 * @alias Titanium_UI_TabbedBar.setBackgroundSelectedImage
	 */
	this.setBackgroundSelectedImage = function(value) { this.backgroundSelectedImage = value; }
	/**
	 * End caps specify the portion of an image that should not be resized when an image is stretched. This technique is used to implement buttons and other resizable image-based interface elements. When a button with end caps is resized, the resizing occurs only in the middle of the button, in the region between the end caps. The end caps themselves keep their original size and appearance. This property specifies the size of the top end cap. The middle (stretchable) portion is assumed to be 1 pixel wide. The bottom end cap is therefore computed by adding the size of the top end cap and the middle portion together and then subtracting that value from the height of the image
	 * @alias Titanium_UI_TabbedBar.backgroundTopCap
	 * @property {Float}
	 */
	this.backgroundTopCap = 0.0
	/**
	 * Get the End caps specify the portion of an image that should not be resized when an image is stretched. This technique is used to implement buttons and other resizable image-based interface elements. When a button with end caps is resized, the resizing occurs only in the middle of the button, in the region between the end caps. The end caps themselves keep their original size and appearance. This property specifies the size of the top end cap. The middle (stretchable) portion is assumed to be 1 pixel wide. The bottom end cap is therefore computed by adding the size of the top end cap and the middle portion together and then subtracting that value from the height of the image
	 * @alias Titanium_UI_TabbedBar.getBackgroundTopCap
	 * @return {Float}
	 */
	this.getBackgroundTopCap = function() { return this.backgroundTopCap; }
	/**
	 * Set the End caps specify the portion of an image that should not be resized when an image is stretched. This technique is used to implement buttons and other resizable image-based interface elements. When a button with end caps is resized, the resizing occurs only in the middle of the button, in the region between the end caps. The end caps themselves keep their original size and appearance. This property specifies the size of the top end cap. The middle (stretchable) portion is assumed to be 1 pixel wide. The bottom end cap is therefore computed by adding the size of the top end cap and the middle portion together and then subtracting that value from the height of the image
	 * @param {Float} value New value to set.
	 * @alias Titanium_UI_TabbedBar.setBackgroundTopCap
	 */
	this.setBackgroundTopCap = function(value) { this.backgroundTopCap = value; }
	/**
	 * the border color of the view
	 * @alias Titanium_UI_TabbedBar.borderColor
	 * @property {String}
	 */
	this.borderColor = ''
	/**
	 * Get the the border color of the view
	 * @alias Titanium_UI_TabbedBar.getBorderColor
	 * @return {String}
	 */
	this.getBorderColor = function() { return this.borderColor; }
	/**
	 * Set the the border color of the view
	 * @param {String} value New value to set.
	 * @alias Titanium_UI_TabbedBar.setBorderColor
	 */
	this.setBorderColor = function(value) { this.borderColor = value; }
	/**
	 * the border radius of the view
	 * @alias Titanium_UI_TabbedBar.borderRadius
	 * @property {Float}
	 */
	this.borderRadius = 0.0
	/**
	 * Get the the border radius of the view
	 * @alias Titanium_UI_TabbedBar.getBorderRadius
	 * @return {Float}
	 */
	this.getBorderRadius = function() { return this.borderRadius; }
	/**
	 * Set the the border radius of the view
	 * @param {Float} value New value to set.
	 * @alias Titanium_UI_TabbedBar.setBorderRadius
	 */
	this.setBorderRadius = function(value) { this.borderRadius = value; }
	/**
	 * the border width of the view
	 * @alias Titanium_UI_TabbedBar.borderWidth
	 * @property {Float}
	 */
	this.borderWidth = 0.0
	/**
	 * Get the the border width of the view
	 * @alias Titanium_UI_TabbedBar.getBorderWidth
	 * @return {Float}
	 */
	this.getBorderWidth = function() { return this.borderWidth; }
	/**
	 * Set the the border width of the view
	 * @param {Float} value New value to set.
	 * @alias Titanium_UI_TabbedBar.setBorderWidth
	 */
	this.setBorderWidth = function(value) { this.borderWidth = value; }
	/**
	 * property for the view bottom position. This position is relative to the view's parent. Can be either a float value or a dimension string ie 'auto' (default), '50%' (iPhone only).
	 * @alias Titanium_UI_TabbedBar.bottom
	 * @property {Float,String}
	 */
	this.bottom = 0.0
	/**
	 * Get the property for the view bottom position. This position is relative to the view's parent. Can be either a float value or a dimension string ie 'auto' (default), '50%' (iPhone only).
	 * @alias Titanium_UI_TabbedBar.getBottom
	 * @return {Float,String}
	 */
	this.getBottom = function() { return this.bottom; }
	/**
	 * Set the property for the view bottom position. This position is relative to the view's parent. Can be either a float value or a dimension string ie 'auto' (default), '50%' (iPhone only).
	 * @param {Float,String} value New value to set.
	 * @alias Titanium_UI_TabbedBar.setBottom
	 */
	this.setBottom = function(value) { this.bottom = value; }
	/**
	 * a dictionary with properties x and y to indicate the center of the views position relative to the parent view
	 * @alias Titanium_UI_TabbedBar.center
	 * @property {Object}
	 */
	this.center = {}
	/**
	 * Get the a dictionary with properties x and y to indicate the center of the views position relative to the parent view
	 * @alias Titanium_UI_TabbedBar.getCenter
	 * @return {Object}
	 */
	this.getCenter = function() { return this.center; }
	/**
	 * Set the a dictionary with properties x and y to indicate the center of the views position relative to the parent view
	 * @param {Object} value New value to set.
	 * @alias Titanium_UI_TabbedBar.setCenter
	 */
	this.setCenter = function(value) { this.center = value; }
	/**
	 * Set true if you want a view to be focusable when navigating with the trackball or D-Pad. Default: false. (Android Only)
	 * @alias Titanium_UI_TabbedBar.focusable
	 * @property {Boolean}
	 */
	this.focusable = false
	/**
	 * Get the Set true if you want a view to be focusable when navigating with the trackball or D-Pad. Default: false. (Android Only)
	 * @alias Titanium_UI_TabbedBar.getFocusable
	 * @return {Boolean}
	 */
	this.getFocusable = function() { return this.focusable; }
	/**
	 * Set the Set true if you want a view to be focusable when navigating with the trackball or D-Pad. Default: false. (Android Only)
	 * @param {Boolean} value New value to set.
	 * @alias Titanium_UI_TabbedBar.setFocusable
	 */
	this.setFocusable = function(value) { this.focusable = value; }
	/**
	 * the font family
	 * @alias Titanium_UI_TabbedBar.font-family
	 * @property {String}
	 */
	this.font-family = ''
	/**
	 * Get the the font family
	 * @alias Titanium_UI_TabbedBar.getFont-family
	 * @return {String}
	 */
	this.getFont-family = function() { return this.font-family; }
	/**
	 * Set the the font family
	 * @param {String} value New value to set.
	 * @alias Titanium_UI_TabbedBar.setFont-family
	 */
	this.setFont-family = function(value) { this.font-family = value; }
	/**
	 * the font size
	 * @alias Titanium_UI_TabbedBar.font-size
	 * @property {String}
	 */
	this.font-size = ''
	/**
	 * Get the the font size
	 * @alias Titanium_UI_TabbedBar.getFont-size
	 * @return {String}
	 */
	this.getFont-size = function() { return this.font-size; }
	/**
	 * Set the the font size
	 * @param {String} value New value to set.
	 * @alias Titanium_UI_TabbedBar.setFont-size
	 */
	this.setFont-size = function(value) { this.font-size = value; }
	/**
	 * the font style, either normal or italics
	 * @alias Titanium_UI_TabbedBar.font-style
	 * @property {String}
	 */
	this.font-style = ''
	/**
	 * Get the the font style, either normal or italics
	 * @alias Titanium_UI_TabbedBar.getFont-style
	 * @return {String}
	 */
	this.getFont-style = function() { return this.font-style; }
	/**
	 * Set the the font style, either normal or italics
	 * @param {String} value New value to set.
	 * @alias Titanium_UI_TabbedBar.setFont-style
	 */
	this.setFont-style = function(value) { this.font-style = value; }
	/**
	 * the font weight, either normal or bold
	 * @alias Titanium_UI_TabbedBar.font-weight
	 * @property {String}
	 */
	this.font-weight = ''
	/**
	 * Get the the font weight, either normal or bold
	 * @alias Titanium_UI_TabbedBar.getFont-weight
	 * @return {String}
	 */
	this.getFont-weight = function() { return this.font-weight; }
	/**
	 * Set the the font weight, either normal or bold
	 * @param {String} value New value to set.
	 * @alias Titanium_UI_TabbedBar.setFont-weight
	 */
	this.setFont-weight = function(value) { this.font-weight = value; }
	/**
	 * property for the view height. Can be either a float value or a dimension string ie 'auto' (default), '50%' (iPhone only).
	 * @alias Titanium_UI_TabbedBar.height
	 * @property {Float,String}
	 */
	this.height = 0.0
	/**
	 * Get the property for the view height. Can be either a float value or a dimension string ie 'auto' (default), '50%' (iPhone only).
	 * @alias Titanium_UI_TabbedBar.getHeight
	 * @return {Float,String}
	 */
	this.getHeight = function() { return this.height; }
	/**
	 * Set the property for the view height. Can be either a float value or a dimension string ie 'auto' (default), '50%' (iPhone only).
	 * @param {Float,String} value New value to set.
	 * @alias Titanium_UI_TabbedBar.setHeight
	 */
	this.setHeight = function(value) { this.height = value; }
	/**
	 * the selected index
	 * @alias Titanium_UI_TabbedBar.index
	 * @property {Integer}
	 */
	this.index = 0
	/**
	 * Get the the selected index
	 * @alias Titanium_UI_TabbedBar.getIndex
	 * @return {Integer}
	 */
	this.getIndex = function() { return this.index; }
	/**
	 * Set the the selected index
	 * @param {Integer} value New value to set.
	 * @alias Titanium_UI_TabbedBar.setIndex
	 */
	this.setIndex = function(value) { this.index = value; }
	/**
	 * the array of labels for the tabbed bar. each object should have the properties title, image, width and enabled.
	 * @alias Titanium_UI_TabbedBar.labels
	 * @property {Array}
	 */
	this.labels = []
	/**
	 * Get the the array of labels for the tabbed bar. each object should have the properties title, image, width and enabled.
	 * @alias Titanium_UI_TabbedBar.getLabels
	 * @return {Array}
	 */
	this.getLabels = function() { return this.labels; }
	/**
	 * Set the the array of labels for the tabbed bar. each object should have the properties title, image, width and enabled.
	 * @param {Array} value New value to set.
	 * @alias Titanium_UI_TabbedBar.setLabels
	 */
	this.setLabels = function(value) { this.labels = value; }
	/**
	 * property for the view left position. This position is relative to the view's parent. Can be either a float value or a dimension string ie 'auto' (default), '50%' (iPhone only).
	 * @alias Titanium_UI_TabbedBar.left
	 * @property {Float,String}
	 */
	this.left = 0.0
	/**
	 * Get the property for the view left position. This position is relative to the view's parent. Can be either a float value or a dimension string ie 'auto' (default), '50%' (iPhone only).
	 * @alias Titanium_UI_TabbedBar.getLeft
	 * @return {Float,String}
	 */
	this.getLeft = function() { return this.left; }
	/**
	 * Set the property for the view left position. This position is relative to the view's parent. Can be either a float value or a dimension string ie 'auto' (default), '50%' (iPhone only).
	 * @param {Float,String} value New value to set.
	 * @alias Titanium_UI_TabbedBar.setLeft
	 */
	this.setLeft = function(value) { this.left = value; }
	/**
	 * the opacity from 0.0-1.0
	 * @alias Titanium_UI_TabbedBar.opacity
	 * @property {Float}
	 */
	this.opacity = 0.0
	/**
	 * Get the the opacity from 0.0-1.0
	 * @alias Titanium_UI_TabbedBar.getOpacity
	 * @return {Float}
	 */
	this.getOpacity = function() { return this.opacity; }
	/**
	 * Set the the opacity from 0.0-1.0
	 * @param {Float} value New value to set.
	 * @alias Titanium_UI_TabbedBar.setOpacity
	 */
	this.setOpacity = function(value) { this.opacity = value; }
	/**
	 * property for the view right position. This position is relative to the view's parent. Can be either a float value or a dimension string ie 'auto' (default), '50%' (iPhone only).
	 * @alias Titanium_UI_TabbedBar.right
	 * @property {Float,String}
	 */
	this.right = 0.0
	/**
	 * Get the property for the view right position. This position is relative to the view's parent. Can be either a float value or a dimension string ie 'auto' (default), '50%' (iPhone only).
	 * @alias Titanium_UI_TabbedBar.getRight
	 * @return {Float,String}
	 */
	this.getRight = function() { return this.right; }
	/**
	 * Set the property for the view right position. This position is relative to the view's parent. Can be either a float value or a dimension string ie 'auto' (default), '50%' (iPhone only).
	 * @param {Float,String} value New value to set.
	 * @alias Titanium_UI_TabbedBar.setRight
	 */
	this.setRight = function(value) { this.right = value; }
	/**
	 * the size of the view as a dictionary of width and height properties
	 * @alias Titanium_UI_TabbedBar.size
	 * @property {Object}
	 */
	this.size = {}
	/**
	 * Get the the size of the view as a dictionary of width and height properties
	 * @alias Titanium_UI_TabbedBar.getSize
	 * @return {Object}
	 */
	this.getSize = function() { return this.size; }
	/**
	 * Set the the size of the view as a dictionary of width and height properties
	 * @param {Object} value New value to set.
	 * @alias Titanium_UI_TabbedBar.setSize
	 */
	this.setSize = function(value) { this.size = value; }
	/**
	 * One of Titanium.UI.Android.SOFT_KEYBOARD_DEFAULT_ON_FOCUS, Titanium.UI.Android.SOFT_KEYBOARD_HIDE_ON_FOCUS, or Titanium.UI.Android.SOFT_KEYBOARD_SHOW_ON_FOCUS. (Android only)
	 * @alias Titanium_UI_TabbedBar.softKeyboardOnFocus
	 * @property {Integer}
	 */
	this.softKeyboardOnFocus = 0
	/**
	 * Get the One of Titanium.UI.Android.SOFT_KEYBOARD_DEFAULT_ON_FOCUS, Titanium.UI.Android.SOFT_KEYBOARD_HIDE_ON_FOCUS, or Titanium.UI.Android.SOFT_KEYBOARD_SHOW_ON_FOCUS. (Android only)
	 * @alias Titanium_UI_TabbedBar.getSoftKeyboardOnFocus
	 * @return {Integer}
	 */
	this.getSoftKeyboardOnFocus = function() { return this.softKeyboardOnFocus; }
	/**
	 * Set the One of Titanium.UI.Android.SOFT_KEYBOARD_DEFAULT_ON_FOCUS, Titanium.UI.Android.SOFT_KEYBOARD_HIDE_ON_FOCUS, or Titanium.UI.Android.SOFT_KEYBOARD_SHOW_ON_FOCUS. (Android only)
	 * @param {Integer} value New value to set.
	 * @alias Titanium_UI_TabbedBar.setSoftKeyboardOnFocus
	 */
	this.setSoftKeyboardOnFocus = function(value) { this.softKeyboardOnFocus = value; }
	/**
	 * the style of the tabbed bar
	 * @alias Titanium_UI_TabbedBar.style
	 * @property {Integer}
	 */
	this.style = 0
	/**
	 * Get the the style of the tabbed bar
	 * @alias Titanium_UI_TabbedBar.getStyle
	 * @return {Integer}
	 */
	this.getStyle = function() { return this.style; }
	/**
	 * Set the the style of the tabbed bar
	 * @param {Integer} value New value to set.
	 * @alias Titanium_UI_TabbedBar.setStyle
	 */
	this.setStyle = function(value) { this.style = value; }
	/**
	 * property for the view top position. This position is relative to the view's parent. Can be either a float value or a dimension string ie 'auto' (default), '50%' (iPhone only).
	 * @alias Titanium_UI_TabbedBar.top
	 * @property {Float,String}
	 */
	this.top = 0.0
	/**
	 * Get the property for the view top position. This position is relative to the view's parent. Can be either a float value or a dimension string ie 'auto' (default), '50%' (iPhone only).
	 * @alias Titanium_UI_TabbedBar.getTop
	 * @return {Float,String}
	 */
	this.getTop = function() { return this.top; }
	/**
	 * Set the property for the view top position. This position is relative to the view's parent. Can be either a float value or a dimension string ie 'auto' (default), '50%' (iPhone only).
	 * @param {Float,String} value New value to set.
	 * @alias Titanium_UI_TabbedBar.setTop
	 */
	this.setTop = function(value) { this.top = value; }
	/**
	 * a boolean indicating if the view should receive touch events (true, default) or forward them to peers (false)
	 * @alias Titanium_UI_TabbedBar.touchEnabled
	 * @property {Boolean}
	 */
	this.touchEnabled = false
	/**
	 * Get the a boolean indicating if the view should receive touch events (true, default) or forward them to peers (false)
	 * @alias Titanium_UI_TabbedBar.getTouchEnabled
	 * @return {Boolean}
	 */
	this.getTouchEnabled = function() { return this.touchEnabled; }
	/**
	 * Set the a boolean indicating if the view should receive touch events (true, default) or forward them to peers (false)
	 * @param {Boolean} value New value to set.
	 * @alias Titanium_UI_TabbedBar.setTouchEnabled
	 */
	this.setTouchEnabled = function(value) { this.touchEnabled = value; }
	/**
	 * the transformation matrix to apply to the view
	 * @alias Titanium_UI_TabbedBar.transform
	 * @property {Object}
	 */
	this.transform = {}
	/**
	 * Get the the transformation matrix to apply to the view
	 * @alias Titanium_UI_TabbedBar.getTransform
	 * @return {Object}
	 */
	this.getTransform = function() { return this.transform; }
	/**
	 * Set the the transformation matrix to apply to the view
	 * @param {Object} value New value to set.
	 * @alias Titanium_UI_TabbedBar.setTransform
	 */
	this.setTransform = function(value) { this.transform = value; }
	/**
	 * a boolean of the visibility of the view
	 * @alias Titanium_UI_TabbedBar.visible
	 * @property {Boolean}
	 */
	this.visible = false
	/**
	 * Get the a boolean of the visibility of the view
	 * @alias Titanium_UI_TabbedBar.getVisible
	 * @return {Boolean}
	 */
	this.getVisible = function() { return this.visible; }
	/**
	 * Set the a boolean of the visibility of the view
	 * @param {Boolean} value New value to set.
	 * @alias Titanium_UI_TabbedBar.setVisible
	 */
	this.setVisible = function(value) { this.visible = value; }
	/**
	 * property for the view width. Can be either a float value or a dimension string ie 'auto' (default), '50%' (iPhone only).
	 * @alias Titanium_UI_TabbedBar.width
	 * @property {Float,String}
	 */
	this.width = 0.0
	/**
	 * Get the property for the view width. Can be either a float value or a dimension string ie 'auto' (default), '50%' (iPhone only).
	 * @alias Titanium_UI_TabbedBar.getWidth
	 * @return {Float,String}
	 */
	this.getWidth = function() { return this.width; }
	/**
	 * Set the property for the view width. Can be either a float value or a dimension string ie 'auto' (default), '50%' (iPhone only).
	 * @param {Float,String} value New value to set.
	 * @alias Titanium_UI_TabbedBar.setWidth
	 */
	this.setWidth = function(value) { this.width = value; }
	/**
	 * the z index position relative to other sibling views
	 * @alias Titanium_UI_TabbedBar.zIndex
	 * @property {Integer}
	 */
	this.zIndex = 0
	/**
	 * Get the the z index position relative to other sibling views
	 * @alias Titanium_UI_TabbedBar.getZIndex
	 * @return {Integer}
	 */
	this.getZIndex = function() { return this.zIndex; }
	/**
	 * Set the the z index position relative to other sibling views
	 * @param {Integer} value New value to set.
	 * @alias Titanium_UI_TabbedBar.setZIndex
	 */
	this.setZIndex = function(value) { this.zIndex = value; }
	/**
	 * add a child to the view hierarchy
	 * @param {Object} view the view to add to this views hiearchy
	 * @alias Titanium_UI_TabbedBar.add
	 */
	this.add = function add(view) { }
	/**
	 * add an event listener for the instance to receive view triggered events
	 * @param {String} name name of the event
	 * @param {Function} callback callback function to invoke when the event is fired
	 * @alias Titanium_UI_TabbedBar.addEventListener
	 */
	this.addEventListener = function addEventListener(name,callback) { }
	/**
	 * animate the view
	 * @param {Object} obj either a dictionary of animation properties or an Animation object
	 * @param {Function} callback function to be invoked upon completion of the animation
	 * @alias Titanium_UI_TabbedBar.animate
	 */
	this.animate = function animate(obj,callback) { }
	/**
	 * fire a synthesized event to the views listener
	 * @param {String} name name of the event
	 * @param {Object} event event object
	 * @alias Titanium_UI_TabbedBar.fireEvent
	 */
	this.fireEvent = function fireEvent(name,event) { }
	/**
	 * hide the view
	 * @alias Titanium_UI_TabbedBar.hide
	 */
	this.hide = function hide() { }
	/**
	 * remove a previously add view from the view hiearchy
	 * @param {Object} view the view to remove from this views hiearchy
	 * @alias Titanium_UI_TabbedBar.remove
	 */
	this.remove = function remove(view) { }
	/**
	 * remove a previously added event listener
	 * @param {String} name name of the event
	 * @param {Function} callback callback function passed in addEventListener
	 * @alias Titanium_UI_TabbedBar.removeEventListener
	 */
	this.removeEventListener = function removeEventListener(name,callback) { }
	/**
	 * make the view visible
	 * @alias Titanium_UI_TabbedBar.show
	 */
	this.show = function show() { }
	/**
	 * return a Blob image of the rendered view
	 * @param {Function} f function to be invoked upon completion. if non-null, this method will be performed asynchronously. if null, it will be performed immediately
	 * @alias Titanium_UI_TabbedBar.toImage
	 * @return {Object}
	 */
	this.toImage = function toImage(f) { return {}; }
};

/**
 * A Table View allows you to create a scrollable table of content in a list-based fashion. The Table View is created by the method Titanium.UI.createTableView.
 * @since 0.8
 */
function Titanium_UI_TableView() {
	/**
	 * true if the rows can be selected
	 * @alias Titanium_UI_TableView.allowsSelection
	 * @property {Boolean}
	 */
	this.allowsSelection = false
	/**
	 * Get the true if the rows can be selected
	 * @alias Titanium_UI_TableView.getAllowsSelection
	 * @return {Boolean}
	 */
	this.getAllowsSelection = function() { return this.allowsSelection; }
	/**
	 * Set the true if the rows can be selected
	 * @param {Boolean} value New value to set.
	 * @alias Titanium_UI_TableView.setAllowsSelection
	 */
	this.setAllowsSelection = function(value) { this.allowsSelection = value; }
	/**
	 * a dictionary with properties x and y to indicate the anchor point value. anchor specifies the position by which animation should occur. center is 0.5, 0.5
	 * @alias Titanium_UI_TableView.anchorPoint
	 * @property {Object}
	 */
	this.anchorPoint = {}
	/**
	 * Get the a dictionary with properties x and y to indicate the anchor point value. anchor specifies the position by which animation should occur. center is 0.5, 0.5
	 * @alias Titanium_UI_TableView.getAnchorPoint
	 * @return {Object}
	 */
	this.getAnchorPoint = function() { return this.anchorPoint; }
	/**
	 * Set the a dictionary with properties x and y to indicate the anchor point value. anchor specifies the position by which animation should occur. center is 0.5, 0.5
	 * @param {Object} value New value to set.
	 * @alias Titanium_UI_TableView.setAnchorPoint
	 */
	this.setAnchorPoint = function(value) { this.anchorPoint = value; }
	/**
	 * read-only object with x and y properties of where the view is during animation
	 * @alias Titanium_UI_TableView.animatedCenterPoint
	 * @property {Object}
	 */
	this.animatedCenterPoint = {}
	/**
	 * Get the read-only object with x and y properties of where the view is during animation
	 * @alias Titanium_UI_TableView.getAnimatedCenterPoint
	 * @return {Object}
	 */
	this.getAnimatedCenterPoint = function() { return this.animatedCenterPoint; }
	/**
	 * Set the read-only object with x and y properties of where the view is during animation
	 * @param {Object} value New value to set.
	 * @alias Titanium_UI_TableView.setAnimatedCenterPoint
	 */
	this.setAnimatedCenterPoint = function(value) { this.animatedCenterPoint = value; }
	/**
	 * the background color of the table view
	 * @alias Titanium_UI_TableView.backgroundColor
	 * @property {String}
	 */
	this.backgroundColor = ''
	/**
	 * Get the the background color of the table view
	 * @alias Titanium_UI_TableView.getBackgroundColor
	 * @return {String}
	 */
	this.getBackgroundColor = function() { return this.backgroundColor; }
	/**
	 * Set the the background color of the table view
	 * @param {String} value New value to set.
	 * @alias Titanium_UI_TableView.setBackgroundColor
	 */
	this.setBackgroundColor = function(value) { this.backgroundColor = value; }
	/**
	 * the disabled background color of the view. (Android)
	 * @alias Titanium_UI_TableView.backgroundDisabledColor
	 * @property {String}
	 */
	this.backgroundDisabledColor = ''
	/**
	 * Get the the disabled background color of the view. (Android)
	 * @alias Titanium_UI_TableView.getBackgroundDisabledColor
	 * @return {String}
	 */
	this.getBackgroundDisabledColor = function() { return this.backgroundDisabledColor; }
	/**
	 * Set the the disabled background color of the view. (Android)
	 * @param {String} value New value to set.
	 * @alias Titanium_UI_TableView.setBackgroundDisabledColor
	 */
	this.setBackgroundDisabledColor = function(value) { this.backgroundDisabledColor = value; }
	/**
	 * the disabled background image url of the view. (Android)
	 * @alias Titanium_UI_TableView.backgroundDisabledImage
	 * @property {String}
	 */
	this.backgroundDisabledImage = ''
	/**
	 * Get the the disabled background image url of the view. (Android)
	 * @alias Titanium_UI_TableView.getBackgroundDisabledImage
	 * @return {String}
	 */
	this.getBackgroundDisabledImage = function() { return this.backgroundDisabledImage; }
	/**
	 * Set the the disabled background image url of the view. (Android)
	 * @param {String} value New value to set.
	 * @alias Titanium_UI_TableView.setBackgroundDisabledImage
	 */
	this.setBackgroundDisabledImage = function(value) { this.backgroundDisabledImage = value; }
	/**
	 * the focused background color of the view. focusable must be true for normal views. (Android)
	 * @alias Titanium_UI_TableView.backgroundFocusedColor
	 * @property {String}
	 */
	this.backgroundFocusedColor = ''
	/**
	 * Get the the focused background color of the view. focusable must be true for normal views. (Android)
	 * @alias Titanium_UI_TableView.getBackgroundFocusedColor
	 * @return {String}
	 */
	this.getBackgroundFocusedColor = function() { return this.backgroundFocusedColor; }
	/**
	 * Set the the focused background color of the view. focusable must be true for normal views. (Android)
	 * @param {String} value New value to set.
	 * @alias Titanium_UI_TableView.setBackgroundFocusedColor
	 */
	this.setBackgroundFocusedColor = function(value) { this.backgroundFocusedColor = value; }
	/**
	 * the focused background image url of the view. focusable must be true for normal views. (Android)
	 * @alias Titanium_UI_TableView.backgroundFocusedImage
	 * @property {String}
	 */
	this.backgroundFocusedImage = ''
	/**
	 * Get the the focused background image url of the view. focusable must be true for normal views. (Android)
	 * @alias Titanium_UI_TableView.getBackgroundFocusedImage
	 * @return {String}
	 */
	this.getBackgroundFocusedImage = function() { return this.backgroundFocusedImage; }
	/**
	 * Set the the focused background image url of the view. focusable must be true for normal views. (Android)
	 * @param {String} value New value to set.
	 * @alias Titanium_UI_TableView.setBackgroundFocusedImage
	 */
	this.setBackgroundFocusedImage = function(value) { this.backgroundFocusedImage = value; }
	/**
	 * a background gradient for the view with the properties: type,startPoint,endPoint,startRadius,endRadius,backfillStart,backfillEnd,colors.
	 * @alias Titanium_UI_TableView.backgroundGradient
	 * @property {Object}
	 */
	this.backgroundGradient = {}
	/**
	 * Get the a background gradient for the view with the properties: type,startPoint,endPoint,startRadius,endRadius,backfillStart,backfillEnd,colors.
	 * @alias Titanium_UI_TableView.getBackgroundGradient
	 * @return {Object}
	 */
	this.getBackgroundGradient = function() { return this.backgroundGradient; }
	/**
	 * Set the a background gradient for the view with the properties: type,startPoint,endPoint,startRadius,endRadius,backfillStart,backfillEnd,colors.
	 * @param {Object} value New value to set.
	 * @alias Titanium_UI_TableView.setBackgroundGradient
	 */
	this.setBackgroundGradient = function(value) { this.backgroundGradient = value; }
	/**
	 * the background image to render in the background of the table view
	 * @alias Titanium_UI_TableView.backgroundImage
	 * @property {String}
	 */
	this.backgroundImage = ''
	/**
	 * Get the the background image to render in the background of the table view
	 * @alias Titanium_UI_TableView.getBackgroundImage
	 * @return {String}
	 */
	this.getBackgroundImage = function() { return this.backgroundImage; }
	/**
	 * Set the the background image to render in the background of the table view
	 * @param {String} value New value to set.
	 * @alias Titanium_UI_TableView.setBackgroundImage
	 */
	this.setBackgroundImage = function(value) { this.backgroundImage = value; }
	/**
	 * End caps specify the portion of an image that should not be resized when an image is stretched. This technique is used to implement buttons and other resizable image-based interface elements. When a button with end caps is resized, the resizing occurs only in the middle of the button, in the region between the end caps. The end caps themselves keep their original size and appearance. This property specifies the size of the left end cap. The middle (stretchable) portion is assumed to be 1 pixel wide. The right end cap is therefore computed by adding the size of the left end cap and the middle portion together and then subtracting that value from the width of the image
	 * @alias Titanium_UI_TableView.backgroundLeftCap
	 * @property {Float}
	 */
	this.backgroundLeftCap = 0.0
	/**
	 * Get the End caps specify the portion of an image that should not be resized when an image is stretched. This technique is used to implement buttons and other resizable image-based interface elements. When a button with end caps is resized, the resizing occurs only in the middle of the button, in the region between the end caps. The end caps themselves keep their original size and appearance. This property specifies the size of the left end cap. The middle (stretchable) portion is assumed to be 1 pixel wide. The right end cap is therefore computed by adding the size of the left end cap and the middle portion together and then subtracting that value from the width of the image
	 * @alias Titanium_UI_TableView.getBackgroundLeftCap
	 * @return {Float}
	 */
	this.getBackgroundLeftCap = function() { return this.backgroundLeftCap; }
	/**
	 * Set the End caps specify the portion of an image that should not be resized when an image is stretched. This technique is used to implement buttons and other resizable image-based interface elements. When a button with end caps is resized, the resizing occurs only in the middle of the button, in the region between the end caps. The end caps themselves keep their original size and appearance. This property specifies the size of the left end cap. The middle (stretchable) portion is assumed to be 1 pixel wide. The right end cap is therefore computed by adding the size of the left end cap and the middle portion together and then subtracting that value from the width of the image
	 * @param {Float} value New value to set.
	 * @alias Titanium_UI_TableView.setBackgroundLeftCap
	 */
	this.setBackgroundLeftCap = function(value) { this.backgroundLeftCap = value; }
	/**
	 * the selected background color of the view. focusable must be true for normal views. (Android)
	 * @alias Titanium_UI_TableView.backgroundSelectedColor
	 * @property {String}
	 */
	this.backgroundSelectedColor = ''
	/**
	 * Get the the selected background color of the view. focusable must be true for normal views. (Android)
	 * @alias Titanium_UI_TableView.getBackgroundSelectedColor
	 * @return {String}
	 */
	this.getBackgroundSelectedColor = function() { return this.backgroundSelectedColor; }
	/**
	 * Set the the selected background color of the view. focusable must be true for normal views. (Android)
	 * @param {String} value New value to set.
	 * @alias Titanium_UI_TableView.setBackgroundSelectedColor
	 */
	this.setBackgroundSelectedColor = function(value) { this.backgroundSelectedColor = value; }
	/**
	 * the selected background image url of the view. focusable must be true for normal views. (Android)
	 * @alias Titanium_UI_TableView.backgroundSelectedImage
	 * @property {String}
	 */
	this.backgroundSelectedImage = ''
	/**
	 * Get the the selected background image url of the view. focusable must be true for normal views. (Android)
	 * @alias Titanium_UI_TableView.getBackgroundSelectedImage
	 * @return {String}
	 */
	this.getBackgroundSelectedImage = function() { return this.backgroundSelectedImage; }
	/**
	 * Set the the selected background image url of the view. focusable must be true for normal views. (Android)
	 * @param {String} value New value to set.
	 * @alias Titanium_UI_TableView.setBackgroundSelectedImage
	 */
	this.setBackgroundSelectedImage = function(value) { this.backgroundSelectedImage = value; }
	/**
	 * End caps specify the portion of an image that should not be resized when an image is stretched. This technique is used to implement buttons and other resizable image-based interface elements. When a button with end caps is resized, the resizing occurs only in the middle of the button, in the region between the end caps. The end caps themselves keep their original size and appearance. This property specifies the size of the top end cap. The middle (stretchable) portion is assumed to be 1 pixel wide. The bottom end cap is therefore computed by adding the size of the top end cap and the middle portion together and then subtracting that value from the height of the image
	 * @alias Titanium_UI_TableView.backgroundTopCap
	 * @property {Float}
	 */
	this.backgroundTopCap = 0.0
	/**
	 * Get the End caps specify the portion of an image that should not be resized when an image is stretched. This technique is used to implement buttons and other resizable image-based interface elements. When a button with end caps is resized, the resizing occurs only in the middle of the button, in the region between the end caps. The end caps themselves keep their original size and appearance. This property specifies the size of the top end cap. The middle (stretchable) portion is assumed to be 1 pixel wide. The bottom end cap is therefore computed by adding the size of the top end cap and the middle portion together and then subtracting that value from the height of the image
	 * @alias Titanium_UI_TableView.getBackgroundTopCap
	 * @return {Float}
	 */
	this.getBackgroundTopCap = function() { return this.backgroundTopCap; }
	/**
	 * Set the End caps specify the portion of an image that should not be resized when an image is stretched. This technique is used to implement buttons and other resizable image-based interface elements. When a button with end caps is resized, the resizing occurs only in the middle of the button, in the region between the end caps. The end caps themselves keep their original size and appearance. This property specifies the size of the top end cap. The middle (stretchable) portion is assumed to be 1 pixel wide. The bottom end cap is therefore computed by adding the size of the top end cap and the middle portion together and then subtracting that value from the height of the image
	 * @param {Float} value New value to set.
	 * @alias Titanium_UI_TableView.setBackgroundTopCap
	 */
	this.setBackgroundTopCap = function(value) { this.backgroundTopCap = value; }
	/**
	 * the border color of the view
	 * @alias Titanium_UI_TableView.borderColor
	 * @property {String}
	 */
	this.borderColor = ''
	/**
	 * Get the the border color of the view
	 * @alias Titanium_UI_TableView.getBorderColor
	 * @return {String}
	 */
	this.getBorderColor = function() { return this.borderColor; }
	/**
	 * Set the the border color of the view
	 * @param {String} value New value to set.
	 * @alias Titanium_UI_TableView.setBorderColor
	 */
	this.setBorderColor = function(value) { this.borderColor = value; }
	/**
	 * the border radius of the view
	 * @alias Titanium_UI_TableView.borderRadius
	 * @property {Float}
	 */
	this.borderRadius = 0.0
	/**
	 * Get the the border radius of the view
	 * @alias Titanium_UI_TableView.getBorderRadius
	 * @return {Float}
	 */
	this.getBorderRadius = function() { return this.borderRadius; }
	/**
	 * Set the the border radius of the view
	 * @param {Float} value New value to set.
	 * @alias Titanium_UI_TableView.setBorderRadius
	 */
	this.setBorderRadius = function(value) { this.borderRadius = value; }
	/**
	 * the border width of the view
	 * @alias Titanium_UI_TableView.borderWidth
	 * @property {Float}
	 */
	this.borderWidth = 0.0
	/**
	 * Get the the border width of the view
	 * @alias Titanium_UI_TableView.getBorderWidth
	 * @return {Float}
	 */
	this.getBorderWidth = function() { return this.borderWidth; }
	/**
	 * Set the the border width of the view
	 * @param {Float} value New value to set.
	 * @alias Titanium_UI_TableView.setBorderWidth
	 */
	this.setBorderWidth = function(value) { this.borderWidth = value; }
	/**
	 * property for the view bottom position. This position is relative to the view's parent. Can be either a float value or a dimension string ie 'auto' (default), '50%' (iPhone only).
	 * @alias Titanium_UI_TableView.bottom
	 * @property {Float,String}
	 */
	this.bottom = 0.0
	/**
	 * Get the property for the view bottom position. This position is relative to the view's parent. Can be either a float value or a dimension string ie 'auto' (default), '50%' (iPhone only).
	 * @alias Titanium_UI_TableView.getBottom
	 * @return {Float,String}
	 */
	this.getBottom = function() { return this.bottom; }
	/**
	 * Set the property for the view bottom position. This position is relative to the view's parent. Can be either a float value or a dimension string ie 'auto' (default), '50%' (iPhone only).
	 * @param {Float,String} value New value to set.
	 * @alias Titanium_UI_TableView.setBottom
	 */
	this.setBottom = function(value) { this.bottom = value; }
	/**
	 * a dictionary with properties x and y to indicate the center of the views position relative to the parent view
	 * @alias Titanium_UI_TableView.center
	 * @property {Object}
	 */
	this.center = {}
	/**
	 * Get the a dictionary with properties x and y to indicate the center of the views position relative to the parent view
	 * @alias Titanium_UI_TableView.getCenter
	 * @return {Object}
	 */
	this.getCenter = function() { return this.center; }
	/**
	 * Set the a dictionary with properties x and y to indicate the center of the views position relative to the parent view
	 * @param {Object} value New value to set.
	 * @alias Titanium_UI_TableView.setCenter
	 */
	this.setCenter = function(value) { this.center = value; }
	/**
	 * the data array of objects to be used for the rows of the table view
	 * @alias Titanium_UI_TableView.data
	 * @property {Array}
	 */
	this.data = []
	/**
	 * Get the the data array of objects to be used for the rows of the table view
	 * @alias Titanium_UI_TableView.getData
	 * @return {Array}
	 */
	this.getData = function() { return this.data; }
	/**
	 * Set the the data array of objects to be used for the rows of the table view
	 * @param {Array} value New value to set.
	 * @alias Titanium_UI_TableView.setData
	 */
	this.setData = function(value) { this.data = value; }
	/**
	 * allow the table view to be editable (this must be true for swipe-to-delete)
	 * @alias Titanium_UI_TableView.editable
	 * @property {Boolean}
	 */
	this.editable = false
	/**
	 * Get the allow the table view to be editable (this must be true for swipe-to-delete)
	 * @alias Titanium_UI_TableView.getEditable
	 * @return {Boolean}
	 */
	this.getEditable = function() { return this.editable; }
	/**
	 * Set the allow the table view to be editable (this must be true for swipe-to-delete)
	 * @param {Boolean} value New value to set.
	 * @alias Titanium_UI_TableView.setEditable
	 */
	this.setEditable = function(value) { this.editable = value; }
	/**
	 * boolean to control the editing state of the table view
	 * @alias Titanium_UI_TableView.editing
	 * @property {Boolean}
	 */
	this.editing = false
	/**
	 * Get the boolean to control the editing state of the table view
	 * @alias Titanium_UI_TableView.getEditing
	 * @return {Boolean}
	 */
	this.getEditing = function() { return this.editing; }
	/**
	 * Set the boolean to control the editing state of the table view
	 * @param {Boolean} value New value to set.
	 * @alias Titanium_UI_TableView.setEditing
	 */
	this.setEditing = function(value) { this.editing = value; }
	/**
	 * the filter attribute to be used when searching. this property maps to your data object or a property on the row object
	 * @alias Titanium_UI_TableView.filterAttribute
	 * @property {String}
	 */
	this.filterAttribute = ''
	/**
	 * Get the the filter attribute to be used when searching. this property maps to your data object or a property on the row object
	 * @alias Titanium_UI_TableView.getFilterAttribute
	 * @return {String}
	 */
	this.getFilterAttribute = function() { return this.filterAttribute; }
	/**
	 * Set the the filter attribute to be used when searching. this property maps to your data object or a property on the row object
	 * @param {String} value New value to set.
	 * @alias Titanium_UI_TableView.setFilterAttribute
	 */
	this.setFilterAttribute = function(value) { this.filterAttribute = value; }
	/**
	 * boolean to indicate if the search should be case sensitive or case insensitive (default)
	 * @alias Titanium_UI_TableView.filterCaseInsensitive
	 * @property {Boolean}
	 */
	this.filterCaseInsensitive = false
	/**
	 * Get the boolean to indicate if the search should be case sensitive or case insensitive (default)
	 * @alias Titanium_UI_TableView.getFilterCaseInsensitive
	 * @return {Boolean}
	 */
	this.getFilterCaseInsensitive = function() { return this.filterCaseInsensitive; }
	/**
	 * Set the boolean to indicate if the search should be case sensitive or case insensitive (default)
	 * @param {Boolean} value New value to set.
	 * @alias Titanium_UI_TableView.setFilterCaseInsensitive
	 */
	this.setFilterCaseInsensitive = function(value) { this.filterCaseInsensitive = value; }
	/**
	 * Set true if you want a view to be focusable when navigating with the trackball or D-Pad. Default: false. (Android Only)
	 * @alias Titanium_UI_TableView.focusable
	 * @property {Boolean}
	 */
	this.focusable = false
	/**
	 * Get the Set true if you want a view to be focusable when navigating with the trackball or D-Pad. Default: false. (Android Only)
	 * @alias Titanium_UI_TableView.getFocusable
	 * @return {Boolean}
	 */
	this.getFocusable = function() { return this.focusable; }
	/**
	 * Set the Set true if you want a view to be focusable when navigating with the trackball or D-Pad. Default: false. (Android Only)
	 * @param {Boolean} value New value to set.
	 * @alias Titanium_UI_TableView.setFocusable
	 */
	this.setFocusable = function(value) { this.focusable = value; }
	/**
	 * the font family
	 * @alias Titanium_UI_TableView.font-family
	 * @property {String}
	 */
	this.font-family = ''
	/**
	 * Get the the font family
	 * @alias Titanium_UI_TableView.getFont-family
	 * @return {String}
	 */
	this.getFont-family = function() { return this.font-family; }
	/**
	 * Set the the font family
	 * @param {String} value New value to set.
	 * @alias Titanium_UI_TableView.setFont-family
	 */
	this.setFont-family = function(value) { this.font-family = value; }
	/**
	 * the font size
	 * @alias Titanium_UI_TableView.font-size
	 * @property {String}
	 */
	this.font-size = ''
	/**
	 * Get the the font size
	 * @alias Titanium_UI_TableView.getFont-size
	 * @return {String}
	 */
	this.getFont-size = function() { return this.font-size; }
	/**
	 * Set the the font size
	 * @param {String} value New value to set.
	 * @alias Titanium_UI_TableView.setFont-size
	 */
	this.setFont-size = function(value) { this.font-size = value; }
	/**
	 * the font style, either normal or italics
	 * @alias Titanium_UI_TableView.font-style
	 * @property {String}
	 */
	this.font-style = ''
	/**
	 * Get the the font style, either normal or italics
	 * @alias Titanium_UI_TableView.getFont-style
	 * @return {String}
	 */
	this.getFont-style = function() { return this.font-style; }
	/**
	 * Set the the font style, either normal or italics
	 * @param {String} value New value to set.
	 * @alias Titanium_UI_TableView.setFont-style
	 */
	this.setFont-style = function(value) { this.font-style = value; }
	/**
	 * the font weight, either normal or bold
	 * @alias Titanium_UI_TableView.font-weight
	 * @property {String}
	 */
	this.font-weight = ''
	/**
	 * Get the the font weight, either normal or bold
	 * @alias Titanium_UI_TableView.getFont-weight
	 * @return {String}
	 */
	this.getFont-weight = function() { return this.font-weight; }
	/**
	 * Set the the font weight, either normal or bold
	 * @param {String} value New value to set.
	 * @alias Titanium_UI_TableView.setFont-weight
	 */
	this.setFont-weight = function(value) { this.font-weight = value; }
	/**
	 * the table view footer title
	 * @alias Titanium_UI_TableView.footerTitle
	 * @property {String}
	 */
	this.footerTitle = ''
	/**
	 * Get the the table view footer title
	 * @alias Titanium_UI_TableView.getFooterTitle
	 * @return {String}
	 */
	this.getFooterTitle = function() { return this.footerTitle; }
	/**
	 * Set the the table view footer title
	 * @param {String} value New value to set.
	 * @alias Titanium_UI_TableView.setFooterTitle
	 */
	this.setFooterTitle = function(value) { this.footerTitle = value; }
	/**
	 * the table view footer as a view that will be rendered instead of a label
	 * @alias Titanium_UI_TableView.footerView
	 * @property {Object}
	 */
	this.footerView = {}
	/**
	 * Get the the table view footer as a view that will be rendered instead of a label
	 * @alias Titanium_UI_TableView.getFooterView
	 * @return {Object}
	 */
	this.getFooterView = function() { return this.footerView; }
	/**
	 * Set the the table view footer as a view that will be rendered instead of a label
	 * @param {Object} value New value to set.
	 * @alias Titanium_UI_TableView.setFooterView
	 */
	this.setFooterView = function(value) { this.footerView = value; }
	/**
	 * the table view header title
	 * @alias Titanium_UI_TableView.headerTitle
	 * @property {String}
	 */
	this.headerTitle = ''
	/**
	 * Get the the table view header title
	 * @alias Titanium_UI_TableView.getHeaderTitle
	 * @return {String}
	 */
	this.getHeaderTitle = function() { return this.headerTitle; }
	/**
	 * Set the the table view header title
	 * @param {String} value New value to set.
	 * @alias Titanium_UI_TableView.setHeaderTitle
	 */
	this.setHeaderTitle = function(value) { this.headerTitle = value; }
	/**
	 * the table view header as a view that will be rendered instead of a label
	 * @alias Titanium_UI_TableView.headerView
	 * @property {Object}
	 */
	this.headerView = {}
	/**
	 * Get the the table view header as a view that will be rendered instead of a label
	 * @alias Titanium_UI_TableView.getHeaderView
	 * @return {Object}
	 */
	this.getHeaderView = function() { return this.headerView; }
	/**
	 * Set the the table view header as a view that will be rendered instead of a label
	 * @param {Object} value New value to set.
	 * @alias Titanium_UI_TableView.setHeaderView
	 */
	this.setHeaderView = function(value) { this.headerView = value; }
	/**
	 * property for the view height. Can be either a float value or a dimension string ie 'auto' (default), '50%' (iPhone only).
	 * @alias Titanium_UI_TableView.height
	 * @property {Float,String}
	 */
	this.height = 0.0
	/**
	 * Get the property for the view height. Can be either a float value or a dimension string ie 'auto' (default), '50%' (iPhone only).
	 * @alias Titanium_UI_TableView.getHeight
	 * @return {Float,String}
	 */
	this.getHeight = function() { return this.height; }
	/**
	 * Set the property for the view height. Can be either a float value or a dimension string ie 'auto' (default), '50%' (iPhone only).
	 * @param {Float,String} value New value to set.
	 * @alias Titanium_UI_TableView.setHeight
	 */
	this.setHeight = function(value) { this.height = value; }
	/**
	 * an array of objects (with title and index properties) to control the table view index
	 * @alias Titanium_UI_TableView.index
	 * @property {Array}
	 */
	this.index = []
	/**
	 * Get the an array of objects (with title and index properties) to control the table view index
	 * @alias Titanium_UI_TableView.getIndex
	 * @return {Array}
	 */
	this.getIndex = function() { return this.index; }
	/**
	 * Set the an array of objects (with title and index properties) to control the table view index
	 * @param {Array} value New value to set.
	 * @alias Titanium_UI_TableView.setIndex
	 */
	this.setIndex = function(value) { this.index = value; }
	/**
	 * property for the view left position. This position is relative to the view's parent. Can be either a float value or a dimension string ie 'auto' (default), '50%' (iPhone only).
	 * @alias Titanium_UI_TableView.left
	 * @property {Float,String}
	 */
	this.left = 0.0
	/**
	 * Get the property for the view left position. This position is relative to the view's parent. Can be either a float value or a dimension string ie 'auto' (default), '50%' (iPhone only).
	 * @alias Titanium_UI_TableView.getLeft
	 * @return {Float,String}
	 */
	this.getLeft = function() { return this.left; }
	/**
	 * Set the property for the view left position. This position is relative to the view's parent. Can be either a float value or a dimension string ie 'auto' (default), '50%' (iPhone only).
	 * @param {Float,String} value New value to set.
	 * @alias Titanium_UI_TableView.setLeft
	 */
	this.setLeft = function(value) { this.left = value; }
	/**
	 * max row height for table view rows
	 * @alias Titanium_UI_TableView.maxRowHeight
	 * @property {Float}
	 */
	this.maxRowHeight = 0.0
	/**
	 * Get the max row height for table view rows
	 * @alias Titanium_UI_TableView.getMaxRowHeight
	 * @return {Float}
	 */
	this.getMaxRowHeight = function() { return this.maxRowHeight; }
	/**
	 * Set the max row height for table view rows
	 * @param {Float} value New value to set.
	 * @alias Titanium_UI_TableView.setMaxRowHeight
	 */
	this.setMaxRowHeight = function(value) { this.maxRowHeight = value; }
	/**
	 * min row height for table view rows
	 * @alias Titanium_UI_TableView.minRowHeight
	 * @property {Float}
	 */
	this.minRowHeight = 0.0
	/**
	 * Get the min row height for table view rows
	 * @alias Titanium_UI_TableView.getMinRowHeight
	 * @return {Float}
	 */
	this.getMinRowHeight = function() { return this.minRowHeight; }
	/**
	 * Set the min row height for table view rows
	 * @param {Float} value New value to set.
	 * @alias Titanium_UI_TableView.setMinRowHeight
	 */
	this.setMinRowHeight = function(value) { this.minRowHeight = value; }
	/**
	 * boolean to control the moveable state of the table view
	 * @alias Titanium_UI_TableView.moving
	 * @property {Boolean}
	 */
	this.moving = false
	/**
	 * Get the boolean to control the moveable state of the table view
	 * @alias Titanium_UI_TableView.getMoving
	 * @return {Boolean}
	 */
	this.getMoving = function() { return this.moving; }
	/**
	 * Set the boolean to control the moveable state of the table view
	 * @param {Boolean} value New value to set.
	 * @alias Titanium_UI_TableView.setMoving
	 */
	this.setMoving = function(value) { this.moving = value; }
	/**
	 * the opacity from 0.0-1.0
	 * @alias Titanium_UI_TableView.opacity
	 * @property {Float}
	 */
	this.opacity = 0.0
	/**
	 * Get the the opacity from 0.0-1.0
	 * @alias Titanium_UI_TableView.getOpacity
	 * @return {Float}
	 */
	this.getOpacity = function() { return this.opacity; }
	/**
	 * Set the the opacity from 0.0-1.0
	 * @param {Float} value New value to set.
	 * @alias Titanium_UI_TableView.setOpacity
	 */
	this.setOpacity = function(value) { this.opacity = value; }
	/**
	 * property for the view right position. This position is relative to the view's parent. Can be either a float value or a dimension string ie 'auto' (default), '50%' (iPhone only).
	 * @alias Titanium_UI_TableView.right
	 * @property {Float,String}
	 */
	this.right = 0.0
	/**
	 * Get the property for the view right position. This position is relative to the view's parent. Can be either a float value or a dimension string ie 'auto' (default), '50%' (iPhone only).
	 * @alias Titanium_UI_TableView.getRight
	 * @return {Float,String}
	 */
	this.getRight = function() { return this.right; }
	/**
	 * Set the property for the view right position. This position is relative to the view's parent. Can be either a float value or a dimension string ie 'auto' (default), '50%' (iPhone only).
	 * @param {Float,String} value New value to set.
	 * @alias Titanium_UI_TableView.setRight
	 */
	this.setRight = function(value) { this.right = value; }
	/**
	 * default row height for table view rows
	 * @alias Titanium_UI_TableView.rowHeight
	 * @property {Float}
	 */
	this.rowHeight = 0.0
	/**
	 * Get the default row height for table view rows
	 * @alias Titanium_UI_TableView.getRowHeight
	 * @return {Float}
	 */
	this.getRowHeight = function() { return this.rowHeight; }
	/**
	 * Set the default row height for table view rows
	 * @param {Float} value New value to set.
	 * @alias Titanium_UI_TableView.setRowHeight
	 */
	this.setRowHeight = function(value) { this.rowHeight = value; }
	/**
	 * true (default) if tableview can be scrolled
	 * @alias Titanium_UI_TableView.scrollable
	 * @property {Boolean}
	 */
	this.scrollable = false
	/**
	 * Get the true (default) if tableview can be scrolled
	 * @alias Titanium_UI_TableView.getScrollable
	 * @return {Boolean}
	 */
	this.getScrollable = function() { return this.scrollable; }
	/**
	 * Set the true (default) if tableview can be scrolled
	 * @param {Boolean} value New value to set.
	 * @alias Titanium_UI_TableView.setScrollable
	 */
	this.setScrollable = function(value) { this.scrollable = value; }
	/**
	 * the search field to use for the table view
	 * @alias Titanium_UI_TableView.search
	 * @property {Object}
	 */
	this.search = {}
	/**
	 * Get the the search field to use for the table view
	 * @alias Titanium_UI_TableView.getSearch
	 * @return {Object}
	 */
	this.getSearch = function() { return this.search; }
	/**
	 * Set the the search field to use for the table view
	 * @param {Object} value New value to set.
	 * @alias Titanium_UI_TableView.setSearch
	 */
	this.setSearch = function(value) { this.search = value; }
	/**
	 * boolean to control the visibility of the search field
	 * @alias Titanium_UI_TableView.searchHidden
	 * @property {Boolean}
	 */
	this.searchHidden = false
	/**
	 * Get the boolean to control the visibility of the search field
	 * @alias Titanium_UI_TableView.getSearchHidden
	 * @return {Boolean}
	 */
	this.getSearchHidden = function() { return this.searchHidden; }
	/**
	 * Set the boolean to control the visibility of the search field
	 * @param {Boolean} value New value to set.
	 * @alias Titanium_UI_TableView.setSearchHidden
	 */
	this.setSearchHidden = function(value) { this.searchHidden = value; }
	/**
	 * the separator color color as a hex or named value
	 * @alias Titanium_UI_TableView.separatorColor
	 * @property {String}
	 */
	this.separatorColor = ''
	/**
	 * Get the the separator color color as a hex or named value
	 * @alias Titanium_UI_TableView.getSeparatorColor
	 * @return {String}
	 */
	this.getSeparatorColor = function() { return this.separatorColor; }
	/**
	 * Set the the separator color color as a hex or named value
	 * @param {String} value New value to set.
	 * @alias Titanium_UI_TableView.setSeparatorColor
	 */
	this.setSeparatorColor = function(value) { this.separatorColor = value; }
	/**
	 * the separator style constant. For iPhone, Titanium.UI.iPhone.TableViewSeparatorStyle
	 * @alias Titanium_UI_TableView.separatorStyle
	 * @property {Integer}
	 */
	this.separatorStyle = 0
	/**
	 * Get the the separator style constant. For iPhone, Titanium.UI.iPhone.TableViewSeparatorStyle
	 * @alias Titanium_UI_TableView.getSeparatorStyle
	 * @return {Integer}
	 */
	this.getSeparatorStyle = function() { return this.separatorStyle; }
	/**
	 * Set the the separator style constant. For iPhone, Titanium.UI.iPhone.TableViewSeparatorStyle
	 * @param {Integer} value New value to set.
	 * @alias Titanium_UI_TableView.setSeparatorStyle
	 */
	this.setSeparatorStyle = function(value) { this.separatorStyle = value; }
	/**
	 * the size of the view as a dictionary of width and height properties
	 * @alias Titanium_UI_TableView.size
	 * @property {Object}
	 */
	this.size = {}
	/**
	 * Get the the size of the view as a dictionary of width and height properties
	 * @alias Titanium_UI_TableView.getSize
	 * @return {Object}
	 */
	this.getSize = function() { return this.size; }
	/**
	 * Set the the size of the view as a dictionary of width and height properties
	 * @param {Object} value New value to set.
	 * @alias Titanium_UI_TableView.setSize
	 */
	this.setSize = function(value) { this.size = value; }
	/**
	 * One of Titanium.UI.Android.SOFT_KEYBOARD_DEFAULT_ON_FOCUS, Titanium.UI.Android.SOFT_KEYBOARD_HIDE_ON_FOCUS, or Titanium.UI.Android.SOFT_KEYBOARD_SHOW_ON_FOCUS. (Android only)
	 * @alias Titanium_UI_TableView.softKeyboardOnFocus
	 * @property {Integer}
	 */
	this.softKeyboardOnFocus = 0
	/**
	 * Get the One of Titanium.UI.Android.SOFT_KEYBOARD_DEFAULT_ON_FOCUS, Titanium.UI.Android.SOFT_KEYBOARD_HIDE_ON_FOCUS, or Titanium.UI.Android.SOFT_KEYBOARD_SHOW_ON_FOCUS. (Android only)
	 * @alias Titanium_UI_TableView.getSoftKeyboardOnFocus
	 * @return {Integer}
	 */
	this.getSoftKeyboardOnFocus = function() { return this.softKeyboardOnFocus; }
	/**
	 * Set the One of Titanium.UI.Android.SOFT_KEYBOARD_DEFAULT_ON_FOCUS, Titanium.UI.Android.SOFT_KEYBOARD_HIDE_ON_FOCUS, or Titanium.UI.Android.SOFT_KEYBOARD_SHOW_ON_FOCUS. (Android only)
	 * @param {Integer} value New value to set.
	 * @alias Titanium_UI_TableView.setSoftKeyboardOnFocus
	 */
	this.setSoftKeyboardOnFocus = function(value) { this.softKeyboardOnFocus = value; }
	/**
	 * iPhone only. the style of the table view. constant from Titanium.UI.iPhone.TableViewStyle
	 * @alias Titanium_UI_TableView.style
	 * @property {Integer}
	 */
	this.style = 0
	/**
	 * Get the iPhone only. the style of the table view. constant from Titanium.UI.iPhone.TableViewStyle
	 * @alias Titanium_UI_TableView.getStyle
	 * @return {Integer}
	 */
	this.getStyle = function() { return this.style; }
	/**
	 * Set the iPhone only. the style of the table view. constant from Titanium.UI.iPhone.TableViewStyle
	 * @param {Integer} value New value to set.
	 * @alias Titanium_UI_TableView.setStyle
	 */
	this.setStyle = function(value) { this.style = value; }
	/**
	 * property for the view top position. This position is relative to the view's parent. Can be either a float value or a dimension string ie 'auto' (default), '50%' (iPhone only).
	 * @alias Titanium_UI_TableView.top
	 * @property {Float,String}
	 */
	this.top = 0.0
	/**
	 * Get the property for the view top position. This position is relative to the view's parent. Can be either a float value or a dimension string ie 'auto' (default), '50%' (iPhone only).
	 * @alias Titanium_UI_TableView.getTop
	 * @return {Float,String}
	 */
	this.getTop = function() { return this.top; }
	/**
	 * Set the property for the view top position. This position is relative to the view's parent. Can be either a float value or a dimension string ie 'auto' (default), '50%' (iPhone only).
	 * @param {Float,String} value New value to set.
	 * @alias Titanium_UI_TableView.setTop
	 */
	this.setTop = function(value) { this.top = value; }
	/**
	 * a boolean indicating if the view should receive touch events (true, default) or forward them to peers (false)
	 * @alias Titanium_UI_TableView.touchEnabled
	 * @property {Boolean}
	 */
	this.touchEnabled = false
	/**
	 * Get the a boolean indicating if the view should receive touch events (true, default) or forward them to peers (false)
	 * @alias Titanium_UI_TableView.getTouchEnabled
	 * @return {Boolean}
	 */
	this.getTouchEnabled = function() { return this.touchEnabled; }
	/**
	 * Set the a boolean indicating if the view should receive touch events (true, default) or forward them to peers (false)
	 * @param {Boolean} value New value to set.
	 * @alias Titanium_UI_TableView.setTouchEnabled
	 */
	this.setTouchEnabled = function(value) { this.touchEnabled = value; }
	/**
	 * the transformation matrix to apply to the view
	 * @alias Titanium_UI_TableView.transform
	 * @property {Object}
	 */
	this.transform = {}
	/**
	 * Get the the transformation matrix to apply to the view
	 * @alias Titanium_UI_TableView.getTransform
	 * @return {Object}
	 */
	this.getTransform = function() { return this.transform; }
	/**
	 * Set the the transformation matrix to apply to the view
	 * @param {Object} value New value to set.
	 * @alias Titanium_UI_TableView.setTransform
	 */
	this.setTransform = function(value) { this.transform = value; }
	/**
	 * a boolean of the visibility of the view
	 * @alias Titanium_UI_TableView.visible
	 * @property {Boolean}
	 */
	this.visible = false
	/**
	 * Get the a boolean of the visibility of the view
	 * @alias Titanium_UI_TableView.getVisible
	 * @return {Boolean}
	 */
	this.getVisible = function() { return this.visible; }
	/**
	 * Set the a boolean of the visibility of the view
	 * @param {Boolean} value New value to set.
	 * @alias Titanium_UI_TableView.setVisible
	 */
	this.setVisible = function(value) { this.visible = value; }
	/**
	 * property for the view width. Can be either a float value or a dimension string ie 'auto' (default), '50%' (iPhone only).
	 * @alias Titanium_UI_TableView.width
	 * @property {Float,String}
	 */
	this.width = 0.0
	/**
	 * Get the property for the view width. Can be either a float value or a dimension string ie 'auto' (default), '50%' (iPhone only).
	 * @alias Titanium_UI_TableView.getWidth
	 * @return {Float,String}
	 */
	this.getWidth = function() { return this.width; }
	/**
	 * Set the property for the view width. Can be either a float value or a dimension string ie 'auto' (default), '50%' (iPhone only).
	 * @param {Float,String} value New value to set.
	 * @alias Titanium_UI_TableView.setWidth
	 */
	this.setWidth = function(value) { this.width = value; }
	/**
	 * the z index position relative to other sibling views
	 * @alias Titanium_UI_TableView.zIndex
	 * @property {Integer}
	 */
	this.zIndex = 0
	/**
	 * Get the the z index position relative to other sibling views
	 * @alias Titanium_UI_TableView.getZIndex
	 * @return {Integer}
	 */
	this.getZIndex = function() { return this.zIndex; }
	/**
	 * Set the the z index position relative to other sibling views
	 * @param {Integer} value New value to set.
	 * @alias Titanium_UI_TableView.setZIndex
	 */
	this.setZIndex = function(value) { this.zIndex = value; }
	/**
	 * add a child to the view hierarchy
	 * @param {Object} view the view to add to this views hiearchy
	 * @alias Titanium_UI_TableView.add
	 */
	this.add = function add(view) { }
	/**
	 * add an event listener for the instance to receive view triggered events
	 * @param {String} name name of the event
	 * @param {Function} callback callback function to invoke when the event is fired
	 * @alias Titanium_UI_TableView.addEventListener
	 */
	this.addEventListener = function addEventListener(name,callback) { }
	/**
	 * animate the view
	 * @param {Object} obj either a dictionary of animation properties or an Animation object
	 * @param {Function} callback function to be invoked upon completion of the animation
	 * @alias Titanium_UI_TableView.animate
	 */
	this.animate = function animate(obj,callback) { }
	/**
	 * append a row to the table, optionally with animation
	 * @param {Object} row row to append
	 * @param {Object} properties animation properties
	 * @alias Titanium_UI_TableView.appendRow
	 */
	this.appendRow = function appendRow(row,properties) { }
	/**
	 * delete an existing row, optionally with animation
	 * @param {Integer} row index of row to delete
	 * @param {Object} properties animation properties
	 * @alias Titanium_UI_TableView.deleteRow
	 */
	this.deleteRow = function deleteRow(row,properties) { }
	/**
	 * programmatically deselect a row
	 * @param {Integer} row row index to deselect
	 * @alias Titanium_UI_TableView.deselectRow
	 */
	this.deselectRow = function deselectRow(row) { }
	/**
	 * fire a synthesized event to the views listener
	 * @param {String} name name of the event
	 * @param {Object} event event object
	 * @alias Titanium_UI_TableView.fireEvent
	 */
	this.fireEvent = function fireEvent(name,event) { }
	/**
	 * hide the view
	 * @alias Titanium_UI_TableView.hide
	 */
	this.hide = function hide() { }
	/**
	 * insert a row before another row, optionally with animation
	 * @param {Integer} index index
	 * @param {Object} row row to insert
	 * @param {Object} properties animation properties
	 * @alias Titanium_UI_TableView.insertRowAfter
	 */
	this.insertRowAfter = function insertRowAfter(index,row,properties) { }
	/**
	 * insert a row after another row, optionally with animation
	 * @param {Integer} index index
	 * @param {Object} row row to insert
	 * @param {Object} properties animation properties
	 * @alias Titanium_UI_TableView.insertRowBefore
	 */
	this.insertRowBefore = function insertRowBefore(index,row,properties) { }
	/**
	 * remove a previously add view from the view hiearchy
	 * @param {Object} view the view to remove from this views hiearchy
	 * @alias Titanium_UI_TableView.remove
	 */
	this.remove = function remove(view) { }
	/**
	 * remove a previously added event listener
	 * @param {String} name name of the event
	 * @param {Function} callback callback function passed in addEventListener
	 * @alias Titanium_UI_TableView.removeEventListener
	 */
	this.removeEventListener = function removeEventListener(name,callback) { }
	/**
	 * scroll to a specific row index and ensure that that row is on screen
	 * @param {Integer} index index
	 * @param {Object} properties animation properties. <tt>position</tt> property controls the position constant to use for position (on iPhone, use constants from Titanium.UI.iPhone.TableViewScrollPosition).
	 * @alias Titanium_UI_TableView.scrollToIndex
	 */
	this.scrollToIndex = function scrollToIndex(index,properties) { }
	/**
	 * scroll the table to a specific top position where 0 is the topmost y position in the table view
	 * @param {Float} top y position
	 * @param {Object} [properties] optional dictionary with the key <tt>animated</tt> (default, true) as boolean to indicate if the scroll should be animated or immediate
	 * @alias Titanium_UI_TableView.scrollToTop
	 */
	this.scrollToTop = function scrollToTop(top,properties) { }
	/**
	 * programmatically select a row
	 * @param {Integer} row row index to select
	 * @alias Titanium_UI_TableView.selectRow
	 */
	this.selectRow = function selectRow(row) { }
	/**
	 * set the data in the table, optionally with animation
	 * @param {Array} data data array of rows either as objects or row objects
	 * @param {Object} properties animation properties
	 * @alias Titanium_UI_TableView.setData
	 */
	this.setData = function setData(data,properties) { }
	/**
	 * make the view visible
	 * @alias Titanium_UI_TableView.show
	 */
	this.show = function show() { }
	/**
	 * return a Blob image of the rendered view
	 * @param {Function} f function to be invoked upon completion. if non-null, this method will be performed asynchronously. if null, it will be performed immediately
	 * @alias Titanium_UI_TableView.toImage
	 * @return {Object}
	 */
	this.toImage = function toImage(f) { return {}; }
	/**
	 * update an existing row, optionally with animation
	 * @param {Object} row row data to update
	 * @param {Object} properties animation properties
	 * @alias Titanium_UI_TableView.updateRow
	 */
	this.updateRow = function updateRow(row,properties) { }
};

/**
 * A TableView row object created by the method Titanium.UI.createTableViewRow.
 * @since 0.9
 */
function Titanium_UI_TableViewRow() {
	/**
	 * a dictionary with properties x and y to indicate the anchor point value. anchor specifies the position by which animation should occur. center is 0.5, 0.5
	 * @alias Titanium_UI_TableViewRow.anchorPoint
	 * @property {Object}
	 */
	this.anchorPoint = {}
	/**
	 * Get the a dictionary with properties x and y to indicate the anchor point value. anchor specifies the position by which animation should occur. center is 0.5, 0.5
	 * @alias Titanium_UI_TableViewRow.getAnchorPoint
	 * @return {Object}
	 */
	this.getAnchorPoint = function() { return this.anchorPoint; }
	/**
	 * Set the a dictionary with properties x and y to indicate the anchor point value. anchor specifies the position by which animation should occur. center is 0.5, 0.5
	 * @param {Object} value New value to set.
	 * @alias Titanium_UI_TableViewRow.setAnchorPoint
	 */
	this.setAnchorPoint = function(value) { this.anchorPoint = value; }
	/**
	 * read-only object with x and y properties of where the view is during animation
	 * @alias Titanium_UI_TableViewRow.animatedCenterPoint
	 * @property {Object}
	 */
	this.animatedCenterPoint = {}
	/**
	 * Get the read-only object with x and y properties of where the view is during animation
	 * @alias Titanium_UI_TableViewRow.getAnimatedCenterPoint
	 * @return {Object}
	 */
	this.getAnimatedCenterPoint = function() { return this.animatedCenterPoint; }
	/**
	 * Set the read-only object with x and y properties of where the view is during animation
	 * @param {Object} value New value to set.
	 * @alias Titanium_UI_TableViewRow.setAnimatedCenterPoint
	 */
	this.setAnimatedCenterPoint = function(value) { this.animatedCenterPoint = value; }
	/**
	 * the background cell color
	 * @alias Titanium_UI_TableViewRow.backgroundColor
	 * @property {String}
	 */
	this.backgroundColor = ''
	/**
	 * Get the the background cell color
	 * @alias Titanium_UI_TableViewRow.getBackgroundColor
	 * @return {String}
	 */
	this.getBackgroundColor = function() { return this.backgroundColor; }
	/**
	 * Set the the background cell color
	 * @param {String} value New value to set.
	 * @alias Titanium_UI_TableViewRow.setBackgroundColor
	 */
	this.setBackgroundColor = function(value) { this.backgroundColor = value; }
	/**
	 * the disabled background color of the view. (Android)
	 * @alias Titanium_UI_TableViewRow.backgroundDisabledColor
	 * @property {String}
	 */
	this.backgroundDisabledColor = ''
	/**
	 * Get the the disabled background color of the view. (Android)
	 * @alias Titanium_UI_TableViewRow.getBackgroundDisabledColor
	 * @return {String}
	 */
	this.getBackgroundDisabledColor = function() { return this.backgroundDisabledColor; }
	/**
	 * Set the the disabled background color of the view. (Android)
	 * @param {String} value New value to set.
	 * @alias Titanium_UI_TableViewRow.setBackgroundDisabledColor
	 */
	this.setBackgroundDisabledColor = function(value) { this.backgroundDisabledColor = value; }
	/**
	 * the disabled background image url of the view. (Android)
	 * @alias Titanium_UI_TableViewRow.backgroundDisabledImage
	 * @property {String}
	 */
	this.backgroundDisabledImage = ''
	/**
	 * Get the the disabled background image url of the view. (Android)
	 * @alias Titanium_UI_TableViewRow.getBackgroundDisabledImage
	 * @return {String}
	 */
	this.getBackgroundDisabledImage = function() { return this.backgroundDisabledImage; }
	/**
	 * Set the the disabled background image url of the view. (Android)
	 * @param {String} value New value to set.
	 * @alias Titanium_UI_TableViewRow.setBackgroundDisabledImage
	 */
	this.setBackgroundDisabledImage = function(value) { this.backgroundDisabledImage = value; }
	/**
	 * the focused background color of the view. focusable must be true for normal views. (Android)
	 * @alias Titanium_UI_TableViewRow.backgroundFocusedColor
	 * @property {String}
	 */
	this.backgroundFocusedColor = ''
	/**
	 * Get the the focused background color of the view. focusable must be true for normal views. (Android)
	 * @alias Titanium_UI_TableViewRow.getBackgroundFocusedColor
	 * @return {String}
	 */
	this.getBackgroundFocusedColor = function() { return this.backgroundFocusedColor; }
	/**
	 * Set the the focused background color of the view. focusable must be true for normal views. (Android)
	 * @param {String} value New value to set.
	 * @alias Titanium_UI_TableViewRow.setBackgroundFocusedColor
	 */
	this.setBackgroundFocusedColor = function(value) { this.backgroundFocusedColor = value; }
	/**
	 * the focused background image url of the view. focusable must be true for normal views. (Android)
	 * @alias Titanium_UI_TableViewRow.backgroundFocusedImage
	 * @property {String}
	 */
	this.backgroundFocusedImage = ''
	/**
	 * Get the the focused background image url of the view. focusable must be true for normal views. (Android)
	 * @alias Titanium_UI_TableViewRow.getBackgroundFocusedImage
	 * @return {String}
	 */
	this.getBackgroundFocusedImage = function() { return this.backgroundFocusedImage; }
	/**
	 * Set the the focused background image url of the view. focusable must be true for normal views. (Android)
	 * @param {String} value New value to set.
	 * @alias Titanium_UI_TableViewRow.setBackgroundFocusedImage
	 */
	this.setBackgroundFocusedImage = function(value) { this.backgroundFocusedImage = value; }
	/**
	 * a background gradient for the view with the properties: type,startPoint,endPoint,startRadius,endRadius,backfillStart,backfillEnd,colors.
	 * @alias Titanium_UI_TableViewRow.backgroundGradient
	 * @property {Object}
	 */
	this.backgroundGradient = {}
	/**
	 * Get the a background gradient for the view with the properties: type,startPoint,endPoint,startRadius,endRadius,backfillStart,backfillEnd,colors.
	 * @alias Titanium_UI_TableViewRow.getBackgroundGradient
	 * @return {Object}
	 */
	this.getBackgroundGradient = function() { return this.backgroundGradient; }
	/**
	 * Set the a background gradient for the view with the properties: type,startPoint,endPoint,startRadius,endRadius,backfillStart,backfillEnd,colors.
	 * @param {Object} value New value to set.
	 * @alias Titanium_UI_TableViewRow.setBackgroundGradient
	 */
	this.setBackgroundGradient = function(value) { this.backgroundGradient = value; }
	/**
	 * the background cell image
	 * @alias Titanium_UI_TableViewRow.backgroundImage
	 * @property {String}
	 */
	this.backgroundImage = ''
	/**
	 * Get the the background cell image
	 * @alias Titanium_UI_TableViewRow.getBackgroundImage
	 * @return {String}
	 */
	this.getBackgroundImage = function() { return this.backgroundImage; }
	/**
	 * Set the the background cell image
	 * @param {String} value New value to set.
	 * @alias Titanium_UI_TableViewRow.setBackgroundImage
	 */
	this.setBackgroundImage = function(value) { this.backgroundImage = value; }
	/**
	 * End caps specify the portion of an image that should not be resized when an image is stretched. This technique is used to implement buttons and other resizable image-based interface elements. When a button with end caps is resized, the resizing occurs only in the middle of the button, in the region between the end caps. The end caps themselves keep their original size and appearance. This property specifies the size of the left end cap. The middle (stretchable) portion is assumed to be 1 pixel wide. The right end cap is therefore computed by adding the size of the left end cap and the middle portion together and then subtracting that value from the width of the image
	 * @alias Titanium_UI_TableViewRow.backgroundLeftCap
	 * @property {Float}
	 */
	this.backgroundLeftCap = 0.0
	/**
	 * Get the End caps specify the portion of an image that should not be resized when an image is stretched. This technique is used to implement buttons and other resizable image-based interface elements. When a button with end caps is resized, the resizing occurs only in the middle of the button, in the region between the end caps. The end caps themselves keep their original size and appearance. This property specifies the size of the left end cap. The middle (stretchable) portion is assumed to be 1 pixel wide. The right end cap is therefore computed by adding the size of the left end cap and the middle portion together and then subtracting that value from the width of the image
	 * @alias Titanium_UI_TableViewRow.getBackgroundLeftCap
	 * @return {Float}
	 */
	this.getBackgroundLeftCap = function() { return this.backgroundLeftCap; }
	/**
	 * Set the End caps specify the portion of an image that should not be resized when an image is stretched. This technique is used to implement buttons and other resizable image-based interface elements. When a button with end caps is resized, the resizing occurs only in the middle of the button, in the region between the end caps. The end caps themselves keep their original size and appearance. This property specifies the size of the left end cap. The middle (stretchable) portion is assumed to be 1 pixel wide. The right end cap is therefore computed by adding the size of the left end cap and the middle portion together and then subtracting that value from the width of the image
	 * @param {Float} value New value to set.
	 * @alias Titanium_UI_TableViewRow.setBackgroundLeftCap
	 */
	this.setBackgroundLeftCap = function(value) { this.backgroundLeftCap = value; }
	/**
	 * the selected background color of the view. focusable must be true for normal views. (Android)
	 * @alias Titanium_UI_TableViewRow.backgroundSelectedColor
	 * @property {String}
	 */
	this.backgroundSelectedColor = ''
	/**
	 * Get the the selected background color of the view. focusable must be true for normal views. (Android)
	 * @alias Titanium_UI_TableViewRow.getBackgroundSelectedColor
	 * @return {String}
	 */
	this.getBackgroundSelectedColor = function() { return this.backgroundSelectedColor; }
	/**
	 * Set the the selected background color of the view. focusable must be true for normal views. (Android)
	 * @param {String} value New value to set.
	 * @alias Titanium_UI_TableViewRow.setBackgroundSelectedColor
	 */
	this.setBackgroundSelectedColor = function(value) { this.backgroundSelectedColor = value; }
	/**
	 * the selected background image url of the view. focusable must be true for normal views. (Android)
	 * @alias Titanium_UI_TableViewRow.backgroundSelectedImage
	 * @property {String}
	 */
	this.backgroundSelectedImage = ''
	/**
	 * Get the the selected background image url of the view. focusable must be true for normal views. (Android)
	 * @alias Titanium_UI_TableViewRow.getBackgroundSelectedImage
	 * @return {String}
	 */
	this.getBackgroundSelectedImage = function() { return this.backgroundSelectedImage; }
	/**
	 * Set the the selected background image url of the view. focusable must be true for normal views. (Android)
	 * @param {String} value New value to set.
	 * @alias Titanium_UI_TableViewRow.setBackgroundSelectedImage
	 */
	this.setBackgroundSelectedImage = function(value) { this.backgroundSelectedImage = value; }
	/**
	 * End caps specify the portion of an image that should not be resized when an image is stretched. This technique is used to implement buttons and other resizable image-based interface elements. When a button with end caps is resized, the resizing occurs only in the middle of the button, in the region between the end caps. The end caps themselves keep their original size and appearance. This property specifies the size of the top end cap. The middle (stretchable) portion is assumed to be 1 pixel wide. The bottom end cap is therefore computed by adding the size of the top end cap and the middle portion together and then subtracting that value from the height of the image
	 * @alias Titanium_UI_TableViewRow.backgroundTopCap
	 * @property {Float}
	 */
	this.backgroundTopCap = 0.0
	/**
	 * Get the End caps specify the portion of an image that should not be resized when an image is stretched. This technique is used to implement buttons and other resizable image-based interface elements. When a button with end caps is resized, the resizing occurs only in the middle of the button, in the region between the end caps. The end caps themselves keep their original size and appearance. This property specifies the size of the top end cap. The middle (stretchable) portion is assumed to be 1 pixel wide. The bottom end cap is therefore computed by adding the size of the top end cap and the middle portion together and then subtracting that value from the height of the image
	 * @alias Titanium_UI_TableViewRow.getBackgroundTopCap
	 * @return {Float}
	 */
	this.getBackgroundTopCap = function() { return this.backgroundTopCap; }
	/**
	 * Set the End caps specify the portion of an image that should not be resized when an image is stretched. This technique is used to implement buttons and other resizable image-based interface elements. When a button with end caps is resized, the resizing occurs only in the middle of the button, in the region between the end caps. The end caps themselves keep their original size and appearance. This property specifies the size of the top end cap. The middle (stretchable) portion is assumed to be 1 pixel wide. The bottom end cap is therefore computed by adding the size of the top end cap and the middle portion together and then subtracting that value from the height of the image
	 * @param {Float} value New value to set.
	 * @alias Titanium_UI_TableViewRow.setBackgroundTopCap
	 */
	this.setBackgroundTopCap = function(value) { this.backgroundTopCap = value; }
	/**
	 * the border color of the view
	 * @alias Titanium_UI_TableViewRow.borderColor
	 * @property {String}
	 */
	this.borderColor = ''
	/**
	 * Get the the border color of the view
	 * @alias Titanium_UI_TableViewRow.getBorderColor
	 * @return {String}
	 */
	this.getBorderColor = function() { return this.borderColor; }
	/**
	 * Set the the border color of the view
	 * @param {String} value New value to set.
	 * @alias Titanium_UI_TableViewRow.setBorderColor
	 */
	this.setBorderColor = function(value) { this.borderColor = value; }
	/**
	 * the border radius of the view
	 * @alias Titanium_UI_TableViewRow.borderRadius
	 * @property {Float}
	 */
	this.borderRadius = 0.0
	/**
	 * Get the the border radius of the view
	 * @alias Titanium_UI_TableViewRow.getBorderRadius
	 * @return {Float}
	 */
	this.getBorderRadius = function() { return this.borderRadius; }
	/**
	 * Set the the border radius of the view
	 * @param {Float} value New value to set.
	 * @alias Titanium_UI_TableViewRow.setBorderRadius
	 */
	this.setBorderRadius = function(value) { this.borderRadius = value; }
	/**
	 * the border width of the view
	 * @alias Titanium_UI_TableViewRow.borderWidth
	 * @property {Float}
	 */
	this.borderWidth = 0.0
	/**
	 * Get the the border width of the view
	 * @alias Titanium_UI_TableViewRow.getBorderWidth
	 * @return {Float}
	 */
	this.getBorderWidth = function() { return this.borderWidth; }
	/**
	 * Set the the border width of the view
	 * @param {Float} value New value to set.
	 * @alias Titanium_UI_TableViewRow.setBorderWidth
	 */
	this.setBorderWidth = function(value) { this.borderWidth = value; }
	/**
	 * property for the view bottom position. This position is relative to the view's parent. Can be either a float value or a dimension string ie 'auto' (default), '50%' (iPhone only).
	 * @alias Titanium_UI_TableViewRow.bottom
	 * @property {Float,String}
	 */
	this.bottom = 0.0
	/**
	 * Get the property for the view bottom position. This position is relative to the view's parent. Can be either a float value or a dimension string ie 'auto' (default), '50%' (iPhone only).
	 * @alias Titanium_UI_TableViewRow.getBottom
	 * @return {Float,String}
	 */
	this.getBottom = function() { return this.bottom; }
	/**
	 * Set the property for the view bottom position. This position is relative to the view's parent. Can be either a float value or a dimension string ie 'auto' (default), '50%' (iPhone only).
	 * @param {Float,String} value New value to set.
	 * @alias Titanium_UI_TableViewRow.setBottom
	 */
	this.setBottom = function(value) { this.bottom = value; }
	/**
	 * a dictionary with properties x and y to indicate the center of the views position relative to the parent view
	 * @alias Titanium_UI_TableViewRow.center
	 * @property {Object}
	 */
	this.center = {}
	/**
	 * Get the a dictionary with properties x and y to indicate the center of the views position relative to the parent view
	 * @alias Titanium_UI_TableViewRow.getCenter
	 * @return {Object}
	 */
	this.getCenter = function() { return this.center; }
	/**
	 * Set the a dictionary with properties x and y to indicate the center of the views position relative to the parent view
	 * @param {Object} value New value to set.
	 * @alias Titanium_UI_TableViewRow.setCenter
	 */
	this.setCenter = function(value) { this.center = value; }
	/**
	 * the class name of the table. each table view cell must have a unique class name if the cell layout is different. however, use the same name for rows that have the same structural layout (even if the content is different) to provide maximum rendering performance.
	 * @alias Titanium_UI_TableViewRow.className
	 * @property {String}
	 */
	this.className = ''
	/**
	 * Get the the class name of the table. each table view cell must have a unique class name if the cell layout is different. however, use the same name for rows that have the same structural layout (even if the content is different) to provide maximum rendering performance.
	 * @alias Titanium_UI_TableViewRow.getClassName
	 * @return {String}
	 */
	this.getClassName = function() { return this.className; }
	/**
	 * Set the the class name of the table. each table view cell must have a unique class name if the cell layout is different. however, use the same name for rows that have the same structural layout (even if the content is different) to provide maximum rendering performance.
	 * @param {String} value New value to set.
	 * @alias Titanium_UI_TableViewRow.setClassName
	 */
	this.setClassName = function(value) { this.className = value; }
	/**
	 * default color of the row when not selected
	 * @alias Titanium_UI_TableViewRow.color
	 * @property {String}
	 */
	this.color = ''
	/**
	 * Get the default color of the row when not selected
	 * @alias Titanium_UI_TableViewRow.getColor
	 * @return {String}
	 */
	this.getColor = function() { return this.color; }
	/**
	 * Set the default color of the row when not selected
	 * @param {String} value New value to set.
	 * @alias Titanium_UI_TableViewRow.setColor
	 */
	this.setColor = function(value) { this.color = value; }
	/**
	 * Set true if you want a view to be focusable when navigating with the trackball or D-Pad. Default: false. (Android Only)
	 * @alias Titanium_UI_TableViewRow.focusable
	 * @property {Boolean}
	 */
	this.focusable = false
	/**
	 * Get the Set true if you want a view to be focusable when navigating with the trackball or D-Pad. Default: false. (Android Only)
	 * @alias Titanium_UI_TableViewRow.getFocusable
	 * @return {Boolean}
	 */
	this.getFocusable = function() { return this.focusable; }
	/**
	 * Set the Set true if you want a view to be focusable when navigating with the trackball or D-Pad. Default: false. (Android Only)
	 * @param {Boolean} value New value to set.
	 * @alias Titanium_UI_TableViewRow.setFocusable
	 */
	this.setFocusable = function(value) { this.focusable = value; }
	/**
	 * the font family
	 * @alias Titanium_UI_TableViewRow.font-family
	 * @property {String}
	 */
	this.font-family = ''
	/**
	 * Get the the font family
	 * @alias Titanium_UI_TableViewRow.getFont-family
	 * @return {String}
	 */
	this.getFont-family = function() { return this.font-family; }
	/**
	 * Set the the font family
	 * @param {String} value New value to set.
	 * @alias Titanium_UI_TableViewRow.setFont-family
	 */
	this.setFont-family = function(value) { this.font-family = value; }
	/**
	 * the font size
	 * @alias Titanium_UI_TableViewRow.font-size
	 * @property {String}
	 */
	this.font-size = ''
	/**
	 * Get the the font size
	 * @alias Titanium_UI_TableViewRow.getFont-size
	 * @return {String}
	 */
	this.getFont-size = function() { return this.font-size; }
	/**
	 * Set the the font size
	 * @param {String} value New value to set.
	 * @alias Titanium_UI_TableViewRow.setFont-size
	 */
	this.setFont-size = function(value) { this.font-size = value; }
	/**
	 * the font style, either normal or italics
	 * @alias Titanium_UI_TableViewRow.font-style
	 * @property {String}
	 */
	this.font-style = ''
	/**
	 * Get the the font style, either normal or italics
	 * @alias Titanium_UI_TableViewRow.getFont-style
	 * @return {String}
	 */
	this.getFont-style = function() { return this.font-style; }
	/**
	 * Set the the font style, either normal or italics
	 * @param {String} value New value to set.
	 * @alias Titanium_UI_TableViewRow.setFont-style
	 */
	this.setFont-style = function(value) { this.font-style = value; }
	/**
	 * the font weight, either normal or bold
	 * @alias Titanium_UI_TableViewRow.font-weight
	 * @property {String}
	 */
	this.font-weight = ''
	/**
	 * Get the the font weight, either normal or bold
	 * @alias Titanium_UI_TableViewRow.getFont-weight
	 * @return {String}
	 */
	this.getFont-weight = function() { return this.font-weight; }
	/**
	 * Set the the font weight, either normal or bold
	 * @param {String} value New value to set.
	 * @alias Titanium_UI_TableViewRow.setFont-weight
	 */
	this.setFont-weight = function(value) { this.font-weight = value; }
	/**
	 * render a system provided check mark in the right image area of the row cell
	 * @alias Titanium_UI_TableViewRow.hasCheck
	 * @property {Boolean}
	 */
	this.hasCheck = false
	/**
	 * Get the render a system provided check mark in the right image area of the row cell
	 * @alias Titanium_UI_TableViewRow.getHasCheck
	 * @return {Boolean}
	 */
	this.getHasCheck = function() { return this.hasCheck; }
	/**
	 * Set the render a system provided check mark in the right image area of the row cell
	 * @param {Boolean} value New value to set.
	 * @alias Titanium_UI_TableViewRow.setHasCheck
	 */
	this.setHasCheck = function(value) { this.hasCheck = value; }
	/**
	 * render a system provided right arrow in the right image area of the row cell
	 * @alias Titanium_UI_TableViewRow.hasChild
	 * @property {Boolean}
	 */
	this.hasChild = false
	/**
	 * Get the render a system provided right arrow in the right image area of the row cell
	 * @alias Titanium_UI_TableViewRow.getHasChild
	 * @return {Boolean}
	 */
	this.getHasChild = function() { return this.hasChild; }
	/**
	 * Set the render a system provided right arrow in the right image area of the row cell
	 * @param {Boolean} value New value to set.
	 * @alias Titanium_UI_TableViewRow.setHasChild
	 */
	this.setHasChild = function(value) { this.hasChild = value; }
	/**
	 * render a system provided blue indicator icon in the right image area of the row cell
	 * @alias Titanium_UI_TableViewRow.hasDetail
	 * @property {Boolean}
	 */
	this.hasDetail = false
	/**
	 * Get the render a system provided blue indicator icon in the right image area of the row cell
	 * @alias Titanium_UI_TableViewRow.getHasDetail
	 * @return {Boolean}
	 */
	this.getHasDetail = function() { return this.hasDetail; }
	/**
	 * Set the render a system provided blue indicator icon in the right image area of the row cell
	 * @param {Boolean} value New value to set.
	 * @alias Titanium_UI_TableViewRow.setHasDetail
	 */
	this.setHasDetail = function(value) { this.hasDetail = value; }
	/**
	 * the height of the row. specify auto to calculate the row height based on the size of the child views of the row
	 * @alias Titanium_UI_TableViewRow.height
	 * @property {Float}
	 */
	this.height = 0.0
	/**
	 * Get the the height of the row. specify auto to calculate the row height based on the size of the child views of the row
	 * @alias Titanium_UI_TableViewRow.getHeight
	 * @return {Float}
	 */
	this.getHeight = function() { return this.height; }
	/**
	 * Set the the height of the row. specify auto to calculate the row height based on the size of the child views of the row
	 * @param {Float} value New value to set.
	 * @alias Titanium_UI_TableViewRow.setHeight
	 */
	this.setHeight = function(value) { this.height = value; }
	/**
	 * the indention level for the cell (defaults to 0)
	 * @alias Titanium_UI_TableViewRow.indentionLevel
	 * @property {Integer}
	 */
	this.indentionLevel = 0
	/**
	 * Get the the indention level for the cell (defaults to 0)
	 * @alias Titanium_UI_TableViewRow.getIndentionLevel
	 * @return {Integer}
	 */
	this.getIndentionLevel = function() { return this.indentionLevel; }
	/**
	 * Set the the indention level for the cell (defaults to 0)
	 * @param {Integer} value New value to set.
	 * @alias Titanium_UI_TableViewRow.setIndentionLevel
	 */
	this.setIndentionLevel = function(value) { this.indentionLevel = value; }
	/**
	 * the layout algorithm to use for the layout. either absolute (default) or vertical.
	 * @alias Titanium_UI_TableViewRow.layout
	 * @property {String}
	 */
	this.layout = ''
	/**
	 * Get the the layout algorithm to use for the layout. either absolute (default) or vertical.
	 * @alias Titanium_UI_TableViewRow.getLayout
	 * @return {String}
	 */
	this.getLayout = function() { return this.layout; }
	/**
	 * Set the the layout algorithm to use for the layout. either absolute (default) or vertical.
	 * @param {String} value New value to set.
	 * @alias Titanium_UI_TableViewRow.setLayout
	 */
	this.setLayout = function(value) { this.layout = value; }
	/**
	 * property for the view left position. This position is relative to the view's parent. Can be either a float value or a dimension string ie 'auto' (default), '50%' (iPhone only).
	 * @alias Titanium_UI_TableViewRow.left
	 * @property {Float,String}
	 */
	this.left = 0.0
	/**
	 * Get the property for the view left position. This position is relative to the view's parent. Can be either a float value or a dimension string ie 'auto' (default), '50%' (iPhone only).
	 * @alias Titanium_UI_TableViewRow.getLeft
	 * @return {Float,String}
	 */
	this.getLeft = function() { return this.left; }
	/**
	 * Set the property for the view left position. This position is relative to the view's parent. Can be either a float value or a dimension string ie 'auto' (default), '50%' (iPhone only).
	 * @param {Float,String} value New value to set.
	 * @alias Titanium_UI_TableViewRow.setLeft
	 */
	this.setLeft = function(value) { this.left = value; }
	/**
	 * image url to render in the left image area of the row cell
	 * @alias Titanium_UI_TableViewRow.leftImage
	 * @property {String}
	 */
	this.leftImage = ''
	/**
	 * Get the image url to render in the left image area of the row cell
	 * @alias Titanium_UI_TableViewRow.getLeftImage
	 * @return {String}
	 */
	this.getLeftImage = function() { return this.leftImage; }
	/**
	 * Set the image url to render in the left image area of the row cell
	 * @param {String} value New value to set.
	 * @alias Titanium_UI_TableViewRow.setLeftImage
	 */
	this.setLeftImage = function(value) { this.leftImage = value; }
	/**
	 * the opacity from 0.0-1.0
	 * @alias Titanium_UI_TableViewRow.opacity
	 * @property {Float}
	 */
	this.opacity = 0.0
	/**
	 * Get the the opacity from 0.0-1.0
	 * @alias Titanium_UI_TableViewRow.getOpacity
	 * @return {Float}
	 */
	this.getOpacity = function() { return this.opacity; }
	/**
	 * Set the the opacity from 0.0-1.0
	 * @param {Float} value New value to set.
	 * @alias Titanium_UI_TableViewRow.setOpacity
	 */
	this.setOpacity = function(value) { this.opacity = value; }
	/**
	 * property for the view right position. This position is relative to the view's parent. Can be either a float value or a dimension string ie 'auto' (default), '50%' (iPhone only).
	 * @alias Titanium_UI_TableViewRow.right
	 * @property {Float,String}
	 */
	this.right = 0.0
	/**
	 * Get the property for the view right position. This position is relative to the view's parent. Can be either a float value or a dimension string ie 'auto' (default), '50%' (iPhone only).
	 * @alias Titanium_UI_TableViewRow.getRight
	 * @return {Float,String}
	 */
	this.getRight = function() { return this.right; }
	/**
	 * Set the property for the view right position. This position is relative to the view's parent. Can be either a float value or a dimension string ie 'auto' (default), '50%' (iPhone only).
	 * @param {Float,String} value New value to set.
	 * @alias Titanium_UI_TableViewRow.setRight
	 */
	this.setRight = function(value) { this.right = value; }
	/**
	 * image url to render in the right image area of the row cell
	 * @alias Titanium_UI_TableViewRow.rightImage
	 * @property {String}
	 */
	this.rightImage = ''
	/**
	 * Get the image url to render in the right image area of the row cell
	 * @alias Titanium_UI_TableViewRow.getRightImage
	 * @return {String}
	 */
	this.getRightImage = function() { return this.rightImage; }
	/**
	 * Set the image url to render in the right image area of the row cell
	 * @param {String} value New value to set.
	 * @alias Titanium_UI_TableViewRow.setRightImage
	 */
	this.setRightImage = function(value) { this.rightImage = value; }
	/**
	 * the background color to render when the row cell is selected
	 * @alias Titanium_UI_TableViewRow.selectedBackgroundColor
	 * @property {String}
	 */
	this.selectedBackgroundColor = ''
	/**
	 * Get the the background color to render when the row cell is selected
	 * @alias Titanium_UI_TableViewRow.getSelectedBackgroundColor
	 * @return {String}
	 */
	this.getSelectedBackgroundColor = function() { return this.selectedBackgroundColor; }
	/**
	 * Set the the background color to render when the row cell is selected
	 * @param {String} value New value to set.
	 * @alias Titanium_UI_TableViewRow.setSelectedBackgroundColor
	 */
	this.setSelectedBackgroundColor = function(value) { this.selectedBackgroundColor = value; }
	/**
	 * the background image to render when the row cell is selected
	 * @alias Titanium_UI_TableViewRow.selectedBackgroundImage
	 * @property {String}
	 */
	this.selectedBackgroundImage = ''
	/**
	 * Get the the background image to render when the row cell is selected
	 * @alias Titanium_UI_TableViewRow.getSelectedBackgroundImage
	 * @return {String}
	 */
	this.getSelectedBackgroundImage = function() { return this.selectedBackgroundImage; }
	/**
	 * Set the the background image to render when the row cell is selected
	 * @param {String} value New value to set.
	 * @alias Titanium_UI_TableViewRow.setSelectedBackgroundImage
	 */
	this.setSelectedBackgroundImage = function(value) { this.selectedBackgroundImage = value; }
	/**
	 * color of the row during selection
	 * @alias Titanium_UI_TableViewRow.selectedColor
	 * @property {String}
	 */
	this.selectedColor = ''
	/**
	 * Get the color of the row during selection
	 * @alias Titanium_UI_TableViewRow.getSelectedColor
	 * @return {String}
	 */
	this.getSelectedColor = function() { return this.selectedColor; }
	/**
	 * Set the color of the row during selection
	 * @param {String} value New value to set.
	 * @alias Titanium_UI_TableViewRow.setSelectedColor
	 */
	this.setSelectedColor = function(value) { this.selectedColor = value; }
	/**
	 * a selection style constant to control the selection color. For iPhone, use the constants from Titanium.UI.iPhone.TableViewCellSelectionStyle
	 * @alias Titanium_UI_TableViewRow.selectionStyle
	 * @property {Integer}
	 */
	this.selectionStyle = 0
	/**
	 * Get the a selection style constant to control the selection color. For iPhone, use the constants from Titanium.UI.iPhone.TableViewCellSelectionStyle
	 * @alias Titanium_UI_TableViewRow.getSelectionStyle
	 * @return {Integer}
	 */
	this.getSelectionStyle = function() { return this.selectionStyle; }
	/**
	 * Set the a selection style constant to control the selection color. For iPhone, use the constants from Titanium.UI.iPhone.TableViewCellSelectionStyle
	 * @param {Integer} value New value to set.
	 * @alias Titanium_UI_TableViewRow.setSelectionStyle
	 */
	this.setSelectionStyle = function(value) { this.selectionStyle = value; }
	/**
	 * the size of the view as a dictionary of width and height properties
	 * @alias Titanium_UI_TableViewRow.size
	 * @property {Object}
	 */
	this.size = {}
	/**
	 * Get the the size of the view as a dictionary of width and height properties
	 * @alias Titanium_UI_TableViewRow.getSize
	 * @return {Object}
	 */
	this.getSize = function() { return this.size; }
	/**
	 * Set the the size of the view as a dictionary of width and height properties
	 * @param {Object} value New value to set.
	 * @alias Titanium_UI_TableViewRow.setSize
	 */
	this.setSize = function(value) { this.size = value; }
	/**
	 * One of Titanium.UI.Android.SOFT_KEYBOARD_DEFAULT_ON_FOCUS, Titanium.UI.Android.SOFT_KEYBOARD_HIDE_ON_FOCUS, or Titanium.UI.Android.SOFT_KEYBOARD_SHOW_ON_FOCUS. (Android only)
	 * @alias Titanium_UI_TableViewRow.softKeyboardOnFocus
	 * @property {Integer}
	 */
	this.softKeyboardOnFocus = 0
	/**
	 * Get the One of Titanium.UI.Android.SOFT_KEYBOARD_DEFAULT_ON_FOCUS, Titanium.UI.Android.SOFT_KEYBOARD_HIDE_ON_FOCUS, or Titanium.UI.Android.SOFT_KEYBOARD_SHOW_ON_FOCUS. (Android only)
	 * @alias Titanium_UI_TableViewRow.getSoftKeyboardOnFocus
	 * @return {Integer}
	 */
	this.getSoftKeyboardOnFocus = function() { return this.softKeyboardOnFocus; }
	/**
	 * Set the One of Titanium.UI.Android.SOFT_KEYBOARD_DEFAULT_ON_FOCUS, Titanium.UI.Android.SOFT_KEYBOARD_HIDE_ON_FOCUS, or Titanium.UI.Android.SOFT_KEYBOARD_SHOW_ON_FOCUS. (Android only)
	 * @param {Integer} value New value to set.
	 * @alias Titanium_UI_TableViewRow.setSoftKeyboardOnFocus
	 */
	this.setSoftKeyboardOnFocus = function(value) { this.softKeyboardOnFocus = value; }
	/**
	 * the title cell value. do not specify if using views as children of the row
	 * @alias Titanium_UI_TableViewRow.title
	 * @property {String}
	 */
	this.title = ''
	/**
	 * Get the the title cell value. do not specify if using views as children of the row
	 * @alias Titanium_UI_TableViewRow.getTitle
	 * @return {String}
	 */
	this.getTitle = function() { return this.title; }
	/**
	 * Set the the title cell value. do not specify if using views as children of the row
	 * @param {String} value New value to set.
	 * @alias Titanium_UI_TableViewRow.setTitle
	 */
	this.setTitle = function(value) { this.title = value; }
	/**
	 * property for the view top position. This position is relative to the view's parent. Can be either a float value or a dimension string ie 'auto' (default), '50%' (iPhone only).
	 * @alias Titanium_UI_TableViewRow.top
	 * @property {Float,String}
	 */
	this.top = 0.0
	/**
	 * Get the property for the view top position. This position is relative to the view's parent. Can be either a float value or a dimension string ie 'auto' (default), '50%' (iPhone only).
	 * @alias Titanium_UI_TableViewRow.getTop
	 * @return {Float,String}
	 */
	this.getTop = function() { return this.top; }
	/**
	 * Set the property for the view top position. This position is relative to the view's parent. Can be either a float value or a dimension string ie 'auto' (default), '50%' (iPhone only).
	 * @param {Float,String} value New value to set.
	 * @alias Titanium_UI_TableViewRow.setTop
	 */
	this.setTop = function(value) { this.top = value; }
	/**
	 * a boolean indicating if the view should receive touch events (true, default) or forward them to peers (false)
	 * @alias Titanium_UI_TableViewRow.touchEnabled
	 * @property {Boolean}
	 */
	this.touchEnabled = false
	/**
	 * Get the a boolean indicating if the view should receive touch events (true, default) or forward them to peers (false)
	 * @alias Titanium_UI_TableViewRow.getTouchEnabled
	 * @return {Boolean}
	 */
	this.getTouchEnabled = function() { return this.touchEnabled; }
	/**
	 * Set the a boolean indicating if the view should receive touch events (true, default) or forward them to peers (false)
	 * @param {Boolean} value New value to set.
	 * @alias Titanium_UI_TableViewRow.setTouchEnabled
	 */
	this.setTouchEnabled = function(value) { this.touchEnabled = value; }
	/**
	 * the transformation matrix to apply to the view
	 * @alias Titanium_UI_TableViewRow.transform
	 * @property {Object}
	 */
	this.transform = {}
	/**
	 * Get the the transformation matrix to apply to the view
	 * @alias Titanium_UI_TableViewRow.getTransform
	 * @return {Object}
	 */
	this.getTransform = function() { return this.transform; }
	/**
	 * Set the the transformation matrix to apply to the view
	 * @param {Object} value New value to set.
	 * @alias Titanium_UI_TableViewRow.setTransform
	 */
	this.setTransform = function(value) { this.transform = value; }
	/**
	 * a boolean of the visibility of the view
	 * @alias Titanium_UI_TableViewRow.visible
	 * @property {Boolean}
	 */
	this.visible = false
	/**
	 * Get the a boolean of the visibility of the view
	 * @alias Titanium_UI_TableViewRow.getVisible
	 * @return {Boolean}
	 */
	this.getVisible = function() { return this.visible; }
	/**
	 * Set the a boolean of the visibility of the view
	 * @param {Boolean} value New value to set.
	 * @alias Titanium_UI_TableViewRow.setVisible
	 */
	this.setVisible = function(value) { this.visible = value; }
	/**
	 * property for the view width. Can be either a float value or a dimension string ie 'auto' (default), '50%' (iPhone only).
	 * @alias Titanium_UI_TableViewRow.width
	 * @property {Float,String}
	 */
	this.width = 0.0
	/**
	 * Get the property for the view width. Can be either a float value or a dimension string ie 'auto' (default), '50%' (iPhone only).
	 * @alias Titanium_UI_TableViewRow.getWidth
	 * @return {Float,String}
	 */
	this.getWidth = function() { return this.width; }
	/**
	 * Set the property for the view width. Can be either a float value or a dimension string ie 'auto' (default), '50%' (iPhone only).
	 * @param {Float,String} value New value to set.
	 * @alias Titanium_UI_TableViewRow.setWidth
	 */
	this.setWidth = function(value) { this.width = value; }
	/**
	 * the z index position relative to other sibling views
	 * @alias Titanium_UI_TableViewRow.zIndex
	 * @property {Integer}
	 */
	this.zIndex = 0
	/**
	 * Get the the z index position relative to other sibling views
	 * @alias Titanium_UI_TableViewRow.getZIndex
	 * @return {Integer}
	 */
	this.getZIndex = function() { return this.zIndex; }
	/**
	 * Set the the z index position relative to other sibling views
	 * @param {Integer} value New value to set.
	 * @alias Titanium_UI_TableViewRow.setZIndex
	 */
	this.setZIndex = function(value) { this.zIndex = value; }
	/**
	 * add a child to the view hierarchy
	 * @param {Object} view the view to add to this views hiearchy
	 * @alias Titanium_UI_TableViewRow.add
	 */
	this.add = function add(view) { }
	/**
	 * add an event listener for the instance to receive view triggered events
	 * @param {String} name name of the event
	 * @param {Function} callback callback function to invoke when the event is fired
	 * @alias Titanium_UI_TableViewRow.addEventListener
	 */
	this.addEventListener = function addEventListener(name,callback) { }
	/**
	 * animate the view
	 * @param {Object} obj either a dictionary of animation properties or an Animation object
	 * @param {Function} callback function to be invoked upon completion of the animation
	 * @alias Titanium_UI_TableViewRow.animate
	 */
	this.animate = function animate(obj,callback) { }
	/**
	 * fire a synthesized event to the views listener
	 * @param {String} name name of the event
	 * @param {Object} event event object
	 * @alias Titanium_UI_TableViewRow.fireEvent
	 */
	this.fireEvent = function fireEvent(name,event) { }
	/**
	 * hide the view
	 * @alias Titanium_UI_TableViewRow.hide
	 */
	this.hide = function hide() { }
	/**
	 * remove a previously add view from the view hiearchy
	 * @param {Object} view the view to remove from this views hiearchy
	 * @alias Titanium_UI_TableViewRow.remove
	 */
	this.remove = function remove(view) { }
	/**
	 * remove a previously added event listener
	 * @param {String} name name of the event
	 * @param {Function} callback callback function passed in addEventListener
	 * @alias Titanium_UI_TableViewRow.removeEventListener
	 */
	this.removeEventListener = function removeEventListener(name,callback) { }
	/**
	 * make the view visible
	 * @alias Titanium_UI_TableViewRow.show
	 */
	this.show = function show() { }
	/**
	 * return a Blob image of the rendered view
	 * @param {Function} f function to be invoked upon completion. if non-null, this method will be performed asynchronously. if null, it will be performed immediately
	 * @alias Titanium_UI_TableViewRow.toImage
	 * @return {Object}
	 */
	this.toImage = function toImage(f) { return {}; }
};

/**
 * A TableView section object created by the method Titanium.UI.createTableViewSection.
 * @since 0.9
 */
function Titanium_UI_TableViewSection() {
	/**
	 * a dictionary with properties x and y to indicate the anchor point value. anchor specifies the position by which animation should occur. center is 0.5, 0.5
	 * @alias Titanium_UI_TableViewSection.anchorPoint
	 * @property {Object}
	 */
	this.anchorPoint = {}
	/**
	 * Get the a dictionary with properties x and y to indicate the anchor point value. anchor specifies the position by which animation should occur. center is 0.5, 0.5
	 * @alias Titanium_UI_TableViewSection.getAnchorPoint
	 * @return {Object}
	 */
	this.getAnchorPoint = function() { return this.anchorPoint; }
	/**
	 * Set the a dictionary with properties x and y to indicate the anchor point value. anchor specifies the position by which animation should occur. center is 0.5, 0.5
	 * @param {Object} value New value to set.
	 * @alias Titanium_UI_TableViewSection.setAnchorPoint
	 */
	this.setAnchorPoint = function(value) { this.anchorPoint = value; }
	/**
	 * read-only object with x and y properties of where the view is during animation
	 * @alias Titanium_UI_TableViewSection.animatedCenterPoint
	 * @property {Object}
	 */
	this.animatedCenterPoint = {}
	/**
	 * Get the read-only object with x and y properties of where the view is during animation
	 * @alias Titanium_UI_TableViewSection.getAnimatedCenterPoint
	 * @return {Object}
	 */
	this.getAnimatedCenterPoint = function() { return this.animatedCenterPoint; }
	/**
	 * Set the read-only object with x and y properties of where the view is during animation
	 * @param {Object} value New value to set.
	 * @alias Titanium_UI_TableViewSection.setAnimatedCenterPoint
	 */
	this.setAnimatedCenterPoint = function(value) { this.animatedCenterPoint = value; }
	/**
	 * the background color of the view
	 * @alias Titanium_UI_TableViewSection.backgroundColor
	 * @property {String}
	 */
	this.backgroundColor = ''
	/**
	 * Get the the background color of the view
	 * @alias Titanium_UI_TableViewSection.getBackgroundColor
	 * @return {String}
	 */
	this.getBackgroundColor = function() { return this.backgroundColor; }
	/**
	 * Set the the background color of the view
	 * @param {String} value New value to set.
	 * @alias Titanium_UI_TableViewSection.setBackgroundColor
	 */
	this.setBackgroundColor = function(value) { this.backgroundColor = value; }
	/**
	 * the disabled background color of the view. (Android)
	 * @alias Titanium_UI_TableViewSection.backgroundDisabledColor
	 * @property {String}
	 */
	this.backgroundDisabledColor = ''
	/**
	 * Get the the disabled background color of the view. (Android)
	 * @alias Titanium_UI_TableViewSection.getBackgroundDisabledColor
	 * @return {String}
	 */
	this.getBackgroundDisabledColor = function() { return this.backgroundDisabledColor; }
	/**
	 * Set the the disabled background color of the view. (Android)
	 * @param {String} value New value to set.
	 * @alias Titanium_UI_TableViewSection.setBackgroundDisabledColor
	 */
	this.setBackgroundDisabledColor = function(value) { this.backgroundDisabledColor = value; }
	/**
	 * the disabled background image url of the view. (Android)
	 * @alias Titanium_UI_TableViewSection.backgroundDisabledImage
	 * @property {String}
	 */
	this.backgroundDisabledImage = ''
	/**
	 * Get the the disabled background image url of the view. (Android)
	 * @alias Titanium_UI_TableViewSection.getBackgroundDisabledImage
	 * @return {String}
	 */
	this.getBackgroundDisabledImage = function() { return this.backgroundDisabledImage; }
	/**
	 * Set the the disabled background image url of the view. (Android)
	 * @param {String} value New value to set.
	 * @alias Titanium_UI_TableViewSection.setBackgroundDisabledImage
	 */
	this.setBackgroundDisabledImage = function(value) { this.backgroundDisabledImage = value; }
	/**
	 * the focused background color of the view. focusable must be true for normal views. (Android)
	 * @alias Titanium_UI_TableViewSection.backgroundFocusedColor
	 * @property {String}
	 */
	this.backgroundFocusedColor = ''
	/**
	 * Get the the focused background color of the view. focusable must be true for normal views. (Android)
	 * @alias Titanium_UI_TableViewSection.getBackgroundFocusedColor
	 * @return {String}
	 */
	this.getBackgroundFocusedColor = function() { return this.backgroundFocusedColor; }
	/**
	 * Set the the focused background color of the view. focusable must be true for normal views. (Android)
	 * @param {String} value New value to set.
	 * @alias Titanium_UI_TableViewSection.setBackgroundFocusedColor
	 */
	this.setBackgroundFocusedColor = function(value) { this.backgroundFocusedColor = value; }
	/**
	 * the focused background image url of the view. focusable must be true for normal views. (Android)
	 * @alias Titanium_UI_TableViewSection.backgroundFocusedImage
	 * @property {String}
	 */
	this.backgroundFocusedImage = ''
	/**
	 * Get the the focused background image url of the view. focusable must be true for normal views. (Android)
	 * @alias Titanium_UI_TableViewSection.getBackgroundFocusedImage
	 * @return {String}
	 */
	this.getBackgroundFocusedImage = function() { return this.backgroundFocusedImage; }
	/**
	 * Set the the focused background image url of the view. focusable must be true for normal views. (Android)
	 * @param {String} value New value to set.
	 * @alias Titanium_UI_TableViewSection.setBackgroundFocusedImage
	 */
	this.setBackgroundFocusedImage = function(value) { this.backgroundFocusedImage = value; }
	/**
	 * a background gradient for the view with the properties: type,startPoint,endPoint,startRadius,endRadius,backfillStart,backfillEnd,colors.
	 * @alias Titanium_UI_TableViewSection.backgroundGradient
	 * @property {Object}
	 */
	this.backgroundGradient = {}
	/**
	 * Get the a background gradient for the view with the properties: type,startPoint,endPoint,startRadius,endRadius,backfillStart,backfillEnd,colors.
	 * @alias Titanium_UI_TableViewSection.getBackgroundGradient
	 * @return {Object}
	 */
	this.getBackgroundGradient = function() { return this.backgroundGradient; }
	/**
	 * Set the a background gradient for the view with the properties: type,startPoint,endPoint,startRadius,endRadius,backfillStart,backfillEnd,colors.
	 * @param {Object} value New value to set.
	 * @alias Titanium_UI_TableViewSection.setBackgroundGradient
	 */
	this.setBackgroundGradient = function(value) { this.backgroundGradient = value; }
	/**
	 * the background image url of the view
	 * @alias Titanium_UI_TableViewSection.backgroundImage
	 * @property {String}
	 */
	this.backgroundImage = ''
	/**
	 * Get the the background image url of the view
	 * @alias Titanium_UI_TableViewSection.getBackgroundImage
	 * @return {String}
	 */
	this.getBackgroundImage = function() { return this.backgroundImage; }
	/**
	 * Set the the background image url of the view
	 * @param {String} value New value to set.
	 * @alias Titanium_UI_TableViewSection.setBackgroundImage
	 */
	this.setBackgroundImage = function(value) { this.backgroundImage = value; }
	/**
	 * End caps specify the portion of an image that should not be resized when an image is stretched. This technique is used to implement buttons and other resizable image-based interface elements. When a button with end caps is resized, the resizing occurs only in the middle of the button, in the region between the end caps. The end caps themselves keep their original size and appearance. This property specifies the size of the left end cap. The middle (stretchable) portion is assumed to be 1 pixel wide. The right end cap is therefore computed by adding the size of the left end cap and the middle portion together and then subtracting that value from the width of the image
	 * @alias Titanium_UI_TableViewSection.backgroundLeftCap
	 * @property {Float}
	 */
	this.backgroundLeftCap = 0.0
	/**
	 * Get the End caps specify the portion of an image that should not be resized when an image is stretched. This technique is used to implement buttons and other resizable image-based interface elements. When a button with end caps is resized, the resizing occurs only in the middle of the button, in the region between the end caps. The end caps themselves keep their original size and appearance. This property specifies the size of the left end cap. The middle (stretchable) portion is assumed to be 1 pixel wide. The right end cap is therefore computed by adding the size of the left end cap and the middle portion together and then subtracting that value from the width of the image
	 * @alias Titanium_UI_TableViewSection.getBackgroundLeftCap
	 * @return {Float}
	 */
	this.getBackgroundLeftCap = function() { return this.backgroundLeftCap; }
	/**
	 * Set the End caps specify the portion of an image that should not be resized when an image is stretched. This technique is used to implement buttons and other resizable image-based interface elements. When a button with end caps is resized, the resizing occurs only in the middle of the button, in the region between the end caps. The end caps themselves keep their original size and appearance. This property specifies the size of the left end cap. The middle (stretchable) portion is assumed to be 1 pixel wide. The right end cap is therefore computed by adding the size of the left end cap and the middle portion together and then subtracting that value from the width of the image
	 * @param {Float} value New value to set.
	 * @alias Titanium_UI_TableViewSection.setBackgroundLeftCap
	 */
	this.setBackgroundLeftCap = function(value) { this.backgroundLeftCap = value; }
	/**
	 * the selected background color of the view. focusable must be true for normal views. (Android)
	 * @alias Titanium_UI_TableViewSection.backgroundSelectedColor
	 * @property {String}
	 */
	this.backgroundSelectedColor = ''
	/**
	 * Get the the selected background color of the view. focusable must be true for normal views. (Android)
	 * @alias Titanium_UI_TableViewSection.getBackgroundSelectedColor
	 * @return {String}
	 */
	this.getBackgroundSelectedColor = function() { return this.backgroundSelectedColor; }
	/**
	 * Set the the selected background color of the view. focusable must be true for normal views. (Android)
	 * @param {String} value New value to set.
	 * @alias Titanium_UI_TableViewSection.setBackgroundSelectedColor
	 */
	this.setBackgroundSelectedColor = function(value) { this.backgroundSelectedColor = value; }
	/**
	 * the selected background image url of the view. focusable must be true for normal views. (Android)
	 * @alias Titanium_UI_TableViewSection.backgroundSelectedImage
	 * @property {String}
	 */
	this.backgroundSelectedImage = ''
	/**
	 * Get the the selected background image url of the view. focusable must be true for normal views. (Android)
	 * @alias Titanium_UI_TableViewSection.getBackgroundSelectedImage
	 * @return {String}
	 */
	this.getBackgroundSelectedImage = function() { return this.backgroundSelectedImage; }
	/**
	 * Set the the selected background image url of the view. focusable must be true for normal views. (Android)
	 * @param {String} value New value to set.
	 * @alias Titanium_UI_TableViewSection.setBackgroundSelectedImage
	 */
	this.setBackgroundSelectedImage = function(value) { this.backgroundSelectedImage = value; }
	/**
	 * End caps specify the portion of an image that should not be resized when an image is stretched. This technique is used to implement buttons and other resizable image-based interface elements. When a button with end caps is resized, the resizing occurs only in the middle of the button, in the region between the end caps. The end caps themselves keep their original size and appearance. This property specifies the size of the top end cap. The middle (stretchable) portion is assumed to be 1 pixel wide. The bottom end cap is therefore computed by adding the size of the top end cap and the middle portion together and then subtracting that value from the height of the image
	 * @alias Titanium_UI_TableViewSection.backgroundTopCap
	 * @property {Float}
	 */
	this.backgroundTopCap = 0.0
	/**
	 * Get the End caps specify the portion of an image that should not be resized when an image is stretched. This technique is used to implement buttons and other resizable image-based interface elements. When a button with end caps is resized, the resizing occurs only in the middle of the button, in the region between the end caps. The end caps themselves keep their original size and appearance. This property specifies the size of the top end cap. The middle (stretchable) portion is assumed to be 1 pixel wide. The bottom end cap is therefore computed by adding the size of the top end cap and the middle portion together and then subtracting that value from the height of the image
	 * @alias Titanium_UI_TableViewSection.getBackgroundTopCap
	 * @return {Float}
	 */
	this.getBackgroundTopCap = function() { return this.backgroundTopCap; }
	/**
	 * Set the End caps specify the portion of an image that should not be resized when an image is stretched. This technique is used to implement buttons and other resizable image-based interface elements. When a button with end caps is resized, the resizing occurs only in the middle of the button, in the region between the end caps. The end caps themselves keep their original size and appearance. This property specifies the size of the top end cap. The middle (stretchable) portion is assumed to be 1 pixel wide. The bottom end cap is therefore computed by adding the size of the top end cap and the middle portion together and then subtracting that value from the height of the image
	 * @param {Float} value New value to set.
	 * @alias Titanium_UI_TableViewSection.setBackgroundTopCap
	 */
	this.setBackgroundTopCap = function(value) { this.backgroundTopCap = value; }
	/**
	 * the border color of the view
	 * @alias Titanium_UI_TableViewSection.borderColor
	 * @property {String}
	 */
	this.borderColor = ''
	/**
	 * Get the the border color of the view
	 * @alias Titanium_UI_TableViewSection.getBorderColor
	 * @return {String}
	 */
	this.getBorderColor = function() { return this.borderColor; }
	/**
	 * Set the the border color of the view
	 * @param {String} value New value to set.
	 * @alias Titanium_UI_TableViewSection.setBorderColor
	 */
	this.setBorderColor = function(value) { this.borderColor = value; }
	/**
	 * the border radius of the view
	 * @alias Titanium_UI_TableViewSection.borderRadius
	 * @property {Float}
	 */
	this.borderRadius = 0.0
	/**
	 * Get the the border radius of the view
	 * @alias Titanium_UI_TableViewSection.getBorderRadius
	 * @return {Float}
	 */
	this.getBorderRadius = function() { return this.borderRadius; }
	/**
	 * Set the the border radius of the view
	 * @param {Float} value New value to set.
	 * @alias Titanium_UI_TableViewSection.setBorderRadius
	 */
	this.setBorderRadius = function(value) { this.borderRadius = value; }
	/**
	 * the border width of the view
	 * @alias Titanium_UI_TableViewSection.borderWidth
	 * @property {Float}
	 */
	this.borderWidth = 0.0
	/**
	 * Get the the border width of the view
	 * @alias Titanium_UI_TableViewSection.getBorderWidth
	 * @return {Float}
	 */
	this.getBorderWidth = function() { return this.borderWidth; }
	/**
	 * Set the the border width of the view
	 * @param {Float} value New value to set.
	 * @alias Titanium_UI_TableViewSection.setBorderWidth
	 */
	this.setBorderWidth = function(value) { this.borderWidth = value; }
	/**
	 * property for the view bottom position. This position is relative to the view's parent. Can be either a float value or a dimension string ie 'auto' (default), '50%' (iPhone only).
	 * @alias Titanium_UI_TableViewSection.bottom
	 * @property {Float,String}
	 */
	this.bottom = 0.0
	/**
	 * Get the property for the view bottom position. This position is relative to the view's parent. Can be either a float value or a dimension string ie 'auto' (default), '50%' (iPhone only).
	 * @alias Titanium_UI_TableViewSection.getBottom
	 * @return {Float,String}
	 */
	this.getBottom = function() { return this.bottom; }
	/**
	 * Set the property for the view bottom position. This position is relative to the view's parent. Can be either a float value or a dimension string ie 'auto' (default), '50%' (iPhone only).
	 * @param {Float,String} value New value to set.
	 * @alias Titanium_UI_TableViewSection.setBottom
	 */
	this.setBottom = function(value) { this.bottom = value; }
	/**
	 * a dictionary with properties x and y to indicate the center of the views position relative to the parent view
	 * @alias Titanium_UI_TableViewSection.center
	 * @property {Object}
	 */
	this.center = {}
	/**
	 * Get the a dictionary with properties x and y to indicate the center of the views position relative to the parent view
	 * @alias Titanium_UI_TableViewSection.getCenter
	 * @return {Object}
	 */
	this.getCenter = function() { return this.center; }
	/**
	 * Set the a dictionary with properties x and y to indicate the center of the views position relative to the parent view
	 * @param {Object} value New value to set.
	 * @alias Titanium_UI_TableViewSection.setCenter
	 */
	this.setCenter = function(value) { this.center = value; }
	/**
	 * Set true if you want a view to be focusable when navigating with the trackball or D-Pad. Default: false. (Android Only)
	 * @alias Titanium_UI_TableViewSection.focusable
	 * @property {Boolean}
	 */
	this.focusable = false
	/**
	 * Get the Set true if you want a view to be focusable when navigating with the trackball or D-Pad. Default: false. (Android Only)
	 * @alias Titanium_UI_TableViewSection.getFocusable
	 * @return {Boolean}
	 */
	this.getFocusable = function() { return this.focusable; }
	/**
	 * Set the Set true if you want a view to be focusable when navigating with the trackball or D-Pad. Default: false. (Android Only)
	 * @param {Boolean} value New value to set.
	 * @alias Titanium_UI_TableViewSection.setFocusable
	 */
	this.setFocusable = function(value) { this.focusable = value; }
	/**
	 * the font family
	 * @alias Titanium_UI_TableViewSection.font-family
	 * @property {String}
	 */
	this.font-family = ''
	/**
	 * Get the the font family
	 * @alias Titanium_UI_TableViewSection.getFont-family
	 * @return {String}
	 */
	this.getFont-family = function() { return this.font-family; }
	/**
	 * Set the the font family
	 * @param {String} value New value to set.
	 * @alias Titanium_UI_TableViewSection.setFont-family
	 */
	this.setFont-family = function(value) { this.font-family = value; }
	/**
	 * the font size
	 * @alias Titanium_UI_TableViewSection.font-size
	 * @property {String}
	 */
	this.font-size = ''
	/**
	 * Get the the font size
	 * @alias Titanium_UI_TableViewSection.getFont-size
	 * @return {String}
	 */
	this.getFont-size = function() { return this.font-size; }
	/**
	 * Set the the font size
	 * @param {String} value New value to set.
	 * @alias Titanium_UI_TableViewSection.setFont-size
	 */
	this.setFont-size = function(value) { this.font-size = value; }
	/**
	 * the font style, either normal or italics
	 * @alias Titanium_UI_TableViewSection.font-style
	 * @property {String}
	 */
	this.font-style = ''
	/**
	 * Get the the font style, either normal or italics
	 * @alias Titanium_UI_TableViewSection.getFont-style
	 * @return {String}
	 */
	this.getFont-style = function() { return this.font-style; }
	/**
	 * Set the the font style, either normal or italics
	 * @param {String} value New value to set.
	 * @alias Titanium_UI_TableViewSection.setFont-style
	 */
	this.setFont-style = function(value) { this.font-style = value; }
	/**
	 * the font weight, either normal or bold
	 * @alias Titanium_UI_TableViewSection.font-weight
	 * @property {String}
	 */
	this.font-weight = ''
	/**
	 * Get the the font weight, either normal or bold
	 * @alias Titanium_UI_TableViewSection.getFont-weight
	 * @return {String}
	 */
	this.getFont-weight = function() { return this.font-weight; }
	/**
	 * Set the the font weight, either normal or bold
	 * @param {String} value New value to set.
	 * @alias Titanium_UI_TableViewSection.setFont-weight
	 */
	this.setFont-weight = function(value) { this.font-weight = value; }
	/**
	 * the title of the section footer
	 * @alias Titanium_UI_TableViewSection.footerTitle
	 * @property {String}
	 */
	this.footerTitle = ''
	/**
	 * Get the the title of the section footer
	 * @alias Titanium_UI_TableViewSection.getFooterTitle
	 * @return {String}
	 */
	this.getFooterTitle = function() { return this.footerTitle; }
	/**
	 * Set the the title of the section footer
	 * @param {String} value New value to set.
	 * @alias Titanium_UI_TableViewSection.setFooterTitle
	 */
	this.setFooterTitle = function(value) { this.footerTitle = value; }
	/**
	 * a view to use instead of the default label when rendering the section footer
	 * @alias Titanium_UI_TableViewSection.footerView
	 * @property {Object}
	 */
	this.footerView = {}
	/**
	 * Get the a view to use instead of the default label when rendering the section footer
	 * @alias Titanium_UI_TableViewSection.getFooterView
	 * @return {Object}
	 */
	this.getFooterView = function() { return this.footerView; }
	/**
	 * Set the a view to use instead of the default label when rendering the section footer
	 * @param {Object} value New value to set.
	 * @alias Titanium_UI_TableViewSection.setFooterView
	 */
	this.setFooterView = function(value) { this.footerView = value; }
	/**
	 * the title of the section header
	 * @alias Titanium_UI_TableViewSection.headerTitle
	 * @property {String}
	 */
	this.headerTitle = ''
	/**
	 * Get the the title of the section header
	 * @alias Titanium_UI_TableViewSection.getHeaderTitle
	 * @return {String}
	 */
	this.getHeaderTitle = function() { return this.headerTitle; }
	/**
	 * Set the the title of the section header
	 * @param {String} value New value to set.
	 * @alias Titanium_UI_TableViewSection.setHeaderTitle
	 */
	this.setHeaderTitle = function(value) { this.headerTitle = value; }
	/**
	 * a view to use instead of the default label when rendering the section header
	 * @alias Titanium_UI_TableViewSection.headerView
	 * @property {Object}
	 */
	this.headerView = {}
	/**
	 * Get the a view to use instead of the default label when rendering the section header
	 * @alias Titanium_UI_TableViewSection.getHeaderView
	 * @return {Object}
	 */
	this.getHeaderView = function() { return this.headerView; }
	/**
	 * Set the a view to use instead of the default label when rendering the section header
	 * @param {Object} value New value to set.
	 * @alias Titanium_UI_TableViewSection.setHeaderView
	 */
	this.setHeaderView = function(value) { this.headerView = value; }
	/**
	 * property for the view height. Can be either a float value or a dimension string ie 'auto' (default), '50%' (iPhone only).
	 * @alias Titanium_UI_TableViewSection.height
	 * @property {Float,String}
	 */
	this.height = 0.0
	/**
	 * Get the property for the view height. Can be either a float value or a dimension string ie 'auto' (default), '50%' (iPhone only).
	 * @alias Titanium_UI_TableViewSection.getHeight
	 * @return {Float,String}
	 */
	this.getHeight = function() { return this.height; }
	/**
	 * Set the property for the view height. Can be either a float value or a dimension string ie 'auto' (default), '50%' (iPhone only).
	 * @param {Float,String} value New value to set.
	 * @alias Titanium_UI_TableViewSection.setHeight
	 */
	this.setHeight = function(value) { this.height = value; }
	/**
	 * property for the view left position. This position is relative to the view's parent. Can be either a float value or a dimension string ie 'auto' (default), '50%' (iPhone only).
	 * @alias Titanium_UI_TableViewSection.left
	 * @property {Float,String}
	 */
	this.left = 0.0
	/**
	 * Get the property for the view left position. This position is relative to the view's parent. Can be either a float value or a dimension string ie 'auto' (default), '50%' (iPhone only).
	 * @alias Titanium_UI_TableViewSection.getLeft
	 * @return {Float,String}
	 */
	this.getLeft = function() { return this.left; }
	/**
	 * Set the property for the view left position. This position is relative to the view's parent. Can be either a float value or a dimension string ie 'auto' (default), '50%' (iPhone only).
	 * @param {Float,String} value New value to set.
	 * @alias Titanium_UI_TableViewSection.setLeft
	 */
	this.setLeft = function(value) { this.left = value; }
	/**
	 * the opacity from 0.0-1.0
	 * @alias Titanium_UI_TableViewSection.opacity
	 * @property {Float}
	 */
	this.opacity = 0.0
	/**
	 * Get the the opacity from 0.0-1.0
	 * @alias Titanium_UI_TableViewSection.getOpacity
	 * @return {Float}
	 */
	this.getOpacity = function() { return this.opacity; }
	/**
	 * Set the the opacity from 0.0-1.0
	 * @param {Float} value New value to set.
	 * @alias Titanium_UI_TableViewSection.setOpacity
	 */
	this.setOpacity = function(value) { this.opacity = value; }
	/**
	 * property for the view right position. This position is relative to the view's parent. Can be either a float value or a dimension string ie 'auto' (default), '50%' (iPhone only).
	 * @alias Titanium_UI_TableViewSection.right
	 * @property {Float,String}
	 */
	this.right = 0.0
	/**
	 * Get the property for the view right position. This position is relative to the view's parent. Can be either a float value or a dimension string ie 'auto' (default), '50%' (iPhone only).
	 * @alias Titanium_UI_TableViewSection.getRight
	 * @return {Float,String}
	 */
	this.getRight = function() { return this.right; }
	/**
	 * Set the property for the view right position. This position is relative to the view's parent. Can be either a float value or a dimension string ie 'auto' (default), '50%' (iPhone only).
	 * @param {Float,String} value New value to set.
	 * @alias Titanium_UI_TableViewSection.setRight
	 */
	this.setRight = function(value) { this.right = value; }
	/**
	 * the (readonly) number of rows in the section
	 * @alias Titanium_UI_TableViewSection.rowCount
	 * @property {Integer}
	 */
	this.rowCount = 0
	/**
	 * Get the the (readonly) number of rows in the section
	 * @alias Titanium_UI_TableViewSection.getRowCount
	 * @return {Integer}
	 */
	this.getRowCount = function() { return this.rowCount; }
	/**
	 * Set the the (readonly) number of rows in the section
	 * @param {Integer} value New value to set.
	 * @alias Titanium_UI_TableViewSection.setRowCount
	 */
	this.setRowCount = function(value) { this.rowCount = value; }
	/**
	 * the size of the view as a dictionary of width and height properties
	 * @alias Titanium_UI_TableViewSection.size
	 * @property {Object}
	 */
	this.size = {}
	/**
	 * Get the the size of the view as a dictionary of width and height properties
	 * @alias Titanium_UI_TableViewSection.getSize
	 * @return {Object}
	 */
	this.getSize = function() { return this.size; }
	/**
	 * Set the the size of the view as a dictionary of width and height properties
	 * @param {Object} value New value to set.
	 * @alias Titanium_UI_TableViewSection.setSize
	 */
	this.setSize = function(value) { this.size = value; }
	/**
	 * One of Titanium.UI.Android.SOFT_KEYBOARD_DEFAULT_ON_FOCUS, Titanium.UI.Android.SOFT_KEYBOARD_HIDE_ON_FOCUS, or Titanium.UI.Android.SOFT_KEYBOARD_SHOW_ON_FOCUS. (Android only)
	 * @alias Titanium_UI_TableViewSection.softKeyboardOnFocus
	 * @property {Integer}
	 */
	this.softKeyboardOnFocus = 0
	/**
	 * Get the One of Titanium.UI.Android.SOFT_KEYBOARD_DEFAULT_ON_FOCUS, Titanium.UI.Android.SOFT_KEYBOARD_HIDE_ON_FOCUS, or Titanium.UI.Android.SOFT_KEYBOARD_SHOW_ON_FOCUS. (Android only)
	 * @alias Titanium_UI_TableViewSection.getSoftKeyboardOnFocus
	 * @return {Integer}
	 */
	this.getSoftKeyboardOnFocus = function() { return this.softKeyboardOnFocus; }
	/**
	 * Set the One of Titanium.UI.Android.SOFT_KEYBOARD_DEFAULT_ON_FOCUS, Titanium.UI.Android.SOFT_KEYBOARD_HIDE_ON_FOCUS, or Titanium.UI.Android.SOFT_KEYBOARD_SHOW_ON_FOCUS. (Android only)
	 * @param {Integer} value New value to set.
	 * @alias Titanium_UI_TableViewSection.setSoftKeyboardOnFocus
	 */
	this.setSoftKeyboardOnFocus = function(value) { this.softKeyboardOnFocus = value; }
	/**
	 * property for the view top position. This position is relative to the view's parent. Can be either a float value or a dimension string ie 'auto' (default), '50%' (iPhone only).
	 * @alias Titanium_UI_TableViewSection.top
	 * @property {Float,String}
	 */
	this.top = 0.0
	/**
	 * Get the property for the view top position. This position is relative to the view's parent. Can be either a float value or a dimension string ie 'auto' (default), '50%' (iPhone only).
	 * @alias Titanium_UI_TableViewSection.getTop
	 * @return {Float,String}
	 */
	this.getTop = function() { return this.top; }
	/**
	 * Set the property for the view top position. This position is relative to the view's parent. Can be either a float value or a dimension string ie 'auto' (default), '50%' (iPhone only).
	 * @param {Float,String} value New value to set.
	 * @alias Titanium_UI_TableViewSection.setTop
	 */
	this.setTop = function(value) { this.top = value; }
	/**
	 * a boolean indicating if the view should receive touch events (true, default) or forward them to peers (false)
	 * @alias Titanium_UI_TableViewSection.touchEnabled
	 * @property {Boolean}
	 */
	this.touchEnabled = false
	/**
	 * Get the a boolean indicating if the view should receive touch events (true, default) or forward them to peers (false)
	 * @alias Titanium_UI_TableViewSection.getTouchEnabled
	 * @return {Boolean}
	 */
	this.getTouchEnabled = function() { return this.touchEnabled; }
	/**
	 * Set the a boolean indicating if the view should receive touch events (true, default) or forward them to peers (false)
	 * @param {Boolean} value New value to set.
	 * @alias Titanium_UI_TableViewSection.setTouchEnabled
	 */
	this.setTouchEnabled = function(value) { this.touchEnabled = value; }
	/**
	 * the transformation matrix to apply to the view
	 * @alias Titanium_UI_TableViewSection.transform
	 * @property {Object}
	 */
	this.transform = {}
	/**
	 * Get the the transformation matrix to apply to the view
	 * @alias Titanium_UI_TableViewSection.getTransform
	 * @return {Object}
	 */
	this.getTransform = function() { return this.transform; }
	/**
	 * Set the the transformation matrix to apply to the view
	 * @param {Object} value New value to set.
	 * @alias Titanium_UI_TableViewSection.setTransform
	 */
	this.setTransform = function(value) { this.transform = value; }
	/**
	 * a boolean of the visibility of the view
	 * @alias Titanium_UI_TableViewSection.visible
	 * @property {Boolean}
	 */
	this.visible = false
	/**
	 * Get the a boolean of the visibility of the view
	 * @alias Titanium_UI_TableViewSection.getVisible
	 * @return {Boolean}
	 */
	this.getVisible = function() { return this.visible; }
	/**
	 * Set the a boolean of the visibility of the view
	 * @param {Boolean} value New value to set.
	 * @alias Titanium_UI_TableViewSection.setVisible
	 */
	this.setVisible = function(value) { this.visible = value; }
	/**
	 * property for the view width. Can be either a float value or a dimension string ie 'auto' (default), '50%' (iPhone only).
	 * @alias Titanium_UI_TableViewSection.width
	 * @property {Float,String}
	 */
	this.width = 0.0
	/**
	 * Get the property for the view width. Can be either a float value or a dimension string ie 'auto' (default), '50%' (iPhone only).
	 * @alias Titanium_UI_TableViewSection.getWidth
	 * @return {Float,String}
	 */
	this.getWidth = function() { return this.width; }
	/**
	 * Set the property for the view width. Can be either a float value or a dimension string ie 'auto' (default), '50%' (iPhone only).
	 * @param {Float,String} value New value to set.
	 * @alias Titanium_UI_TableViewSection.setWidth
	 */
	this.setWidth = function(value) { this.width = value; }
	/**
	 * the z index position relative to other sibling views
	 * @alias Titanium_UI_TableViewSection.zIndex
	 * @property {Integer}
	 */
	this.zIndex = 0
	/**
	 * Get the the z index position relative to other sibling views
	 * @alias Titanium_UI_TableViewSection.getZIndex
	 * @return {Integer}
	 */
	this.getZIndex = function() { return this.zIndex; }
	/**
	 * Set the the z index position relative to other sibling views
	 * @param {Integer} value New value to set.
	 * @alias Titanium_UI_TableViewSection.setZIndex
	 */
	this.setZIndex = function(value) { this.zIndex = value; }
	/**
	 * add a row to the section
	 * @param {Object} view the view to add to this views hiearchy
	 * @param {Object} row the row object to add to the section
	 * @alias Titanium_UI_TableViewSection.add
	 */
	this.add = function add(view,row) { }
	/**
	 * add an event listener for the instance to receive view triggered events
	 * @param {String} name name of the event
	 * @param {Function} callback callback function to invoke when the event is fired
	 * @alias Titanium_UI_TableViewSection.addEventListener
	 */
	this.addEventListener = function addEventListener(name,callback) { }
	/**
	 * animate the view
	 * @param {Object} obj either a dictionary of animation properties or an Animation object
	 * @param {Function} callback function to be invoked upon completion of the animation
	 * @alias Titanium_UI_TableViewSection.animate
	 */
	this.animate = function animate(obj,callback) { }
	/**
	 * fire a synthesized event to the views listener
	 * @param {String} name name of the event
	 * @param {Object} event event object
	 * @alias Titanium_UI_TableViewSection.fireEvent
	 */
	this.fireEvent = function fireEvent(name,event) { }
	/**
	 * hide the view
	 * @alias Titanium_UI_TableViewSection.hide
	 */
	this.hide = function hide() { }
	/**
	 * remove a remove from the section
	 * @param {Object} view the view to remove from this views hiearchy
	 * @param {Object} row the row object to remove from the section
	 * @alias Titanium_UI_TableViewSection.remove
	 */
	this.remove = function remove(view,row) { }
	/**
	 * remove a previously added event listener
	 * @param {String} name name of the event
	 * @param {Function} callback callback function passed in addEventListener
	 * @alias Titanium_UI_TableViewSection.removeEventListener
	 */
	this.removeEventListener = function removeEventListener(name,callback) { }
	/**
	 * make the view visible
	 * @alias Titanium_UI_TableViewSection.show
	 */
	this.show = function show() { }
	/**
	 * return a Blob image of the rendered view
	 * @param {Function} f function to be invoked upon completion. if non-null, this method will be performed asynchronously. if null, it will be performed immediately
	 * @alias Titanium_UI_TableViewSection.toImage
	 * @return {Object}
	 */
	this.toImage = function toImage(f) { return {}; }
};

/**
 * A Text Area is created by the method Titanium.UI.createTextArea. The Text Area is a multiline field.
 * @since 0.8
 */
function Titanium_UI_TextArea() {
	/**
	 * a dictionary with properties x and y to indicate the anchor point value. anchor specifies the position by which animation should occur. center is 0.5, 0.5
	 * @alias Titanium_UI_TextArea.anchorPoint
	 * @property {Object}
	 */
	this.anchorPoint = {}
	/**
	 * Get the a dictionary with properties x and y to indicate the anchor point value. anchor specifies the position by which animation should occur. center is 0.5, 0.5
	 * @alias Titanium_UI_TextArea.getAnchorPoint
	 * @return {Object}
	 */
	this.getAnchorPoint = function() { return this.anchorPoint; }
	/**
	 * Set the a dictionary with properties x and y to indicate the anchor point value. anchor specifies the position by which animation should occur. center is 0.5, 0.5
	 * @param {Object} value New value to set.
	 * @alias Titanium_UI_TextArea.setAnchorPoint
	 */
	this.setAnchorPoint = function(value) { this.anchorPoint = value; }
	/**
	 * read-only object with x and y properties of where the view is during animation
	 * @alias Titanium_UI_TextArea.animatedCenterPoint
	 * @property {Object}
	 */
	this.animatedCenterPoint = {}
	/**
	 * Get the read-only object with x and y properties of where the view is during animation
	 * @alias Titanium_UI_TextArea.getAnimatedCenterPoint
	 * @return {Object}
	 */
	this.getAnimatedCenterPoint = function() { return this.animatedCenterPoint; }
	/**
	 * Set the read-only object with x and y properties of where the view is during animation
	 * @param {Object} value New value to set.
	 * @alias Titanium_UI_TextArea.setAnimatedCenterPoint
	 */
	this.setAnimatedCenterPoint = function(value) { this.animatedCenterPoint = value; }
	/**
	 * value of the background color of the field
	 * @alias Titanium_UI_TextArea.backgroundColor
	 * @property {String}
	 */
	this.backgroundColor = ''
	/**
	 * Get the value of the background color of the field
	 * @alias Titanium_UI_TextArea.getBackgroundColor
	 * @return {String}
	 */
	this.getBackgroundColor = function() { return this.backgroundColor; }
	/**
	 * Set the value of the background color of the field
	 * @param {String} value New value to set.
	 * @alias Titanium_UI_TextArea.setBackgroundColor
	 */
	this.setBackgroundColor = function(value) { this.backgroundColor = value; }
	/**
	 * the disabled background color of the view. (Android)
	 * @alias Titanium_UI_TextArea.backgroundDisabledColor
	 * @property {String}
	 */
	this.backgroundDisabledColor = ''
	/**
	 * Get the the disabled background color of the view. (Android)
	 * @alias Titanium_UI_TextArea.getBackgroundDisabledColor
	 * @return {String}
	 */
	this.getBackgroundDisabledColor = function() { return this.backgroundDisabledColor; }
	/**
	 * Set the the disabled background color of the view. (Android)
	 * @param {String} value New value to set.
	 * @alias Titanium_UI_TextArea.setBackgroundDisabledColor
	 */
	this.setBackgroundDisabledColor = function(value) { this.backgroundDisabledColor = value; }
	/**
	 * the disabled background image url of the view. (Android)
	 * @alias Titanium_UI_TextArea.backgroundDisabledImage
	 * @property {String}
	 */
	this.backgroundDisabledImage = ''
	/**
	 * Get the the disabled background image url of the view. (Android)
	 * @alias Titanium_UI_TextArea.getBackgroundDisabledImage
	 * @return {String}
	 */
	this.getBackgroundDisabledImage = function() { return this.backgroundDisabledImage; }
	/**
	 * Set the the disabled background image url of the view. (Android)
	 * @param {String} value New value to set.
	 * @alias Titanium_UI_TextArea.setBackgroundDisabledImage
	 */
	this.setBackgroundDisabledImage = function(value) { this.backgroundDisabledImage = value; }
	/**
	 * the focused background color of the view. focusable must be true for normal views. (Android)
	 * @alias Titanium_UI_TextArea.backgroundFocusedColor
	 * @property {String}
	 */
	this.backgroundFocusedColor = ''
	/**
	 * Get the the focused background color of the view. focusable must be true for normal views. (Android)
	 * @alias Titanium_UI_TextArea.getBackgroundFocusedColor
	 * @return {String}
	 */
	this.getBackgroundFocusedColor = function() { return this.backgroundFocusedColor; }
	/**
	 * Set the the focused background color of the view. focusable must be true for normal views. (Android)
	 * @param {String} value New value to set.
	 * @alias Titanium_UI_TextArea.setBackgroundFocusedColor
	 */
	this.setBackgroundFocusedColor = function(value) { this.backgroundFocusedColor = value; }
	/**
	 * the focused background image url of the view. focusable must be true for normal views. (Android)
	 * @alias Titanium_UI_TextArea.backgroundFocusedImage
	 * @property {String}
	 */
	this.backgroundFocusedImage = ''
	/**
	 * Get the the focused background image url of the view. focusable must be true for normal views. (Android)
	 * @alias Titanium_UI_TextArea.getBackgroundFocusedImage
	 * @return {String}
	 */
	this.getBackgroundFocusedImage = function() { return this.backgroundFocusedImage; }
	/**
	 * Set the the focused background image url of the view. focusable must be true for normal views. (Android)
	 * @param {String} value New value to set.
	 * @alias Titanium_UI_TextArea.setBackgroundFocusedImage
	 */
	this.setBackgroundFocusedImage = function(value) { this.backgroundFocusedImage = value; }
	/**
	 * a background gradient for the view with the properties: type,startPoint,endPoint,startRadius,endRadius,backfillStart,backfillEnd,colors.
	 * @alias Titanium_UI_TextArea.backgroundGradient
	 * @property {Object}
	 */
	this.backgroundGradient = {}
	/**
	 * Get the a background gradient for the view with the properties: type,startPoint,endPoint,startRadius,endRadius,backfillStart,backfillEnd,colors.
	 * @alias Titanium_UI_TextArea.getBackgroundGradient
	 * @return {Object}
	 */
	this.getBackgroundGradient = function() { return this.backgroundGradient; }
	/**
	 * Set the a background gradient for the view with the properties: type,startPoint,endPoint,startRadius,endRadius,backfillStart,backfillEnd,colors.
	 * @param {Object} value New value to set.
	 * @alias Titanium_UI_TextArea.setBackgroundGradient
	 */
	this.setBackgroundGradient = function(value) { this.backgroundGradient = value; }
	/**
	 * the background image url of the view
	 * @alias Titanium_UI_TextArea.backgroundImage
	 * @property {String}
	 */
	this.backgroundImage = ''
	/**
	 * Get the the background image url of the view
	 * @alias Titanium_UI_TextArea.getBackgroundImage
	 * @return {String}
	 */
	this.getBackgroundImage = function() { return this.backgroundImage; }
	/**
	 * Set the the background image url of the view
	 * @param {String} value New value to set.
	 * @alias Titanium_UI_TextArea.setBackgroundImage
	 */
	this.setBackgroundImage = function(value) { this.backgroundImage = value; }
	/**
	 * End caps specify the portion of an image that should not be resized when an image is stretched. This technique is used to implement buttons and other resizable image-based interface elements. When a button with end caps is resized, the resizing occurs only in the middle of the button, in the region between the end caps. The end caps themselves keep their original size and appearance. This property specifies the size of the left end cap. The middle (stretchable) portion is assumed to be 1 pixel wide. The right end cap is therefore computed by adding the size of the left end cap and the middle portion together and then subtracting that value from the width of the image
	 * @alias Titanium_UI_TextArea.backgroundLeftCap
	 * @property {Float}
	 */
	this.backgroundLeftCap = 0.0
	/**
	 * Get the End caps specify the portion of an image that should not be resized when an image is stretched. This technique is used to implement buttons and other resizable image-based interface elements. When a button with end caps is resized, the resizing occurs only in the middle of the button, in the region between the end caps. The end caps themselves keep their original size and appearance. This property specifies the size of the left end cap. The middle (stretchable) portion is assumed to be 1 pixel wide. The right end cap is therefore computed by adding the size of the left end cap and the middle portion together and then subtracting that value from the width of the image
	 * @alias Titanium_UI_TextArea.getBackgroundLeftCap
	 * @return {Float}
	 */
	this.getBackgroundLeftCap = function() { return this.backgroundLeftCap; }
	/**
	 * Set the End caps specify the portion of an image that should not be resized when an image is stretched. This technique is used to implement buttons and other resizable image-based interface elements. When a button with end caps is resized, the resizing occurs only in the middle of the button, in the region between the end caps. The end caps themselves keep their original size and appearance. This property specifies the size of the left end cap. The middle (stretchable) portion is assumed to be 1 pixel wide. The right end cap is therefore computed by adding the size of the left end cap and the middle portion together and then subtracting that value from the width of the image
	 * @param {Float} value New value to set.
	 * @alias Titanium_UI_TextArea.setBackgroundLeftCap
	 */
	this.setBackgroundLeftCap = function(value) { this.backgroundLeftCap = value; }
	/**
	 * the selected background color of the view. focusable must be true for normal views. (Android)
	 * @alias Titanium_UI_TextArea.backgroundSelectedColor
	 * @property {String}
	 */
	this.backgroundSelectedColor = ''
	/**
	 * Get the the selected background color of the view. focusable must be true for normal views. (Android)
	 * @alias Titanium_UI_TextArea.getBackgroundSelectedColor
	 * @return {String}
	 */
	this.getBackgroundSelectedColor = function() { return this.backgroundSelectedColor; }
	/**
	 * Set the the selected background color of the view. focusable must be true for normal views. (Android)
	 * @param {String} value New value to set.
	 * @alias Titanium_UI_TextArea.setBackgroundSelectedColor
	 */
	this.setBackgroundSelectedColor = function(value) { this.backgroundSelectedColor = value; }
	/**
	 * the selected background image url of the view. focusable must be true for normal views. (Android)
	 * @alias Titanium_UI_TextArea.backgroundSelectedImage
	 * @property {String}
	 */
	this.backgroundSelectedImage = ''
	/**
	 * Get the the selected background image url of the view. focusable must be true for normal views. (Android)
	 * @alias Titanium_UI_TextArea.getBackgroundSelectedImage
	 * @return {String}
	 */
	this.getBackgroundSelectedImage = function() { return this.backgroundSelectedImage; }
	/**
	 * Set the the selected background image url of the view. focusable must be true for normal views. (Android)
	 * @param {String} value New value to set.
	 * @alias Titanium_UI_TextArea.setBackgroundSelectedImage
	 */
	this.setBackgroundSelectedImage = function(value) { this.backgroundSelectedImage = value; }
	/**
	 * End caps specify the portion of an image that should not be resized when an image is stretched. This technique is used to implement buttons and other resizable image-based interface elements. When a button with end caps is resized, the resizing occurs only in the middle of the button, in the region between the end caps. The end caps themselves keep their original size and appearance. This property specifies the size of the top end cap. The middle (stretchable) portion is assumed to be 1 pixel wide. The bottom end cap is therefore computed by adding the size of the top end cap and the middle portion together and then subtracting that value from the height of the image
	 * @alias Titanium_UI_TextArea.backgroundTopCap
	 * @property {Float}
	 */
	this.backgroundTopCap = 0.0
	/**
	 * Get the End caps specify the portion of an image that should not be resized when an image is stretched. This technique is used to implement buttons and other resizable image-based interface elements. When a button with end caps is resized, the resizing occurs only in the middle of the button, in the region between the end caps. The end caps themselves keep their original size and appearance. This property specifies the size of the top end cap. The middle (stretchable) portion is assumed to be 1 pixel wide. The bottom end cap is therefore computed by adding the size of the top end cap and the middle portion together and then subtracting that value from the height of the image
	 * @alias Titanium_UI_TextArea.getBackgroundTopCap
	 * @return {Float}
	 */
	this.getBackgroundTopCap = function() { return this.backgroundTopCap; }
	/**
	 * Set the End caps specify the portion of an image that should not be resized when an image is stretched. This technique is used to implement buttons and other resizable image-based interface elements. When a button with end caps is resized, the resizing occurs only in the middle of the button, in the region between the end caps. The end caps themselves keep their original size and appearance. This property specifies the size of the top end cap. The middle (stretchable) portion is assumed to be 1 pixel wide. The bottom end cap is therefore computed by adding the size of the top end cap and the middle portion together and then subtracting that value from the height of the image
	 * @param {Float} value New value to set.
	 * @alias Titanium_UI_TextArea.setBackgroundTopCap
	 */
	this.setBackgroundTopCap = function(value) { this.backgroundTopCap = value; }
	/**
	 * the border color of the view
	 * @alias Titanium_UI_TextArea.borderColor
	 * @property {String}
	 */
	this.borderColor = ''
	/**
	 * Get the the border color of the view
	 * @alias Titanium_UI_TextArea.getBorderColor
	 * @return {String}
	 */
	this.getBorderColor = function() { return this.borderColor; }
	/**
	 * Set the the border color of the view
	 * @param {String} value New value to set.
	 * @alias Titanium_UI_TextArea.setBorderColor
	 */
	this.setBorderColor = function(value) { this.borderColor = value; }
	/**
	 * the border radius of the view
	 * @alias Titanium_UI_TextArea.borderRadius
	 * @property {Float}
	 */
	this.borderRadius = 0.0
	/**
	 * Get the the border radius of the view
	 * @alias Titanium_UI_TextArea.getBorderRadius
	 * @return {Float}
	 */
	this.getBorderRadius = function() { return this.borderRadius; }
	/**
	 * Set the the border radius of the view
	 * @param {Float} value New value to set.
	 * @alias Titanium_UI_TextArea.setBorderRadius
	 */
	this.setBorderRadius = function(value) { this.borderRadius = value; }
	/**
	 * the border width of the view
	 * @alias Titanium_UI_TextArea.borderWidth
	 * @property {Float}
	 */
	this.borderWidth = 0.0
	/**
	 * Get the the border width of the view
	 * @alias Titanium_UI_TextArea.getBorderWidth
	 * @return {Float}
	 */
	this.getBorderWidth = function() { return this.borderWidth; }
	/**
	 * Set the the border width of the view
	 * @param {Float} value New value to set.
	 * @alias Titanium_UI_TextArea.setBorderWidth
	 */
	this.setBorderWidth = function(value) { this.borderWidth = value; }
	/**
	 * property for the view bottom position. This position is relative to the view's parent. Can be either a float value or a dimension string ie 'auto' (default), '50%' (iPhone only).
	 * @alias Titanium_UI_TextArea.bottom
	 * @property {Float,String}
	 */
	this.bottom = 0.0
	/**
	 * Get the property for the view bottom position. This position is relative to the view's parent. Can be either a float value or a dimension string ie 'auto' (default), '50%' (iPhone only).
	 * @alias Titanium_UI_TextArea.getBottom
	 * @return {Float,String}
	 */
	this.getBottom = function() { return this.bottom; }
	/**
	 * Set the property for the view bottom position. This position is relative to the view's parent. Can be either a float value or a dimension string ie 'auto' (default), '50%' (iPhone only).
	 * @param {Float,String} value New value to set.
	 * @alias Titanium_UI_TextArea.setBottom
	 */
	this.setBottom = function(value) { this.bottom = value; }
	/**
	 * a dictionary with properties x and y to indicate the center of the views position relative to the parent view
	 * @alias Titanium_UI_TextArea.center
	 * @property {Object}
	 */
	this.center = {}
	/**
	 * Get the a dictionary with properties x and y to indicate the center of the views position relative to the parent view
	 * @alias Titanium_UI_TextArea.getCenter
	 * @return {Object}
	 */
	this.getCenter = function() { return this.center; }
	/**
	 * Set the a dictionary with properties x and y to indicate the center of the views position relative to the parent view
	 * @param {Object} value New value to set.
	 * @alias Titanium_UI_TextArea.setCenter
	 */
	this.setCenter = function(value) { this.center = value; }
	/**
	 * boolean indicating if the field is editable
	 * @alias Titanium_UI_TextArea.editable
	 * @property {Boolean}
	 */
	this.editable = false
	/**
	 * Get the boolean indicating if the field is editable
	 * @alias Titanium_UI_TextArea.getEditable
	 * @return {Boolean}
	 */
	this.getEditable = function() { return this.editable; }
	/**
	 * Set the boolean indicating if the field is editable
	 * @param {Boolean} value New value to set.
	 * @alias Titanium_UI_TextArea.setEditable
	 */
	this.setEditable = function(value) { this.editable = value; }
	/**
	 * boolean indicating the enabled state of the field
	 * @alias Titanium_UI_TextArea.enabled
	 * @property {Boolean}
	 */
	this.enabled = false
	/**
	 * Get the boolean indicating the enabled state of the field
	 * @alias Titanium_UI_TextArea.getEnabled
	 * @return {Boolean}
	 */
	this.getEnabled = function() { return this.enabled; }
	/**
	 * Set the boolean indicating the enabled state of the field
	 * @param {Boolean} value New value to set.
	 * @alias Titanium_UI_TextArea.setEnabled
	 */
	this.setEnabled = function(value) { this.enabled = value; }
	/**
	 * Set true if you want a view to be focusable when navigating with the trackball or D-Pad. Default: false. (Android Only)
	 * @alias Titanium_UI_TextArea.focusable
	 * @property {Boolean}
	 */
	this.focusable = false
	/**
	 * Get the Set true if you want a view to be focusable when navigating with the trackball or D-Pad. Default: false. (Android Only)
	 * @alias Titanium_UI_TextArea.getFocusable
	 * @return {Boolean}
	 */
	this.getFocusable = function() { return this.focusable; }
	/**
	 * Set the Set true if you want a view to be focusable when navigating with the trackball or D-Pad. Default: false. (Android Only)
	 * @param {Boolean} value New value to set.
	 * @alias Titanium_UI_TextArea.setFocusable
	 */
	this.setFocusable = function(value) { this.focusable = value; }
	/**
	 * the font family
	 * @alias Titanium_UI_TextArea.font-family
	 * @property {String}
	 */
	this.font-family = ''
	/**
	 * Get the the font family
	 * @alias Titanium_UI_TextArea.getFont-family
	 * @return {String}
	 */
	this.getFont-family = function() { return this.font-family; }
	/**
	 * Set the the font family
	 * @param {String} value New value to set.
	 * @alias Titanium_UI_TextArea.setFont-family
	 */
	this.setFont-family = function(value) { this.font-family = value; }
	/**
	 * the font size
	 * @alias Titanium_UI_TextArea.font-size
	 * @property {String}
	 */
	this.font-size = ''
	/**
	 * Get the the font size
	 * @alias Titanium_UI_TextArea.getFont-size
	 * @return {String}
	 */
	this.getFont-size = function() { return this.font-size; }
	/**
	 * Set the the font size
	 * @param {String} value New value to set.
	 * @alias Titanium_UI_TextArea.setFont-size
	 */
	this.setFont-size = function(value) { this.font-size = value; }
	/**
	 * the font style, either normal or italics
	 * @alias Titanium_UI_TextArea.font-style
	 * @property {String}
	 */
	this.font-style = ''
	/**
	 * Get the the font style, either normal or italics
	 * @alias Titanium_UI_TextArea.getFont-style
	 * @return {String}
	 */
	this.getFont-style = function() { return this.font-style; }
	/**
	 * Set the the font style, either normal or italics
	 * @param {String} value New value to set.
	 * @alias Titanium_UI_TextArea.setFont-style
	 */
	this.setFont-style = function(value) { this.font-style = value; }
	/**
	 * the font weight, either normal or bold
	 * @alias Titanium_UI_TextArea.font-weight
	 * @property {String}
	 */
	this.font-weight = ''
	/**
	 * Get the the font weight, either normal or bold
	 * @alias Titanium_UI_TextArea.getFont-weight
	 * @return {String}
	 */
	this.getFont-weight = function() { return this.font-weight; }
	/**
	 * Set the the font weight, either normal or bold
	 * @param {String} value New value to set.
	 * @alias Titanium_UI_TextArea.setFont-weight
	 */
	this.setFont-weight = function(value) { this.font-weight = value; }
	/**
	 * property for the view height. Can be either a float value or a dimension string ie 'auto' (default), '50%' (iPhone only).
	 * @alias Titanium_UI_TextArea.height
	 * @property {Float,String}
	 */
	this.height = 0.0
	/**
	 * Get the property for the view height. Can be either a float value or a dimension string ie 'auto' (default), '50%' (iPhone only).
	 * @alias Titanium_UI_TextArea.getHeight
	 * @return {Float,String}
	 */
	this.getHeight = function() { return this.height; }
	/**
	 * Set the property for the view height. Can be either a float value or a dimension string ie 'auto' (default), '50%' (iPhone only).
	 * @param {Float,String} value New value to set.
	 * @alias Titanium_UI_TextArea.setHeight
	 */
	this.setHeight = function(value) { this.height = value; }
	/**
	 * array of toolbar button objects to be used when the keyboard is displayed
	 * @alias Titanium_UI_TextArea.keyboardToolbar
	 * @property {Array}
	 */
	this.keyboardToolbar = []
	/**
	 * Get the array of toolbar button objects to be used when the keyboard is displayed
	 * @alias Titanium_UI_TextArea.getKeyboardToolbar
	 * @return {Array}
	 */
	this.getKeyboardToolbar = function() { return this.keyboardToolbar; }
	/**
	 * Set the array of toolbar button objects to be used when the keyboard is displayed
	 * @param {Array} value New value to set.
	 * @alias Titanium_UI_TextArea.setKeyboardToolbar
	 */
	this.setKeyboardToolbar = function(value) { this.keyboardToolbar = value; }
	/**
	 * the color of the keyboard toolbar
	 * @alias Titanium_UI_TextArea.keyboardToolbarColor
	 * @property {String}
	 */
	this.keyboardToolbarColor = ''
	/**
	 * Get the the color of the keyboard toolbar
	 * @alias Titanium_UI_TextArea.getKeyboardToolbarColor
	 * @return {String}
	 */
	this.getKeyboardToolbarColor = function() { return this.keyboardToolbarColor; }
	/**
	 * Set the the color of the keyboard toolbar
	 * @param {String} value New value to set.
	 * @alias Titanium_UI_TextArea.setKeyboardToolbarColor
	 */
	this.setKeyboardToolbarColor = function(value) { this.keyboardToolbarColor = value; }
	/**
	 * the height of the keyboard toolbar
	 * @alias Titanium_UI_TextArea.keyboardToolbarHeight
	 * @property {Float}
	 */
	this.keyboardToolbarHeight = 0.0
	/**
	 * Get the the height of the keyboard toolbar
	 * @alias Titanium_UI_TextArea.getKeyboardToolbarHeight
	 * @return {Float}
	 */
	this.getKeyboardToolbarHeight = function() { return this.keyboardToolbarHeight; }
	/**
	 * Set the the height of the keyboard toolbar
	 * @param {Float} value New value to set.
	 * @alias Titanium_UI_TextArea.setKeyboardToolbarHeight
	 */
	this.setKeyboardToolbarHeight = function(value) { this.keyboardToolbarHeight = value; }
	/**
	 * property for the view left position. This position is relative to the view's parent. Can be either a float value or a dimension string ie 'auto' (default), '50%' (iPhone only).
	 * @alias Titanium_UI_TextArea.left
	 * @property {Float,String}
	 */
	this.left = 0.0
	/**
	 * Get the property for the view left position. This position is relative to the view's parent. Can be either a float value or a dimension string ie 'auto' (default), '50%' (iPhone only).
	 * @alias Titanium_UI_TextArea.getLeft
	 * @return {Float,String}
	 */
	this.getLeft = function() { return this.left; }
	/**
	 * Set the property for the view left position. This position is relative to the view's parent. Can be either a float value or a dimension string ie 'auto' (default), '50%' (iPhone only).
	 * @param {Float,String} value New value to set.
	 * @alias Titanium_UI_TextArea.setLeft
	 */
	this.setLeft = function(value) { this.left = value; }
	/**
	 * the opacity from 0.0-1.0
	 * @alias Titanium_UI_TextArea.opacity
	 * @property {Float}
	 */
	this.opacity = 0.0
	/**
	 * Get the the opacity from 0.0-1.0
	 * @alias Titanium_UI_TextArea.getOpacity
	 * @return {Float}
	 */
	this.getOpacity = function() { return this.opacity; }
	/**
	 * Set the the opacity from 0.0-1.0
	 * @param {Float} value New value to set.
	 * @alias Titanium_UI_TextArea.setOpacity
	 */
	this.setOpacity = function(value) { this.opacity = value; }
	/**
	 * property for the view right position. This position is relative to the view's parent. Can be either a float value or a dimension string ie 'auto' (default), '50%' (iPhone only).
	 * @alias Titanium_UI_TextArea.right
	 * @property {Float,String}
	 */
	this.right = 0.0
	/**
	 * Get the property for the view right position. This position is relative to the view's parent. Can be either a float value or a dimension string ie 'auto' (default), '50%' (iPhone only).
	 * @alias Titanium_UI_TextArea.getRight
	 * @return {Float,String}
	 */
	this.getRight = function() { return this.right; }
	/**
	 * Set the property for the view right position. This position is relative to the view's parent. Can be either a float value or a dimension string ie 'auto' (default), '50%' (iPhone only).
	 * @param {Float,String} value New value to set.
	 * @alias Titanium_UI_TextArea.setRight
	 */
	this.setRight = function(value) { this.right = value; }
	/**
	 * the size of the view as a dictionary of width and height properties
	 * @alias Titanium_UI_TextArea.size
	 * @property {Object}
	 */
	this.size = {}
	/**
	 * Get the the size of the view as a dictionary of width and height properties
	 * @alias Titanium_UI_TextArea.getSize
	 * @return {Object}
	 */
	this.getSize = function() { return this.size; }
	/**
	 * Set the the size of the view as a dictionary of width and height properties
	 * @param {Object} value New value to set.
	 * @alias Titanium_UI_TextArea.setSize
	 */
	this.setSize = function(value) { this.size = value; }
	/**
	 * One of Titanium.UI.Android.SOFT_KEYBOARD_DEFAULT_ON_FOCUS, Titanium.UI.Android.SOFT_KEYBOARD_HIDE_ON_FOCUS, or Titanium.UI.Android.SOFT_KEYBOARD_SHOW_ON_FOCUS. (Android only)
	 * @alias Titanium_UI_TextArea.softKeyboardOnFocus
	 * @property {Integer}
	 */
	this.softKeyboardOnFocus = 0
	/**
	 * Get the One of Titanium.UI.Android.SOFT_KEYBOARD_DEFAULT_ON_FOCUS, Titanium.UI.Android.SOFT_KEYBOARD_HIDE_ON_FOCUS, or Titanium.UI.Android.SOFT_KEYBOARD_SHOW_ON_FOCUS. (Android only)
	 * @alias Titanium_UI_TextArea.getSoftKeyboardOnFocus
	 * @return {Integer}
	 */
	this.getSoftKeyboardOnFocus = function() { return this.softKeyboardOnFocus; }
	/**
	 * Set the One of Titanium.UI.Android.SOFT_KEYBOARD_DEFAULT_ON_FOCUS, Titanium.UI.Android.SOFT_KEYBOARD_HIDE_ON_FOCUS, or Titanium.UI.Android.SOFT_KEYBOARD_SHOW_ON_FOCUS. (Android only)
	 * @param {Integer} value New value to set.
	 * @alias Titanium_UI_TextArea.setSoftKeyboardOnFocus
	 */
	this.setSoftKeyboardOnFocus = function(value) { this.softKeyboardOnFocus = value; }
	/**
	 * boolean to indicate if the return key should be suppressed during entry
	 * @alias Titanium_UI_TextArea.suppressReturn
	 * @property {Boolean}
	 */
	this.suppressReturn = false
	/**
	 * Get the boolean to indicate if the return key should be suppressed during entry
	 * @alias Titanium_UI_TextArea.getSuppressReturn
	 * @return {Boolean}
	 */
	this.getSuppressReturn = function() { return this.suppressReturn; }
	/**
	 * Set the boolean to indicate if the return key should be suppressed during entry
	 * @param {Boolean} value New value to set.
	 * @alias Titanium_UI_TextArea.setSuppressReturn
	 */
	this.setSuppressReturn = function(value) { this.suppressReturn = value; }
	/**
	 * property for the view top position. This position is relative to the view's parent. Can be either a float value or a dimension string ie 'auto' (default), '50%' (iPhone only).
	 * @alias Titanium_UI_TextArea.top
	 * @property {Float,String}
	 */
	this.top = 0.0
	/**
	 * Get the property for the view top position. This position is relative to the view's parent. Can be either a float value or a dimension string ie 'auto' (default), '50%' (iPhone only).
	 * @alias Titanium_UI_TextArea.getTop
	 * @return {Float,String}
	 */
	this.getTop = function() { return this.top; }
	/**
	 * Set the property for the view top position. This position is relative to the view's parent. Can be either a float value or a dimension string ie 'auto' (default), '50%' (iPhone only).
	 * @param {Float,String} value New value to set.
	 * @alias Titanium_UI_TextArea.setTop
	 */
	this.setTop = function(value) { this.top = value; }
	/**
	 * a boolean indicating if the view should receive touch events (true, default) or forward them to peers (false)
	 * @alias Titanium_UI_TextArea.touchEnabled
	 * @property {Boolean}
	 */
	this.touchEnabled = false
	/**
	 * Get the a boolean indicating if the view should receive touch events (true, default) or forward them to peers (false)
	 * @alias Titanium_UI_TextArea.getTouchEnabled
	 * @return {Boolean}
	 */
	this.getTouchEnabled = function() { return this.touchEnabled; }
	/**
	 * Set the a boolean indicating if the view should receive touch events (true, default) or forward them to peers (false)
	 * @param {Boolean} value New value to set.
	 * @alias Titanium_UI_TextArea.setTouchEnabled
	 */
	this.setTouchEnabled = function(value) { this.touchEnabled = value; }
	/**
	 * the transformation matrix to apply to the view
	 * @alias Titanium_UI_TextArea.transform
	 * @property {Object}
	 */
	this.transform = {}
	/**
	 * Get the the transformation matrix to apply to the view
	 * @alias Titanium_UI_TextArea.getTransform
	 * @return {Object}
	 */
	this.getTransform = function() { return this.transform; }
	/**
	 * Set the the transformation matrix to apply to the view
	 * @param {Object} value New value to set.
	 * @alias Titanium_UI_TextArea.setTransform
	 */
	this.setTransform = function(value) { this.transform = value; }
	/**
	 * value of the field
	 * @alias Titanium_UI_TextArea.value
	 * @property {String}
	 */
	this.value = ''
	/**
	 * Get the value of the field
	 * @alias Titanium_UI_TextArea.getValue
	 * @return {String}
	 */
	this.getValue = function() { return this.value; }
	/**
	 * Set the value of the field
	 * @param {String} value New value to set.
	 * @alias Titanium_UI_TextArea.setValue
	 */
	this.setValue = function(value) { this.value = value; }
	/**
	 * a boolean of the visibility of the view
	 * @alias Titanium_UI_TextArea.visible
	 * @property {Boolean}
	 */
	this.visible = false
	/**
	 * Get the a boolean of the visibility of the view
	 * @alias Titanium_UI_TextArea.getVisible
	 * @return {Boolean}
	 */
	this.getVisible = function() { return this.visible; }
	/**
	 * Set the a boolean of the visibility of the view
	 * @param {Boolean} value New value to set.
	 * @alias Titanium_UI_TextArea.setVisible
	 */
	this.setVisible = function(value) { this.visible = value; }
	/**
	 * property for the view width. Can be either a float value or a dimension string ie 'auto' (default), '50%' (iPhone only).
	 * @alias Titanium_UI_TextArea.width
	 * @property {Float,String}
	 */
	this.width = 0.0
	/**
	 * Get the property for the view width. Can be either a float value or a dimension string ie 'auto' (default), '50%' (iPhone only).
	 * @alias Titanium_UI_TextArea.getWidth
	 * @return {Float,String}
	 */
	this.getWidth = function() { return this.width; }
	/**
	 * Set the property for the view width. Can be either a float value or a dimension string ie 'auto' (default), '50%' (iPhone only).
	 * @param {Float,String} value New value to set.
	 * @alias Titanium_UI_TextArea.setWidth
	 */
	this.setWidth = function(value) { this.width = value; }
	/**
	 * the z index position relative to other sibling views
	 * @alias Titanium_UI_TextArea.zIndex
	 * @property {Integer}
	 */
	this.zIndex = 0
	/**
	 * Get the the z index position relative to other sibling views
	 * @alias Titanium_UI_TextArea.getZIndex
	 * @return {Integer}
	 */
	this.getZIndex = function() { return this.zIndex; }
	/**
	 * Set the the z index position relative to other sibling views
	 * @param {Integer} value New value to set.
	 * @alias Titanium_UI_TextArea.setZIndex
	 */
	this.setZIndex = function(value) { this.zIndex = value; }
	/**
	 * add a child to the view hierarchy
	 * @param {Object} view the view to add to this views hiearchy
	 * @alias Titanium_UI_TextArea.add
	 */
	this.add = function add(view) { }
	/**
	 * add an event listener for the instance to receive view triggered events
	 * @param {String} name name of the event
	 * @param {Function} callback callback function to invoke when the event is fired
	 * @alias Titanium_UI_TextArea.addEventListener
	 */
	this.addEventListener = function addEventListener(name,callback) { }
	/**
	 * animate the view
	 * @param {Object} obj either a dictionary of animation properties or an Animation object
	 * @param {Function} callback function to be invoked upon completion of the animation
	 * @alias Titanium_UI_TextArea.animate
	 */
	this.animate = function animate(obj,callback) { }
	/**
	 * force the field to lose focus
	 * @alias Titanium_UI_TextArea.blur
	 */
	this.blur = function blur() { }
	/**
	 * fire a synthesized event to the views listener
	 * @param {String} name name of the event
	 * @param {Object} event event object
	 * @alias Titanium_UI_TextArea.fireEvent
	 */
	this.fireEvent = function fireEvent(name,event) { }
	/**
	 * force the field to gain focus
	 * @alias Titanium_UI_TextArea.focus
	 */
	this.focus = function focus() { }
	/**
	 * return boolean (true) if the field has text
	 * @alias Titanium_UI_TextArea.hasText
	 */
	this.hasText = function hasText() { }
	/**
	 * hide the view
	 * @alias Titanium_UI_TextArea.hide
	 */
	this.hide = function hide() { }
	/**
	 * remove a previously add view from the view hiearchy
	 * @param {Object} view the view to remove from this views hiearchy
	 * @alias Titanium_UI_TextArea.remove
	 */
	this.remove = function remove(view) { }
	/**
	 * remove a previously added event listener
	 * @param {String} name name of the event
	 * @param {Function} callback callback function passed in addEventListener
	 * @alias Titanium_UI_TextArea.removeEventListener
	 */
	this.removeEventListener = function removeEventListener(name,callback) { }
	/**
	 * make the view visible
	 * @alias Titanium_UI_TextArea.show
	 */
	this.show = function show() { }
	/**
	 * return a Blob image of the rendered view
	 * @param {Function} f function to be invoked upon completion. if non-null, this method will be performed asynchronously. if null, it will be performed immediately
	 * @alias Titanium_UI_TextArea.toImage
	 * @return {Object}
	 */
	this.toImage = function toImage(f) { return {}; }
};

/**
 * A Text Area is created by the method Titanium.UI.createTextField. The Text Field is a single line field.
 * @since 0.8
 */
function Titanium_UI_TextField() {
	/**
	 * a dictionary with properties x and y to indicate the anchor point value. anchor specifies the position by which animation should occur. center is 0.5, 0.5
	 * @alias Titanium_UI_TextField.anchorPoint
	 * @property {Object}
	 */
	this.anchorPoint = {}
	/**
	 * Get the a dictionary with properties x and y to indicate the anchor point value. anchor specifies the position by which animation should occur. center is 0.5, 0.5
	 * @alias Titanium_UI_TextField.getAnchorPoint
	 * @return {Object}
	 */
	this.getAnchorPoint = function() { return this.anchorPoint; }
	/**
	 * Set the a dictionary with properties x and y to indicate the anchor point value. anchor specifies the position by which animation should occur. center is 0.5, 0.5
	 * @param {Object} value New value to set.
	 * @alias Titanium_UI_TextField.setAnchorPoint
	 */
	this.setAnchorPoint = function(value) { this.anchorPoint = value; }
	/**
	 * read-only object with x and y properties of where the view is during animation
	 * @alias Titanium_UI_TextField.animatedCenterPoint
	 * @property {Object}
	 */
	this.animatedCenterPoint = {}
	/**
	 * Get the read-only object with x and y properties of where the view is during animation
	 * @alias Titanium_UI_TextField.getAnimatedCenterPoint
	 * @return {Object}
	 */
	this.getAnimatedCenterPoint = function() { return this.animatedCenterPoint; }
	/**
	 * Set the read-only object with x and y properties of where the view is during animation
	 * @param {Object} value New value to set.
	 * @alias Titanium_UI_TextField.setAnimatedCenterPoint
	 */
	this.setAnimatedCenterPoint = function(value) { this.animatedCenterPoint = value; }
	/**
	 * value of the background color of the field
	 * @alias Titanium_UI_TextField.backgroundColor
	 * @property {String}
	 */
	this.backgroundColor = ''
	/**
	 * Get the value of the background color of the field
	 * @alias Titanium_UI_TextField.getBackgroundColor
	 * @return {String}
	 */
	this.getBackgroundColor = function() { return this.backgroundColor; }
	/**
	 * Set the value of the background color of the field
	 * @param {String} value New value to set.
	 * @alias Titanium_UI_TextField.setBackgroundColor
	 */
	this.setBackgroundColor = function(value) { this.backgroundColor = value; }
	/**
	 * the disabled background color of the view. (Android)
	 * @alias Titanium_UI_TextField.backgroundDisabledColor
	 * @property {String}
	 */
	this.backgroundDisabledColor = ''
	/**
	 * Get the the disabled background color of the view. (Android)
	 * @alias Titanium_UI_TextField.getBackgroundDisabledColor
	 * @return {String}
	 */
	this.getBackgroundDisabledColor = function() { return this.backgroundDisabledColor; }
	/**
	 * Set the the disabled background color of the view. (Android)
	 * @param {String} value New value to set.
	 * @alias Titanium_UI_TextField.setBackgroundDisabledColor
	 */
	this.setBackgroundDisabledColor = function(value) { this.backgroundDisabledColor = value; }
	/**
	 * the image url to the background image of the field when in the disabled state
	 * @alias Titanium_UI_TextField.backgroundDisabledImage
	 * @property {String}
	 */
	this.backgroundDisabledImage = ''
	/**
	 * Get the the image url to the background image of the field when in the disabled state
	 * @alias Titanium_UI_TextField.getBackgroundDisabledImage
	 * @return {String}
	 */
	this.getBackgroundDisabledImage = function() { return this.backgroundDisabledImage; }
	/**
	 * Set the the image url to the background image of the field when in the disabled state
	 * @param {String} value New value to set.
	 * @alias Titanium_UI_TextField.setBackgroundDisabledImage
	 */
	this.setBackgroundDisabledImage = function(value) { this.backgroundDisabledImage = value; }
	/**
	 * the focused background color of the view. focusable must be true for normal views. (Android)
	 * @alias Titanium_UI_TextField.backgroundFocusedColor
	 * @property {String}
	 */
	this.backgroundFocusedColor = ''
	/**
	 * Get the the focused background color of the view. focusable must be true for normal views. (Android)
	 * @alias Titanium_UI_TextField.getBackgroundFocusedColor
	 * @return {String}
	 */
	this.getBackgroundFocusedColor = function() { return this.backgroundFocusedColor; }
	/**
	 * Set the the focused background color of the view. focusable must be true for normal views. (Android)
	 * @param {String} value New value to set.
	 * @alias Titanium_UI_TextField.setBackgroundFocusedColor
	 */
	this.setBackgroundFocusedColor = function(value) { this.backgroundFocusedColor = value; }
	/**
	 * the focused background image url of the view. focusable must be true for normal views. (Android)
	 * @alias Titanium_UI_TextField.backgroundFocusedImage
	 * @property {String}
	 */
	this.backgroundFocusedImage = ''
	/**
	 * Get the the focused background image url of the view. focusable must be true for normal views. (Android)
	 * @alias Titanium_UI_TextField.getBackgroundFocusedImage
	 * @return {String}
	 */
	this.getBackgroundFocusedImage = function() { return this.backgroundFocusedImage; }
	/**
	 * Set the the focused background image url of the view. focusable must be true for normal views. (Android)
	 * @param {String} value New value to set.
	 * @alias Titanium_UI_TextField.setBackgroundFocusedImage
	 */
	this.setBackgroundFocusedImage = function(value) { this.backgroundFocusedImage = value; }
	/**
	 * a background gradient for the view with the properties: type,startPoint,endPoint,startRadius,endRadius,backfillStart,backfillEnd,colors.
	 * @alias Titanium_UI_TextField.backgroundGradient
	 * @property {Object}
	 */
	this.backgroundGradient = {}
	/**
	 * Get the a background gradient for the view with the properties: type,startPoint,endPoint,startRadius,endRadius,backfillStart,backfillEnd,colors.
	 * @alias Titanium_UI_TextField.getBackgroundGradient
	 * @return {Object}
	 */
	this.getBackgroundGradient = function() { return this.backgroundGradient; }
	/**
	 * Set the a background gradient for the view with the properties: type,startPoint,endPoint,startRadius,endRadius,backfillStart,backfillEnd,colors.
	 * @param {Object} value New value to set.
	 * @alias Titanium_UI_TextField.setBackgroundGradient
	 */
	this.setBackgroundGradient = function(value) { this.backgroundGradient = value; }
	/**
	 * the image url to the background image of the field
	 * @alias Titanium_UI_TextField.backgroundImage
	 * @property {String}
	 */
	this.backgroundImage = ''
	/**
	 * Get the the image url to the background image of the field
	 * @alias Titanium_UI_TextField.getBackgroundImage
	 * @return {String}
	 */
	this.getBackgroundImage = function() { return this.backgroundImage; }
	/**
	 * Set the the image url to the background image of the field
	 * @param {String} value New value to set.
	 * @alias Titanium_UI_TextField.setBackgroundImage
	 */
	this.setBackgroundImage = function(value) { this.backgroundImage = value; }
	/**
	 * End caps specify the portion of an image that should not be resized when an image is stretched. This technique is used to implement buttons and other resizable image-based interface elements. When a button with end caps is resized, the resizing occurs only in the middle of the button, in the region between the end caps. The end caps themselves keep their original size and appearance. This property specifies the size of the left end cap. The middle (stretchable) portion is assumed to be 1 pixel wide. The right end cap is therefore computed by adding the size of the left end cap and the middle portion together and then subtracting that value from the width of the image
	 * @alias Titanium_UI_TextField.backgroundLeftCap
	 * @property {Float}
	 */
	this.backgroundLeftCap = 0.0
	/**
	 * Get the End caps specify the portion of an image that should not be resized when an image is stretched. This technique is used to implement buttons and other resizable image-based interface elements. When a button with end caps is resized, the resizing occurs only in the middle of the button, in the region between the end caps. The end caps themselves keep their original size and appearance. This property specifies the size of the left end cap. The middle (stretchable) portion is assumed to be 1 pixel wide. The right end cap is therefore computed by adding the size of the left end cap and the middle portion together and then subtracting that value from the width of the image
	 * @alias Titanium_UI_TextField.getBackgroundLeftCap
	 * @return {Float}
	 */
	this.getBackgroundLeftCap = function() { return this.backgroundLeftCap; }
	/**
	 * Set the End caps specify the portion of an image that should not be resized when an image is stretched. This technique is used to implement buttons and other resizable image-based interface elements. When a button with end caps is resized, the resizing occurs only in the middle of the button, in the region between the end caps. The end caps themselves keep their original size and appearance. This property specifies the size of the left end cap. The middle (stretchable) portion is assumed to be 1 pixel wide. The right end cap is therefore computed by adding the size of the left end cap and the middle portion together and then subtracting that value from the width of the image
	 * @param {Float} value New value to set.
	 * @alias Titanium_UI_TextField.setBackgroundLeftCap
	 */
	this.setBackgroundLeftCap = function(value) { this.backgroundLeftCap = value; }
	/**
	 * the selected background color of the view. focusable must be true for normal views. (Android)
	 * @alias Titanium_UI_TextField.backgroundSelectedColor
	 * @property {String}
	 */
	this.backgroundSelectedColor = ''
	/**
	 * Get the the selected background color of the view. focusable must be true for normal views. (Android)
	 * @alias Titanium_UI_TextField.getBackgroundSelectedColor
	 * @return {String}
	 */
	this.getBackgroundSelectedColor = function() { return this.backgroundSelectedColor; }
	/**
	 * Set the the selected background color of the view. focusable must be true for normal views. (Android)
	 * @param {String} value New value to set.
	 * @alias Titanium_UI_TextField.setBackgroundSelectedColor
	 */
	this.setBackgroundSelectedColor = function(value) { this.backgroundSelectedColor = value; }
	/**
	 * the selected background image url of the view. focusable must be true for normal views. (Android)
	 * @alias Titanium_UI_TextField.backgroundSelectedImage
	 * @property {String}
	 */
	this.backgroundSelectedImage = ''
	/**
	 * Get the the selected background image url of the view. focusable must be true for normal views. (Android)
	 * @alias Titanium_UI_TextField.getBackgroundSelectedImage
	 * @return {String}
	 */
	this.getBackgroundSelectedImage = function() { return this.backgroundSelectedImage; }
	/**
	 * Set the the selected background image url of the view. focusable must be true for normal views. (Android)
	 * @param {String} value New value to set.
	 * @alias Titanium_UI_TextField.setBackgroundSelectedImage
	 */
	this.setBackgroundSelectedImage = function(value) { this.backgroundSelectedImage = value; }
	/**
	 * End caps specify the portion of an image that should not be resized when an image is stretched. This technique is used to implement buttons and other resizable image-based interface elements. When a button with end caps is resized, the resizing occurs only in the middle of the button, in the region between the end caps. The end caps themselves keep their original size and appearance. This property specifies the size of the top end cap. The middle (stretchable) portion is assumed to be 1 pixel wide. The bottom end cap is therefore computed by adding the size of the top end cap and the middle portion together and then subtracting that value from the height of the image
	 * @alias Titanium_UI_TextField.backgroundTopCap
	 * @property {Float}
	 */
	this.backgroundTopCap = 0.0
	/**
	 * Get the End caps specify the portion of an image that should not be resized when an image is stretched. This technique is used to implement buttons and other resizable image-based interface elements. When a button with end caps is resized, the resizing occurs only in the middle of the button, in the region between the end caps. The end caps themselves keep their original size and appearance. This property specifies the size of the top end cap. The middle (stretchable) portion is assumed to be 1 pixel wide. The bottom end cap is therefore computed by adding the size of the top end cap and the middle portion together and then subtracting that value from the height of the image
	 * @alias Titanium_UI_TextField.getBackgroundTopCap
	 * @return {Float}
	 */
	this.getBackgroundTopCap = function() { return this.backgroundTopCap; }
	/**
	 * Set the End caps specify the portion of an image that should not be resized when an image is stretched. This technique is used to implement buttons and other resizable image-based interface elements. When a button with end caps is resized, the resizing occurs only in the middle of the button, in the region between the end caps. The end caps themselves keep their original size and appearance. This property specifies the size of the top end cap. The middle (stretchable) portion is assumed to be 1 pixel wide. The bottom end cap is therefore computed by adding the size of the top end cap and the middle portion together and then subtracting that value from the height of the image
	 * @param {Float} value New value to set.
	 * @alias Titanium_UI_TextField.setBackgroundTopCap
	 */
	this.setBackgroundTopCap = function(value) { this.backgroundTopCap = value; }
	/**
	 * the border color of the view
	 * @alias Titanium_UI_TextField.borderColor
	 * @property {String}
	 */
	this.borderColor = ''
	/**
	 * Get the the border color of the view
	 * @alias Titanium_UI_TextField.getBorderColor
	 * @return {String}
	 */
	this.getBorderColor = function() { return this.borderColor; }
	/**
	 * Set the the border color of the view
	 * @param {String} value New value to set.
	 * @alias Titanium_UI_TextField.setBorderColor
	 */
	this.setBorderColor = function(value) { this.borderColor = value; }
	/**
	 * the border radius of the view
	 * @alias Titanium_UI_TextField.borderRadius
	 * @property {Float}
	 */
	this.borderRadius = 0.0
	/**
	 * Get the the border radius of the view
	 * @alias Titanium_UI_TextField.getBorderRadius
	 * @return {Float}
	 */
	this.getBorderRadius = function() { return this.borderRadius; }
	/**
	 * Set the the border radius of the view
	 * @param {Float} value New value to set.
	 * @alias Titanium_UI_TextField.setBorderRadius
	 */
	this.setBorderRadius = function(value) { this.borderRadius = value; }
	/**
	 * the border style constant for the field
	 * @alias Titanium_UI_TextField.borderStyle
	 * @property {Integer}
	 */
	this.borderStyle = 0
	/**
	 * Get the the border style constant for the field
	 * @alias Titanium_UI_TextField.getBorderStyle
	 * @return {Integer}
	 */
	this.getBorderStyle = function() { return this.borderStyle; }
	/**
	 * Set the the border style constant for the field
	 * @param {Integer} value New value to set.
	 * @alias Titanium_UI_TextField.setBorderStyle
	 */
	this.setBorderStyle = function(value) { this.borderStyle = value; }
	/**
	 * the border width of the view
	 * @alias Titanium_UI_TextField.borderWidth
	 * @property {Float}
	 */
	this.borderWidth = 0.0
	/**
	 * Get the the border width of the view
	 * @alias Titanium_UI_TextField.getBorderWidth
	 * @return {Float}
	 */
	this.getBorderWidth = function() { return this.borderWidth; }
	/**
	 * Set the the border width of the view
	 * @param {Float} value New value to set.
	 * @alias Titanium_UI_TextField.setBorderWidth
	 */
	this.setBorderWidth = function(value) { this.borderWidth = value; }
	/**
	 * property for the view bottom position. This position is relative to the view's parent. Can be either a float value or a dimension string ie 'auto' (default), '50%' (iPhone only).
	 * @alias Titanium_UI_TextField.bottom
	 * @property {Float,String}
	 */
	this.bottom = 0.0
	/**
	 * Get the property for the view bottom position. This position is relative to the view's parent. Can be either a float value or a dimension string ie 'auto' (default), '50%' (iPhone only).
	 * @alias Titanium_UI_TextField.getBottom
	 * @return {Float,String}
	 */
	this.getBottom = function() { return this.bottom; }
	/**
	 * Set the property for the view bottom position. This position is relative to the view's parent. Can be either a float value or a dimension string ie 'auto' (default), '50%' (iPhone only).
	 * @param {Float,String} value New value to set.
	 * @alias Titanium_UI_TextField.setBottom
	 */
	this.setBottom = function(value) { this.bottom = value; }
	/**
	 * a dictionary with properties x and y to indicate the center of the views position relative to the parent view
	 * @alias Titanium_UI_TextField.center
	 * @property {Object}
	 */
	this.center = {}
	/**
	 * Get the a dictionary with properties x and y to indicate the center of the views position relative to the parent view
	 * @alias Titanium_UI_TextField.getCenter
	 * @return {Object}
	 */
	this.getCenter = function() { return this.center; }
	/**
	 * Set the a dictionary with properties x and y to indicate the center of the views position relative to the parent view
	 * @param {Object} value New value to set.
	 * @alias Titanium_UI_TextField.setCenter
	 */
	this.setCenter = function(value) { this.center = value; }
	/**
	 * the mode constant for how to handle displaying the clear button
	 * @alias Titanium_UI_TextField.clearButtonMode
	 * @property {Integer}
	 */
	this.clearButtonMode = 0
	/**
	 * Get the the mode constant for how to handle displaying the clear button
	 * @alias Titanium_UI_TextField.getClearButtonMode
	 * @return {Integer}
	 */
	this.getClearButtonMode = function() { return this.clearButtonMode; }
	/**
	 * Set the the mode constant for how to handle displaying the clear button
	 * @param {Integer} value New value to set.
	 * @alias Titanium_UI_TextField.setClearButtonMode
	 */
	this.setClearButtonMode = function(value) { this.clearButtonMode = value; }
	/**
	 * boolean that indicates if the value of the field is cleared upon editing
	 * @alias Titanium_UI_TextField.clearOnEdit
	 * @property {Boolean}
	 */
	this.clearOnEdit = false
	/**
	 * Get the boolean that indicates if the value of the field is cleared upon editing
	 * @alias Titanium_UI_TextField.getClearOnEdit
	 * @return {Boolean}
	 */
	this.getClearOnEdit = function() { return this.clearOnEdit; }
	/**
	 * Set the boolean that indicates if the value of the field is cleared upon editing
	 * @param {Boolean} value New value to set.
	 * @alias Titanium_UI_TextField.setClearOnEdit
	 */
	this.setClearOnEdit = function(value) { this.clearOnEdit = value; }
	/**
	 * boolean indicating if the field is editable
	 * @alias Titanium_UI_TextField.editable
	 * @property {Boolean}
	 */
	this.editable = false
	/**
	 * Get the boolean indicating if the field is editable
	 * @alias Titanium_UI_TextField.getEditable
	 * @return {Boolean}
	 */
	this.getEditable = function() { return this.editable; }
	/**
	 * Set the boolean indicating if the field is editable
	 * @param {Boolean} value New value to set.
	 * @alias Titanium_UI_TextField.setEditable
	 */
	this.setEditable = function(value) { this.editable = value; }
	/**
	 * boolean indicating the enabled state of the field
	 * @alias Titanium_UI_TextField.enabled
	 * @property {Boolean}
	 */
	this.enabled = false
	/**
	 * Get the boolean indicating the enabled state of the field
	 * @alias Titanium_UI_TextField.getEnabled
	 * @return {Boolean}
	 */
	this.getEnabled = function() { return this.enabled; }
	/**
	 * Set the boolean indicating the enabled state of the field
	 * @param {Boolean} value New value to set.
	 * @alias Titanium_UI_TextField.setEnabled
	 */
	this.setEnabled = function(value) { this.enabled = value; }
	/**
	 * Set true if you want a view to be focusable when navigating with the trackball or D-Pad. Default: false. (Android Only)
	 * @alias Titanium_UI_TextField.focusable
	 * @property {Boolean}
	 */
	this.focusable = false
	/**
	 * Get the Set true if you want a view to be focusable when navigating with the trackball or D-Pad. Default: false. (Android Only)
	 * @alias Titanium_UI_TextField.getFocusable
	 * @return {Boolean}
	 */
	this.getFocusable = function() { return this.focusable; }
	/**
	 * Set the Set true if you want a view to be focusable when navigating with the trackball or D-Pad. Default: false. (Android Only)
	 * @param {Boolean} value New value to set.
	 * @alias Titanium_UI_TextField.setFocusable
	 */
	this.setFocusable = function(value) { this.focusable = value; }
	/**
	 * the font family
	 * @alias Titanium_UI_TextField.font-family
	 * @property {String}
	 */
	this.font-family = ''
	/**
	 * Get the the font family
	 * @alias Titanium_UI_TextField.getFont-family
	 * @return {String}
	 */
	this.getFont-family = function() { return this.font-family; }
	/**
	 * Set the the font family
	 * @param {String} value New value to set.
	 * @alias Titanium_UI_TextField.setFont-family
	 */
	this.setFont-family = function(value) { this.font-family = value; }
	/**
	 * the font size
	 * @alias Titanium_UI_TextField.font-size
	 * @property {String}
	 */
	this.font-size = ''
	/**
	 * Get the the font size
	 * @alias Titanium_UI_TextField.getFont-size
	 * @return {String}
	 */
	this.getFont-size = function() { return this.font-size; }
	/**
	 * Set the the font size
	 * @param {String} value New value to set.
	 * @alias Titanium_UI_TextField.setFont-size
	 */
	this.setFont-size = function(value) { this.font-size = value; }
	/**
	 * the font style, either normal or italics
	 * @alias Titanium_UI_TextField.font-style
	 * @property {String}
	 */
	this.font-style = ''
	/**
	 * Get the the font style, either normal or italics
	 * @alias Titanium_UI_TextField.getFont-style
	 * @return {String}
	 */
	this.getFont-style = function() { return this.font-style; }
	/**
	 * Set the the font style, either normal or italics
	 * @param {String} value New value to set.
	 * @alias Titanium_UI_TextField.setFont-style
	 */
	this.setFont-style = function(value) { this.font-style = value; }
	/**
	 * the font weight, either normal or bold
	 * @alias Titanium_UI_TextField.font-weight
	 * @property {String}
	 */
	this.font-weight = ''
	/**
	 * Get the the font weight, either normal or bold
	 * @alias Titanium_UI_TextField.getFont-weight
	 * @return {String}
	 */
	this.getFont-weight = function() { return this.font-weight; }
	/**
	 * Set the the font weight, either normal or bold
	 * @param {String} value New value to set.
	 * @alias Titanium_UI_TextField.setFont-weight
	 */
	this.setFont-weight = function(value) { this.font-weight = value; }
	/**
	 * property for the view height. Can be either a float value or a dimension string ie 'auto' (default), '50%' (iPhone only).
	 * @alias Titanium_UI_TextField.height
	 * @property {Float,String}
	 */
	this.height = 0.0
	/**
	 * Get the property for the view height. Can be either a float value or a dimension string ie 'auto' (default), '50%' (iPhone only).
	 * @alias Titanium_UI_TextField.getHeight
	 * @return {Float,String}
	 */
	this.getHeight = function() { return this.height; }
	/**
	 * Set the property for the view height. Can be either a float value or a dimension string ie 'auto' (default), '50%' (iPhone only).
	 * @param {Float,String} value New value to set.
	 * @alias Titanium_UI_TextField.setHeight
	 */
	this.setHeight = function(value) { this.height = value; }
	/**
	 * the hint text to display when the field is unfocused
	 * @alias Titanium_UI_TextField.hintText
	 * @property {String}
	 */
	this.hintText = ''
	/**
	 * Get the the hint text to display when the field is unfocused
	 * @alias Titanium_UI_TextField.getHintText
	 * @return {String}
	 */
	this.getHintText = function() { return this.hintText; }
	/**
	 * Set the the hint text to display when the field is unfocused
	 * @param {String} value New value to set.
	 * @alias Titanium_UI_TextField.setHintText
	 */
	this.setHintText = function(value) { this.hintText = value; }
	/**
	 * array of toolbar button objects to be used when the keyboard is displayed
	 * @alias Titanium_UI_TextField.keyboardToolbar
	 * @property {Array}
	 */
	this.keyboardToolbar = []
	/**
	 * Get the array of toolbar button objects to be used when the keyboard is displayed
	 * @alias Titanium_UI_TextField.getKeyboardToolbar
	 * @return {Array}
	 */
	this.getKeyboardToolbar = function() { return this.keyboardToolbar; }
	/**
	 * Set the array of toolbar button objects to be used when the keyboard is displayed
	 * @param {Array} value New value to set.
	 * @alias Titanium_UI_TextField.setKeyboardToolbar
	 */
	this.setKeyboardToolbar = function(value) { this.keyboardToolbar = value; }
	/**
	 * the color of the keyboard toolbar
	 * @alias Titanium_UI_TextField.keyboardToolbarColor
	 * @property {String}
	 */
	this.keyboardToolbarColor = ''
	/**
	 * Get the the color of the keyboard toolbar
	 * @alias Titanium_UI_TextField.getKeyboardToolbarColor
	 * @return {String}
	 */
	this.getKeyboardToolbarColor = function() { return this.keyboardToolbarColor; }
	/**
	 * Set the the color of the keyboard toolbar
	 * @param {String} value New value to set.
	 * @alias Titanium_UI_TextField.setKeyboardToolbarColor
	 */
	this.setKeyboardToolbarColor = function(value) { this.keyboardToolbarColor = value; }
	/**
	 * the height of the keyboard toolbar
	 * @alias Titanium_UI_TextField.keyboardToolbarHeight
	 * @property {Float}
	 */
	this.keyboardToolbarHeight = 0.0
	/**
	 * Get the the height of the keyboard toolbar
	 * @alias Titanium_UI_TextField.getKeyboardToolbarHeight
	 * @return {Float}
	 */
	this.getKeyboardToolbarHeight = function() { return this.keyboardToolbarHeight; }
	/**
	 * Set the the height of the keyboard toolbar
	 * @param {Float} value New value to set.
	 * @alias Titanium_UI_TextField.setKeyboardToolbarHeight
	 */
	this.setKeyboardToolbarHeight = function(value) { this.keyboardToolbarHeight = value; }
	/**
	 * property for the view left position. This position is relative to the view's parent. Can be either a float value or a dimension string ie 'auto' (default), '50%' (iPhone only).
	 * @alias Titanium_UI_TextField.left
	 * @property {Float,String}
	 */
	this.left = 0.0
	/**
	 * Get the property for the view left position. This position is relative to the view's parent. Can be either a float value or a dimension string ie 'auto' (default), '50%' (iPhone only).
	 * @alias Titanium_UI_TextField.getLeft
	 * @return {Float,String}
	 */
	this.getLeft = function() { return this.left; }
	/**
	 * Set the property for the view left position. This position is relative to the view's parent. Can be either a float value or a dimension string ie 'auto' (default), '50%' (iPhone only).
	 * @param {Float,String} value New value to set.
	 * @alias Titanium_UI_TextField.setLeft
	 */
	this.setLeft = function(value) { this.left = value; }
	/**
	 * the left button view
	 * @alias Titanium_UI_TextField.leftButton
	 * @property {Object}
	 */
	this.leftButton = {}
	/**
	 * Get the the left button view
	 * @alias Titanium_UI_TextField.getLeftButton
	 * @return {Object}
	 */
	this.getLeftButton = function() { return this.leftButton; }
	/**
	 * Set the the left button view
	 * @param {Object} value New value to set.
	 * @alias Titanium_UI_TextField.setLeftButton
	 */
	this.setLeftButton = function(value) { this.leftButton = value; }
	/**
	 * the mode of the left button view
	 * @alias Titanium_UI_TextField.leftButtonMode
	 * @property {Integer}
	 */
	this.leftButtonMode = 0
	/**
	 * Get the the mode of the left button view
	 * @alias Titanium_UI_TextField.getLeftButtonMode
	 * @return {Integer}
	 */
	this.getLeftButtonMode = function() { return this.leftButtonMode; }
	/**
	 * Set the the mode of the left button view
	 * @param {Integer} value New value to set.
	 * @alias Titanium_UI_TextField.setLeftButtonMode
	 */
	this.setLeftButtonMode = function(value) { this.leftButtonMode = value; }
	/**
	 * the left padding of the space between the button and the edge of the field
	 * @alias Titanium_UI_TextField.leftButtonPadding
	 * @property {Float}
	 */
	this.leftButtonPadding = 0.0
	/**
	 * Get the the left padding of the space between the button and the edge of the field
	 * @alias Titanium_UI_TextField.getLeftButtonPadding
	 * @return {Float}
	 */
	this.getLeftButtonPadding = function() { return this.leftButtonPadding; }
	/**
	 * Set the the left padding of the space between the button and the edge of the field
	 * @param {Float} value New value to set.
	 * @alias Titanium_UI_TextField.setLeftButtonPadding
	 */
	this.setLeftButtonPadding = function(value) { this.leftButtonPadding = value; }
	/**
	 * the minimum size of the font when the font is sized based on the contents.  Enables font scaling to fit
	 * @alias Titanium_UI_TextField.minimumFontSize
	 * @property {Integer}
	 */
	this.minimumFontSize = 0
	/**
	 * Get the the minimum size of the font when the font is sized based on the contents.  Enables font scaling to fit
	 * @alias Titanium_UI_TextField.getMinimumFontSize
	 * @return {Integer}
	 */
	this.getMinimumFontSize = function() { return this.minimumFontSize; }
	/**
	 * Set the the minimum size of the font when the font is sized based on the contents.  Enables font scaling to fit
	 * @param {Integer} value New value to set.
	 * @alias Titanium_UI_TextField.setMinimumFontSize
	 */
	this.setMinimumFontSize = function(value) { this.minimumFontSize = value; }
	/**
	 * the opacity from 0.0-1.0
	 * @alias Titanium_UI_TextField.opacity
	 * @property {Float}
	 */
	this.opacity = 0.0
	/**
	 * Get the the opacity from 0.0-1.0
	 * @alias Titanium_UI_TextField.getOpacity
	 * @return {Float}
	 */
	this.getOpacity = function() { return this.opacity; }
	/**
	 * Set the the opacity from 0.0-1.0
	 * @param {Float} value New value to set.
	 * @alias Titanium_UI_TextField.setOpacity
	 */
	this.setOpacity = function(value) { this.opacity = value; }
	/**
	 * the left padding of the text field
	 * @alias Titanium_UI_TextField.paddingLeft
	 * @property {Float}
	 */
	this.paddingLeft = 0.0
	/**
	 * Get the the left padding of the text field
	 * @alias Titanium_UI_TextField.getPaddingLeft
	 * @return {Float}
	 */
	this.getPaddingLeft = function() { return this.paddingLeft; }
	/**
	 * Set the the left padding of the text field
	 * @param {Float} value New value to set.
	 * @alias Titanium_UI_TextField.setPaddingLeft
	 */
	this.setPaddingLeft = function(value) { this.paddingLeft = value; }
	/**
	 * the right padding of the text field
	 * @alias Titanium_UI_TextField.paddingRight
	 * @property {Float}
	 */
	this.paddingRight = 0.0
	/**
	 * Get the the right padding of the text field
	 * @alias Titanium_UI_TextField.getPaddingRight
	 * @return {Float}
	 */
	this.getPaddingRight = function() { return this.paddingRight; }
	/**
	 * Set the the right padding of the text field
	 * @param {Float} value New value to set.
	 * @alias Titanium_UI_TextField.setPaddingRight
	 */
	this.setPaddingRight = function(value) { this.paddingRight = value; }
	/**
	 * property for the view right position. This position is relative to the view's parent. Can be either a float value or a dimension string ie 'auto' (default), '50%' (iPhone only).
	 * @alias Titanium_UI_TextField.right
	 * @property {Float,String}
	 */
	this.right = 0.0
	/**
	 * Get the property for the view right position. This position is relative to the view's parent. Can be either a float value or a dimension string ie 'auto' (default), '50%' (iPhone only).
	 * @alias Titanium_UI_TextField.getRight
	 * @return {Float,String}
	 */
	this.getRight = function() { return this.right; }
	/**
	 * Set the property for the view right position. This position is relative to the view's parent. Can be either a float value or a dimension string ie 'auto' (default), '50%' (iPhone only).
	 * @param {Float,String} value New value to set.
	 * @alias Titanium_UI_TextField.setRight
	 */
	this.setRight = function(value) { this.right = value; }
	/**
	 * the right button view
	 * @alias Titanium_UI_TextField.rightButton
	 * @property {Object}
	 */
	this.rightButton = {}
	/**
	 * Get the the right button view
	 * @alias Titanium_UI_TextField.getRightButton
	 * @return {Object}
	 */
	this.getRightButton = function() { return this.rightButton; }
	/**
	 * Set the the right button view
	 * @param {Object} value New value to set.
	 * @alias Titanium_UI_TextField.setRightButton
	 */
	this.setRightButton = function(value) { this.rightButton = value; }
	/**
	 * the mode of the right button view
	 * @alias Titanium_UI_TextField.rightButtonMode
	 * @property {Integer}
	 */
	this.rightButtonMode = 0
	/**
	 * Get the the mode of the right button view
	 * @alias Titanium_UI_TextField.getRightButtonMode
	 * @return {Integer}
	 */
	this.getRightButtonMode = function() { return this.rightButtonMode; }
	/**
	 * Set the the mode of the right button view
	 * @param {Integer} value New value to set.
	 * @alias Titanium_UI_TextField.setRightButtonMode
	 */
	this.setRightButtonMode = function(value) { this.rightButtonMode = value; }
	/**
	 * the right padding of the space between the button and the edge of the field
	 * @alias Titanium_UI_TextField.rightButtonPadding
	 * @property {Float}
	 */
	this.rightButtonPadding = 0.0
	/**
	 * Get the the right padding of the space between the button and the edge of the field
	 * @alias Titanium_UI_TextField.getRightButtonPadding
	 * @return {Float}
	 */
	this.getRightButtonPadding = function() { return this.rightButtonPadding; }
	/**
	 * Set the the right padding of the space between the button and the edge of the field
	 * @param {Float} value New value to set.
	 * @alias Titanium_UI_TextField.setRightButtonPadding
	 */
	this.setRightButtonPadding = function(value) { this.rightButtonPadding = value; }
	/**
	 * the size of the view as a dictionary of width and height properties
	 * @alias Titanium_UI_TextField.size
	 * @property {Object}
	 */
	this.size = {}
	/**
	 * Get the the size of the view as a dictionary of width and height properties
	 * @alias Titanium_UI_TextField.getSize
	 * @return {Object}
	 */
	this.getSize = function() { return this.size; }
	/**
	 * Set the the size of the view as a dictionary of width and height properties
	 * @param {Object} value New value to set.
	 * @alias Titanium_UI_TextField.setSize
	 */
	this.setSize = function(value) { this.size = value; }
	/**
	 * One of Titanium.UI.Android.SOFT_KEYBOARD_DEFAULT_ON_FOCUS, Titanium.UI.Android.SOFT_KEYBOARD_HIDE_ON_FOCUS, or Titanium.UI.Android.SOFT_KEYBOARD_SHOW_ON_FOCUS. (Android only)
	 * @alias Titanium_UI_TextField.softKeyboardOnFocus
	 * @property {Integer}
	 */
	this.softKeyboardOnFocus = 0
	/**
	 * Get the One of Titanium.UI.Android.SOFT_KEYBOARD_DEFAULT_ON_FOCUS, Titanium.UI.Android.SOFT_KEYBOARD_HIDE_ON_FOCUS, or Titanium.UI.Android.SOFT_KEYBOARD_SHOW_ON_FOCUS. (Android only)
	 * @alias Titanium_UI_TextField.getSoftKeyboardOnFocus
	 * @return {Integer}
	 */
	this.getSoftKeyboardOnFocus = function() { return this.softKeyboardOnFocus; }
	/**
	 * Set the One of Titanium.UI.Android.SOFT_KEYBOARD_DEFAULT_ON_FOCUS, Titanium.UI.Android.SOFT_KEYBOARD_HIDE_ON_FOCUS, or Titanium.UI.Android.SOFT_KEYBOARD_SHOW_ON_FOCUS. (Android only)
	 * @param {Integer} value New value to set.
	 * @alias Titanium_UI_TextField.setSoftKeyboardOnFocus
	 */
	this.setSoftKeyboardOnFocus = function(value) { this.softKeyboardOnFocus = value; }
	/**
	 * boolean to indicate if the return key should be suppressed during entry
	 * @alias Titanium_UI_TextField.suppressReturn
	 * @property {Boolean}
	 */
	this.suppressReturn = false
	/**
	 * Get the boolean to indicate if the return key should be suppressed during entry
	 * @alias Titanium_UI_TextField.getSuppressReturn
	 * @return {Boolean}
	 */
	this.getSuppressReturn = function() { return this.suppressReturn; }
	/**
	 * Set the boolean to indicate if the return key should be suppressed during entry
	 * @param {Boolean} value New value to set.
	 * @alias Titanium_UI_TextField.setSuppressReturn
	 */
	this.setSuppressReturn = function(value) { this.suppressReturn = value; }
	/**
	 * property for the view top position. This position is relative to the view's parent. Can be either a float value or a dimension string ie 'auto' (default), '50%' (iPhone only).
	 * @alias Titanium_UI_TextField.top
	 * @property {Float,String}
	 */
	this.top = 0.0
	/**
	 * Get the property for the view top position. This position is relative to the view's parent. Can be either a float value or a dimension string ie 'auto' (default), '50%' (iPhone only).
	 * @alias Titanium_UI_TextField.getTop
	 * @return {Float,String}
	 */
	this.getTop = function() { return this.top; }
	/**
	 * Set the property for the view top position. This position is relative to the view's parent. Can be either a float value or a dimension string ie 'auto' (default), '50%' (iPhone only).
	 * @param {Float,String} value New value to set.
	 * @alias Titanium_UI_TextField.setTop
	 */
	this.setTop = function(value) { this.top = value; }
	/**
	 * a boolean indicating if the view should receive touch events (true, default) or forward them to peers (false)
	 * @alias Titanium_UI_TextField.touchEnabled
	 * @property {Boolean}
	 */
	this.touchEnabled = false
	/**
	 * Get the a boolean indicating if the view should receive touch events (true, default) or forward them to peers (false)
	 * @alias Titanium_UI_TextField.getTouchEnabled
	 * @return {Boolean}
	 */
	this.getTouchEnabled = function() { return this.touchEnabled; }
	/**
	 * Set the a boolean indicating if the view should receive touch events (true, default) or forward them to peers (false)
	 * @param {Boolean} value New value to set.
	 * @alias Titanium_UI_TextField.setTouchEnabled
	 */
	this.setTouchEnabled = function(value) { this.touchEnabled = value; }
	/**
	 * the transformation matrix to apply to the view
	 * @alias Titanium_UI_TextField.transform
	 * @property {Object}
	 */
	this.transform = {}
	/**
	 * Get the the transformation matrix to apply to the view
	 * @alias Titanium_UI_TextField.getTransform
	 * @return {Object}
	 */
	this.getTransform = function() { return this.transform; }
	/**
	 * Set the the transformation matrix to apply to the view
	 * @param {Object} value New value to set.
	 * @alias Titanium_UI_TextField.setTransform
	 */
	this.setTransform = function(value) { this.transform = value; }
	/**
	 * value of the field
	 * @alias Titanium_UI_TextField.value
	 * @property {String}
	 */
	this.value = ''
	/**
	 * Get the value of the field
	 * @alias Titanium_UI_TextField.getValue
	 * @return {String}
	 */
	this.getValue = function() { return this.value; }
	/**
	 * Set the value of the field
	 * @param {String} value New value to set.
	 * @alias Titanium_UI_TextField.setValue
	 */
	this.setValue = function(value) { this.value = value; }
	/**
	 * the constant or string value for the fields vertical alignment.
	 * @alias Titanium_UI_TextField.verticalAlign
	 * @property {Integer,String}
	 */
	this.verticalAlign = 0
	/**
	 * Get the the constant or string value for the fields vertical alignment.
	 * @alias Titanium_UI_TextField.getVerticalAlign
	 * @return {Integer,String}
	 */
	this.getVerticalAlign = function() { return this.verticalAlign; }
	/**
	 * Set the the constant or string value for the fields vertical alignment.
	 * @param {Integer,String} value New value to set.
	 * @alias Titanium_UI_TextField.setVerticalAlign
	 */
	this.setVerticalAlign = function(value) { this.verticalAlign = value; }
	/**
	 * a boolean of the visibility of the view
	 * @alias Titanium_UI_TextField.visible
	 * @property {Boolean}
	 */
	this.visible = false
	/**
	 * Get the a boolean of the visibility of the view
	 * @alias Titanium_UI_TextField.getVisible
	 * @return {Boolean}
	 */
	this.getVisible = function() { return this.visible; }
	/**
	 * Set the a boolean of the visibility of the view
	 * @param {Boolean} value New value to set.
	 * @alias Titanium_UI_TextField.setVisible
	 */
	this.setVisible = function(value) { this.visible = value; }
	/**
	 * property for the view width. Can be either a float value or a dimension string ie 'auto' (default), '50%' (iPhone only).
	 * @alias Titanium_UI_TextField.width
	 * @property {Float,String}
	 */
	this.width = 0.0
	/**
	 * Get the property for the view width. Can be either a float value or a dimension string ie 'auto' (default), '50%' (iPhone only).
	 * @alias Titanium_UI_TextField.getWidth
	 * @return {Float,String}
	 */
	this.getWidth = function() { return this.width; }
	/**
	 * Set the property for the view width. Can be either a float value or a dimension string ie 'auto' (default), '50%' (iPhone only).
	 * @param {Float,String} value New value to set.
	 * @alias Titanium_UI_TextField.setWidth
	 */
	this.setWidth = function(value) { this.width = value; }
	/**
	 * the z index position relative to other sibling views
	 * @alias Titanium_UI_TextField.zIndex
	 * @property {Integer}
	 */
	this.zIndex = 0
	/**
	 * Get the the z index position relative to other sibling views
	 * @alias Titanium_UI_TextField.getZIndex
	 * @return {Integer}
	 */
	this.getZIndex = function() { return this.zIndex; }
	/**
	 * Set the the z index position relative to other sibling views
	 * @param {Integer} value New value to set.
	 * @alias Titanium_UI_TextField.setZIndex
	 */
	this.setZIndex = function(value) { this.zIndex = value; }
	/**
	 * add a child to the view hierarchy
	 * @param {Object} view the view to add to this views hiearchy
	 * @alias Titanium_UI_TextField.add
	 */
	this.add = function add(view) { }
	/**
	 * add an event listener for the instance to receive view triggered events
	 * @param {String} name name of the event
	 * @param {Function} callback callback function to invoke when the event is fired
	 * @alias Titanium_UI_TextField.addEventListener
	 */
	this.addEventListener = function addEventListener(name,callback) { }
	/**
	 * animate the view
	 * @param {Object} obj either a dictionary of animation properties or an Animation object
	 * @param {Function} callback function to be invoked upon completion of the animation
	 * @alias Titanium_UI_TextField.animate
	 */
	this.animate = function animate(obj,callback) { }
	/**
	 * force the field to lose focus
	 * @alias Titanium_UI_TextField.blur
	 */
	this.blur = function blur() { }
	/**
	 * fire a synthesized event to the views listener
	 * @param {String} name name of the event
	 * @param {Object} event event object
	 * @alias Titanium_UI_TextField.fireEvent
	 */
	this.fireEvent = function fireEvent(name,event) { }
	/**
	 * force the field to gain focus
	 * @alias Titanium_UI_TextField.focus
	 */
	this.focus = function focus() { }
	/**
	 * return boolean (true) if the field has text
	 * @alias Titanium_UI_TextField.hasText
	 */
	this.hasText = function hasText() { }
	/**
	 * hide the view
	 * @alias Titanium_UI_TextField.hide
	 */
	this.hide = function hide() { }
	/**
	 * remove a previously add view from the view hiearchy
	 * @param {Object} view the view to remove from this views hiearchy
	 * @alias Titanium_UI_TextField.remove
	 */
	this.remove = function remove(view) { }
	/**
	 * remove a previously added event listener
	 * @param {String} name name of the event
	 * @param {Function} callback callback function passed in addEventListener
	 * @alias Titanium_UI_TextField.removeEventListener
	 */
	this.removeEventListener = function removeEventListener(name,callback) { }
	/**
	 * make the view visible
	 * @alias Titanium_UI_TextField.show
	 */
	this.show = function show() { }
	/**
	 * return a Blob image of the rendered view
	 * @param {Function} f function to be invoked upon completion. if non-null, this method will be performed asynchronously. if null, it will be performed immediately
	 * @alias Titanium_UI_TextField.toImage
	 * @return {Object}
	 */
	this.toImage = function toImage(f) { return {}; }
};

/**
 * A Toolbar is created by the method Titanium.UI.createToolbar.  A Toolbar can be placed at the bottom of a window and contain buttons.
 * @since 0.8
 */
function Titanium_UI_Toolbar() {
	/**
	 * a dictionary with properties x and y to indicate the anchor point value. anchor specifies the position by which animation should occur. center is 0.5, 0.5
	 * @alias Titanium_UI_Toolbar.anchorPoint
	 * @property {Object}
	 */
	this.anchorPoint = {}
	/**
	 * Get the a dictionary with properties x and y to indicate the anchor point value. anchor specifies the position by which animation should occur. center is 0.5, 0.5
	 * @alias Titanium_UI_Toolbar.getAnchorPoint
	 * @return {Object}
	 */
	this.getAnchorPoint = function() { return this.anchorPoint; }
	/**
	 * Set the a dictionary with properties x and y to indicate the anchor point value. anchor specifies the position by which animation should occur. center is 0.5, 0.5
	 * @param {Object} value New value to set.
	 * @alias Titanium_UI_Toolbar.setAnchorPoint
	 */
	this.setAnchorPoint = function(value) { this.anchorPoint = value; }
	/**
	 * read-only object with x and y properties of where the view is during animation
	 * @alias Titanium_UI_Toolbar.animatedCenterPoint
	 * @property {Object}
	 */
	this.animatedCenterPoint = {}
	/**
	 * Get the read-only object with x and y properties of where the view is during animation
	 * @alias Titanium_UI_Toolbar.getAnimatedCenterPoint
	 * @return {Object}
	 */
	this.getAnimatedCenterPoint = function() { return this.animatedCenterPoint; }
	/**
	 * Set the read-only object with x and y properties of where the view is during animation
	 * @param {Object} value New value to set.
	 * @alias Titanium_UI_Toolbar.setAnimatedCenterPoint
	 */
	this.setAnimatedCenterPoint = function(value) { this.animatedCenterPoint = value; }
	/**
	 * the background color of the view
	 * @alias Titanium_UI_Toolbar.backgroundColor
	 * @property {String}
	 */
	this.backgroundColor = ''
	/**
	 * Get the the background color of the view
	 * @alias Titanium_UI_Toolbar.getBackgroundColor
	 * @return {String}
	 */
	this.getBackgroundColor = function() { return this.backgroundColor; }
	/**
	 * Set the the background color of the view
	 * @param {String} value New value to set.
	 * @alias Titanium_UI_Toolbar.setBackgroundColor
	 */
	this.setBackgroundColor = function(value) { this.backgroundColor = value; }
	/**
	 * the disabled background color of the view. (Android)
	 * @alias Titanium_UI_Toolbar.backgroundDisabledColor
	 * @property {String}
	 */
	this.backgroundDisabledColor = ''
	/**
	 * Get the the disabled background color of the view. (Android)
	 * @alias Titanium_UI_Toolbar.getBackgroundDisabledColor
	 * @return {String}
	 */
	this.getBackgroundDisabledColor = function() { return this.backgroundDisabledColor; }
	/**
	 * Set the the disabled background color of the view. (Android)
	 * @param {String} value New value to set.
	 * @alias Titanium_UI_Toolbar.setBackgroundDisabledColor
	 */
	this.setBackgroundDisabledColor = function(value) { this.backgroundDisabledColor = value; }
	/**
	 * the disabled background image url of the view. (Android)
	 * @alias Titanium_UI_Toolbar.backgroundDisabledImage
	 * @property {String}
	 */
	this.backgroundDisabledImage = ''
	/**
	 * Get the the disabled background image url of the view. (Android)
	 * @alias Titanium_UI_Toolbar.getBackgroundDisabledImage
	 * @return {String}
	 */
	this.getBackgroundDisabledImage = function() { return this.backgroundDisabledImage; }
	/**
	 * Set the the disabled background image url of the view. (Android)
	 * @param {String} value New value to set.
	 * @alias Titanium_UI_Toolbar.setBackgroundDisabledImage
	 */
	this.setBackgroundDisabledImage = function(value) { this.backgroundDisabledImage = value; }
	/**
	 * the focused background color of the view. focusable must be true for normal views. (Android)
	 * @alias Titanium_UI_Toolbar.backgroundFocusedColor
	 * @property {String}
	 */
	this.backgroundFocusedColor = ''
	/**
	 * Get the the focused background color of the view. focusable must be true for normal views. (Android)
	 * @alias Titanium_UI_Toolbar.getBackgroundFocusedColor
	 * @return {String}
	 */
	this.getBackgroundFocusedColor = function() { return this.backgroundFocusedColor; }
	/**
	 * Set the the focused background color of the view. focusable must be true for normal views. (Android)
	 * @param {String} value New value to set.
	 * @alias Titanium_UI_Toolbar.setBackgroundFocusedColor
	 */
	this.setBackgroundFocusedColor = function(value) { this.backgroundFocusedColor = value; }
	/**
	 * the focused background image url of the view. focusable must be true for normal views. (Android)
	 * @alias Titanium_UI_Toolbar.backgroundFocusedImage
	 * @property {String}
	 */
	this.backgroundFocusedImage = ''
	/**
	 * Get the the focused background image url of the view. focusable must be true for normal views. (Android)
	 * @alias Titanium_UI_Toolbar.getBackgroundFocusedImage
	 * @return {String}
	 */
	this.getBackgroundFocusedImage = function() { return this.backgroundFocusedImage; }
	/**
	 * Set the the focused background image url of the view. focusable must be true for normal views. (Android)
	 * @param {String} value New value to set.
	 * @alias Titanium_UI_Toolbar.setBackgroundFocusedImage
	 */
	this.setBackgroundFocusedImage = function(value) { this.backgroundFocusedImage = value; }
	/**
	 * a background gradient for the view with the properties: type,startPoint,endPoint,startRadius,endRadius,backfillStart,backfillEnd,colors.
	 * @alias Titanium_UI_Toolbar.backgroundGradient
	 * @property {Object}
	 */
	this.backgroundGradient = {}
	/**
	 * Get the a background gradient for the view with the properties: type,startPoint,endPoint,startRadius,endRadius,backfillStart,backfillEnd,colors.
	 * @alias Titanium_UI_Toolbar.getBackgroundGradient
	 * @return {Object}
	 */
	this.getBackgroundGradient = function() { return this.backgroundGradient; }
	/**
	 * Set the a background gradient for the view with the properties: type,startPoint,endPoint,startRadius,endRadius,backfillStart,backfillEnd,colors.
	 * @param {Object} value New value to set.
	 * @alias Titanium_UI_Toolbar.setBackgroundGradient
	 */
	this.setBackgroundGradient = function(value) { this.backgroundGradient = value; }
	/**
	 * the background image url of the view
	 * @alias Titanium_UI_Toolbar.backgroundImage
	 * @property {String}
	 */
	this.backgroundImage = ''
	/**
	 * Get the the background image url of the view
	 * @alias Titanium_UI_Toolbar.getBackgroundImage
	 * @return {String}
	 */
	this.getBackgroundImage = function() { return this.backgroundImage; }
	/**
	 * Set the the background image url of the view
	 * @param {String} value New value to set.
	 * @alias Titanium_UI_Toolbar.setBackgroundImage
	 */
	this.setBackgroundImage = function(value) { this.backgroundImage = value; }
	/**
	 * End caps specify the portion of an image that should not be resized when an image is stretched. This technique is used to implement buttons and other resizable image-based interface elements. When a button with end caps is resized, the resizing occurs only in the middle of the button, in the region between the end caps. The end caps themselves keep their original size and appearance. This property specifies the size of the left end cap. The middle (stretchable) portion is assumed to be 1 pixel wide. The right end cap is therefore computed by adding the size of the left end cap and the middle portion together and then subtracting that value from the width of the image
	 * @alias Titanium_UI_Toolbar.backgroundLeftCap
	 * @property {Float}
	 */
	this.backgroundLeftCap = 0.0
	/**
	 * Get the End caps specify the portion of an image that should not be resized when an image is stretched. This technique is used to implement buttons and other resizable image-based interface elements. When a button with end caps is resized, the resizing occurs only in the middle of the button, in the region between the end caps. The end caps themselves keep their original size and appearance. This property specifies the size of the left end cap. The middle (stretchable) portion is assumed to be 1 pixel wide. The right end cap is therefore computed by adding the size of the left end cap and the middle portion together and then subtracting that value from the width of the image
	 * @alias Titanium_UI_Toolbar.getBackgroundLeftCap
	 * @return {Float}
	 */
	this.getBackgroundLeftCap = function() { return this.backgroundLeftCap; }
	/**
	 * Set the End caps specify the portion of an image that should not be resized when an image is stretched. This technique is used to implement buttons and other resizable image-based interface elements. When a button with end caps is resized, the resizing occurs only in the middle of the button, in the region between the end caps. The end caps themselves keep their original size and appearance. This property specifies the size of the left end cap. The middle (stretchable) portion is assumed to be 1 pixel wide. The right end cap is therefore computed by adding the size of the left end cap and the middle portion together and then subtracting that value from the width of the image
	 * @param {Float} value New value to set.
	 * @alias Titanium_UI_Toolbar.setBackgroundLeftCap
	 */
	this.setBackgroundLeftCap = function(value) { this.backgroundLeftCap = value; }
	/**
	 * the selected background color of the view. focusable must be true for normal views. (Android)
	 * @alias Titanium_UI_Toolbar.backgroundSelectedColor
	 * @property {String}
	 */
	this.backgroundSelectedColor = ''
	/**
	 * Get the the selected background color of the view. focusable must be true for normal views. (Android)
	 * @alias Titanium_UI_Toolbar.getBackgroundSelectedColor
	 * @return {String}
	 */
	this.getBackgroundSelectedColor = function() { return this.backgroundSelectedColor; }
	/**
	 * Set the the selected background color of the view. focusable must be true for normal views. (Android)
	 * @param {String} value New value to set.
	 * @alias Titanium_UI_Toolbar.setBackgroundSelectedColor
	 */
	this.setBackgroundSelectedColor = function(value) { this.backgroundSelectedColor = value; }
	/**
	 * the selected background image url of the view. focusable must be true for normal views. (Android)
	 * @alias Titanium_UI_Toolbar.backgroundSelectedImage
	 * @property {String}
	 */
	this.backgroundSelectedImage = ''
	/**
	 * Get the the selected background image url of the view. focusable must be true for normal views. (Android)
	 * @alias Titanium_UI_Toolbar.getBackgroundSelectedImage
	 * @return {String}
	 */
	this.getBackgroundSelectedImage = function() { return this.backgroundSelectedImage; }
	/**
	 * Set the the selected background image url of the view. focusable must be true for normal views. (Android)
	 * @param {String} value New value to set.
	 * @alias Titanium_UI_Toolbar.setBackgroundSelectedImage
	 */
	this.setBackgroundSelectedImage = function(value) { this.backgroundSelectedImage = value; }
	/**
	 * End caps specify the portion of an image that should not be resized when an image is stretched. This technique is used to implement buttons and other resizable image-based interface elements. When a button with end caps is resized, the resizing occurs only in the middle of the button, in the region between the end caps. The end caps themselves keep their original size and appearance. This property specifies the size of the top end cap. The middle (stretchable) portion is assumed to be 1 pixel wide. The bottom end cap is therefore computed by adding the size of the top end cap and the middle portion together and then subtracting that value from the height of the image
	 * @alias Titanium_UI_Toolbar.backgroundTopCap
	 * @property {Float}
	 */
	this.backgroundTopCap = 0.0
	/**
	 * Get the End caps specify the portion of an image that should not be resized when an image is stretched. This technique is used to implement buttons and other resizable image-based interface elements. When a button with end caps is resized, the resizing occurs only in the middle of the button, in the region between the end caps. The end caps themselves keep their original size and appearance. This property specifies the size of the top end cap. The middle (stretchable) portion is assumed to be 1 pixel wide. The bottom end cap is therefore computed by adding the size of the top end cap and the middle portion together and then subtracting that value from the height of the image
	 * @alias Titanium_UI_Toolbar.getBackgroundTopCap
	 * @return {Float}
	 */
	this.getBackgroundTopCap = function() { return this.backgroundTopCap; }
	/**
	 * Set the End caps specify the portion of an image that should not be resized when an image is stretched. This technique is used to implement buttons and other resizable image-based interface elements. When a button with end caps is resized, the resizing occurs only in the middle of the button, in the region between the end caps. The end caps themselves keep their original size and appearance. This property specifies the size of the top end cap. The middle (stretchable) portion is assumed to be 1 pixel wide. The bottom end cap is therefore computed by adding the size of the top end cap and the middle portion together and then subtracting that value from the height of the image
	 * @param {Float} value New value to set.
	 * @alias Titanium_UI_Toolbar.setBackgroundTopCap
	 */
	this.setBackgroundTopCap = function(value) { this.backgroundTopCap = value; }
	/**
	 * the border color of the view
	 * @alias Titanium_UI_Toolbar.borderColor
	 * @property {String}
	 */
	this.borderColor = ''
	/**
	 * Get the the border color of the view
	 * @alias Titanium_UI_Toolbar.getBorderColor
	 * @return {String}
	 */
	this.getBorderColor = function() { return this.borderColor; }
	/**
	 * Set the the border color of the view
	 * @param {String} value New value to set.
	 * @alias Titanium_UI_Toolbar.setBorderColor
	 */
	this.setBorderColor = function(value) { this.borderColor = value; }
	/**
	 * the border radius of the view
	 * @alias Titanium_UI_Toolbar.borderRadius
	 * @property {Float}
	 */
	this.borderRadius = 0.0
	/**
	 * Get the the border radius of the view
	 * @alias Titanium_UI_Toolbar.getBorderRadius
	 * @return {Float}
	 */
	this.getBorderRadius = function() { return this.borderRadius; }
	/**
	 * Set the the border radius of the view
	 * @param {Float} value New value to set.
	 * @alias Titanium_UI_Toolbar.setBorderRadius
	 */
	this.setBorderRadius = function(value) { this.borderRadius = value; }
	/**
	 * the border width of the view
	 * @alias Titanium_UI_Toolbar.borderWidth
	 * @property {Float}
	 */
	this.borderWidth = 0.0
	/**
	 * Get the the border width of the view
	 * @alias Titanium_UI_Toolbar.getBorderWidth
	 * @return {Float}
	 */
	this.getBorderWidth = function() { return this.borderWidth; }
	/**
	 * Set the the border width of the view
	 * @param {Float} value New value to set.
	 * @alias Titanium_UI_Toolbar.setBorderWidth
	 */
	this.setBorderWidth = function(value) { this.borderWidth = value; }
	/**
	 * property for the view bottom position. This position is relative to the view's parent. Can be either a float value or a dimension string ie 'auto' (default), '50%' (iPhone only).
	 * @alias Titanium_UI_Toolbar.bottom
	 * @property {Float,String}
	 */
	this.bottom = 0.0
	/**
	 * Get the property for the view bottom position. This position is relative to the view's parent. Can be either a float value or a dimension string ie 'auto' (default), '50%' (iPhone only).
	 * @alias Titanium_UI_Toolbar.getBottom
	 * @return {Float,String}
	 */
	this.getBottom = function() { return this.bottom; }
	/**
	 * Set the property for the view bottom position. This position is relative to the view's parent. Can be either a float value or a dimension string ie 'auto' (default), '50%' (iPhone only).
	 * @param {Float,String} value New value to set.
	 * @alias Titanium_UI_Toolbar.setBottom
	 */
	this.setBottom = function(value) { this.bottom = value; }
	/**
	 * a dictionary with properties x and y to indicate the center of the views position relative to the parent view
	 * @alias Titanium_UI_Toolbar.center
	 * @property {Object}
	 */
	this.center = {}
	/**
	 * Get the a dictionary with properties x and y to indicate the center of the views position relative to the parent view
	 * @alias Titanium_UI_Toolbar.getCenter
	 * @return {Object}
	 */
	this.getCenter = function() { return this.center; }
	/**
	 * Set the a dictionary with properties x and y to indicate the center of the views position relative to the parent view
	 * @param {Object} value New value to set.
	 * @alias Titanium_UI_Toolbar.setCenter
	 */
	this.setCenter = function(value) { this.center = value; }
	/**
	 * Set true if you want a view to be focusable when navigating with the trackball or D-Pad. Default: false. (Android Only)
	 * @alias Titanium_UI_Toolbar.focusable
	 * @property {Boolean}
	 */
	this.focusable = false
	/**
	 * Get the Set true if you want a view to be focusable when navigating with the trackball or D-Pad. Default: false. (Android Only)
	 * @alias Titanium_UI_Toolbar.getFocusable
	 * @return {Boolean}
	 */
	this.getFocusable = function() { return this.focusable; }
	/**
	 * Set the Set true if you want a view to be focusable when navigating with the trackball or D-Pad. Default: false. (Android Only)
	 * @param {Boolean} value New value to set.
	 * @alias Titanium_UI_Toolbar.setFocusable
	 */
	this.setFocusable = function(value) { this.focusable = value; }
	/**
	 * the font family
	 * @alias Titanium_UI_Toolbar.font-family
	 * @property {String}
	 */
	this.font-family = ''
	/**
	 * Get the the font family
	 * @alias Titanium_UI_Toolbar.getFont-family
	 * @return {String}
	 */
	this.getFont-family = function() { return this.font-family; }
	/**
	 * Set the the font family
	 * @param {String} value New value to set.
	 * @alias Titanium_UI_Toolbar.setFont-family
	 */
	this.setFont-family = function(value) { this.font-family = value; }
	/**
	 * the font size
	 * @alias Titanium_UI_Toolbar.font-size
	 * @property {String}
	 */
	this.font-size = ''
	/**
	 * Get the the font size
	 * @alias Titanium_UI_Toolbar.getFont-size
	 * @return {String}
	 */
	this.getFont-size = function() { return this.font-size; }
	/**
	 * Set the the font size
	 * @param {String} value New value to set.
	 * @alias Titanium_UI_Toolbar.setFont-size
	 */
	this.setFont-size = function(value) { this.font-size = value; }
	/**
	 * the font style, either normal or italics
	 * @alias Titanium_UI_Toolbar.font-style
	 * @property {String}
	 */
	this.font-style = ''
	/**
	 * Get the the font style, either normal or italics
	 * @alias Titanium_UI_Toolbar.getFont-style
	 * @return {String}
	 */
	this.getFont-style = function() { return this.font-style; }
	/**
	 * Set the the font style, either normal or italics
	 * @param {String} value New value to set.
	 * @alias Titanium_UI_Toolbar.setFont-style
	 */
	this.setFont-style = function(value) { this.font-style = value; }
	/**
	 * the font weight, either normal or bold
	 * @alias Titanium_UI_Toolbar.font-weight
	 * @property {String}
	 */
	this.font-weight = ''
	/**
	 * Get the the font weight, either normal or bold
	 * @alias Titanium_UI_Toolbar.getFont-weight
	 * @return {String}
	 */
	this.getFont-weight = function() { return this.font-weight; }
	/**
	 * Set the the font weight, either normal or bold
	 * @param {String} value New value to set.
	 * @alias Titanium_UI_Toolbar.setFont-weight
	 */
	this.setFont-weight = function(value) { this.font-weight = value; }
	/**
	 * property for the view height. Can be either a float value or a dimension string ie 'auto' (default), '50%' (iPhone only).
	 * @alias Titanium_UI_Toolbar.height
	 * @property {Float,String}
	 */
	this.height = 0.0
	/**
	 * Get the property for the view height. Can be either a float value or a dimension string ie 'auto' (default), '50%' (iPhone only).
	 * @alias Titanium_UI_Toolbar.getHeight
	 * @return {Float,String}
	 */
	this.getHeight = function() { return this.height; }
	/**
	 * Set the property for the view height. Can be either a float value or a dimension string ie 'auto' (default), '50%' (iPhone only).
	 * @param {Float,String} value New value to set.
	 * @alias Titanium_UI_Toolbar.setHeight
	 */
	this.setHeight = function(value) { this.height = value; }
	/**
	 * property for the view left position. This position is relative to the view's parent. Can be either a float value or a dimension string ie 'auto' (default), '50%' (iPhone only).
	 * @alias Titanium_UI_Toolbar.left
	 * @property {Float,String}
	 */
	this.left = 0.0
	/**
	 * Get the property for the view left position. This position is relative to the view's parent. Can be either a float value or a dimension string ie 'auto' (default), '50%' (iPhone only).
	 * @alias Titanium_UI_Toolbar.getLeft
	 * @return {Float,String}
	 */
	this.getLeft = function() { return this.left; }
	/**
	 * Set the property for the view left position. This position is relative to the view's parent. Can be either a float value or a dimension string ie 'auto' (default), '50%' (iPhone only).
	 * @param {Float,String} value New value to set.
	 * @alias Titanium_UI_Toolbar.setLeft
	 */
	this.setLeft = function(value) { this.left = value; }
	/**
	 * the opacity from 0.0-1.0
	 * @alias Titanium_UI_Toolbar.opacity
	 * @property {Float}
	 */
	this.opacity = 0.0
	/**
	 * Get the the opacity from 0.0-1.0
	 * @alias Titanium_UI_Toolbar.getOpacity
	 * @return {Float}
	 */
	this.getOpacity = function() { return this.opacity; }
	/**
	 * Set the the opacity from 0.0-1.0
	 * @param {Float} value New value to set.
	 * @alias Titanium_UI_Toolbar.setOpacity
	 */
	this.setOpacity = function(value) { this.opacity = value; }
	/**
	 * property for the view right position. This position is relative to the view's parent. Can be either a float value or a dimension string ie 'auto' (default), '50%' (iPhone only).
	 * @alias Titanium_UI_Toolbar.right
	 * @property {Float,String}
	 */
	this.right = 0.0
	/**
	 * Get the property for the view right position. This position is relative to the view's parent. Can be either a float value or a dimension string ie 'auto' (default), '50%' (iPhone only).
	 * @alias Titanium_UI_Toolbar.getRight
	 * @return {Float,String}
	 */
	this.getRight = function() { return this.right; }
	/**
	 * Set the property for the view right position. This position is relative to the view's parent. Can be either a float value or a dimension string ie 'auto' (default), '50%' (iPhone only).
	 * @param {Float,String} value New value to set.
	 * @alias Titanium_UI_Toolbar.setRight
	 */
	this.setRight = function(value) { this.right = value; }
	/**
	 * the size of the view as a dictionary of width and height properties
	 * @alias Titanium_UI_Toolbar.size
	 * @property {Object}
	 */
	this.size = {}
	/**
	 * Get the the size of the view as a dictionary of width and height properties
	 * @alias Titanium_UI_Toolbar.getSize
	 * @return {Object}
	 */
	this.getSize = function() { return this.size; }
	/**
	 * Set the the size of the view as a dictionary of width and height properties
	 * @param {Object} value New value to set.
	 * @alias Titanium_UI_Toolbar.setSize
	 */
	this.setSize = function(value) { this.size = value; }
	/**
	 * One of Titanium.UI.Android.SOFT_KEYBOARD_DEFAULT_ON_FOCUS, Titanium.UI.Android.SOFT_KEYBOARD_HIDE_ON_FOCUS, or Titanium.UI.Android.SOFT_KEYBOARD_SHOW_ON_FOCUS. (Android only)
	 * @alias Titanium_UI_Toolbar.softKeyboardOnFocus
	 * @property {Integer}
	 */
	this.softKeyboardOnFocus = 0
	/**
	 * Get the One of Titanium.UI.Android.SOFT_KEYBOARD_DEFAULT_ON_FOCUS, Titanium.UI.Android.SOFT_KEYBOARD_HIDE_ON_FOCUS, or Titanium.UI.Android.SOFT_KEYBOARD_SHOW_ON_FOCUS. (Android only)
	 * @alias Titanium_UI_Toolbar.getSoftKeyboardOnFocus
	 * @return {Integer}
	 */
	this.getSoftKeyboardOnFocus = function() { return this.softKeyboardOnFocus; }
	/**
	 * Set the One of Titanium.UI.Android.SOFT_KEYBOARD_DEFAULT_ON_FOCUS, Titanium.UI.Android.SOFT_KEYBOARD_HIDE_ON_FOCUS, or Titanium.UI.Android.SOFT_KEYBOARD_SHOW_ON_FOCUS. (Android only)
	 * @param {Integer} value New value to set.
	 * @alias Titanium_UI_Toolbar.setSoftKeyboardOnFocus
	 */
	this.setSoftKeyboardOnFocus = function(value) { this.softKeyboardOnFocus = value; }
	/**
	 * property for the view top position. This position is relative to the view's parent. Can be either a float value or a dimension string ie 'auto' (default), '50%' (iPhone only).
	 * @alias Titanium_UI_Toolbar.top
	 * @property {Float,String}
	 */
	this.top = 0.0
	/**
	 * Get the property for the view top position. This position is relative to the view's parent. Can be either a float value or a dimension string ie 'auto' (default), '50%' (iPhone only).
	 * @alias Titanium_UI_Toolbar.getTop
	 * @return {Float,String}
	 */
	this.getTop = function() { return this.top; }
	/**
	 * Set the property for the view top position. This position is relative to the view's parent. Can be either a float value or a dimension string ie 'auto' (default), '50%' (iPhone only).
	 * @param {Float,String} value New value to set.
	 * @alias Titanium_UI_Toolbar.setTop
	 */
	this.setTop = function(value) { this.top = value; }
	/**
	 * a boolean indicating if the view should receive touch events (true, default) or forward them to peers (false)
	 * @alias Titanium_UI_Toolbar.touchEnabled
	 * @property {Boolean}
	 */
	this.touchEnabled = false
	/**
	 * Get the a boolean indicating if the view should receive touch events (true, default) or forward them to peers (false)
	 * @alias Titanium_UI_Toolbar.getTouchEnabled
	 * @return {Boolean}
	 */
	this.getTouchEnabled = function() { return this.touchEnabled; }
	/**
	 * Set the a boolean indicating if the view should receive touch events (true, default) or forward them to peers (false)
	 * @param {Boolean} value New value to set.
	 * @alias Titanium_UI_Toolbar.setTouchEnabled
	 */
	this.setTouchEnabled = function(value) { this.touchEnabled = value; }
	/**
	 * the transformation matrix to apply to the view
	 * @alias Titanium_UI_Toolbar.transform
	 * @property {Object}
	 */
	this.transform = {}
	/**
	 * Get the the transformation matrix to apply to the view
	 * @alias Titanium_UI_Toolbar.getTransform
	 * @return {Object}
	 */
	this.getTransform = function() { return this.transform; }
	/**
	 * Set the the transformation matrix to apply to the view
	 * @param {Object} value New value to set.
	 * @alias Titanium_UI_Toolbar.setTransform
	 */
	this.setTransform = function(value) { this.transform = value; }
	/**
	 * a boolean of the visibility of the view
	 * @alias Titanium_UI_Toolbar.visible
	 * @property {Boolean}
	 */
	this.visible = false
	/**
	 * Get the a boolean of the visibility of the view
	 * @alias Titanium_UI_Toolbar.getVisible
	 * @return {Boolean}
	 */
	this.getVisible = function() { return this.visible; }
	/**
	 * Set the a boolean of the visibility of the view
	 * @param {Boolean} value New value to set.
	 * @alias Titanium_UI_Toolbar.setVisible
	 */
	this.setVisible = function(value) { this.visible = value; }
	/**
	 * property for the view width. Can be either a float value or a dimension string ie 'auto' (default), '50%' (iPhone only).
	 * @alias Titanium_UI_Toolbar.width
	 * @property {Float,String}
	 */
	this.width = 0.0
	/**
	 * Get the property for the view width. Can be either a float value or a dimension string ie 'auto' (default), '50%' (iPhone only).
	 * @alias Titanium_UI_Toolbar.getWidth
	 * @return {Float,String}
	 */
	this.getWidth = function() { return this.width; }
	/**
	 * Set the property for the view width. Can be either a float value or a dimension string ie 'auto' (default), '50%' (iPhone only).
	 * @param {Float,String} value New value to set.
	 * @alias Titanium_UI_Toolbar.setWidth
	 */
	this.setWidth = function(value) { this.width = value; }
	/**
	 * the z index position relative to other sibling views
	 * @alias Titanium_UI_Toolbar.zIndex
	 * @property {Integer}
	 */
	this.zIndex = 0
	/**
	 * Get the the z index position relative to other sibling views
	 * @alias Titanium_UI_Toolbar.getZIndex
	 * @return {Integer}
	 */
	this.getZIndex = function() { return this.zIndex; }
	/**
	 * Set the the z index position relative to other sibling views
	 * @param {Integer} value New value to set.
	 * @alias Titanium_UI_Toolbar.setZIndex
	 */
	this.setZIndex = function(value) { this.zIndex = value; }
	/**
	 * add a child to the view hierarchy
	 * @param {Object} view the view to add to this views hiearchy
	 * @alias Titanium_UI_Toolbar.add
	 */
	this.add = function add(view) { }
	/**
	 * add an event listener for the instance to receive view triggered events
	 * @param {String} name name of the event
	 * @param {Function} callback callback function to invoke when the event is fired
	 * @alias Titanium_UI_Toolbar.addEventListener
	 */
	this.addEventListener = function addEventListener(name,callback) { }
	/**
	 * animate the view
	 * @param {Object} obj either a dictionary of animation properties or an Animation object
	 * @param {Function} callback function to be invoked upon completion of the animation
	 * @alias Titanium_UI_Toolbar.animate
	 */
	this.animate = function animate(obj,callback) { }
	/**
	 * fire a synthesized event to the views listener
	 * @param {String} name name of the event
	 * @param {Object} event event object
	 * @alias Titanium_UI_Toolbar.fireEvent
	 */
	this.fireEvent = function fireEvent(name,event) { }
	/**
	 * hide the view
	 * @alias Titanium_UI_Toolbar.hide
	 */
	this.hide = function hide() { }
	/**
	 * remove a previously add view from the view hiearchy
	 * @param {Object} view the view to remove from this views hiearchy
	 * @alias Titanium_UI_Toolbar.remove
	 */
	this.remove = function remove(view) { }
	/**
	 * remove a previously added event listener
	 * @param {String} name name of the event
	 * @param {Function} callback callback function passed in addEventListener
	 * @alias Titanium_UI_Toolbar.removeEventListener
	 */
	this.removeEventListener = function removeEventListener(name,callback) { }
	/**
	 * make the view visible
	 * @alias Titanium_UI_Toolbar.show
	 */
	this.show = function show() { }
	/**
	 * return a Blob image of the rendered view
	 * @param {Function} f function to be invoked upon completion. if non-null, this method will be performed asynchronously. if null, it will be performed immediately
	 * @alias Titanium_UI_Toolbar.toImage
	 * @return {Object}
	 */
	this.toImage = function toImage(f) { return {}; }
};

/**
 * The View is an empty drawing surface or container. The View is created by the method Titanium.UI.createView.
 * @since 0.9
 */
function Titanium_UI_View() {
	/**
	 * a dictionary with properties x and y to indicate the anchor point value. anchor specifies the position by which animation should occur. center is 0.5, 0.5
	 * @alias Titanium_UI_View.anchorPoint
	 * @property {Object}
	 */
	this.anchorPoint = {}
	/**
	 * Get the a dictionary with properties x and y to indicate the anchor point value. anchor specifies the position by which animation should occur. center is 0.5, 0.5
	 * @alias Titanium_UI_View.getAnchorPoint
	 * @return {Object}
	 */
	this.getAnchorPoint = function() { return this.anchorPoint; }
	/**
	 * Set the a dictionary with properties x and y to indicate the anchor point value. anchor specifies the position by which animation should occur. center is 0.5, 0.5
	 * @param {Object} value New value to set.
	 * @alias Titanium_UI_View.setAnchorPoint
	 */
	this.setAnchorPoint = function(value) { this.anchorPoint = value; }
	/**
	 * read-only object with x and y properties of where the view is during animation
	 * @alias Titanium_UI_View.animatedCenterPoint
	 * @property {Object}
	 */
	this.animatedCenterPoint = {}
	/**
	 * Get the read-only object with x and y properties of where the view is during animation
	 * @alias Titanium_UI_View.getAnimatedCenterPoint
	 * @return {Object}
	 */
	this.getAnimatedCenterPoint = function() { return this.animatedCenterPoint; }
	/**
	 * Set the read-only object with x and y properties of where the view is during animation
	 * @param {Object} value New value to set.
	 * @alias Titanium_UI_View.setAnimatedCenterPoint
	 */
	this.setAnimatedCenterPoint = function(value) { this.animatedCenterPoint = value; }
	/**
	 * the background color of the view
	 * @alias Titanium_UI_View.backgroundColor
	 * @property {String}
	 */
	this.backgroundColor = ''
	/**
	 * Get the the background color of the view
	 * @alias Titanium_UI_View.getBackgroundColor
	 * @return {String}
	 */
	this.getBackgroundColor = function() { return this.backgroundColor; }
	/**
	 * Set the the background color of the view
	 * @param {String} value New value to set.
	 * @alias Titanium_UI_View.setBackgroundColor
	 */
	this.setBackgroundColor = function(value) { this.backgroundColor = value; }
	/**
	 * the disabled background color of the view. (Android)
	 * @alias Titanium_UI_View.backgroundDisabledColor
	 * @property {String}
	 */
	this.backgroundDisabledColor = ''
	/**
	 * Get the the disabled background color of the view. (Android)
	 * @alias Titanium_UI_View.getBackgroundDisabledColor
	 * @return {String}
	 */
	this.getBackgroundDisabledColor = function() { return this.backgroundDisabledColor; }
	/**
	 * Set the the disabled background color of the view. (Android)
	 * @param {String} value New value to set.
	 * @alias Titanium_UI_View.setBackgroundDisabledColor
	 */
	this.setBackgroundDisabledColor = function(value) { this.backgroundDisabledColor = value; }
	/**
	 * the disabled background image url of the view. (Android)
	 * @alias Titanium_UI_View.backgroundDisabledImage
	 * @property {String}
	 */
	this.backgroundDisabledImage = ''
	/**
	 * Get the the disabled background image url of the view. (Android)
	 * @alias Titanium_UI_View.getBackgroundDisabledImage
	 * @return {String}
	 */
	this.getBackgroundDisabledImage = function() { return this.backgroundDisabledImage; }
	/**
	 * Set the the disabled background image url of the view. (Android)
	 * @param {String} value New value to set.
	 * @alias Titanium_UI_View.setBackgroundDisabledImage
	 */
	this.setBackgroundDisabledImage = function(value) { this.backgroundDisabledImage = value; }
	/**
	 * the focused background color of the view. focusable must be true for normal views. (Android)
	 * @alias Titanium_UI_View.backgroundFocusedColor
	 * @property {String}
	 */
	this.backgroundFocusedColor = ''
	/**
	 * Get the the focused background color of the view. focusable must be true for normal views. (Android)
	 * @alias Titanium_UI_View.getBackgroundFocusedColor
	 * @return {String}
	 */
	this.getBackgroundFocusedColor = function() { return this.backgroundFocusedColor; }
	/**
	 * Set the the focused background color of the view. focusable must be true for normal views. (Android)
	 * @param {String} value New value to set.
	 * @alias Titanium_UI_View.setBackgroundFocusedColor
	 */
	this.setBackgroundFocusedColor = function(value) { this.backgroundFocusedColor = value; }
	/**
	 * the focused background image url of the view. focusable must be true for normal views. (Android)
	 * @alias Titanium_UI_View.backgroundFocusedImage
	 * @property {String}
	 */
	this.backgroundFocusedImage = ''
	/**
	 * Get the the focused background image url of the view. focusable must be true for normal views. (Android)
	 * @alias Titanium_UI_View.getBackgroundFocusedImage
	 * @return {String}
	 */
	this.getBackgroundFocusedImage = function() { return this.backgroundFocusedImage; }
	/**
	 * Set the the focused background image url of the view. focusable must be true for normal views. (Android)
	 * @param {String} value New value to set.
	 * @alias Titanium_UI_View.setBackgroundFocusedImage
	 */
	this.setBackgroundFocusedImage = function(value) { this.backgroundFocusedImage = value; }
	/**
	 * a background gradient for the view with the properties: type,startPoint,endPoint,startRadius,endRadius,backfillStart,backfillEnd,colors.
	 * @alias Titanium_UI_View.backgroundGradient
	 * @property {Object}
	 */
	this.backgroundGradient = {}
	/**
	 * Get the a background gradient for the view with the properties: type,startPoint,endPoint,startRadius,endRadius,backfillStart,backfillEnd,colors.
	 * @alias Titanium_UI_View.getBackgroundGradient
	 * @return {Object}
	 */
	this.getBackgroundGradient = function() { return this.backgroundGradient; }
	/**
	 * Set the a background gradient for the view with the properties: type,startPoint,endPoint,startRadius,endRadius,backfillStart,backfillEnd,colors.
	 * @param {Object} value New value to set.
	 * @alias Titanium_UI_View.setBackgroundGradient
	 */
	this.setBackgroundGradient = function(value) { this.backgroundGradient = value; }
	/**
	 * the background image url of the view
	 * @alias Titanium_UI_View.backgroundImage
	 * @property {String}
	 */
	this.backgroundImage = ''
	/**
	 * Get the the background image url of the view
	 * @alias Titanium_UI_View.getBackgroundImage
	 * @return {String}
	 */
	this.getBackgroundImage = function() { return this.backgroundImage; }
	/**
	 * Set the the background image url of the view
	 * @param {String} value New value to set.
	 * @alias Titanium_UI_View.setBackgroundImage
	 */
	this.setBackgroundImage = function(value) { this.backgroundImage = value; }
	/**
	 * End caps specify the portion of an image that should not be resized when an image is stretched. This technique is used to implement buttons and other resizable image-based interface elements. When a button with end caps is resized, the resizing occurs only in the middle of the button, in the region between the end caps. The end caps themselves keep their original size and appearance. This property specifies the size of the left end cap. The middle (stretchable) portion is assumed to be 1 pixel wide. The right end cap is therefore computed by adding the size of the left end cap and the middle portion together and then subtracting that value from the width of the image
	 * @alias Titanium_UI_View.backgroundLeftCap
	 * @property {Float}
	 */
	this.backgroundLeftCap = 0.0
	/**
	 * Get the End caps specify the portion of an image that should not be resized when an image is stretched. This technique is used to implement buttons and other resizable image-based interface elements. When a button with end caps is resized, the resizing occurs only in the middle of the button, in the region between the end caps. The end caps themselves keep their original size and appearance. This property specifies the size of the left end cap. The middle (stretchable) portion is assumed to be 1 pixel wide. The right end cap is therefore computed by adding the size of the left end cap and the middle portion together and then subtracting that value from the width of the image
	 * @alias Titanium_UI_View.getBackgroundLeftCap
	 * @return {Float}
	 */
	this.getBackgroundLeftCap = function() { return this.backgroundLeftCap; }
	/**
	 * Set the End caps specify the portion of an image that should not be resized when an image is stretched. This technique is used to implement buttons and other resizable image-based interface elements. When a button with end caps is resized, the resizing occurs only in the middle of the button, in the region between the end caps. The end caps themselves keep their original size and appearance. This property specifies the size of the left end cap. The middle (stretchable) portion is assumed to be 1 pixel wide. The right end cap is therefore computed by adding the size of the left end cap and the middle portion together and then subtracting that value from the width of the image
	 * @param {Float} value New value to set.
	 * @alias Titanium_UI_View.setBackgroundLeftCap
	 */
	this.setBackgroundLeftCap = function(value) { this.backgroundLeftCap = value; }
	/**
	 * the selected background color of the view. focusable must be true for normal views. (Android)
	 * @alias Titanium_UI_View.backgroundSelectedColor
	 * @property {String}
	 */
	this.backgroundSelectedColor = ''
	/**
	 * Get the the selected background color of the view. focusable must be true for normal views. (Android)
	 * @alias Titanium_UI_View.getBackgroundSelectedColor
	 * @return {String}
	 */
	this.getBackgroundSelectedColor = function() { return this.backgroundSelectedColor; }
	/**
	 * Set the the selected background color of the view. focusable must be true for normal views. (Android)
	 * @param {String} value New value to set.
	 * @alias Titanium_UI_View.setBackgroundSelectedColor
	 */
	this.setBackgroundSelectedColor = function(value) { this.backgroundSelectedColor = value; }
	/**
	 * the selected background image url of the view. focusable must be true for normal views. (Android)
	 * @alias Titanium_UI_View.backgroundSelectedImage
	 * @property {String}
	 */
	this.backgroundSelectedImage = ''
	/**
	 * Get the the selected background image url of the view. focusable must be true for normal views. (Android)
	 * @alias Titanium_UI_View.getBackgroundSelectedImage
	 * @return {String}
	 */
	this.getBackgroundSelectedImage = function() { return this.backgroundSelectedImage; }
	/**
	 * Set the the selected background image url of the view. focusable must be true for normal views. (Android)
	 * @param {String} value New value to set.
	 * @alias Titanium_UI_View.setBackgroundSelectedImage
	 */
	this.setBackgroundSelectedImage = function(value) { this.backgroundSelectedImage = value; }
	/**
	 * End caps specify the portion of an image that should not be resized when an image is stretched. This technique is used to implement buttons and other resizable image-based interface elements. When a button with end caps is resized, the resizing occurs only in the middle of the button, in the region between the end caps. The end caps themselves keep their original size and appearance. This property specifies the size of the top end cap. The middle (stretchable) portion is assumed to be 1 pixel wide. The bottom end cap is therefore computed by adding the size of the top end cap and the middle portion together and then subtracting that value from the height of the image
	 * @alias Titanium_UI_View.backgroundTopCap
	 * @property {Float}
	 */
	this.backgroundTopCap = 0.0
	/**
	 * Get the End caps specify the portion of an image that should not be resized when an image is stretched. This technique is used to implement buttons and other resizable image-based interface elements. When a button with end caps is resized, the resizing occurs only in the middle of the button, in the region between the end caps. The end caps themselves keep their original size and appearance. This property specifies the size of the top end cap. The middle (stretchable) portion is assumed to be 1 pixel wide. The bottom end cap is therefore computed by adding the size of the top end cap and the middle portion together and then subtracting that value from the height of the image
	 * @alias Titanium_UI_View.getBackgroundTopCap
	 * @return {Float}
	 */
	this.getBackgroundTopCap = function() { return this.backgroundTopCap; }
	/**
	 * Set the End caps specify the portion of an image that should not be resized when an image is stretched. This technique is used to implement buttons and other resizable image-based interface elements. When a button with end caps is resized, the resizing occurs only in the middle of the button, in the region between the end caps. The end caps themselves keep their original size and appearance. This property specifies the size of the top end cap. The middle (stretchable) portion is assumed to be 1 pixel wide. The bottom end cap is therefore computed by adding the size of the top end cap and the middle portion together and then subtracting that value from the height of the image
	 * @param {Float} value New value to set.
	 * @alias Titanium_UI_View.setBackgroundTopCap
	 */
	this.setBackgroundTopCap = function(value) { this.backgroundTopCap = value; }
	/**
	 * the border color of the view
	 * @alias Titanium_UI_View.borderColor
	 * @property {String}
	 */
	this.borderColor = ''
	/**
	 * Get the the border color of the view
	 * @alias Titanium_UI_View.getBorderColor
	 * @return {String}
	 */
	this.getBorderColor = function() { return this.borderColor; }
	/**
	 * Set the the border color of the view
	 * @param {String} value New value to set.
	 * @alias Titanium_UI_View.setBorderColor
	 */
	this.setBorderColor = function(value) { this.borderColor = value; }
	/**
	 * the border radius of the view
	 * @alias Titanium_UI_View.borderRadius
	 * @property {Float}
	 */
	this.borderRadius = 0.0
	/**
	 * Get the the border radius of the view
	 * @alias Titanium_UI_View.getBorderRadius
	 * @return {Float}
	 */
	this.getBorderRadius = function() { return this.borderRadius; }
	/**
	 * Set the the border radius of the view
	 * @param {Float} value New value to set.
	 * @alias Titanium_UI_View.setBorderRadius
	 */
	this.setBorderRadius = function(value) { this.borderRadius = value; }
	/**
	 * the border width of the view
	 * @alias Titanium_UI_View.borderWidth
	 * @property {Float}
	 */
	this.borderWidth = 0.0
	/**
	 * Get the the border width of the view
	 * @alias Titanium_UI_View.getBorderWidth
	 * @return {Float}
	 */
	this.getBorderWidth = function() { return this.borderWidth; }
	/**
	 * Set the the border width of the view
	 * @param {Float} value New value to set.
	 * @alias Titanium_UI_View.setBorderWidth
	 */
	this.setBorderWidth = function(value) { this.borderWidth = value; }
	/**
	 * property for the view bottom position. This position is relative to the view's parent. Can be either a float value or a dimension string ie 'auto' (default), '50%' (iPhone only).
	 * @alias Titanium_UI_View.bottom
	 * @property {Float,String}
	 */
	this.bottom = 0.0
	/**
	 * Get the property for the view bottom position. This position is relative to the view's parent. Can be either a float value or a dimension string ie 'auto' (default), '50%' (iPhone only).
	 * @alias Titanium_UI_View.getBottom
	 * @return {Float,String}
	 */
	this.getBottom = function() { return this.bottom; }
	/**
	 * Set the property for the view bottom position. This position is relative to the view's parent. Can be either a float value or a dimension string ie 'auto' (default), '50%' (iPhone only).
	 * @param {Float,String} value New value to set.
	 * @alias Titanium_UI_View.setBottom
	 */
	this.setBottom = function(value) { this.bottom = value; }
	/**
	 * a dictionary with properties x and y to indicate the center of the views position relative to the parent view
	 * @alias Titanium_UI_View.center
	 * @property {Object}
	 */
	this.center = {}
	/**
	 * Get the a dictionary with properties x and y to indicate the center of the views position relative to the parent view
	 * @alias Titanium_UI_View.getCenter
	 * @return {Object}
	 */
	this.getCenter = function() { return this.center; }
	/**
	 * Set the a dictionary with properties x and y to indicate the center of the views position relative to the parent view
	 * @param {Object} value New value to set.
	 * @alias Titanium_UI_View.setCenter
	 */
	this.setCenter = function(value) { this.center = value; }
	/**
	 * Set true if you want a view to be focusable when navigating with the trackball or D-Pad. Default: false. (Android Only)
	 * @alias Titanium_UI_View.focusable
	 * @property {Boolean}
	 */
	this.focusable = false
	/**
	 * Get the Set true if you want a view to be focusable when navigating with the trackball or D-Pad. Default: false. (Android Only)
	 * @alias Titanium_UI_View.getFocusable
	 * @return {Boolean}
	 */
	this.getFocusable = function() { return this.focusable; }
	/**
	 * Set the Set true if you want a view to be focusable when navigating with the trackball or D-Pad. Default: false. (Android Only)
	 * @param {Boolean} value New value to set.
	 * @alias Titanium_UI_View.setFocusable
	 */
	this.setFocusable = function(value) { this.focusable = value; }
	/**
	 * the font family
	 * @alias Titanium_UI_View.font-family
	 * @property {String}
	 */
	this.font-family = ''
	/**
	 * Get the the font family
	 * @alias Titanium_UI_View.getFont-family
	 * @return {String}
	 */
	this.getFont-family = function() { return this.font-family; }
	/**
	 * Set the the font family
	 * @param {String} value New value to set.
	 * @alias Titanium_UI_View.setFont-family
	 */
	this.setFont-family = function(value) { this.font-family = value; }
	/**
	 * the font size
	 * @alias Titanium_UI_View.font-size
	 * @property {String}
	 */
	this.font-size = ''
	/**
	 * Get the the font size
	 * @alias Titanium_UI_View.getFont-size
	 * @return {String}
	 */
	this.getFont-size = function() { return this.font-size; }
	/**
	 * Set the the font size
	 * @param {String} value New value to set.
	 * @alias Titanium_UI_View.setFont-size
	 */
	this.setFont-size = function(value) { this.font-size = value; }
	/**
	 * the font style, either normal or italics
	 * @alias Titanium_UI_View.font-style
	 * @property {String}
	 */
	this.font-style = ''
	/**
	 * Get the the font style, either normal or italics
	 * @alias Titanium_UI_View.getFont-style
	 * @return {String}
	 */
	this.getFont-style = function() { return this.font-style; }
	/**
	 * Set the the font style, either normal or italics
	 * @param {String} value New value to set.
	 * @alias Titanium_UI_View.setFont-style
	 */
	this.setFont-style = function(value) { this.font-style = value; }
	/**
	 * the font weight, either normal or bold
	 * @alias Titanium_UI_View.font-weight
	 * @property {String}
	 */
	this.font-weight = ''
	/**
	 * Get the the font weight, either normal or bold
	 * @alias Titanium_UI_View.getFont-weight
	 * @return {String}
	 */
	this.getFont-weight = function() { return this.font-weight; }
	/**
	 * Set the the font weight, either normal or bold
	 * @param {String} value New value to set.
	 * @alias Titanium_UI_View.setFont-weight
	 */
	this.setFont-weight = function(value) { this.font-weight = value; }
	/**
	 * property for the view height. Can be either a float value or a dimension string ie 'auto' (default), '50%' (iPhone only).
	 * @alias Titanium_UI_View.height
	 * @property {Float,String}
	 */
	this.height = 0.0
	/**
	 * Get the property for the view height. Can be either a float value or a dimension string ie 'auto' (default), '50%' (iPhone only).
	 * @alias Titanium_UI_View.getHeight
	 * @return {Float,String}
	 */
	this.getHeight = function() { return this.height; }
	/**
	 * Set the property for the view height. Can be either a float value or a dimension string ie 'auto' (default), '50%' (iPhone only).
	 * @param {Float,String} value New value to set.
	 * @alias Titanium_UI_View.setHeight
	 */
	this.setHeight = function(value) { this.height = value; }
	/**
	 * property for the view left position. This position is relative to the view's parent. Can be either a float value or a dimension string ie 'auto' (default), '50%' (iPhone only).
	 * @alias Titanium_UI_View.left
	 * @property {Float,String}
	 */
	this.left = 0.0
	/**
	 * Get the property for the view left position. This position is relative to the view's parent. Can be either a float value or a dimension string ie 'auto' (default), '50%' (iPhone only).
	 * @alias Titanium_UI_View.getLeft
	 * @return {Float,String}
	 */
	this.getLeft = function() { return this.left; }
	/**
	 * Set the property for the view left position. This position is relative to the view's parent. Can be either a float value or a dimension string ie 'auto' (default), '50%' (iPhone only).
	 * @param {Float,String} value New value to set.
	 * @alias Titanium_UI_View.setLeft
	 */
	this.setLeft = function(value) { this.left = value; }
	/**
	 * the opacity from 0.0-1.0
	 * @alias Titanium_UI_View.opacity
	 * @property {Float}
	 */
	this.opacity = 0.0
	/**
	 * Get the the opacity from 0.0-1.0
	 * @alias Titanium_UI_View.getOpacity
	 * @return {Float}
	 */
	this.getOpacity = function() { return this.opacity; }
	/**
	 * Set the the opacity from 0.0-1.0
	 * @param {Float} value New value to set.
	 * @alias Titanium_UI_View.setOpacity
	 */
	this.setOpacity = function(value) { this.opacity = value; }
	/**
	 * property for the view right position. This position is relative to the view's parent. Can be either a float value or a dimension string ie 'auto' (default), '50%' (iPhone only).
	 * @alias Titanium_UI_View.right
	 * @property {Float,String}
	 */
	this.right = 0.0
	/**
	 * Get the property for the view right position. This position is relative to the view's parent. Can be either a float value or a dimension string ie 'auto' (default), '50%' (iPhone only).
	 * @alias Titanium_UI_View.getRight
	 * @return {Float,String}
	 */
	this.getRight = function() { return this.right; }
	/**
	 * Set the property for the view right position. This position is relative to the view's parent. Can be either a float value or a dimension string ie 'auto' (default), '50%' (iPhone only).
	 * @param {Float,String} value New value to set.
	 * @alias Titanium_UI_View.setRight
	 */
	this.setRight = function(value) { this.right = value; }
	/**
	 * the size of the view as a dictionary of width and height properties
	 * @alias Titanium_UI_View.size
	 * @property {Object}
	 */
	this.size = {}
	/**
	 * Get the the size of the view as a dictionary of width and height properties
	 * @alias Titanium_UI_View.getSize
	 * @return {Object}
	 */
	this.getSize = function() { return this.size; }
	/**
	 * Set the the size of the view as a dictionary of width and height properties
	 * @param {Object} value New value to set.
	 * @alias Titanium_UI_View.setSize
	 */
	this.setSize = function(value) { this.size = value; }
	/**
	 * One of Titanium.UI.Android.SOFT_KEYBOARD_DEFAULT_ON_FOCUS, Titanium.UI.Android.SOFT_KEYBOARD_HIDE_ON_FOCUS, or Titanium.UI.Android.SOFT_KEYBOARD_SHOW_ON_FOCUS. (Android only)
	 * @alias Titanium_UI_View.softKeyboardOnFocus
	 * @property {Integer}
	 */
	this.softKeyboardOnFocus = 0
	/**
	 * Get the One of Titanium.UI.Android.SOFT_KEYBOARD_DEFAULT_ON_FOCUS, Titanium.UI.Android.SOFT_KEYBOARD_HIDE_ON_FOCUS, or Titanium.UI.Android.SOFT_KEYBOARD_SHOW_ON_FOCUS. (Android only)
	 * @alias Titanium_UI_View.getSoftKeyboardOnFocus
	 * @return {Integer}
	 */
	this.getSoftKeyboardOnFocus = function() { return this.softKeyboardOnFocus; }
	/**
	 * Set the One of Titanium.UI.Android.SOFT_KEYBOARD_DEFAULT_ON_FOCUS, Titanium.UI.Android.SOFT_KEYBOARD_HIDE_ON_FOCUS, or Titanium.UI.Android.SOFT_KEYBOARD_SHOW_ON_FOCUS. (Android only)
	 * @param {Integer} value New value to set.
	 * @alias Titanium_UI_View.setSoftKeyboardOnFocus
	 */
	this.setSoftKeyboardOnFocus = function(value) { this.softKeyboardOnFocus = value; }
	/**
	 * property for the view top position. This position is relative to the view's parent. Can be either a float value or a dimension string ie 'auto' (default), '50%' (iPhone only).
	 * @alias Titanium_UI_View.top
	 * @property {Float,String}
	 */
	this.top = 0.0
	/**
	 * Get the property for the view top position. This position is relative to the view's parent. Can be either a float value or a dimension string ie 'auto' (default), '50%' (iPhone only).
	 * @alias Titanium_UI_View.getTop
	 * @return {Float,String}
	 */
	this.getTop = function() { return this.top; }
	/**
	 * Set the property for the view top position. This position is relative to the view's parent. Can be either a float value or a dimension string ie 'auto' (default), '50%' (iPhone only).
	 * @param {Float,String} value New value to set.
	 * @alias Titanium_UI_View.setTop
	 */
	this.setTop = function(value) { this.top = value; }
	/**
	 * a boolean indicating if the view should receive touch events (true, default) or forward them to peers (false)
	 * @alias Titanium_UI_View.touchEnabled
	 * @property {Boolean}
	 */
	this.touchEnabled = false
	/**
	 * Get the a boolean indicating if the view should receive touch events (true, default) or forward them to peers (false)
	 * @alias Titanium_UI_View.getTouchEnabled
	 * @return {Boolean}
	 */
	this.getTouchEnabled = function() { return this.touchEnabled; }
	/**
	 * Set the a boolean indicating if the view should receive touch events (true, default) or forward them to peers (false)
	 * @param {Boolean} value New value to set.
	 * @alias Titanium_UI_View.setTouchEnabled
	 */
	this.setTouchEnabled = function(value) { this.touchEnabled = value; }
	/**
	 * the transformation matrix to apply to the view
	 * @alias Titanium_UI_View.transform
	 * @property {Object}
	 */
	this.transform = {}
	/**
	 * Get the the transformation matrix to apply to the view
	 * @alias Titanium_UI_View.getTransform
	 * @return {Object}
	 */
	this.getTransform = function() { return this.transform; }
	/**
	 * Set the the transformation matrix to apply to the view
	 * @param {Object} value New value to set.
	 * @alias Titanium_UI_View.setTransform
	 */
	this.setTransform = function(value) { this.transform = value; }
	/**
	 * a boolean of the visibility of the view
	 * @alias Titanium_UI_View.visible
	 * @property {Boolean}
	 */
	this.visible = false
	/**
	 * Get the a boolean of the visibility of the view
	 * @alias Titanium_UI_View.getVisible
	 * @return {Boolean}
	 */
	this.getVisible = function() { return this.visible; }
	/**
	 * Set the a boolean of the visibility of the view
	 * @param {Boolean} value New value to set.
	 * @alias Titanium_UI_View.setVisible
	 */
	this.setVisible = function(value) { this.visible = value; }
	/**
	 * property for the view width. Can be either a float value or a dimension string ie 'auto' (default), '50%' (iPhone only).
	 * @alias Titanium_UI_View.width
	 * @property {Float,String}
	 */
	this.width = 0.0
	/**
	 * Get the property for the view width. Can be either a float value or a dimension string ie 'auto' (default), '50%' (iPhone only).
	 * @alias Titanium_UI_View.getWidth
	 * @return {Float,String}
	 */
	this.getWidth = function() { return this.width; }
	/**
	 * Set the property for the view width. Can be either a float value or a dimension string ie 'auto' (default), '50%' (iPhone only).
	 * @param {Float,String} value New value to set.
	 * @alias Titanium_UI_View.setWidth
	 */
	this.setWidth = function(value) { this.width = value; }
	/**
	 * the z index position relative to other sibling views
	 * @alias Titanium_UI_View.zIndex
	 * @property {Integer}
	 */
	this.zIndex = 0
	/**
	 * Get the the z index position relative to other sibling views
	 * @alias Titanium_UI_View.getZIndex
	 * @return {Integer}
	 */
	this.getZIndex = function() { return this.zIndex; }
	/**
	 * Set the the z index position relative to other sibling views
	 * @param {Integer} value New value to set.
	 * @alias Titanium_UI_View.setZIndex
	 */
	this.setZIndex = function(value) { this.zIndex = value; }
	/**
	 * add a child to the view hierarchy
	 * @param {Object} view the view to add to this views hiearchy
	 * @alias Titanium_UI_View.add
	 */
	this.add = function add(view) { }
	/**
	 * add an event listener for the instance to receive view triggered events
	 * @param {String} name name of the event
	 * @param {Function} callback callback function to invoke when the event is fired
	 * @alias Titanium_UI_View.addEventListener
	 */
	this.addEventListener = function addEventListener(name,callback) { }
	/**
	 * animate the view
	 * @param {Object} obj either a dictionary of animation properties or an Animation object
	 * @param {Function} callback function to be invoked upon completion of the animation
	 * @alias Titanium_UI_View.animate
	 */
	this.animate = function animate(obj,callback) { }
	/**
	 * fire a synthesized event to the views listener
	 * @param {String} name name of the event
	 * @param {Object} event event object
	 * @alias Titanium_UI_View.fireEvent
	 */
	this.fireEvent = function fireEvent(name,event) { }
	/**
	 * hide the view
	 * @alias Titanium_UI_View.hide
	 */
	this.hide = function hide() { }
	/**
	 * remove a previously add view from the view hiearchy
	 * @param {Object} view the view to remove from this views hiearchy
	 * @alias Titanium_UI_View.remove
	 */
	this.remove = function remove(view) { }
	/**
	 * remove a previously added event listener
	 * @param {String} name name of the event
	 * @param {Function} callback callback function passed in addEventListener
	 * @alias Titanium_UI_View.removeEventListener
	 */
	this.removeEventListener = function removeEventListener(name,callback) { }
	/**
	 * make the view visible
	 * @alias Titanium_UI_View.show
	 */
	this.show = function show() { }
	/**
	 * return a Blob image of the rendered view
	 * @param {Function} f function to be invoked upon completion. if non-null, this method will be performed asynchronously. if null, it will be performed immediately
	 * @alias Titanium_UI_View.toImage
	 * @return {Object}
	 */
	this.toImage = function toImage(f) { return {}; }
};

/**
 * The Web View allows you to open an HTML5 based view which can load either local or remote content. The content can be any valid web content such as HTML, PDF, SVG or other WebKit supported content types. The Web View is created by the method Titanium.UI.createWebView.
 * @since 0.8
 */
function Titanium_UI_WebView() {
	/**
	 * a dictionary with properties x and y to indicate the anchor point value. anchor specifies the position by which animation should occur. center is 0.5, 0.5
	 * @alias Titanium_UI_WebView.anchorPoint
	 * @property {Object}
	 */
	this.anchorPoint = {}
	/**
	 * Get the a dictionary with properties x and y to indicate the anchor point value. anchor specifies the position by which animation should occur. center is 0.5, 0.5
	 * @alias Titanium_UI_WebView.getAnchorPoint
	 * @return {Object}
	 */
	this.getAnchorPoint = function() { return this.anchorPoint; }
	/**
	 * Set the a dictionary with properties x and y to indicate the anchor point value. anchor specifies the position by which animation should occur. center is 0.5, 0.5
	 * @param {Object} value New value to set.
	 * @alias Titanium_UI_WebView.setAnchorPoint
	 */
	this.setAnchorPoint = function(value) { this.anchorPoint = value; }
	/**
	 * read-only object with x and y properties of where the view is during animation
	 * @alias Titanium_UI_WebView.animatedCenterPoint
	 * @property {Object}
	 */
	this.animatedCenterPoint = {}
	/**
	 * Get the read-only object with x and y properties of where the view is during animation
	 * @alias Titanium_UI_WebView.getAnimatedCenterPoint
	 * @return {Object}
	 */
	this.getAnimatedCenterPoint = function() { return this.animatedCenterPoint; }
	/**
	 * Set the read-only object with x and y properties of where the view is during animation
	 * @param {Object} value New value to set.
	 * @alias Titanium_UI_WebView.setAnimatedCenterPoint
	 */
	this.setAnimatedCenterPoint = function(value) { this.animatedCenterPoint = value; }
	/**
	 * the background color for the webview
	 * @alias Titanium_UI_WebView.backgroundColor
	 * @property {String}
	 */
	this.backgroundColor = ''
	/**
	 * Get the the background color for the webview
	 * @alias Titanium_UI_WebView.getBackgroundColor
	 * @return {String}
	 */
	this.getBackgroundColor = function() { return this.backgroundColor; }
	/**
	 * Set the the background color for the webview
	 * @param {String} value New value to set.
	 * @alias Titanium_UI_WebView.setBackgroundColor
	 */
	this.setBackgroundColor = function(value) { this.backgroundColor = value; }
	/**
	 * the disabled background color of the view. (Android)
	 * @alias Titanium_UI_WebView.backgroundDisabledColor
	 * @property {String}
	 */
	this.backgroundDisabledColor = ''
	/**
	 * Get the the disabled background color of the view. (Android)
	 * @alias Titanium_UI_WebView.getBackgroundDisabledColor
	 * @return {String}
	 */
	this.getBackgroundDisabledColor = function() { return this.backgroundDisabledColor; }
	/**
	 * Set the the disabled background color of the view. (Android)
	 * @param {String} value New value to set.
	 * @alias Titanium_UI_WebView.setBackgroundDisabledColor
	 */
	this.setBackgroundDisabledColor = function(value) { this.backgroundDisabledColor = value; }
	/**
	 * the disabled background image url of the view. (Android)
	 * @alias Titanium_UI_WebView.backgroundDisabledImage
	 * @property {String}
	 */
	this.backgroundDisabledImage = ''
	/**
	 * Get the the disabled background image url of the view. (Android)
	 * @alias Titanium_UI_WebView.getBackgroundDisabledImage
	 * @return {String}
	 */
	this.getBackgroundDisabledImage = function() { return this.backgroundDisabledImage; }
	/**
	 * Set the the disabled background image url of the view. (Android)
	 * @param {String} value New value to set.
	 * @alias Titanium_UI_WebView.setBackgroundDisabledImage
	 */
	this.setBackgroundDisabledImage = function(value) { this.backgroundDisabledImage = value; }
	/**
	 * the focused background color of the view. focusable must be true for normal views. (Android)
	 * @alias Titanium_UI_WebView.backgroundFocusedColor
	 * @property {String}
	 */
	this.backgroundFocusedColor = ''
	/**
	 * Get the the focused background color of the view. focusable must be true for normal views. (Android)
	 * @alias Titanium_UI_WebView.getBackgroundFocusedColor
	 * @return {String}
	 */
	this.getBackgroundFocusedColor = function() { return this.backgroundFocusedColor; }
	/**
	 * Set the the focused background color of the view. focusable must be true for normal views. (Android)
	 * @param {String} value New value to set.
	 * @alias Titanium_UI_WebView.setBackgroundFocusedColor
	 */
	this.setBackgroundFocusedColor = function(value) { this.backgroundFocusedColor = value; }
	/**
	 * the focused background image url of the view. focusable must be true for normal views. (Android)
	 * @alias Titanium_UI_WebView.backgroundFocusedImage
	 * @property {String}
	 */
	this.backgroundFocusedImage = ''
	/**
	 * Get the the focused background image url of the view. focusable must be true for normal views. (Android)
	 * @alias Titanium_UI_WebView.getBackgroundFocusedImage
	 * @return {String}
	 */
	this.getBackgroundFocusedImage = function() { return this.backgroundFocusedImage; }
	/**
	 * Set the the focused background image url of the view. focusable must be true for normal views. (Android)
	 * @param {String} value New value to set.
	 * @alias Titanium_UI_WebView.setBackgroundFocusedImage
	 */
	this.setBackgroundFocusedImage = function(value) { this.backgroundFocusedImage = value; }
	/**
	 * a background gradient for the view with the properties: type,startPoint,endPoint,startRadius,endRadius,backfillStart,backfillEnd,colors.
	 * @alias Titanium_UI_WebView.backgroundGradient
	 * @property {Object}
	 */
	this.backgroundGradient = {}
	/**
	 * Get the a background gradient for the view with the properties: type,startPoint,endPoint,startRadius,endRadius,backfillStart,backfillEnd,colors.
	 * @alias Titanium_UI_WebView.getBackgroundGradient
	 * @return {Object}
	 */
	this.getBackgroundGradient = function() { return this.backgroundGradient; }
	/**
	 * Set the a background gradient for the view with the properties: type,startPoint,endPoint,startRadius,endRadius,backfillStart,backfillEnd,colors.
	 * @param {Object} value New value to set.
	 * @alias Titanium_UI_WebView.setBackgroundGradient
	 */
	this.setBackgroundGradient = function(value) { this.backgroundGradient = value; }
	/**
	 * the background image url of the view
	 * @alias Titanium_UI_WebView.backgroundImage
	 * @property {String}
	 */
	this.backgroundImage = ''
	/**
	 * Get the the background image url of the view
	 * @alias Titanium_UI_WebView.getBackgroundImage
	 * @return {String}
	 */
	this.getBackgroundImage = function() { return this.backgroundImage; }
	/**
	 * Set the the background image url of the view
	 * @param {String} value New value to set.
	 * @alias Titanium_UI_WebView.setBackgroundImage
	 */
	this.setBackgroundImage = function(value) { this.backgroundImage = value; }
	/**
	 * End caps specify the portion of an image that should not be resized when an image is stretched. This technique is used to implement buttons and other resizable image-based interface elements. When a button with end caps is resized, the resizing occurs only in the middle of the button, in the region between the end caps. The end caps themselves keep their original size and appearance. This property specifies the size of the left end cap. The middle (stretchable) portion is assumed to be 1 pixel wide. The right end cap is therefore computed by adding the size of the left end cap and the middle portion together and then subtracting that value from the width of the image
	 * @alias Titanium_UI_WebView.backgroundLeftCap
	 * @property {Float}
	 */
	this.backgroundLeftCap = 0.0
	/**
	 * Get the End caps specify the portion of an image that should not be resized when an image is stretched. This technique is used to implement buttons and other resizable image-based interface elements. When a button with end caps is resized, the resizing occurs only in the middle of the button, in the region between the end caps. The end caps themselves keep their original size and appearance. This property specifies the size of the left end cap. The middle (stretchable) portion is assumed to be 1 pixel wide. The right end cap is therefore computed by adding the size of the left end cap and the middle portion together and then subtracting that value from the width of the image
	 * @alias Titanium_UI_WebView.getBackgroundLeftCap
	 * @return {Float}
	 */
	this.getBackgroundLeftCap = function() { return this.backgroundLeftCap; }
	/**
	 * Set the End caps specify the portion of an image that should not be resized when an image is stretched. This technique is used to implement buttons and other resizable image-based interface elements. When a button with end caps is resized, the resizing occurs only in the middle of the button, in the region between the end caps. The end caps themselves keep their original size and appearance. This property specifies the size of the left end cap. The middle (stretchable) portion is assumed to be 1 pixel wide. The right end cap is therefore computed by adding the size of the left end cap and the middle portion together and then subtracting that value from the width of the image
	 * @param {Float} value New value to set.
	 * @alias Titanium_UI_WebView.setBackgroundLeftCap
	 */
	this.setBackgroundLeftCap = function(value) { this.backgroundLeftCap = value; }
	/**
	 * the selected background color of the view. focusable must be true for normal views. (Android)
	 * @alias Titanium_UI_WebView.backgroundSelectedColor
	 * @property {String}
	 */
	this.backgroundSelectedColor = ''
	/**
	 * Get the the selected background color of the view. focusable must be true for normal views. (Android)
	 * @alias Titanium_UI_WebView.getBackgroundSelectedColor
	 * @return {String}
	 */
	this.getBackgroundSelectedColor = function() { return this.backgroundSelectedColor; }
	/**
	 * Set the the selected background color of the view. focusable must be true for normal views. (Android)
	 * @param {String} value New value to set.
	 * @alias Titanium_UI_WebView.setBackgroundSelectedColor
	 */
	this.setBackgroundSelectedColor = function(value) { this.backgroundSelectedColor = value; }
	/**
	 * the selected background image url of the view. focusable must be true for normal views. (Android)
	 * @alias Titanium_UI_WebView.backgroundSelectedImage
	 * @property {String}
	 */
	this.backgroundSelectedImage = ''
	/**
	 * Get the the selected background image url of the view. focusable must be true for normal views. (Android)
	 * @alias Titanium_UI_WebView.getBackgroundSelectedImage
	 * @return {String}
	 */
	this.getBackgroundSelectedImage = function() { return this.backgroundSelectedImage; }
	/**
	 * Set the the selected background image url of the view. focusable must be true for normal views. (Android)
	 * @param {String} value New value to set.
	 * @alias Titanium_UI_WebView.setBackgroundSelectedImage
	 */
	this.setBackgroundSelectedImage = function(value) { this.backgroundSelectedImage = value; }
	/**
	 * End caps specify the portion of an image that should not be resized when an image is stretched. This technique is used to implement buttons and other resizable image-based interface elements. When a button with end caps is resized, the resizing occurs only in the middle of the button, in the region between the end caps. The end caps themselves keep their original size and appearance. This property specifies the size of the top end cap. The middle (stretchable) portion is assumed to be 1 pixel wide. The bottom end cap is therefore computed by adding the size of the top end cap and the middle portion together and then subtracting that value from the height of the image
	 * @alias Titanium_UI_WebView.backgroundTopCap
	 * @property {Float}
	 */
	this.backgroundTopCap = 0.0
	/**
	 * Get the End caps specify the portion of an image that should not be resized when an image is stretched. This technique is used to implement buttons and other resizable image-based interface elements. When a button with end caps is resized, the resizing occurs only in the middle of the button, in the region between the end caps. The end caps themselves keep their original size and appearance. This property specifies the size of the top end cap. The middle (stretchable) portion is assumed to be 1 pixel wide. The bottom end cap is therefore computed by adding the size of the top end cap and the middle portion together and then subtracting that value from the height of the image
	 * @alias Titanium_UI_WebView.getBackgroundTopCap
	 * @return {Float}
	 */
	this.getBackgroundTopCap = function() { return this.backgroundTopCap; }
	/**
	 * Set the End caps specify the portion of an image that should not be resized when an image is stretched. This technique is used to implement buttons and other resizable image-based interface elements. When a button with end caps is resized, the resizing occurs only in the middle of the button, in the region between the end caps. The end caps themselves keep their original size and appearance. This property specifies the size of the top end cap. The middle (stretchable) portion is assumed to be 1 pixel wide. The bottom end cap is therefore computed by adding the size of the top end cap and the middle portion together and then subtracting that value from the height of the image
	 * @param {Float} value New value to set.
	 * @alias Titanium_UI_WebView.setBackgroundTopCap
	 */
	this.setBackgroundTopCap = function(value) { this.backgroundTopCap = value; }
	/**
	 * the border color of the view
	 * @alias Titanium_UI_WebView.borderColor
	 * @property {String}
	 */
	this.borderColor = ''
	/**
	 * Get the the border color of the view
	 * @alias Titanium_UI_WebView.getBorderColor
	 * @return {String}
	 */
	this.getBorderColor = function() { return this.borderColor; }
	/**
	 * Set the the border color of the view
	 * @param {String} value New value to set.
	 * @alias Titanium_UI_WebView.setBorderColor
	 */
	this.setBorderColor = function(value) { this.borderColor = value; }
	/**
	 * the border radius of the view
	 * @alias Titanium_UI_WebView.borderRadius
	 * @property {Float}
	 */
	this.borderRadius = 0.0
	/**
	 * Get the the border radius of the view
	 * @alias Titanium_UI_WebView.getBorderRadius
	 * @return {Float}
	 */
	this.getBorderRadius = function() { return this.borderRadius; }
	/**
	 * Set the the border radius of the view
	 * @param {Float} value New value to set.
	 * @alias Titanium_UI_WebView.setBorderRadius
	 */
	this.setBorderRadius = function(value) { this.borderRadius = value; }
	/**
	 * the border width of the view
	 * @alias Titanium_UI_WebView.borderWidth
	 * @property {Float}
	 */
	this.borderWidth = 0.0
	/**
	 * Get the the border width of the view
	 * @alias Titanium_UI_WebView.getBorderWidth
	 * @return {Float}
	 */
	this.getBorderWidth = function() { return this.borderWidth; }
	/**
	 * Set the the border width of the view
	 * @param {Float} value New value to set.
	 * @alias Titanium_UI_WebView.setBorderWidth
	 */
	this.setBorderWidth = function(value) { this.borderWidth = value; }
	/**
	 * property for the view bottom position. This position is relative to the view's parent. Can be either a float value or a dimension string ie 'auto' (default), '50%' (iPhone only).
	 * @alias Titanium_UI_WebView.bottom
	 * @property {Float,String}
	 */
	this.bottom = 0.0
	/**
	 * Get the property for the view bottom position. This position is relative to the view's parent. Can be either a float value or a dimension string ie 'auto' (default), '50%' (iPhone only).
	 * @alias Titanium_UI_WebView.getBottom
	 * @return {Float,String}
	 */
	this.getBottom = function() { return this.bottom; }
	/**
	 * Set the property for the view bottom position. This position is relative to the view's parent. Can be either a float value or a dimension string ie 'auto' (default), '50%' (iPhone only).
	 * @param {Float,String} value New value to set.
	 * @alias Titanium_UI_WebView.setBottom
	 */
	this.setBottom = function(value) { this.bottom = value; }
	/**
	 * a dictionary with properties x and y to indicate the center of the views position relative to the parent view
	 * @alias Titanium_UI_WebView.center
	 * @property {Object}
	 */
	this.center = {}
	/**
	 * Get the a dictionary with properties x and y to indicate the center of the views position relative to the parent view
	 * @alias Titanium_UI_WebView.getCenter
	 * @return {Object}
	 */
	this.getCenter = function() { return this.center; }
	/**
	 * Set the a dictionary with properties x and y to indicate the center of the views position relative to the parent view
	 * @param {Object} value New value to set.
	 * @alias Titanium_UI_WebView.setCenter
	 */
	this.setCenter = function(value) { this.center = value; }
	/**
	 * a data blob or file that is used to load the web document
	 * @alias Titanium_UI_WebView.data
	 * @property {Object}
	 */
	this.data = {}
	/**
	 * Get the a data blob or file that is used to load the web document
	 * @alias Titanium_UI_WebView.getData
	 * @return {Object}
	 */
	this.getData = function() { return this.data; }
	/**
	 * Set the a data blob or file that is used to load the web document
	 * @param {Object} value New value to set.
	 * @alias Titanium_UI_WebView.setData
	 */
	this.setData = function(value) { this.data = value; }
	/**
	 * Set true if you want a view to be focusable when navigating with the trackball or D-Pad. Default: false. (Android Only)
	 * @alias Titanium_UI_WebView.focusable
	 * @property {Boolean}
	 */
	this.focusable = false
	/**
	 * Get the Set true if you want a view to be focusable when navigating with the trackball or D-Pad. Default: false. (Android Only)
	 * @alias Titanium_UI_WebView.getFocusable
	 * @return {Boolean}
	 */
	this.getFocusable = function() { return this.focusable; }
	/**
	 * Set the Set true if you want a view to be focusable when navigating with the trackball or D-Pad. Default: false. (Android Only)
	 * @param {Boolean} value New value to set.
	 * @alias Titanium_UI_WebView.setFocusable
	 */
	this.setFocusable = function(value) { this.focusable = value; }
	/**
	 * the font family
	 * @alias Titanium_UI_WebView.font-family
	 * @property {String}
	 */
	this.font-family = ''
	/**
	 * Get the the font family
	 * @alias Titanium_UI_WebView.getFont-family
	 * @return {String}
	 */
	this.getFont-family = function() { return this.font-family; }
	/**
	 * Set the the font family
	 * @param {String} value New value to set.
	 * @alias Titanium_UI_WebView.setFont-family
	 */
	this.setFont-family = function(value) { this.font-family = value; }
	/**
	 * the font size
	 * @alias Titanium_UI_WebView.font-size
	 * @property {String}
	 */
	this.font-size = ''
	/**
	 * Get the the font size
	 * @alias Titanium_UI_WebView.getFont-size
	 * @return {String}
	 */
	this.getFont-size = function() { return this.font-size; }
	/**
	 * Set the the font size
	 * @param {String} value New value to set.
	 * @alias Titanium_UI_WebView.setFont-size
	 */
	this.setFont-size = function(value) { this.font-size = value; }
	/**
	 * the font style, either normal or italics
	 * @alias Titanium_UI_WebView.font-style
	 * @property {String}
	 */
	this.font-style = ''
	/**
	 * Get the the font style, either normal or italics
	 * @alias Titanium_UI_WebView.getFont-style
	 * @return {String}
	 */
	this.getFont-style = function() { return this.font-style; }
	/**
	 * Set the the font style, either normal or italics
	 * @param {String} value New value to set.
	 * @alias Titanium_UI_WebView.setFont-style
	 */
	this.setFont-style = function(value) { this.font-style = value; }
	/**
	 * the font weight, either normal or bold
	 * @alias Titanium_UI_WebView.font-weight
	 * @property {String}
	 */
	this.font-weight = ''
	/**
	 * Get the the font weight, either normal or bold
	 * @alias Titanium_UI_WebView.getFont-weight
	 * @return {String}
	 */
	this.getFont-weight = function() { return this.font-weight; }
	/**
	 * Set the the font weight, either normal or bold
	 * @param {String} value New value to set.
	 * @alias Titanium_UI_WebView.setFont-weight
	 */
	this.setFont-weight = function(value) { this.font-weight = value; }
	/**
	 * property for the view height. Can be either a float value or a dimension string ie 'auto' (default), '50%' (iPhone only).
	 * @alias Titanium_UI_WebView.height
	 * @property {Float,String}
	 */
	this.height = 0.0
	/**
	 * Get the property for the view height. Can be either a float value or a dimension string ie 'auto' (default), '50%' (iPhone only).
	 * @alias Titanium_UI_WebView.getHeight
	 * @return {Float,String}
	 */
	this.getHeight = function() { return this.height; }
	/**
	 * Set the property for the view height. Can be either a float value or a dimension string ie 'auto' (default), '50%' (iPhone only).
	 * @param {Float,String} value New value to set.
	 * @alias Titanium_UI_WebView.setHeight
	 */
	this.setHeight = function(value) { this.height = value; }
	/**
	 * the html content of the web document
	 * @alias Titanium_UI_WebView.html
	 * @property {String}
	 */
	this.html = ''
	/**
	 * Get the the html content of the web document
	 * @alias Titanium_UI_WebView.getHtml
	 * @return {String}
	 */
	this.getHtml = function() { return this.html; }
	/**
	 * Set the the html content of the web document
	 * @param {String} value New value to set.
	 * @alias Titanium_UI_WebView.setHtml
	 */
	this.setHtml = function(value) { this.html = value; }
	/**
	 * property for the view left position. This position is relative to the view's parent. Can be either a float value or a dimension string ie 'auto' (default), '50%' (iPhone only).
	 * @alias Titanium_UI_WebView.left
	 * @property {Float,String}
	 */
	this.left = 0.0
	/**
	 * Get the property for the view left position. This position is relative to the view's parent. Can be either a float value or a dimension string ie 'auto' (default), '50%' (iPhone only).
	 * @alias Titanium_UI_WebView.getLeft
	 * @return {Float,String}
	 */
	this.getLeft = function() { return this.left; }
	/**
	 * Set the property for the view left position. This position is relative to the view's parent. Can be either a float value or a dimension string ie 'auto' (default), '50%' (iPhone only).
	 * @param {Float,String} value New value to set.
	 * @alias Titanium_UI_WebView.setLeft
	 */
	this.setLeft = function(value) { this.left = value; }
	/**
	 * boolean indicating if the webview is loading content
	 * @alias Titanium_UI_WebView.loading
	 * @property {Boolean}
	 */
	this.loading = false
	/**
	 * Get the boolean indicating if the webview is loading content
	 * @alias Titanium_UI_WebView.getLoading
	 * @return {Boolean}
	 */
	this.getLoading = function() { return this.loading; }
	/**
	 * Set the boolean indicating if the webview is loading content
	 * @param {Boolean} value New value to set.
	 * @alias Titanium_UI_WebView.setLoading
	 */
	this.setLoading = function(value) { this.loading = value; }
	/**
	 * the opacity from 0.0-1.0
	 * @alias Titanium_UI_WebView.opacity
	 * @property {Float}
	 */
	this.opacity = 0.0
	/**
	 * Get the the opacity from 0.0-1.0
	 * @alias Titanium_UI_WebView.getOpacity
	 * @return {Float}
	 */
	this.getOpacity = function() { return this.opacity; }
	/**
	 * Set the the opacity from 0.0-1.0
	 * @param {Float} value New value to set.
	 * @alias Titanium_UI_WebView.setOpacity
	 */
	this.setOpacity = function(value) { this.opacity = value; }
	/**
	 * property for the view right position. This position is relative to the view's parent. Can be either a float value or a dimension string ie 'auto' (default), '50%' (iPhone only).
	 * @alias Titanium_UI_WebView.right
	 * @property {Float,String}
	 */
	this.right = 0.0
	/**
	 * Get the property for the view right position. This position is relative to the view's parent. Can be either a float value or a dimension string ie 'auto' (default), '50%' (iPhone only).
	 * @alias Titanium_UI_WebView.getRight
	 * @return {Float,String}
	 */
	this.getRight = function() { return this.right; }
	/**
	 * Set the property for the view right position. This position is relative to the view's parent. Can be either a float value or a dimension string ie 'auto' (default), '50%' (iPhone only).
	 * @param {Float,String} value New value to set.
	 * @alias Titanium_UI_WebView.setRight
	 */
	this.setRight = function(value) { this.right = value; }
	/**
	 * whether the webview should scale it's contents or not
	 * @alias Titanium_UI_WebView.scalesPageToFit
	 * @property {Boolean}
	 */
	this.scalesPageToFit = false
	/**
	 * Get the whether the webview should scale it's contents or not
	 * @alias Titanium_UI_WebView.getScalesPageToFit
	 * @return {Boolean}
	 */
	this.getScalesPageToFit = function() { return this.scalesPageToFit; }
	/**
	 * Set the whether the webview should scale it's contents or not
	 * @param {Boolean} value New value to set.
	 * @alias Titanium_UI_WebView.setScalesPageToFit
	 */
	this.setScalesPageToFit = function(value) { this.scalesPageToFit = value; }
	/**
	 * the size of the view as a dictionary of width and height properties
	 * @alias Titanium_UI_WebView.size
	 * @property {Object}
	 */
	this.size = {}
	/**
	 * Get the the size of the view as a dictionary of width and height properties
	 * @alias Titanium_UI_WebView.getSize
	 * @return {Object}
	 */
	this.getSize = function() { return this.size; }
	/**
	 * Set the the size of the view as a dictionary of width and height properties
	 * @param {Object} value New value to set.
	 * @alias Titanium_UI_WebView.setSize
	 */
	this.setSize = function(value) { this.size = value; }
	/**
	 * One of Titanium.UI.Android.SOFT_KEYBOARD_DEFAULT_ON_FOCUS, Titanium.UI.Android.SOFT_KEYBOARD_HIDE_ON_FOCUS, or Titanium.UI.Android.SOFT_KEYBOARD_SHOW_ON_FOCUS. (Android only)
	 * @alias Titanium_UI_WebView.softKeyboardOnFocus
	 * @property {Integer}
	 */
	this.softKeyboardOnFocus = 0
	/**
	 * Get the One of Titanium.UI.Android.SOFT_KEYBOARD_DEFAULT_ON_FOCUS, Titanium.UI.Android.SOFT_KEYBOARD_HIDE_ON_FOCUS, or Titanium.UI.Android.SOFT_KEYBOARD_SHOW_ON_FOCUS. (Android only)
	 * @alias Titanium_UI_WebView.getSoftKeyboardOnFocus
	 * @return {Integer}
	 */
	this.getSoftKeyboardOnFocus = function() { return this.softKeyboardOnFocus; }
	/**
	 * Set the One of Titanium.UI.Android.SOFT_KEYBOARD_DEFAULT_ON_FOCUS, Titanium.UI.Android.SOFT_KEYBOARD_HIDE_ON_FOCUS, or Titanium.UI.Android.SOFT_KEYBOARD_SHOW_ON_FOCUS. (Android only)
	 * @param {Integer} value New value to set.
	 * @alias Titanium_UI_WebView.setSoftKeyboardOnFocus
	 */
	this.setSoftKeyboardOnFocus = function(value) { this.softKeyboardOnFocus = value; }
	/**
	 * property for the view top position. This position is relative to the view's parent. Can be either a float value or a dimension string ie 'auto' (default), '50%' (iPhone only).
	 * @alias Titanium_UI_WebView.top
	 * @property {Float,String}
	 */
	this.top = 0.0
	/**
	 * Get the property for the view top position. This position is relative to the view's parent. Can be either a float value or a dimension string ie 'auto' (default), '50%' (iPhone only).
	 * @alias Titanium_UI_WebView.getTop
	 * @return {Float,String}
	 */
	this.getTop = function() { return this.top; }
	/**
	 * Set the property for the view top position. This position is relative to the view's parent. Can be either a float value or a dimension string ie 'auto' (default), '50%' (iPhone only).
	 * @param {Float,String} value New value to set.
	 * @alias Titanium_UI_WebView.setTop
	 */
	this.setTop = function(value) { this.top = value; }
	/**
	 * a boolean indicating if the view should receive touch events (true, default) or forward them to peers (false)
	 * @alias Titanium_UI_WebView.touchEnabled
	 * @property {Boolean}
	 */
	this.touchEnabled = false
	/**
	 * Get the a boolean indicating if the view should receive touch events (true, default) or forward them to peers (false)
	 * @alias Titanium_UI_WebView.getTouchEnabled
	 * @return {Boolean}
	 */
	this.getTouchEnabled = function() { return this.touchEnabled; }
	/**
	 * Set the a boolean indicating if the view should receive touch events (true, default) or forward them to peers (false)
	 * @param {Boolean} value New value to set.
	 * @alias Titanium_UI_WebView.setTouchEnabled
	 */
	this.setTouchEnabled = function(value) { this.touchEnabled = value; }
	/**
	 * the transformation matrix to apply to the view
	 * @alias Titanium_UI_WebView.transform
	 * @property {Object}
	 */
	this.transform = {}
	/**
	 * Get the the transformation matrix to apply to the view
	 * @alias Titanium_UI_WebView.getTransform
	 * @return {Object}
	 */
	this.getTransform = function() { return this.transform; }
	/**
	 * Set the the transformation matrix to apply to the view
	 * @param {Object} value New value to set.
	 * @alias Titanium_UI_WebView.setTransform
	 */
	this.setTransform = function(value) { this.transform = value; }
	/**
	 * the url to the web document. this property will change as the content of the webview changes (such as from internal hyperlinks, etc)
	 * @alias Titanium_UI_WebView.url
	 * @property {String}
	 */
	this.url = ''
	/**
	 * Get the the url to the web document. this property will change as the content of the webview changes (such as from internal hyperlinks, etc)
	 * @alias Titanium_UI_WebView.getUrl
	 * @return {String}
	 */
	this.getUrl = function() { return this.url; }
	/**
	 * Set the the url to the web document. this property will change as the content of the webview changes (such as from internal hyperlinks, etc)
	 * @param {String} value New value to set.
	 * @alias Titanium_UI_WebView.setUrl
	 */
	this.setUrl = function(value) { this.url = value; }
	/**
	 * a boolean of the visibility of the view
	 * @alias Titanium_UI_WebView.visible
	 * @property {Boolean}
	 */
	this.visible = false
	/**
	 * Get the a boolean of the visibility of the view
	 * @alias Titanium_UI_WebView.getVisible
	 * @return {Boolean}
	 */
	this.getVisible = function() { return this.visible; }
	/**
	 * Set the a boolean of the visibility of the view
	 * @param {Boolean} value New value to set.
	 * @alias Titanium_UI_WebView.setVisible
	 */
	this.setVisible = function(value) { this.visible = value; }
	/**
	 * property for the view width. Can be either a float value or a dimension string ie 'auto' (default), '50%' (iPhone only).
	 * @alias Titanium_UI_WebView.width
	 * @property {Float,String}
	 */
	this.width = 0.0
	/**
	 * Get the property for the view width. Can be either a float value or a dimension string ie 'auto' (default), '50%' (iPhone only).
	 * @alias Titanium_UI_WebView.getWidth
	 * @return {Float,String}
	 */
	this.getWidth = function() { return this.width; }
	/**
	 * Set the property for the view width. Can be either a float value or a dimension string ie 'auto' (default), '50%' (iPhone only).
	 * @param {Float,String} value New value to set.
	 * @alias Titanium_UI_WebView.setWidth
	 */
	this.setWidth = function(value) { this.width = value; }
	/**
	 * the z index position relative to other sibling views
	 * @alias Titanium_UI_WebView.zIndex
	 * @property {Integer}
	 */
	this.zIndex = 0
	/**
	 * Get the the z index position relative to other sibling views
	 * @alias Titanium_UI_WebView.getZIndex
	 * @return {Integer}
	 */
	this.getZIndex = function() { return this.zIndex; }
	/**
	 * Set the the z index position relative to other sibling views
	 * @param {Integer} value New value to set.
	 * @alias Titanium_UI_WebView.setZIndex
	 */
	this.setZIndex = function(value) { this.zIndex = value; }
	/**
	 * add a child to the view hierarchy
	 * @param {Object} view the view to add to this views hiearchy
	 * @alias Titanium_UI_WebView.add
	 */
	this.add = function add(view) { }
	/**
	 * add an event listener for the instance to receive view triggered events
	 * @param {String} name name of the event
	 * @param {Function} callback callback function to invoke when the event is fired
	 * @alias Titanium_UI_WebView.addEventListener
	 */
	this.addEventListener = function addEventListener(name,callback) { }
	/**
	 * animate the view
	 * @param {Object} obj either a dictionary of animation properties or an Animation object
	 * @param {Function} callback function to be invoked upon completion of the animation
	 * @alias Titanium_UI_WebView.animate
	 */
	this.animate = function animate(obj,callback) { }
	/**
	 * returns true if the webview can go back in history
	 * @alias Titanium_UI_WebView.canGoBack
	 * @return {Boolean}
	 */
	this.canGoBack = function canGoBack() { return false; }
	/**
	 * returns true if the webview can go forward in history
	 * @alias Titanium_UI_WebView.canGoForward
	 * @return {Boolean}
	 */
	this.canGoForward = function canGoForward() { return false; }
	/**
	 * invoke JavaScript inside the context of the webview and optionally, return a result
	 * @param {String} content JavaScript code as a string. The code will be evaluated inside the webview context.
	 * @alias Titanium_UI_WebView.evalJS
	 * @return {String}
	 */
	this.evalJS = function evalJS(content) { return ''; }
	/**
	 * fire a synthesized event to the views listener
	 * @param {String} name name of the event
	 * @param {Object} event event object
	 * @alias Titanium_UI_WebView.fireEvent
	 */
	this.fireEvent = function fireEvent(name,event) { }
	/**
	 * go back one entry in history to the previous page
	 * @alias Titanium_UI_WebView.goBack
	 */
	this.goBack = function goBack() { }
	/**
	 * go forward one entry in history to the page before the current page
	 * @alias Titanium_UI_WebView.goForward
	 */
	this.goForward = function goForward() { }
	/**
	 * hide the view
	 * @alias Titanium_UI_WebView.hide
	 */
	this.hide = function hide() { }
	/**
	 * reload the current webpage
	 * @alias Titanium_UI_WebView.reload
	 */
	this.reload = function reload() { }
	/**
	 * remove a previously add view from the view hiearchy
	 * @param {Object} view the view to remove from this views hiearchy
	 * @alias Titanium_UI_WebView.remove
	 */
	this.remove = function remove(view) { }
	/**
	 * remove a previously added event listener
	 * @param {String} name name of the event
	 * @param {Function} callback callback function passed in addEventListener
	 * @alias Titanium_UI_WebView.removeEventListener
	 */
	this.removeEventListener = function removeEventListener(name,callback) { }
	/**
	 * force the webview to repaint its contents
	 * @alias Titanium_UI_WebView.repaint
	 */
	this.repaint = function repaint() { }
	/**
	 * set the basic authentication for the webview instance to be used on subsequent url requests
	 * @param {String} username the username
	 * @param {String} password the password
	 * @alias Titanium_UI_WebView.setBasicAuthentication
	 */
	this.setBasicAuthentication = function setBasicAuthentication(username,password) { }
	/**
	 * make the view visible
	 * @alias Titanium_UI_WebView.show
	 */
	this.show = function show() { }
	/**
	 * stop loading a currently loading page
	 * @alias Titanium_UI_WebView.stopLoading
	 */
	this.stopLoading = function stopLoading() { }
	/**
	 * return a Blob image of the rendered view
	 * @param {Function} f function to be invoked upon completion. if non-null, this method will be performed asynchronously. if null, it will be performed immediately
	 * @alias Titanium_UI_WebView.toImage
	 * @return {Object}
	 */
	this.toImage = function toImage(f) { return {}; }
};

/**
 * The Window is an empty drawing surface or container. The Window is created by the method Titanium.UI.createWindow. Unlike Views, Windows can be opened and closed and can have special display properties such as fullscreen or modal.
 * @since 0.9
 */
function Titanium_UI_Window() {
	/**
	 * a dictionary with properties x and y to indicate the anchor point value. anchor specifies the position by which animation should occur. center is 0.5, 0.5
	 * @alias Titanium_UI_Window.anchorPoint
	 * @property {Object}
	 */
	this.anchorPoint = {}
	/**
	 * Get the a dictionary with properties x and y to indicate the anchor point value. anchor specifies the position by which animation should occur. center is 0.5, 0.5
	 * @alias Titanium_UI_Window.getAnchorPoint
	 * @return {Object}
	 */
	this.getAnchorPoint = function() { return this.anchorPoint; }
	/**
	 * Set the a dictionary with properties x and y to indicate the anchor point value. anchor specifies the position by which animation should occur. center is 0.5, 0.5
	 * @param {Object} value New value to set.
	 * @alias Titanium_UI_Window.setAnchorPoint
	 */
	this.setAnchorPoint = function(value) { this.anchorPoint = value; }
	/**
	 * read-only object with x and y properties of where the view is during animation
	 * @alias Titanium_UI_Window.animatedCenterPoint
	 * @property {Object}
	 */
	this.animatedCenterPoint = {}
	/**
	 * Get the read-only object with x and y properties of where the view is during animation
	 * @alias Titanium_UI_Window.getAnimatedCenterPoint
	 * @return {Object}
	 */
	this.getAnimatedCenterPoint = function() { return this.animatedCenterPoint; }
	/**
	 * Set the read-only object with x and y properties of where the view is during animation
	 * @param {Object} value New value to set.
	 * @alias Titanium_UI_Window.setAnimatedCenterPoint
	 */
	this.setAnimatedCenterPoint = function(value) { this.animatedCenterPoint = value; }
	/**
	 * title for the back button. only available in iPhone. this is only valid when the window is a child of a tab.
	 * @alias Titanium_UI_Window.backButtonTitle
	 * @property {String}
	 */
	this.backButtonTitle = ''
	/**
	 * Get the title for the back button. only available in iPhone. this is only valid when the window is a child of a tab.
	 * @alias Titanium_UI_Window.getBackButtonTitle
	 * @return {String}
	 */
	this.getBackButtonTitle = function() { return this.backButtonTitle; }
	/**
	 * Set the title for the back button. only available in iPhone. this is only valid when the window is a child of a tab.
	 * @param {String} value New value to set.
	 * @alias Titanium_UI_Window.setBackButtonTitle
	 */
	this.setBackButtonTitle = function(value) { this.backButtonTitle = value; }
	/**
	 * url to an image to show as the back button.  only available in iPhone. this is only valid when the window is a child of a tab.
	 * @alias Titanium_UI_Window.backButtonTitleImage
	 * @property {String}
	 */
	this.backButtonTitleImage = ''
	/**
	 * Get the url to an image to show as the back button.  only available in iPhone. this is only valid when the window is a child of a tab.
	 * @alias Titanium_UI_Window.getBackButtonTitleImage
	 * @return {String}
	 */
	this.getBackButtonTitleImage = function() { return this.backButtonTitleImage; }
	/**
	 * Set the url to an image to show as the back button.  only available in iPhone. this is only valid when the window is a child of a tab.
	 * @param {String} value New value to set.
	 * @alias Titanium_UI_Window.setBackButtonTitleImage
	 */
	this.setBackButtonTitleImage = function(value) { this.backButtonTitleImage = value; }
	/**
	 * the background color of the view
	 * @alias Titanium_UI_Window.backgroundColor
	 * @property {String}
	 */
	this.backgroundColor = ''
	/**
	 * Get the the background color of the view
	 * @alias Titanium_UI_Window.getBackgroundColor
	 * @return {String}
	 */
	this.getBackgroundColor = function() { return this.backgroundColor; }
	/**
	 * Set the the background color of the view
	 * @param {String} value New value to set.
	 * @alias Titanium_UI_Window.setBackgroundColor
	 */
	this.setBackgroundColor = function(value) { this.backgroundColor = value; }
	/**
	 * the disabled background color of the view. (Android)
	 * @alias Titanium_UI_Window.backgroundDisabledColor
	 * @property {String}
	 */
	this.backgroundDisabledColor = ''
	/**
	 * Get the the disabled background color of the view. (Android)
	 * @alias Titanium_UI_Window.getBackgroundDisabledColor
	 * @return {String}
	 */
	this.getBackgroundDisabledColor = function() { return this.backgroundDisabledColor; }
	/**
	 * Set the the disabled background color of the view. (Android)
	 * @param {String} value New value to set.
	 * @alias Titanium_UI_Window.setBackgroundDisabledColor
	 */
	this.setBackgroundDisabledColor = function(value) { this.backgroundDisabledColor = value; }
	/**
	 * the disabled background image url of the view. (Android)
	 * @alias Titanium_UI_Window.backgroundDisabledImage
	 * @property {String}
	 */
	this.backgroundDisabledImage = ''
	/**
	 * Get the the disabled background image url of the view. (Android)
	 * @alias Titanium_UI_Window.getBackgroundDisabledImage
	 * @return {String}
	 */
	this.getBackgroundDisabledImage = function() { return this.backgroundDisabledImage; }
	/**
	 * Set the the disabled background image url of the view. (Android)
	 * @param {String} value New value to set.
	 * @alias Titanium_UI_Window.setBackgroundDisabledImage
	 */
	this.setBackgroundDisabledImage = function(value) { this.backgroundDisabledImage = value; }
	/**
	 * the focused background color of the view. focusable must be true for normal views. (Android)
	 * @alias Titanium_UI_Window.backgroundFocusedColor
	 * @property {String}
	 */
	this.backgroundFocusedColor = ''
	/**
	 * Get the the focused background color of the view. focusable must be true for normal views. (Android)
	 * @alias Titanium_UI_Window.getBackgroundFocusedColor
	 * @return {String}
	 */
	this.getBackgroundFocusedColor = function() { return this.backgroundFocusedColor; }
	/**
	 * Set the the focused background color of the view. focusable must be true for normal views. (Android)
	 * @param {String} value New value to set.
	 * @alias Titanium_UI_Window.setBackgroundFocusedColor
	 */
	this.setBackgroundFocusedColor = function(value) { this.backgroundFocusedColor = value; }
	/**
	 * the focused background image url of the view. focusable must be true for normal views. (Android)
	 * @alias Titanium_UI_Window.backgroundFocusedImage
	 * @property {String}
	 */
	this.backgroundFocusedImage = ''
	/**
	 * Get the the focused background image url of the view. focusable must be true for normal views. (Android)
	 * @alias Titanium_UI_Window.getBackgroundFocusedImage
	 * @return {String}
	 */
	this.getBackgroundFocusedImage = function() { return this.backgroundFocusedImage; }
	/**
	 * Set the the focused background image url of the view. focusable must be true for normal views. (Android)
	 * @param {String} value New value to set.
	 * @alias Titanium_UI_Window.setBackgroundFocusedImage
	 */
	this.setBackgroundFocusedImage = function(value) { this.backgroundFocusedImage = value; }
	/**
	 * a background gradient for the view with the properties: type,startPoint,endPoint,startRadius,endRadius,backfillStart,backfillEnd,colors.
	 * @alias Titanium_UI_Window.backgroundGradient
	 * @property {Object}
	 */
	this.backgroundGradient = {}
	/**
	 * Get the a background gradient for the view with the properties: type,startPoint,endPoint,startRadius,endRadius,backfillStart,backfillEnd,colors.
	 * @alias Titanium_UI_Window.getBackgroundGradient
	 * @return {Object}
	 */
	this.getBackgroundGradient = function() { return this.backgroundGradient; }
	/**
	 * Set the a background gradient for the view with the properties: type,startPoint,endPoint,startRadius,endRadius,backfillStart,backfillEnd,colors.
	 * @param {Object} value New value to set.
	 * @alias Titanium_UI_Window.setBackgroundGradient
	 */
	this.setBackgroundGradient = function(value) { this.backgroundGradient = value; }
	/**
	 * the background image url of the view
	 * @alias Titanium_UI_Window.backgroundImage
	 * @property {String}
	 */
	this.backgroundImage = ''
	/**
	 * Get the the background image url of the view
	 * @alias Titanium_UI_Window.getBackgroundImage
	 * @return {String}
	 */
	this.getBackgroundImage = function() { return this.backgroundImage; }
	/**
	 * Set the the background image url of the view
	 * @param {String} value New value to set.
	 * @alias Titanium_UI_Window.setBackgroundImage
	 */
	this.setBackgroundImage = function(value) { this.backgroundImage = value; }
	/**
	 * End caps specify the portion of an image that should not be resized when an image is stretched. This technique is used to implement buttons and other resizable image-based interface elements. When a button with end caps is resized, the resizing occurs only in the middle of the button, in the region between the end caps. The end caps themselves keep their original size and appearance. This property specifies the size of the left end cap. The middle (stretchable) portion is assumed to be 1 pixel wide. The right end cap is therefore computed by adding the size of the left end cap and the middle portion together and then subtracting that value from the width of the image
	 * @alias Titanium_UI_Window.backgroundLeftCap
	 * @property {Float}
	 */
	this.backgroundLeftCap = 0.0
	/**
	 * Get the End caps specify the portion of an image that should not be resized when an image is stretched. This technique is used to implement buttons and other resizable image-based interface elements. When a button with end caps is resized, the resizing occurs only in the middle of the button, in the region between the end caps. The end caps themselves keep their original size and appearance. This property specifies the size of the left end cap. The middle (stretchable) portion is assumed to be 1 pixel wide. The right end cap is therefore computed by adding the size of the left end cap and the middle portion together and then subtracting that value from the width of the image
	 * @alias Titanium_UI_Window.getBackgroundLeftCap
	 * @return {Float}
	 */
	this.getBackgroundLeftCap = function() { return this.backgroundLeftCap; }
	/**
	 * Set the End caps specify the portion of an image that should not be resized when an image is stretched. This technique is used to implement buttons and other resizable image-based interface elements. When a button with end caps is resized, the resizing occurs only in the middle of the button, in the region between the end caps. The end caps themselves keep their original size and appearance. This property specifies the size of the left end cap. The middle (stretchable) portion is assumed to be 1 pixel wide. The right end cap is therefore computed by adding the size of the left end cap and the middle portion together and then subtracting that value from the width of the image
	 * @param {Float} value New value to set.
	 * @alias Titanium_UI_Window.setBackgroundLeftCap
	 */
	this.setBackgroundLeftCap = function(value) { this.backgroundLeftCap = value; }
	/**
	 * the selected background color of the view. focusable must be true for normal views. (Android)
	 * @alias Titanium_UI_Window.backgroundSelectedColor
	 * @property {String}
	 */
	this.backgroundSelectedColor = ''
	/**
	 * Get the the selected background color of the view. focusable must be true for normal views. (Android)
	 * @alias Titanium_UI_Window.getBackgroundSelectedColor
	 * @return {String}
	 */
	this.getBackgroundSelectedColor = function() { return this.backgroundSelectedColor; }
	/**
	 * Set the the selected background color of the view. focusable must be true for normal views. (Android)
	 * @param {String} value New value to set.
	 * @alias Titanium_UI_Window.setBackgroundSelectedColor
	 */
	this.setBackgroundSelectedColor = function(value) { this.backgroundSelectedColor = value; }
	/**
	 * the selected background image url of the view. focusable must be true for normal views. (Android)
	 * @alias Titanium_UI_Window.backgroundSelectedImage
	 * @property {String}
	 */
	this.backgroundSelectedImage = ''
	/**
	 * Get the the selected background image url of the view. focusable must be true for normal views. (Android)
	 * @alias Titanium_UI_Window.getBackgroundSelectedImage
	 * @return {String}
	 */
	this.getBackgroundSelectedImage = function() { return this.backgroundSelectedImage; }
	/**
	 * Set the the selected background image url of the view. focusable must be true for normal views. (Android)
	 * @param {String} value New value to set.
	 * @alias Titanium_UI_Window.setBackgroundSelectedImage
	 */
	this.setBackgroundSelectedImage = function(value) { this.backgroundSelectedImage = value; }
	/**
	 * End caps specify the portion of an image that should not be resized when an image is stretched. This technique is used to implement buttons and other resizable image-based interface elements. When a button with end caps is resized, the resizing occurs only in the middle of the button, in the region between the end caps. The end caps themselves keep their original size and appearance. This property specifies the size of the top end cap. The middle (stretchable) portion is assumed to be 1 pixel wide. The bottom end cap is therefore computed by adding the size of the top end cap and the middle portion together and then subtracting that value from the height of the image
	 * @alias Titanium_UI_Window.backgroundTopCap
	 * @property {Float}
	 */
	this.backgroundTopCap = 0.0
	/**
	 * Get the End caps specify the portion of an image that should not be resized when an image is stretched. This technique is used to implement buttons and other resizable image-based interface elements. When a button with end caps is resized, the resizing occurs only in the middle of the button, in the region between the end caps. The end caps themselves keep their original size and appearance. This property specifies the size of the top end cap. The middle (stretchable) portion is assumed to be 1 pixel wide. The bottom end cap is therefore computed by adding the size of the top end cap and the middle portion together and then subtracting that value from the height of the image
	 * @alias Titanium_UI_Window.getBackgroundTopCap
	 * @return {Float}
	 */
	this.getBackgroundTopCap = function() { return this.backgroundTopCap; }
	/**
	 * Set the End caps specify the portion of an image that should not be resized when an image is stretched. This technique is used to implement buttons and other resizable image-based interface elements. When a button with end caps is resized, the resizing occurs only in the middle of the button, in the region between the end caps. The end caps themselves keep their original size and appearance. This property specifies the size of the top end cap. The middle (stretchable) portion is assumed to be 1 pixel wide. The bottom end cap is therefore computed by adding the size of the top end cap and the middle portion together and then subtracting that value from the height of the image
	 * @param {Float} value New value to set.
	 * @alias Titanium_UI_Window.setBackgroundTopCap
	 */
	this.setBackgroundTopCap = function(value) { this.backgroundTopCap = value; }
	/**
	 * web named color or hex value for the color of the nav bar. only available in iPhone.
	 * @alias Titanium_UI_Window.barColor
	 * @property {String}
	 */
	this.barColor = ''
	/**
	 * Get the web named color or hex value for the color of the nav bar. only available in iPhone.
	 * @alias Titanium_UI_Window.getBarColor
	 * @return {String}
	 */
	this.getBarColor = function() { return this.barColor; }
	/**
	 * Set the web named color or hex value for the color of the nav bar. only available in iPhone.
	 * @param {String} value New value to set.
	 * @alias Titanium_UI_Window.setBarColor
	 */
	this.setBarColor = function(value) { this.barColor = value; }
	/**
	 * url to a local image to place as the background of the nav bar. only available in iPhone.
	 * @alias Titanium_UI_Window.barImage
	 * @property {String}
	 */
	this.barImage = ''
	/**
	 * Get the url to a local image to place as the background of the nav bar. only available in iPhone.
	 * @alias Titanium_UI_Window.getBarImage
	 * @return {String}
	 */
	this.getBarImage = function() { return this.barImage; }
	/**
	 * Set the url to a local image to place as the background of the nav bar. only available in iPhone.
	 * @param {String} value New value to set.
	 * @alias Titanium_UI_Window.setBarImage
	 */
	this.setBarImage = function(value) { this.barImage = value; }
	/**
	 * the border color of the view
	 * @alias Titanium_UI_Window.borderColor
	 * @property {String}
	 */
	this.borderColor = ''
	/**
	 * Get the the border color of the view
	 * @alias Titanium_UI_Window.getBorderColor
	 * @return {String}
	 */
	this.getBorderColor = function() { return this.borderColor; }
	/**
	 * Set the the border color of the view
	 * @param {String} value New value to set.
	 * @alias Titanium_UI_Window.setBorderColor
	 */
	this.setBorderColor = function(value) { this.borderColor = value; }
	/**
	 * the border radius of the view
	 * @alias Titanium_UI_Window.borderRadius
	 * @property {Float}
	 */
	this.borderRadius = 0.0
	/**
	 * Get the the border radius of the view
	 * @alias Titanium_UI_Window.getBorderRadius
	 * @return {Float}
	 */
	this.getBorderRadius = function() { return this.borderRadius; }
	/**
	 * Set the the border radius of the view
	 * @param {Float} value New value to set.
	 * @alias Titanium_UI_Window.setBorderRadius
	 */
	this.setBorderRadius = function(value) { this.borderRadius = value; }
	/**
	 * the border width of the view
	 * @alias Titanium_UI_Window.borderWidth
	 * @property {Float}
	 */
	this.borderWidth = 0.0
	/**
	 * Get the the border width of the view
	 * @alias Titanium_UI_Window.getBorderWidth
	 * @return {Float}
	 */
	this.getBorderWidth = function() { return this.borderWidth; }
	/**
	 * Set the the border width of the view
	 * @param {Float} value New value to set.
	 * @alias Titanium_UI_Window.setBorderWidth
	 */
	this.setBorderWidth = function(value) { this.borderWidth = value; }
	/**
	 * property for the view bottom position. This position is relative to the view's parent. Can be either a float value or a dimension string ie 'auto' (default), '50%' (iPhone only).
	 * @alias Titanium_UI_Window.bottom
	 * @property {Float,String}
	 */
	this.bottom = 0.0
	/**
	 * Get the property for the view bottom position. This position is relative to the view's parent. Can be either a float value or a dimension string ie 'auto' (default), '50%' (iPhone only).
	 * @alias Titanium_UI_Window.getBottom
	 * @return {Float,String}
	 */
	this.getBottom = function() { return this.bottom; }
	/**
	 * Set the property for the view bottom position. This position is relative to the view's parent. Can be either a float value or a dimension string ie 'auto' (default), '50%' (iPhone only).
	 * @param {Float,String} value New value to set.
	 * @alias Titanium_UI_Window.setBottom
	 */
	this.setBottom = function(value) { this.bottom = value; }
	/**
	 * a dictionary with properties x and y to indicate the center of the views position relative to the parent view
	 * @alias Titanium_UI_Window.center
	 * @property {Object}
	 */
	this.center = {}
	/**
	 * Get the a dictionary with properties x and y to indicate the center of the views position relative to the parent view
	 * @alias Titanium_UI_Window.getCenter
	 * @return {Object}
	 */
	this.getCenter = function() { return this.center; }
	/**
	 * Set the a dictionary with properties x and y to indicate the center of the views position relative to the parent view
	 * @param {Object} value New value to set.
	 * @alias Titanium_UI_Window.setCenter
	 */
	this.setCenter = function(value) { this.center = value; }
	/**
	 * (Android only.) Boolean indicates if the application should exit when the Android back button is pressed while the window is being shown.  You can only set this as a createWindow({...}) option.  Setting it after window creation will no effect.
	 * @alias Titanium_UI_Window.exitOnClose
	 * @property {Boolean}
	 */
	this.exitOnClose = false
	/**
	 * Get the (Android only.) Boolean indicates if the application should exit when the Android back button is pressed while the window is being shown.  You can only set this as a createWindow({...}) option.  Setting it after window creation will no effect.
	 * @alias Titanium_UI_Window.getExitOnClose
	 * @return {Boolean}
	 */
	this.getExitOnClose = function() { return this.exitOnClose; }
	/**
	 * Set the (Android only.) Boolean indicates if the application should exit when the Android back button is pressed while the window is being shown.  You can only set this as a createWindow({...}) option.  Setting it after window creation will no effect.
	 * @param {Boolean} value New value to set.
	 * @alias Titanium_UI_Window.setExitOnClose
	 */
	this.setExitOnClose = function(value) { this.exitOnClose = value; }
	/**
	 * Set true if you want a view to be focusable when navigating with the trackball or D-Pad. Default: false. (Android Only)
	 * @alias Titanium_UI_Window.focusable
	 * @property {Boolean}
	 */
	this.focusable = false
	/**
	 * Get the Set true if you want a view to be focusable when navigating with the trackball or D-Pad. Default: false. (Android Only)
	 * @alias Titanium_UI_Window.getFocusable
	 * @return {Boolean}
	 */
	this.getFocusable = function() { return this.focusable; }
	/**
	 * Set the Set true if you want a view to be focusable when navigating with the trackball or D-Pad. Default: false. (Android Only)
	 * @param {Boolean} value New value to set.
	 * @alias Titanium_UI_Window.setFocusable
	 */
	this.setFocusable = function(value) { this.focusable = value; }
	/**
	 * the font family
	 * @alias Titanium_UI_Window.font-family
	 * @property {String}
	 */
	this.font-family = ''
	/**
	 * Get the the font family
	 * @alias Titanium_UI_Window.getFont-family
	 * @return {String}
	 */
	this.getFont-family = function() { return this.font-family; }
	/**
	 * Set the the font family
	 * @param {String} value New value to set.
	 * @alias Titanium_UI_Window.setFont-family
	 */
	this.setFont-family = function(value) { this.font-family = value; }
	/**
	 * the font size
	 * @alias Titanium_UI_Window.font-size
	 * @property {String}
	 */
	this.font-size = ''
	/**
	 * Get the the font size
	 * @alias Titanium_UI_Window.getFont-size
	 * @return {String}
	 */
	this.getFont-size = function() { return this.font-size; }
	/**
	 * Set the the font size
	 * @param {String} value New value to set.
	 * @alias Titanium_UI_Window.setFont-size
	 */
	this.setFont-size = function(value) { this.font-size = value; }
	/**
	 * the font style, either normal or italics
	 * @alias Titanium_UI_Window.font-style
	 * @property {String}
	 */
	this.font-style = ''
	/**
	 * Get the the font style, either normal or italics
	 * @alias Titanium_UI_Window.getFont-style
	 * @return {String}
	 */
	this.getFont-style = function() { return this.font-style; }
	/**
	 * Set the the font style, either normal or italics
	 * @param {String} value New value to set.
	 * @alias Titanium_UI_Window.setFont-style
	 */
	this.setFont-style = function(value) { this.font-style = value; }
	/**
	 * the font weight, either normal or bold
	 * @alias Titanium_UI_Window.font-weight
	 * @property {String}
	 */
	this.font-weight = ''
	/**
	 * Get the the font weight, either normal or bold
	 * @alias Titanium_UI_Window.getFont-weight
	 * @return {String}
	 */
	this.getFont-weight = function() { return this.font-weight; }
	/**
	 * Set the the font weight, either normal or bold
	 * @param {String} value New value to set.
	 * @alias Titanium_UI_Window.setFont-weight
	 */
	this.setFont-weight = function(value) { this.font-weight = value; }
	/**
	 * boolean indicates if the window is fullscreen (no device chrome)
	 * @alias Titanium_UI_Window.fullscreen
	 * @property {Boolean}
	 */
	this.fullscreen = false
	/**
	 * Get the boolean indicates if the window is fullscreen (no device chrome)
	 * @alias Titanium_UI_Window.getFullscreen
	 * @return {Boolean}
	 */
	this.getFullscreen = function() { return this.fullscreen; }
	/**
	 * Set the boolean indicates if the window is fullscreen (no device chrome)
	 * @param {Boolean} value New value to set.
	 * @alias Titanium_UI_Window.setFullscreen
	 */
	this.setFullscreen = function(value) { this.fullscreen = value; }
	/**
	 * property for the view height. Can be either a float value or a dimension string ie 'auto' (default), '50%' (iPhone only).
	 * @alias Titanium_UI_Window.height
	 * @property {Float,String}
	 */
	this.height = 0.0
	/**
	 * Get the property for the view height. Can be either a float value or a dimension string ie 'auto' (default), '50%' (iPhone only).
	 * @alias Titanium_UI_Window.getHeight
	 * @return {Float,String}
	 */
	this.getHeight = function() { return this.height; }
	/**
	 * Set the property for the view height. Can be either a float value or a dimension string ie 'auto' (default), '50%' (iPhone only).
	 * @param {Float,String} value New value to set.
	 * @alias Titanium_UI_Window.setHeight
	 */
	this.setHeight = function(value) { this.height = value; }
	/**
	 * property for the view left position. This position is relative to the view's parent. Can be either a float value or a dimension string ie 'auto' (default), '50%' (iPhone only).
	 * @alias Titanium_UI_Window.left
	 * @property {Float,String}
	 */
	this.left = 0.0
	/**
	 * Get the property for the view left position. This position is relative to the view's parent. Can be either a float value or a dimension string ie 'auto' (default), '50%' (iPhone only).
	 * @alias Titanium_UI_Window.getLeft
	 * @return {Float,String}
	 */
	this.getLeft = function() { return this.left; }
	/**
	 * Set the property for the view left position. This position is relative to the view's parent. Can be either a float value or a dimension string ie 'auto' (default), '50%' (iPhone only).
	 * @param {Float,String} value New value to set.
	 * @alias Titanium_UI_Window.setLeft
	 */
	this.setLeft = function(value) { this.left = value; }
	/**
	 * view to show in the left nav bar area. only available in iPhone.
	 * @alias Titanium_UI_Window.leftNavButton
	 * @property {Object}
	 */
	this.leftNavButton = {}
	/**
	 * Get the view to show in the left nav bar area. only available in iPhone.
	 * @alias Titanium_UI_Window.getLeftNavButton
	 * @return {Object}
	 */
	this.getLeftNavButton = function() { return this.leftNavButton; }
	/**
	 * Set the view to show in the left nav bar area. only available in iPhone.
	 * @param {Object} value New value to set.
	 * @alias Titanium_UI_Window.setLeftNavButton
	 */
	this.setLeftNavButton = function(value) { this.leftNavButton = value; }
	/**
	 * boolean to indicate if the window should be opened modal in front of other windows
	 * @alias Titanium_UI_Window.modal
	 * @property {Boolean}
	 */
	this.modal = false
	/**
	 * Get the boolean to indicate if the window should be opened modal in front of other windows
	 * @alias Titanium_UI_Window.getModal
	 * @return {Boolean}
	 */
	this.getModal = function() { return this.modal; }
	/**
	 * Set the boolean to indicate if the window should be opened modal in front of other windows
	 * @param {Boolean} value New value to set.
	 * @alias Titanium_UI_Window.setModal
	 */
	this.setModal = function(value) { this.modal = value; }
	/**
	 * for modal windows, hide the nav bar (true) or show the nav bar (false, default).
	 * @alias Titanium_UI_Window.navBarHidden
	 * @property {Boolean}
	 */
	this.navBarHidden = false
	/**
	 * Get the for modal windows, hide the nav bar (true) or show the nav bar (false, default).
	 * @alias Titanium_UI_Window.getNavBarHidden
	 * @return {Boolean}
	 */
	this.getNavBarHidden = function() { return this.navBarHidden; }
	/**
	 * Set the for modal windows, hide the nav bar (true) or show the nav bar (false, default).
	 * @param {Boolean} value New value to set.
	 * @alias Titanium_UI_Window.setNavBarHidden
	 */
	this.setNavBarHidden = function(value) { this.navBarHidden = value; }
	/**
	 * the opacity from 0.0-1.0
	 * @alias Titanium_UI_Window.opacity
	 * @property {Float}
	 */
	this.opacity = 0.0
	/**
	 * Get the the opacity from 0.0-1.0
	 * @alias Titanium_UI_Window.getOpacity
	 * @return {Float}
	 */
	this.getOpacity = function() { return this.opacity; }
	/**
	 * Set the the opacity from 0.0-1.0
	 * @param {Float} value New value to set.
	 * @alias Titanium_UI_Window.setOpacity
	 */
	this.setOpacity = function(value) { this.opacity = value; }
	/**
	 * array of orientation mode constants defined in [Titanium.UI]
	 * @alias Titanium_UI_Window.orientationModes
	 * @property {Array}
	 */
	this.orientationModes = []
	/**
	 * Get the array of orientation mode constants defined in [Titanium.UI]
	 * @alias Titanium_UI_Window.getOrientationModes
	 * @return {Array}
	 */
	this.getOrientationModes = function() { return this.orientationModes; }
	/**
	 * Set the array of orientation mode constants defined in [Titanium.UI]
	 * @param {Array} value New value to set.
	 * @alias Titanium_UI_Window.setOrientationModes
	 */
	this.setOrientationModes = function(value) { this.orientationModes = value; }
	/**
	 * property for the view right position. This position is relative to the view's parent. Can be either a float value or a dimension string ie 'auto' (default), '50%' (iPhone only).
	 * @alias Titanium_UI_Window.right
	 * @property {Float,String}
	 */
	this.right = 0.0
	/**
	 * Get the property for the view right position. This position is relative to the view's parent. Can be either a float value or a dimension string ie 'auto' (default), '50%' (iPhone only).
	 * @alias Titanium_UI_Window.getRight
	 * @return {Float,String}
	 */
	this.getRight = function() { return this.right; }
	/**
	 * Set the property for the view right position. This position is relative to the view's parent. Can be either a float value or a dimension string ie 'auto' (default), '50%' (iPhone only).
	 * @param {Float,String} value New value to set.
	 * @alias Titanium_UI_Window.setRight
	 */
	this.setRight = function(value) { this.right = value; }
	/**
	 * view to show in the right nav bar area. only available in iPhone.
	 * @alias Titanium_UI_Window.rightNavButton
	 * @property {Object}
	 */
	this.rightNavButton = {}
	/**
	 * Get the view to show in the right nav bar area. only available in iPhone.
	 * @alias Titanium_UI_Window.getRightNavButton
	 * @return {Object}
	 */
	this.getRightNavButton = function() { return this.rightNavButton; }
	/**
	 * Set the view to show in the right nav bar area. only available in iPhone.
	 * @param {Object} value New value to set.
	 * @alias Titanium_UI_Window.setRightNavButton
	 */
	this.setRightNavButton = function(value) { this.rightNavButton = value; }
	/**
	 * the size of the view as a dictionary of width and height properties
	 * @alias Titanium_UI_Window.size
	 * @property {Object}
	 */
	this.size = {}
	/**
	 * Get the the size of the view as a dictionary of width and height properties
	 * @alias Titanium_UI_Window.getSize
	 * @return {Object}
	 */
	this.getSize = function() { return this.size; }
	/**
	 * Set the the size of the view as a dictionary of width and height properties
	 * @param {Object} value New value to set.
	 * @alias Titanium_UI_Window.setSize
	 */
	this.setSize = function(value) { this.size = value; }
	/**
	 * One of Ti.UI.Android.SOFT_INPUT_ADJUST_PAN, Ti.UI.Android.SOFT_INPUT_ADJUST_RESIZE, or Ti.UI.Android.SOFT_INPUT_ADJUST_UNSPECIFIED. Note: MUST be passed in the creation options. (Android Only) Android Doc: Window.setSoftInputMode
	 * @alias Titanium_UI_Window.softInputMode
	 * @property {Integer}
	 */
	this.softInputMode = 0
	/**
	 * Get the One of Ti.UI.Android.SOFT_INPUT_ADJUST_PAN, Ti.UI.Android.SOFT_INPUT_ADJUST_RESIZE, or Ti.UI.Android.SOFT_INPUT_ADJUST_UNSPECIFIED. Note: MUST be passed in the creation options. (Android Only) Android Doc: Window.setSoftInputMode
	 * @alias Titanium_UI_Window.getSoftInputMode
	 * @return {Integer}
	 */
	this.getSoftInputMode = function() { return this.softInputMode; }
	/**
	 * Set the One of Ti.UI.Android.SOFT_INPUT_ADJUST_PAN, Ti.UI.Android.SOFT_INPUT_ADJUST_RESIZE, or Ti.UI.Android.SOFT_INPUT_ADJUST_UNSPECIFIED. Note: MUST be passed in the creation options. (Android Only) Android Doc: Window.setSoftInputMode
	 * @param {Integer} value New value to set.
	 * @alias Titanium_UI_Window.setSoftInputMode
	 */
	this.setSoftInputMode = function(value) { this.softInputMode = value; }
	/**
	 * One of Titanium.UI.Android.SOFT_KEYBOARD_DEFAULT_ON_FOCUS, Titanium.UI.Android.SOFT_KEYBOARD_HIDE_ON_FOCUS, or Titanium.UI.Android.SOFT_KEYBOARD_SHOW_ON_FOCUS. (Android only)
	 * @alias Titanium_UI_Window.softKeyboardOnFocus
	 * @property {Integer}
	 */
	this.softKeyboardOnFocus = 0
	/**
	 * Get the One of Titanium.UI.Android.SOFT_KEYBOARD_DEFAULT_ON_FOCUS, Titanium.UI.Android.SOFT_KEYBOARD_HIDE_ON_FOCUS, or Titanium.UI.Android.SOFT_KEYBOARD_SHOW_ON_FOCUS. (Android only)
	 * @alias Titanium_UI_Window.getSoftKeyboardOnFocus
	 * @return {Integer}
	 */
	this.getSoftKeyboardOnFocus = function() { return this.softKeyboardOnFocus; }
	/**
	 * Set the One of Titanium.UI.Android.SOFT_KEYBOARD_DEFAULT_ON_FOCUS, Titanium.UI.Android.SOFT_KEYBOARD_HIDE_ON_FOCUS, or Titanium.UI.Android.SOFT_KEYBOARD_SHOW_ON_FOCUS. (Android only)
	 * @param {Integer} value New value to set.
	 * @alias Titanium_UI_Window.setSoftKeyboardOnFocus
	 */
	this.setSoftKeyboardOnFocus = function(value) { this.softKeyboardOnFocus = value; }
	/**
	 * boolean to indicate if the tab bar should be hidden. this is only valid when the window is a child of a tab.
	 * @alias Titanium_UI_Window.tabBarHidden
	 * @property {Boolean}
	 */
	this.tabBarHidden = false
	/**
	 * Get the boolean to indicate if the tab bar should be hidden. this is only valid when the window is a child of a tab.
	 * @alias Titanium_UI_Window.getTabBarHidden
	 * @return {Boolean}
	 */
	this.getTabBarHidden = function() { return this.tabBarHidden; }
	/**
	 * Set the boolean to indicate if the tab bar should be hidden. this is only valid when the window is a child of a tab.
	 * @param {Boolean} value New value to set.
	 * @alias Titanium_UI_Window.setTabBarHidden
	 */
	this.setTabBarHidden = function(value) { this.tabBarHidden = value; }
	/**
	 * title of the window.
	 * @alias Titanium_UI_Window.title
	 * @property {String}
	 */
	this.title = ''
	/**
	 * Get the title of the window.
	 * @alias Titanium_UI_Window.getTitle
	 * @return {String}
	 */
	this.getTitle = function() { return this.title; }
	/**
	 * Set the title of the window.
	 * @param {String} value New value to set.
	 * @alias Titanium_UI_Window.setTitle
	 */
	this.setTitle = function(value) { this.title = value; }
	/**
	 * view to show in the title area. only available in iPhone.
	 * @alias Titanium_UI_Window.titleControl
	 * @property {Object}
	 */
	this.titleControl = {}
	/**
	 * Get the view to show in the title area. only available in iPhone.
	 * @alias Titanium_UI_Window.getTitleControl
	 * @return {Object}
	 */
	this.getTitleControl = function() { return this.titleControl; }
	/**
	 * Set the view to show in the title area. only available in iPhone.
	 * @param {Object} value New value to set.
	 * @alias Titanium_UI_Window.setTitleControl
	 */
	this.setTitleControl = function(value) { this.titleControl = value; }
	/**
	 * url to a image that show in the title area. only available in iPhone.
	 * @alias Titanium_UI_Window.titleImage
	 * @property {String}
	 */
	this.titleImage = ''
	/**
	 * Get the url to a image that show in the title area. only available in iPhone.
	 * @alias Titanium_UI_Window.getTitleImage
	 * @return {String}
	 */
	this.getTitleImage = function() { return this.titleImage; }
	/**
	 * Set the url to a image that show in the title area. only available in iPhone.
	 * @param {String} value New value to set.
	 * @alias Titanium_UI_Window.setTitleImage
	 */
	this.setTitleImage = function(value) { this.titleImage = value; }
	/**
	 * title prompt for the window. only available in iPhone.
	 * @alias Titanium_UI_Window.titlePrompt
	 * @property {String}
	 */
	this.titlePrompt = ''
	/**
	 * Get the title prompt for the window. only available in iPhone.
	 * @alias Titanium_UI_Window.getTitlePrompt
	 * @return {String}
	 */
	this.getTitlePrompt = function() { return this.titlePrompt; }
	/**
	 * Set the title prompt for the window. only available in iPhone.
	 * @param {String} value New value to set.
	 * @alias Titanium_UI_Window.setTitlePrompt
	 */
	this.setTitlePrompt = function(value) { this.titlePrompt = value; }
	/**
	 * the key in the locale file to use for the title property
	 * @alias Titanium_UI_Window.titleid
	 * @property {String}
	 */
	this.titleid = ''
	/**
	 * Get the the key in the locale file to use for the title property
	 * @alias Titanium_UI_Window.getTitleid
	 * @return {String}
	 */
	this.getTitleid = function() { return this.titleid; }
	/**
	 * Set the the key in the locale file to use for the title property
	 * @param {String} value New value to set.
	 * @alias Titanium_UI_Window.setTitleid
	 */
	this.setTitleid = function(value) { this.titleid = value; }
	/**
	 * the key in the locale file to use for the titlePrompt property
	 * @alias Titanium_UI_Window.titlepromptid
	 * @property {String}
	 */
	this.titlepromptid = ''
	/**
	 * Get the the key in the locale file to use for the titlePrompt property
	 * @alias Titanium_UI_Window.getTitlepromptid
	 * @return {String}
	 */
	this.getTitlepromptid = function() { return this.titlepromptid; }
	/**
	 * Set the the key in the locale file to use for the titlePrompt property
	 * @param {String} value New value to set.
	 * @alias Titanium_UI_Window.setTitlepromptid
	 */
	this.setTitlepromptid = function(value) { this.titlepromptid = value; }
	/**
	 * array of button objects to show in the toolbar of the window. only available in iPhone. this is only valid when the window is a child of a tab.
	 * @alias Titanium_UI_Window.toolbar
	 * @property {Array}
	 */
	this.toolbar = []
	/**
	 * Get the array of button objects to show in the toolbar of the window. only available in iPhone. this is only valid when the window is a child of a tab.
	 * @alias Titanium_UI_Window.getToolbar
	 * @return {Array}
	 */
	this.getToolbar = function() { return this.toolbar; }
	/**
	 * Set the array of button objects to show in the toolbar of the window. only available in iPhone. this is only valid when the window is a child of a tab.
	 * @param {Array} value New value to set.
	 * @alias Titanium_UI_Window.setToolbar
	 */
	this.setToolbar = function(value) { this.toolbar = value; }
	/**
	 * property for the view top position. This position is relative to the view's parent. Can be either a float value or a dimension string ie 'auto' (default), '50%' (iPhone only).
	 * @alias Titanium_UI_Window.top
	 * @property {Float,String}
	 */
	this.top = 0.0
	/**
	 * Get the property for the view top position. This position is relative to the view's parent. Can be either a float value or a dimension string ie 'auto' (default), '50%' (iPhone only).
	 * @alias Titanium_UI_Window.getTop
	 * @return {Float,String}
	 */
	this.getTop = function() { return this.top; }
	/**
	 * Set the property for the view top position. This position is relative to the view's parent. Can be either a float value or a dimension string ie 'auto' (default), '50%' (iPhone only).
	 * @param {Float,String} value New value to set.
	 * @alias Titanium_UI_Window.setTop
	 */
	this.setTop = function(value) { this.top = value; }
	/**
	 * a boolean indicating if the view should receive touch events (true, default) or forward them to peers (false)
	 * @alias Titanium_UI_Window.touchEnabled
	 * @property {Boolean}
	 */
	this.touchEnabled = false
	/**
	 * Get the a boolean indicating if the view should receive touch events (true, default) or forward them to peers (false)
	 * @alias Titanium_UI_Window.getTouchEnabled
	 * @return {Boolean}
	 */
	this.getTouchEnabled = function() { return this.touchEnabled; }
	/**
	 * Set the a boolean indicating if the view should receive touch events (true, default) or forward them to peers (false)
	 * @param {Boolean} value New value to set.
	 * @alias Titanium_UI_Window.setTouchEnabled
	 */
	this.setTouchEnabled = function(value) { this.touchEnabled = value; }
	/**
	 * the transformation matrix to apply to the view
	 * @alias Titanium_UI_Window.transform
	 * @property {Object}
	 */
	this.transform = {}
	/**
	 * Get the the transformation matrix to apply to the view
	 * @alias Titanium_UI_Window.getTransform
	 * @return {Object}
	 */
	this.getTransform = function() { return this.transform; }
	/**
	 * Set the the transformation matrix to apply to the view
	 * @param {Object} value New value to set.
	 * @alias Titanium_UI_Window.setTransform
	 */
	this.setTransform = function(value) { this.transform = value; }
	/**
	 * boolean to indicate if the nav bar is translucent. only available in iPhone.
	 * @alias Titanium_UI_Window.translucent
	 * @property {Boolean}
	 */
	this.translucent = false
	/**
	 * Get the boolean to indicate if the nav bar is translucent. only available in iPhone.
	 * @alias Titanium_UI_Window.getTranslucent
	 * @return {Boolean}
	 */
	this.getTranslucent = function() { return this.translucent; }
	/**
	 * Set the boolean to indicate if the nav bar is translucent. only available in iPhone.
	 * @param {Boolean} value New value to set.
	 * @alias Titanium_UI_Window.setTranslucent
	 */
	this.setTranslucent = function(value) { this.translucent = value; }
	/**
	 * url to a JavaScript file with the windows instructions. this window will create a new JavaScript sub-context that will run in its own thread and global variable space.
	 * @alias Titanium_UI_Window.url
	 * @property {String}
	 */
	this.url = ''
	/**
	 * Get the url to a JavaScript file with the windows instructions. this window will create a new JavaScript sub-context that will run in its own thread and global variable space.
	 * @alias Titanium_UI_Window.getUrl
	 * @return {String}
	 */
	this.getUrl = function() { return this.url; }
	/**
	 * Set the url to a JavaScript file with the windows instructions. this window will create a new JavaScript sub-context that will run in its own thread and global variable space.
	 * @param {String} value New value to set.
	 * @alias Titanium_UI_Window.setUrl
	 */
	this.setUrl = function(value) { this.url = value; }
	/**
	 * a boolean of the visibility of the view
	 * @alias Titanium_UI_Window.visible
	 * @property {Boolean}
	 */
	this.visible = false
	/**
	 * Get the a boolean of the visibility of the view
	 * @alias Titanium_UI_Window.getVisible
	 * @return {Boolean}
	 */
	this.getVisible = function() { return this.visible; }
	/**
	 * Set the a boolean of the visibility of the view
	 * @param {Boolean} value New value to set.
	 * @alias Titanium_UI_Window.setVisible
	 */
	this.setVisible = function(value) { this.visible = value; }
	/**
	 * property for the view width. Can be either a float value or a dimension string ie 'auto' (default), '50%' (iPhone only).
	 * @alias Titanium_UI_Window.width
	 * @property {Float,String}
	 */
	this.width = 0.0
	/**
	 * Get the property for the view width. Can be either a float value or a dimension string ie 'auto' (default), '50%' (iPhone only).
	 * @alias Titanium_UI_Window.getWidth
	 * @return {Float,String}
	 */
	this.getWidth = function() { return this.width; }
	/**
	 * Set the property for the view width. Can be either a float value or a dimension string ie 'auto' (default), '50%' (iPhone only).
	 * @param {Float,String} value New value to set.
	 * @alias Titanium_UI_Window.setWidth
	 */
	this.setWidth = function(value) { this.width = value; }
	/**
	 * the z index position relative to other sibling views
	 * @alias Titanium_UI_Window.zIndex
	 * @property {Integer}
	 */
	this.zIndex = 0
	/**
	 * Get the the z index position relative to other sibling views
	 * @alias Titanium_UI_Window.getZIndex
	 * @return {Integer}
	 */
	this.getZIndex = function() { return this.zIndex; }
	/**
	 * Set the the z index position relative to other sibling views
	 * @param {Integer} value New value to set.
	 * @alias Titanium_UI_Window.setZIndex
	 */
	this.setZIndex = function(value) { this.zIndex = value; }
	/**
	 * add a child to the view hierarchy
	 * @param {Object} view the view to add to this views hiearchy
	 * @alias Titanium_UI_Window.add
	 */
	this.add = function add(view) { }
	/**
	 * add an event listener for the instance to receive view triggered events
	 * @param {String} name name of the event
	 * @param {Function} callback callback function to invoke when the event is fired
	 * @alias Titanium_UI_Window.addEventListener
	 */
	this.addEventListener = function addEventListener(name,callback) { }
	/**
	 * animate the view
	 * @param {Object} obj either a dictionary of animation properties or an Animation object
	 * @param {Function} callback function to be invoked upon completion of the animation
	 * @alias Titanium_UI_Window.animate
	 */
	this.animate = function animate(obj,callback) { }
	/**
	 * close the window
	 * @param {Object} options close the window with optional animation or display properties
	 * @alias Titanium_UI_Window.close
	 */
	this.close = function close(options) { }
	/**
	 * fire a synthesized event to the views listener
	 * @param {String} name name of the event
	 * @param {Object} event event object
	 * @alias Titanium_UI_Window.fireEvent
	 */
	this.fireEvent = function fireEvent(name,event) { }
	/**
	 * hide the view
	 * @alias Titanium_UI_Window.hide
	 */
	this.hide = function hide() { }
	/**
	 * open the window
	 * @param {Object} options open the window with optional animation or display properties
	 * @alias Titanium_UI_Window.open
	 */
	this.open = function open(options) { }
	/**
	 * remove a previously add view from the view hiearchy
	 * @param {Object} view the view to remove from this views hiearchy
	 * @alias Titanium_UI_Window.remove
	 */
	this.remove = function remove(view) { }
	/**
	 * remove a previously added event listener
	 * @param {String} name name of the event
	 * @param {Function} callback callback function passed in addEventListener
	 * @alias Titanium_UI_Window.removeEventListener
	 */
	this.removeEventListener = function removeEventListener(name,callback) { }
	/**
	 * make the view visible
	 * @alias Titanium_UI_Window.show
	 */
	this.show = function show() { }
	/**
	 * return a Blob image of the rendered view
	 * @param {Function} f function to be invoked upon completion. if non-null, this method will be performed asynchronously. if null, it will be performed immediately
	 * @alias Titanium_UI_Window.toImage
	 * @return {Object}
	 */
	this.toImage = function toImage(f) { return {}; }
};

/**
 * The AdView is a view for display Apple iAds. The View is created by the method Titanium.UI.iOS.createAdView.
 * @since 1.4
 */
function Titanium_UI_iOS_AdView() {
	/**
	 * constant for 320x50 ad sizes
	 * @alias Titanium_UI_iOS_AdView.SIZE_320x50
	 * @property {String}
	 */
	this.SIZE_320x50 = ''
	/**
	 * Get the constant for 320x50 ad sizes
	 * @alias Titanium_UI_iOS_AdView.getSIZE_320x50
	 * @return {String}
	 */
	this.getSIZE_320x50 = function() { return this.SIZE_320x50; }
	/**
	 * Set the constant for 320x50 ad sizes
	 * @param {String} value New value to set.
	 * @alias Titanium_UI_iOS_AdView.setSIZE_320x50
	 */
	this.setSIZE_320x50 = function(value) { this.SIZE_320x50 = value; }
	/**
	 * constant for 480x32 ad sizes
	 * @alias Titanium_UI_iOS_AdView.SIZE_480x32
	 * @property {String}
	 */
	this.SIZE_480x32 = ''
	/**
	 * Get the constant for 480x32 ad sizes
	 * @alias Titanium_UI_iOS_AdView.getSIZE_480x32
	 * @return {String}
	 */
	this.getSIZE_480x32 = function() { return this.SIZE_480x32; }
	/**
	 * Set the constant for 480x32 ad sizes
	 * @param {String} value New value to set.
	 * @alias Titanium_UI_iOS_AdView.setSIZE_480x32
	 */
	this.setSIZE_480x32 = function(value) { this.SIZE_480x32 = value; }
	/**
	 * a dictionary with properties x and y to indicate the anchor point value. anchor specifies the position by which animation should occur. center is 0.5, 0.5
	 * @alias Titanium_UI_iOS_AdView.anchorPoint
	 * @property {Object}
	 */
	this.anchorPoint = {}
	/**
	 * Get the a dictionary with properties x and y to indicate the anchor point value. anchor specifies the position by which animation should occur. center is 0.5, 0.5
	 * @alias Titanium_UI_iOS_AdView.getAnchorPoint
	 * @return {Object}
	 */
	this.getAnchorPoint = function() { return this.anchorPoint; }
	/**
	 * Set the a dictionary with properties x and y to indicate the anchor point value. anchor specifies the position by which animation should occur. center is 0.5, 0.5
	 * @param {Object} value New value to set.
	 * @alias Titanium_UI_iOS_AdView.setAnchorPoint
	 */
	this.setAnchorPoint = function(value) { this.anchorPoint = value; }
	/**
	 * read-only object with x and y properties of where the view is during animation
	 * @alias Titanium_UI_iOS_AdView.animatedCenterPoint
	 * @property {Object}
	 */
	this.animatedCenterPoint = {}
	/**
	 * Get the read-only object with x and y properties of where the view is during animation
	 * @alias Titanium_UI_iOS_AdView.getAnimatedCenterPoint
	 * @return {Object}
	 */
	this.getAnimatedCenterPoint = function() { return this.animatedCenterPoint; }
	/**
	 * Set the read-only object with x and y properties of where the view is during animation
	 * @param {Object} value New value to set.
	 * @alias Titanium_UI_iOS_AdView.setAnimatedCenterPoint
	 */
	this.setAnimatedCenterPoint = function(value) { this.animatedCenterPoint = value; }
	/**
	 * the background color of the view
	 * @alias Titanium_UI_iOS_AdView.backgroundColor
	 * @property {String}
	 */
	this.backgroundColor = ''
	/**
	 * Get the the background color of the view
	 * @alias Titanium_UI_iOS_AdView.getBackgroundColor
	 * @return {String}
	 */
	this.getBackgroundColor = function() { return this.backgroundColor; }
	/**
	 * Set the the background color of the view
	 * @param {String} value New value to set.
	 * @alias Titanium_UI_iOS_AdView.setBackgroundColor
	 */
	this.setBackgroundColor = function(value) { this.backgroundColor = value; }
	/**
	 * the disabled background color of the view. (Android)
	 * @alias Titanium_UI_iOS_AdView.backgroundDisabledColor
	 * @property {String}
	 */
	this.backgroundDisabledColor = ''
	/**
	 * Get the the disabled background color of the view. (Android)
	 * @alias Titanium_UI_iOS_AdView.getBackgroundDisabledColor
	 * @return {String}
	 */
	this.getBackgroundDisabledColor = function() { return this.backgroundDisabledColor; }
	/**
	 * Set the the disabled background color of the view. (Android)
	 * @param {String} value New value to set.
	 * @alias Titanium_UI_iOS_AdView.setBackgroundDisabledColor
	 */
	this.setBackgroundDisabledColor = function(value) { this.backgroundDisabledColor = value; }
	/**
	 * the disabled background image url of the view. (Android)
	 * @alias Titanium_UI_iOS_AdView.backgroundDisabledImage
	 * @property {String}
	 */
	this.backgroundDisabledImage = ''
	/**
	 * Get the the disabled background image url of the view. (Android)
	 * @alias Titanium_UI_iOS_AdView.getBackgroundDisabledImage
	 * @return {String}
	 */
	this.getBackgroundDisabledImage = function() { return this.backgroundDisabledImage; }
	/**
	 * Set the the disabled background image url of the view. (Android)
	 * @param {String} value New value to set.
	 * @alias Titanium_UI_iOS_AdView.setBackgroundDisabledImage
	 */
	this.setBackgroundDisabledImage = function(value) { this.backgroundDisabledImage = value; }
	/**
	 * the focused background color of the view. focusable must be true for normal views. (Android)
	 * @alias Titanium_UI_iOS_AdView.backgroundFocusedColor
	 * @property {String}
	 */
	this.backgroundFocusedColor = ''
	/**
	 * Get the the focused background color of the view. focusable must be true for normal views. (Android)
	 * @alias Titanium_UI_iOS_AdView.getBackgroundFocusedColor
	 * @return {String}
	 */
	this.getBackgroundFocusedColor = function() { return this.backgroundFocusedColor; }
	/**
	 * Set the the focused background color of the view. focusable must be true for normal views. (Android)
	 * @param {String} value New value to set.
	 * @alias Titanium_UI_iOS_AdView.setBackgroundFocusedColor
	 */
	this.setBackgroundFocusedColor = function(value) { this.backgroundFocusedColor = value; }
	/**
	 * the focused background image url of the view. focusable must be true for normal views. (Android)
	 * @alias Titanium_UI_iOS_AdView.backgroundFocusedImage
	 * @property {String}
	 */
	this.backgroundFocusedImage = ''
	/**
	 * Get the the focused background image url of the view. focusable must be true for normal views. (Android)
	 * @alias Titanium_UI_iOS_AdView.getBackgroundFocusedImage
	 * @return {String}
	 */
	this.getBackgroundFocusedImage = function() { return this.backgroundFocusedImage; }
	/**
	 * Set the the focused background image url of the view. focusable must be true for normal views. (Android)
	 * @param {String} value New value to set.
	 * @alias Titanium_UI_iOS_AdView.setBackgroundFocusedImage
	 */
	this.setBackgroundFocusedImage = function(value) { this.backgroundFocusedImage = value; }
	/**
	 * a background gradient for the view with the properties: type,startPoint,endPoint,startRadius,endRadius,backfillStart,backfillEnd,colors.
	 * @alias Titanium_UI_iOS_AdView.backgroundGradient
	 * @property {Object}
	 */
	this.backgroundGradient = {}
	/**
	 * Get the a background gradient for the view with the properties: type,startPoint,endPoint,startRadius,endRadius,backfillStart,backfillEnd,colors.
	 * @alias Titanium_UI_iOS_AdView.getBackgroundGradient
	 * @return {Object}
	 */
	this.getBackgroundGradient = function() { return this.backgroundGradient; }
	/**
	 * Set the a background gradient for the view with the properties: type,startPoint,endPoint,startRadius,endRadius,backfillStart,backfillEnd,colors.
	 * @param {Object} value New value to set.
	 * @alias Titanium_UI_iOS_AdView.setBackgroundGradient
	 */
	this.setBackgroundGradient = function(value) { this.backgroundGradient = value; }
	/**
	 * the background image url of the view
	 * @alias Titanium_UI_iOS_AdView.backgroundImage
	 * @property {String}
	 */
	this.backgroundImage = ''
	/**
	 * Get the the background image url of the view
	 * @alias Titanium_UI_iOS_AdView.getBackgroundImage
	 * @return {String}
	 */
	this.getBackgroundImage = function() { return this.backgroundImage; }
	/**
	 * Set the the background image url of the view
	 * @param {String} value New value to set.
	 * @alias Titanium_UI_iOS_AdView.setBackgroundImage
	 */
	this.setBackgroundImage = function(value) { this.backgroundImage = value; }
	/**
	 * End caps specify the portion of an image that should not be resized when an image is stretched. This technique is used to implement buttons and other resizable image-based interface elements. When a button with end caps is resized, the resizing occurs only in the middle of the button, in the region between the end caps. The end caps themselves keep their original size and appearance. This property specifies the size of the left end cap. The middle (stretchable) portion is assumed to be 1 pixel wide. The right end cap is therefore computed by adding the size of the left end cap and the middle portion together and then subtracting that value from the width of the image
	 * @alias Titanium_UI_iOS_AdView.backgroundLeftCap
	 * @property {Float}
	 */
	this.backgroundLeftCap = 0.0
	/**
	 * Get the End caps specify the portion of an image that should not be resized when an image is stretched. This technique is used to implement buttons and other resizable image-based interface elements. When a button with end caps is resized, the resizing occurs only in the middle of the button, in the region between the end caps. The end caps themselves keep their original size and appearance. This property specifies the size of the left end cap. The middle (stretchable) portion is assumed to be 1 pixel wide. The right end cap is therefore computed by adding the size of the left end cap and the middle portion together and then subtracting that value from the width of the image
	 * @alias Titanium_UI_iOS_AdView.getBackgroundLeftCap
	 * @return {Float}
	 */
	this.getBackgroundLeftCap = function() { return this.backgroundLeftCap; }
	/**
	 * Set the End caps specify the portion of an image that should not be resized when an image is stretched. This technique is used to implement buttons and other resizable image-based interface elements. When a button with end caps is resized, the resizing occurs only in the middle of the button, in the region between the end caps. The end caps themselves keep their original size and appearance. This property specifies the size of the left end cap. The middle (stretchable) portion is assumed to be 1 pixel wide. The right end cap is therefore computed by adding the size of the left end cap and the middle portion together and then subtracting that value from the width of the image
	 * @param {Float} value New value to set.
	 * @alias Titanium_UI_iOS_AdView.setBackgroundLeftCap
	 */
	this.setBackgroundLeftCap = function(value) { this.backgroundLeftCap = value; }
	/**
	 * the selected background color of the view. focusable must be true for normal views. (Android)
	 * @alias Titanium_UI_iOS_AdView.backgroundSelectedColor
	 * @property {String}
	 */
	this.backgroundSelectedColor = ''
	/**
	 * Get the the selected background color of the view. focusable must be true for normal views. (Android)
	 * @alias Titanium_UI_iOS_AdView.getBackgroundSelectedColor
	 * @return {String}
	 */
	this.getBackgroundSelectedColor = function() { return this.backgroundSelectedColor; }
	/**
	 * Set the the selected background color of the view. focusable must be true for normal views. (Android)
	 * @param {String} value New value to set.
	 * @alias Titanium_UI_iOS_AdView.setBackgroundSelectedColor
	 */
	this.setBackgroundSelectedColor = function(value) { this.backgroundSelectedColor = value; }
	/**
	 * the selected background image url of the view. focusable must be true for normal views. (Android)
	 * @alias Titanium_UI_iOS_AdView.backgroundSelectedImage
	 * @property {String}
	 */
	this.backgroundSelectedImage = ''
	/**
	 * Get the the selected background image url of the view. focusable must be true for normal views. (Android)
	 * @alias Titanium_UI_iOS_AdView.getBackgroundSelectedImage
	 * @return {String}
	 */
	this.getBackgroundSelectedImage = function() { return this.backgroundSelectedImage; }
	/**
	 * Set the the selected background image url of the view. focusable must be true for normal views. (Android)
	 * @param {String} value New value to set.
	 * @alias Titanium_UI_iOS_AdView.setBackgroundSelectedImage
	 */
	this.setBackgroundSelectedImage = function(value) { this.backgroundSelectedImage = value; }
	/**
	 * End caps specify the portion of an image that should not be resized when an image is stretched. This technique is used to implement buttons and other resizable image-based interface elements. When a button with end caps is resized, the resizing occurs only in the middle of the button, in the region between the end caps. The end caps themselves keep their original size and appearance. This property specifies the size of the top end cap. The middle (stretchable) portion is assumed to be 1 pixel wide. The bottom end cap is therefore computed by adding the size of the top end cap and the middle portion together and then subtracting that value from the height of the image
	 * @alias Titanium_UI_iOS_AdView.backgroundTopCap
	 * @property {Float}
	 */
	this.backgroundTopCap = 0.0
	/**
	 * Get the End caps specify the portion of an image that should not be resized when an image is stretched. This technique is used to implement buttons and other resizable image-based interface elements. When a button with end caps is resized, the resizing occurs only in the middle of the button, in the region between the end caps. The end caps themselves keep their original size and appearance. This property specifies the size of the top end cap. The middle (stretchable) portion is assumed to be 1 pixel wide. The bottom end cap is therefore computed by adding the size of the top end cap and the middle portion together and then subtracting that value from the height of the image
	 * @alias Titanium_UI_iOS_AdView.getBackgroundTopCap
	 * @return {Float}
	 */
	this.getBackgroundTopCap = function() { return this.backgroundTopCap; }
	/**
	 * Set the End caps specify the portion of an image that should not be resized when an image is stretched. This technique is used to implement buttons and other resizable image-based interface elements. When a button with end caps is resized, the resizing occurs only in the middle of the button, in the region between the end caps. The end caps themselves keep their original size and appearance. This property specifies the size of the top end cap. The middle (stretchable) portion is assumed to be 1 pixel wide. The bottom end cap is therefore computed by adding the size of the top end cap and the middle portion together and then subtracting that value from the height of the image
	 * @param {Float} value New value to set.
	 * @alias Titanium_UI_iOS_AdView.setBackgroundTopCap
	 */
	this.setBackgroundTopCap = function(value) { this.backgroundTopCap = value; }
	/**
	 * the border color of the view
	 * @alias Titanium_UI_iOS_AdView.borderColor
	 * @property {String}
	 */
	this.borderColor = ''
	/**
	 * Get the the border color of the view
	 * @alias Titanium_UI_iOS_AdView.getBorderColor
	 * @return {String}
	 */
	this.getBorderColor = function() { return this.borderColor; }
	/**
	 * Set the the border color of the view
	 * @param {String} value New value to set.
	 * @alias Titanium_UI_iOS_AdView.setBorderColor
	 */
	this.setBorderColor = function(value) { this.borderColor = value; }
	/**
	 * the border radius of the view
	 * @alias Titanium_UI_iOS_AdView.borderRadius
	 * @property {Float}
	 */
	this.borderRadius = 0.0
	/**
	 * Get the the border radius of the view
	 * @alias Titanium_UI_iOS_AdView.getBorderRadius
	 * @return {Float}
	 */
	this.getBorderRadius = function() { return this.borderRadius; }
	/**
	 * Set the the border radius of the view
	 * @param {Float} value New value to set.
	 * @alias Titanium_UI_iOS_AdView.setBorderRadius
	 */
	this.setBorderRadius = function(value) { this.borderRadius = value; }
	/**
	 * the border width of the view
	 * @alias Titanium_UI_iOS_AdView.borderWidth
	 * @property {Float}
	 */
	this.borderWidth = 0.0
	/**
	 * Get the the border width of the view
	 * @alias Titanium_UI_iOS_AdView.getBorderWidth
	 * @return {Float}
	 */
	this.getBorderWidth = function() { return this.borderWidth; }
	/**
	 * Set the the border width of the view
	 * @param {Float} value New value to set.
	 * @alias Titanium_UI_iOS_AdView.setBorderWidth
	 */
	this.setBorderWidth = function(value) { this.borderWidth = value; }
	/**
	 * property for the view bottom position. This position is relative to the view's parent. Can be either a float value or a dimension string ie 'auto' (default), '50%' (iPhone only).
	 * @alias Titanium_UI_iOS_AdView.bottom
	 * @property {Float,String}
	 */
	this.bottom = 0.0
	/**
	 * Get the property for the view bottom position. This position is relative to the view's parent. Can be either a float value or a dimension string ie 'auto' (default), '50%' (iPhone only).
	 * @alias Titanium_UI_iOS_AdView.getBottom
	 * @return {Float,String}
	 */
	this.getBottom = function() { return this.bottom; }
	/**
	 * Set the property for the view bottom position. This position is relative to the view's parent. Can be either a float value or a dimension string ie 'auto' (default), '50%' (iPhone only).
	 * @param {Float,String} value New value to set.
	 * @alias Titanium_UI_iOS_AdView.setBottom
	 */
	this.setBottom = function(value) { this.bottom = value; }
	/**
	 * a dictionary with properties x and y to indicate the center of the views position relative to the parent view
	 * @alias Titanium_UI_iOS_AdView.center
	 * @property {Object}
	 */
	this.center = {}
	/**
	 * Get the a dictionary with properties x and y to indicate the center of the views position relative to the parent view
	 * @alias Titanium_UI_iOS_AdView.getCenter
	 * @return {Object}
	 */
	this.getCenter = function() { return this.center; }
	/**
	 * Set the a dictionary with properties x and y to indicate the center of the views position relative to the parent view
	 * @param {Object} value New value to set.
	 * @alias Titanium_UI_iOS_AdView.setCenter
	 */
	this.setCenter = function(value) { this.center = value; }
	/**
	 * Set true if you want a view to be focusable when navigating with the trackball or D-Pad. Default: false. (Android Only)
	 * @alias Titanium_UI_iOS_AdView.focusable
	 * @property {Boolean}
	 */
	this.focusable = false
	/**
	 * Get the Set true if you want a view to be focusable when navigating with the trackball or D-Pad. Default: false. (Android Only)
	 * @alias Titanium_UI_iOS_AdView.getFocusable
	 * @return {Boolean}
	 */
	this.getFocusable = function() { return this.focusable; }
	/**
	 * Set the Set true if you want a view to be focusable when navigating with the trackball or D-Pad. Default: false. (Android Only)
	 * @param {Boolean} value New value to set.
	 * @alias Titanium_UI_iOS_AdView.setFocusable
	 */
	this.setFocusable = function(value) { this.focusable = value; }
	/**
	 * the font family
	 * @alias Titanium_UI_iOS_AdView.font-family
	 * @property {String}
	 */
	this.font-family = ''
	/**
	 * Get the the font family
	 * @alias Titanium_UI_iOS_AdView.getFont-family
	 * @return {String}
	 */
	this.getFont-family = function() { return this.font-family; }
	/**
	 * Set the the font family
	 * @param {String} value New value to set.
	 * @alias Titanium_UI_iOS_AdView.setFont-family
	 */
	this.setFont-family = function(value) { this.font-family = value; }
	/**
	 * the font size
	 * @alias Titanium_UI_iOS_AdView.font-size
	 * @property {String}
	 */
	this.font-size = ''
	/**
	 * Get the the font size
	 * @alias Titanium_UI_iOS_AdView.getFont-size
	 * @return {String}
	 */
	this.getFont-size = function() { return this.font-size; }
	/**
	 * Set the the font size
	 * @param {String} value New value to set.
	 * @alias Titanium_UI_iOS_AdView.setFont-size
	 */
	this.setFont-size = function(value) { this.font-size = value; }
	/**
	 * the font style, either normal or italics
	 * @alias Titanium_UI_iOS_AdView.font-style
	 * @property {String}
	 */
	this.font-style = ''
	/**
	 * Get the the font style, either normal or italics
	 * @alias Titanium_UI_iOS_AdView.getFont-style
	 * @return {String}
	 */
	this.getFont-style = function() { return this.font-style; }
	/**
	 * Set the the font style, either normal or italics
	 * @param {String} value New value to set.
	 * @alias Titanium_UI_iOS_AdView.setFont-style
	 */
	this.setFont-style = function(value) { this.font-style = value; }
	/**
	 * the font weight, either normal or bold
	 * @alias Titanium_UI_iOS_AdView.font-weight
	 * @property {String}
	 */
	this.font-weight = ''
	/**
	 * Get the the font weight, either normal or bold
	 * @alias Titanium_UI_iOS_AdView.getFont-weight
	 * @return {String}
	 */
	this.getFont-weight = function() { return this.font-weight; }
	/**
	 * Set the the font weight, either normal or bold
	 * @param {String} value New value to set.
	 * @alias Titanium_UI_iOS_AdView.setFont-weight
	 */
	this.setFont-weight = function(value) { this.font-weight = value; }
	/**
	 * property for the view height. Can be either a float value or a dimension string ie 'auto' (default), '50%' (iPhone only).
	 * @alias Titanium_UI_iOS_AdView.height
	 * @property {Float,String}
	 */
	this.height = 0.0
	/**
	 * Get the property for the view height. Can be either a float value or a dimension string ie 'auto' (default), '50%' (iPhone only).
	 * @alias Titanium_UI_iOS_AdView.getHeight
	 * @return {Float,String}
	 */
	this.getHeight = function() { return this.height; }
	/**
	 * Set the property for the view height. Can be either a float value or a dimension string ie 'auto' (default), '50%' (iPhone only).
	 * @param {Float,String} value New value to set.
	 * @alias Titanium_UI_iOS_AdView.setHeight
	 */
	this.setHeight = function(value) { this.height = value; }
	/**
	 * property for the view left position. This position is relative to the view's parent. Can be either a float value or a dimension string ie 'auto' (default), '50%' (iPhone only).
	 * @alias Titanium_UI_iOS_AdView.left
	 * @property {Float,String}
	 */
	this.left = 0.0
	/**
	 * Get the property for the view left position. This position is relative to the view's parent. Can be either a float value or a dimension string ie 'auto' (default), '50%' (iPhone only).
	 * @alias Titanium_UI_iOS_AdView.getLeft
	 * @return {Float,String}
	 */
	this.getLeft = function() { return this.left; }
	/**
	 * Set the property for the view left position. This position is relative to the view's parent. Can be either a float value or a dimension string ie 'auto' (default), '50%' (iPhone only).
	 * @param {Float,String} value New value to set.
	 * @alias Titanium_UI_iOS_AdView.setLeft
	 */
	this.setLeft = function(value) { this.left = value; }
	/**
	 * the opacity from 0.0-1.0
	 * @alias Titanium_UI_iOS_AdView.opacity
	 * @property {Float}
	 */
	this.opacity = 0.0
	/**
	 * Get the the opacity from 0.0-1.0
	 * @alias Titanium_UI_iOS_AdView.getOpacity
	 * @return {Float}
	 */
	this.getOpacity = function() { return this.opacity; }
	/**
	 * Set the the opacity from 0.0-1.0
	 * @param {Float} value New value to set.
	 * @alias Titanium_UI_iOS_AdView.setOpacity
	 */
	this.setOpacity = function(value) { this.opacity = value; }
	/**
	 * property for the view right position. This position is relative to the view's parent. Can be either a float value or a dimension string ie 'auto' (default), '50%' (iPhone only).
	 * @alias Titanium_UI_iOS_AdView.right
	 * @property {Float,String}
	 */
	this.right = 0.0
	/**
	 * Get the property for the view right position. This position is relative to the view's parent. Can be either a float value or a dimension string ie 'auto' (default), '50%' (iPhone only).
	 * @alias Titanium_UI_iOS_AdView.getRight
	 * @return {Float,String}
	 */
	this.getRight = function() { return this.right; }
	/**
	 * Set the property for the view right position. This position is relative to the view's parent. Can be either a float value or a dimension string ie 'auto' (default), '50%' (iPhone only).
	 * @param {Float,String} value New value to set.
	 * @alias Titanium_UI_iOS_AdView.setRight
	 */
	this.setRight = function(value) { this.right = value; }
	/**
	 * the size of the view as a dictionary of width and height properties
	 * @alias Titanium_UI_iOS_AdView.size
	 * @property {Object}
	 */
	this.size = {}
	/**
	 * Get the the size of the view as a dictionary of width and height properties
	 * @alias Titanium_UI_iOS_AdView.getSize
	 * @return {Object}
	 */
	this.getSize = function() { return this.size; }
	/**
	 * Set the the size of the view as a dictionary of width and height properties
	 * @param {Object} value New value to set.
	 * @alias Titanium_UI_iOS_AdView.setSize
	 */
	this.setSize = function(value) { this.size = value; }
	/**
	 * One of Titanium.UI.Android.SOFT_KEYBOARD_DEFAULT_ON_FOCUS, Titanium.UI.Android.SOFT_KEYBOARD_HIDE_ON_FOCUS, or Titanium.UI.Android.SOFT_KEYBOARD_SHOW_ON_FOCUS. (Android only)
	 * @alias Titanium_UI_iOS_AdView.softKeyboardOnFocus
	 * @property {Integer}
	 */
	this.softKeyboardOnFocus = 0
	/**
	 * Get the One of Titanium.UI.Android.SOFT_KEYBOARD_DEFAULT_ON_FOCUS, Titanium.UI.Android.SOFT_KEYBOARD_HIDE_ON_FOCUS, or Titanium.UI.Android.SOFT_KEYBOARD_SHOW_ON_FOCUS. (Android only)
	 * @alias Titanium_UI_iOS_AdView.getSoftKeyboardOnFocus
	 * @return {Integer}
	 */
	this.getSoftKeyboardOnFocus = function() { return this.softKeyboardOnFocus; }
	/**
	 * Set the One of Titanium.UI.Android.SOFT_KEYBOARD_DEFAULT_ON_FOCUS, Titanium.UI.Android.SOFT_KEYBOARD_HIDE_ON_FOCUS, or Titanium.UI.Android.SOFT_KEYBOARD_SHOW_ON_FOCUS. (Android only)
	 * @param {Integer} value New value to set.
	 * @alias Titanium_UI_iOS_AdView.setSoftKeyboardOnFocus
	 */
	this.setSoftKeyboardOnFocus = function(value) { this.softKeyboardOnFocus = value; }
	/**
	 * property for the view top position. This position is relative to the view's parent. Can be either a float value or a dimension string ie 'auto' (default), '50%' (iPhone only).
	 * @alias Titanium_UI_iOS_AdView.top
	 * @property {Float,String}
	 */
	this.top = 0.0
	/**
	 * Get the property for the view top position. This position is relative to the view's parent. Can be either a float value or a dimension string ie 'auto' (default), '50%' (iPhone only).
	 * @alias Titanium_UI_iOS_AdView.getTop
	 * @return {Float,String}
	 */
	this.getTop = function() { return this.top; }
	/**
	 * Set the property for the view top position. This position is relative to the view's parent. Can be either a float value or a dimension string ie 'auto' (default), '50%' (iPhone only).
	 * @param {Float,String} value New value to set.
	 * @alias Titanium_UI_iOS_AdView.setTop
	 */
	this.setTop = function(value) { this.top = value; }
	/**
	 * a boolean indicating if the view should receive touch events (true, default) or forward them to peers (false)
	 * @alias Titanium_UI_iOS_AdView.touchEnabled
	 * @property {Boolean}
	 */
	this.touchEnabled = false
	/**
	 * Get the a boolean indicating if the view should receive touch events (true, default) or forward them to peers (false)
	 * @alias Titanium_UI_iOS_AdView.getTouchEnabled
	 * @return {Boolean}
	 */
	this.getTouchEnabled = function() { return this.touchEnabled; }
	/**
	 * Set the a boolean indicating if the view should receive touch events (true, default) or forward them to peers (false)
	 * @param {Boolean} value New value to set.
	 * @alias Titanium_UI_iOS_AdView.setTouchEnabled
	 */
	this.setTouchEnabled = function(value) { this.touchEnabled = value; }
	/**
	 * the transformation matrix to apply to the view
	 * @alias Titanium_UI_iOS_AdView.transform
	 * @property {Object}
	 */
	this.transform = {}
	/**
	 * Get the the transformation matrix to apply to the view
	 * @alias Titanium_UI_iOS_AdView.getTransform
	 * @return {Object}
	 */
	this.getTransform = function() { return this.transform; }
	/**
	 * Set the the transformation matrix to apply to the view
	 * @param {Object} value New value to set.
	 * @alias Titanium_UI_iOS_AdView.setTransform
	 */
	this.setTransform = function(value) { this.transform = value; }
	/**
	 * a boolean of the visibility of the view
	 * @alias Titanium_UI_iOS_AdView.visible
	 * @property {Boolean}
	 */
	this.visible = false
	/**
	 * Get the a boolean of the visibility of the view
	 * @alias Titanium_UI_iOS_AdView.getVisible
	 * @return {Boolean}
	 */
	this.getVisible = function() { return this.visible; }
	/**
	 * Set the a boolean of the visibility of the view
	 * @param {Boolean} value New value to set.
	 * @alias Titanium_UI_iOS_AdView.setVisible
	 */
	this.setVisible = function(value) { this.visible = value; }
	/**
	 * property for the view width. Can be either a float value or a dimension string ie 'auto' (default), '50%' (iPhone only).
	 * @alias Titanium_UI_iOS_AdView.width
	 * @property {Float,String}
	 */
	this.width = 0.0
	/**
	 * Get the property for the view width. Can be either a float value or a dimension string ie 'auto' (default), '50%' (iPhone only).
	 * @alias Titanium_UI_iOS_AdView.getWidth
	 * @return {Float,String}
	 */
	this.getWidth = function() { return this.width; }
	/**
	 * Set the property for the view width. Can be either a float value or a dimension string ie 'auto' (default), '50%' (iPhone only).
	 * @param {Float,String} value New value to set.
	 * @alias Titanium_UI_iOS_AdView.setWidth
	 */
	this.setWidth = function(value) { this.width = value; }
	/**
	 * the z index position relative to other sibling views
	 * @alias Titanium_UI_iOS_AdView.zIndex
	 * @property {Integer}
	 */
	this.zIndex = 0
	/**
	 * Get the the z index position relative to other sibling views
	 * @alias Titanium_UI_iOS_AdView.getZIndex
	 * @return {Integer}
	 */
	this.getZIndex = function() { return this.zIndex; }
	/**
	 * Set the the z index position relative to other sibling views
	 * @param {Integer} value New value to set.
	 * @alias Titanium_UI_iOS_AdView.setZIndex
	 */
	this.setZIndex = function(value) { this.zIndex = value; }
	/**
	 * add a child to the view hierarchy
	 * @param {Object} view the view to add to this views hiearchy
	 * @alias Titanium_UI_iOS_AdView.add
	 */
	this.add = function add(view) { }
	/**
	 * add an event listener for the instance to receive view triggered events
	 * @param {String} name name of the event
	 * @param {Function} callback callback function to invoke when the event is fired
	 * @alias Titanium_UI_iOS_AdView.addEventListener
	 */
	this.addEventListener = function addEventListener(name,callback) { }
	/**
	 * animate the view
	 * @param {Object} obj either a dictionary of animation properties or an Animation object
	 * @param {Function} callback function to be invoked upon completion of the animation
	 * @alias Titanium_UI_iOS_AdView.animate
	 */
	this.animate = function animate(obj,callback) { }
	/**
	 * A banner view action can cover your application's user interface. However, your application continues to run, and receives events normally. If your application receives an event that requires the user's attention, it can programmatically cancel the action and uncover its interface by calling cancelAction. Canceling actions frequently can cause a loss of revenue for your application.
	 * @alias Titanium_UI_iOS_AdView.cancelAction
	 */
	this.cancelAction = function cancelAction() { }
	/**
	 * fire a synthesized event to the views listener
	 * @param {String} name name of the event
	 * @param {Object} event event object
	 * @alias Titanium_UI_iOS_AdView.fireEvent
	 */
	this.fireEvent = function fireEvent(name,event) { }
	/**
	 * hide the view
	 * @alias Titanium_UI_iOS_AdView.hide
	 */
	this.hide = function hide() { }
	/**
	 * remove a previously add view from the view hiearchy
	 * @param {Object} view the view to remove from this views hiearchy
	 * @alias Titanium_UI_iOS_AdView.remove
	 */
	this.remove = function remove(view) { }
	/**
	 * remove a previously added event listener
	 * @param {String} name name of the event
	 * @param {Function} callback callback function passed in addEventListener
	 * @alias Titanium_UI_iOS_AdView.removeEventListener
	 */
	this.removeEventListener = function removeEventListener(name,callback) { }
	/**
	 * make the view visible
	 * @alias Titanium_UI_iOS_AdView.show
	 */
	this.show = function show() { }
	/**
	 * return a Blob image of the rendered view
	 * @param {Function} f function to be invoked upon completion. if non-null, this method will be performed asynchronously. if null, it will be performed immediately
	 * @alias Titanium_UI_iOS_AdView.toImage
	 * @return {Object}
	 */
	this.toImage = function toImage(f) { return {}; }
};

/**
 * A Popover is used to manage the presentation of content in a popover. You use popovers to present information temporarily but in a way that does not take over the entire screen like a modal view does. The popover content is layered on top of your existing content in a special type of window. The popover remains visible until the user taps outside of the popover window or you explicitly dismiss it. The Popover is created by the method Titanium.UI.iPad.createPopover.
 * @since 1.2
 */
function Titanium_UI_iPad_Popover() {
	/**
	 * a dictionary with properties x and y to indicate the anchor point value. anchor specifies the position by which animation should occur. center is 0.5, 0.5
	 * @alias Titanium_UI_iPad_Popover.anchorPoint
	 * @property {Object}
	 */
	this.anchorPoint = {}
	/**
	 * Get the a dictionary with properties x and y to indicate the anchor point value. anchor specifies the position by which animation should occur. center is 0.5, 0.5
	 * @alias Titanium_UI_iPad_Popover.getAnchorPoint
	 * @return {Object}
	 */
	this.getAnchorPoint = function() { return this.anchorPoint; }
	/**
	 * Set the a dictionary with properties x and y to indicate the anchor point value. anchor specifies the position by which animation should occur. center is 0.5, 0.5
	 * @param {Object} value New value to set.
	 * @alias Titanium_UI_iPad_Popover.setAnchorPoint
	 */
	this.setAnchorPoint = function(value) { this.anchorPoint = value; }
	/**
	 * read-only object with x and y properties of where the view is during animation
	 * @alias Titanium_UI_iPad_Popover.animatedCenterPoint
	 * @property {Object}
	 */
	this.animatedCenterPoint = {}
	/**
	 * Get the read-only object with x and y properties of where the view is during animation
	 * @alias Titanium_UI_iPad_Popover.getAnimatedCenterPoint
	 * @return {Object}
	 */
	this.getAnimatedCenterPoint = function() { return this.animatedCenterPoint; }
	/**
	 * Set the read-only object with x and y properties of where the view is during animation
	 * @param {Object} value New value to set.
	 * @alias Titanium_UI_iPad_Popover.setAnimatedCenterPoint
	 */
	this.setAnimatedCenterPoint = function(value) { this.animatedCenterPoint = value; }
	/**
	 * return the arrow direction of the popover
	 * @alias Titanium_UI_iPad_Popover.arrowDirection
	 * @property {Integer}
	 */
	this.arrowDirection = 0
	/**
	 * Get the return the arrow direction of the popover
	 * @alias Titanium_UI_iPad_Popover.getArrowDirection
	 * @return {Integer}
	 */
	this.getArrowDirection = function() { return this.arrowDirection; }
	/**
	 * Set the return the arrow direction of the popover
	 * @param {Integer} value New value to set.
	 * @alias Titanium_UI_iPad_Popover.setArrowDirection
	 */
	this.setArrowDirection = function(value) { this.arrowDirection = value; }
	/**
	 * the background color of the view
	 * @alias Titanium_UI_iPad_Popover.backgroundColor
	 * @property {String}
	 */
	this.backgroundColor = ''
	/**
	 * Get the the background color of the view
	 * @alias Titanium_UI_iPad_Popover.getBackgroundColor
	 * @return {String}
	 */
	this.getBackgroundColor = function() { return this.backgroundColor; }
	/**
	 * Set the the background color of the view
	 * @param {String} value New value to set.
	 * @alias Titanium_UI_iPad_Popover.setBackgroundColor
	 */
	this.setBackgroundColor = function(value) { this.backgroundColor = value; }
	/**
	 * the disabled background color of the view. (Android)
	 * @alias Titanium_UI_iPad_Popover.backgroundDisabledColor
	 * @property {String}
	 */
	this.backgroundDisabledColor = ''
	/**
	 * Get the the disabled background color of the view. (Android)
	 * @alias Titanium_UI_iPad_Popover.getBackgroundDisabledColor
	 * @return {String}
	 */
	this.getBackgroundDisabledColor = function() { return this.backgroundDisabledColor; }
	/**
	 * Set the the disabled background color of the view. (Android)
	 * @param {String} value New value to set.
	 * @alias Titanium_UI_iPad_Popover.setBackgroundDisabledColor
	 */
	this.setBackgroundDisabledColor = function(value) { this.backgroundDisabledColor = value; }
	/**
	 * the disabled background image url of the view. (Android)
	 * @alias Titanium_UI_iPad_Popover.backgroundDisabledImage
	 * @property {String}
	 */
	this.backgroundDisabledImage = ''
	/**
	 * Get the the disabled background image url of the view. (Android)
	 * @alias Titanium_UI_iPad_Popover.getBackgroundDisabledImage
	 * @return {String}
	 */
	this.getBackgroundDisabledImage = function() { return this.backgroundDisabledImage; }
	/**
	 * Set the the disabled background image url of the view. (Android)
	 * @param {String} value New value to set.
	 * @alias Titanium_UI_iPad_Popover.setBackgroundDisabledImage
	 */
	this.setBackgroundDisabledImage = function(value) { this.backgroundDisabledImage = value; }
	/**
	 * the focused background color of the view. focusable must be true for normal views. (Android)
	 * @alias Titanium_UI_iPad_Popover.backgroundFocusedColor
	 * @property {String}
	 */
	this.backgroundFocusedColor = ''
	/**
	 * Get the the focused background color of the view. focusable must be true for normal views. (Android)
	 * @alias Titanium_UI_iPad_Popover.getBackgroundFocusedColor
	 * @return {String}
	 */
	this.getBackgroundFocusedColor = function() { return this.backgroundFocusedColor; }
	/**
	 * Set the the focused background color of the view. focusable must be true for normal views. (Android)
	 * @param {String} value New value to set.
	 * @alias Titanium_UI_iPad_Popover.setBackgroundFocusedColor
	 */
	this.setBackgroundFocusedColor = function(value) { this.backgroundFocusedColor = value; }
	/**
	 * the focused background image url of the view. focusable must be true for normal views. (Android)
	 * @alias Titanium_UI_iPad_Popover.backgroundFocusedImage
	 * @property {String}
	 */
	this.backgroundFocusedImage = ''
	/**
	 * Get the the focused background image url of the view. focusable must be true for normal views. (Android)
	 * @alias Titanium_UI_iPad_Popover.getBackgroundFocusedImage
	 * @return {String}
	 */
	this.getBackgroundFocusedImage = function() { return this.backgroundFocusedImage; }
	/**
	 * Set the the focused background image url of the view. focusable must be true for normal views. (Android)
	 * @param {String} value New value to set.
	 * @alias Titanium_UI_iPad_Popover.setBackgroundFocusedImage
	 */
	this.setBackgroundFocusedImage = function(value) { this.backgroundFocusedImage = value; }
	/**
	 * a background gradient for the view with the properties: type,startPoint,endPoint,startRadius,endRadius,backfillStart,backfillEnd,colors.
	 * @alias Titanium_UI_iPad_Popover.backgroundGradient
	 * @property {Object}
	 */
	this.backgroundGradient = {}
	/**
	 * Get the a background gradient for the view with the properties: type,startPoint,endPoint,startRadius,endRadius,backfillStart,backfillEnd,colors.
	 * @alias Titanium_UI_iPad_Popover.getBackgroundGradient
	 * @return {Object}
	 */
	this.getBackgroundGradient = function() { return this.backgroundGradient; }
	/**
	 * Set the a background gradient for the view with the properties: type,startPoint,endPoint,startRadius,endRadius,backfillStart,backfillEnd,colors.
	 * @param {Object} value New value to set.
	 * @alias Titanium_UI_iPad_Popover.setBackgroundGradient
	 */
	this.setBackgroundGradient = function(value) { this.backgroundGradient = value; }
	/**
	 * the background image url of the view
	 * @alias Titanium_UI_iPad_Popover.backgroundImage
	 * @property {String}
	 */
	this.backgroundImage = ''
	/**
	 * Get the the background image url of the view
	 * @alias Titanium_UI_iPad_Popover.getBackgroundImage
	 * @return {String}
	 */
	this.getBackgroundImage = function() { return this.backgroundImage; }
	/**
	 * Set the the background image url of the view
	 * @param {String} value New value to set.
	 * @alias Titanium_UI_iPad_Popover.setBackgroundImage
	 */
	this.setBackgroundImage = function(value) { this.backgroundImage = value; }
	/**
	 * End caps specify the portion of an image that should not be resized when an image is stretched. This technique is used to implement buttons and other resizable image-based interface elements. When a button with end caps is resized, the resizing occurs only in the middle of the button, in the region between the end caps. The end caps themselves keep their original size and appearance. This property specifies the size of the left end cap. The middle (stretchable) portion is assumed to be 1 pixel wide. The right end cap is therefore computed by adding the size of the left end cap and the middle portion together and then subtracting that value from the width of the image
	 * @alias Titanium_UI_iPad_Popover.backgroundLeftCap
	 * @property {Float}
	 */
	this.backgroundLeftCap = 0.0
	/**
	 * Get the End caps specify the portion of an image that should not be resized when an image is stretched. This technique is used to implement buttons and other resizable image-based interface elements. When a button with end caps is resized, the resizing occurs only in the middle of the button, in the region between the end caps. The end caps themselves keep their original size and appearance. This property specifies the size of the left end cap. The middle (stretchable) portion is assumed to be 1 pixel wide. The right end cap is therefore computed by adding the size of the left end cap and the middle portion together and then subtracting that value from the width of the image
	 * @alias Titanium_UI_iPad_Popover.getBackgroundLeftCap
	 * @return {Float}
	 */
	this.getBackgroundLeftCap = function() { return this.backgroundLeftCap; }
	/**
	 * Set the End caps specify the portion of an image that should not be resized when an image is stretched. This technique is used to implement buttons and other resizable image-based interface elements. When a button with end caps is resized, the resizing occurs only in the middle of the button, in the region between the end caps. The end caps themselves keep their original size and appearance. This property specifies the size of the left end cap. The middle (stretchable) portion is assumed to be 1 pixel wide. The right end cap is therefore computed by adding the size of the left end cap and the middle portion together and then subtracting that value from the width of the image
	 * @param {Float} value New value to set.
	 * @alias Titanium_UI_iPad_Popover.setBackgroundLeftCap
	 */
	this.setBackgroundLeftCap = function(value) { this.backgroundLeftCap = value; }
	/**
	 * the selected background color of the view. focusable must be true for normal views. (Android)
	 * @alias Titanium_UI_iPad_Popover.backgroundSelectedColor
	 * @property {String}
	 */
	this.backgroundSelectedColor = ''
	/**
	 * Get the the selected background color of the view. focusable must be true for normal views. (Android)
	 * @alias Titanium_UI_iPad_Popover.getBackgroundSelectedColor
	 * @return {String}
	 */
	this.getBackgroundSelectedColor = function() { return this.backgroundSelectedColor; }
	/**
	 * Set the the selected background color of the view. focusable must be true for normal views. (Android)
	 * @param {String} value New value to set.
	 * @alias Titanium_UI_iPad_Popover.setBackgroundSelectedColor
	 */
	this.setBackgroundSelectedColor = function(value) { this.backgroundSelectedColor = value; }
	/**
	 * the selected background image url of the view. focusable must be true for normal views. (Android)
	 * @alias Titanium_UI_iPad_Popover.backgroundSelectedImage
	 * @property {String}
	 */
	this.backgroundSelectedImage = ''
	/**
	 * Get the the selected background image url of the view. focusable must be true for normal views. (Android)
	 * @alias Titanium_UI_iPad_Popover.getBackgroundSelectedImage
	 * @return {String}
	 */
	this.getBackgroundSelectedImage = function() { return this.backgroundSelectedImage; }
	/**
	 * Set the the selected background image url of the view. focusable must be true for normal views. (Android)
	 * @param {String} value New value to set.
	 * @alias Titanium_UI_iPad_Popover.setBackgroundSelectedImage
	 */
	this.setBackgroundSelectedImage = function(value) { this.backgroundSelectedImage = value; }
	/**
	 * End caps specify the portion of an image that should not be resized when an image is stretched. This technique is used to implement buttons and other resizable image-based interface elements. When a button with end caps is resized, the resizing occurs only in the middle of the button, in the region between the end caps. The end caps themselves keep their original size and appearance. This property specifies the size of the top end cap. The middle (stretchable) portion is assumed to be 1 pixel wide. The bottom end cap is therefore computed by adding the size of the top end cap and the middle portion together and then subtracting that value from the height of the image
	 * @alias Titanium_UI_iPad_Popover.backgroundTopCap
	 * @property {Float}
	 */
	this.backgroundTopCap = 0.0
	/**
	 * Get the End caps specify the portion of an image that should not be resized when an image is stretched. This technique is used to implement buttons and other resizable image-based interface elements. When a button with end caps is resized, the resizing occurs only in the middle of the button, in the region between the end caps. The end caps themselves keep their original size and appearance. This property specifies the size of the top end cap. The middle (stretchable) portion is assumed to be 1 pixel wide. The bottom end cap is therefore computed by adding the size of the top end cap and the middle portion together and then subtracting that value from the height of the image
	 * @alias Titanium_UI_iPad_Popover.getBackgroundTopCap
	 * @return {Float}
	 */
	this.getBackgroundTopCap = function() { return this.backgroundTopCap; }
	/**
	 * Set the End caps specify the portion of an image that should not be resized when an image is stretched. This technique is used to implement buttons and other resizable image-based interface elements. When a button with end caps is resized, the resizing occurs only in the middle of the button, in the region between the end caps. The end caps themselves keep their original size and appearance. This property specifies the size of the top end cap. The middle (stretchable) portion is assumed to be 1 pixel wide. The bottom end cap is therefore computed by adding the size of the top end cap and the middle portion together and then subtracting that value from the height of the image
	 * @param {Float} value New value to set.
	 * @alias Titanium_UI_iPad_Popover.setBackgroundTopCap
	 */
	this.setBackgroundTopCap = function(value) { this.backgroundTopCap = value; }
	/**
	 * the border color of the view
	 * @alias Titanium_UI_iPad_Popover.borderColor
	 * @property {String}
	 */
	this.borderColor = ''
	/**
	 * Get the the border color of the view
	 * @alias Titanium_UI_iPad_Popover.getBorderColor
	 * @return {String}
	 */
	this.getBorderColor = function() { return this.borderColor; }
	/**
	 * Set the the border color of the view
	 * @param {String} value New value to set.
	 * @alias Titanium_UI_iPad_Popover.setBorderColor
	 */
	this.setBorderColor = function(value) { this.borderColor = value; }
	/**
	 * the border radius of the view
	 * @alias Titanium_UI_iPad_Popover.borderRadius
	 * @property {Float}
	 */
	this.borderRadius = 0.0
	/**
	 * Get the the border radius of the view
	 * @alias Titanium_UI_iPad_Popover.getBorderRadius
	 * @return {Float}
	 */
	this.getBorderRadius = function() { return this.borderRadius; }
	/**
	 * Set the the border radius of the view
	 * @param {Float} value New value to set.
	 * @alias Titanium_UI_iPad_Popover.setBorderRadius
	 */
	this.setBorderRadius = function(value) { this.borderRadius = value; }
	/**
	 * the border width of the view
	 * @alias Titanium_UI_iPad_Popover.borderWidth
	 * @property {Float}
	 */
	this.borderWidth = 0.0
	/**
	 * Get the the border width of the view
	 * @alias Titanium_UI_iPad_Popover.getBorderWidth
	 * @return {Float}
	 */
	this.getBorderWidth = function() { return this.borderWidth; }
	/**
	 * Set the the border width of the view
	 * @param {Float} value New value to set.
	 * @alias Titanium_UI_iPad_Popover.setBorderWidth
	 */
	this.setBorderWidth = function(value) { this.borderWidth = value; }
	/**
	 * property for the view bottom position. This position is relative to the view's parent. Can be either a float value or a dimension string ie 'auto' (default), '50%' (iPhone only).
	 * @alias Titanium_UI_iPad_Popover.bottom
	 * @property {Float,String}
	 */
	this.bottom = 0.0
	/**
	 * Get the property for the view bottom position. This position is relative to the view's parent. Can be either a float value or a dimension string ie 'auto' (default), '50%' (iPhone only).
	 * @alias Titanium_UI_iPad_Popover.getBottom
	 * @return {Float,String}
	 */
	this.getBottom = function() { return this.bottom; }
	/**
	 * Set the property for the view bottom position. This position is relative to the view's parent. Can be either a float value or a dimension string ie 'auto' (default), '50%' (iPhone only).
	 * @param {Float,String} value New value to set.
	 * @alias Titanium_UI_iPad_Popover.setBottom
	 */
	this.setBottom = function(value) { this.bottom = value; }
	/**
	 * a dictionary with properties x and y to indicate the center of the views position relative to the parent view
	 * @alias Titanium_UI_iPad_Popover.center
	 * @property {Object}
	 */
	this.center = {}
	/**
	 * Get the a dictionary with properties x and y to indicate the center of the views position relative to the parent view
	 * @alias Titanium_UI_iPad_Popover.getCenter
	 * @return {Object}
	 */
	this.getCenter = function() { return this.center; }
	/**
	 * Set the a dictionary with properties x and y to indicate the center of the views position relative to the parent view
	 * @param {Object} value New value to set.
	 * @alias Titanium_UI_iPad_Popover.setCenter
	 */
	this.setCenter = function(value) { this.center = value; }
	/**
	 * Set true if you want a view to be focusable when navigating with the trackball or D-Pad. Default: false. (Android Only)
	 * @alias Titanium_UI_iPad_Popover.focusable
	 * @property {Boolean}
	 */
	this.focusable = false
	/**
	 * Get the Set true if you want a view to be focusable when navigating with the trackball or D-Pad. Default: false. (Android Only)
	 * @alias Titanium_UI_iPad_Popover.getFocusable
	 * @return {Boolean}
	 */
	this.getFocusable = function() { return this.focusable; }
	/**
	 * Set the Set true if you want a view to be focusable when navigating with the trackball or D-Pad. Default: false. (Android Only)
	 * @param {Boolean} value New value to set.
	 * @alias Titanium_UI_iPad_Popover.setFocusable
	 */
	this.setFocusable = function(value) { this.focusable = value; }
	/**
	 * the font family
	 * @alias Titanium_UI_iPad_Popover.font-family
	 * @property {String}
	 */
	this.font-family = ''
	/**
	 * Get the the font family
	 * @alias Titanium_UI_iPad_Popover.getFont-family
	 * @return {String}
	 */
	this.getFont-family = function() { return this.font-family; }
	/**
	 * Set the the font family
	 * @param {String} value New value to set.
	 * @alias Titanium_UI_iPad_Popover.setFont-family
	 */
	this.setFont-family = function(value) { this.font-family = value; }
	/**
	 * the font size
	 * @alias Titanium_UI_iPad_Popover.font-size
	 * @property {String}
	 */
	this.font-size = ''
	/**
	 * Get the the font size
	 * @alias Titanium_UI_iPad_Popover.getFont-size
	 * @return {String}
	 */
	this.getFont-size = function() { return this.font-size; }
	/**
	 * Set the the font size
	 * @param {String} value New value to set.
	 * @alias Titanium_UI_iPad_Popover.setFont-size
	 */
	this.setFont-size = function(value) { this.font-size = value; }
	/**
	 * the font style, either normal or italics
	 * @alias Titanium_UI_iPad_Popover.font-style
	 * @property {String}
	 */
	this.font-style = ''
	/**
	 * Get the the font style, either normal or italics
	 * @alias Titanium_UI_iPad_Popover.getFont-style
	 * @return {String}
	 */
	this.getFont-style = function() { return this.font-style; }
	/**
	 * Set the the font style, either normal or italics
	 * @param {String} value New value to set.
	 * @alias Titanium_UI_iPad_Popover.setFont-style
	 */
	this.setFont-style = function(value) { this.font-style = value; }
	/**
	 * the font weight, either normal or bold
	 * @alias Titanium_UI_iPad_Popover.font-weight
	 * @property {String}
	 */
	this.font-weight = ''
	/**
	 * Get the the font weight, either normal or bold
	 * @alias Titanium_UI_iPad_Popover.getFont-weight
	 * @return {String}
	 */
	this.getFont-weight = function() { return this.font-weight; }
	/**
	 * Set the the font weight, either normal or bold
	 * @param {String} value New value to set.
	 * @alias Titanium_UI_iPad_Popover.setFont-weight
	 */
	this.setFont-weight = function(value) { this.font-weight = value; }
	/**
	 * height of the popover
	 * @alias Titanium_UI_iPad_Popover.height
	 * @property {Float}
	 */
	this.height = 0.0
	/**
	 * Get the height of the popover
	 * @alias Titanium_UI_iPad_Popover.getHeight
	 * @return {Float}
	 */
	this.getHeight = function() { return this.height; }
	/**
	 * Set the height of the popover
	 * @param {Float} value New value to set.
	 * @alias Titanium_UI_iPad_Popover.setHeight
	 */
	this.setHeight = function(value) { this.height = value; }
	/**
	 * property for the view left position. This position is relative to the view's parent. Can be either a float value or a dimension string ie 'auto' (default), '50%' (iPhone only).
	 * @alias Titanium_UI_iPad_Popover.left
	 * @property {Float,String}
	 */
	this.left = 0.0
	/**
	 * Get the property for the view left position. This position is relative to the view's parent. Can be either a float value or a dimension string ie 'auto' (default), '50%' (iPhone only).
	 * @alias Titanium_UI_iPad_Popover.getLeft
	 * @return {Float,String}
	 */
	this.getLeft = function() { return this.left; }
	/**
	 * Set the property for the view left position. This position is relative to the view's parent. Can be either a float value or a dimension string ie 'auto' (default), '50%' (iPhone only).
	 * @param {Float,String} value New value to set.
	 * @alias Titanium_UI_iPad_Popover.setLeft
	 */
	this.setLeft = function(value) { this.left = value; }
	/**
	 * the left button in the nav area of the popover
	 * @alias Titanium_UI_iPad_Popover.leftNavButton
	 * @property {Object}
	 */
	this.leftNavButton = {}
	/**
	 * Get the the left button in the nav area of the popover
	 * @alias Titanium_UI_iPad_Popover.getLeftNavButton
	 * @return {Object}
	 */
	this.getLeftNavButton = function() { return this.leftNavButton; }
	/**
	 * Set the the left button in the nav area of the popover
	 * @param {Object} value New value to set.
	 * @alias Titanium_UI_iPad_Popover.setLeftNavButton
	 */
	this.setLeftNavButton = function(value) { this.leftNavButton = value; }
	/**
	 * the opacity from 0.0-1.0
	 * @alias Titanium_UI_iPad_Popover.opacity
	 * @property {Float}
	 */
	this.opacity = 0.0
	/**
	 * Get the the opacity from 0.0-1.0
	 * @alias Titanium_UI_iPad_Popover.getOpacity
	 * @return {Float}
	 */
	this.getOpacity = function() { return this.opacity; }
	/**
	 * Set the the opacity from 0.0-1.0
	 * @param {Float} value New value to set.
	 * @alias Titanium_UI_iPad_Popover.setOpacity
	 */
	this.setOpacity = function(value) { this.opacity = value; }
	/**
	 * property for the view right position. This position is relative to the view's parent. Can be either a float value or a dimension string ie 'auto' (default), '50%' (iPhone only).
	 * @alias Titanium_UI_iPad_Popover.right
	 * @property {Float,String}
	 */
	this.right = 0.0
	/**
	 * Get the property for the view right position. This position is relative to the view's parent. Can be either a float value or a dimension string ie 'auto' (default), '50%' (iPhone only).
	 * @alias Titanium_UI_iPad_Popover.getRight
	 * @return {Float,String}
	 */
	this.getRight = function() { return this.right; }
	/**
	 * Set the property for the view right position. This position is relative to the view's parent. Can be either a float value or a dimension string ie 'auto' (default), '50%' (iPhone only).
	 * @param {Float,String} value New value to set.
	 * @alias Titanium_UI_iPad_Popover.setRight
	 */
	this.setRight = function(value) { this.right = value; }
	/**
	 * the size of the view as a dictionary of width and height properties
	 * @alias Titanium_UI_iPad_Popover.size
	 * @property {Object}
	 */
	this.size = {}
	/**
	 * Get the the size of the view as a dictionary of width and height properties
	 * @alias Titanium_UI_iPad_Popover.getSize
	 * @return {Object}
	 */
	this.getSize = function() { return this.size; }
	/**
	 * Set the the size of the view as a dictionary of width and height properties
	 * @param {Object} value New value to set.
	 * @alias Titanium_UI_iPad_Popover.setSize
	 */
	this.setSize = function(value) { this.size = value; }
	/**
	 * One of Titanium.UI.Android.SOFT_KEYBOARD_DEFAULT_ON_FOCUS, Titanium.UI.Android.SOFT_KEYBOARD_HIDE_ON_FOCUS, or Titanium.UI.Android.SOFT_KEYBOARD_SHOW_ON_FOCUS. (Android only)
	 * @alias Titanium_UI_iPad_Popover.softKeyboardOnFocus
	 * @property {Integer}
	 */
	this.softKeyboardOnFocus = 0
	/**
	 * Get the One of Titanium.UI.Android.SOFT_KEYBOARD_DEFAULT_ON_FOCUS, Titanium.UI.Android.SOFT_KEYBOARD_HIDE_ON_FOCUS, or Titanium.UI.Android.SOFT_KEYBOARD_SHOW_ON_FOCUS. (Android only)
	 * @alias Titanium_UI_iPad_Popover.getSoftKeyboardOnFocus
	 * @return {Integer}
	 */
	this.getSoftKeyboardOnFocus = function() { return this.softKeyboardOnFocus; }
	/**
	 * Set the One of Titanium.UI.Android.SOFT_KEYBOARD_DEFAULT_ON_FOCUS, Titanium.UI.Android.SOFT_KEYBOARD_HIDE_ON_FOCUS, or Titanium.UI.Android.SOFT_KEYBOARD_SHOW_ON_FOCUS. (Android only)
	 * @param {Integer} value New value to set.
	 * @alias Titanium_UI_iPad_Popover.setSoftKeyboardOnFocus
	 */
	this.setSoftKeyboardOnFocus = function(value) { this.softKeyboardOnFocus = value; }
	/**
	 * the title of the nav area of the popover
	 * @alias Titanium_UI_iPad_Popover.title
	 * @property {String}
	 */
	this.title = ''
	/**
	 * Get the the title of the nav area of the popover
	 * @alias Titanium_UI_iPad_Popover.getTitle
	 * @return {String}
	 */
	this.getTitle = function() { return this.title; }
	/**
	 * Set the the title of the nav area of the popover
	 * @param {String} value New value to set.
	 * @alias Titanium_UI_iPad_Popover.setTitle
	 */
	this.setTitle = function(value) { this.title = value; }
	/**
	 * property for the view top position. This position is relative to the view's parent. Can be either a float value or a dimension string ie 'auto' (default), '50%' (iPhone only).
	 * @alias Titanium_UI_iPad_Popover.top
	 * @property {Float,String}
	 */
	this.top = 0.0
	/**
	 * Get the property for the view top position. This position is relative to the view's parent. Can be either a float value or a dimension string ie 'auto' (default), '50%' (iPhone only).
	 * @alias Titanium_UI_iPad_Popover.getTop
	 * @return {Float,String}
	 */
	this.getTop = function() { return this.top; }
	/**
	 * Set the property for the view top position. This position is relative to the view's parent. Can be either a float value or a dimension string ie 'auto' (default), '50%' (iPhone only).
	 * @param {Float,String} value New value to set.
	 * @alias Titanium_UI_iPad_Popover.setTop
	 */
	this.setTop = function(value) { this.top = value; }
	/**
	 * a boolean indicating if the view should receive touch events (true, default) or forward them to peers (false)
	 * @alias Titanium_UI_iPad_Popover.touchEnabled
	 * @property {Boolean}
	 */
	this.touchEnabled = false
	/**
	 * Get the a boolean indicating if the view should receive touch events (true, default) or forward them to peers (false)
	 * @alias Titanium_UI_iPad_Popover.getTouchEnabled
	 * @return {Boolean}
	 */
	this.getTouchEnabled = function() { return this.touchEnabled; }
	/**
	 * Set the a boolean indicating if the view should receive touch events (true, default) or forward them to peers (false)
	 * @param {Boolean} value New value to set.
	 * @alias Titanium_UI_iPad_Popover.setTouchEnabled
	 */
	this.setTouchEnabled = function(value) { this.touchEnabled = value; }
	/**
	 * the transformation matrix to apply to the view
	 * @alias Titanium_UI_iPad_Popover.transform
	 * @property {Object}
	 */
	this.transform = {}
	/**
	 * Get the the transformation matrix to apply to the view
	 * @alias Titanium_UI_iPad_Popover.getTransform
	 * @return {Object}
	 */
	this.getTransform = function() { return this.transform; }
	/**
	 * Set the the transformation matrix to apply to the view
	 * @param {Object} value New value to set.
	 * @alias Titanium_UI_iPad_Popover.setTransform
	 */
	this.setTransform = function(value) { this.transform = value; }
	/**
	 * boolean to indicate if the popover is visible
	 * @alias Titanium_UI_iPad_Popover.visible
	 * @property {Boolean}
	 */
	this.visible = false
	/**
	 * Get the boolean to indicate if the popover is visible
	 * @alias Titanium_UI_iPad_Popover.getVisible
	 * @return {Boolean}
	 */
	this.getVisible = function() { return this.visible; }
	/**
	 * Set the boolean to indicate if the popover is visible
	 * @param {Boolean} value New value to set.
	 * @alias Titanium_UI_iPad_Popover.setVisible
	 */
	this.setVisible = function(value) { this.visible = value; }
	/**
	 * width of the popover
	 * @alias Titanium_UI_iPad_Popover.width
	 * @property {Float}
	 */
	this.width = 0.0
	/**
	 * Get the width of the popover
	 * @alias Titanium_UI_iPad_Popover.getWidth
	 * @return {Float}
	 */
	this.getWidth = function() { return this.width; }
	/**
	 * Set the width of the popover
	 * @param {Float} value New value to set.
	 * @alias Titanium_UI_iPad_Popover.setWidth
	 */
	this.setWidth = function(value) { this.width = value; }
	/**
	 * the z index position relative to other sibling views
	 * @alias Titanium_UI_iPad_Popover.zIndex
	 * @property {Integer}
	 */
	this.zIndex = 0
	/**
	 * Get the the z index position relative to other sibling views
	 * @alias Titanium_UI_iPad_Popover.getZIndex
	 * @return {Integer}
	 */
	this.getZIndex = function() { return this.zIndex; }
	/**
	 * Set the the z index position relative to other sibling views
	 * @param {Integer} value New value to set.
	 * @alias Titanium_UI_iPad_Popover.setZIndex
	 */
	this.setZIndex = function(value) { this.zIndex = value; }
	/**
	 * add a child to the view hierarchy
	 * @param {Object} view the view to add to this views hiearchy
	 * @alias Titanium_UI_iPad_Popover.add
	 */
	this.add = function add(view) { }
	/**
	 * add an event listener for the instance to receive view triggered events
	 * @param {String} name name of the event
	 * @param {Function} callback callback function to invoke when the event is fired
	 * @alias Titanium_UI_iPad_Popover.addEventListener
	 */
	this.addEventListener = function addEventListener(name,callback) { }
	/**
	 * animate the view
	 * @param {Object} obj either a dictionary of animation properties or an Animation object
	 * @param {Function} callback function to be invoked upon completion of the animation
	 * @alias Titanium_UI_iPad_Popover.animate
	 */
	this.animate = function animate(obj,callback) { }
	/**
	 * fire a synthesized event to the views listener
	 * @param {String} name name of the event
	 * @param {Object} event event object
	 * @alias Titanium_UI_iPad_Popover.fireEvent
	 */
	this.fireEvent = function fireEvent(name,event) { }
	/**
	 * hide the popover
	 * @param {Object} options dictionary with optional boolean property <tt>animated</tt> which indicates if the popover should be hidden with animation (defaults to true) or not
	 * @alias Titanium_UI_iPad_Popover.hide
	 */
	this.hide = function hide(options) { }
	/**
	 * remove a previously add view from the view hiearchy
	 * @param {Object} view the view to remove from this views hiearchy
	 * @alias Titanium_UI_iPad_Popover.remove
	 */
	this.remove = function remove(view) { }
	/**
	 * remove a previously added event listener
	 * @param {String} name name of the event
	 * @param {Function} callback callback function passed in addEventListener
	 * @alias Titanium_UI_iPad_Popover.removeEventListener
	 */
	this.removeEventListener = function removeEventListener(name,callback) { }
	/**
	 * change the height of the popover
	 * @param {Integer,String} height height of the popover
	 * @alias Titanium_UI_iPad_Popover.setHeight
	 */
	this.setHeight = function setHeight(height) { }
	/**
	 * change the width of the popover
	 * @param {Integer,String} width width of the popover
	 * @alias Titanium_UI_iPad_Popover.setWidth
	 */
	this.setWidth = function setWidth(width) { }
	/**
	 * show the popover
	 * @param {Object} options dictionary of the following properties: <tt>rect</tt>, <tt>animated</tt> and <tt>view</tt>. The <tt>view</tt> property should specify the view relative to where the popover should display.  <tt>animated</tt> is a boolean indicating if the showing of the popover should be animated, defaults to true. The property <tt>rect</tt> is a dictionary with the following properties: <tt>x</tt>, <tt>y</tt>, <tt>width</tt> and <tt>height</tt>, where the rectangle in <tt>view</tt> at which to anchor the popover.
	 * @alias Titanium_UI_iPad_Popover.show
	 */
	this.show = function show(options) { }
	/**
	 * return a Blob image of the rendered view
	 * @param {Function} f function to be invoked upon completion. if non-null, this method will be performed asynchronously. if null, it will be performed immediately
	 * @alias Titanium_UI_iPad_Popover.toImage
	 * @return {Object}
	 */
	this.toImage = function toImage(f) { return {}; }
};

/**
 * A SplitWindow is a window that manages the presentation of two side-by-side view controllers. You use this class to implement a master-detail interface, in which the left-side view presents a list of items and the right-side presents details of the selected item. The SplitView is for use exclusively on iPad devices. The SplitWindow is created by the method Titanium.UI.iPad.createSplitWindow.
 * @since 1.2
 */
function Titanium_UI_iPad_SplitWindow() {
	/**
	 * a dictionary with properties x and y to indicate the anchor point value. anchor specifies the position by which animation should occur. center is 0.5, 0.5
	 * @alias Titanium_UI_iPad_SplitWindow.anchorPoint
	 * @property {Object}
	 */
	this.anchorPoint = {}
	/**
	 * Get the a dictionary with properties x and y to indicate the anchor point value. anchor specifies the position by which animation should occur. center is 0.5, 0.5
	 * @alias Titanium_UI_iPad_SplitWindow.getAnchorPoint
	 * @return {Object}
	 */
	this.getAnchorPoint = function() { return this.anchorPoint; }
	/**
	 * Set the a dictionary with properties x and y to indicate the anchor point value. anchor specifies the position by which animation should occur. center is 0.5, 0.5
	 * @param {Object} value New value to set.
	 * @alias Titanium_UI_iPad_SplitWindow.setAnchorPoint
	 */
	this.setAnchorPoint = function(value) { this.anchorPoint = value; }
	/**
	 * read-only object with x and y properties of where the view is during animation
	 * @alias Titanium_UI_iPad_SplitWindow.animatedCenterPoint
	 * @property {Object}
	 */
	this.animatedCenterPoint = {}
	/**
	 * Get the read-only object with x and y properties of where the view is during animation
	 * @alias Titanium_UI_iPad_SplitWindow.getAnimatedCenterPoint
	 * @return {Object}
	 */
	this.getAnimatedCenterPoint = function() { return this.animatedCenterPoint; }
	/**
	 * Set the read-only object with x and y properties of where the view is during animation
	 * @param {Object} value New value to set.
	 * @alias Titanium_UI_iPad_SplitWindow.setAnimatedCenterPoint
	 */
	this.setAnimatedCenterPoint = function(value) { this.animatedCenterPoint = value; }
	/**
	 * the background color of the view
	 * @alias Titanium_UI_iPad_SplitWindow.backgroundColor
	 * @property {String}
	 */
	this.backgroundColor = ''
	/**
	 * Get the the background color of the view
	 * @alias Titanium_UI_iPad_SplitWindow.getBackgroundColor
	 * @return {String}
	 */
	this.getBackgroundColor = function() { return this.backgroundColor; }
	/**
	 * Set the the background color of the view
	 * @param {String} value New value to set.
	 * @alias Titanium_UI_iPad_SplitWindow.setBackgroundColor
	 */
	this.setBackgroundColor = function(value) { this.backgroundColor = value; }
	/**
	 * the disabled background color of the view. (Android)
	 * @alias Titanium_UI_iPad_SplitWindow.backgroundDisabledColor
	 * @property {String}
	 */
	this.backgroundDisabledColor = ''
	/**
	 * Get the the disabled background color of the view. (Android)
	 * @alias Titanium_UI_iPad_SplitWindow.getBackgroundDisabledColor
	 * @return {String}
	 */
	this.getBackgroundDisabledColor = function() { return this.backgroundDisabledColor; }
	/**
	 * Set the the disabled background color of the view. (Android)
	 * @param {String} value New value to set.
	 * @alias Titanium_UI_iPad_SplitWindow.setBackgroundDisabledColor
	 */
	this.setBackgroundDisabledColor = function(value) { this.backgroundDisabledColor = value; }
	/**
	 * the disabled background image url of the view. (Android)
	 * @alias Titanium_UI_iPad_SplitWindow.backgroundDisabledImage
	 * @property {String}
	 */
	this.backgroundDisabledImage = ''
	/**
	 * Get the the disabled background image url of the view. (Android)
	 * @alias Titanium_UI_iPad_SplitWindow.getBackgroundDisabledImage
	 * @return {String}
	 */
	this.getBackgroundDisabledImage = function() { return this.backgroundDisabledImage; }
	/**
	 * Set the the disabled background image url of the view. (Android)
	 * @param {String} value New value to set.
	 * @alias Titanium_UI_iPad_SplitWindow.setBackgroundDisabledImage
	 */
	this.setBackgroundDisabledImage = function(value) { this.backgroundDisabledImage = value; }
	/**
	 * the focused background color of the view. focusable must be true for normal views. (Android)
	 * @alias Titanium_UI_iPad_SplitWindow.backgroundFocusedColor
	 * @property {String}
	 */
	this.backgroundFocusedColor = ''
	/**
	 * Get the the focused background color of the view. focusable must be true for normal views. (Android)
	 * @alias Titanium_UI_iPad_SplitWindow.getBackgroundFocusedColor
	 * @return {String}
	 */
	this.getBackgroundFocusedColor = function() { return this.backgroundFocusedColor; }
	/**
	 * Set the the focused background color of the view. focusable must be true for normal views. (Android)
	 * @param {String} value New value to set.
	 * @alias Titanium_UI_iPad_SplitWindow.setBackgroundFocusedColor
	 */
	this.setBackgroundFocusedColor = function(value) { this.backgroundFocusedColor = value; }
	/**
	 * the focused background image url of the view. focusable must be true for normal views. (Android)
	 * @alias Titanium_UI_iPad_SplitWindow.backgroundFocusedImage
	 * @property {String}
	 */
	this.backgroundFocusedImage = ''
	/**
	 * Get the the focused background image url of the view. focusable must be true for normal views. (Android)
	 * @alias Titanium_UI_iPad_SplitWindow.getBackgroundFocusedImage
	 * @return {String}
	 */
	this.getBackgroundFocusedImage = function() { return this.backgroundFocusedImage; }
	/**
	 * Set the the focused background image url of the view. focusable must be true for normal views. (Android)
	 * @param {String} value New value to set.
	 * @alias Titanium_UI_iPad_SplitWindow.setBackgroundFocusedImage
	 */
	this.setBackgroundFocusedImage = function(value) { this.backgroundFocusedImage = value; }
	/**
	 * a background gradient for the view with the properties: type,startPoint,endPoint,startRadius,endRadius,backfillStart,backfillEnd,colors.
	 * @alias Titanium_UI_iPad_SplitWindow.backgroundGradient
	 * @property {Object}
	 */
	this.backgroundGradient = {}
	/**
	 * Get the a background gradient for the view with the properties: type,startPoint,endPoint,startRadius,endRadius,backfillStart,backfillEnd,colors.
	 * @alias Titanium_UI_iPad_SplitWindow.getBackgroundGradient
	 * @return {Object}
	 */
	this.getBackgroundGradient = function() { return this.backgroundGradient; }
	/**
	 * Set the a background gradient for the view with the properties: type,startPoint,endPoint,startRadius,endRadius,backfillStart,backfillEnd,colors.
	 * @param {Object} value New value to set.
	 * @alias Titanium_UI_iPad_SplitWindow.setBackgroundGradient
	 */
	this.setBackgroundGradient = function(value) { this.backgroundGradient = value; }
	/**
	 * the background image url of the view
	 * @alias Titanium_UI_iPad_SplitWindow.backgroundImage
	 * @property {String}
	 */
	this.backgroundImage = ''
	/**
	 * Get the the background image url of the view
	 * @alias Titanium_UI_iPad_SplitWindow.getBackgroundImage
	 * @return {String}
	 */
	this.getBackgroundImage = function() { return this.backgroundImage; }
	/**
	 * Set the the background image url of the view
	 * @param {String} value New value to set.
	 * @alias Titanium_UI_iPad_SplitWindow.setBackgroundImage
	 */
	this.setBackgroundImage = function(value) { this.backgroundImage = value; }
	/**
	 * End caps specify the portion of an image that should not be resized when an image is stretched. This technique is used to implement buttons and other resizable image-based interface elements. When a button with end caps is resized, the resizing occurs only in the middle of the button, in the region between the end caps. The end caps themselves keep their original size and appearance. This property specifies the size of the left end cap. The middle (stretchable) portion is assumed to be 1 pixel wide. The right end cap is therefore computed by adding the size of the left end cap and the middle portion together and then subtracting that value from the width of the image
	 * @alias Titanium_UI_iPad_SplitWindow.backgroundLeftCap
	 * @property {Float}
	 */
	this.backgroundLeftCap = 0.0
	/**
	 * Get the End caps specify the portion of an image that should not be resized when an image is stretched. This technique is used to implement buttons and other resizable image-based interface elements. When a button with end caps is resized, the resizing occurs only in the middle of the button, in the region between the end caps. The end caps themselves keep their original size and appearance. This property specifies the size of the left end cap. The middle (stretchable) portion is assumed to be 1 pixel wide. The right end cap is therefore computed by adding the size of the left end cap and the middle portion together and then subtracting that value from the width of the image
	 * @alias Titanium_UI_iPad_SplitWindow.getBackgroundLeftCap
	 * @return {Float}
	 */
	this.getBackgroundLeftCap = function() { return this.backgroundLeftCap; }
	/**
	 * Set the End caps specify the portion of an image that should not be resized when an image is stretched. This technique is used to implement buttons and other resizable image-based interface elements. When a button with end caps is resized, the resizing occurs only in the middle of the button, in the region between the end caps. The end caps themselves keep their original size and appearance. This property specifies the size of the left end cap. The middle (stretchable) portion is assumed to be 1 pixel wide. The right end cap is therefore computed by adding the size of the left end cap and the middle portion together and then subtracting that value from the width of the image
	 * @param {Float} value New value to set.
	 * @alias Titanium_UI_iPad_SplitWindow.setBackgroundLeftCap
	 */
	this.setBackgroundLeftCap = function(value) { this.backgroundLeftCap = value; }
	/**
	 * the selected background color of the view. focusable must be true for normal views. (Android)
	 * @alias Titanium_UI_iPad_SplitWindow.backgroundSelectedColor
	 * @property {String}
	 */
	this.backgroundSelectedColor = ''
	/**
	 * Get the the selected background color of the view. focusable must be true for normal views. (Android)
	 * @alias Titanium_UI_iPad_SplitWindow.getBackgroundSelectedColor
	 * @return {String}
	 */
	this.getBackgroundSelectedColor = function() { return this.backgroundSelectedColor; }
	/**
	 * Set the the selected background color of the view. focusable must be true for normal views. (Android)
	 * @param {String} value New value to set.
	 * @alias Titanium_UI_iPad_SplitWindow.setBackgroundSelectedColor
	 */
	this.setBackgroundSelectedColor = function(value) { this.backgroundSelectedColor = value; }
	/**
	 * the selected background image url of the view. focusable must be true for normal views. (Android)
	 * @alias Titanium_UI_iPad_SplitWindow.backgroundSelectedImage
	 * @property {String}
	 */
	this.backgroundSelectedImage = ''
	/**
	 * Get the the selected background image url of the view. focusable must be true for normal views. (Android)
	 * @alias Titanium_UI_iPad_SplitWindow.getBackgroundSelectedImage
	 * @return {String}
	 */
	this.getBackgroundSelectedImage = function() { return this.backgroundSelectedImage; }
	/**
	 * Set the the selected background image url of the view. focusable must be true for normal views. (Android)
	 * @param {String} value New value to set.
	 * @alias Titanium_UI_iPad_SplitWindow.setBackgroundSelectedImage
	 */
	this.setBackgroundSelectedImage = function(value) { this.backgroundSelectedImage = value; }
	/**
	 * End caps specify the portion of an image that should not be resized when an image is stretched. This technique is used to implement buttons and other resizable image-based interface elements. When a button with end caps is resized, the resizing occurs only in the middle of the button, in the region between the end caps. The end caps themselves keep their original size and appearance. This property specifies the size of the top end cap. The middle (stretchable) portion is assumed to be 1 pixel wide. The bottom end cap is therefore computed by adding the size of the top end cap and the middle portion together and then subtracting that value from the height of the image
	 * @alias Titanium_UI_iPad_SplitWindow.backgroundTopCap
	 * @property {Float}
	 */
	this.backgroundTopCap = 0.0
	/**
	 * Get the End caps specify the portion of an image that should not be resized when an image is stretched. This technique is used to implement buttons and other resizable image-based interface elements. When a button with end caps is resized, the resizing occurs only in the middle of the button, in the region between the end caps. The end caps themselves keep their original size and appearance. This property specifies the size of the top end cap. The middle (stretchable) portion is assumed to be 1 pixel wide. The bottom end cap is therefore computed by adding the size of the top end cap and the middle portion together and then subtracting that value from the height of the image
	 * @alias Titanium_UI_iPad_SplitWindow.getBackgroundTopCap
	 * @return {Float}
	 */
	this.getBackgroundTopCap = function() { return this.backgroundTopCap; }
	/**
	 * Set the End caps specify the portion of an image that should not be resized when an image is stretched. This technique is used to implement buttons and other resizable image-based interface elements. When a button with end caps is resized, the resizing occurs only in the middle of the button, in the region between the end caps. The end caps themselves keep their original size and appearance. This property specifies the size of the top end cap. The middle (stretchable) portion is assumed to be 1 pixel wide. The bottom end cap is therefore computed by adding the size of the top end cap and the middle portion together and then subtracting that value from the height of the image
	 * @param {Float} value New value to set.
	 * @alias Titanium_UI_iPad_SplitWindow.setBackgroundTopCap
	 */
	this.setBackgroundTopCap = function(value) { this.backgroundTopCap = value; }
	/**
	 * the border color of the view
	 * @alias Titanium_UI_iPad_SplitWindow.borderColor
	 * @property {String}
	 */
	this.borderColor = ''
	/**
	 * Get the the border color of the view
	 * @alias Titanium_UI_iPad_SplitWindow.getBorderColor
	 * @return {String}
	 */
	this.getBorderColor = function() { return this.borderColor; }
	/**
	 * Set the the border color of the view
	 * @param {String} value New value to set.
	 * @alias Titanium_UI_iPad_SplitWindow.setBorderColor
	 */
	this.setBorderColor = function(value) { this.borderColor = value; }
	/**
	 * the border radius of the view
	 * @alias Titanium_UI_iPad_SplitWindow.borderRadius
	 * @property {Float}
	 */
	this.borderRadius = 0.0
	/**
	 * Get the the border radius of the view
	 * @alias Titanium_UI_iPad_SplitWindow.getBorderRadius
	 * @return {Float}
	 */
	this.getBorderRadius = function() { return this.borderRadius; }
	/**
	 * Set the the border radius of the view
	 * @param {Float} value New value to set.
	 * @alias Titanium_UI_iPad_SplitWindow.setBorderRadius
	 */
	this.setBorderRadius = function(value) { this.borderRadius = value; }
	/**
	 * the border width of the view
	 * @alias Titanium_UI_iPad_SplitWindow.borderWidth
	 * @property {Float}
	 */
	this.borderWidth = 0.0
	/**
	 * Get the the border width of the view
	 * @alias Titanium_UI_iPad_SplitWindow.getBorderWidth
	 * @return {Float}
	 */
	this.getBorderWidth = function() { return this.borderWidth; }
	/**
	 * Set the the border width of the view
	 * @param {Float} value New value to set.
	 * @alias Titanium_UI_iPad_SplitWindow.setBorderWidth
	 */
	this.setBorderWidth = function(value) { this.borderWidth = value; }
	/**
	 * property for the view bottom position. This position is relative to the view's parent. Can be either a float value or a dimension string ie 'auto' (default), '50%' (iPhone only).
	 * @alias Titanium_UI_iPad_SplitWindow.bottom
	 * @property {Float,String}
	 */
	this.bottom = 0.0
	/**
	 * Get the property for the view bottom position. This position is relative to the view's parent. Can be either a float value or a dimension string ie 'auto' (default), '50%' (iPhone only).
	 * @alias Titanium_UI_iPad_SplitWindow.getBottom
	 * @return {Float,String}
	 */
	this.getBottom = function() { return this.bottom; }
	/**
	 * Set the property for the view bottom position. This position is relative to the view's parent. Can be either a float value or a dimension string ie 'auto' (default), '50%' (iPhone only).
	 * @param {Float,String} value New value to set.
	 * @alias Titanium_UI_iPad_SplitWindow.setBottom
	 */
	this.setBottom = function(value) { this.bottom = value; }
	/**
	 * a dictionary with properties x and y to indicate the center of the views position relative to the parent view
	 * @alias Titanium_UI_iPad_SplitWindow.center
	 * @property {Object}
	 */
	this.center = {}
	/**
	 * Get the a dictionary with properties x and y to indicate the center of the views position relative to the parent view
	 * @alias Titanium_UI_iPad_SplitWindow.getCenter
	 * @return {Object}
	 */
	this.getCenter = function() { return this.center; }
	/**
	 * Set the a dictionary with properties x and y to indicate the center of the views position relative to the parent view
	 * @param {Object} value New value to set.
	 * @alias Titanium_UI_iPad_SplitWindow.setCenter
	 */
	this.setCenter = function(value) { this.center = value; }
	/**
	 * view for the detail view section of the SplitWindow
	 * @alias Titanium_UI_iPad_SplitWindow.detailView
	 * @property {Object}
	 */
	this.detailView = {}
	/**
	 * Get the view for the detail view section of the SplitWindow
	 * @alias Titanium_UI_iPad_SplitWindow.getDetailView
	 * @return {Object}
	 */
	this.getDetailView = function() { return this.detailView; }
	/**
	 * Set the view for the detail view section of the SplitWindow
	 * @param {Object} value New value to set.
	 * @alias Titanium_UI_iPad_SplitWindow.setDetailView
	 */
	this.setDetailView = function(value) { this.detailView = value; }
	/**
	 * Set true if you want a view to be focusable when navigating with the trackball or D-Pad. Default: false. (Android Only)
	 * @alias Titanium_UI_iPad_SplitWindow.focusable
	 * @property {Boolean}
	 */
	this.focusable = false
	/**
	 * Get the Set true if you want a view to be focusable when navigating with the trackball or D-Pad. Default: false. (Android Only)
	 * @alias Titanium_UI_iPad_SplitWindow.getFocusable
	 * @return {Boolean}
	 */
	this.getFocusable = function() { return this.focusable; }
	/**
	 * Set the Set true if you want a view to be focusable when navigating with the trackball or D-Pad. Default: false. (Android Only)
	 * @param {Boolean} value New value to set.
	 * @alias Titanium_UI_iPad_SplitWindow.setFocusable
	 */
	this.setFocusable = function(value) { this.focusable = value; }
	/**
	 * the font family
	 * @alias Titanium_UI_iPad_SplitWindow.font-family
	 * @property {String}
	 */
	this.font-family = ''
	/**
	 * Get the the font family
	 * @alias Titanium_UI_iPad_SplitWindow.getFont-family
	 * @return {String}
	 */
	this.getFont-family = function() { return this.font-family; }
	/**
	 * Set the the font family
	 * @param {String} value New value to set.
	 * @alias Titanium_UI_iPad_SplitWindow.setFont-family
	 */
	this.setFont-family = function(value) { this.font-family = value; }
	/**
	 * the font size
	 * @alias Titanium_UI_iPad_SplitWindow.font-size
	 * @property {String}
	 */
	this.font-size = ''
	/**
	 * Get the the font size
	 * @alias Titanium_UI_iPad_SplitWindow.getFont-size
	 * @return {String}
	 */
	this.getFont-size = function() { return this.font-size; }
	/**
	 * Set the the font size
	 * @param {String} value New value to set.
	 * @alias Titanium_UI_iPad_SplitWindow.setFont-size
	 */
	this.setFont-size = function(value) { this.font-size = value; }
	/**
	 * the font style, either normal or italics
	 * @alias Titanium_UI_iPad_SplitWindow.font-style
	 * @property {String}
	 */
	this.font-style = ''
	/**
	 * Get the the font style, either normal or italics
	 * @alias Titanium_UI_iPad_SplitWindow.getFont-style
	 * @return {String}
	 */
	this.getFont-style = function() { return this.font-style; }
	/**
	 * Set the the font style, either normal or italics
	 * @param {String} value New value to set.
	 * @alias Titanium_UI_iPad_SplitWindow.setFont-style
	 */
	this.setFont-style = function(value) { this.font-style = value; }
	/**
	 * the font weight, either normal or bold
	 * @alias Titanium_UI_iPad_SplitWindow.font-weight
	 * @property {String}
	 */
	this.font-weight = ''
	/**
	 * Get the the font weight, either normal or bold
	 * @alias Titanium_UI_iPad_SplitWindow.getFont-weight
	 * @return {String}
	 */
	this.getFont-weight = function() { return this.font-weight; }
	/**
	 * Set the the font weight, either normal or bold
	 * @param {String} value New value to set.
	 * @alias Titanium_UI_iPad_SplitWindow.setFont-weight
	 */
	this.setFont-weight = function(value) { this.font-weight = value; }
	/**
	 * property for the view height. Can be either a float value or a dimension string ie 'auto' (default), '50%' (iPhone only).
	 * @alias Titanium_UI_iPad_SplitWindow.height
	 * @property {Float,String}
	 */
	this.height = 0.0
	/**
	 * Get the property for the view height. Can be either a float value or a dimension string ie 'auto' (default), '50%' (iPhone only).
	 * @alias Titanium_UI_iPad_SplitWindow.getHeight
	 * @return {Float,String}
	 */
	this.getHeight = function() { return this.height; }
	/**
	 * Set the property for the view height. Can be either a float value or a dimension string ie 'auto' (default), '50%' (iPhone only).
	 * @param {Float,String} value New value to set.
	 * @alias Titanium_UI_iPad_SplitWindow.setHeight
	 */
	this.setHeight = function(value) { this.height = value; }
	/**
	 * property for the view left position. This position is relative to the view's parent. Can be either a float value or a dimension string ie 'auto' (default), '50%' (iPhone only).
	 * @alias Titanium_UI_iPad_SplitWindow.left
	 * @property {Float,String}
	 */
	this.left = 0.0
	/**
	 * Get the property for the view left position. This position is relative to the view's parent. Can be either a float value or a dimension string ie 'auto' (default), '50%' (iPhone only).
	 * @alias Titanium_UI_iPad_SplitWindow.getLeft
	 * @return {Float,String}
	 */
	this.getLeft = function() { return this.left; }
	/**
	 * Set the property for the view left position. This position is relative to the view's parent. Can be either a float value or a dimension string ie 'auto' (default), '50%' (iPhone only).
	 * @param {Float,String} value New value to set.
	 * @alias Titanium_UI_iPad_SplitWindow.setLeft
	 */
	this.setLeft = function(value) { this.left = value; }
	/**
	 * view for the master view section of the SplitWindow
	 * @alias Titanium_UI_iPad_SplitWindow.masterView
	 * @property {Object}
	 */
	this.masterView = {}
	/**
	 * Get the view for the master view section of the SplitWindow
	 * @alias Titanium_UI_iPad_SplitWindow.getMasterView
	 * @return {Object}
	 */
	this.getMasterView = function() { return this.masterView; }
	/**
	 * Set the view for the master view section of the SplitWindow
	 * @param {Object} value New value to set.
	 * @alias Titanium_UI_iPad_SplitWindow.setMasterView
	 */
	this.setMasterView = function(value) { this.masterView = value; }
	/**
	 * the opacity from 0.0-1.0
	 * @alias Titanium_UI_iPad_SplitWindow.opacity
	 * @property {Float}
	 */
	this.opacity = 0.0
	/**
	 * Get the the opacity from 0.0-1.0
	 * @alias Titanium_UI_iPad_SplitWindow.getOpacity
	 * @return {Float}
	 */
	this.getOpacity = function() { return this.opacity; }
	/**
	 * Set the the opacity from 0.0-1.0
	 * @param {Float} value New value to set.
	 * @alias Titanium_UI_iPad_SplitWindow.setOpacity
	 */
	this.setOpacity = function(value) { this.opacity = value; }
	/**
	 * property for the view right position. This position is relative to the view's parent. Can be either a float value or a dimension string ie 'auto' (default), '50%' (iPhone only).
	 * @alias Titanium_UI_iPad_SplitWindow.right
	 * @property {Float,String}
	 */
	this.right = 0.0
	/**
	 * Get the property for the view right position. This position is relative to the view's parent. Can be either a float value or a dimension string ie 'auto' (default), '50%' (iPhone only).
	 * @alias Titanium_UI_iPad_SplitWindow.getRight
	 * @return {Float,String}
	 */
	this.getRight = function() { return this.right; }
	/**
	 * Set the property for the view right position. This position is relative to the view's parent. Can be either a float value or a dimension string ie 'auto' (default), '50%' (iPhone only).
	 * @param {Float,String} value New value to set.
	 * @alias Titanium_UI_iPad_SplitWindow.setRight
	 */
	this.setRight = function(value) { this.right = value; }
	/**
	 * the size of the view as a dictionary of width and height properties
	 * @alias Titanium_UI_iPad_SplitWindow.size
	 * @property {Object}
	 */
	this.size = {}
	/**
	 * Get the the size of the view as a dictionary of width and height properties
	 * @alias Titanium_UI_iPad_SplitWindow.getSize
	 * @return {Object}
	 */
	this.getSize = function() { return this.size; }
	/**
	 * Set the the size of the view as a dictionary of width and height properties
	 * @param {Object} value New value to set.
	 * @alias Titanium_UI_iPad_SplitWindow.setSize
	 */
	this.setSize = function(value) { this.size = value; }
	/**
	 * One of Titanium.UI.Android.SOFT_KEYBOARD_DEFAULT_ON_FOCUS, Titanium.UI.Android.SOFT_KEYBOARD_HIDE_ON_FOCUS, or Titanium.UI.Android.SOFT_KEYBOARD_SHOW_ON_FOCUS. (Android only)
	 * @alias Titanium_UI_iPad_SplitWindow.softKeyboardOnFocus
	 * @property {Integer}
	 */
	this.softKeyboardOnFocus = 0
	/**
	 * Get the One of Titanium.UI.Android.SOFT_KEYBOARD_DEFAULT_ON_FOCUS, Titanium.UI.Android.SOFT_KEYBOARD_HIDE_ON_FOCUS, or Titanium.UI.Android.SOFT_KEYBOARD_SHOW_ON_FOCUS. (Android only)
	 * @alias Titanium_UI_iPad_SplitWindow.getSoftKeyboardOnFocus
	 * @return {Integer}
	 */
	this.getSoftKeyboardOnFocus = function() { return this.softKeyboardOnFocus; }
	/**
	 * Set the One of Titanium.UI.Android.SOFT_KEYBOARD_DEFAULT_ON_FOCUS, Titanium.UI.Android.SOFT_KEYBOARD_HIDE_ON_FOCUS, or Titanium.UI.Android.SOFT_KEYBOARD_SHOW_ON_FOCUS. (Android only)
	 * @param {Integer} value New value to set.
	 * @alias Titanium_UI_iPad_SplitWindow.setSoftKeyboardOnFocus
	 */
	this.setSoftKeyboardOnFocus = function(value) { this.softKeyboardOnFocus = value; }
	/**
	 * property for the view top position. This position is relative to the view's parent. Can be either a float value or a dimension string ie 'auto' (default), '50%' (iPhone only).
	 * @alias Titanium_UI_iPad_SplitWindow.top
	 * @property {Float,String}
	 */
	this.top = 0.0
	/**
	 * Get the property for the view top position. This position is relative to the view's parent. Can be either a float value or a dimension string ie 'auto' (default), '50%' (iPhone only).
	 * @alias Titanium_UI_iPad_SplitWindow.getTop
	 * @return {Float,String}
	 */
	this.getTop = function() { return this.top; }
	/**
	 * Set the property for the view top position. This position is relative to the view's parent. Can be either a float value or a dimension string ie 'auto' (default), '50%' (iPhone only).
	 * @param {Float,String} value New value to set.
	 * @alias Titanium_UI_iPad_SplitWindow.setTop
	 */
	this.setTop = function(value) { this.top = value; }
	/**
	 * a boolean indicating if the view should receive touch events (true, default) or forward them to peers (false)
	 * @alias Titanium_UI_iPad_SplitWindow.touchEnabled
	 * @property {Boolean}
	 */
	this.touchEnabled = false
	/**
	 * Get the a boolean indicating if the view should receive touch events (true, default) or forward them to peers (false)
	 * @alias Titanium_UI_iPad_SplitWindow.getTouchEnabled
	 * @return {Boolean}
	 */
	this.getTouchEnabled = function() { return this.touchEnabled; }
	/**
	 * Set the a boolean indicating if the view should receive touch events (true, default) or forward them to peers (false)
	 * @param {Boolean} value New value to set.
	 * @alias Titanium_UI_iPad_SplitWindow.setTouchEnabled
	 */
	this.setTouchEnabled = function(value) { this.touchEnabled = value; }
	/**
	 * the transformation matrix to apply to the view
	 * @alias Titanium_UI_iPad_SplitWindow.transform
	 * @property {Object}
	 */
	this.transform = {}
	/**
	 * Get the the transformation matrix to apply to the view
	 * @alias Titanium_UI_iPad_SplitWindow.getTransform
	 * @return {Object}
	 */
	this.getTransform = function() { return this.transform; }
	/**
	 * Set the the transformation matrix to apply to the view
	 * @param {Object} value New value to set.
	 * @alias Titanium_UI_iPad_SplitWindow.setTransform
	 */
	this.setTransform = function(value) { this.transform = value; }
	/**
	 * a boolean of the visibility of the view
	 * @alias Titanium_UI_iPad_SplitWindow.visible
	 * @property {Boolean}
	 */
	this.visible = false
	/**
	 * Get the a boolean of the visibility of the view
	 * @alias Titanium_UI_iPad_SplitWindow.getVisible
	 * @return {Boolean}
	 */
	this.getVisible = function() { return this.visible; }
	/**
	 * Set the a boolean of the visibility of the view
	 * @param {Boolean} value New value to set.
	 * @alias Titanium_UI_iPad_SplitWindow.setVisible
	 */
	this.setVisible = function(value) { this.visible = value; }
	/**
	 * property for the view width. Can be either a float value or a dimension string ie 'auto' (default), '50%' (iPhone only).
	 * @alias Titanium_UI_iPad_SplitWindow.width
	 * @property {Float,String}
	 */
	this.width = 0.0
	/**
	 * Get the property for the view width. Can be either a float value or a dimension string ie 'auto' (default), '50%' (iPhone only).
	 * @alias Titanium_UI_iPad_SplitWindow.getWidth
	 * @return {Float,String}
	 */
	this.getWidth = function() { return this.width; }
	/**
	 * Set the property for the view width. Can be either a float value or a dimension string ie 'auto' (default), '50%' (iPhone only).
	 * @param {Float,String} value New value to set.
	 * @alias Titanium_UI_iPad_SplitWindow.setWidth
	 */
	this.setWidth = function(value) { this.width = value; }
	/**
	 * the z index position relative to other sibling views
	 * @alias Titanium_UI_iPad_SplitWindow.zIndex
	 * @property {Integer}
	 */
	this.zIndex = 0
	/**
	 * Get the the z index position relative to other sibling views
	 * @alias Titanium_UI_iPad_SplitWindow.getZIndex
	 * @return {Integer}
	 */
	this.getZIndex = function() { return this.zIndex; }
	/**
	 * Set the the z index position relative to other sibling views
	 * @param {Integer} value New value to set.
	 * @alias Titanium_UI_iPad_SplitWindow.setZIndex
	 */
	this.setZIndex = function(value) { this.zIndex = value; }
	/**
	 * add a child to the view hierarchy
	 * @param {Object} view the view to add to this views hiearchy
	 * @alias Titanium_UI_iPad_SplitWindow.add
	 */
	this.add = function add(view) { }
	/**
	 * add an event listener for the instance to receive view triggered events
	 * @param {String} name name of the event
	 * @param {Function} callback callback function to invoke when the event is fired
	 * @alias Titanium_UI_iPad_SplitWindow.addEventListener
	 */
	this.addEventListener = function addEventListener(name,callback) { }
	/**
	 * animate the view
	 * @param {Object} obj either a dictionary of animation properties or an Animation object
	 * @param {Function} callback function to be invoked upon completion of the animation
	 * @alias Titanium_UI_iPad_SplitWindow.animate
	 */
	this.animate = function animate(obj,callback) { }
	/**
	 * fire a synthesized event to the views listener
	 * @param {String} name name of the event
	 * @param {Object} event event object
	 * @alias Titanium_UI_iPad_SplitWindow.fireEvent
	 */
	this.fireEvent = function fireEvent(name,event) { }
	/**
	 * hide the view
	 * @alias Titanium_UI_iPad_SplitWindow.hide
	 */
	this.hide = function hide() { }
	/**
	 * remove a previously add view from the view hiearchy
	 * @param {Object} view the view to remove from this views hiearchy
	 * @alias Titanium_UI_iPad_SplitWindow.remove
	 */
	this.remove = function remove(view) { }
	/**
	 * remove a previously added event listener
	 * @param {String} name name of the event
	 * @param {Function} callback callback function passed in addEventListener
	 * @alias Titanium_UI_iPad_SplitWindow.removeEventListener
	 */
	this.removeEventListener = function removeEventListener(name,callback) { }
	/**
	 * make the view visible
	 * @alias Titanium_UI_iPad_SplitWindow.show
	 */
	this.show = function show() { }
	/**
	 * return a Blob image of the rendered view
	 * @param {Function} f function to be invoked upon completion. if non-null, this method will be performed asynchronously. if null, it will be performed immediately
	 * @alias Titanium_UI_iPad_SplitWindow.toImage
	 * @return {Object}
	 */
	this.toImage = function toImage(f) { return {}; }
};

/**
 * A Navigation Group implements a specialized view that manages the navigation of hierarchical content. The Navigation Group is created by the method Titanium.UI.iPhone.NavigationGroup.

A Navigation Group is very similar to Tab Bars with the exception that they do not maintain a group of windows with a interface bar at the bottom.
 * @since 1.2
 */
function Titanium_UI_iPhone_NavigationGroup() {
	/**
	 * a dictionary with properties x and y to indicate the anchor point value. anchor specifies the position by which animation should occur. center is 0.5, 0.5
	 * @alias Titanium_UI_iPhone_NavigationGroup.anchorPoint
	 * @property {Object}
	 */
	this.anchorPoint = {}
	/**
	 * Get the a dictionary with properties x and y to indicate the anchor point value. anchor specifies the position by which animation should occur. center is 0.5, 0.5
	 * @alias Titanium_UI_iPhone_NavigationGroup.getAnchorPoint
	 * @return {Object}
	 */
	this.getAnchorPoint = function() { return this.anchorPoint; }
	/**
	 * Set the a dictionary with properties x and y to indicate the anchor point value. anchor specifies the position by which animation should occur. center is 0.5, 0.5
	 * @param {Object} value New value to set.
	 * @alias Titanium_UI_iPhone_NavigationGroup.setAnchorPoint
	 */
	this.setAnchorPoint = function(value) { this.anchorPoint = value; }
	/**
	 * read-only object with x and y properties of where the view is during animation
	 * @alias Titanium_UI_iPhone_NavigationGroup.animatedCenterPoint
	 * @property {Object}
	 */
	this.animatedCenterPoint = {}
	/**
	 * Get the read-only object with x and y properties of where the view is during animation
	 * @alias Titanium_UI_iPhone_NavigationGroup.getAnimatedCenterPoint
	 * @return {Object}
	 */
	this.getAnimatedCenterPoint = function() { return this.animatedCenterPoint; }
	/**
	 * Set the read-only object with x and y properties of where the view is during animation
	 * @param {Object} value New value to set.
	 * @alias Titanium_UI_iPhone_NavigationGroup.setAnimatedCenterPoint
	 */
	this.setAnimatedCenterPoint = function(value) { this.animatedCenterPoint = value; }
	/**
	 * the background color of the view
	 * @alias Titanium_UI_iPhone_NavigationGroup.backgroundColor
	 * @property {String}
	 */
	this.backgroundColor = ''
	/**
	 * Get the the background color of the view
	 * @alias Titanium_UI_iPhone_NavigationGroup.getBackgroundColor
	 * @return {String}
	 */
	this.getBackgroundColor = function() { return this.backgroundColor; }
	/**
	 * Set the the background color of the view
	 * @param {String} value New value to set.
	 * @alias Titanium_UI_iPhone_NavigationGroup.setBackgroundColor
	 */
	this.setBackgroundColor = function(value) { this.backgroundColor = value; }
	/**
	 * the disabled background color of the view. (Android)
	 * @alias Titanium_UI_iPhone_NavigationGroup.backgroundDisabledColor
	 * @property {String}
	 */
	this.backgroundDisabledColor = ''
	/**
	 * Get the the disabled background color of the view. (Android)
	 * @alias Titanium_UI_iPhone_NavigationGroup.getBackgroundDisabledColor
	 * @return {String}
	 */
	this.getBackgroundDisabledColor = function() { return this.backgroundDisabledColor; }
	/**
	 * Set the the disabled background color of the view. (Android)
	 * @param {String} value New value to set.
	 * @alias Titanium_UI_iPhone_NavigationGroup.setBackgroundDisabledColor
	 */
	this.setBackgroundDisabledColor = function(value) { this.backgroundDisabledColor = value; }
	/**
	 * the disabled background image url of the view. (Android)
	 * @alias Titanium_UI_iPhone_NavigationGroup.backgroundDisabledImage
	 * @property {String}
	 */
	this.backgroundDisabledImage = ''
	/**
	 * Get the the disabled background image url of the view. (Android)
	 * @alias Titanium_UI_iPhone_NavigationGroup.getBackgroundDisabledImage
	 * @return {String}
	 */
	this.getBackgroundDisabledImage = function() { return this.backgroundDisabledImage; }
	/**
	 * Set the the disabled background image url of the view. (Android)
	 * @param {String} value New value to set.
	 * @alias Titanium_UI_iPhone_NavigationGroup.setBackgroundDisabledImage
	 */
	this.setBackgroundDisabledImage = function(value) { this.backgroundDisabledImage = value; }
	/**
	 * the focused background color of the view. focusable must be true for normal views. (Android)
	 * @alias Titanium_UI_iPhone_NavigationGroup.backgroundFocusedColor
	 * @property {String}
	 */
	this.backgroundFocusedColor = ''
	/**
	 * Get the the focused background color of the view. focusable must be true for normal views. (Android)
	 * @alias Titanium_UI_iPhone_NavigationGroup.getBackgroundFocusedColor
	 * @return {String}
	 */
	this.getBackgroundFocusedColor = function() { return this.backgroundFocusedColor; }
	/**
	 * Set the the focused background color of the view. focusable must be true for normal views. (Android)
	 * @param {String} value New value to set.
	 * @alias Titanium_UI_iPhone_NavigationGroup.setBackgroundFocusedColor
	 */
	this.setBackgroundFocusedColor = function(value) { this.backgroundFocusedColor = value; }
	/**
	 * the focused background image url of the view. focusable must be true for normal views. (Android)
	 * @alias Titanium_UI_iPhone_NavigationGroup.backgroundFocusedImage
	 * @property {String}
	 */
	this.backgroundFocusedImage = ''
	/**
	 * Get the the focused background image url of the view. focusable must be true for normal views. (Android)
	 * @alias Titanium_UI_iPhone_NavigationGroup.getBackgroundFocusedImage
	 * @return {String}
	 */
	this.getBackgroundFocusedImage = function() { return this.backgroundFocusedImage; }
	/**
	 * Set the the focused background image url of the view. focusable must be true for normal views. (Android)
	 * @param {String} value New value to set.
	 * @alias Titanium_UI_iPhone_NavigationGroup.setBackgroundFocusedImage
	 */
	this.setBackgroundFocusedImage = function(value) { this.backgroundFocusedImage = value; }
	/**
	 * a background gradient for the view with the properties: type,startPoint,endPoint,startRadius,endRadius,backfillStart,backfillEnd,colors.
	 * @alias Titanium_UI_iPhone_NavigationGroup.backgroundGradient
	 * @property {Object}
	 */
	this.backgroundGradient = {}
	/**
	 * Get the a background gradient for the view with the properties: type,startPoint,endPoint,startRadius,endRadius,backfillStart,backfillEnd,colors.
	 * @alias Titanium_UI_iPhone_NavigationGroup.getBackgroundGradient
	 * @return {Object}
	 */
	this.getBackgroundGradient = function() { return this.backgroundGradient; }
	/**
	 * Set the a background gradient for the view with the properties: type,startPoint,endPoint,startRadius,endRadius,backfillStart,backfillEnd,colors.
	 * @param {Object} value New value to set.
	 * @alias Titanium_UI_iPhone_NavigationGroup.setBackgroundGradient
	 */
	this.setBackgroundGradient = function(value) { this.backgroundGradient = value; }
	/**
	 * the background image url of the view
	 * @alias Titanium_UI_iPhone_NavigationGroup.backgroundImage
	 * @property {String}
	 */
	this.backgroundImage = ''
	/**
	 * Get the the background image url of the view
	 * @alias Titanium_UI_iPhone_NavigationGroup.getBackgroundImage
	 * @return {String}
	 */
	this.getBackgroundImage = function() { return this.backgroundImage; }
	/**
	 * Set the the background image url of the view
	 * @param {String} value New value to set.
	 * @alias Titanium_UI_iPhone_NavigationGroup.setBackgroundImage
	 */
	this.setBackgroundImage = function(value) { this.backgroundImage = value; }
	/**
	 * End caps specify the portion of an image that should not be resized when an image is stretched. This technique is used to implement buttons and other resizable image-based interface elements. When a button with end caps is resized, the resizing occurs only in the middle of the button, in the region between the end caps. The end caps themselves keep their original size and appearance. This property specifies the size of the left end cap. The middle (stretchable) portion is assumed to be 1 pixel wide. The right end cap is therefore computed by adding the size of the left end cap and the middle portion together and then subtracting that value from the width of the image
	 * @alias Titanium_UI_iPhone_NavigationGroup.backgroundLeftCap
	 * @property {Float}
	 */
	this.backgroundLeftCap = 0.0
	/**
	 * Get the End caps specify the portion of an image that should not be resized when an image is stretched. This technique is used to implement buttons and other resizable image-based interface elements. When a button with end caps is resized, the resizing occurs only in the middle of the button, in the region between the end caps. The end caps themselves keep their original size and appearance. This property specifies the size of the left end cap. The middle (stretchable) portion is assumed to be 1 pixel wide. The right end cap is therefore computed by adding the size of the left end cap and the middle portion together and then subtracting that value from the width of the image
	 * @alias Titanium_UI_iPhone_NavigationGroup.getBackgroundLeftCap
	 * @return {Float}
	 */
	this.getBackgroundLeftCap = function() { return this.backgroundLeftCap; }
	/**
	 * Set the End caps specify the portion of an image that should not be resized when an image is stretched. This technique is used to implement buttons and other resizable image-based interface elements. When a button with end caps is resized, the resizing occurs only in the middle of the button, in the region between the end caps. The end caps themselves keep their original size and appearance. This property specifies the size of the left end cap. The middle (stretchable) portion is assumed to be 1 pixel wide. The right end cap is therefore computed by adding the size of the left end cap and the middle portion together and then subtracting that value from the width of the image
	 * @param {Float} value New value to set.
	 * @alias Titanium_UI_iPhone_NavigationGroup.setBackgroundLeftCap
	 */
	this.setBackgroundLeftCap = function(value) { this.backgroundLeftCap = value; }
	/**
	 * the selected background color of the view. focusable must be true for normal views. (Android)
	 * @alias Titanium_UI_iPhone_NavigationGroup.backgroundSelectedColor
	 * @property {String}
	 */
	this.backgroundSelectedColor = ''
	/**
	 * Get the the selected background color of the view. focusable must be true for normal views. (Android)
	 * @alias Titanium_UI_iPhone_NavigationGroup.getBackgroundSelectedColor
	 * @return {String}
	 */
	this.getBackgroundSelectedColor = function() { return this.backgroundSelectedColor; }
	/**
	 * Set the the selected background color of the view. focusable must be true for normal views. (Android)
	 * @param {String} value New value to set.
	 * @alias Titanium_UI_iPhone_NavigationGroup.setBackgroundSelectedColor
	 */
	this.setBackgroundSelectedColor = function(value) { this.backgroundSelectedColor = value; }
	/**
	 * the selected background image url of the view. focusable must be true for normal views. (Android)
	 * @alias Titanium_UI_iPhone_NavigationGroup.backgroundSelectedImage
	 * @property {String}
	 */
	this.backgroundSelectedImage = ''
	/**
	 * Get the the selected background image url of the view. focusable must be true for normal views. (Android)
	 * @alias Titanium_UI_iPhone_NavigationGroup.getBackgroundSelectedImage
	 * @return {String}
	 */
	this.getBackgroundSelectedImage = function() { return this.backgroundSelectedImage; }
	/**
	 * Set the the selected background image url of the view. focusable must be true for normal views. (Android)
	 * @param {String} value New value to set.
	 * @alias Titanium_UI_iPhone_NavigationGroup.setBackgroundSelectedImage
	 */
	this.setBackgroundSelectedImage = function(value) { this.backgroundSelectedImage = value; }
	/**
	 * End caps specify the portion of an image that should not be resized when an image is stretched. This technique is used to implement buttons and other resizable image-based interface elements. When a button with end caps is resized, the resizing occurs only in the middle of the button, in the region between the end caps. The end caps themselves keep their original size and appearance. This property specifies the size of the top end cap. The middle (stretchable) portion is assumed to be 1 pixel wide. The bottom end cap is therefore computed by adding the size of the top end cap and the middle portion together and then subtracting that value from the height of the image
	 * @alias Titanium_UI_iPhone_NavigationGroup.backgroundTopCap
	 * @property {Float}
	 */
	this.backgroundTopCap = 0.0
	/**
	 * Get the End caps specify the portion of an image that should not be resized when an image is stretched. This technique is used to implement buttons and other resizable image-based interface elements. When a button with end caps is resized, the resizing occurs only in the middle of the button, in the region between the end caps. The end caps themselves keep their original size and appearance. This property specifies the size of the top end cap. The middle (stretchable) portion is assumed to be 1 pixel wide. The bottom end cap is therefore computed by adding the size of the top end cap and the middle portion together and then subtracting that value from the height of the image
	 * @alias Titanium_UI_iPhone_NavigationGroup.getBackgroundTopCap
	 * @return {Float}
	 */
	this.getBackgroundTopCap = function() { return this.backgroundTopCap; }
	/**
	 * Set the End caps specify the portion of an image that should not be resized when an image is stretched. This technique is used to implement buttons and other resizable image-based interface elements. When a button with end caps is resized, the resizing occurs only in the middle of the button, in the region between the end caps. The end caps themselves keep their original size and appearance. This property specifies the size of the top end cap. The middle (stretchable) portion is assumed to be 1 pixel wide. The bottom end cap is therefore computed by adding the size of the top end cap and the middle portion together and then subtracting that value from the height of the image
	 * @param {Float} value New value to set.
	 * @alias Titanium_UI_iPhone_NavigationGroup.setBackgroundTopCap
	 */
	this.setBackgroundTopCap = function(value) { this.backgroundTopCap = value; }
	/**
	 * the border color of the view
	 * @alias Titanium_UI_iPhone_NavigationGroup.borderColor
	 * @property {String}
	 */
	this.borderColor = ''
	/**
	 * Get the the border color of the view
	 * @alias Titanium_UI_iPhone_NavigationGroup.getBorderColor
	 * @return {String}
	 */
	this.getBorderColor = function() { return this.borderColor; }
	/**
	 * Set the the border color of the view
	 * @param {String} value New value to set.
	 * @alias Titanium_UI_iPhone_NavigationGroup.setBorderColor
	 */
	this.setBorderColor = function(value) { this.borderColor = value; }
	/**
	 * the border radius of the view
	 * @alias Titanium_UI_iPhone_NavigationGroup.borderRadius
	 * @property {Float}
	 */
	this.borderRadius = 0.0
	/**
	 * Get the the border radius of the view
	 * @alias Titanium_UI_iPhone_NavigationGroup.getBorderRadius
	 * @return {Float}
	 */
	this.getBorderRadius = function() { return this.borderRadius; }
	/**
	 * Set the the border radius of the view
	 * @param {Float} value New value to set.
	 * @alias Titanium_UI_iPhone_NavigationGroup.setBorderRadius
	 */
	this.setBorderRadius = function(value) { this.borderRadius = value; }
	/**
	 * the border width of the view
	 * @alias Titanium_UI_iPhone_NavigationGroup.borderWidth
	 * @property {Float}
	 */
	this.borderWidth = 0.0
	/**
	 * Get the the border width of the view
	 * @alias Titanium_UI_iPhone_NavigationGroup.getBorderWidth
	 * @return {Float}
	 */
	this.getBorderWidth = function() { return this.borderWidth; }
	/**
	 * Set the the border width of the view
	 * @param {Float} value New value to set.
	 * @alias Titanium_UI_iPhone_NavigationGroup.setBorderWidth
	 */
	this.setBorderWidth = function(value) { this.borderWidth = value; }
	/**
	 * property for the view bottom position. This position is relative to the view's parent. Can be either a float value or a dimension string ie 'auto' (default), '50%' (iPhone only).
	 * @alias Titanium_UI_iPhone_NavigationGroup.bottom
	 * @property {Float,String}
	 */
	this.bottom = 0.0
	/**
	 * Get the property for the view bottom position. This position is relative to the view's parent. Can be either a float value or a dimension string ie 'auto' (default), '50%' (iPhone only).
	 * @alias Titanium_UI_iPhone_NavigationGroup.getBottom
	 * @return {Float,String}
	 */
	this.getBottom = function() { return this.bottom; }
	/**
	 * Set the property for the view bottom position. This position is relative to the view's parent. Can be either a float value or a dimension string ie 'auto' (default), '50%' (iPhone only).
	 * @param {Float,String} value New value to set.
	 * @alias Titanium_UI_iPhone_NavigationGroup.setBottom
	 */
	this.setBottom = function(value) { this.bottom = value; }
	/**
	 * a dictionary with properties x and y to indicate the center of the views position relative to the parent view
	 * @alias Titanium_UI_iPhone_NavigationGroup.center
	 * @property {Object}
	 */
	this.center = {}
	/**
	 * Get the a dictionary with properties x and y to indicate the center of the views position relative to the parent view
	 * @alias Titanium_UI_iPhone_NavigationGroup.getCenter
	 * @return {Object}
	 */
	this.getCenter = function() { return this.center; }
	/**
	 * Set the a dictionary with properties x and y to indicate the center of the views position relative to the parent view
	 * @param {Object} value New value to set.
	 * @alias Titanium_UI_iPhone_NavigationGroup.setCenter
	 */
	this.setCenter = function(value) { this.center = value; }
	/**
	 * Set true if you want a view to be focusable when navigating with the trackball or D-Pad. Default: false. (Android Only)
	 * @alias Titanium_UI_iPhone_NavigationGroup.focusable
	 * @property {Boolean}
	 */
	this.focusable = false
	/**
	 * Get the Set true if you want a view to be focusable when navigating with the trackball or D-Pad. Default: false. (Android Only)
	 * @alias Titanium_UI_iPhone_NavigationGroup.getFocusable
	 * @return {Boolean}
	 */
	this.getFocusable = function() { return this.focusable; }
	/**
	 * Set the Set true if you want a view to be focusable when navigating with the trackball or D-Pad. Default: false. (Android Only)
	 * @param {Boolean} value New value to set.
	 * @alias Titanium_UI_iPhone_NavigationGroup.setFocusable
	 */
	this.setFocusable = function(value) { this.focusable = value; }
	/**
	 * the font family
	 * @alias Titanium_UI_iPhone_NavigationGroup.font-family
	 * @property {String}
	 */
	this.font-family = ''
	/**
	 * Get the the font family
	 * @alias Titanium_UI_iPhone_NavigationGroup.getFont-family
	 * @return {String}
	 */
	this.getFont-family = function() { return this.font-family; }
	/**
	 * Set the the font family
	 * @param {String} value New value to set.
	 * @alias Titanium_UI_iPhone_NavigationGroup.setFont-family
	 */
	this.setFont-family = function(value) { this.font-family = value; }
	/**
	 * the font size
	 * @alias Titanium_UI_iPhone_NavigationGroup.font-size
	 * @property {String}
	 */
	this.font-size = ''
	/**
	 * Get the the font size
	 * @alias Titanium_UI_iPhone_NavigationGroup.getFont-size
	 * @return {String}
	 */
	this.getFont-size = function() { return this.font-size; }
	/**
	 * Set the the font size
	 * @param {String} value New value to set.
	 * @alias Titanium_UI_iPhone_NavigationGroup.setFont-size
	 */
	this.setFont-size = function(value) { this.font-size = value; }
	/**
	 * the font style, either normal or italics
	 * @alias Titanium_UI_iPhone_NavigationGroup.font-style
	 * @property {String}
	 */
	this.font-style = ''
	/**
	 * Get the the font style, either normal or italics
	 * @alias Titanium_UI_iPhone_NavigationGroup.getFont-style
	 * @return {String}
	 */
	this.getFont-style = function() { return this.font-style; }
	/**
	 * Set the the font style, either normal or italics
	 * @param {String} value New value to set.
	 * @alias Titanium_UI_iPhone_NavigationGroup.setFont-style
	 */
	this.setFont-style = function(value) { this.font-style = value; }
	/**
	 * the font weight, either normal or bold
	 * @alias Titanium_UI_iPhone_NavigationGroup.font-weight
	 * @property {String}
	 */
	this.font-weight = ''
	/**
	 * Get the the font weight, either normal or bold
	 * @alias Titanium_UI_iPhone_NavigationGroup.getFont-weight
	 * @return {String}
	 */
	this.getFont-weight = function() { return this.font-weight; }
	/**
	 * Set the the font weight, either normal or bold
	 * @param {String} value New value to set.
	 * @alias Titanium_UI_iPhone_NavigationGroup.setFont-weight
	 */
	this.setFont-weight = function(value) { this.font-weight = value; }
	/**
	 * property for the view height. Can be either a float value or a dimension string ie 'auto' (default), '50%' (iPhone only).
	 * @alias Titanium_UI_iPhone_NavigationGroup.height
	 * @property {Float,String}
	 */
	this.height = 0.0
	/**
	 * Get the property for the view height. Can be either a float value or a dimension string ie 'auto' (default), '50%' (iPhone only).
	 * @alias Titanium_UI_iPhone_NavigationGroup.getHeight
	 * @return {Float,String}
	 */
	this.getHeight = function() { return this.height; }
	/**
	 * Set the property for the view height. Can be either a float value or a dimension string ie 'auto' (default), '50%' (iPhone only).
	 * @param {Float,String} value New value to set.
	 * @alias Titanium_UI_iPhone_NavigationGroup.setHeight
	 */
	this.setHeight = function(value) { this.height = value; }
	/**
	 * property for the view left position. This position is relative to the view's parent. Can be either a float value or a dimension string ie 'auto' (default), '50%' (iPhone only).
	 * @alias Titanium_UI_iPhone_NavigationGroup.left
	 * @property {Float,String}
	 */
	this.left = 0.0
	/**
	 * Get the property for the view left position. This position is relative to the view's parent. Can be either a float value or a dimension string ie 'auto' (default), '50%' (iPhone only).
	 * @alias Titanium_UI_iPhone_NavigationGroup.getLeft
	 * @return {Float,String}
	 */
	this.getLeft = function() { return this.left; }
	/**
	 * Set the property for the view left position. This position is relative to the view's parent. Can be either a float value or a dimension string ie 'auto' (default), '50%' (iPhone only).
	 * @param {Float,String} value New value to set.
	 * @alias Titanium_UI_iPhone_NavigationGroup.setLeft
	 */
	this.setLeft = function(value) { this.left = value; }
	/**
	 * the opacity from 0.0-1.0
	 * @alias Titanium_UI_iPhone_NavigationGroup.opacity
	 * @property {Float}
	 */
	this.opacity = 0.0
	/**
	 * Get the the opacity from 0.0-1.0
	 * @alias Titanium_UI_iPhone_NavigationGroup.getOpacity
	 * @return {Float}
	 */
	this.getOpacity = function() { return this.opacity; }
	/**
	 * Set the the opacity from 0.0-1.0
	 * @param {Float} value New value to set.
	 * @alias Titanium_UI_iPhone_NavigationGroup.setOpacity
	 */
	this.setOpacity = function(value) { this.opacity = value; }
	/**
	 * property for the view right position. This position is relative to the view's parent. Can be either a float value or a dimension string ie 'auto' (default), '50%' (iPhone only).
	 * @alias Titanium_UI_iPhone_NavigationGroup.right
	 * @property {Float,String}
	 */
	this.right = 0.0
	/**
	 * Get the property for the view right position. This position is relative to the view's parent. Can be either a float value or a dimension string ie 'auto' (default), '50%' (iPhone only).
	 * @alias Titanium_UI_iPhone_NavigationGroup.getRight
	 * @return {Float,String}
	 */
	this.getRight = function() { return this.right; }
	/**
	 * Set the property for the view right position. This position is relative to the view's parent. Can be either a float value or a dimension string ie 'auto' (default), '50%' (iPhone only).
	 * @param {Float,String} value New value to set.
	 * @alias Titanium_UI_iPhone_NavigationGroup.setRight
	 */
	this.setRight = function(value) { this.right = value; }
	/**
	 * the size of the view as a dictionary of width and height properties
	 * @alias Titanium_UI_iPhone_NavigationGroup.size
	 * @property {Object}
	 */
	this.size = {}
	/**
	 * Get the the size of the view as a dictionary of width and height properties
	 * @alias Titanium_UI_iPhone_NavigationGroup.getSize
	 * @return {Object}
	 */
	this.getSize = function() { return this.size; }
	/**
	 * Set the the size of the view as a dictionary of width and height properties
	 * @param {Object} value New value to set.
	 * @alias Titanium_UI_iPhone_NavigationGroup.setSize
	 */
	this.setSize = function(value) { this.size = value; }
	/**
	 * One of Titanium.UI.Android.SOFT_KEYBOARD_DEFAULT_ON_FOCUS, Titanium.UI.Android.SOFT_KEYBOARD_HIDE_ON_FOCUS, or Titanium.UI.Android.SOFT_KEYBOARD_SHOW_ON_FOCUS. (Android only)
	 * @alias Titanium_UI_iPhone_NavigationGroup.softKeyboardOnFocus
	 * @property {Integer}
	 */
	this.softKeyboardOnFocus = 0
	/**
	 * Get the One of Titanium.UI.Android.SOFT_KEYBOARD_DEFAULT_ON_FOCUS, Titanium.UI.Android.SOFT_KEYBOARD_HIDE_ON_FOCUS, or Titanium.UI.Android.SOFT_KEYBOARD_SHOW_ON_FOCUS. (Android only)
	 * @alias Titanium_UI_iPhone_NavigationGroup.getSoftKeyboardOnFocus
	 * @return {Integer}
	 */
	this.getSoftKeyboardOnFocus = function() { return this.softKeyboardOnFocus; }
	/**
	 * Set the One of Titanium.UI.Android.SOFT_KEYBOARD_DEFAULT_ON_FOCUS, Titanium.UI.Android.SOFT_KEYBOARD_HIDE_ON_FOCUS, or Titanium.UI.Android.SOFT_KEYBOARD_SHOW_ON_FOCUS. (Android only)
	 * @param {Integer} value New value to set.
	 * @alias Titanium_UI_iPhone_NavigationGroup.setSoftKeyboardOnFocus
	 */
	this.setSoftKeyboardOnFocus = function(value) { this.softKeyboardOnFocus = value; }
	/**
	 * property for the view top position. This position is relative to the view's parent. Can be either a float value or a dimension string ie 'auto' (default), '50%' (iPhone only).
	 * @alias Titanium_UI_iPhone_NavigationGroup.top
	 * @property {Float,String}
	 */
	this.top = 0.0
	/**
	 * Get the property for the view top position. This position is relative to the view's parent. Can be either a float value or a dimension string ie 'auto' (default), '50%' (iPhone only).
	 * @alias Titanium_UI_iPhone_NavigationGroup.getTop
	 * @return {Float,String}
	 */
	this.getTop = function() { return this.top; }
	/**
	 * Set the property for the view top position. This position is relative to the view's parent. Can be either a float value or a dimension string ie 'auto' (default), '50%' (iPhone only).
	 * @param {Float,String} value New value to set.
	 * @alias Titanium_UI_iPhone_NavigationGroup.setTop
	 */
	this.setTop = function(value) { this.top = value; }
	/**
	 * a boolean indicating if the view should receive touch events (true, default) or forward them to peers (false)
	 * @alias Titanium_UI_iPhone_NavigationGroup.touchEnabled
	 * @property {Boolean}
	 */
	this.touchEnabled = false
	/**
	 * Get the a boolean indicating if the view should receive touch events (true, default) or forward them to peers (false)
	 * @alias Titanium_UI_iPhone_NavigationGroup.getTouchEnabled
	 * @return {Boolean}
	 */
	this.getTouchEnabled = function() { return this.touchEnabled; }
	/**
	 * Set the a boolean indicating if the view should receive touch events (true, default) or forward them to peers (false)
	 * @param {Boolean} value New value to set.
	 * @alias Titanium_UI_iPhone_NavigationGroup.setTouchEnabled
	 */
	this.setTouchEnabled = function(value) { this.touchEnabled = value; }
	/**
	 * the transformation matrix to apply to the view
	 * @alias Titanium_UI_iPhone_NavigationGroup.transform
	 * @property {Object}
	 */
	this.transform = {}
	/**
	 * Get the the transformation matrix to apply to the view
	 * @alias Titanium_UI_iPhone_NavigationGroup.getTransform
	 * @return {Object}
	 */
	this.getTransform = function() { return this.transform; }
	/**
	 * Set the the transformation matrix to apply to the view
	 * @param {Object} value New value to set.
	 * @alias Titanium_UI_iPhone_NavigationGroup.setTransform
	 */
	this.setTransform = function(value) { this.transform = value; }
	/**
	 * a boolean of the visibility of the view
	 * @alias Titanium_UI_iPhone_NavigationGroup.visible
	 * @property {Boolean}
	 */
	this.visible = false
	/**
	 * Get the a boolean of the visibility of the view
	 * @alias Titanium_UI_iPhone_NavigationGroup.getVisible
	 * @return {Boolean}
	 */
	this.getVisible = function() { return this.visible; }
	/**
	 * Set the a boolean of the visibility of the view
	 * @param {Boolean} value New value to set.
	 * @alias Titanium_UI_iPhone_NavigationGroup.setVisible
	 */
	this.setVisible = function(value) { this.visible = value; }
	/**
	 * property for the view width. Can be either a float value or a dimension string ie 'auto' (default), '50%' (iPhone only).
	 * @alias Titanium_UI_iPhone_NavigationGroup.width
	 * @property {Float,String}
	 */
	this.width = 0.0
	/**
	 * Get the property for the view width. Can be either a float value or a dimension string ie 'auto' (default), '50%' (iPhone only).
	 * @alias Titanium_UI_iPhone_NavigationGroup.getWidth
	 * @return {Float,String}
	 */
	this.getWidth = function() { return this.width; }
	/**
	 * Set the property for the view width. Can be either a float value or a dimension string ie 'auto' (default), '50%' (iPhone only).
	 * @param {Float,String} value New value to set.
	 * @alias Titanium_UI_iPhone_NavigationGroup.setWidth
	 */
	this.setWidth = function(value) { this.width = value; }
	/**
	 * the z index position relative to other sibling views
	 * @alias Titanium_UI_iPhone_NavigationGroup.zIndex
	 * @property {Integer}
	 */
	this.zIndex = 0
	/**
	 * Get the the z index position relative to other sibling views
	 * @alias Titanium_UI_iPhone_NavigationGroup.getZIndex
	 * @return {Integer}
	 */
	this.getZIndex = function() { return this.zIndex; }
	/**
	 * Set the the z index position relative to other sibling views
	 * @param {Integer} value New value to set.
	 * @alias Titanium_UI_iPhone_NavigationGroup.setZIndex
	 */
	this.setZIndex = function(value) { this.zIndex = value; }
	/**
	 * add a child to the view hierarchy
	 * @param {Object} view the view to add to this views hiearchy
	 * @alias Titanium_UI_iPhone_NavigationGroup.add
	 */
	this.add = function add(view) { }
	/**
	 * add an event listener for the instance to receive view triggered events
	 * @param {String} name name of the event
	 * @param {Function} callback callback function to invoke when the event is fired
	 * @alias Titanium_UI_iPhone_NavigationGroup.addEventListener
	 */
	this.addEventListener = function addEventListener(name,callback) { }
	/**
	 * animate the view
	 * @param {Object} obj either a dictionary of animation properties or an Animation object
	 * @param {Function} callback function to be invoked upon completion of the animation
	 * @alias Titanium_UI_iPhone_NavigationGroup.animate
	 */
	this.animate = function animate(obj,callback) { }
	/**
	 * close a window and remove it from the navigation group
	 * @param {Object} window window to close
	 * @param {Object} [properties] optional dictionary. the only current property supported is <tt>animated</tt> which is a boolean to indicate if the window should be closed animated (default) or not.
	 * @alias Titanium_UI_iPhone_NavigationGroup.close
	 */
	this.close = function close(window,properties) { }
	/**
	 * fire a synthesized event to the views listener
	 * @param {String} name name of the event
	 * @param {Object} event event object
	 * @alias Titanium_UI_iPhone_NavigationGroup.fireEvent
	 */
	this.fireEvent = function fireEvent(name,event) { }
	/**
	 * hide the view
	 * @alias Titanium_UI_iPhone_NavigationGroup.hide
	 */
	this.hide = function hide() { }
	/**
	 * open a window within the navigation group
	 * @param {Object} window window to open within the tab group
	 * @param {Object} [properties] optional dictionary. the only current property supported is <tt>animated</tt> which is a boolean to indicate if the window should be opened animated (default) or not.
	 * @alias Titanium_UI_iPhone_NavigationGroup.open
	 */
	this.open = function open(window,properties) { }
	/**
	 * remove a previously add view from the view hiearchy
	 * @param {Object} view the view to remove from this views hiearchy
	 * @alias Titanium_UI_iPhone_NavigationGroup.remove
	 */
	this.remove = function remove(view) { }
	/**
	 * remove a previously added event listener
	 * @param {String} name name of the event
	 * @param {Function} callback callback function passed in addEventListener
	 * @alias Titanium_UI_iPhone_NavigationGroup.removeEventListener
	 */
	this.removeEventListener = function removeEventListener(name,callback) { }
	/**
	 * make the view visible
	 * @alias Titanium_UI_iPhone_NavigationGroup.show
	 */
	this.show = function show() { }
	/**
	 * return a Blob image of the rendered view
	 * @param {Function} f function to be invoked upon completion. if non-null, this method will be performed asynchronously. if null, it will be performed immediately
	 * @alias Titanium_UI_iPhone_NavigationGroup.toImage
	 * @return {Object}
	 */
	this.toImage = function toImage(f) { return {}; }
};

/**
 * The top level Titanium module.
 * @since 0.1
 */
Titanium = {
	/**
	 * the user-agent string used by Titanium
	 * @alias Titanium.userAgent
	 * @property {String}
	 */
	userAgent: '',
	/**
	 * Get the the user-agent string used by Titanium
	 * @alias Titanium.getUserAgent
	 * @return {String}
	 */
	getUserAgent: function () { return userAgent; },
	/**
	 * Set the the user-agent string used by Titanium
	 * @param {String} value New value to set.
	 * @alias Titanium.setUserAgent
	 */
	setUserAgent: function () { },
	/**
	 * the version of Titanium that is executing
	 * @alias Titanium.version
	 * @property {String}
	 */
	version: '',
	/**
	 * Get the the version of Titanium that is executing
	 * @alias Titanium.getVersion
	 * @return {String}
	 */
	getVersion: function () { return version; },
	/**
	 * Set the the version of Titanium that is executing
	 * @param {String} value New value to set.
	 * @alias Titanium.setVersion
	 */
	setVersion: function () { },
	/**
	 * add an event listener for the instance to receive view triggered events
	 * @param {String} name name of the event
	 * @param {Function} callback callback function to invoke when the event is fired
	 * @alias Titanium.addEventListener
	 */
	addEventListener: function (name,callback) { },
	/**
	 * fire a synthesized event to the views listener
	 * @param {String} name name of the event
	 * @param {Object} event event object
	 * @alias Titanium.fireEvent
	 */
	fireEvent: function (name,event) { },
	/**
	 * one or more filenames to include as if the Javascript code was written in place.  This is similar to a C #include function.
	 * @param {String} name filename to include
	 * @alias Titanium.include
	 */
	include: function (name) { },
	/**
	 * remove a previously added event listener
	 * @param {String} name name of the event
	 * @param {Function} callback callback function passed in addEventListener
	 * @alias Titanium.removeEventListener
	 */
	removeEventListener: function (name,callback) { },
};

/**
 * The top level API module.  The API module is mainly used for logging.
 * @since 0.1
 */
Titanium.API = {
	/**
	 * add an event listener for the instance to receive view triggered events
	 * @param {String} name name of the event
	 * @param {Function} callback callback function to invoke when the event is fired
	 * @alias Titanium.API.addEventListener
	 */
	addEventListener: function (name,callback) { },
	/**
	 * function for logging debug messages
	 * @param {String} message the message to log
	 * @alias Titanium.API.debug
	 */
	debug: function (message) { },
	/**
	 * function for logging error messages
	 * @param {String} message the message to log
	 * @alias Titanium.API.error
	 */
	error: function (message) { },
	/**
	 * fire a synthesized event to the views listener
	 * @param {String} name name of the event
	 * @param {Object} event event object
	 * @alias Titanium.API.fireEvent
	 */
	fireEvent: function (name,event) { },
	/**
	 * function for logging informational messages
	 * @param {String} message the message to log
	 * @alias Titanium.API.info
	 */
	info: function (message) { },
	/**
	 * function for logging custom severity messages
	 * @param {String} level the log level
	 * @param {String} message the message to log
	 * @alias Titanium.API.log
	 */
	log: function (level,message) { },
	/**
	 * remove a previously added event listener
	 * @param {String} name name of the event
	 * @param {Function} callback callback function passed in addEventListener
	 * @alias Titanium.API.removeEventListener
	 */
	removeEventListener: function (name,callback) { },
	/**
	 * function for logging warning messages
	 * @param {String} message the message to log
	 * @alias Titanium.API.warn
	 */
	warn: function (message) { },
};

/**
 * The top level Accelerometer module.  The Accelerometer modules contains methods and properties for using the device accelerometer.
 * @since 0.1
 */
Titanium.Accelerometer = {
	/**
	 * add an event listener for the instance to receive view triggered events
	 * @param {String} name name of the event
	 * @param {Function} callback callback function to invoke when the event is fired
	 * @alias Titanium.Accelerometer.addEventListener
	 */
	addEventListener: function (name,callback) { },
	/**
	 * fire a synthesized event to the views listener
	 * @param {String} name name of the event
	 * @param {Object} event event object
	 * @alias Titanium.Accelerometer.fireEvent
	 */
	fireEvent: function (name,event) { },
	/**
	 * remove a previously added event listener
	 * @param {String} name name of the event
	 * @param {Function} callback callback function passed in addEventListener
	 * @alias Titanium.Accelerometer.removeEventListener
	 */
	removeEventListener: function (name,callback) { },
};

/**
 * The top level Analytics module.  The Analytics module is used for transmitting developer-defined Analytics event for your application to the Appcelerator Analytics product. It can be used to augment additional context or application-specific information which can then be accessed during analysis using Analytics.
 * @since 0.1
 */
Titanium.Analytics = {
	/**
	 * send a generic event for the application session
	 * @param {String} type the event type
	 * @param {String} name the event name
	 * @param {Object} data event data or null if not specified. the object must be serializable as JSON
	 * @alias Titanium.Analytics.addEvent
	 */
	addEvent: function (type,name,data) { },
	/**
	 * add an event listener for the instance to receive view triggered events
	 * @param {String} name name of the event
	 * @param {Function} callback callback function to invoke when the event is fired
	 * @alias Titanium.Analytics.addEventListener
	 */
	addEventListener: function (name,callback) { },
	/**
	 * send an analytics feature event for the application session
	 * @param {String} name the event name
	 * @param {Object} data event data or null if not specified. the object must be serializable as JSON
	 * @alias Titanium.Analytics.featureEvent
	 */
	featureEvent: function (name,data) { },
	/**
	 * fire a synthesized event to the views listener
	 * @param {String} name name of the event
	 * @param {Object} event event object
	 * @alias Titanium.Analytics.fireEvent
	 */
	fireEvent: function (name,event) { },
	/**
	 * send an analytics nav event for the application session
	 * @param {String} from the <tt>from</tt> location in the nav event
	 * @param {String} to the <tt>to</tt> location in the nav event
	 * @param {String} name the event name
	 * @param {Object} data event data or null if not specified. the object must be serializable as JSON
	 * @alias Titanium.Analytics.navEvent
	 */
	navEvent: function (from,to,name,data) { },
	/**
	 * remove a previously added event listener
	 * @param {String} name name of the event
	 * @param {Function} callback callback function passed in addEventListener
	 * @alias Titanium.Analytics.removeEventListener
	 */
	removeEventListener: function (name,callback) { },
	/**
	 * send a analytics settings event for the application session
	 * @param {String} name the event name
	 * @param {Object} data event data or null if not specified. the object must be serializable as JSON
	 * @alias Titanium.Analytics.settingsEvent
	 */
	settingsEvent: function (name,data) { },
	/**
	 * send an analytics timed event for the application session
	 * @param {String} name the event name
	 * @param {Date} start the event start as a Date object
	 * @param {Date} stop the event end as a Date object
	 * @param {Float} duration the event duration
	 * @param {Object} data event data or null if not specified. the object must be serializable as JSON
	 * @alias Titanium.Analytics.timedEvent
	 */
	timedEvent: function (name,start,stop,duration,data) { },
	/**
	 * send an analytics user event for the application session
	 * @param {String} name the event name
	 * @param {Object} data event data or null if not specified. the object must be serializable as JSON
	 * @alias Titanium.Analytics.userEvent
	 */
	userEvent: function (name,data) { },
};

/**
 * The top level Android module. Ti.Android.currentActivity provides each context an Activity. This object cannot be created directly.
 * @since 1.5
 */
Titanium.Android = {
	/**
	 * 
	 * @alias Titanium.Android.ACTION_AIRPLANE_MODE_CHANGED
	 * @property {String}
	 */
	ACTION_AIRPLANE_MODE_CHANGED: '',
	/**
	 * 
	 * @alias Titanium.Android.ACTION_ALL_APPS
	 * @property {String}
	 */
	ACTION_ALL_APPS: '',
	/**
	 * 
	 * @alias Titanium.Android.ACTION_ANSWER
	 * @property {String}
	 */
	ACTION_ANSWER: '',
	/**
	 * 
	 * @alias Titanium.Android.ACTION_ATTACH_DATA
	 * @property {String}
	 */
	ACTION_ATTACH_DATA: '',
	/**
	 * 
	 * @alias Titanium.Android.ACTION_BATTERY_CHANGED
	 * @property {String}
	 */
	ACTION_BATTERY_CHANGED: '',
	/**
	 * 
	 * @alias Titanium.Android.ACTION_BATTERY_LOW
	 * @property {String}
	 */
	ACTION_BATTERY_LOW: '',
	/**
	 * 
	 * @alias Titanium.Android.ACTION_BATTERY_OKAY
	 * @property {String}
	 */
	ACTION_BATTERY_OKAY: '',
	/**
	 * 
	 * @alias Titanium.Android.ACTION_BOOT_COMPLETED
	 * @property {String}
	 */
	ACTION_BOOT_COMPLETED: '',
	/**
	 * 
	 * @alias Titanium.Android.ACTION_BUG_REPORT
	 * @property {String}
	 */
	ACTION_BUG_REPORT: '',
	/**
	 * 
	 * @alias Titanium.Android.ACTION_CALL
	 * @property {String}
	 */
	ACTION_CALL: '',
	/**
	 * 
	 * @alias Titanium.Android.ACTION_CALL_BUTTON
	 * @property {String}
	 */
	ACTION_CALL_BUTTON: '',
	/**
	 * 
	 * @alias Titanium.Android.ACTION_CAMERA_BUTTON
	 * @property {String}
	 */
	ACTION_CAMERA_BUTTON: '',
	/**
	 * 
	 * @alias Titanium.Android.ACTION_CHOOSER
	 * @property {String}
	 */
	ACTION_CHOOSER: '',
	/**
	 * 
	 * @alias Titanium.Android.ACTION_CLOSE_SYSTEM_DIALOGS
	 * @property {String}
	 */
	ACTION_CLOSE_SYSTEM_DIALOGS: '',
	/**
	 * 
	 * @alias Titanium.Android.ACTION_CONFIGURATION_CHANGED
	 * @property {String}
	 */
	ACTION_CONFIGURATION_CHANGED: '',
	/**
	 * 
	 * @alias Titanium.Android.ACTION_CREATE_SHORTCUT
	 * @property {String}
	 */
	ACTION_CREATE_SHORTCUT: '',
	/**
	 * 
	 * @alias Titanium.Android.ACTION_DATE_CHANGED
	 * @property {String}
	 */
	ACTION_DATE_CHANGED: '',
	/**
	 * 
	 * @alias Titanium.Android.ACTION_DEFAULT
	 * @property {String}
	 */
	ACTION_DEFAULT: '',
	/**
	 * 
	 * @alias Titanium.Android.ACTION_DELETE
	 * @property {String}
	 */
	ACTION_DELETE: '',
	/**
	 * 
	 * @alias Titanium.Android.ACTION_DEVICE_STORAGE_LOW
	 * @property {String}
	 */
	ACTION_DEVICE_STORAGE_LOW: '',
	/**
	 * 
	 * @alias Titanium.Android.ACTION_DIAL
	 * @property {String}
	 */
	ACTION_DIAL: '',
	/**
	 * 
	 * @alias Titanium.Android.ACTION_EDIT
	 * @property {String}
	 */
	ACTION_EDIT: '',
	/**
	 * 
	 * @alias Titanium.Android.ACTION_GET_CONTENT
	 * @property {String}
	 */
	ACTION_GET_CONTENT: '',
	/**
	 * 
	 * @alias Titanium.Android.ACTION_GTALK_SERVICE_CONNECTED
	 * @property {String}
	 */
	ACTION_GTALK_SERVICE_CONNECTED: '',
	/**
	 * 
	 * @alias Titanium.Android.ACTION_GTALK_SERVICE_DISCONNECTED
	 * @property {String}
	 */
	ACTION_GTALK_SERVICE_DISCONNECTED: '',
	/**
	 * 
	 * @alias Titanium.Android.ACTION_HEADSET_PLUG
	 * @property {String}
	 */
	ACTION_HEADSET_PLUG: '',
	/**
	 * 
	 * @alias Titanium.Android.ACTION_INPUT_METHOD_CHANGED
	 * @property {String}
	 */
	ACTION_INPUT_METHOD_CHANGED: '',
	/**
	 * 
	 * @alias Titanium.Android.ACTION_INSERT
	 * @property {String}
	 */
	ACTION_INSERT: '',
	/**
	 * 
	 * @alias Titanium.Android.ACTION_INSERT_OR_EDIT
	 * @property {String}
	 */
	ACTION_INSERT_OR_EDIT: '',
	/**
	 * 
	 * @alias Titanium.Android.ACTION_MAIN
	 * @property {String}
	 */
	ACTION_MAIN: '',
	/**
	 * 
	 * @alias Titanium.Android.ACTION_MANAGE_PACKAGE_STORAGE
	 * @property {String}
	 */
	ACTION_MANAGE_PACKAGE_STORAGE: '',
	/**
	 * 
	 * @alias Titanium.Android.ACTION_MEDIA_BAD_REMOVAL
	 * @property {String}
	 */
	ACTION_MEDIA_BAD_REMOVAL: '',
	/**
	 * 
	 * @alias Titanium.Android.ACTION_MEDIA_BUTTON
	 * @property {String}
	 */
	ACTION_MEDIA_BUTTON: '',
	/**
	 * 
	 * @alias Titanium.Android.ACTION_MEDIA_CHECKING
	 * @property {String}
	 */
	ACTION_MEDIA_CHECKING: '',
	/**
	 * 
	 * @alias Titanium.Android.ACTION_MEDIA_EJECT
	 * @property {String}
	 */
	ACTION_MEDIA_EJECT: '',
	/**
	 * 
	 * @alias Titanium.Android.ACTION_MEDIA_MOUNTED
	 * @property {String}
	 */
	ACTION_MEDIA_MOUNTED: '',
	/**
	 * 
	 * @alias Titanium.Android.ACTION_MEDIA_NOFS
	 * @property {String}
	 */
	ACTION_MEDIA_NOFS: '',
	/**
	 * 
	 * @alias Titanium.Android.ACTION_MEDIA_REMOVED
	 * @property {String}
	 */
	ACTION_MEDIA_REMOVED: '',
	/**
	 * 
	 * @alias Titanium.Android.ACTION_MEDIA_SCANNER_FINISHED
	 * @property {String}
	 */
	ACTION_MEDIA_SCANNER_FINISHED: '',
	/**
	 * 
	 * @alias Titanium.Android.ACTION_MEDIA_SCANNER_SCAN_FILE
	 * @property {String}
	 */
	ACTION_MEDIA_SCANNER_SCAN_FILE: '',
	/**
	 * 
	 * @alias Titanium.Android.ACTION_MEDIA_SCANNER_STARTED
	 * @property {String}
	 */
	ACTION_MEDIA_SCANNER_STARTED: '',
	/**
	 * 
	 * @alias Titanium.Android.ACTION_MEDIA_SHARED
	 * @property {String}
	 */
	ACTION_MEDIA_SHARED: '',
	/**
	 * 
	 * @alias Titanium.Android.ACTION_MEDIA_UNMOUNTABLE
	 * @property {String}
	 */
	ACTION_MEDIA_UNMOUNTABLE: '',
	/**
	 * 
	 * @alias Titanium.Android.ACTION_MEDIA_UNMOUNTED
	 * @property {String}
	 */
	ACTION_MEDIA_UNMOUNTED: '',
	/**
	 * 
	 * @alias Titanium.Android.ACTION_NEW_OUTGOING_CALL
	 * @property {String}
	 */
	ACTION_NEW_OUTGOING_CALL: '',
	/**
	 * 
	 * @alias Titanium.Android.ACTION_PACKAGE_ADDED
	 * @property {String}
	 */
	ACTION_PACKAGE_ADDED: '',
	/**
	 * 
	 * @alias Titanium.Android.ACTION_PACKAGE_CHANGED
	 * @property {String}
	 */
	ACTION_PACKAGE_CHANGED: '',
	/**
	 * 
	 * @alias Titanium.Android.ACTION_PACKAGE_DATA_CLEARED
	 * @property {String}
	 */
	ACTION_PACKAGE_DATA_CLEARED: '',
	/**
	 * 
	 * @alias Titanium.Android.ACTION_PACKAGE_INSTALL
	 * @property {String}
	 */
	ACTION_PACKAGE_INSTALL: '',
	/**
	 * 
	 * @alias Titanium.Android.ACTION_PACKAGE_REMOVED
	 * @property {String}
	 */
	ACTION_PACKAGE_REMOVED: '',
	/**
	 * 
	 * @alias Titanium.Android.ACTION_PACKAGE_REPLACED
	 * @property {String}
	 */
	ACTION_PACKAGE_REPLACED: '',
	/**
	 * 
	 * @alias Titanium.Android.ACTION_PACKAGE_RESTARTED
	 * @property {String}
	 */
	ACTION_PACKAGE_RESTARTED: '',
	/**
	 * 
	 * @alias Titanium.Android.ACTION_PICK
	 * @property {String}
	 */
	ACTION_PICK: '',
	/**
	 * 
	 * @alias Titanium.Android.ACTION_PICK_ACTIVITY
	 * @property {String}
	 */
	ACTION_PICK_ACTIVITY: '',
	/**
	 * 
	 * @alias Titanium.Android.ACTION_POWER_CONNECTED
	 * @property {String}
	 */
	ACTION_POWER_CONNECTED: '',
	/**
	 * 
	 * @alias Titanium.Android.ACTION_POWER_DISCONNECTED
	 * @property {String}
	 */
	ACTION_POWER_DISCONNECTED: '',
	/**
	 * 
	 * @alias Titanium.Android.ACTION_POWER_USAGE_SUMMARY
	 * @property {String}
	 */
	ACTION_POWER_USAGE_SUMMARY: '',
	/**
	 * 
	 * @alias Titanium.Android.ACTION_PROVIDER_CHANGED
	 * @property {String}
	 */
	ACTION_PROVIDER_CHANGED: '',
	/**
	 * 
	 * @alias Titanium.Android.ACTION_REBOOT
	 * @property {String}
	 */
	ACTION_REBOOT: '',
	/**
	 * 
	 * @alias Titanium.Android.ACTION_RUN
	 * @property {String}
	 */
	ACTION_RUN: '',
	/**
	 * 
	 * @alias Titanium.Android.ACTION_SCREEN_OFF
	 * @property {String}
	 */
	ACTION_SCREEN_OFF: '',
	/**
	 * 
	 * @alias Titanium.Android.ACTION_SCREEN_ON
	 * @property {String}
	 */
	ACTION_SCREEN_ON: '',
	/**
	 * 
	 * @alias Titanium.Android.ACTION_SEARCH
	 * @property {String}
	 */
	ACTION_SEARCH: '',
	/**
	 * 
	 * @alias Titanium.Android.ACTION_SEARCH_LONG_PRESS
	 * @property {String}
	 */
	ACTION_SEARCH_LONG_PRESS: '',
	/**
	 * 
	 * @alias Titanium.Android.ACTION_SEND
	 * @property {String}
	 */
	ACTION_SEND: '',
	/**
	 * 
	 * @alias Titanium.Android.ACTION_SENDTO
	 * @property {String}
	 */
	ACTION_SENDTO: '',
	/**
	 * 
	 * @alias Titanium.Android.ACTION_SEND_MULTIPLE
	 * @property {String}
	 */
	ACTION_SEND_MULTIPLE: '',
	/**
	 * 
	 * @alias Titanium.Android.ACTION_SET_WALLPAPER
	 * @property {String}
	 */
	ACTION_SET_WALLPAPER: '',
	/**
	 * 
	 * @alias Titanium.Android.ACTION_SHUTDOWN
	 * @property {String}
	 */
	ACTION_SHUTDOWN: '',
	/**
	 * 
	 * @alias Titanium.Android.ACTION_SYNC
	 * @property {String}
	 */
	ACTION_SYNC: '',
	/**
	 * 
	 * @alias Titanium.Android.ACTION_SYSTEM_TUTORIAL
	 * @property {String}
	 */
	ACTION_SYSTEM_TUTORIAL: '',
	/**
	 * 
	 * @alias Titanium.Android.ACTION_TIME_CHANGED
	 * @property {String}
	 */
	ACTION_TIME_CHANGED: '',
	/**
	 * 
	 * @alias Titanium.Android.ACTION_TIME_TICK
	 * @property {String}
	 */
	ACTION_TIME_TICK: '',
	/**
	 * 
	 * @alias Titanium.Android.ACTION_UID_REMOVED
	 * @property {String}
	 */
	ACTION_UID_REMOVED: '',
	/**
	 * 
	 * @alias Titanium.Android.ACTION_UMS_CONNECTED
	 * @property {String}
	 */
	ACTION_UMS_CONNECTED: '',
	/**
	 * 
	 * @alias Titanium.Android.ACTION_UMS_DISCONNECTED
	 * @property {String}
	 */
	ACTION_UMS_DISCONNECTED: '',
	/**
	 * 
	 * @alias Titanium.Android.ACTION_USER_PRESENT
	 * @property {String}
	 */
	ACTION_USER_PRESENT: '',
	/**
	 * 
	 * @alias Titanium.Android.ACTION_VIEW
	 * @property {String}
	 */
	ACTION_VIEW: '',
	/**
	 * 
	 * @alias Titanium.Android.ACTION_VOICE_COMMAND
	 * @property {String}
	 */
	ACTION_VOICE_COMMAND: '',
	/**
	 * 
	 * @alias Titanium.Android.ACTION_WALLPAPER_CHANGED
	 * @property {String}
	 */
	ACTION_WALLPAPER_CHANGED: '',
	/**
	 * 
	 * @alias Titanium.Android.ACTION_WEB_SEARCH
	 * @property {String}
	 */
	ACTION_WEB_SEARCH: '',
	/**
	 * 
	 * @alias Titanium.Android.CATEGORY_ALTERNATIVE
	 * @property {String}
	 */
	CATEGORY_ALTERNATIVE: '',
	/**
	 * 
	 * @alias Titanium.Android.CATEGORY_BROWSABLE
	 * @property {String}
	 */
	CATEGORY_BROWSABLE: '',
	/**
	 * 
	 * @alias Titanium.Android.CATEGORY_DEFAULT
	 * @property {String}
	 */
	CATEGORY_DEFAULT: '',
	/**
	 * 
	 * @alias Titanium.Android.CATEGORY_DEVELOPMENT_PREFERENCE
	 * @property {String}
	 */
	CATEGORY_DEVELOPMENT_PREFERENCE: '',
	/**
	 * 
	 * @alias Titanium.Android.CATEGORY_EMBED
	 * @property {String}
	 */
	CATEGORY_EMBED: '',
	/**
	 * 
	 * @alias Titanium.Android.CATEGORY_FRAMEWORK_INSTRUMENTATION_TEST
	 * @property {String}
	 */
	CATEGORY_FRAMEWORK_INSTRUMENTATION_TEST: '',
	/**
	 * 
	 * @alias Titanium.Android.CATEGORY_HOME
	 * @property {String}
	 */
	CATEGORY_HOME: '',
	/**
	 * 
	 * @alias Titanium.Android.CATEGORY_INFO
	 * @property {String}
	 */
	CATEGORY_INFO: '',
	/**
	 * 
	 * @alias Titanium.Android.CATEGORY_LAUNCHER
	 * @property {String}
	 */
	CATEGORY_LAUNCHER: '',
	/**
	 * 
	 * @alias Titanium.Android.CATEGORY_MONKEY
	 * @property {String}
	 */
	CATEGORY_MONKEY: '',
	/**
	 * 
	 * @alias Titanium.Android.CATEGORY_OPENABLE
	 * @property {String}
	 */
	CATEGORY_OPENABLE: '',
	/**
	 * 
	 * @alias Titanium.Android.CATEGORY_PREFERENCE
	 * @property {String}
	 */
	CATEGORY_PREFERENCE: '',
	/**
	 * 
	 * @alias Titanium.Android.CATEGORY_SAMPLE_CODE
	 * @property {String}
	 */
	CATEGORY_SAMPLE_CODE: '',
	/**
	 * 
	 * @alias Titanium.Android.CATEGORY_SELECTED_ALTERNATIVE
	 * @property {String}
	 */
	CATEGORY_SELECTED_ALTERNATIVE: '',
	/**
	 * 
	 * @alias Titanium.Android.CATEGORY_TAB
	 * @property {String}
	 */
	CATEGORY_TAB: '',
	/**
	 * 
	 * @alias Titanium.Android.CATEGORY_TEST
	 * @property {String}
	 */
	CATEGORY_TEST: '',
	/**
	 * 
	 * @alias Titanium.Android.CATEGORY_UNIT_TEST
	 * @property {String}
	 */
	CATEGORY_UNIT_TEST: '',
	/**
	 * 
	 * @alias Titanium.Android.EXTRA_ALARM_COUNT
	 * @property {String}
	 */
	EXTRA_ALARM_COUNT: '',
	/**
	 * 
	 * @alias Titanium.Android.EXTRA_BCC
	 * @property {String}
	 */
	EXTRA_BCC: '',
	/**
	 * 
	 * @alias Titanium.Android.EXTRA_CC
	 * @property {String}
	 */
	EXTRA_CC: '',
	/**
	 * 
	 * @alias Titanium.Android.EXTRA_DATA_REMOVED
	 * @property {String}
	 */
	EXTRA_DATA_REMOVED: '',
	/**
	 * 
	 * @alias Titanium.Android.EXTRA_DONT_KILL_APP
	 * @property {String}
	 */
	EXTRA_DONT_KILL_APP: '',
	/**
	 * 
	 * @alias Titanium.Android.EXTRA_EMAIL
	 * @property {String}
	 */
	EXTRA_EMAIL: '',
	/**
	 * 
	 * @alias Titanium.Android.EXTRA_INTENT
	 * @property {String}
	 */
	EXTRA_INTENT: '',
	/**
	 * 
	 * @alias Titanium.Android.EXTRA_KEY_EVENT
	 * @property {String}
	 */
	EXTRA_KEY_EVENT: '',
	/**
	 * 
	 * @alias Titanium.Android.EXTRA_PHONE_NUMBER
	 * @property {String}
	 */
	EXTRA_PHONE_NUMBER: '',
	/**
	 * 
	 * @alias Titanium.Android.EXTRA_REPLACING
	 * @property {String}
	 */
	EXTRA_REPLACING: '',
	/**
	 * 
	 * @alias Titanium.Android.EXTRA_SHORTCUT_ICON
	 * @property {String}
	 */
	EXTRA_SHORTCUT_ICON: '',
	/**
	 * 
	 * @alias Titanium.Android.EXTRA_SHORTCUT_ICON_RESOURCE
	 * @property {String}
	 */
	EXTRA_SHORTCUT_ICON_RESOURCE: '',
	/**
	 * 
	 * @alias Titanium.Android.EXTRA_SHORTCUT_INTENT
	 * @property {String}
	 */
	EXTRA_SHORTCUT_INTENT: '',
	/**
	 * 
	 * @alias Titanium.Android.EXTRA_SHORTCUT_NAME
	 * @property {String}
	 */
	EXTRA_SHORTCUT_NAME: '',
	/**
	 * 
	 * @alias Titanium.Android.EXTRA_STREAM
	 * @property {String}
	 */
	EXTRA_STREAM: '',
	/**
	 * 
	 * @alias Titanium.Android.EXTRA_SUBJECT
	 * @property {String}
	 */
	EXTRA_SUBJECT: '',
	/**
	 * 
	 * @alias Titanium.Android.EXTRA_TEMPLATE
	 * @property {String}
	 */
	EXTRA_TEMPLATE: '',
	/**
	 * 
	 * @alias Titanium.Android.EXTRA_TEXT
	 * @property {String}
	 */
	EXTRA_TEXT: '',
	/**
	 * 
	 * @alias Titanium.Android.EXTRA_TITLE
	 * @property {String}
	 */
	EXTRA_TITLE: '',
	/**
	 * 
	 * @alias Titanium.Android.EXTRA_UID
	 * @property {String}
	 */
	EXTRA_UID: '',
	/**
	 * 
	 * @alias Titanium.Android.FILL_IN_ACTION
	 * @property {Integer}
	 */
	FILL_IN_ACTION: 0,
	/**
	 * 
	 * @alias Titanium.Android.FILL_IN_CATEGORIES
	 * @property {Integer}
	 */
	FILL_IN_CATEGORIES: 0,
	/**
	 * 
	 * @alias Titanium.Android.FILL_IN_COMPONENT
	 * @property {Integer}
	 */
	FILL_IN_COMPONENT: 0,
	/**
	 * 
	 * @alias Titanium.Android.FILL_IN_DATA
	 * @property {Integer}
	 */
	FILL_IN_DATA: 0,
	/**
	 * 
	 * @alias Titanium.Android.FILL_IN_PACKAGE
	 * @property {Integer}
	 */
	FILL_IN_PACKAGE: 0,
	/**
	 * 
	 * @alias Titanium.Android.FLAG_ACTIVITY_BROUGHT_TO_FRONT
	 * @property {Integer}
	 */
	FLAG_ACTIVITY_BROUGHT_TO_FRONT: 0,
	/**
	 * 
	 * @alias Titanium.Android.FLAG_ACTIVITY_CLEAR_TOP
	 * @property {Integer}
	 */
	FLAG_ACTIVITY_CLEAR_TOP: 0,
	/**
	 * 
	 * @alias Titanium.Android.FLAG_ACTIVITY_CLEAR_WHEN_TASK_RESET
	 * @property {Integer}
	 */
	FLAG_ACTIVITY_CLEAR_WHEN_TASK_RESET: 0,
	/**
	 * 
	 * @alias Titanium.Android.FLAG_ACTIVITY_EXCLUDE_FROM_RECENTS
	 * @property {Integer}
	 */
	FLAG_ACTIVITY_EXCLUDE_FROM_RECENTS: 0,
	/**
	 * 
	 * @alias Titanium.Android.FLAG_ACTIVITY_FORWARD_RESULT
	 * @property {Integer}
	 */
	FLAG_ACTIVITY_FORWARD_RESULT: 0,
	/**
	 * 
	 * @alias Titanium.Android.FLAG_ACTIVITY_LAUNCHED_FROM_HISTORY
	 * @property {Integer}
	 */
	FLAG_ACTIVITY_LAUNCHED_FROM_HISTORY: 0,
	/**
	 * 
	 * @alias Titanium.Android.FLAG_ACTIVITY_MULTIPLE_TASK
	 * @property {Integer}
	 */
	FLAG_ACTIVITY_MULTIPLE_TASK: 0,
	/**
	 * 
	 * @alias Titanium.Android.FLAG_ACTIVITY_NEW_TASK
	 * @property {Integer}
	 */
	FLAG_ACTIVITY_NEW_TASK: 0,
	/**
	 * 
	 * @alias Titanium.Android.FLAG_ACTIVITY_NO_HISTORY
	 * @property {Integer}
	 */
	FLAG_ACTIVITY_NO_HISTORY: 0,
	/**
	 * 
	 * @alias Titanium.Android.FLAG_ACTIVITY_NO_USER_ACTION
	 * @property {Integer}
	 */
	FLAG_ACTIVITY_NO_USER_ACTION: 0,
	/**
	 * 
	 * @alias Titanium.Android.FLAG_ACTIVITY_PREVIOUS_IS_TOP
	 * @property {Integer}
	 */
	FLAG_ACTIVITY_PREVIOUS_IS_TOP: 0,
	/**
	 * 
	 * @alias Titanium.Android.FLAG_ACTIVITY_REORDER_TO_FRONT
	 * @property {Integer}
	 */
	FLAG_ACTIVITY_REORDER_TO_FRONT: 0,
	/**
	 * 
	 * @alias Titanium.Android.FLAG_ACTIVITY_RESET_TASK_IF_NEEDED
	 * @property {Integer}
	 */
	FLAG_ACTIVITY_RESET_TASK_IF_NEEDED: 0,
	/**
	 * 
	 * @alias Titanium.Android.FLAG_ACTIVITY_SINGLE_TOP
	 * @property {Integer}
	 */
	FLAG_ACTIVITY_SINGLE_TOP: 0,
	/**
	 * 
	 * @alias Titanium.Android.FLAG_DEBUG_LOG_RESOLUTION
	 * @property {Integer}
	 */
	FLAG_DEBUG_LOG_RESOLUTION: 0,
	/**
	 * 
	 * @alias Titanium.Android.FLAG_FROM_BACKGROUND
	 * @property {Integer}
	 */
	FLAG_FROM_BACKGROUND: 0,
	/**
	 * 
	 * @alias Titanium.Android.FLAG_GRANT_READ_URI_PERMISSION
	 * @property {Integer}
	 */
	FLAG_GRANT_READ_URI_PERMISSION: 0,
	/**
	 * 
	 * @alias Titanium.Android.FLAG_GRANT_WRITE_URI_PERMISSION
	 * @property {Integer}
	 */
	FLAG_GRANT_WRITE_URI_PERMISSION: 0,
	/**
	 * 
	 * @alias Titanium.Android.FLAG_RECEIVER_REGISTERED_ONLY
	 * @property {Integer}
	 */
	FLAG_RECEIVER_REGISTERED_ONLY: 0,
	/**
	 * 
	 * @alias Titanium.Android.PENDING_INTENT_FOR_ACTIVITY
	 * @property {Integer}
	 */
	PENDING_INTENT_FOR_ACTIVITY: 0,
	/**
	 * 
	 * @alias Titanium.Android.PENDING_INTENT_FOR_BROADCAST
	 * @property {Integer}
	 */
	PENDING_INTENT_FOR_BROADCAST: 0,
	/**
	 * 
	 * @alias Titanium.Android.PENDING_INTENT_FOR_SERVICE
	 * @property {Integer}
	 */
	PENDING_INTENT_FOR_SERVICE: 0,
	/**
	 * 
	 * @alias Titanium.Android.PENDING_INTENT_MAX_VALUE
	 * @property {Integer}
	 */
	PENDING_INTENT_MAX_VALUE: 0,
	/**
	 * Accessor for android resources
	 * @alias Titanium.Android.R
	 * @property {Object}
	 */
	R: {},
	/**
	 * 
	 * @alias Titanium.Android.RESULT_CANCELED
	 * @property {Integer}
	 */
	RESULT_CANCELED: 0,
	/**
	 * 
	 * @alias Titanium.Android.RESULT_FIRST_USER
	 * @property {Integer}
	 */
	RESULT_FIRST_USER: 0,
	/**
	 * 
	 * @alias Titanium.Android.RESULT_OK
	 * @property {Integer}
	 */
	RESULT_OK: 0,
	/**
	 * 
	 * @alias Titanium.Android.SCREEN_ORIENTATION_BEHIND
	 * @property {Integer}
	 */
	SCREEN_ORIENTATION_BEHIND: 0,
	/**
	 * 
	 * @alias Titanium.Android.SCREEN_ORIENTATION_LANDSCAPE
	 * @property {Integer}
	 */
	SCREEN_ORIENTATION_LANDSCAPE: 0,
	/**
	 * 
	 * @alias Titanium.Android.SCREEN_ORIENTATION_NOSENSOR
	 * @property {Integer}
	 */
	SCREEN_ORIENTATION_NOSENSOR: 0,
	/**
	 * 
	 * @alias Titanium.Android.SCREEN_ORIENTATION_PORTRAIT
	 * @property {Integer}
	 */
	SCREEN_ORIENTATION_PORTRAIT: 0,
	/**
	 * 
	 * @alias Titanium.Android.SCREEN_ORIENTATION_SENSOR
	 * @property {Integer}
	 */
	SCREEN_ORIENTATION_SENSOR: 0,
	/**
	 * 
	 * @alias Titanium.Android.SCREEN_ORIENTATION_UNSPECIFIED
	 * @property {Integer}
	 */
	SCREEN_ORIENTATION_UNSPECIFIED: 0,
	/**
	 * 
	 * @alias Titanium.Android.SCREEN_ORIENTATION_USER
	 * @property {Integer}
	 */
	SCREEN_ORIENTATION_USER: 0,
	/**
	 * 
	 * @alias Titanium.Android.URI_INTENT_SCHEME
	 * @property {Integer}
	 */
	URI_INTENT_SCHEME: 0,
	/**
	 * add an event listener for the instance to receive view triggered events
	 * @param {String} name name of the event
	 * @param {Function} callback callback function to invoke when the event is fired
	 * @alias Titanium.Android.addEventListener
	 */
	addEventListener: function (name,callback) { },
	/**
	 * Create a Titanium.Android.Intent. Used to start other Activities and for marshaling data.
	 * @alias Titanium.Android.createIntent
	 * @return {Titanium_Android_Intent}
	 */
	createIntent: function () { return new Titanium_Android_Intent(); },
	/**
	 * Display chooser interface to allow selection of desired target.
	 * @alias Titanium.Android.createIntentChooser
	 * @return {BLANK}
	 */
	createIntentChooser: function () { return new BLANK(); },
	/**
	 * Create a Titanium.Android.Service so you can start/stop it and listen for events from it.
	 * @param {Object} intent A <a href="Titanium.Android.Intent.html">Titanium.Android.Intent</a> object created with <a href="Titanium.Android.createServiceIntent-method.html">Titanium.Android.createServiceIntent</a> which specifies the service to be instantiated.
	 * @alias Titanium.Android.createService
	 * @return {Titanium_Android_Service}
	 */
	createService: function (intent) { return new Titanium_Android_Service(); },
	/**
	 * Create an Intent to be used to start a Service.
	 * @param {Object} options Options dictionary -- pass in a <tt>url</tt> option to specify the path to a javascript-based service you create.
	 * @alias Titanium.Android.createServiceIntent
	 * @return {BLANK}
	 */
	createServiceIntent: function (options) { return new BLANK(); },
	/**
	 * fire a synthesized event to the views listener
	 * @param {String} name name of the event
	 * @param {Object} event event object
	 * @alias Titanium.Android.fireEvent
	 */
	fireEvent: function (name,event) { },
	/**
	 * Check on state of Service.
	 * @param {Object} intent A <a href="Titanium.Android.Intent.html">Titanium.Android.Intent</a> object created with <a href="Titanium.Android.createServiceIntent-method.html">Titanium.Android.createServiceIntent</a> which specifies the service to check.
	 * @alias Titanium.Android.isServiceRunning
	 * @return {Boolean}
	 */
	isServiceRunning: function (intent) { return false; },
	/**
	 * remove a previously added event listener
	 * @param {String} name name of the event
	 * @param {Function} callback callback function passed in addEventListener
	 * @alias Titanium.Android.removeEventListener
	 */
	removeEventListener: function (name,callback) { },
	/**
	 * Start a simple service
	 * @param {Object} intent A <a href="Titanium.Android.Intent.html">Titanium.Android.Intent</a> object created with <a href="Titanium.Android.createServiceIntent-method.html">Titanium.Android.createServiceIntent</a> which specifies the service to start.
	 * @alias Titanium.Android.startService
	 */
	startService: function (intent) { },
	/**
	 * Stop a simple service that was started with startService.
	 * @param {Object} intent A <a href="Titanium.Android.Intent.html">Titanium.Android.Intent</a> object created with <a href="Titanium.Android.createServiceIntent-method.html">Titanium.Android.createServiceIntent</a> which specifies the service to stop.
	 * @alias Titanium.Android.stopService
	 */
	stopService: function (intent) { },
};

/**
 * The Titanium binding of an Android Activity
 * @since 1.5
 */
Titanium.Android.Activity = {
	/**
	 * The Intent that was used to start this Activity
	 * @alias Titanium.Android.Activity.intent
	 * @property {<a href="Titanium.Android.Intent.html">Titanium.Android.Intent</a>}
	 */
	intent: {},
	/**
	 * Get the The Intent that was used to start this Activity
	 * @alias Titanium.Android.Activity.getIntent
	 * @return {<a href="Titanium.Android.Intent.html">Titanium.Android.Intent</a>}
	 */
	getIntent: function () { return intent; },
	/**
	 * Set the The Intent that was used to start this Activity
	 * @param {<a href="Titanium.Android.Intent.html">Titanium.Android.Intent</a>} value New value to set.
	 * @alias Titanium.Android.Activity.setIntent
	 */
	setIntent: function () { },
	/**
	 * A callback function that is called to initially create an Android Options Menu for this Activity when the user presses the Menu button. See the menu examples in Titanium.Android.Menu
	 * @alias Titanium.Android.Activity.onCreateOptionsMenu
	 * @property {callback}
	 */
	onCreateOptionsMenu: {},
	/**
	 * Get the A callback function that is called to initially create an Android Options Menu for this Activity when the user presses the Menu button. See the menu examples in Titanium.Android.Menu
	 * @alias Titanium.Android.Activity.getOnCreateOptionsMenu
	 * @return {callback}
	 */
	getOnCreateOptionsMenu: function () { return onCreateOptionsMenu; },
	/**
	 * Set the A callback function that is called to initially create an Android Options Menu for this Activity when the user presses the Menu button. See the menu examples in Titanium.Android.Menu
	 * @param {callback} value New value to set.
	 * @alias Titanium.Android.Activity.setOnCreateOptionsMenu
	 */
	setOnCreateOptionsMenu: function () { },
	/**
	 * A callback function that is called to prepare an Options Menu for displaying on this Activity when the user presses the Menu button. See the menu examples in Titanium.Android.Menu
	 * @alias Titanium.Android.Activity.onPrepareOptionsMenu
	 * @property {callback}
	 */
	onPrepareOptionsMenu: {},
	/**
	 * Get the A callback function that is called to prepare an Options Menu for displaying on this Activity when the user presses the Menu button. See the menu examples in Titanium.Android.Menu
	 * @alias Titanium.Android.Activity.getOnPrepareOptionsMenu
	 * @return {callback}
	 */
	getOnPrepareOptionsMenu: function () { return onPrepareOptionsMenu; },
	/**
	 * Set the A callback function that is called to prepare an Options Menu for displaying on this Activity when the user presses the Menu button. See the menu examples in Titanium.Android.Menu
	 * @param {callback} value New value to set.
	 * @alias Titanium.Android.Activity.setOnPrepareOptionsMenu
	 */
	setOnPrepareOptionsMenu: function () { },
	/**
	 * The requested orientation of this Activity. See possible constant values that begin with SCREEN_ORIENTATION in the Titanium.Android module.
	 * @alias Titanium.Android.Activity.requestedOrientation
	 * @property {Integer}
	 */
	requestedOrientation: 0,
	/**
	 * Get the The requested orientation of this Activity. See possible constant values that begin with SCREEN_ORIENTATION in the Titanium.Android module.
	 * @alias Titanium.Android.Activity.getRequestedOrientation
	 * @return {Integer}
	 */
	getRequestedOrientation: function () { return requestedOrientation; },
	/**
	 * Set the The requested orientation of this Activity. See possible constant values that begin with SCREEN_ORIENTATION in the Titanium.Android module.
	 * @param {Integer} value New value to set.
	 * @alias Titanium.Android.Activity.setRequestedOrientation
	 */
	setRequestedOrientation: function () { },
	/**
	 * Returns the Titanium.Android.Intent that was used to start this Activity.
	 * @alias Titanium.Android.Activity.getIntent
	 * @return {<a href="Titanium.Android.Intent.html">Titanium.Android.Intent</a>}
	 */
	getIntent: function () { return {}; },
	/**
	 * Get an Android or Application string using the passed-in Resource ID and optional format arguments. Also see Android's documentation for getString and String Resources
	 * @param {Integer} resourceId A Resource ID from the Application or Android.
	 * @param {Array,...} format Optional format arguments for the String resource
	 * @alias Titanium.Android.Activity.getString
	 * @return {String}
	 */
	getString: function (resourceId,format) { return ''; },
	/**
	 * Set the requested Activity orientation. Also see Android's documentation for setRequestedOrientation
	 * @param {Integer} orientation Can be one of <a href="Titanium.Android.SCREEN_ORIENTATION_BEHIND.html">Titanium.Android.SCREEN_ORIENTATION_BEHIND</a>, <a href="Titanium.Android.SCREEN_ORIENTATION_LANDSCAPE.html">Titanium.Android.SCREEN_ORIENTATION_LANDSCAPE</a>, <a href="Titanium.Android.SCREEN_ORIENTATION_NOSENSOR.html">Titanium.Android.SCREEN_ORIENTATION_NOSENSOR</a>, <a href="Titanium.Android.SCREEN_ORIENTATION_PORTRAIT.html">Titanium.Android.SCREEN_ORIENTATION_PORTRAIT</a>, <a href="Titanium.Android.SCREEN_ORIENTATION_SENSOR.html">Titanium.Android.SCREEN_ORIENTATION_SENSOR</a>, <a href="Titanium.Android.SCREEN_ORIENTATION_UNSPECIFIED.html">Titanium.Android.SCREEN_ORIENTATION_UNSPECIFIED</a>, <a href="Titanium.Android.SCREEN_ORIENTATION_USER.html">Titanium.Android.SCREEN_ORIENTATION_USER</a>
	 * @alias Titanium.Android.Activity.setRequestedOrientation
	 */
	setRequestedOrientation: function (orientation) { },
	/**
	 * Sets the result of this Activity using an Intent. This should be used in the case when the Activity responds to startActivityForResult. Also see Android's documentation for setResult
	 * @param {Integer} resultCode The result code for this Activity. Must be one of <a href="Titanium.Android.RESULT_OK.html">Titanium.Android.RESULT_OK</a>, <a href="Titanium.Android.RESULT_CANCELED.html">Titanium.Android.RESULT_CANCELED</a>, <a href="Titanium.Android.RESULT_FIRST_USER.html">Titanium.Android.RESULT_FIRST_USER</a>
	 * @param {<a href="Titanium.Android.Intent.html">Titanium.Android.Intent</a>} intent An optional <a href="Titanium.Android.Intent.html">Titanium.Android.Intent</a> with extra result data
	 * @alias Titanium.Android.Activity.setResult
	 */
	setResult: function (resultCode,intent) { },
	/**
	 * Starts a new Activity, using the passed in Intent as the description. Also see Android's documentation for startActivity
	 * @param {<a href="Titanium.Android.Intent.html">Titanium.Android.Intent</a>} intent Description of the Activity to start
	 * @alias Titanium.Android.Activity.startActivity
	 */
	startActivity: function (intent) { },
	/**
	 * The same as startActivity, but also accepts a callback function for handling the result of the started Activity. Also see Android's documentation for startActivityForResult
	 * @param {<a href="Titanium.Android.Intent.html">Titanium.Android.Intent</a>} intent Description of the Activity to start
	 * @param {Function} callback A callback function that is executed when the Activity has set it's result. See example in <a href="Titanium.Android.Activity-proxy.html">Titanium.Android.Activity</a>.
	 * @alias Titanium.Android.Activity.startActivityForResult
	 */
	startActivityForResult: function (intent,callback) { },
};

/**
 * The Android.Calendar module provides proxies and methods for accessing the native Android calendar functionality.
 * @since 1.5
 */
Titanium.Android.Calendar = {
	/**
	 * constant for the Titanium.Android.Calendar.Reminder method property.
	 * @alias Titanium.Android.Calendar.METHOD_ALERT
	 * @property {Integer}
	 */
	METHOD_ALERT: 0,
	/**
	 * constant for the Titanium.Android.Calendar.Reminder method property.
	 * @alias Titanium.Android.Calendar.METHOD_DEFAULT
	 * @property {Integer}
	 */
	METHOD_DEFAULT: 0,
	/**
	 * constant for the Titanium.Android.Calendar.Reminder method property.
	 * @alias Titanium.Android.Calendar.METHOD_EMAIL
	 * @property {Integer}
	 */
	METHOD_EMAIL: 0,
	/**
	 * constant for the Titanium.Android.Calendar.Reminder method property.
	 * @alias Titanium.Android.Calendar.METHOD_SMS
	 * @property {Integer}
	 */
	METHOD_SMS: 0,
	/**
	 * constant for the Titanium.Android.Calendar.Alert state property.
	 * @alias Titanium.Android.Calendar.STATE_DISMISSED
	 * @property {Integer}
	 */
	STATE_DISMISSED: 0,
	/**
	 * constant for the Titanium.Android.Calendar.Alert state property.
	 * @alias Titanium.Android.Calendar.STATE_FIRED
	 * @property {Integer}
	 */
	STATE_FIRED: 0,
	/**
	 * constant for the Titanium.Android.Calendar.Alert state property.
	 * @alias Titanium.Android.Calendar.STATE_SCHEDULED
	 * @property {Integer}
	 */
	STATE_SCHEDULED: 0,
	/**
	 * constant for the Titanium.Android.Calendar.Event status property.
	 * @alias Titanium.Android.Calendar.STATUS_CANCELED
	 * @property {Integer}
	 */
	STATUS_CANCELED: 0,
	/**
	 * constant for the Titanium.Android.Calendar.Event status property.
	 * @alias Titanium.Android.Calendar.STATUS_CONFIRMED
	 * @property {Integer}
	 */
	STATUS_CONFIRMED: 0,
	/**
	 * constant for the Titanium.Android.Calendar.Event status property.
	 * @alias Titanium.Android.Calendar.STATUS_TENTATIVE
	 * @property {Integer}
	 */
	STATUS_TENTATIVE: 0,
	/**
	 * constant for the Titanium.Android.Calendar.Event visibility property.
	 * @alias Titanium.Android.Calendar.VISIBILITY_CONFIDENTIAL
	 * @property {Integer}
	 */
	VISIBILITY_CONFIDENTIAL: 0,
	/**
	 * constant for the Titanium.Android.Calendar.Event visibility property.
	 * @alias Titanium.Android.Calendar.VISIBILITY_DEFAULT
	 * @property {Integer}
	 */
	VISIBILITY_DEFAULT: 0,
	/**
	 * constant for the Titanium.Android.Calendar.Event visibility property.
	 * @alias Titanium.Android.Calendar.VISIBILITY_PRIVATE
	 * @property {Integer}
	 */
	VISIBILITY_PRIVATE: 0,
	/**
	 * constant for the Titanium.Android.Calendar.Event visibility property.
	 * @alias Titanium.Android.Calendar.VISIBILITY_PUBLIC
	 * @property {Integer}
	 */
	VISIBILITY_PUBLIC: 0,
	/**
	 * Array of Titanium.Android.Calendar.Alert objects representing all alerts.
	 * @alias Titanium.Android.Calendar.allAlerts
	 * @property {Array}
	 */
	allAlerts: [],
	/**
	 * Get the Array of Titanium.Android.Calendar.Alert objects representing all alerts.
	 * @alias Titanium.Android.Calendar.getAllAlerts
	 * @return {Array}
	 */
	getAllAlerts: function () { return allAlerts; },
	/**
	 * Set the Array of Titanium.Android.Calendar.Alert objects representing all alerts.
	 * @param {Array} value New value to set.
	 * @alias Titanium.Android.Calendar.setAllAlerts
	 */
	setAllAlerts: function () { },
	/**
	 * Array of Titanium.Android.Calendar.Calendar objects representing all the calendars known to the native calendar app.
	 * @alias Titanium.Android.Calendar.allCalendars
	 * @property {Array}
	 */
	allCalendars: [],
	/**
	 * Get the Array of Titanium.Android.Calendar.Calendar objects representing all the calendars known to the native calendar app.
	 * @alias Titanium.Android.Calendar.getAllCalendars
	 * @return {Array}
	 */
	getAllCalendars: function () { return allCalendars; },
	/**
	 * Set the Array of Titanium.Android.Calendar.Calendar objects representing all the calendars known to the native calendar app.
	 * @param {Array} value New value to set.
	 * @alias Titanium.Android.Calendar.setAllCalendars
	 */
	setAllCalendars: function () { },
	/**
	 * Array of Titanium.Android.Calendar.Calendar objects representing calendars selected within the native calendar app. This may be a subset of allCalendars; for example, the native calendar application may know -- via your Gooogle account -- about calendars that you have access to but have not selected to be displayed in the native calendar app.
	 * @alias Titanium.Android.Calendar.selectableCalendars
	 * @property {Array}
	 */
	selectableCalendars: [],
	/**
	 * Get the Array of Titanium.Android.Calendar.Calendar objects representing calendars selected within the native calendar app. This may be a subset of allCalendars; for example, the native calendar application may know -- via your Gooogle account -- about calendars that you have access to but have not selected to be displayed in the native calendar app.
	 * @alias Titanium.Android.Calendar.getSelectableCalendars
	 * @return {Array}
	 */
	getSelectableCalendars: function () { return selectableCalendars; },
	/**
	 * Set the Array of Titanium.Android.Calendar.Calendar objects representing calendars selected within the native calendar app. This may be a subset of allCalendars; for example, the native calendar application may know -- via your Gooogle account -- about calendars that you have access to but have not selected to be displayed in the native calendar app.
	 * @param {Array} value New value to set.
	 * @alias Titanium.Android.Calendar.setSelectableCalendars
	 */
	setSelectableCalendars: function () { },
	/**
	 * add an event listener for the instance to receive view triggered events
	 * @param {String} name name of the event
	 * @param {Function} callback callback function to invoke when the event is fired
	 * @alias Titanium.Android.Calendar.addEventListener
	 */
	addEventListener: function (name,callback) { },
	/**
	 * create and return an instance of Titanium.Android.Calendar.Alert
	 * @param {Object} [parameters] (optional) a dictionary object properties defined in <a href="Titanium.Android.Calendar.Alert.html">Titanium.Android.Calendar.Alert</a>
	 * @alias Titanium.Android.Calendar.createAlert
	 * @return {Titanium_Android_Calendar_Alert}
	 */
	createAlert: function (parameters) { return new Titanium_Android_Calendar_Alert(); },
	/**
	 * create and return an instance of Titanium.Android.Calendar.Calendar
	 * @param {Object} [parameters] (optional) a dictionary object properties defined in <a href="Titanium.Android.Calendar.Calendar.html">Titanium.Android.Calendar.Calendar</a>
	 * @alias Titanium.Android.Calendar.createCalendar
	 * @return {Titanium_Android_Calendar_Calendar}
	 */
	createCalendar: function (parameters) { return new Titanium_Android_Calendar_Calendar(); },
	/**
	 * create and return an instance of Titanium.Android.Calendar.Event
	 * @param {Object} [parameters] (optional) a dictionary object properties defined in <a href="Titanium.Android.Calendar.Event.html">Titanium.Android.Calendar.Event</a>
	 * @alias Titanium.Android.Calendar.createEvent
	 * @return {Titanium_Android_Calendar_Event}
	 */
	createEvent: function (parameters) { return new Titanium_Android_Calendar_Event(); },
	/**
	 * create and return an instance of Titanium.Android.Calendar.Reminder
	 * @param {Object} [parameters] (optional) a dictionary object properties defined in <a href="Titanium.Android.Calendar.Reminder.html">Titanium.Android.Calendar.Reminder</a>
	 * @alias Titanium.Android.Calendar.createReminder
	 * @return {Titanium_Android_Calendar_Reminder}
	 */
	createReminder: function (parameters) { return new Titanium_Android_Calendar_Reminder(); },
	/**
	 * fire a synthesized event to the views listener
	 * @param {String} name name of the event
	 * @param {Object} event event object
	 * @alias Titanium.Android.Calendar.fireEvent
	 */
	fireEvent: function (name,event) { },
	/**
	 * Returns the Titanium.Android.Calendar.Calendar object specified by the given integer id.
	 * @param {Integer} id The system id of the calendar to be retrieved.
	 * @alias Titanium.Android.Calendar.getCalendarById
	 * @return {Object}
	 */
	getCalendarById: function (id) { return {}; },
	/**
	 * remove a previously added event listener
	 * @param {String} name name of the event
	 * @param {Function} callback callback function passed in addEventListener
	 * @alias Titanium.Android.Calendar.removeEventListener
	 */
	removeEventListener: function (name,callback) { },
};

/**
 * An object which represents a single alert for an event in an Android calendar.
 * @since 1.5
 */
Titanium.Android.Calendar.Alert = {
	/**
	 * The date/time at which the alert's alarm is triggered.
	 * @alias Titanium.Android.Calendar.Alert.alarmTime
	 * @property {Date}
	 */
	alarmTime: new Date(),
	/**
	 * Get the The date/time at which the alert's alarm is triggered.
	 * @alias Titanium.Android.Calendar.Alert.getAlarmTime
	 * @return {Date}
	 */
	getAlarmTime: function () { return alarmTime; },
	/**
	 * Set the The date/time at which the alert's alarm is triggered.
	 * @param {Date} value New value to set.
	 * @alias Titanium.Android.Calendar.Alert.setAlarmTime
	 */
	setAlarmTime: function () { },
	/**
	 * The date/time at which the corresponding event begins.
	 * @alias Titanium.Android.Calendar.Alert.begin
	 * @property {Date}
	 */
	begin: new Date(),
	/**
	 * Get the The date/time at which the corresponding event begins.
	 * @alias Titanium.Android.Calendar.Alert.getBegin
	 * @return {Date}
	 */
	getBegin: function () { return begin; },
	/**
	 * Set the The date/time at which the corresponding event begins.
	 * @param {Date} value New value to set.
	 * @alias Titanium.Android.Calendar.Alert.setBegin
	 */
	setBegin: function () { },
	/**
	 * The date/time at which the corresponding event ends.
	 * @alias Titanium.Android.Calendar.Alert.end
	 * @property {Date}
	 */
	end: new Date(),
	/**
	 * Get the The date/time at which the corresponding event ends.
	 * @alias Titanium.Android.Calendar.Alert.getEnd
	 * @return {Date}
	 */
	getEnd: function () { return end; },
	/**
	 * Set the The date/time at which the corresponding event ends.
	 * @param {Date} value New value to set.
	 * @alias Titanium.Android.Calendar.Alert.setEnd
	 */
	setEnd: function () { },
	/**
	 * The integer id of the event for which the alert is set.
	 * @alias Titanium.Android.Calendar.Alert.eventId
	 * @property {Integer}
	 */
	eventId: 0,
	/**
	 * Get the The integer id of the event for which the alert is set.
	 * @alias Titanium.Android.Calendar.Alert.getEventId
	 * @return {Integer}
	 */
	getEventId: function () { return eventId; },
	/**
	 * Set the The integer id of the event for which the alert is set.
	 * @param {Integer} value New value to set.
	 * @alias Titanium.Android.Calendar.Alert.setEventId
	 */
	setEventId: function () { },
	/**
	 * The id of the alert.
	 * @alias Titanium.Android.Calendar.Alert.id
	 * @property {String}
	 */
	id: '',
	/**
	 * Get the The id of the alert.
	 * @alias Titanium.Android.Calendar.Alert.getId
	 * @return {String}
	 */
	getId: function () { return id; },
	/**
	 * Set the The id of the alert.
	 * @param {String} value New value to set.
	 * @alias Titanium.Android.Calendar.Alert.setId
	 */
	setId: function () { },
	/**
	 * The minutes before the event when the alert should trigger.
	 * @alias Titanium.Android.Calendar.Alert.minutes
	 * @property {Integer}
	 */
	minutes: 0,
	/**
	 * Get the The minutes before the event when the alert should trigger.
	 * @alias Titanium.Android.Calendar.Alert.getMinutes
	 * @return {Integer}
	 */
	getMinutes: function () { return minutes; },
	/**
	 * Set the The minutes before the event when the alert should trigger.
	 * @param {Integer} value New value to set.
	 * @alias Titanium.Android.Calendar.Alert.setMinutes
	 */
	setMinutes: function () { },
	/**
	 * The current state of the alert.  Possible values are the STATE_ constants in Titanium.Android.Calendar.
	 * @alias Titanium.Android.Calendar.Alert.state
	 * @property {Integer}
	 */
	state: 0,
	/**
	 * Get the The current state of the alert.  Possible values are the STATE_ constants in Titanium.Android.Calendar.
	 * @alias Titanium.Android.Calendar.Alert.getState
	 * @return {Integer}
	 */
	getState: function () { return state; },
	/**
	 * Set the The current state of the alert.  Possible values are the STATE_ constants in Titanium.Android.Calendar.
	 * @param {Integer} value New value to set.
	 * @alias Titanium.Android.Calendar.Alert.setState
	 */
	setState: function () { },
};

/**
 * An object which represents a single calendar in Android.
 * @since 1.5
 */
Titanium.Android.Calendar.Calendar = {
	/**
	 * Whether the calendar is hidden.
	 * @alias Titanium.Android.Calendar.Calendar.hidden
	 * @property {Boolean}
	 */
	hidden: false,
	/**
	 * Get the Whether the calendar is hidden.
	 * @alias Titanium.Android.Calendar.Calendar.getHidden
	 * @return {Boolean}
	 */
	getHidden: function () { return hidden; },
	/**
	 * Set the Whether the calendar is hidden.
	 * @param {Boolean} value New value to set.
	 * @alias Titanium.Android.Calendar.Calendar.setHidden
	 */
	setHidden: function () { },
	/**
	 * The id of the calendar.
	 * @alias Titanium.Android.Calendar.Calendar.id
	 * @property {String}
	 */
	id: '',
	/**
	 * Get the The id of the calendar.
	 * @alias Titanium.Android.Calendar.Calendar.getId
	 * @return {String}
	 */
	getId: function () { return id; },
	/**
	 * Set the The id of the calendar.
	 * @param {String} value New value to set.
	 * @alias Titanium.Android.Calendar.Calendar.setId
	 */
	setId: function () { },
	/**
	 * The display name of the calendar.
	 * @alias Titanium.Android.Calendar.Calendar.name
	 * @property {String}
	 */
	name: '',
	/**
	 * Get the The display name of the calendar.
	 * @alias Titanium.Android.Calendar.Calendar.getName
	 * @return {String}
	 */
	getName: function () { return name; },
	/**
	 * Set the The display name of the calendar.
	 * @param {String} value New value to set.
	 * @alias Titanium.Android.Calendar.Calendar.setName
	 */
	setName: function () { },
	/**
	 * Whether the calendar is selected.
	 * @alias Titanium.Android.Calendar.Calendar.selected
	 * @property {Boolean}
	 */
	selected: false,
	/**
	 * Get the Whether the calendar is selected.
	 * @alias Titanium.Android.Calendar.Calendar.getSelected
	 * @return {Boolean}
	 */
	getSelected: function () { return selected; },
	/**
	 * Set the Whether the calendar is selected.
	 * @param {Boolean} value New value to set.
	 * @alias Titanium.Android.Calendar.Calendar.setSelected
	 */
	setSelected: function () { },
	/**
	 * Add an event to the calendar. Returns the created Titanium.Android.Calendar.Event.
	 * @param {Object} properties An object defining the properties of the event.  These correspond to properties of <a href="Titanium.Android.Calendar.Event.html">Titanium.Android.Calendar.Event</a>.
	 * @alias Titanium.Android.Calendar.Calendar.createEvent
	 * @return {Titanium_Android_Calendar_Event}
	 */
	createEvent: function (properties) { return new Titanium_Android_Calendar_Event(); },
	/**
	 * Returns the Titanium.Android.Calendar.Event object for the event with the given integer id.
	 * @param {Integer} id The integer id of the event to return.
	 * @alias Titanium.Android.Calendar.Calendar.getEventById
	 * @return {Object}
	 */
	getEventById: function (id) { return {}; },
	/**
	 * Returns an array of Titanium.Android.Calendar.Event objects with all events in the given date range.
	 * @param {Date} date1 The start date.
	 * @param {Date} date2 The end date.
	 * @alias Titanium.Android.Calendar.Calendar.getEventsBetweenDates
	 * @return {Array}
	 */
	getEventsBetweenDates: function (date1,date2) { return []; },
	/**
	 * Returns an array of Titanium.Android.Calendar.Event objects with all events on the given date.
	 * @param {Integer} year The year of the desired date.
	 * @param {Integer} month The month of the desired date.  The month is zero-based, therefore January is 0 and December is 11.
	 * @param {Integer} day The day for which events should be returned.
	 * @alias Titanium.Android.Calendar.Calendar.getEventsInDate
	 * @return {Array}
	 */
	getEventsInDate: function (year,month,day) { return []; },
	/**
	 * Returns an array of Titanium.Android.Calendar.Event objects with all events in the given month.
	 * @param {Integer} year The year of the desired month.
	 * @param {Integer} month The month for which events should be returned.  The month is zero-based, therefore January is 0 and December is 11.
	 * @alias Titanium.Android.Calendar.Calendar.getEventsInMonth
	 * @return {Array}
	 */
	getEventsInMonth: function (year,month) { return []; },
	/**
	 * Returns an array of Titanium.Android.Calendar.Event objects with all events in the given year.
	 * @param {Integer} year The year for which all events should be returned.
	 * @alias Titanium.Android.Calendar.Calendar.getEventsInYear
	 * @return {Array}
	 */
	getEventsInYear: function (year) { return []; },
};

/**
 * An object which represents a single event in an Android calendar.
 * @since 1.5
 */
Titanium.Android.Calendar.Event = {
	/**
	 * An array of Titanium.Android.Calendar.Alert objects which are the alerts - if any - for this event.
	 * @alias Titanium.Android.Calendar.Event.alerts
	 * @property {Array}
	 */
	alerts: [],
	/**
	 * Get the An array of Titanium.Android.Calendar.Alert objects which are the alerts - if any - for this event.
	 * @alias Titanium.Android.Calendar.Event.getAlerts
	 * @return {Array}
	 */
	getAlerts: function () { return alerts; },
	/**
	 * Set the An array of Titanium.Android.Calendar.Alert objects which are the alerts - if any - for this event.
	 * @param {Array} value New value to set.
	 * @alias Titanium.Android.Calendar.Event.setAlerts
	 */
	setAlerts: function () { },
	/**
	 * Whether the event is all day.
	 * @alias Titanium.Android.Calendar.Event.allDay
	 * @property {Boolean}
	 */
	allDay: false,
	/**
	 * Get the Whether the event is all day.
	 * @alias Titanium.Android.Calendar.Event.getAllDay
	 * @return {Boolean}
	 */
	getAllDay: function () { return allDay; },
	/**
	 * Set the Whether the event is all day.
	 * @param {Boolean} value New value to set.
	 * @alias Titanium.Android.Calendar.Event.setAllDay
	 */
	setAllDay: function () { },
	/**
	 * The date/time at which the event begins.
	 * @alias Titanium.Android.Calendar.Event.begin
	 * @property {Date}
	 */
	begin: new Date(),
	/**
	 * Get the The date/time at which the event begins.
	 * @alias Titanium.Android.Calendar.Event.getBegin
	 * @return {Date}
	 */
	getBegin: function () { return begin; },
	/**
	 * Set the The date/time at which the event begins.
	 * @param {Date} value New value to set.
	 * @alias Titanium.Android.Calendar.Event.setBegin
	 */
	setBegin: function () { },
	/**
	 * The event description.
	 * @alias Titanium.Android.Calendar.Event.description
	 * @property {String}
	 */
	description: '',
	/**
	 * Get the The event description.
	 * @alias Titanium.Android.Calendar.Event.getDescription
	 * @return {String}
	 */
	getDescription: function () { return description; },
	/**
	 * Set the The event description.
	 * @param {String} value New value to set.
	 * @alias Titanium.Android.Calendar.Event.setDescription
	 */
	setDescription: function () { },
	/**
	 * The date/time at which the event ends.
	 * @alias Titanium.Android.Calendar.Event.end
	 * @property {Date}
	 */
	end: new Date(),
	/**
	 * Get the The date/time at which the event ends.
	 * @alias Titanium.Android.Calendar.Event.getEnd
	 * @return {Date}
	 */
	getEnd: function () { return end; },
	/**
	 * Set the The date/time at which the event ends.
	 * @param {Date} value New value to set.
	 * @alias Titanium.Android.Calendar.Event.setEnd
	 */
	setEnd: function () { },
	/**
	 * An object containing extended properties of the event.
	 * @alias Titanium.Android.Calendar.Event.extendedProperties
	 * @property {Object}
	 */
	extendedProperties: {},
	/**
	 * Get the An object containing extended properties of the event.
	 * @alias Titanium.Android.Calendar.Event.getExtendedProperties
	 * @return {Object}
	 */
	getExtendedProperties: function () { return extendedProperties; },
	/**
	 * Set the An object containing extended properties of the event.
	 * @param {Object} value New value to set.
	 * @alias Titanium.Android.Calendar.Event.setExtendedProperties
	 */
	setExtendedProperties: function () { },
	/**
	 * Whether an alarm is scheduled for the event.
	 * @alias Titanium.Android.Calendar.Event.hasAlarm
	 * @property {Boolean}
	 */
	hasAlarm: false,
	/**
	 * Get the Whether an alarm is scheduled for the event.
	 * @alias Titanium.Android.Calendar.Event.getHasAlarm
	 * @return {Boolean}
	 */
	getHasAlarm: function () { return hasAlarm; },
	/**
	 * Set the Whether an alarm is scheduled for the event.
	 * @param {Boolean} value New value to set.
	 * @alias Titanium.Android.Calendar.Event.setHasAlarm
	 */
	setHasAlarm: function () { },
	/**
	 * 
	 * @alias Titanium.Android.Calendar.Event.hasExtendedProperties
	 * @property {Boolean}
	 */
	hasExtendedProperties: false,
	/**
	 * Get the
	 * @alias Titanium.Android.Calendar.Event.getHasExtendedProperties
	 * @return {Boolean}
	 */
	getHasExtendedProperties: function () { return hasExtendedProperties; },
	/**
	 * Set the
	 * @param {Boolean} value New value to set.
	 * @alias Titanium.Android.Calendar.Event.setHasExtendedProperties
	 */
	setHasExtendedProperties: function () { },
	/**
	 * The id of the event.
	 * @alias Titanium.Android.Calendar.Event.id
	 * @property {String}
	 */
	id: '',
	/**
	 * Get the The id of the event.
	 * @alias Titanium.Android.Calendar.Event.getId
	 * @return {String}
	 */
	getId: function () { return id; },
	/**
	 * Set the The id of the event.
	 * @param {String} value New value to set.
	 * @alias Titanium.Android.Calendar.Event.setId
	 */
	setId: function () { },
	/**
	 * The event location.
	 * @alias Titanium.Android.Calendar.Event.location
	 * @property {String}
	 */
	location: '',
	/**
	 * Get the The event location.
	 * @alias Titanium.Android.Calendar.Event.getLocation
	 * @return {String}
	 */
	getLocation: function () { return location; },
	/**
	 * Set the The event location.
	 * @param {String} value New value to set.
	 * @alias Titanium.Android.Calendar.Event.setLocation
	 */
	setLocation: function () { },
	/**
	 * An array of Titanium.Android.Calendar.Reminder objects which are the reminders - if any - for this event.
	 * @alias Titanium.Android.Calendar.Event.reminders
	 * @property {Array}
	 */
	reminders: [],
	/**
	 * Get the An array of Titanium.Android.Calendar.Reminder objects which are the reminders - if any - for this event.
	 * @alias Titanium.Android.Calendar.Event.getReminders
	 * @return {Array}
	 */
	getReminders: function () { return reminders; },
	/**
	 * Set the An array of Titanium.Android.Calendar.Reminder objects which are the reminders - if any - for this event.
	 * @param {Array} value New value to set.
	 * @alias Titanium.Android.Calendar.Event.setReminders
	 */
	setReminders: function () { },
	/**
	 * The status of the event.  Possible values are the STATUS constants in Titanium.Android.Calendar.
	 * @alias Titanium.Android.Calendar.Event.status
	 * @property {Integer}
	 */
	status: 0,
	/**
	 * Get the The status of the event.  Possible values are the STATUS constants in Titanium.Android.Calendar.
	 * @alias Titanium.Android.Calendar.Event.getStatus
	 * @return {Integer}
	 */
	getStatus: function () { return status; },
	/**
	 * Set the The status of the event.  Possible values are the STATUS constants in Titanium.Android.Calendar.
	 * @param {Integer} value New value to set.
	 * @alias Titanium.Android.Calendar.Event.setStatus
	 */
	setStatus: function () { },
	/**
	 * The title string for the event.
	 * @alias Titanium.Android.Calendar.Event.title
	 * @property {String}
	 */
	title: '',
	/**
	 * Get the The title string for the event.
	 * @alias Titanium.Android.Calendar.Event.getTitle
	 * @return {String}
	 */
	getTitle: function () { return title; },
	/**
	 * Set the The title string for the event.
	 * @param {String} value New value to set.
	 * @alias Titanium.Android.Calendar.Event.setTitle
	 */
	setTitle: function () { },
	/**
	 * The event's visibility.  Possible values are the VISIBILITY constants in Titanium.Android.Calendar.
	 * @alias Titanium.Android.Calendar.Event.visibility
	 * @property {Integer}
	 */
	visibility: 0,
	/**
	 * Get the The event's visibility.  Possible values are the VISIBILITY constants in Titanium.Android.Calendar.
	 * @alias Titanium.Android.Calendar.Event.getVisibility
	 * @return {Integer}
	 */
	getVisibility: function () { return visibility; },
	/**
	 * Set the The event's visibility.  Possible values are the VISIBILITY constants in Titanium.Android.Calendar.
	 * @param {Integer} value New value to set.
	 * @alias Titanium.Android.Calendar.Event.setVisibility
	 */
	setVisibility: function () { },
	/**
	 * create an alert for this event.  Pass a dictionary object containing attributes corresponding to properties of Titanium.Android.Calendar.Alert.  Returns the created alert.
	 * @param {Object} data Properties for the new alert, corresponding to properties of <a href="Titanium.Android.Calendar.Alert-object.html">Titanium.Android.Calendar.Alert</a>.
	 * @alias Titanium.Android.Calendar.Event.createAlert
	 * @return {Titanium_Android_Calendar_Alert}
	 */
	createAlert: function (data) { return new Titanium_Android_Calendar_Alert(); },
	/**
	 * create a reminder for this event.  Pass a dictionary object containing attributes corresponding to properties of Titanium.Android.Calendar.Reminder.  Returns the created Reminder.
	 * @param {Object} data Properties for the new reminder, corresponding to properties of <a href="Titanium.Android.Calendar.Reminder.html">Titanium.Android.Calendar.Reminder</a>.
	 * @alias Titanium.Android.Calendar.Event.createReminder
	 * @return {Titanium_Android_Calendar_Reminder}
	 */
	createReminder: function (data) { return new Titanium_Android_Calendar_Reminder(); },
	/**
	 * Returns the value of the given extended property key string.
	 * @param {String} name The name of the extended property whose value should be returned.
	 * @alias Titanium.Android.Calendar.Event.getExtendedProperty
	 * @return {String}
	 */
	getExtendedProperty: function (name) { return ''; },
	/**
	 * Set the value of the named extended property.
	 * @param {String} name The name of the extended property whose value should be set.
	 * @param {String} value The value to which to set the named extended property.
	 * @alias Titanium.Android.Calendar.Event.setExtendedProperty
	 */
	setExtendedProperty: function (name,value) { },
};

/**
 * An object which represents a single reminder for an event in an Android calendar.  Reminders should not be created directly, but rather by using the createReminder method of Titanium.Android.Calendar.Event.
 * @since 1.5
 */
Titanium.Android.Calendar.Reminder = {
	/**
	 * The id of the reminder.
	 * @alias Titanium.Android.Calendar.Reminder.id
	 * @property {String}
	 */
	id: '',
	/**
	 * Get the The id of the reminder.
	 * @alias Titanium.Android.Calendar.Reminder.getId
	 * @return {String}
	 */
	getId: function () { return id; },
	/**
	 * Set the The id of the reminder.
	 * @param {String} value New value to set.
	 * @alias Titanium.Android.Calendar.Reminder.setId
	 */
	setId: function () { },
	/**
	 * The reminder method.  Possible values are the METHOD constants in Titanium.Android.Calendar.
	 * @alias Titanium.Android.Calendar.Reminder.method
	 * @property {Integer}
	 */
	method: 0,
	/**
	 * Get the The reminder method.  Possible values are the METHOD constants in Titanium.Android.Calendar.
	 * @alias Titanium.Android.Calendar.Reminder.getMethod
	 * @return {Integer}
	 */
	getMethod: function () { return method; },
	/**
	 * Set the The reminder method.  Possible values are the METHOD constants in Titanium.Android.Calendar.
	 * @param {Integer} value New value to set.
	 * @alias Titanium.Android.Calendar.Reminder.setMethod
	 */
	setMethod: function () { },
	/**
	 * The minutes before the event when the reminder should occur.
	 * @alias Titanium.Android.Calendar.Reminder.minutes
	 * @property {Integer}
	 */
	minutes: 0,
	/**
	 * Get the The minutes before the event when the reminder should occur.
	 * @alias Titanium.Android.Calendar.Reminder.getMinutes
	 * @return {Integer}
	 */
	getMinutes: function () { return minutes; },
	/**
	 * Set the The minutes before the event when the reminder should occur.
	 * @param {Integer} value New value to set.
	 * @alias Titanium.Android.Calendar.Reminder.setMinutes
	 */
	setMinutes: function () { },
};

/**
 * The Titanium binding of an Android Intent
 * @since 1.5
 */
Titanium.Android.Intent = {
	/**
	 * An action constant from Titanium.Android
	 * @alias Titanium.Android.Intent.action
	 * @property {String}
	 */
	action: '',
	/**
	 * Get the An action constant from Titanium.Android
	 * @alias Titanium.Android.Intent.getAction
	 * @return {String}
	 */
	getAction: function () { return action; },
	/**
	 * Set the An action constant from Titanium.Android
	 * @param {String} value New value to set.
	 * @alias Titanium.Android.Intent.setAction
	 */
	setAction: function () { },
	/**
	 * The Java class name of the activity (packageName must also be set)
	 * @alias Titanium.Android.Intent.className
	 * @property {String}
	 */
	className: '',
	/**
	 * Get the The Java class name of the activity (packageName must also be set)
	 * @alias Titanium.Android.Intent.getClassName
	 * @return {String}
	 */
	getClassName: function () { return className; },
	/**
	 * Set the The Java class name of the activity (packageName must also be set)
	 * @param {String} value New value to set.
	 * @alias Titanium.Android.Intent.setClassName
	 */
	setClassName: function () { },
	/**
	 * The Intent's Data URI. See also Android's Intent.setData
	 * @alias Titanium.Android.Intent.data
	 * @property {String}
	 */
	data: '',
	/**
	 * Get the The Intent's Data URI. See also Android's Intent.setData
	 * @alias Titanium.Android.Intent.getData
	 * @return {String}
	 */
	getData: function () { return data; },
	/**
	 * Set the The Intent's Data URI. See also Android's Intent.setData
	 * @param {String} value New value to set.
	 * @alias Titanium.Android.Intent.setData
	 */
	setData: function () { },
	/**
	 * The fully-qualified Java package name of the activity
	 * @alias Titanium.Android.Intent.packageName
	 * @property {String}
	 */
	packageName: '',
	/**
	 * Get the The fully-qualified Java package name of the activity
	 * @alias Titanium.Android.Intent.getPackageName
	 * @return {String}
	 */
	getPackageName: function () { return packageName; },
	/**
	 * Set the The fully-qualified Java package name of the activity
	 * @param {String} value New value to set.
	 * @alias Titanium.Android.Intent.setPackageName
	 */
	setPackageName: function () { },
	/**
	 * The mime type for this Intent. See also Android's Intent.setType
	 * @alias Titanium.Android.Intent.type
	 * @property {String}
	 */
	type: '',
	/**
	 * Get the The mime type for this Intent. See also Android's Intent.setType
	 * @alias Titanium.Android.Intent.getType
	 * @return {String}
	 */
	getType: function () { return type; },
	/**
	 * Set the The mime type for this Intent. See also Android's Intent.setType
	 * @param {String} value New value to set.
	 * @alias Titanium.Android.Intent.setType
	 */
	setType: function () { },
	/**
	 * The URL to a Titanium Javascript Activity
	 * @alias Titanium.Android.Intent.url
	 * @property {String}
	 */
	url: '',
	/**
	 * Get the The URL to a Titanium Javascript Activity
	 * @alias Titanium.Android.Intent.getUrl
	 * @return {String}
	 */
	getUrl: function () { return url; },
	/**
	 * Set the The URL to a Titanium Javascript Activity
	 * @param {String} value New value to set.
	 * @alias Titanium.Android.Intent.setUrl
	 */
	setUrl: function () { },
	/**
	 * Add a category to this Intent. See the category constants in Titanium.Android.
	 * @param {String} name The category name. See the category constants in <a href="Titanium.Android-module.html">Titanium.Android</a>
	 * @alias Titanium.Android.Intent.addCategory
	 */
	addCategory: function (name) { },
	/**
	 * Get a boolean property from this Intent
	 * @param {String} name The boolean property to get
	 * @alias Titanium.Android.Intent.getBooleanExtra
	 * @return {Boolean}
	 */
	getBooleanExtra: function (name) { return false; },
	/**
	 * Get the Data URI from this Intent
	 * @alias Titanium.Android.Intent.getData
	 */
	getData: function () { },
	/**
	 * Get a double property from this Intent
	 * @param {String} name The double property to get
	 * @alias Titanium.Android.Intent.getDoubleExtra
	 * @return {Double}
	 */
	getDoubleExtra: function (name) { return 0.0; },
	/**
	 * Get a int property from this Intent
	 * @param {String} name The int property to get
	 * @alias Titanium.Android.Intent.getIntExtra
	 * @return {Integer}
	 */
	getIntExtra: function (name) { return 0; },
	/**
	 * Get a long property from this Intent
	 * @param {String} name The long property to get
	 * @alias Titanium.Android.Intent.getLongExtra
	 * @return {Integer}
	 */
	getLongExtra: function (name) { return 0; },
	/**
	 * Get a string property from this Intent
	 * @param {String} name The string property to get
	 * @alias Titanium.Android.Intent.getStringExtra
	 * @return {String}
	 */
	getStringExtra: function (name) { return ''; },
	/**
	 * Returns whether or not this Intent has a property
	 * @param {String} name The property name to check for
	 * @alias Titanium.Android.Intent.hasExtra
	 * @return {Boolean}
	 */
	hasExtra: function (name) { return false; },
	/**
	 * Put an extra property on this Intent
	 * @param {String} name The property name
	 * @param {Object} value The property value
	 * @alias Titanium.Android.Intent.putExtra
	 */
	putExtra: function (name,value) { },
};

/**
 * The Titanium binding of an Android Menu
 * @since 1.5
 */
Titanium.Android.Menu = {
	/**
	 * array of Titanium.Android.MenuItem
	 * @alias Titanium.Android.Menu.items
	 * @property {Array}
	 */
	items: [],
	/**
	 * Get the array of Titanium.Android.MenuItem
	 * @alias Titanium.Android.Menu.getItems
	 * @return {Array}
	 */
	getItems: function () { return items; },
	/**
	 * Set the array of Titanium.Android.MenuItem
	 * @param {Array} value New value to set.
	 * @alias Titanium.Android.Menu.setItems
	 */
	setItems: function () { },
	/**
	 * creates a Titanium.Android.MenuItem from the passed creation options.
	 * @param {Object} options creation options. Supported options are itemId, groupId, title, and order.
	 * @alias Titanium.Android.Menu.add
	 * @return {<a href="Titanium.Android.MenuItem.html">Titanium.Android.MenuItem</a>}
	 */
	add: function (options) { return {}; },
	/**
	 * clear all items from the menu. You should release all references you have retained to Titanium.Android.MenuItem previously created.
	 * @alias Titanium.Android.Menu.clear
	 */
	clear: function () { },
	/**
	 * close the menu if visible
	 * @alias Titanium.Android.Menu.close
	 */
	close: function () { },
	/**
	 * locate a Titanium.Android.MenuItem
	 * @param {Object} item integer itemId or <a href="Titanium.Android.MenuItem.html">Titanium.Android.MenuItem</a>
	 * @alias Titanium.Android.Menu.findItem
	 * @return {<a href="Titanium.Android.MenuItem.html">Titanium.Android.MenuItem</a>}
	 */
	findItem: function (item) { return {}; },
	/**
	 * return the Titanium.Android.MenuItem at a specific index
	 * @param {Integer} index item at index where index < size()
	 * @alias Titanium.Android.Menu.getItem
	 * @return {<a href="Titanium.Android.MenuItem.html">Titanium.Android.MenuItem</a>}
	 */
	getItem: function (index) { return {}; },
	/**
	 * query for any visible menu items
	 * @alias Titanium.Android.Menu.hasVisibleItems
	 * @return {Boolean}
	 */
	hasVisibleItems: function () { return false; },
	/**
	 * remove all Titanium.Android.MenuItem with the specified groupId
	 * @param {Integer} groupId groupId of items to remove.
	 * @alias Titanium.Android.Menu.removeGroup
	 */
	removeGroup: function (groupId) { },
	/**
	 * remove a specific Titanium.Android.MenuItem by the specified itemId
	 * @param {Integer} itemId itemId of item to remove.
	 * @alias Titanium.Android.Menu.removeItem
	 */
	removeItem: function (itemId) { },
	/**
	 * enable or disable a group of Titanium.Android.MenuItem by groupId
	 * @param {Integer} groupId groupId to enable or disable
	 * @param {Boolean} enabled true to enable, false to disable.
	 * @alias Titanium.Android.Menu.setGroupEnabled
	 */
	setGroupEnabled: function (groupId,enabled) { },
	/**
	 * show or hide a group of Titanium.Android.MenuItem by groupId
	 * @param {Integer} groupId groupId to enable or disable
	 * @param {Boolean} visible true to show, false to hide
	 * @alias Titanium.Android.Menu.setGroupVisible
	 */
	setGroupVisible: function (groupId,visible) { },
	/**
	 * number of Titanium.Android.MenuItem in this menu
	 * @alias Titanium.Android.Menu.size
	 * @return {Integer}
	 */
	size: function () { return 0; },
};

/**
 * The Titanium binding of an Android MenuItem
 * @since 1.5
 */
Titanium.Android.MenuItem = {
	/**
	 * set the enabled state of the item
	 * @alias Titanium.Android.MenuItem.enabled
	 * @property {Boolean}
	 */
	enabled: false,
	/**
	 * Get the set the enabled state of the item
	 * @alias Titanium.Android.MenuItem.getEnabled
	 * @return {Boolean}
	 */
	getEnabled: function () { return enabled; },
	/**
	 * Set the set the enabled state of the item
	 * @param {Boolean} value New value to set.
	 * @alias Titanium.Android.MenuItem.setEnabled
	 */
	setEnabled: function () { },
	/**
	 * groupId for this item (Read-only)
	 * @alias Titanium.Android.MenuItem.groupId
	 * @property {Integer}
	 */
	groupId: 0,
	/**
	 * Get the groupId for this item (Read-only)
	 * @alias Titanium.Android.MenuItem.getGroupId
	 * @return {Integer}
	 */
	getGroupId: function () { return groupId; },
	/**
	 * Set the groupId for this item (Read-only)
	 * @param {Integer} value New value to set.
	 * @alias Titanium.Android.MenuItem.setGroupId
	 */
	setGroupId: function () { },
	/**
	 * itemId for this item (Read-only)
	 * @alias Titanium.Android.MenuItem.itemId
	 * @property {Integer}
	 */
	itemId: 0,
	/**
	 * Get the itemId for this item (Read-only)
	 * @alias Titanium.Android.MenuItem.getItemId
	 * @return {Integer}
	 */
	getItemId: function () { return itemId; },
	/**
	 * Set the itemId for this item (Read-only)
	 * @param {Integer} value New value to set.
	 * @alias Titanium.Android.MenuItem.setItemId
	 */
	setItemId: function () { },
	/**
	 * integer used for controlling sort order (Read-only)
	 * @alias Titanium.Android.MenuItem.order
	 * @property {Integer}
	 */
	order: 0,
	/**
	 * Get the integer used for controlling sort order (Read-only)
	 * @alias Titanium.Android.MenuItem.getOrder
	 * @return {Integer}
	 */
	getOrder: function () { return order; },
	/**
	 * Set the integer used for controlling sort order (Read-only)
	 * @param {Integer} value New value to set.
	 * @alias Titanium.Android.MenuItem.setOrder
	 */
	setOrder: function () { },
	/**
	 * item title
	 * @alias Titanium.Android.MenuItem.title
	 * @property {String}
	 */
	title: '',
	/**
	 * Get the item title
	 * @alias Titanium.Android.MenuItem.getTitle
	 * @return {String}
	 */
	getTitle: function () { return title; },
	/**
	 * Set the item title
	 * @param {String} value New value to set.
	 * @alias Titanium.Android.MenuItem.setTitle
	 */
	setTitle: function () { },
	/**
	 * condensed item title
	 * @alias Titanium.Android.MenuItem.titleCondensed
	 * @property {String}
	 */
	titleCondensed: '',
	/**
	 * Get the condensed item title
	 * @alias Titanium.Android.MenuItem.getTitleCondensed
	 * @return {String}
	 */
	getTitleCondensed: function () { return titleCondensed; },
	/**
	 * Set the condensed item title
	 * @param {String} value New value to set.
	 * @alias Titanium.Android.MenuItem.setTitleCondensed
	 */
	setTitleCondensed: function () { },
	/**
	 * set the visible state of the item
	 * @alias Titanium.Android.MenuItem.visible
	 * @property {Boolean}
	 */
	visible: false,
	/**
	 * Get the set the visible state of the item
	 * @alias Titanium.Android.MenuItem.getVisible
	 * @return {Boolean}
	 */
	getVisible: function () { return visible; },
	/**
	 * Set the set the visible state of the item
	 * @param {Boolean} value New value to set.
	 * @alias Titanium.Android.MenuItem.setVisible
	 */
	setVisible: function () { },
	/**
	 * retrieve the condensed title of the item
	 * @alias Titanium.Android.MenuItem.getCondensedTitle
	 * @return {String}
	 */
	getCondensedTitle: function () { return ''; },
	/**
	 * retrieve the groupId for this item
	 * @alias Titanium.Android.MenuItem.getGroupId
	 * @return {Integer}
	 */
	getGroupId: function () { return 0; },
	/**
	 * retrieve the itemId for this item
	 * @alias Titanium.Android.MenuItem.getItemId
	 * @return {Integer}
	 */
	getItemId: function () { return 0; },
	/**
	 * retrieve the sort order
	 * @alias Titanium.Android.MenuItem.getOrder
	 * @return {Integer}
	 */
	getOrder: function () { return 0; },
	/**
	 * retrieve the title of the item
	 * @alias Titanium.Android.MenuItem.getTitle
	 * @return {String}
	 */
	getTitle: function () { return ''; },
	/**
	 * retrieve the enabled state of the menu
	 * @alias Titanium.Android.MenuItem.isEnabled
	 * @return {Boolean}
	 */
	isEnabled: function () { return false; },
	/**
	 * retrieve the visible state of the menu
	 * @alias Titanium.Android.MenuItem.isVisible
	 * @return {Boolean}
	 */
	isVisible: function () { return false; },
	/**
	 * set the condensed title for the item
	 * @param {String} condensedTitle new condensed title
	 * @alias Titanium.Android.MenuItem.setCondensedTitle
	 */
	setCondensedTitle: function (condensedTitle) { },
	/**
	 * set the enabled state of the item
	 * @param {Boolean} enabled true to enable item, false to disable
	 * @alias Titanium.Android.MenuItem.setEnabled
	 */
	setEnabled: function (enabled) { },
	/**
	 * set the icon for the item
	 * @param {Object} icon icon to use with the item
	 * @alias Titanium.Android.MenuItem.setIcon
	 */
	setIcon: function (icon) { },
	/**
	 * set the title for the item
	 * @param {String} title new title
	 * @alias Titanium.Android.MenuItem.setTitle
	 */
	setTitle: function (title) { },
	/**
	 * set the visible state of the item
	 * @param {Boolean} visible true to show the item, false to hide
	 * @alias Titanium.Android.MenuItem.setVisible
	 */
	setVisible: function (visible) { },
};

/**
 * The Titanium binding of an Android Pending Intent
 * @since 1.5
 */
Titanium.Android.PendingIntent = {
	/**
	 * The Activity that the PendingIntent should be launched from
	 * @alias Titanium.Android.PendingIntent.activity
	 * @property {<a href="Titanium.Android.Activity-proxy.html">Titanium.Android.Activity</a>}
	 */
	activity: {},
	/**
	 * Get the The Activity that the PendingIntent should be launched from
	 * @alias Titanium.Android.PendingIntent.getActivity
	 * @return {<a href="Titanium.Android.Activity-proxy.html">Titanium.Android.Activity</a>}
	 */
	getActivity: function () { return activity; },
	/**
	 * Set the The Activity that the PendingIntent should be launched from
	 * @param {<a href="Titanium.Android.Activity-proxy.html">Titanium.Android.Activity</a>} value New value to set.
	 * @alias Titanium.Android.PendingIntent.setActivity
	 */
	setActivity: function () { },
	/**
	 * Flags used for creating the Pending Intent. See Pending Intent Flags
	 * @alias Titanium.Android.PendingIntent.flags
	 * @property {Integer}
	 */
	flags: 0,
	/**
	 * Get the Flags used for creating the Pending Intent. See Pending Intent Flags
	 * @alias Titanium.Android.PendingIntent.getFlags
	 * @return {Integer}
	 */
	getFlags: function () { return flags; },
	/**
	 * Set the Flags used for creating the Pending Intent. See Pending Intent Flags
	 * @param {Integer} value New value to set.
	 * @alias Titanium.Android.PendingIntent.setFlags
	 */
	setFlags: function () { },
	/**
	 * The intent data to pass to the Activity launched by this PendingIntent
	 * @alias Titanium.Android.PendingIntent.intent
	 * @property {<a href="Titanium.Android.Intent-proxy.html">Titanium.Android.Intent</a>}
	 */
	intent: {},
	/**
	 * Get the The intent data to pass to the Activity launched by this PendingIntent
	 * @alias Titanium.Android.PendingIntent.getIntent
	 * @return {<a href="Titanium.Android.Intent-proxy.html">Titanium.Android.Intent</a>}
	 */
	getIntent: function () { return intent; },
	/**
	 * Set the The intent data to pass to the Activity launched by this PendingIntent
	 * @param {<a href="Titanium.Android.Intent-proxy.html">Titanium.Android.Intent</a>} value New value to set.
	 * @alias Titanium.Android.PendingIntent.setIntent
	 */
	setIntent: function () { },
	/**
	 * The type of Pending Intent. Possible values: Titanium.Android.PENDING_INTENT_FOR_ACTIVITY, Titanium.Android.PENDING_INTENT_FOR_BROADCAST, Titanium.Android.PENDING_INTENT_FOR_SERVICE
	 * @alias Titanium.Android.PendingIntent.type
	 * @property {Integer}
	 */
	type: 0,
	/**
	 * Get the The type of Pending Intent. Possible values: Titanium.Android.PENDING_INTENT_FOR_ACTIVITY, Titanium.Android.PENDING_INTENT_FOR_BROADCAST, Titanium.Android.PENDING_INTENT_FOR_SERVICE
	 * @alias Titanium.Android.PendingIntent.getType
	 * @return {Integer}
	 */
	getType: function () { return type; },
	/**
	 * Set the The type of Pending Intent. Possible values: Titanium.Android.PENDING_INTENT_FOR_ACTIVITY, Titanium.Android.PENDING_INTENT_FOR_BROADCAST, Titanium.Android.PENDING_INTENT_FOR_SERVICE
	 * @param {Integer} value New value to set.
	 * @alias Titanium.Android.PendingIntent.setType
	 */
	setType: function () { },
};

/**
 * The Titanium binding of android.R
 * @since 1.5
 */
Titanium.Android.R = {
	/**
	 * Animation resources, see http://developer.android.com/reference/android/R.anim.html
	 * @alias Titanium.Android.R.anim
	 * @property {Object}
	 */
	anim: {},
	/**
	 * Get the Animation resources, see http://developer.android.com/reference/android/R.anim.html
	 * @alias Titanium.Android.R.getAnim
	 * @return {Object}
	 */
	getAnim: function () { return anim; },
	/**
	 * Set the Animation resources, see http://developer.android.com/reference/android/R.anim.html
	 * @param {Object} value New value to set.
	 * @alias Titanium.Android.R.setAnim
	 */
	setAnim: function () { },
	/**
	 * Array resources, see http://developer.android.com/reference/android/R.array.html
	 * @alias Titanium.Android.R.array
	 * @property {Object}
	 */
	array: {},
	/**
	 * Get the Array resources, see http://developer.android.com/reference/android/R.array.html
	 * @alias Titanium.Android.R.getArray
	 * @return {Object}
	 */
	getArray: function () { return array; },
	/**
	 * Set the Array resources, see http://developer.android.com/reference/android/R.array.html
	 * @param {Object} value New value to set.
	 * @alias Titanium.Android.R.setArray
	 */
	setArray: function () { },
	/**
	 * Attribute resources, see http://developer.android.com/reference/android/R.attr.html
	 * @alias Titanium.Android.R.attr
	 * @property {Object}
	 */
	attr: {},
	/**
	 * Get the Attribute resources, see http://developer.android.com/reference/android/R.attr.html
	 * @alias Titanium.Android.R.getAttr
	 * @return {Object}
	 */
	getAttr: function () { return attr; },
	/**
	 * Set the Attribute resources, see http://developer.android.com/reference/android/R.attr.html
	 * @param {Object} value New value to set.
	 * @alias Titanium.Android.R.setAttr
	 */
	setAttr: function () { },
	/**
	 * Color resources, see http://developer.android.com/reference/android/R.color.html
	 * @alias Titanium.Android.R.color
	 * @property {Object}
	 */
	color: {},
	/**
	 * Get the Color resources, see http://developer.android.com/reference/android/R.color.html
	 * @alias Titanium.Android.R.getColor
	 * @return {Object}
	 */
	getColor: function () { return color; },
	/**
	 * Set the Color resources, see http://developer.android.com/reference/android/R.color.html
	 * @param {Object} value New value to set.
	 * @alias Titanium.Android.R.setColor
	 */
	setColor: function () { },
	/**
	 * Dimension resources, see http://developer.android.com/reference/android/R.dimen.html
	 * @alias Titanium.Android.R.dimen
	 * @property {Object}
	 */
	dimen: {},
	/**
	 * Get the Dimension resources, see http://developer.android.com/reference/android/R.dimen.html
	 * @alias Titanium.Android.R.getDimen
	 * @return {Object}
	 */
	getDimen: function () { return dimen; },
	/**
	 * Set the Dimension resources, see http://developer.android.com/reference/android/R.dimen.html
	 * @param {Object} value New value to set.
	 * @alias Titanium.Android.R.setDimen
	 */
	setDimen: function () { },
	/**
	 * Drawable resources, see http://developer.android.com/reference/android/R.drawable.html
	 * @alias Titanium.Android.R.drawable
	 * @property {Object}
	 */
	drawable: {},
	/**
	 * Get the Drawable resources, see http://developer.android.com/reference/android/R.drawable.html
	 * @alias Titanium.Android.R.getDrawable
	 * @return {Object}
	 */
	getDrawable: function () { return drawable; },
	/**
	 * Set the Drawable resources, see http://developer.android.com/reference/android/R.drawable.html
	 * @param {Object} value New value to set.
	 * @alias Titanium.Android.R.setDrawable
	 */
	setDrawable: function () { },
	/**
	 * ID resources, see http://developer.android.com/reference/android/R.id.html
	 * @alias Titanium.Android.R.id
	 * @property {Object}
	 */
	id: {},
	/**
	 * Get the ID resources, see http://developer.android.com/reference/android/R.id.html
	 * @alias Titanium.Android.R.getId
	 * @return {Object}
	 */
	getId: function () { return id; },
	/**
	 * Set the ID resources, see http://developer.android.com/reference/android/R.id.html
	 * @param {Object} value New value to set.
	 * @alias Titanium.Android.R.setId
	 */
	setId: function () { },
	/**
	 * Integer resources, see http://developer.android.com/reference/android/R.integer.html
	 * @alias Titanium.Android.R.integer
	 * @property {Object}
	 */
	integer: {},
	/**
	 * Get the Integer resources, see http://developer.android.com/reference/android/R.integer.html
	 * @alias Titanium.Android.R.getInteger
	 * @return {Object}
	 */
	getInteger: function () { return integer; },
	/**
	 * Set the Integer resources, see http://developer.android.com/reference/android/R.integer.html
	 * @param {Object} value New value to set.
	 * @alias Titanium.Android.R.setInteger
	 */
	setInteger: function () { },
	/**
	 * Layout resources, see http://developer.android.com/reference/android/R.layout.html
	 * @alias Titanium.Android.R.layout
	 * @property {Object}
	 */
	layout: {},
	/**
	 * Get the Layout resources, see http://developer.android.com/reference/android/R.layout.html
	 * @alias Titanium.Android.R.getLayout
	 * @return {Object}
	 */
	getLayout: function () { return layout; },
	/**
	 * Set the Layout resources, see http://developer.android.com/reference/android/R.layout.html
	 * @param {Object} value New value to set.
	 * @alias Titanium.Android.R.setLayout
	 */
	setLayout: function () { },
	/**
	 * String resources, see http://developer.android.com/reference/android/R.string.html
	 * @alias Titanium.Android.R.string
	 * @property {Object}
	 */
	string: {},
	/**
	 * Get the String resources, see http://developer.android.com/reference/android/R.string.html
	 * @alias Titanium.Android.R.getString
	 * @return {Object}
	 */
	getString: function () { return string; },
	/**
	 * Set the String resources, see http://developer.android.com/reference/android/R.string.html
	 * @param {Object} value New value to set.
	 * @alias Titanium.Android.R.setString
	 */
	setString: function () { },
	/**
	 * Style resources, see http://developer.android.com/reference/android/R.style.html
	 * @alias Titanium.Android.R.style
	 * @property {Object}
	 */
	style: {},
	/**
	 * Get the Style resources, see http://developer.android.com/reference/android/R.style.html
	 * @alias Titanium.Android.R.getStyle
	 * @return {Object}
	 */
	getStyle: function () { return style; },
	/**
	 * Set the Style resources, see http://developer.android.com/reference/android/R.style.html
	 * @param {Object} value New value to set.
	 * @alias Titanium.Android.R.setStyle
	 */
	setStyle: function () { },
	/**
	 * Styleable reosurces, see http://developer.android.com/reference/android/R.styleable.html
	 * @alias Titanium.Android.R.styleable
	 * @property {Object}
	 */
	styleable: {},
	/**
	 * Get the Styleable reosurces, see http://developer.android.com/reference/android/R.styleable.html
	 * @alias Titanium.Android.R.getStyleable
	 * @return {Object}
	 */
	getStyleable: function () { return styleable; },
	/**
	 * Set the Styleable reosurces, see http://developer.android.com/reference/android/R.styleable.html
	 * @param {Object} value New value to set.
	 * @alias Titanium.Android.R.setStyleable
	 */
	setStyleable: function () { },
};

/**
 * The Titanium binding of an Android Service.  Can be used to start/stop the service directly and listen for service-specific events.  In the Javascript-based services you write, this can be referenced with Titanium.Android.currentService.  You can create an instance of the service with Titanium.Android.createService.
 * @since 1.5
 */
Titanium.Android.Service = {
	/**
	 * (read-only) The Titanium.Android.Intent used to start or bind to the Service.
	 * @alias Titanium.Android.Service.intent
	 * @property {Intent}
	 */
	intent: {},
	/**
	 * Get the (read-only) The Titanium.Android.Intent used to start or bind to the Service.
	 * @alias Titanium.Android.Service.getIntent
	 * @return {Intent}
	 */
	getIntent: function () { return intent; },
	/**
	 * Set the (read-only) The Titanium.Android.Intent used to start or bind to the Service.
	 * @param {Intent} value New value to set.
	 * @alias Titanium.Android.Service.setIntent
	 */
	setIntent: function () { },
	/**
	 * (read-only) A service can be started more than once -- this number (based on an incrementing integer) indicates which "start number" in the sequence the current service instance is.
	 * @alias Titanium.Android.Service.serviceInstanceId
	 * @property {Integer}
	 */
	serviceInstanceId: 0,
	/**
	 * Get the (read-only) A service can be started more than once -- this number (based on an incrementing integer) indicates which "start number" in the sequence the current service instance is.
	 * @alias Titanium.Android.Service.getServiceInstanceId
	 * @return {Integer}
	 */
	getServiceInstanceId: function () { return serviceInstanceId; },
	/**
	 * Set the (read-only) A service can be started more than once -- this number (based on an incrementing integer) indicates which "start number" in the sequence the current service instance is.
	 * @param {Integer} value New value to set.
	 * @alias Titanium.Android.Service.setServiceInstanceId
	 */
	setServiceInstanceId: function () { },
	/**
	 * Start the Service.  Effective only if this instance of Titanium.Android.Service was created with Titanium.Android.createService.
	 * @alias Titanium.Android.Service.start
	 */
	start: function () { },
	/**
	 * Stop this running instance of the Service.
	 * @alias Titanium.Android.Service.stop
	 */
	stop: function () { },
};

/**
 * The top level App module.  The App module is mainly used for accessing information about the application at runtime.
 * @since 0.1
 */
Titanium.App = {
	/**
	 * the application's copyright
	 * @alias Titanium.App.copyright
	 * @property {String}
	 */
	copyright: '',
	/**
	 * Get the the application's copyright
	 * @alias Titanium.App.getCopyright
	 * @return {String}
	 */
	getCopyright: function () { return copyright; },
	/**
	 * Set the the application's copyright
	 * @param {String} value New value to set.
	 * @alias Titanium.App.setCopyright
	 */
	setCopyright: function () { },
	/**
	 * the application's description
	 * @alias Titanium.App.description
	 * @property {String}
	 */
	description: '',
	/**
	 * Get the the application's description
	 * @alias Titanium.App.getDescription
	 * @return {String}
	 */
	getDescription: function () { return description; },
	/**
	 * Set the the application's description
	 * @param {String} value New value to set.
	 * @alias Titanium.App.setDescription
	 */
	setDescription: function () { },
	/**
	 * the application's globally unique id (this is system generated and consistent through all versions)
	 * @alias Titanium.App.guid
	 * @property {String}
	 */
	guid: '',
	/**
	 * Get the the application's globally unique id (this is system generated and consistent through all versions)
	 * @alias Titanium.App.getGuid
	 * @return {String}
	 */
	getGuid: function () { return guid; },
	/**
	 * Set the the application's globally unique id (this is system generated and consistent through all versions)
	 * @param {String} value New value to set.
	 * @alias Titanium.App.setGuid
	 */
	setGuid: function () { },
	/**
	 * the application's app id as specified in Titanium Developer
	 * @alias Titanium.App.id
	 * @property {String}
	 */
	id: '',
	/**
	 * Get the the application's app id as specified in Titanium Developer
	 * @alias Titanium.App.getId
	 * @return {String}
	 */
	getId: function () { return id; },
	/**
	 * Set the the application's app id as specified in Titanium Developer
	 * @param {String} value New value to set.
	 * @alias Titanium.App.setId
	 */
	setId: function () { },
	/**
	 * property for controlling whether the phone screen will be locked on idle time. Can be set to true to disable the timer
	 * @alias Titanium.App.idleTimerDisabled
	 * @property {Boolean}
	 */
	idleTimerDisabled: false,
	/**
	 * Get the property for controlling whether the phone screen will be locked on idle time. Can be set to true to disable the timer
	 * @alias Titanium.App.getIdleTimerDisabled
	 * @return {Boolean}
	 */
	getIdleTimerDisabled: function () { return idleTimerDisabled; },
	/**
	 * Set the property for controlling whether the phone screen will be locked on idle time. Can be set to true to disable the timer
	 * @param {Boolean} value New value to set.
	 * @alias Titanium.App.setIdleTimerDisabled
	 */
	setIdleTimerDisabled: function () { },
	/**
	 * the application's name
	 * @alias Titanium.App.name
	 * @property {String}
	 */
	name: '',
	/**
	 * Get the the application's name
	 * @alias Titanium.App.getName
	 * @return {String}
	 */
	getName: function () { return name; },
	/**
	 * Set the the application's name
	 * @param {String} value New value to set.
	 * @alias Titanium.App.setName
	 */
	setName: function () { },
	/**
	 * a boolean to indicate whether proximity detection is enabled
	 * @alias Titanium.App.proximityDetection
	 * @property {Boolean}
	 */
	proximityDetection: false,
	/**
	 * Get the a boolean to indicate whether proximity detection is enabled
	 * @alias Titanium.App.getProximityDetection
	 * @return {Boolean}
	 */
	getProximityDetection: function () { return proximityDetection; },
	/**
	 * Set the a boolean to indicate whether proximity detection is enabled
	 * @param {Boolean} value New value to set.
	 * @alias Titanium.App.setProximityDetection
	 */
	setProximityDetection: function () { },
	/**
	 * the state of the device's proximity detector
	 * @alias Titanium.App.proximityState
	 * @property {Integer}
	 */
	proximityState: 0,
	/**
	 * Get the the state of the device's proximity detector
	 * @alias Titanium.App.getProximityState
	 * @return {Integer}
	 */
	getProximityState: function () { return proximityState; },
	/**
	 * Set the the state of the device's proximity detector
	 * @param {Integer} value New value to set.
	 * @alias Titanium.App.setProximityState
	 */
	setProximityState: function () { },
	/**
	 * the application's publisher
	 * @alias Titanium.App.publisher
	 * @property {String}
	 */
	publisher: '',
	/**
	 * Get the the application's publisher
	 * @alias Titanium.App.getPublisher
	 * @return {String}
	 */
	getPublisher: function () { return publisher; },
	/**
	 * Set the the application's publisher
	 * @param {String} value New value to set.
	 * @alias Titanium.App.setPublisher
	 */
	setPublisher: function () { },
	/**
	 * the application url
	 * @alias Titanium.App.url
	 * @property {String}
	 */
	url: '',
	/**
	 * Get the the application url
	 * @alias Titanium.App.getUrl
	 * @return {String}
	 */
	getUrl: function () { return url; },
	/**
	 * Set the the application url
	 * @param {String} value New value to set.
	 * @alias Titanium.App.setUrl
	 */
	setUrl: function () { },
	/**
	 * the application's version
	 * @alias Titanium.App.version
	 * @property {String}
	 */
	version: '',
	/**
	 * Get the the application's version
	 * @alias Titanium.App.getVersion
	 * @return {String}
	 */
	getVersion: function () { return version; },
	/**
	 * Set the the application's version
	 * @param {String} value New value to set.
	 * @alias Titanium.App.setVersion
	 */
	setVersion: function () { },
	/**
	 * add an event listener for the instance to receive view triggered events
	 * @param {String} name name of the event
	 * @param {Function} callback callback function to invoke when the event is fired
	 * @alias Titanium.App.addEventListener
	 */
	addEventListener: function (name,callback) { },
	/**
	 * fire a cross-context application event.  listeners in any Javascript context can receive these events if they have added themselves as a listener with the event name.  NOTE: you can only pass JSON serializable data in the data payload of the event object since the data must be transportable between contexts.
	 * @param {String} name name of the event
	 * @param {Object} event event object
	 * @param {String} name the event name
	 * @param {Object} [data] optional data payload for the event. NOTE: you can only pass JSON serializable data since the data must be transportable between contexts.
	 * @alias Titanium.App.fireEvent
	 */
	fireEvent: function (name,event,name2,data) { },
	/**
	 * return the arguments passed to the application on startup as a dictionary
	 * @alias Titanium.App.getArguments
	 * @return {Object}
	 */
	getArguments: function () { return {}; },
	/**
	 * remove a previously added event listener
	 * @param {String} name name of the event
	 * @param {Function} callback callback function passed in addEventListener
	 * @alias Titanium.App.removeEventListener
	 */
	removeEventListener: function (name,callback) { },
};

/**
 * A module used to access the Android's Application Resources
 * @since 1.5
 */
Titanium.App.Android = {
	/**
	 * The R namespace for Application Resources
	 * @alias Titanium.App.Android.R
	 * @property {<a href="Titanium.App.Android.R.html">Titanium.App.Android.R</a>}
	 */
	R: {},
	/**
	 * add an event listener for the instance to receive view triggered events
	 * @param {String} name name of the event
	 * @param {Function} callback callback function to invoke when the event is fired
	 * @alias Titanium.App.Android.addEventListener
	 */
	addEventListener: function (name,callback) { },
	/**
	 * fire a synthesized event to the views listener
	 * @param {String} name name of the event
	 * @param {Object} event event object
	 * @alias Titanium.App.Android.fireEvent
	 */
	fireEvent: function (name,event) { },
	/**
	 * remove a previously added event listener
	 * @param {String} name name of the event
	 * @param {Function} callback callback function passed in addEventListener
	 * @alias Titanium.App.Android.removeEventListener
	 */
	removeEventListener: function (name,callback) { },
};

/**
 * The Titanium binding of Application Resources
 * @since 1.5
 */
Titanium.App.Android.R = {
};

/**
 * The App Properties module is used for storing application related property/value pairs which persist beyond application sessions.
 * @since 0.5
 */
Titanium.App.Properties = {
	/**
	 * add an event listener for the instance to receive view triggered events
	 * @param {String} name name of the event
	 * @param {Function} callback callback function to invoke when the event is fired
	 * @alias Titanium.App.Properties.addEventListener
	 */
	addEventListener: function (name,callback) { },
	/**
	 * fire a synthesized event to the views listener
	 * @param {String} name name of the event
	 * @param {Object} event event object
	 * @alias Titanium.App.Properties.fireEvent
	 */
	fireEvent: function (name,event) { },
	/**
	 * return a boolean value
	 * @param {String} property return a boolean value for property
	 * @param {Boolean} [def] optional default value if property is not found
	 * @alias Titanium.App.Properties.getBool
	 * @return {Boolean}
	 */
	getBool: function (property,def) { return false; },
	/**
	 * return a double value
	 * @param {String} property return a double value for property
	 * @param {Double} [def] optional default value if property is not found
	 * @alias Titanium.App.Properties.getDouble
	 * @return {Double}
	 */
	getDouble: function (property,def) { return 0.0; },
	/**
	 * return an integer value
	 * @param {String} property return a integer value for property
	 * @param {Integer} [def] optional default value if property is not found
	 * @alias Titanium.App.Properties.getInt
	 * @return {Integer}
	 */
	getInt: function (property,def) { return 0; },
	/**
	 * return a value as an array
	 * @param {String} property return an array value for property
	 * @param {Array} [def] optional default value if property is not found
	 * @alias Titanium.App.Properties.getList
	 * @return {Array}
	 */
	getList: function (property,def) { return []; },
	/**
	 * return a string value
	 * @param {String} property return a string value for property
	 * @param {String} [def] optional default value if property is not found
	 * @alias Titanium.App.Properties.getString
	 * @return {String}
	 */
	getString: function (property,def) { return ''; },
	/**
	 * returns true if the property exists
	 * @param {String} property property name to check
	 * @alias Titanium.App.Properties.hasProperty
	 * @return {Boolean}
	 */
	hasProperty: function (property) { return false; },
	/**
	 * return an array of property propertys
	 * @alias Titanium.App.Properties.listProperties
	 * @return {Array}
	 */
	listProperties: function () { return []; },
	/**
	 * remove a previously added event listener
	 * @param {String} name name of the event
	 * @param {Function} callback callback function passed in addEventListener
	 * @alias Titanium.App.Properties.removeEventListener
	 */
	removeEventListener: function (name,callback) { },
	/**
	 * remove an existing property
	 * @param {String} property property name to remove
	 * @alias Titanium.App.Properties.removeProperty
	 */
	removeProperty: function (property) { },
	/**
	 * set a property as a boolean value
	 * @param {String} property property name
	 * @param {Boolean} value value
	 * @alias Titanium.App.Properties.setBool
	 */
	setBool: function (property,value) { },
	/**
	 * set a property as a double value
	 * @param {String} property property name
	 * @param {Double} value value
	 * @alias Titanium.App.Properties.setDouble
	 */
	setDouble: function (property,value) { },
	/**
	 * set a property as an integer value
	 * @param {String} property property name
	 * @param {Integer} value value
	 * @param {String} property property name
	 * @param {Integer} value value
	 * @alias Titanium.App.Properties.setInt
	 */
	setInt: function (property,value) { },
	/**
	 * set a property as an array value
	 * @param {String} property property name
	 * @param {Array} value value
	 * @alias Titanium.App.Properties.setList
	 */
	setList: function (property,value) { },
	/**
	 * set a property as a string value
	 * @param {String} property property name
	 * @param {String} value value
	 * @alias Titanium.App.Properties.setString
	 */
	setString: function (property,value) { },
};

/**
 * The top level App iOS module.  The App iOS module is only available on iOS based devices.
 * @since 1.5
 */
Titanium.App.iOS = {
	/**
	 * add an event listener for the instance to receive view triggered events
	 * @param {String} name name of the event
	 * @param {Function} callback callback function to invoke when the event is fired
	 * @alias Titanium.App.iOS.addEventListener
	 */
	addEventListener: function (name,callback) { },
	/**
	 * cancel all scheduled local notifications
	 * @alias Titanium.App.iOS.cancelAllLocalNotifications
	 */
	cancelAllLocalNotifications: function () { },
	/**
	 * cancel a specific local notification
	 * @alias Titanium.App.iOS.cancelLocalNotification
	 */
	cancelLocalNotification: function () { },
	/**
	 * create and return an instance of Titanium.App.iOS.BackgroundService
	 * @param {Object} [parameters] (optional) a dictionary object properties defined in <a href="Titanium.App.iOS.BackgroundService.html">Titanium.App.iOS.BackgroundService</a>
	 * @alias Titanium.App.iOS.createBackgroundService
	 * @return {Titanium_App_iOS_BackgroundService}
	 */
	createBackgroundService: function (parameters) { return new Titanium_App_iOS_BackgroundService(); },
	/**
	 * create and return an instance of Titanium.App.iOS.LocalNotification
	 * @param {Object} [parameters] (optional) a dictionary object properties defined in <a href="Titanium.App.iOS.LocalNotification.html">Titanium.App.iOS.LocalNotification</a>
	 * @alias Titanium.App.iOS.createLocalNotification
	 * @return {Titanium_App_iOS_LocalNotification}
	 */
	createLocalNotification: function (parameters) { return new Titanium_App_iOS_LocalNotification(); },
	/**
	 * fire a synthesized event to the views listener
	 * @param {String} name name of the event
	 * @param {Object} event event object
	 * @alias Titanium.App.iOS.fireEvent
	 */
	fireEvent: function (name,event) { },
	/**
	 * register a background service to run when the app is backgrounded
	 * @param {Object} params dictionary of key/values that are used to create the service. the <tt>url</tt> property should point to a local JavaScript url that will be executed when the app is backgrounded.
	 * @alias Titanium.App.iOS.registerBackgroundService
	 * @return {Object}
	 */
	registerBackgroundService: function (params) { return {}; },
	/**
	 * remove a previously added event listener
	 * @param {String} name name of the event
	 * @param {Function} callback callback function passed in addEventListener
	 * @alias Titanium.App.iOS.removeEventListener
	 */
	removeEventListener: function (name,callback) { },
	/**
	 * schedule a local notification
	 * @param {Object} params dictionary of key/values that are used to create the notification. the <tt>date</tt> property is when the notification should fire, <tt>repeat</tt> is an optional property of one of: <tt>weekly</tt>, <tt>daily</tt>, <tt>yearly,</tt> <tt>monthly</tt>, <tt>alertBody</tt> is an optional property that is the body of the alert when the notification is displayed, <tt>alertAction</tt> is an optional property that represents the alert button text or the 'slide to unlock...' slider in place of unlock, <tt>alertLaunchImage</tt> is an optional property that specifies the launch image to display instead of Default.png when launching the application, <tt>badge</tt> is the optional badge value for the application, <tt>sound</tt> is the optional property to specify the sound to play when the notification is triggered and <tt>userInfo</tt> is the optional property which specifies data passed to the application upon launch when the notification is triggered.
	 * @alias Titanium.App.iOS.scheduleLocalNotification
	 * @return {Object}
	 */
	scheduleLocalNotification: function (params) { return {}; },
};

/**
 * The BackgroundService is created by Titanium.App.iOS.registerBackgroundService.
 * @since 1.5
 */
Titanium.App.iOS.BackgroundService = {
	/**
	 * add an event listener for the instance to receive view triggered events
	 * @param {String} name name of the event
	 * @param {Function} callback callback function to invoke when the event is fired
	 * @alias Titanium.App.iOS.BackgroundService.addEventListener
	 */
	addEventListener: function (name,callback) { },
	/**
	 * fire a synthesized event to the views listener
	 * @param {String} name name of the event
	 * @param {Object} event event object
	 * @alias Titanium.App.iOS.BackgroundService.fireEvent
	 */
	fireEvent: function (name,event) { },
	/**
	 * remove a previously added event listener
	 * @param {String} name name of the event
	 * @param {Function} callback callback function passed in addEventListener
	 * @alias Titanium.App.iOS.BackgroundService.removeEventListener
	 */
	removeEventListener: function (name,callback) { },
	/**
	 * stop the service from the current background session to conserve resources
	 * @alias Titanium.App.iOS.BackgroundService.stop
	 */
	stop: function () { },
	/**
	 * unregister the background service
	 * @alias Titanium.App.iOS.BackgroundService.unregister
	 */
	unregister: function () { },
};

/**
 * The LocalNotification is created by Titanium.App.iOS.scheduleLocalNotification.
 * @since 1.5
 */
Titanium.App.iOS.LocalNotification = {
	/**
	 * add an event listener for the instance to receive view triggered events
	 * @param {String} name name of the event
	 * @param {Function} callback callback function to invoke when the event is fired
	 * @alias Titanium.App.iOS.LocalNotification.addEventListener
	 */
	addEventListener: function (name,callback) { },
	/**
	 * cancel the pending notification
	 * @alias Titanium.App.iOS.LocalNotification.cancel
	 */
	cancel: function () { },
	/**
	 * fire a synthesized event to the views listener
	 * @param {String} name name of the event
	 * @param {Object} event event object
	 * @alias Titanium.App.iOS.LocalNotification.fireEvent
	 */
	fireEvent: function (name,event) { },
	/**
	 * remove a previously added event listener
	 * @param {String} name name of the event
	 * @param {Function} callback callback function passed in addEventListener
	 * @alias Titanium.App.iOS.LocalNotification.removeEventListener
	 */
	removeEventListener: function (name,callback) { },
};

/**
 * The top level Contacts module.  The Contacts module is used accessing the device Address Book.  (Read-only on Android.)
 * @since 0.8
 */
Titanium.Contacts = {
	/**
	 * constant for 'organization' kind property of Person object
	 * @alias Titanium.Contacts.CONTACTS_KIND_ORGANIZATION
	 * @property {Integer}
	 */
	CONTACTS_KIND_ORGANIZATION: 0,
	/**
	 * constant for 'person' kind property of Person object
	 * @alias Titanium.Contacts.CONTACTS_KIND_PERSON
	 * @property {Integer}
	 */
	CONTACTS_KIND_PERSON: 0,
	/**
	 * constant for sorting group members by first name
	 * @alias Titanium.Contacts.CONTACTS_SORT_FIRST_NAME
	 * @property {Integer}
	 */
	CONTACTS_SORT_FIRST_NAME: 0,
	/**
	 * constant for sorting group members by last name
	 * @alias Titanium.Contacts.CONTACTS_SORT_LAST_NAME
	 * @property {Integer}
	 */
	CONTACTS_SORT_LAST_NAME: 0,
	/**
	 * add an event listener for the instance to receive view triggered events
	 * @param {String} name name of the event
	 * @param {Function} callback callback function to invoke when the event is fired
	 * @alias Titanium.Contacts.addEventListener
	 */
	addEventListener: function (name,callback) { },
	/**
	 * create and return an instance of Titanium.Contacts.Group
	 * @param {Object} [parameters] (optional) a dictionary object properties defined in <a href="Titanium.Contacts.Group.html">Titanium.Contacts.Group</a>
	 * @alias Titanium.Contacts.createGroup
	 * @return {Titanium_Contacts_Group}
	 */
	createGroup: function (parameters) { return new Titanium_Contacts_Group(); },
	/**
	 * create and return an instance of Titanium.Contacts.Person
	 * @param {Object} [parameters] (optional) a dictionary object properties defined in <a href="Titanium.Contacts.Person.html">Titanium.Contacts.Person</a>
	 * @alias Titanium.Contacts.createPerson
	 * @return {Titanium_Contacts_Person}
	 */
	createPerson: function (parameters) { return new Titanium_Contacts_Person(); },
	/**
	 * fire a synthesized event to the views listener
	 * @param {String} name name of the event
	 * @param {Object} event event object
	 * @alias Titanium.Contacts.fireEvent
	 */
	fireEvent: function (name,event) { },
	/**
	 * Returns an of all Titanium.Contacts.Group objects in the contacts database
	 * @alias Titanium.Contacts.getAllGroups
	 */
	getAllGroups: function () { },
	/**
	 * Returns an array of all Titanium.Contacts.Person objects in the contacts database
	 * @alias Titanium.Contacts.getAllPeople
	 */
	getAllPeople: function () { },
	/**
	 * Returns a Titanium.Contacts.Group object with the given ID
	 * @param {Integer} id The database ID of the group to retrieve
	 * @alias Titanium.Contacts.getGroupByID
	 * @return {Object}
	 */
	getGroupByID: function (id) { return {}; },
	/**
	 * Returns an array of Titanium.Contacts.Person objects who have a name (first, last, middle, composite) which matches the given name
	 * @param {String} name The name to match in the database
	 * @alias Titanium.Contacts.getPeopleWithName
	 * @return {Array}
	 */
	getPeopleWithName: function (name) { return []; },
	/**
	 * Returns a Titanium.Contacts.Person object with the given ID
	 * @param {Integer} id The database ID of the person to retrieve
	 * @alias Titanium.Contacts.getPersonByID
	 * @return {Object}
	 */
	getPersonByID: function (id) { return {}; },
	/**
	 * remove a previously added event listener
	 * @param {String} name name of the event
	 * @param {Function} callback callback function passed in addEventListener
	 * @alias Titanium.Contacts.removeEventListener
	 */
	removeEventListener: function (name,callback) { },
	/**
	 * Removes a group from the contacts database (NOTE: not supported on Android.)
	 * @param {Object} group The <a href="Titanium.Contacts.Group.html">Titanium.Contacts.Group</a> object to remove from the database. (NOTE: not supported on Android.)
	 * @alias Titanium.Contacts.removeGroup
	 */
	removeGroup: function (group) { },
	/**
	 * Removes a person from the contacts database. (NOTE: not supported on Android.)
	 * @param {Object} person The <a href="Titanium.Contacts.Person.html">Titanium.Contacts.Person</a> object to remove from the database. (NOTE: not supported on Android.)
	 * @alias Titanium.Contacts.removePerson
	 */
	removePerson: function (person) { },
	/**
	 * Reverts all changes made to the previous save of the database (NOTE: not supported on Android.)
	 * @alias Titanium.Contacts.revert
	 */
	revert: function () { },
	/**
	 * Saves all changes to contacts to the database (NOTE: not supported on Android.)
	 * @alias Titanium.Contacts.save
	 */
	save: function () { },
	/**
	 * Displays the contact picker
	 * @param {Function} cancel The function to call when selection is cancelled
	 * @param {Function} selectedPerson The function to call when a person is selected.  Mutually exclusive with <tt>selectedProperty</tt>
	 * @param {Function} selectedProperty The function to call when a property is selected.  Mutally exclusive with <tt>selectedPerson</tt>
	 * @param {Boolean} animated Whether or not to animate the show/hide of the contacts picker
	 * @param {Array} fields A list of field names to show when selecting properties, default is to show all available
	 * @alias Titanium.Contacts.showContacts
	 */
	showContacts: function (cancel,selectedPerson,selectedProperty,animated,fields) { },
};

/**
 * An object which represents a group in the contacts database.
 * @since 1.4.0
 */
Titanium.Contacts.Group = {
	/**
	 * The name of the group
	 * @alias Titanium.Contacts.Group.name
	 * @property {String}
	 */
	name: '',
	/**
	 * Get the The name of the group
	 * @alias Titanium.Contacts.Group.getName
	 * @return {String}
	 */
	getName: function () { return name; },
	/**
	 * Set the The name of the group
	 * @param {String} value New value to set.
	 * @alias Titanium.Contacts.Group.setName
	 */
	setName: function () { },
	/**
	 * Adds a person to the group
	 * @param {Object} person <a href="Titanium.Contacts.Person.html">Titanium.Contacts.Person</a> object to remove from the group
	 * @alias Titanium.Contacts.Group.add
	 */
	add: function (person) { },
	/**
	 * The complete list of members of the group
	 * @alias Titanium.Contacts.Group.members
	 */
	members: function () { },
	/**
	 * Removes a person from the group
	 * @param {Object} person <a href="Titanium.Contacts.Person.html">Titanium.Contacts.Person</a> object to remove from the group
	 * @alias Titanium.Contacts.Group.remove
	 */
	remove: function (person) { },
	/**
	 * A list of sorted members
	 * @param {Integer} sortBy Method for sorting.  Must be one of  <a href="Titanium.Contacts.CONTACTS_SORT_FIRST_NAME-property.html">Titanium.Contacts.CONTACTS_SORT_FIRST_NAME</a> or <a href="Titanium.Contacts.CONTACTS_SORT_LAST_NAME-property.html">Titanium.Contacts.CONTACTS_SORT_LAST_NAME</a>
	 * @alias Titanium.Contacts.Group.sortedMembers
	 */
	sortedMembers: function (sortBy) { },
};

/**
 * An object which represents a person in the contacts database.
 * @since 0.8
 */
Titanium.Contacts.Person = {
	/**
	 * URLs of webpages associated with the person.  Multi-value, valid labels are: home, work, other, homepage.  Values are strings.
	 * @alias Titanium.Contacts.Person.URL
	 * @property {Object}
	 */
	URL: {},
	/**
	 * The addresses for the person.  Multi-value, valid labels are: home, work, other.  Values are dictionaries.
	 * @alias Titanium.Contacts.Person.address
	 * @property {Object}
	 */
	address: {},
	/**
	 * Get the The addresses for the person.  Multi-value, valid labels are: home, work, other.  Values are dictionaries.
	 * @alias Titanium.Contacts.Person.getAddress
	 * @return {Object}
	 */
	getAddress: function () { return address; },
	/**
	 * Set the The addresses for the person.  Multi-value, valid labels are: home, work, other.  Values are dictionaries.
	 * @param {Object} value New value to set.
	 * @alias Titanium.Contacts.Person.setAddress
	 */
	setAddress: function () { },
	/**
	 * The birthday of the person.  Single value, format is "yyyy-MM-dd'T'HH:mm:ss'.'SSS+0000"
	 * @alias Titanium.Contacts.Person.birthday
	 * @property {String}
	 */
	birthday: '',
	/**
	 * Get the The birthday of the person.  Single value, format is "yyyy-MM-dd'T'HH:mm:ss'.'SSS+0000"
	 * @alias Titanium.Contacts.Person.getBirthday
	 * @return {String}
	 */
	getBirthday: function () { return birthday; },
	/**
	 * Set the The birthday of the person.  Single value, format is "yyyy-MM-dd'T'HH:mm:ss'.'SSS+0000"
	 * @param {String} value New value to set.
	 * @alias Titanium.Contacts.Person.setBirthday
	 */
	setBirthday: function () { },
	/**
	 * The date the person was created in the database.  Single value, format is "yyyy-MM-dd'T'HH:mm:ss'.'SSS+0000", read-only
	 * @alias Titanium.Contacts.Person.created
	 * @property {String}
	 */
	created: '',
	/**
	 * Get the The date the person was created in the database.  Single value, format is "yyyy-MM-dd'T'HH:mm:ss'.'SSS+0000", read-only
	 * @alias Titanium.Contacts.Person.getCreated
	 * @return {String}
	 */
	getCreated: function () { return created; },
	/**
	 * Set the The date the person was created in the database.  Single value, format is "yyyy-MM-dd'T'HH:mm:ss'.'SSS+0000", read-only
	 * @param {String} value New value to set.
	 * @alias Titanium.Contacts.Person.setCreated
	 */
	setCreated: function () { },
	/**
	 * Dates associated with the person.  Multi-value, valid labels are: anniversary.  Values are strings of format "yyyy-MM-dd'T'HH:mm:ss'.'SSS+0000"
	 * @alias Titanium.Contacts.Person.date
	 * @property {Object}
	 */
	date: {},
	/**
	 * Get the Dates associated with the person.  Multi-value, valid labels are: anniversary.  Values are strings of format "yyyy-MM-dd'T'HH:mm:ss'.'SSS+0000"
	 * @alias Titanium.Contacts.Person.getDate
	 * @return {Object}
	 */
	getDate: function () { return date; },
	/**
	 * Set the Dates associated with the person.  Multi-value, valid labels are: anniversary.  Values are strings of format "yyyy-MM-dd'T'HH:mm:ss'.'SSS+0000"
	 * @param {Object} value New value to set.
	 * @alias Titanium.Contacts.Person.setDate
	 */
	setDate: function () { },
	/**
	 * The department of the person.  Single value
	 * @alias Titanium.Contacts.Person.department
	 * @property {String}
	 */
	department: '',
	/**
	 * Get the The department of the person.  Single value
	 * @alias Titanium.Contacts.Person.getDepartment
	 * @return {String}
	 */
	getDepartment: function () { return department; },
	/**
	 * Set the The department of the person.  Single value
	 * @param {String} value New value to set.
	 * @alias Titanium.Contacts.Person.setDepartment
	 */
	setDepartment: function () { },
	/**
	 * The email addresses for the person.  Multi-value, valid labels are: home, work, other.  Values are strings.
	 * @alias Titanium.Contacts.Person.email
	 * @property {Object}
	 */
	email: {},
	/**
	 * Get the The email addresses for the person.  Multi-value, valid labels are: home, work, other.  Values are strings.
	 * @alias Titanium.Contacts.Person.getEmail
	 * @return {Object}
	 */
	getEmail: function () { return email; },
	/**
	 * Set the The email addresses for the person.  Multi-value, valid labels are: home, work, other.  Values are strings.
	 * @param {Object} value New value to set.
	 * @alias Titanium.Contacts.Person.setEmail
	 */
	setEmail: function () { },
	/**
	 * The first name of the person.  Single value
	 * @alias Titanium.Contacts.Person.firstName
	 * @property {String}
	 */
	firstName: '',
	/**
	 * Get the The first name of the person.  Single value
	 * @alias Titanium.Contacts.Person.getFirstName
	 * @return {String}
	 */
	getFirstName: function () { return firstName; },
	/**
	 * Set the The first name of the person.  Single value
	 * @param {String} value New value to set.
	 * @alias Titanium.Contacts.Person.setFirstName
	 */
	setFirstName: function () { },
	/**
	 * The phonetic first name of the person.  Single value
	 * @alias Titanium.Contacts.Person.firstPhonetic
	 * @property {String}
	 */
	firstPhonetic: '',
	/**
	 * Get the The phonetic first name of the person.  Single value
	 * @alias Titanium.Contacts.Person.getFirstPhonetic
	 * @return {String}
	 */
	getFirstPhonetic: function () { return firstPhonetic; },
	/**
	 * Set the The phonetic first name of the person.  Single value
	 * @param {String} value New value to set.
	 * @alias Titanium.Contacts.Person.setFirstPhonetic
	 */
	setFirstPhonetic: function () { },
	/**
	 * The localized full name of the person.  Single value, read-only
	 * @alias Titanium.Contacts.Person.fullName
	 * @property {String}
	 */
	fullName: '',
	/**
	 * Get the The localized full name of the person.  Single value, read-only
	 * @alias Titanium.Contacts.Person.getFullName
	 * @return {String}
	 */
	getFullName: function () { return fullName; },
	/**
	 * Set the The localized full name of the person.  Single value, read-only
	 * @param {String} value New value to set.
	 * @alias Titanium.Contacts.Person.setFullName
	 */
	setFullName: function () { },
	/**
	 * A blob object representing the image for the person.  Set to null to remove the image.  Single value
	 * @alias Titanium.Contacts.Person.image
	 * @property {Object}
	 */
	image: {},
	/**
	 * Get the A blob object representing the image for the person.  Set to null to remove the image.  Single value
	 * @alias Titanium.Contacts.Person.getImage
	 * @return {Object}
	 */
	getImage: function () { return image; },
	/**
	 * Set the A blob object representing the image for the person.  Set to null to remove the image.  Single value
	 * @param {Object} value New value to set.
	 * @alias Titanium.Contacts.Person.setImage
	 */
	setImage: function () { },
	/**
	 * The instant messenger names for the person.  Multi-value, valid labels are: aim, icq, jabber, msn, yahoo.  Values are dictionaries.
	 * @alias Titanium.Contacts.Person.instantMessage
	 * @property {Object}
	 */
	instantMessage: {},
	/**
	 * Get the The instant messenger names for the person.  Multi-value, valid labels are: aim, icq, jabber, msn, yahoo.  Values are dictionaries.
	 * @alias Titanium.Contacts.Person.getInstantMessage
	 * @return {Object}
	 */
	getInstantMessage: function () { return instantMessage; },
	/**
	 * Set the The instant messenger names for the person.  Multi-value, valid labels are: aim, icq, jabber, msn, yahoo.  Values are dictionaries.
	 * @param {Object} value New value to set.
	 * @alias Titanium.Contacts.Person.setInstantMessage
	 */
	setInstantMessage: function () { },
	/**
	 * The job title of the person.  Single value
	 * @alias Titanium.Contacts.Person.jobTitle
	 * @property {String}
	 */
	jobTitle: '',
	/**
	 * Get the The job title of the person.  Single value
	 * @alias Titanium.Contacts.Person.getJobTitle
	 * @return {String}
	 */
	getJobTitle: function () { return jobTitle; },
	/**
	 * Set the The job title of the person.  Single value
	 * @param {String} value New value to set.
	 * @alias Titanium.Contacts.Person.setJobTitle
	 */
	setJobTitle: function () { },
	/**
	 * The kind of person.  Single value, one of Titanium.Contacts.CONTACTS_KIND_PERSON or Titanium.Contacts.CONTACTS_KIND_ORGANIZATION
	 * @alias Titanium.Contacts.Person.kind
	 * @property {Integer}
	 */
	kind: 0,
	/**
	 * Get the The kind of person.  Single value, one of Titanium.Contacts.CONTACTS_KIND_PERSON or Titanium.Contacts.CONTACTS_KIND_ORGANIZATION
	 * @alias Titanium.Contacts.Person.getKind
	 * @return {Integer}
	 */
	getKind: function () { return kind; },
	/**
	 * Set the The kind of person.  Single value, one of Titanium.Contacts.CONTACTS_KIND_PERSON or Titanium.Contacts.CONTACTS_KIND_ORGANIZATION
	 * @param {Integer} value New value to set.
	 * @alias Titanium.Contacts.Person.setKind
	 */
	setKind: function () { },
	/**
	 * The last name of the person.  Single value
	 * @alias Titanium.Contacts.Person.lastName
	 * @property {String}
	 */
	lastName: '',
	/**
	 * Get the The last name of the person.  Single value
	 * @alias Titanium.Contacts.Person.getLastName
	 * @return {String}
	 */
	getLastName: function () { return lastName; },
	/**
	 * Set the The last name of the person.  Single value
	 * @param {String} value New value to set.
	 * @alias Titanium.Contacts.Person.setLastName
	 */
	setLastName: function () { },
	/**
	 * The phonetic last name of the person.  Single value
	 * @alias Titanium.Contacts.Person.lastPhonetic
	 * @property {String}
	 */
	lastPhonetic: '',
	/**
	 * Get the The phonetic last name of the person.  Single value
	 * @alias Titanium.Contacts.Person.getLastPhonetic
	 * @return {String}
	 */
	getLastPhonetic: function () { return lastPhonetic; },
	/**
	 * Set the The phonetic last name of the person.  Single value
	 * @param {String} value New value to set.
	 * @alias Titanium.Contacts.Person.setLastPhonetic
	 */
	setLastPhonetic: function () { },
	/**
	 * The middle name of the person.  Single value
	 * @alias Titanium.Contacts.Person.middleName
	 * @property {String}
	 */
	middleName: '',
	/**
	 * Get the The middle name of the person.  Single value
	 * @alias Titanium.Contacts.Person.getMiddleName
	 * @return {String}
	 */
	getMiddleName: function () { return middleName; },
	/**
	 * Set the The middle name of the person.  Single value
	 * @param {String} value New value to set.
	 * @alias Titanium.Contacts.Person.setMiddleName
	 */
	setMiddleName: function () { },
	/**
	 * The phonetic middle name of the person.  Single value
	 * @alias Titanium.Contacts.Person.middlePhonetic
	 * @property {String}
	 */
	middlePhonetic: '',
	/**
	 * Get the The phonetic middle name of the person.  Single value
	 * @alias Titanium.Contacts.Person.getMiddlePhonetic
	 * @return {String}
	 */
	getMiddlePhonetic: function () { return middlePhonetic; },
	/**
	 * Set the The phonetic middle name of the person.  Single value
	 * @param {String} value New value to set.
	 * @alias Titanium.Contacts.Person.setMiddlePhonetic
	 */
	setMiddlePhonetic: function () { },
	/**
	 * The most recent date the person was modified.  Single value, format is "yyyy-MM-dd'T'HH:mm:ss'.'SSS+0000", read-only
	 * @alias Titanium.Contacts.Person.modified
	 * @property {String}
	 */
	modified: '',
	/**
	 * Get the The most recent date the person was modified.  Single value, format is "yyyy-MM-dd'T'HH:mm:ss'.'SSS+0000", read-only
	 * @alias Titanium.Contacts.Person.getModified
	 * @return {String}
	 */
	getModified: function () { return modified; },
	/**
	 * Set the The most recent date the person was modified.  Single value, format is "yyyy-MM-dd'T'HH:mm:ss'.'SSS+0000", read-only
	 * @param {String} value New value to set.
	 * @alias Titanium.Contacts.Person.setModified
	 */
	setModified: function () { },
	/**
	 * The nickname of the person.  Single value
	 * @alias Titanium.Contacts.Person.nickname
	 * @property {String}
	 */
	nickname: '',
	/**
	 * Get the The nickname of the person.  Single value
	 * @alias Titanium.Contacts.Person.getNickname
	 * @return {String}
	 */
	getNickname: function () { return nickname; },
	/**
	 * Set the The nickname of the person.  Single value
	 * @param {String} value New value to set.
	 * @alias Titanium.Contacts.Person.setNickname
	 */
	setNickname: function () { },
	/**
	 * Notes for the person.  Single value
	 * @alias Titanium.Contacts.Person.note
	 * @property {String}
	 */
	note: '',
	/**
	 * Get the Notes for the person.  Single value
	 * @alias Titanium.Contacts.Person.getNote
	 * @return {String}
	 */
	getNote: function () { return note; },
	/**
	 * Set the Notes for the person.  Single value
	 * @param {String} value New value to set.
	 * @alias Titanium.Contacts.Person.setNote
	 */
	setNote: function () { },
	/**
	 * The organization the person belongs to.  Single value
	 * @alias Titanium.Contacts.Person.organization
	 * @property {String}
	 */
	organization: '',
	/**
	 * Get the The organization the person belongs to.  Single value
	 * @alias Titanium.Contacts.Person.getOrganization
	 * @return {String}
	 */
	getOrganization: function () { return organization; },
	/**
	 * Set the The organization the person belongs to.  Single value
	 * @param {String} value New value to set.
	 * @alias Titanium.Contacts.Person.setOrganization
	 */
	setOrganization: function () { },
	/**
	 * The phone numbers for the person.  Multi-value, valid labels are: home, work, other, mobile, pager, workFax, homeFax, main, iPhone.  Values are strings.
	 * @alias Titanium.Contacts.Person.phone
	 * @property {Object}
	 */
	phone: {},
	/**
	 * Get the The phone numbers for the person.  Multi-value, valid labels are: home, work, other, mobile, pager, workFax, homeFax, main, iPhone.  Values are strings.
	 * @alias Titanium.Contacts.Person.getPhone
	 * @return {Object}
	 */
	getPhone: function () { return phone; },
	/**
	 * Set the The phone numbers for the person.  Multi-value, valid labels are: home, work, other, mobile, pager, workFax, homeFax, main, iPhone.  Values are strings.
	 * @param {Object} value New value to set.
	 * @alias Titanium.Contacts.Person.setPhone
	 */
	setPhone: function () { },
	/**
	 * The prefix for the person.  Single value
	 * @alias Titanium.Contacts.Person.prefix
	 * @property {String}
	 */
	prefix: '',
	/**
	 * Get the The prefix for the person.  Single value
	 * @alias Titanium.Contacts.Person.getPrefix
	 * @return {String}
	 */
	getPrefix: function () { return prefix; },
	/**
	 * Set the The prefix for the person.  Single value
	 * @param {String} value New value to set.
	 * @alias Titanium.Contacts.Person.setPrefix
	 */
	setPrefix: function () { },
	/**
	 * The names of people the person is related to.  Multi-value, valid labels are: mother, father, parent, sister, brother, child, friend, spouse, partner, manager, assistant.  Values are strings.
	 * @alias Titanium.Contacts.Person.relatedNames
	 * @property {Object}
	 */
	relatedNames: {},
	/**
	 * Get the The names of people the person is related to.  Multi-value, valid labels are: mother, father, parent, sister, brother, child, friend, spouse, partner, manager, assistant.  Values are strings.
	 * @alias Titanium.Contacts.Person.getRelatedNames
	 * @return {Object}
	 */
	getRelatedNames: function () { return relatedNames; },
	/**
	 * Set the The names of people the person is related to.  Multi-value, valid labels are: mother, father, parent, sister, brother, child, friend, spouse, partner, manager, assistant.  Values are strings.
	 * @param {Object} value New value to set.
	 * @alias Titanium.Contacts.Person.setRelatedNames
	 */
	setRelatedNames: function () { },
	/**
	 * The suffix for the person.  Single value
	 * @alias Titanium.Contacts.Person.suffix
	 * @property {String}
	 */
	suffix: '',
	/**
	 * Get the The suffix for the person.  Single value
	 * @alias Titanium.Contacts.Person.getSuffix
	 * @return {String}
	 */
	getSuffix: function () { return suffix; },
	/**
	 * Set the The suffix for the person.  Single value
	 * @param {String} value New value to set.
	 * @alias Titanium.Contacts.Person.setSuffix
	 */
	setSuffix: function () { },
};

/**
 * The top level Database module.  The Database module is used for creating and accessing the in-application Database.
 * @since 0.1
 */
Titanium.Database = {
	/**
	 * add an event listener for the instance to receive view triggered events
	 * @param {String} name name of the event
	 * @param {Function} callback callback function to invoke when the event is fired
	 * @alias Titanium.Database.addEventListener
	 */
	addEventListener: function (name,callback) { },
	/**
	 * fire a synthesized event to the views listener
	 * @param {String} name name of the event
	 * @param {Object} event event object
	 * @alias Titanium.Database.fireEvent
	 */
	fireEvent: function (name,event) { },
	/**
	 * install a database from the application Resources folder (at build time) and return a reference to the opened database. it is safe to call this method multiple times since this method will only install once if it doesn't already exist on the device.
	 * @param {String} path the path (relative to the main application Resources folder at build time) to the db to install. this file must be in the SQLite 3 file format.
	 * @param {String} name the name of the database
	 * @alias Titanium.Database.install
	 * @return {Object}
	 */
	install: function (path,name) { return {}; },
	/**
	 * open a database. if it doesn't yet exist, create it.
	 * @param {String} name the name of the database
	 * @alias Titanium.Database.open
	 * @return {Object}
	 */
	open: function (name) { return {}; },
	/**
	 * remove a previously added event listener
	 * @param {String} name name of the event
	 * @param {Function} callback callback function passed in addEventListener
	 * @alias Titanium.Database.removeEventListener
	 */
	removeEventListener: function (name,callback) { },
};

/**
 * The Database instance returned by Titanium.Database.open or Titanium.Database.install.
 * @since 0.1
 */
Titanium.Database.DB = {
	/**
	 * the last row identifier by the last INSERT query
	 * @alias Titanium.Database.DB.lastInsertRowId
	 * @property {Integer}
	 */
	lastInsertRowId: 0,
	/**
	 * Get the the last row identifier by the last INSERT query
	 * @alias Titanium.Database.DB.getLastInsertRowId
	 * @return {Integer}
	 */
	getLastInsertRowId: function () { return lastInsertRowId; },
	/**
	 * Set the the last row identifier by the last INSERT query
	 * @param {Integer} value New value to set.
	 * @alias Titanium.Database.DB.setLastInsertRowId
	 */
	setLastInsertRowId: function () { },
	/**
	 * the name of the database
	 * @alias Titanium.Database.DB.name
	 * @property {String}
	 */
	name: '',
	/**
	 * Get the the name of the database
	 * @alias Titanium.Database.DB.getName
	 * @return {String}
	 */
	getName: function () { return name; },
	/**
	 * Set the the name of the database
	 * @param {String} value New value to set.
	 * @alias Titanium.Database.DB.setName
	 */
	setName: function () { },
	/**
	 * the number of rows affected by the last query
	 * @alias Titanium.Database.DB.rowsAffected
	 * @property {Integer}
	 */
	rowsAffected: 0,
	/**
	 * Get the the number of rows affected by the last query
	 * @alias Titanium.Database.DB.getRowsAffected
	 * @return {Integer}
	 */
	getRowsAffected: function () { return rowsAffected; },
	/**
	 * Set the the number of rows affected by the last query
	 * @param {Integer} value New value to set.
	 * @alias Titanium.Database.DB.setRowsAffected
	 */
	setRowsAffected: function () { },
	/**
	 * close the database and release resources from memory. once closed, this instance is no longer valid and must no longer be used.
	 * @alias Titanium.Database.DB.close
	 */
	close: function () { },
	/**
	 * execute a SQL statement against the database and returns a ResultSet
	 * @param {String} sql the SQL to execute
	 * @param {Array,...} vararg one or more optional variable arguments passed to this function or an array of objects to be replaced in the query using <tt>?</tt> substitution.
	 * @alias Titanium.Database.DB.execute
	 * @return {Object}
	 */
	execute: function (sql,vararg) { return {}; },
	/**
	 * remove the database files for this instance from disk. WARNING: this is a destructive operation and cannot be reversed. All data in the database will be lost upon calling this function. Use with caution.
	 * @alias Titanium.Database.DB.remove
	 */
	remove: function () { },
};

/**
 * The ResultSet instance returned by invoking a database SQL execute.
 * @since 0.1
 */
Titanium.Database.ResultSet = {
	/**
	 * the number of rows in the result set
	 * @alias Titanium.Database.ResultSet.rowCount
	 * @property {Integer}
	 */
	rowCount: 0,
	/**
	 * Get the the number of rows in the result set
	 * @alias Titanium.Database.ResultSet.getRowCount
	 * @return {Integer}
	 */
	getRowCount: function () { return rowCount; },
	/**
	 * Set the the number of rows in the result set
	 * @param {Integer} value New value to set.
	 * @alias Titanium.Database.ResultSet.setRowCount
	 */
	setRowCount: function () { },
	/**
	 * returns true if the current row is still valid
	 * @alias Titanium.Database.ResultSet.validRow
	 * @property {Boolean}
	 */
	validRow: false,
	/**
	 * Get the returns true if the current row is still valid
	 * @alias Titanium.Database.ResultSet.getValidRow
	 * @return {Boolean}
	 */
	getValidRow: function () { return validRow; },
	/**
	 * Set the returns true if the current row is still valid
	 * @param {Boolean} value New value to set.
	 * @alias Titanium.Database.ResultSet.setValidRow
	 */
	setValidRow: function () { },
	/**
	 * close the result set and release resources. once closed, this result set must no longer be used
	 * @alias Titanium.Database.ResultSet.close
	 */
	close: function () { },
	/**
	 * retrieve a row value by field index
	 * @param {Integer} index column index (which is zero based)
	 * @alias Titanium.Database.ResultSet.field
	 * @return {Object}
	 */
	field: function (index) { return {}; },
	/**
	 * retrieve a row value by field name
	 * @param {String} name column name from SQL query
	 * @alias Titanium.Database.ResultSet.fieldByName
	 * @return {Object}
	 */
	fieldByName: function (name) { return {}; },
	/**
	 * return the number of columns in the result set
	 * @alias Titanium.Database.ResultSet.fieldCount
	 * @return {Integer}
	 */
	fieldCount: function () { return 0; },
	/**
	 * return the field name for field index
	 * @param {Integer} index field name column index (which is zero based)
	 * @alias Titanium.Database.ResultSet.fieldName
	 * @return {String}
	 */
	fieldName: function (index) { return ''; },
	/**
	 * return true if the row is a valid row
	 * @alias Titanium.Database.ResultSet.isValidRow
	 * @return {Boolean}
	 */
	isValidRow: function () { return false; },
};

/**
 * The top level Facebook module.  The Facebook module is used for connecting your application with 
Facebook through Facebook Connect.
 * @since 0.8
 */
Titanium.Facebook = {
	/**
	 * return true if the user has logged in
	 * @alias Titanium.Facebook.loggedIn
	 * @property {Boolean}
	 */
	loggedIn: false,
	/**
	 * Get the return true if the user has logged in
	 * @alias Titanium.Facebook.getLoggedIn
	 * @return {Boolean}
	 */
	getLoggedIn: function () { return loggedIn; },
	/**
	 * Set the return true if the user has logged in
	 * @param {Boolean} value New value to set.
	 * @alias Titanium.Facebook.setLoggedIn
	 */
	setLoggedIn: function () { },
	/**
	 * return a dictionary of permissions with the keys being the name of the permission and the value being a boolean of true if granted, false if not granted
	 * @alias Titanium.Facebook.permissions
	 * @property {Object}
	 */
	permissions: {},
	/**
	 * Get the return a dictionary of permissions with the keys being the name of the permission and the value being a boolean of true if granted, false if not granted
	 * @alias Titanium.Facebook.getPermissions
	 * @return {Object}
	 */
	getPermissions: function () { return permissions; },
	/**
	 * Set the return a dictionary of permissions with the keys being the name of the permission and the value being a boolean of true if granted, false if not granted
	 * @param {Object} value New value to set.
	 * @alias Titanium.Facebook.setPermissions
	 */
	setPermissions: function () { },
	/**
	 * return the special properties of the session
	 * @alias Titanium.Facebook.session
	 * @property {Object}
	 */
	session: {},
	/**
	 * Get the return the special properties of the session
	 * @alias Titanium.Facebook.getSession
	 * @return {Object}
	 */
	getSession: function () { return session; },
	/**
	 * Set the return the special properties of the session
	 * @param {Object} value New value to set.
	 * @alias Titanium.Facebook.setSession
	 */
	setSession: function () { },
	/**
	 * the unique user id returned from Facebook. returns 0 if not logged in
	 * @alias Titanium.Facebook.userId
	 * @property {long}
	 */
	userId: {},
	/**
	 * Get the the unique user id returned from Facebook. returns 0 if not logged in
	 * @alias Titanium.Facebook.getUserId
	 * @return {long}
	 */
	getUserId: function () { return userId; },
	/**
	 * Set the the unique user id returned from Facebook. returns 0 if not logged in
	 * @param {long} value New value to set.
	 * @alias Titanium.Facebook.setUserId
	 */
	setUserId: function () { },
	/**
	 * add an event listener for the instance to receive view triggered events
	 * @param {String} name name of the event
	 * @param {Function} callback callback function to invoke when the event is fired
	 * @alias Titanium.Facebook.addEventListener
	 */
	addEventListener: function (name,callback) { },
	/**
	 * create and return an instance of Titanium.Facebook.LoginButton
	 * @param {Object} params the parameters for the request. the following keys are valid: <tt>apikey</tt> (the application API key), <tt>secret</tt> (the application API secret or null if using a session proxy), <tt>sessionProxy</tt> (the URL to the application session proxy), <tt>style</tt> (the button style - which is either <tt>normal</tt> or <tt>wide</tt>).
	 * @param {Object} [parameters] (optional) a dictionary object properties defined in <a href="Titanium.Facebook.LoginButton.html">Titanium.Facebook.LoginButton</a>
	 * @alias Titanium.Facebook.createLoginButton
	 * @return {Titanium_Facebook_LoginButton}
	 */
	createLoginButton: function (params,parameters) { return new Titanium_Facebook_LoginButton(); },
	/**
	 * execute a FB API execute request
	 * @param {String} method method to execute
	 * @param {Object} params JSON serializable object or null (if no parameters) to send with the request
	 * @param {Function} callback the callback function to execute upon receiving a response. the result object will contain a <tt>success</tt> boolean to indicate the result.  if <tt>success</tt> is false, the <tt>error</tt> property will give the error message.  the <tt>data</tt> property will contain the result if successfully executed.
	 * @param {Object} data the data payload for the request. Must either null, a string or a Blob object.
	 * @alias Titanium.Facebook.execute
	 */
	execute: function (method,params,callback,data) { },
	/**
	 * fire a synthesized event to the views listener
	 * @param {String} name name of the event
	 * @param {Object} event event object
	 * @alias Titanium.Facebook.fireEvent
	 */
	fireEvent: function (name,event) { },
	/**
	 * checks the existing permission and returns true if the user has granted the requested permission
	 * @param {String} permission the permission to check
	 * @alias Titanium.Facebook.hasPermission
	 * @return {Boolean}
	 */
	hasPermission: function (permission) { return false; },
	/**
	 * return true if the user has logged in
	 * @alias Titanium.Facebook.isLoggedIn
	 */
	isLoggedIn: function () { },
	/**
	 * execute a stream request to FB
	 * @param {String} title the title of the stream post
	 * @param {Object} data the data to include in the post. Must be JSON serializable or null.
	 * @param {String} target the target user id to publish the stream or null if the logged in users account
	 * @param {Function} callback the callback function to execute upon receiving a response. the result object will contain a <tt>success</tt> boolean to indicate the result.  if <tt>success</tt> is false, the <tt>error</tt> property will give the error message.  the <tt>data</tt> property will contain the result if successfully executed. the <tt>cancel</tt> property will be set to true if the user cancelled the dialog.
	 * @alias Titanium.Facebook.publishStream
	 */
	publishStream: function (title,data,target,callback) { },
	/**
	 * execute a FQL query against the FB API
	 * @param {String} fql the FQL query to execute
	 * @param {Function} callback the callback to execute with results once the query is completed. the result object will contain a <tt>success</tt> boolean to indicate the result.  if <tt>success</tt> is false, the <tt>error</tt> property will give the error message.  the <tt>data</tt> property will contain the result if successfully executed.
	 * @alias Titanium.Facebook.query
	 */
	query: function (fql,callback) { },
	/**
	 * remove a previously added event listener
	 * @param {String} name name of the event
	 * @param {Function} callback callback function passed in addEventListener
	 * @alias Titanium.Facebook.removeEventListener
	 */
	removeEventListener: function (name,callback) { },
	/**
	 * request a special permission from the user
	 * @param {String} permission name of the permission
	 * @param {Function} callback the callback function to execute upon receiving a response. the result object will contain a <tt>success</tt> boolean to indicate the result.  if <tt>success</tt> is false, the <tt>error</tt> property will give the error message.  the <tt>data</tt> property will contain the result if successfully executed. the <tt>cancel</tt> property will be set to true if the user cancelled the dialog.
	 * @alias Titanium.Facebook.requestPermission
	 */
	requestPermission: function (permission,callback) { },
};

/**
 * The Login Button created by Titanium.Facebook.createLoginButton.
 * @since 0.8
 */
Titanium.Facebook.LoginButton = {
	/**
	 * a dictionary with properties x and y to indicate the anchor point value. anchor specifies the position by which animation should occur. center is 0.5, 0.5
	 * @alias Titanium.Facebook.LoginButton.anchorPoint
	 * @property {Object}
	 */
	anchorPoint: {},
	/**
	 * Get the a dictionary with properties x and y to indicate the anchor point value. anchor specifies the position by which animation should occur. center is 0.5, 0.5
	 * @alias Titanium.Facebook.LoginButton.getAnchorPoint
	 * @return {Object}
	 */
	getAnchorPoint: function () { return anchorPoint; },
	/**
	 * Set the a dictionary with properties x and y to indicate the anchor point value. anchor specifies the position by which animation should occur. center is 0.5, 0.5
	 * @param {Object} value New value to set.
	 * @alias Titanium.Facebook.LoginButton.setAnchorPoint
	 */
	setAnchorPoint: function () { },
	/**
	 * read-only object with x and y properties of where the view is during animation
	 * @alias Titanium.Facebook.LoginButton.animatedCenterPoint
	 * @property {Object}
	 */
	animatedCenterPoint: {},
	/**
	 * Get the read-only object with x and y properties of where the view is during animation
	 * @alias Titanium.Facebook.LoginButton.getAnimatedCenterPoint
	 * @return {Object}
	 */
	getAnimatedCenterPoint: function () { return animatedCenterPoint; },
	/**
	 * Set the read-only object with x and y properties of where the view is during animation
	 * @param {Object} value New value to set.
	 * @alias Titanium.Facebook.LoginButton.setAnimatedCenterPoint
	 */
	setAnimatedCenterPoint: function () { },
	/**
	 * the background color of the view
	 * @alias Titanium.Facebook.LoginButton.backgroundColor
	 * @property {String}
	 */
	backgroundColor: '',
	/**
	 * Get the the background color of the view
	 * @alias Titanium.Facebook.LoginButton.getBackgroundColor
	 * @return {String}
	 */
	getBackgroundColor: function () { return backgroundColor; },
	/**
	 * Set the the background color of the view
	 * @param {String} value New value to set.
	 * @alias Titanium.Facebook.LoginButton.setBackgroundColor
	 */
	setBackgroundColor: function () { },
	/**
	 * the disabled background color of the view. (Android)
	 * @alias Titanium.Facebook.LoginButton.backgroundDisabledColor
	 * @property {String}
	 */
	backgroundDisabledColor: '',
	/**
	 * Get the the disabled background color of the view. (Android)
	 * @alias Titanium.Facebook.LoginButton.getBackgroundDisabledColor
	 * @return {String}
	 */
	getBackgroundDisabledColor: function () { return backgroundDisabledColor; },
	/**
	 * Set the the disabled background color of the view. (Android)
	 * @param {String} value New value to set.
	 * @alias Titanium.Facebook.LoginButton.setBackgroundDisabledColor
	 */
	setBackgroundDisabledColor: function () { },
	/**
	 * the disabled background image url of the view. (Android)
	 * @alias Titanium.Facebook.LoginButton.backgroundDisabledImage
	 * @property {String}
	 */
	backgroundDisabledImage: '',
	/**
	 * Get the the disabled background image url of the view. (Android)
	 * @alias Titanium.Facebook.LoginButton.getBackgroundDisabledImage
	 * @return {String}
	 */
	getBackgroundDisabledImage: function () { return backgroundDisabledImage; },
	/**
	 * Set the the disabled background image url of the view. (Android)
	 * @param {String} value New value to set.
	 * @alias Titanium.Facebook.LoginButton.setBackgroundDisabledImage
	 */
	setBackgroundDisabledImage: function () { },
	/**
	 * the focused background color of the view. focusable must be true for normal views. (Android)
	 * @alias Titanium.Facebook.LoginButton.backgroundFocusedColor
	 * @property {String}
	 */
	backgroundFocusedColor: '',
	/**
	 * Get the the focused background color of the view. focusable must be true for normal views. (Android)
	 * @alias Titanium.Facebook.LoginButton.getBackgroundFocusedColor
	 * @return {String}
	 */
	getBackgroundFocusedColor: function () { return backgroundFocusedColor; },
	/**
	 * Set the the focused background color of the view. focusable must be true for normal views. (Android)
	 * @param {String} value New value to set.
	 * @alias Titanium.Facebook.LoginButton.setBackgroundFocusedColor
	 */
	setBackgroundFocusedColor: function () { },
	/**
	 * the focused background image url of the view. focusable must be true for normal views. (Android)
	 * @alias Titanium.Facebook.LoginButton.backgroundFocusedImage
	 * @property {String}
	 */
	backgroundFocusedImage: '',
	/**
	 * Get the the focused background image url of the view. focusable must be true for normal views. (Android)
	 * @alias Titanium.Facebook.LoginButton.getBackgroundFocusedImage
	 * @return {String}
	 */
	getBackgroundFocusedImage: function () { return backgroundFocusedImage; },
	/**
	 * Set the the focused background image url of the view. focusable must be true for normal views. (Android)
	 * @param {String} value New value to set.
	 * @alias Titanium.Facebook.LoginButton.setBackgroundFocusedImage
	 */
	setBackgroundFocusedImage: function () { },
	/**
	 * a background gradient for the view with the properties: type,startPoint,endPoint,startRadius,endRadius,backfillStart,backfillEnd,colors.
	 * @alias Titanium.Facebook.LoginButton.backgroundGradient
	 * @property {Object}
	 */
	backgroundGradient: {},
	/**
	 * Get the a background gradient for the view with the properties: type,startPoint,endPoint,startRadius,endRadius,backfillStart,backfillEnd,colors.
	 * @alias Titanium.Facebook.LoginButton.getBackgroundGradient
	 * @return {Object}
	 */
	getBackgroundGradient: function () { return backgroundGradient; },
	/**
	 * Set the a background gradient for the view with the properties: type,startPoint,endPoint,startRadius,endRadius,backfillStart,backfillEnd,colors.
	 * @param {Object} value New value to set.
	 * @alias Titanium.Facebook.LoginButton.setBackgroundGradient
	 */
	setBackgroundGradient: function () { },
	/**
	 * the background image url of the view
	 * @alias Titanium.Facebook.LoginButton.backgroundImage
	 * @property {String}
	 */
	backgroundImage: '',
	/**
	 * Get the the background image url of the view
	 * @alias Titanium.Facebook.LoginButton.getBackgroundImage
	 * @return {String}
	 */
	getBackgroundImage: function () { return backgroundImage; },
	/**
	 * Set the the background image url of the view
	 * @param {String} value New value to set.
	 * @alias Titanium.Facebook.LoginButton.setBackgroundImage
	 */
	setBackgroundImage: function () { },
	/**
	 * End caps specify the portion of an image that should not be resized when an image is stretched. This technique is used to implement buttons and other resizable image-based interface elements. When a button with end caps is resized, the resizing occurs only in the middle of the button, in the region between the end caps. The end caps themselves keep their original size and appearance. This property specifies the size of the left end cap. The middle (stretchable) portion is assumed to be 1 pixel wide. The right end cap is therefore computed by adding the size of the left end cap and the middle portion together and then subtracting that value from the width of the image
	 * @alias Titanium.Facebook.LoginButton.backgroundLeftCap
	 * @property {Float}
	 */
	backgroundLeftCap: 0.0,
	/**
	 * Get the End caps specify the portion of an image that should not be resized when an image is stretched. This technique is used to implement buttons and other resizable image-based interface elements. When a button with end caps is resized, the resizing occurs only in the middle of the button, in the region between the end caps. The end caps themselves keep their original size and appearance. This property specifies the size of the left end cap. The middle (stretchable) portion is assumed to be 1 pixel wide. The right end cap is therefore computed by adding the size of the left end cap and the middle portion together and then subtracting that value from the width of the image
	 * @alias Titanium.Facebook.LoginButton.getBackgroundLeftCap
	 * @return {Float}
	 */
	getBackgroundLeftCap: function () { return backgroundLeftCap; },
	/**
	 * Set the End caps specify the portion of an image that should not be resized when an image is stretched. This technique is used to implement buttons and other resizable image-based interface elements. When a button with end caps is resized, the resizing occurs only in the middle of the button, in the region between the end caps. The end caps themselves keep their original size and appearance. This property specifies the size of the left end cap. The middle (stretchable) portion is assumed to be 1 pixel wide. The right end cap is therefore computed by adding the size of the left end cap and the middle portion together and then subtracting that value from the width of the image
	 * @param {Float} value New value to set.
	 * @alias Titanium.Facebook.LoginButton.setBackgroundLeftCap
	 */
	setBackgroundLeftCap: function () { },
	/**
	 * the selected background color of the view. focusable must be true for normal views. (Android)
	 * @alias Titanium.Facebook.LoginButton.backgroundSelectedColor
	 * @property {String}
	 */
	backgroundSelectedColor: '',
	/**
	 * Get the the selected background color of the view. focusable must be true for normal views. (Android)
	 * @alias Titanium.Facebook.LoginButton.getBackgroundSelectedColor
	 * @return {String}
	 */
	getBackgroundSelectedColor: function () { return backgroundSelectedColor; },
	/**
	 * Set the the selected background color of the view. focusable must be true for normal views. (Android)
	 * @param {String} value New value to set.
	 * @alias Titanium.Facebook.LoginButton.setBackgroundSelectedColor
	 */
	setBackgroundSelectedColor: function () { },
	/**
	 * the selected background image url of the view. focusable must be true for normal views. (Android)
	 * @alias Titanium.Facebook.LoginButton.backgroundSelectedImage
	 * @property {String}
	 */
	backgroundSelectedImage: '',
	/**
	 * Get the the selected background image url of the view. focusable must be true for normal views. (Android)
	 * @alias Titanium.Facebook.LoginButton.getBackgroundSelectedImage
	 * @return {String}
	 */
	getBackgroundSelectedImage: function () { return backgroundSelectedImage; },
	/**
	 * Set the the selected background image url of the view. focusable must be true for normal views. (Android)
	 * @param {String} value New value to set.
	 * @alias Titanium.Facebook.LoginButton.setBackgroundSelectedImage
	 */
	setBackgroundSelectedImage: function () { },
	/**
	 * End caps specify the portion of an image that should not be resized when an image is stretched. This technique is used to implement buttons and other resizable image-based interface elements. When a button with end caps is resized, the resizing occurs only in the middle of the button, in the region between the end caps. The end caps themselves keep their original size and appearance. This property specifies the size of the top end cap. The middle (stretchable) portion is assumed to be 1 pixel wide. The bottom end cap is therefore computed by adding the size of the top end cap and the middle portion together and then subtracting that value from the height of the image
	 * @alias Titanium.Facebook.LoginButton.backgroundTopCap
	 * @property {Float}
	 */
	backgroundTopCap: 0.0,
	/**
	 * Get the End caps specify the portion of an image that should not be resized when an image is stretched. This technique is used to implement buttons and other resizable image-based interface elements. When a button with end caps is resized, the resizing occurs only in the middle of the button, in the region between the end caps. The end caps themselves keep their original size and appearance. This property specifies the size of the top end cap. The middle (stretchable) portion is assumed to be 1 pixel wide. The bottom end cap is therefore computed by adding the size of the top end cap and the middle portion together and then subtracting that value from the height of the image
	 * @alias Titanium.Facebook.LoginButton.getBackgroundTopCap
	 * @return {Float}
	 */
	getBackgroundTopCap: function () { return backgroundTopCap; },
	/**
	 * Set the End caps specify the portion of an image that should not be resized when an image is stretched. This technique is used to implement buttons and other resizable image-based interface elements. When a button with end caps is resized, the resizing occurs only in the middle of the button, in the region between the end caps. The end caps themselves keep their original size and appearance. This property specifies the size of the top end cap. The middle (stretchable) portion is assumed to be 1 pixel wide. The bottom end cap is therefore computed by adding the size of the top end cap and the middle portion together and then subtracting that value from the height of the image
	 * @param {Float} value New value to set.
	 * @alias Titanium.Facebook.LoginButton.setBackgroundTopCap
	 */
	setBackgroundTopCap: function () { },
	/**
	 * the border color of the view
	 * @alias Titanium.Facebook.LoginButton.borderColor
	 * @property {String}
	 */
	borderColor: '',
	/**
	 * Get the the border color of the view
	 * @alias Titanium.Facebook.LoginButton.getBorderColor
	 * @return {String}
	 */
	getBorderColor: function () { return borderColor; },
	/**
	 * Set the the border color of the view
	 * @param {String} value New value to set.
	 * @alias Titanium.Facebook.LoginButton.setBorderColor
	 */
	setBorderColor: function () { },
	/**
	 * the border radius of the view
	 * @alias Titanium.Facebook.LoginButton.borderRadius
	 * @property {Float}
	 */
	borderRadius: 0.0,
	/**
	 * Get the the border radius of the view
	 * @alias Titanium.Facebook.LoginButton.getBorderRadius
	 * @return {Float}
	 */
	getBorderRadius: function () { return borderRadius; },
	/**
	 * Set the the border radius of the view
	 * @param {Float} value New value to set.
	 * @alias Titanium.Facebook.LoginButton.setBorderRadius
	 */
	setBorderRadius: function () { },
	/**
	 * the border width of the view
	 * @alias Titanium.Facebook.LoginButton.borderWidth
	 * @property {Float}
	 */
	borderWidth: 0.0,
	/**
	 * Get the the border width of the view
	 * @alias Titanium.Facebook.LoginButton.getBorderWidth
	 * @return {Float}
	 */
	getBorderWidth: function () { return borderWidth; },
	/**
	 * Set the the border width of the view
	 * @param {Float} value New value to set.
	 * @alias Titanium.Facebook.LoginButton.setBorderWidth
	 */
	setBorderWidth: function () { },
	/**
	 * property for the view bottom position. This position is relative to the view's parent. Can be either a float value or a dimension string ie 'auto' (default), '50%' (iPhone only).
	 * @alias Titanium.Facebook.LoginButton.bottom
	 * @property {Float,String}
	 */
	bottom: 0.0,
	/**
	 * Get the property for the view bottom position. This position is relative to the view's parent. Can be either a float value or a dimension string ie 'auto' (default), '50%' (iPhone only).
	 * @alias Titanium.Facebook.LoginButton.getBottom
	 * @return {Float,String}
	 */
	getBottom: function () { return bottom; },
	/**
	 * Set the property for the view bottom position. This position is relative to the view's parent. Can be either a float value or a dimension string ie 'auto' (default), '50%' (iPhone only).
	 * @param {Float,String} value New value to set.
	 * @alias Titanium.Facebook.LoginButton.setBottom
	 */
	setBottom: function () { },
	/**
	 * a dictionary with properties x and y to indicate the center of the views position relative to the parent view
	 * @alias Titanium.Facebook.LoginButton.center
	 * @property {Object}
	 */
	center: {},
	/**
	 * Get the a dictionary with properties x and y to indicate the center of the views position relative to the parent view
	 * @alias Titanium.Facebook.LoginButton.getCenter
	 * @return {Object}
	 */
	getCenter: function () { return center; },
	/**
	 * Set the a dictionary with properties x and y to indicate the center of the views position relative to the parent view
	 * @param {Object} value New value to set.
	 * @alias Titanium.Facebook.LoginButton.setCenter
	 */
	setCenter: function () { },
	/**
	 * Set true if you want a view to be focusable when navigating with the trackball or D-Pad. Default: false. (Android Only)
	 * @alias Titanium.Facebook.LoginButton.focusable
	 * @property {Boolean}
	 */
	focusable: false,
	/**
	 * Get the Set true if you want a view to be focusable when navigating with the trackball or D-Pad. Default: false. (Android Only)
	 * @alias Titanium.Facebook.LoginButton.getFocusable
	 * @return {Boolean}
	 */
	getFocusable: function () { return focusable; },
	/**
	 * Set the Set true if you want a view to be focusable when navigating with the trackball or D-Pad. Default: false. (Android Only)
	 * @param {Boolean} value New value to set.
	 * @alias Titanium.Facebook.LoginButton.setFocusable
	 */
	setFocusable: function () { },
	/**
	 * the font family
	 * @alias Titanium.Facebook.LoginButton.font-family
	 * @property {String}
	 */
	font-family: '',
	/**
	 * Get the the font family
	 * @alias Titanium.Facebook.LoginButton.getFont-family
	 * @return {String}
	 */
	getFont-family: function () { return font-family; },
	/**
	 * Set the the font family
	 * @param {String} value New value to set.
	 * @alias Titanium.Facebook.LoginButton.setFont-family
	 */
	setFont-family: function () { },
	/**
	 * the font size
	 * @alias Titanium.Facebook.LoginButton.font-size
	 * @property {String}
	 */
	font-size: '',
	/**
	 * Get the the font size
	 * @alias Titanium.Facebook.LoginButton.getFont-size
	 * @return {String}
	 */
	getFont-size: function () { return font-size; },
	/**
	 * Set the the font size
	 * @param {String} value New value to set.
	 * @alias Titanium.Facebook.LoginButton.setFont-size
	 */
	setFont-size: function () { },
	/**
	 * the font style, either normal or italics
	 * @alias Titanium.Facebook.LoginButton.font-style
	 * @property {String}
	 */
	font-style: '',
	/**
	 * Get the the font style, either normal or italics
	 * @alias Titanium.Facebook.LoginButton.getFont-style
	 * @return {String}
	 */
	getFont-style: function () { return font-style; },
	/**
	 * Set the the font style, either normal or italics
	 * @param {String} value New value to set.
	 * @alias Titanium.Facebook.LoginButton.setFont-style
	 */
	setFont-style: function () { },
	/**
	 * the font weight, either normal or bold
	 * @alias Titanium.Facebook.LoginButton.font-weight
	 * @property {String}
	 */
	font-weight: '',
	/**
	 * Get the the font weight, either normal or bold
	 * @alias Titanium.Facebook.LoginButton.getFont-weight
	 * @return {String}
	 */
	getFont-weight: function () { return font-weight; },
	/**
	 * Set the the font weight, either normal or bold
	 * @param {String} value New value to set.
	 * @alias Titanium.Facebook.LoginButton.setFont-weight
	 */
	setFont-weight: function () { },
	/**
	 * property for the view height. Can be either a float value or a dimension string ie 'auto' (default), '50%' (iPhone only).
	 * @alias Titanium.Facebook.LoginButton.height
	 * @property {Float,String}
	 */
	height: 0.0,
	/**
	 * Get the property for the view height. Can be either a float value or a dimension string ie 'auto' (default), '50%' (iPhone only).
	 * @alias Titanium.Facebook.LoginButton.getHeight
	 * @return {Float,String}
	 */
	getHeight: function () { return height; },
	/**
	 * Set the property for the view height. Can be either a float value or a dimension string ie 'auto' (default), '50%' (iPhone only).
	 * @param {Float,String} value New value to set.
	 * @alias Titanium.Facebook.LoginButton.setHeight
	 */
	setHeight: function () { },
	/**
	 * property for the view left position. This position is relative to the view's parent. Can be either a float value or a dimension string ie 'auto' (default), '50%' (iPhone only).
	 * @alias Titanium.Facebook.LoginButton.left
	 * @property {Float,String}
	 */
	left: 0.0,
	/**
	 * Get the property for the view left position. This position is relative to the view's parent. Can be either a float value or a dimension string ie 'auto' (default), '50%' (iPhone only).
	 * @alias Titanium.Facebook.LoginButton.getLeft
	 * @return {Float,String}
	 */
	getLeft: function () { return left; },
	/**
	 * Set the property for the view left position. This position is relative to the view's parent. Can be either a float value or a dimension string ie 'auto' (default), '50%' (iPhone only).
	 * @param {Float,String} value New value to set.
	 * @alias Titanium.Facebook.LoginButton.setLeft
	 */
	setLeft: function () { },
	/**
	 * the opacity from 0.0-1.0
	 * @alias Titanium.Facebook.LoginButton.opacity
	 * @property {Float}
	 */
	opacity: 0.0,
	/**
	 * Get the the opacity from 0.0-1.0
	 * @alias Titanium.Facebook.LoginButton.getOpacity
	 * @return {Float}
	 */
	getOpacity: function () { return opacity; },
	/**
	 * Set the the opacity from 0.0-1.0
	 * @param {Float} value New value to set.
	 * @alias Titanium.Facebook.LoginButton.setOpacity
	 */
	setOpacity: function () { },
	/**
	 * property for the view right position. This position is relative to the view's parent. Can be either a float value or a dimension string ie 'auto' (default), '50%' (iPhone only).
	 * @alias Titanium.Facebook.LoginButton.right
	 * @property {Float,String}
	 */
	right: 0.0,
	/**
	 * Get the property for the view right position. This position is relative to the view's parent. Can be either a float value or a dimension string ie 'auto' (default), '50%' (iPhone only).
	 * @alias Titanium.Facebook.LoginButton.getRight
	 * @return {Float,String}
	 */
	getRight: function () { return right; },
	/**
	 * Set the property for the view right position. This position is relative to the view's parent. Can be either a float value or a dimension string ie 'auto' (default), '50%' (iPhone only).
	 * @param {Float,String} value New value to set.
	 * @alias Titanium.Facebook.LoginButton.setRight
	 */
	setRight: function () { },
	/**
	 * the size of the view as a dictionary of width and height properties
	 * @alias Titanium.Facebook.LoginButton.size
	 * @property {Object}
	 */
	size: {},
	/**
	 * Get the the size of the view as a dictionary of width and height properties
	 * @alias Titanium.Facebook.LoginButton.getSize
	 * @return {Object}
	 */
	getSize: function () { return size; },
	/**
	 * Set the the size of the view as a dictionary of width and height properties
	 * @param {Object} value New value to set.
	 * @alias Titanium.Facebook.LoginButton.setSize
	 */
	setSize: function () { },
	/**
	 * One of Titanium.UI.Android.SOFT_KEYBOARD_DEFAULT_ON_FOCUS, Titanium.UI.Android.SOFT_KEYBOARD_HIDE_ON_FOCUS, or Titanium.UI.Android.SOFT_KEYBOARD_SHOW_ON_FOCUS. (Android only)
	 * @alias Titanium.Facebook.LoginButton.softKeyboardOnFocus
	 * @property {Integer}
	 */
	softKeyboardOnFocus: 0,
	/**
	 * Get the One of Titanium.UI.Android.SOFT_KEYBOARD_DEFAULT_ON_FOCUS, Titanium.UI.Android.SOFT_KEYBOARD_HIDE_ON_FOCUS, or Titanium.UI.Android.SOFT_KEYBOARD_SHOW_ON_FOCUS. (Android only)
	 * @alias Titanium.Facebook.LoginButton.getSoftKeyboardOnFocus
	 * @return {Integer}
	 */
	getSoftKeyboardOnFocus: function () { return softKeyboardOnFocus; },
	/**
	 * Set the One of Titanium.UI.Android.SOFT_KEYBOARD_DEFAULT_ON_FOCUS, Titanium.UI.Android.SOFT_KEYBOARD_HIDE_ON_FOCUS, or Titanium.UI.Android.SOFT_KEYBOARD_SHOW_ON_FOCUS. (Android only)
	 * @param {Integer} value New value to set.
	 * @alias Titanium.Facebook.LoginButton.setSoftKeyboardOnFocus
	 */
	setSoftKeyboardOnFocus: function () { },
	/**
	 * property for the view top position. This position is relative to the view's parent. Can be either a float value or a dimension string ie 'auto' (default), '50%' (iPhone only).
	 * @alias Titanium.Facebook.LoginButton.top
	 * @property {Float,String}
	 */
	top: 0.0,
	/**
	 * Get the property for the view top position. This position is relative to the view's parent. Can be either a float value or a dimension string ie 'auto' (default), '50%' (iPhone only).
	 * @alias Titanium.Facebook.LoginButton.getTop
	 * @return {Float,String}
	 */
	getTop: function () { return top; },
	/**
	 * Set the property for the view top position. This position is relative to the view's parent. Can be either a float value or a dimension string ie 'auto' (default), '50%' (iPhone only).
	 * @param {Float,String} value New value to set.
	 * @alias Titanium.Facebook.LoginButton.setTop
	 */
	setTop: function () { },
	/**
	 * a boolean indicating if the view should receive touch events (true, default) or forward them to peers (false)
	 * @alias Titanium.Facebook.LoginButton.touchEnabled
	 * @property {Boolean}
	 */
	touchEnabled: false,
	/**
	 * Get the a boolean indicating if the view should receive touch events (true, default) or forward them to peers (false)
	 * @alias Titanium.Facebook.LoginButton.getTouchEnabled
	 * @return {Boolean}
	 */
	getTouchEnabled: function () { return touchEnabled; },
	/**
	 * Set the a boolean indicating if the view should receive touch events (true, default) or forward them to peers (false)
	 * @param {Boolean} value New value to set.
	 * @alias Titanium.Facebook.LoginButton.setTouchEnabled
	 */
	setTouchEnabled: function () { },
	/**
	 * the transformation matrix to apply to the view
	 * @alias Titanium.Facebook.LoginButton.transform
	 * @property {Object}
	 */
	transform: {},
	/**
	 * Get the the transformation matrix to apply to the view
	 * @alias Titanium.Facebook.LoginButton.getTransform
	 * @return {Object}
	 */
	getTransform: function () { return transform; },
	/**
	 * Set the the transformation matrix to apply to the view
	 * @param {Object} value New value to set.
	 * @alias Titanium.Facebook.LoginButton.setTransform
	 */
	setTransform: function () { },
	/**
	 * a boolean of the visibility of the view
	 * @alias Titanium.Facebook.LoginButton.visible
	 * @property {Boolean}
	 */
	visible: false,
	/**
	 * Get the a boolean of the visibility of the view
	 * @alias Titanium.Facebook.LoginButton.getVisible
	 * @return {Boolean}
	 */
	getVisible: function () { return visible; },
	/**
	 * Set the a boolean of the visibility of the view
	 * @param {Boolean} value New value to set.
	 * @alias Titanium.Facebook.LoginButton.setVisible
	 */
	setVisible: function () { },
	/**
	 * property for the view width. Can be either a float value or a dimension string ie 'auto' (default), '50%' (iPhone only).
	 * @alias Titanium.Facebook.LoginButton.width
	 * @property {Float,String}
	 */
	width: 0.0,
	/**
	 * Get the property for the view width. Can be either a float value or a dimension string ie 'auto' (default), '50%' (iPhone only).
	 * @alias Titanium.Facebook.LoginButton.getWidth
	 * @return {Float,String}
	 */
	getWidth: function () { return width; },
	/**
	 * Set the property for the view width. Can be either a float value or a dimension string ie 'auto' (default), '50%' (iPhone only).
	 * @param {Float,String} value New value to set.
	 * @alias Titanium.Facebook.LoginButton.setWidth
	 */
	setWidth: function () { },
	/**
	 * the z index position relative to other sibling views
	 * @alias Titanium.Facebook.LoginButton.zIndex
	 * @property {Integer}
	 */
	zIndex: 0,
	/**
	 * Get the the z index position relative to other sibling views
	 * @alias Titanium.Facebook.LoginButton.getZIndex
	 * @return {Integer}
	 */
	getZIndex: function () { return zIndex; },
	/**
	 * Set the the z index position relative to other sibling views
	 * @param {Integer} value New value to set.
	 * @alias Titanium.Facebook.LoginButton.setZIndex
	 */
	setZIndex: function () { },
	/**
	 * add a child to the view hierarchy
	 * @param {Object} view the view to add to this views hiearchy
	 * @alias Titanium.Facebook.LoginButton.add
	 */
	add: function (view) { },
	/**
	 * add an event listener for the instance to receive view triggered events
	 * @param {String} name name of the event
	 * @param {Function} callback callback function to invoke when the event is fired
	 * @alias Titanium.Facebook.LoginButton.addEventListener
	 */
	addEventListener: function (name,callback) { },
	/**
	 * animate the view
	 * @param {Object} obj either a dictionary of animation properties or an Animation object
	 * @param {Function} callback function to be invoked upon completion of the animation
	 * @alias Titanium.Facebook.LoginButton.animate
	 */
	animate: function (obj,callback) { },
	/**
	 * fire a synthesized event to the views listener
	 * @param {String} name name of the event
	 * @param {Object} event event object
	 * @alias Titanium.Facebook.LoginButton.fireEvent
	 */
	fireEvent: function (name,event) { },
	/**
	 * hide the view
	 * @alias Titanium.Facebook.LoginButton.hide
	 */
	hide: function () { },
	/**
	 * remove a previously add view from the view hiearchy
	 * @param {Object} view the view to remove from this views hiearchy
	 * @alias Titanium.Facebook.LoginButton.remove
	 */
	remove: function (view) { },
	/**
	 * remove a previously added event listener
	 * @param {String} name name of the event
	 * @param {Function} callback callback function passed in addEventListener
	 * @alias Titanium.Facebook.LoginButton.removeEventListener
	 */
	removeEventListener: function (name,callback) { },
	/**
	 * make the view visible
	 * @alias Titanium.Facebook.LoginButton.show
	 */
	show: function () { },
	/**
	 * return a Blob image of the rendered view
	 * @param {Function} f function to be invoked upon completion. if non-null, this method will be performed asynchronously. if null, it will be performed immediately
	 * @alias Titanium.Facebook.LoginButton.toImage
	 * @return {Object}
	 */
	toImage: function (f) { return {}; },
};

/**
 * The top level Filesystem module.  The Filesystem module is used for reading and saving files and 
directories on the device.
 * @since 0.1
 */
Titanium.Filesystem = {
	/**
	 * constant for append mode for file operations
	 * @alias Titanium.Filesystem.MODE_APPEND
	 * @property {Integer}
	 */
	MODE_APPEND: 0,
	/**
	 * constant for read mode for file operations
	 * @alias Titanium.Filesystem.MODE_READ
	 * @property {Integer}
	 */
	MODE_READ: 0,
	/**
	 * constant for write mode for file operations
	 * @alias Titanium.Filesystem.MODE_WRITE
	 * @property {Integer}
	 */
	MODE_WRITE: 0,
	/**
	 * readonly constant where your application data directory is located. this directory should be used to place applications-specific files. on iPhone, this directory is also backed up.
	 * @alias Titanium.Filesystem.applicationDataDirectory
	 * @property {String}
	 */
	applicationDataDirectory: '',
	/**
	 * Get the readonly constant where your application data directory is located. this directory should be used to place applications-specific files. on iPhone, this directory is also backed up.
	 * @alias Titanium.Filesystem.getApplicationDataDirectory
	 * @return {String}
	 */
	getApplicationDataDirectory: function () { return applicationDataDirectory; },
	/**
	 * Set the readonly constant where your application data directory is located. this directory should be used to place applications-specific files. on iPhone, this directory is also backed up.
	 * @param {String} value New value to set.
	 * @alias Titanium.Filesystem.setApplicationDataDirectory
	 */
	setApplicationDataDirectory: function () { },
	/**
	 * readonly constant where your application is located
	 * @alias Titanium.Filesystem.applicationDirectory
	 * @property {String}
	 */
	applicationDirectory: '',
	/**
	 * Get the readonly constant where your application is located
	 * @alias Titanium.Filesystem.getApplicationDirectory
	 * @return {String}
	 */
	getApplicationDirectory: function () { return applicationDirectory; },
	/**
	 * Set the readonly constant where your application is located
	 * @param {String} value New value to set.
	 * @alias Titanium.Filesystem.setApplicationDirectory
	 */
	setApplicationDirectory: function () { },
	/**
	 * readonly platform specific line ending constant
	 * @alias Titanium.Filesystem.lineEnding
	 * @property {String}
	 */
	lineEnding: '',
	/**
	 * Get the readonly platform specific line ending constant
	 * @alias Titanium.Filesystem.getLineEnding
	 * @return {String}
	 */
	getLineEnding: function () { return lineEnding; },
	/**
	 * Set the readonly platform specific line ending constant
	 * @param {String} value New value to set.
	 * @alias Titanium.Filesystem.setLineEnding
	 */
	setLineEnding: function () { },
	/**
	 * readonly constant where your application resources are located
	 * @alias Titanium.Filesystem.resourcesDirectory
	 * @property {String}
	 */
	resourcesDirectory: '',
	/**
	 * Get the readonly constant where your application resources are located
	 * @alias Titanium.Filesystem.getResourcesDirectory
	 * @return {String}
	 */
	getResourcesDirectory: function () { return resourcesDirectory; },
	/**
	 * Set the readonly constant where your application resources are located
	 * @param {String} value New value to set.
	 * @alias Titanium.Filesystem.setResourcesDirectory
	 */
	setResourcesDirectory: function () { },
	/**
	 * readonly path separator constant
	 * @alias Titanium.Filesystem.separator
	 * @property {String}
	 */
	separator: '',
	/**
	 * Get the readonly path separator constant
	 * @alias Titanium.Filesystem.getSeparator
	 * @return {String}
	 */
	getSeparator: function () { return separator; },
	/**
	 * Set the readonly path separator constant
	 * @param {String} value New value to set.
	 * @alias Titanium.Filesystem.setSeparator
	 */
	setSeparator: function () { },
	/**
	 * readonly constant where your application can place temporary files
	 * @alias Titanium.Filesystem.tempDirectory
	 * @property {String}
	 */
	tempDirectory: '',
	/**
	 * Get the readonly constant where your application can place temporary files
	 * @alias Titanium.Filesystem.getTempDirectory
	 * @return {String}
	 */
	getTempDirectory: function () { return tempDirectory; },
	/**
	 * Set the readonly constant where your application can place temporary files
	 * @param {String} value New value to set.
	 * @alias Titanium.Filesystem.setTempDirectory
	 */
	setTempDirectory: function () { },
	/**
	 * add an event listener for the instance to receive view triggered events
	 * @param {String} name name of the event
	 * @param {Function} callback callback function to invoke when the event is fired
	 * @alias Titanium.Filesystem.addEventListener
	 */
	addEventListener: function (name,callback) { },
	/**
	 * create and return an instance of Titanium.Filesystem.File
	 * @param {Object} [parameters] (optional) a dictionary object properties defined in <a href="Titanium.Filesystem.File.html">Titanium.Filesystem.File</a>
	 * @alias Titanium.Filesystem.createFile
	 * @return {Titanium_Filesystem_File}
	 */
	createFile: function (parameters) { return new Titanium_Filesystem_File(); },
	/**
	 * create temp file and return a Titanium.Filesystem.File
	 * @alias Titanium.Filesystem.createTempDirectory
	 * @return {BLANK}
	 */
	createTempDirectory: function () { return new BLANK(); },
	/**
	 * create a temp file and return a Titanium.Filesystem.File
	 * @alias Titanium.Filesystem.createTempFile
	 * @return {BLANK}
	 */
	createTempFile: function () { return new BLANK(); },
	/**
	 * fire a synthesized event to the views listener
	 * @param {String} name name of the event
	 * @param {Object} event event object
	 * @alias Titanium.Filesystem.fireEvent
	 */
	fireEvent: function (name,event) { },
	/**
	 * return a fully formed file path as a Titanium.Filesystem.File object
	 * @param {String} path one or more path arguments to form the full path joined together with the platform specific path separator. if a relative path is passed, the full path will be relative to the application resource folder.
	 * @alias Titanium.Filesystem.getFile
	 * @return {Titanium.Filesystem.File}
	 */
	getFile: function (path) { return {}; },
	/**
	 * returns true if the device supports external storage such as an SD card
	 * @alias Titanium.Filesystem.isExteralStoragePresent
	 * @return {Boolean}
	 */
	isExteralStoragePresent: function () { return false; },
	/**
	 * remove a previously added event listener
	 * @param {String} name name of the event
	 * @param {Function} callback callback function passed in addEventListener
	 * @alias Titanium.Filesystem.removeEventListener
	 */
	removeEventListener: function (name,callback) { },
};

/**
 * The File object which support various filesystem based operations.
 * @since 0.1
 */
Titanium.Filesystem.File = {
	/**
	 * add an event listener for the instance to receive view triggered events
	 * @param {String} name name of the event
	 * @param {Function} callback callback function to invoke when the event is fired
	 * @alias Titanium.Filesystem.File.addEventListener
	 */
	addEventListener: function (name,callback) { },
	/**
	 * create a directory at the path for the file object
	 * @alias Titanium.Filesystem.File.createDirectory
	 * @return {BLANK}
	 */
	createDirectory: function () { return new BLANK(); },
	/**
	 * create a file path at the path for the file object
	 * @alias Titanium.Filesystem.File.createFile
	 * @return {Titanium_Filesystem_File}
	 */
	createFile: function () { return new Titanium_Filesystem_File(); },
	/**
	 * return the created timestamp for the file
	 * @alias Titanium.Filesystem.File.createTimestamp
	 * @return {BLANK}
	 */
	createTimestamp: function () { return new BLANK(); },
	/**
	 * delete the file directory path
	 * @param {Boolean} recursive pass true to recursively delete any contents. defaults to false
	 * @alias Titanium.Filesystem.File.deleteDirectory
	 * @return {Boolean}
	 */
	deleteDirectory: function (recursive) { return false; },
	/**
	 * delete the file
	 * @alias Titanium.Filesystem.File.deleteFile
	 * @return {Boolean}
	 */
	deleteFile: function () { return false; },
	/**
	 * returns true if the file is executable
	 * @alias Titanium.Filesystem.File.executable
	 * @return {Boolean}
	 */
	executable: function () { return false; },
	/**
	 * returns true if the file or directory exists on the device
	 * @alias Titanium.Filesystem.File.exists
	 * @return {Boolean}
	 */
	exists: function () { return false; },
	/**
	 * return the file extension
	 * @alias Titanium.Filesystem.File.extension
	 * @return {String}
	 */
	extension: function () { return ''; },
	/**
	 * fire a synthesized event to the views listener
	 * @param {String} name name of the event
	 * @param {Object} event event object
	 * @alias Titanium.Filesystem.File.fireEvent
	 */
	fireEvent: function (name,event) { },
	/**
	 * return an array of paths in the directory of the file object
	 * @alias Titanium.Filesystem.File.getDirectoryListing
	 * @return {Array}
	 */
	getDirectoryListing: function () { return []; },
	/**
	 * return the file parent
	 * @alias Titanium.Filesystem.File.getParent
	 * @return {Titanium.Filesystem.File}
	 */
	getParent: function () { return {}; },
	/**
	 * returns true if the file is hidden
	 * @alias Titanium.Filesystem.File.hidden
	 * @return {Boolean}
	 */
	hidden: function () { return false; },
	/**
	 * return the last modification timestamp for the file
	 * @alias Titanium.Filesystem.File.modificationTimestamp
	 * @return {long}
	 */
	modificationTimestamp: function () { return {}; },
	/**
	 * move the file to another path
	 * @param {Object} newpath new location
	 * @alias Titanium.Filesystem.File.move
	 * @return {Boolean}
	 */
	move: function (newpath) { return false; },
	/**
	 * the name of the file
	 * @alias Titanium.Filesystem.File.name
	 * @return {String}
	 */
	name: function () { return ''; },
	/**
	 * returns the fully resolved native path
	 * @alias Titanium.Filesystem.File.nativePath
	 * @return {String}
	 */
	nativePath: function () { return ''; },
	/**
	 * return the contents of file as blob
	 * @alias Titanium.Filesystem.File.read
	 * @return {Titanium.Blob}
	 */
	read: function () { return {}; },
	/**
	 * returns true if the file is readonly
	 * @alias Titanium.Filesystem.File.readonly
	 * @return {Boolean}
	 */
	readonly: function () { return false; },
	/**
	 * remove a previously added event listener
	 * @param {String} name name of the event
	 * @param {Function} callback callback function passed in addEventListener
	 * @alias Titanium.Filesystem.File.removeEventListener
	 */
	removeEventListener: function (name,callback) { },
	/**
	 * rename the file
	 * @param {String} newname new name
	 * @alias Titanium.Filesystem.File.rename
	 * @return {Boolean}
	 */
	rename: function (newname) { return false; },
	/**
	 * make the file executable
	 * @alias Titanium.Filesystem.File.setExecutable
	 */
	setExecutable: function () { },
	/**
	 * make the file hidden
	 * @alias Titanium.Filesystem.File.setHidden
	 */
	setHidden: function () { },
	/**
	 * make the file readonly
	 * @alias Titanium.Filesystem.File.setReadonly
	 */
	setReadonly: function () { },
	/**
	 * return boolean to indicate if the path has space available for storage
	 * @alias Titanium.Filesystem.File.spaceAvailable
	 * @return {Boolean}
	 */
	spaceAvailable: function () { return false; },
	/**
	 * returns true if the file points to a symbolic link
	 * @alias Titanium.Filesystem.File.symbolicLink
	 * @return {Boolean}
	 */
	symbolicLink: function () { return false; },
	/**
	 * write the contents to file
	 * @param {Object} contents write the contents of string, blob or [[Titanium.Filesystem.File]] to file
	 * @alias Titanium.Filesystem.File.write
	 * @return {Boolean}
	 */
	write: function (contents) { return false; },
	/**
	 * returns true if the file is writeable
	 * @alias Titanium.Filesystem.File.writeable
	 * @return {Boolean}
	 */
	writeable: function () { return false; },
};

/**
 * The top level Geolocation module.  The Geolocation module is used for accessing device location based information.
 * @since 0.1
 */
Titanium.Geolocation = {
	/**
	 * accuracy constant
	 * @alias Titanium.Geolocation.ACCURACY_BEST
	 * @property {Integer}
	 */
	ACCURACY_BEST: 0,
	/**
	 * accuracy constant
	 * @alias Titanium.Geolocation.ACCURACY_HUNDRED_METERS
	 * @property {Integer}
	 */
	ACCURACY_HUNDRED_METERS: 0,
	/**
	 * accuracy constant
	 * @alias Titanium.Geolocation.ACCURACY_KILOMETER
	 * @property {Integer}
	 */
	ACCURACY_KILOMETER: 0,
	/**
	 * accuracy constant
	 * @alias Titanium.Geolocation.ACCURACY_NEAREST_TEN_METERS
	 * @property {Integer}
	 */
	ACCURACY_NEAREST_TEN_METERS: 0,
	/**
	 * accuracy constant
	 * @alias Titanium.Geolocation.ACCURACY_THREE_KILOMETERS
	 * @property {Integer}
	 */
	ACCURACY_THREE_KILOMETERS: 0,
	/**
	 * authorization constant
	 * @alias Titanium.Geolocation.AUTHORIZATION_AUTHORIZED
	 * @property {Integer}
	 */
	AUTHORIZATION_AUTHORIZED: 0,
	/**
	 * authorization constant (user disabled authorization)
	 * @alias Titanium.Geolocation.AUTHORIZATION_DENIED
	 * @property {Integer}
	 */
	AUTHORIZATION_DENIED: 0,
	/**
	 * authorization constant (system disabled authorization)
	 * @alias Titanium.Geolocation.AUTHORIZATION_RESTRICTED
	 * @property {Integer}
	 */
	AUTHORIZATION_RESTRICTED: 0,
	/**
	 * authorization constant
	 * @alias Titanium.Geolocation.AUTHORIZATION_UNKNOWN
	 * @property {Integer}
	 */
	AUTHORIZATION_UNKNOWN: 0,
	/**
	 * The GPS location provider
	 * @alias Titanium.Geolocation.PROVIDER_GPS
	 * @property {String}
	 */
	PROVIDER_GPS: '',
	/**
	 * The Network location provider
	 * @alias Titanium.Geolocation.PROVIDER_NETWORK
	 * @property {String}
	 */
	PROVIDER_NETWORK: '',
	/**
	 * (iOS 4.2+ only). Returns an authorization constant indicating if the application has access to location services. Always returns AUTHORIZATION_UNKNOWN on pre-4.2 devices. Attempting to re-authorize when AUTHORIZATION_RESTRICTED will lead to issues
	 * @alias Titanium.Geolocation.locationServicesAuthorization
	 * @property {Integer}
	 */
	locationServicesAuthorization: 0,
	/**
	 * Get the (iOS 4.2+ only). Returns an authorization constant indicating if the application has access to location services. Always returns AUTHORIZATION_UNKNOWN on pre-4.2 devices. Attempting to re-authorize when AUTHORIZATION_RESTRICTED will lead to issues
	 * @alias Titanium.Geolocation.getLocationServicesAuthorization
	 * @return {Integer}
	 */
	getLocationServicesAuthorization: function () { return locationServicesAuthorization; },
	/**
	 * Set the (iOS 4.2+ only). Returns an authorization constant indicating if the application has access to location services. Always returns AUTHORIZATION_UNKNOWN on pre-4.2 devices. Attempting to re-authorize when AUTHORIZATION_RESTRICTED will lead to issues
	 * @param {Integer} value New value to set.
	 * @alias Titanium.Geolocation.setLocationServicesAuthorization
	 */
	setLocationServicesAuthorization: function () { },
	/**
	 * returns true if the user has enabled or disable location services for the device (not the application).
	 * @alias Titanium.Geolocation.locationServicesEnabled
	 * @property {Boolean}
	 */
	locationServicesEnabled: false,
	/**
	 * Get the returns true if the user has enabled or disable location services for the device (not the application).
	 * @alias Titanium.Geolocation.getLocationServicesEnabled
	 * @return {Boolean}
	 */
	getLocationServicesEnabled: function () { return locationServicesEnabled; },
	/**
	 * Set the returns true if the user has enabled or disable location services for the device (not the application).
	 * @param {Boolean} value New value to set.
	 * @alias Titanium.Geolocation.setLocationServicesEnabled
	 */
	setLocationServicesEnabled: function () { },
	/**
	 * allows setting of the preferred location provider.  Returns undefined when the preferred provider is auto-detected
	 * @alias Titanium.Geolocation.preferredProvider
	 * @property {String}
	 */
	preferredProvider: '',
	/**
	 * Get the allows setting of the preferred location provider.  Returns undefined when the preferred provider is auto-detected
	 * @alias Titanium.Geolocation.getPreferredProvider
	 * @return {String}
	 */
	getPreferredProvider: function () { return preferredProvider; },
	/**
	 * Set the allows setting of the preferred location provider.  Returns undefined when the preferred provider is auto-detected
	 * @param {String} value New value to set.
	 * @alias Titanium.Geolocation.setPreferredProvider
	 */
	setPreferredProvider: function () { },
	/**
	 * (iOS only). This property informs the end-user why location services are being requested by the application.  This string will be display in the permission dialog. This property is REQUIRED starting in 4.0.
	 * @alias Titanium.Geolocation.purpose
	 * @property {String}
	 */
	purpose: '',
	/**
	 * Get the (iOS only). This property informs the end-user why location services are being requested by the application.  This string will be display in the permission dialog. This property is REQUIRED starting in 4.0.
	 * @alias Titanium.Geolocation.getPurpose
	 * @return {String}
	 */
	getPurpose: function () { return purpose; },
	/**
	 * Set the (iOS only). This property informs the end-user why location services are being requested by the application.  This string will be display in the permission dialog. This property is REQUIRED starting in 4.0.
	 * @param {String} value New value to set.
	 * @alias Titanium.Geolocation.setPurpose
	 */
	setPurpose: function () { },
	/**
	 * returns true if the calibration UI can show
	 * @alias Titanium.Geolocation.showCalibration
	 * @property {Boolean}
	 */
	showCalibration: false,
	/**
	 * Get the returns true if the calibration UI can show
	 * @alias Titanium.Geolocation.getShowCalibration
	 * @return {Boolean}
	 */
	getShowCalibration: function () { return showCalibration; },
	/**
	 * Set the returns true if the calibration UI can show
	 * @param {Boolean} value New value to set.
	 * @alias Titanium.Geolocation.setShowCalibration
	 */
	setShowCalibration: function () { },
	/**
	 * add an event listener for the instance to receive view triggered events
	 * @param {String} name name of the event
	 * @param {Function} callback callback function to invoke when the event is fired
	 * @alias Titanium.Geolocation.addEventListener
	 */
	addEventListener: function (name,callback) { },
	/**
	 * fire a synthesized event to the views listener
	 * @param {String} name name of the event
	 * @param {Object} event event object
	 * @alias Titanium.Geolocation.fireEvent
	 */
	fireEvent: function (name,event) { },
	/**
	 * remove a previously added event listener
	 * @param {String} name name of the event
	 * @param {Function} callback callback function passed in addEventListener
	 * @alias Titanium.Geolocation.removeEventListener
	 */
	removeEventListener: function (name,callback) { },
	/**
	 * configure the calibration UI. set the false to disable the calibration display.
	 * @alias Titanium.Geolocation.setShowCalibration
	 */
	setShowCalibration: function () { },
};

/**
 * The top level Gestures module.  The Gesture module is responsible for high level device gestures that are device-wide.
 * @since 0.8
 */
Titanium.Gesture = {
	/**
	 * add an event listener for the instance to receive view triggered events
	 * @param {String} name name of the event
	 * @param {Function} callback callback function to invoke when the event is fired
	 * @alias Titanium.Gesture.addEventListener
	 */
	addEventListener: function (name,callback) { },
	/**
	 * fire a synthesized event to the views listener
	 * @param {String} name name of the event
	 * @param {Object} event event object
	 * @alias Titanium.Gesture.fireEvent
	 */
	fireEvent: function (name,event) { },
	/**
	 * remove a previously added event listener
	 * @param {String} name name of the event
	 * @param {Function} callback callback function passed in addEventListener
	 * @alias Titanium.Gesture.removeEventListener
	 */
	removeEventListener: function (name,callback) { },
};

/**
 * The top level Locale module.  The Locale module works with localization files to which are generated during compilation into the operating system specific localization formats. The Locale module provides locale-specific strings which can be referenced at runtime.  Additionally, the module contains a few methods and properties for querying device locale information.
 * @since 1.5
 */
Titanium.Locale = {
	/**
	 * return the current (default) ISO 2-letter country code for the device.
	 * @alias Titanium.Locale.currentCountry
	 * @property {String}
	 */
	currentCountry: '',
	/**
	 * Get the return the current (default) ISO 2-letter country code for the device.
	 * @alias Titanium.Locale.getCurrentCountry
	 * @return {String}
	 */
	getCurrentCountry: function () { return currentCountry; },
	/**
	 * Set the return the current (default) ISO 2-letter country code for the device.
	 * @param {String} value New value to set.
	 * @alias Titanium.Locale.setCurrentCountry
	 */
	setCurrentCountry: function () { },
	/**
	 * return the current language for the device based on the user's settings (readonly)
	 * @alias Titanium.Locale.currentLanguage
	 * @property {String}
	 */
	currentLanguage: '',
	/**
	 * Get the return the current language for the device based on the user's settings (readonly)
	 * @alias Titanium.Locale.getCurrentLanguage
	 * @return {String}
	 */
	getCurrentLanguage: function () { return currentLanguage; },
	/**
	 * Set the return the current language for the device based on the user's settings (readonly)
	 * @param {String} value New value to set.
	 * @alias Titanium.Locale.setCurrentLanguage
	 */
	setCurrentLanguage: function () { },
	/**
	 * return the current locale string for the device based on the user's settings (e.g., en-US).  (readonly) (Android only)
	 * @alias Titanium.Locale.currentLocale
	 * @property {String}
	 */
	currentLocale: '',
	/**
	 * Get the return the current locale string for the device based on the user's settings (e.g., en-US).  (readonly) (Android only)
	 * @alias Titanium.Locale.getCurrentLocale
	 * @return {String}
	 */
	getCurrentLocale: function () { return currentLocale; },
	/**
	 * Set the return the current locale string for the device based on the user's settings (e.g., en-US).  (readonly) (Android only)
	 * @param {String} value New value to set.
	 * @alias Titanium.Locale.setCurrentLocale
	 */
	setCurrentLocale: function () { },
	/**
	 * add an event listener for the instance to receive view triggered events
	 * @param {String} name name of the event
	 * @param {Function} callback callback function to invoke when the event is fired
	 * @alias Titanium.Locale.addEventListener
	 */
	addEventListener: function (name,callback) { },
	/**
	 * fire a synthesized event to the views listener
	 * @param {String} name name of the event
	 * @param {Object} event event object
	 * @alias Titanium.Locale.fireEvent
	 */
	fireEvent: function (name,event) { },
	/**
	 * format a telephone number according to the current locale.
	 * @param {String} number the phone number to format
	 * @alias Titanium.Locale.formatTelephoneNumber
	 * @return {String}
	 */
	formatTelephoneNumber: function (number) { return ''; },
	/**
	 * return a currency code for a given locale. (Android only)
	 * @param {String} locale the locale for which you want to the currency code, e.g. getCurrencyCode('en-US') -> 'USD'
	 * @alias Titanium.Locale.getCurrencyCode
	 * @return {String}
	 */
	getCurrencyCode: function (locale) { return ''; },
	/**
	 * return a currency symbol for the given currency code. (Android only)
	 * @param {String} currencyCode the currency for which you want the symbol, e.g. getCurrencySymbol('USD') -> '$'
	 * @alias Titanium.Locale.getCurrencySymbol
	 * @return {String}
	 */
	getCurrencySymbol: function (currencyCode) { return ''; },
	/**
	 * return a currency symbol for the given locale. (Android only)
	 * @param {String} locale the locale whose currency symbol you want, e.g. getLocaleCurrencySymbol('en-US') -> '$'
	 * @alias Titanium.Locale.getLocaleCurrencySymbol
	 * @return {String}
	 */
	getLocaleCurrencySymbol: function (locale) { return ''; },
	/**
	 * return a localization string
	 * @param {String} key the key to use when mapping into the localization file
	 * @param {String} hint the text to use if no key found in the localization file
	 * @alias Titanium.Locale.getString
	 * @return {String}
	 */
	getString: function (key,hint) { return ''; },
	/**
	 * remove a previously added event listener
	 * @param {String} name name of the event
	 * @param {Function} callback callback function passed in addEventListener
	 * @alias Titanium.Locale.removeEventListener
	 */
	removeEventListener: function (name,callback) { },
};

/**
 * The top level Map module.  The Map module is used for creating in-application native maps.
 * @since 0.8
 */
Titanium.Map = {
	/**
	 * Displays a satellite image of the area with road and road name information layered on top.
	 * @alias Titanium.Map.HYBRID_TYPE
	 * @property {Integer}
	 */
	HYBRID_TYPE: 0,
	/**
	 * Displays satellite imagery of the area.
	 * @alias Titanium.Map.SATELLITE_TYPE
	 * @property {Integer}
	 */
	SATELLITE_TYPE: 0,
	/**
	 * Displays a street map that shows the position of all roads and some road names.
	 * @alias Titanium.Map.STANDARD_TYPE
	 * @property {Integer}
	 */
	STANDARD_TYPE: 0,
	/**
	 * add an event listener for the instance to receive view triggered events
	 * @param {String} name name of the event
	 * @param {Function} callback callback function to invoke when the event is fired
	 * @alias Titanium.Map.addEventListener
	 */
	addEventListener: function (name,callback) { },
	/**
	 * create and return an instance of Titanium.Map.Annotation
	 * @param {Object} [parameters] (optional) a dictionary object properties defined in <a href="Titanium.Map.Annotation.html">Titanium.Map.Annotation</a>
	 * @alias Titanium.Map.createAnnotation
	 * @return {Titanium_Map_Annotation}
	 */
	createAnnotation: function (parameters) { return new Titanium_Map_Annotation(); },
	/**
	 * create and return an instance of Titanium.Map.MapView
	 * @param {Object} [parameters] (optional) a dictionary object properties defined in <a href="Titanium.Map.MapView.html">Titanium.Map.MapView</a>
	 * @alias Titanium.Map.createMapView
	 * @return {Titanium_Map_MapView}
	 */
	createMapView: function (parameters) { return new Titanium_Map_MapView(); },
	/**
	 * fire a synthesized event to the views listener
	 * @param {String} name name of the event
	 * @param {Object} event event object
	 * @alias Titanium.Map.fireEvent
	 */
	fireEvent: function (name,event) { },
	/**
	 * remove a previously added event listener
	 * @param {String} name name of the event
	 * @param {Function} callback callback function passed in addEventListener
	 * @alias Titanium.Map.removeEventListener
	 */
	removeEventListener: function (name,callback) { },
};

/**
 * An Annotation object that is created by the method Titanium.Map.createAnnotation. This object gives you low level control over annotations that can be added to a Map View.
 * @since 0.9
 */
Titanium.Map.Annotation = {
	/**
	 * boolean to indicate whether the pin should animate when dropped
	 * @alias Titanium.Map.Annotation.animate
	 * @property {Boolean}
	 */
	animate: false,
	/**
	 * Get the boolean to indicate whether the pin should animate when dropped
	 * @alias Titanium.Map.Annotation.getAnimate
	 * @return {Boolean}
	 */
	getAnimate: function () { return animate; },
	/**
	 * Set the boolean to indicate whether the pin should animate when dropped
	 * @param {Boolean} value New value to set.
	 * @alias Titanium.Map.Annotation.setAnimate
	 */
	setAnimate: function () { },
	/**
	 * image view for the pin instead of default image.  currently only supported in iphone
	 * @alias Titanium.Map.Annotation.image
	 * @property {String}
	 */
	image: '',
	/**
	 * Get the image view for the pin instead of default image.  currently only supported in iphone
	 * @alias Titanium.Map.Annotation.getImage
	 * @return {String}
	 */
	getImage: function () { return image; },
	/**
	 * Set the image view for the pin instead of default image.  currently only supported in iphone
	 * @param {String} value New value to set.
	 * @alias Titanium.Map.Annotation.setImage
	 */
	setImage: function () { },
	/**
	 * the left button image on the annotation. must either be a button type constant or url
	 * @alias Titanium.Map.Annotation.leftButton
	 * @property {Integer,String}
	 */
	leftButton: 0,
	/**
	 * Get the the left button image on the annotation. must either be a button type constant or url
	 * @alias Titanium.Map.Annotation.getLeftButton
	 * @return {Integer,String}
	 */
	getLeftButton: function () { return leftButton; },
	/**
	 * Set the the left button image on the annotation. must either be a button type constant or url
	 * @param {Integer,String} value New value to set.
	 * @alias Titanium.Map.Annotation.setLeftButton
	 */
	setLeftButton: function () { },
	/**
	 * a left view that is displayed on the annotation
	 * @alias Titanium.Map.Annotation.leftView
	 * @property {Object}
	 */
	leftView: {},
	/**
	 * Get the a left view that is displayed on the annotation
	 * @alias Titanium.Map.Annotation.getLeftView
	 * @return {Object}
	 */
	getLeftView: function () { return leftView; },
	/**
	 * Set the a left view that is displayed on the annotation
	 * @param {Object} value New value to set.
	 * @alias Titanium.Map.Annotation.setLeftView
	 */
	setLeftView: function () { },
	/**
	 * the pin color as one of Titanium.Map.ANNOTATION_RED, Titanium.Map.ANNOTATION_GREEN or Titanium.Map.ANNOTATION_PURPLE.
	 * @alias Titanium.Map.Annotation.pincolor
	 * @property {Integer}
	 */
	pincolor: 0,
	/**
	 * Get the the pin color as one of Titanium.Map.ANNOTATION_RED, Titanium.Map.ANNOTATION_GREEN or Titanium.Map.ANNOTATION_PURPLE.
	 * @alias Titanium.Map.Annotation.getPincolor
	 * @return {Integer}
	 */
	getPincolor: function () { return pincolor; },
	/**
	 * Set the the pin color as one of Titanium.Map.ANNOTATION_RED, Titanium.Map.ANNOTATION_GREEN or Titanium.Map.ANNOTATION_PURPLE.
	 * @param {Integer} value New value to set.
	 * @alias Titanium.Map.Annotation.setPincolor
	 */
	setPincolor: function () { },
	/**
	 * the right button image on the annotation. must either be a button type constant or url
	 * @alias Titanium.Map.Annotation.rightButton
	 * @property {Integer,String}
	 */
	rightButton: 0,
	/**
	 * Get the the right button image on the annotation. must either be a button type constant or url
	 * @alias Titanium.Map.Annotation.getRightButton
	 * @return {Integer,String}
	 */
	getRightButton: function () { return rightButton; },
	/**
	 * Set the the right button image on the annotation. must either be a button type constant or url
	 * @param {Integer,String} value New value to set.
	 * @alias Titanium.Map.Annotation.setRightButton
	 */
	setRightButton: function () { },
	/**
	 * a right view that is displayed on the annotation
	 * @alias Titanium.Map.Annotation.rightView
	 * @property {Object}
	 */
	rightView: {},
	/**
	 * Get the a right view that is displayed on the annotation
	 * @alias Titanium.Map.Annotation.getRightView
	 * @return {Object}
	 */
	getRightView: function () { return rightView; },
	/**
	 * Set the a right view that is displayed on the annotation
	 * @param {Object} value New value to set.
	 * @alias Titanium.Map.Annotation.setRightView
	 */
	setRightView: function () { },
	/**
	 * the secondary title of the annotation view
	 * @alias Titanium.Map.Annotation.subtitle
	 * @property {String}
	 */
	subtitle: '',
	/**
	 * Get the the secondary title of the annotation view
	 * @alias Titanium.Map.Annotation.getSubtitle
	 * @return {String}
	 */
	getSubtitle: function () { return subtitle; },
	/**
	 * Set the the secondary title of the annotation view
	 * @param {String} value New value to set.
	 * @alias Titanium.Map.Annotation.setSubtitle
	 */
	setSubtitle: function () { },
	/**
	 * the key in the locale file to use for the subtitle property
	 * @alias Titanium.Map.Annotation.subtitleid
	 * @property {String}
	 */
	subtitleid: '',
	/**
	 * Get the the key in the locale file to use for the subtitle property
	 * @alias Titanium.Map.Annotation.getSubtitleid
	 * @return {String}
	 */
	getSubtitleid: function () { return subtitleid; },
	/**
	 * Set the the key in the locale file to use for the subtitle property
	 * @param {String} value New value to set.
	 * @alias Titanium.Map.Annotation.setSubtitleid
	 */
	setSubtitleid: function () { },
	/**
	 * the primary title of the annotation view
	 * @alias Titanium.Map.Annotation.title
	 * @property {String}
	 */
	title: '',
	/**
	 * Get the the primary title of the annotation view
	 * @alias Titanium.Map.Annotation.getTitle
	 * @return {String}
	 */
	getTitle: function () { return title; },
	/**
	 * Set the the primary title of the annotation view
	 * @param {String} value New value to set.
	 * @alias Titanium.Map.Annotation.setTitle
	 */
	setTitle: function () { },
	/**
	 * the key in the locale file to use for the title property
	 * @alias Titanium.Map.Annotation.titleid
	 * @property {String}
	 */
	titleid: '',
	/**
	 * Get the the key in the locale file to use for the title property
	 * @alias Titanium.Map.Annotation.getTitleid
	 * @return {String}
	 */
	getTitleid: function () { return titleid; },
	/**
	 * Set the the key in the locale file to use for the title property
	 * @param {String} value New value to set.
	 * @alias Titanium.Map.Annotation.setTitleid
	 */
	setTitleid: function () { },
	/**
	 * add an event listener for the instance to receive view triggered events
	 * @param {String} name name of the event
	 * @param {Function} callback callback function to invoke when the event is fired
	 * @alias Titanium.Map.Annotation.addEventListener
	 */
	addEventListener: function (name,callback) { },
	/**
	 * fire a synthesized event to the views listener
	 * @param {String} name name of the event
	 * @param {Object} event event object
	 * @alias Titanium.Map.Annotation.fireEvent
	 */
	fireEvent: function (name,event) { },
	/**
	 * remove a previously added event listener
	 * @param {String} name name of the event
	 * @param {Function} callback callback function passed in addEventListener
	 * @alias Titanium.Map.Annotation.removeEventListener
	 */
	removeEventListener: function (name,callback) { },
};

/**
 * The MapView is an object created by Titanium.Map.createView and is used for embedding native mapping capabilities as a view in your application.  With native maps, you can control the mapping location, the type of map, the zoom level and you can add custom annotations directly to the map.
 * @since 0.8
 */
Titanium.Map.MapView = {
	/**
	 * a dictionary with properties x and y to indicate the anchor point value. anchor specifies the position by which animation should occur. center is 0.5, 0.5
	 * @alias Titanium.Map.MapView.anchorPoint
	 * @property {Object}
	 */
	anchorPoint: {},
	/**
	 * Get the a dictionary with properties x and y to indicate the anchor point value. anchor specifies the position by which animation should occur. center is 0.5, 0.5
	 * @alias Titanium.Map.MapView.getAnchorPoint
	 * @return {Object}
	 */
	getAnchorPoint: function () { return anchorPoint; },
	/**
	 * Set the a dictionary with properties x and y to indicate the anchor point value. anchor specifies the position by which animation should occur. center is 0.5, 0.5
	 * @param {Object} value New value to set.
	 * @alias Titanium.Map.MapView.setAnchorPoint
	 */
	setAnchorPoint: function () { },
	/**
	 * boolean is mapping actions should be animated
	 * @alias Titanium.Map.MapView.animate
	 * @property {Boolean}
	 */
	animate: false,
	/**
	 * Get the boolean is mapping actions should be animated
	 * @alias Titanium.Map.MapView.getAnimate
	 * @return {Boolean}
	 */
	getAnimate: function () { return animate; },
	/**
	 * Set the boolean is mapping actions should be animated
	 * @param {Boolean} value New value to set.
	 * @alias Titanium.Map.MapView.setAnimate
	 */
	setAnimate: function () { },
	/**
	 * read-only object with x and y properties of where the view is during animation
	 * @alias Titanium.Map.MapView.animatedCenterPoint
	 * @property {Object}
	 */
	animatedCenterPoint: {},
	/**
	 * Get the read-only object with x and y properties of where the view is during animation
	 * @alias Titanium.Map.MapView.getAnimatedCenterPoint
	 * @return {Object}
	 */
	getAnimatedCenterPoint: function () { return animatedCenterPoint; },
	/**
	 * Set the read-only object with x and y properties of where the view is during animation
	 * @param {Object} value New value to set.
	 * @alias Titanium.Map.MapView.setAnimatedCenterPoint
	 */
	setAnimatedCenterPoint: function () { },
	/**
	 * an array of annotations to add to the map
	 * @alias Titanium.Map.MapView.annotations
	 * @property {Array}
	 */
	annotations: [],
	/**
	 * Get the an array of annotations to add to the map
	 * @alias Titanium.Map.MapView.getAnnotations
	 * @return {Array}
	 */
	getAnnotations: function () { return annotations; },
	/**
	 * Set the an array of annotations to add to the map
	 * @param {Array} value New value to set.
	 * @alias Titanium.Map.MapView.setAnnotations
	 */
	setAnnotations: function () { },
	/**
	 * the background color of the view
	 * @alias Titanium.Map.MapView.backgroundColor
	 * @property {String}
	 */
	backgroundColor: '',
	/**
	 * Get the the background color of the view
	 * @alias Titanium.Map.MapView.getBackgroundColor
	 * @return {String}
	 */
	getBackgroundColor: function () { return backgroundColor; },
	/**
	 * Set the the background color of the view
	 * @param {String} value New value to set.
	 * @alias Titanium.Map.MapView.setBackgroundColor
	 */
	setBackgroundColor: function () { },
	/**
	 * the disabled background color of the view. (Android)
	 * @alias Titanium.Map.MapView.backgroundDisabledColor
	 * @property {String}
	 */
	backgroundDisabledColor: '',
	/**
	 * Get the the disabled background color of the view. (Android)
	 * @alias Titanium.Map.MapView.getBackgroundDisabledColor
	 * @return {String}
	 */
	getBackgroundDisabledColor: function () { return backgroundDisabledColor; },
	/**
	 * Set the the disabled background color of the view. (Android)
	 * @param {String} value New value to set.
	 * @alias Titanium.Map.MapView.setBackgroundDisabledColor
	 */
	setBackgroundDisabledColor: function () { },
	/**
	 * the disabled background image url of the view. (Android)
	 * @alias Titanium.Map.MapView.backgroundDisabledImage
	 * @property {String}
	 */
	backgroundDisabledImage: '',
	/**
	 * Get the the disabled background image url of the view. (Android)
	 * @alias Titanium.Map.MapView.getBackgroundDisabledImage
	 * @return {String}
	 */
	getBackgroundDisabledImage: function () { return backgroundDisabledImage; },
	/**
	 * Set the the disabled background image url of the view. (Android)
	 * @param {String} value New value to set.
	 * @alias Titanium.Map.MapView.setBackgroundDisabledImage
	 */
	setBackgroundDisabledImage: function () { },
	/**
	 * the focused background color of the view. focusable must be true for normal views. (Android)
	 * @alias Titanium.Map.MapView.backgroundFocusedColor
	 * @property {String}
	 */
	backgroundFocusedColor: '',
	/**
	 * Get the the focused background color of the view. focusable must be true for normal views. (Android)
	 * @alias Titanium.Map.MapView.getBackgroundFocusedColor
	 * @return {String}
	 */
	getBackgroundFocusedColor: function () { return backgroundFocusedColor; },
	/**
	 * Set the the focused background color of the view. focusable must be true for normal views. (Android)
	 * @param {String} value New value to set.
	 * @alias Titanium.Map.MapView.setBackgroundFocusedColor
	 */
	setBackgroundFocusedColor: function () { },
	/**
	 * the focused background image url of the view. focusable must be true for normal views. (Android)
	 * @alias Titanium.Map.MapView.backgroundFocusedImage
	 * @property {String}
	 */
	backgroundFocusedImage: '',
	/**
	 * Get the the focused background image url of the view. focusable must be true for normal views. (Android)
	 * @alias Titanium.Map.MapView.getBackgroundFocusedImage
	 * @return {String}
	 */
	getBackgroundFocusedImage: function () { return backgroundFocusedImage; },
	/**
	 * Set the the focused background image url of the view. focusable must be true for normal views. (Android)
	 * @param {String} value New value to set.
	 * @alias Titanium.Map.MapView.setBackgroundFocusedImage
	 */
	setBackgroundFocusedImage: function () { },
	/**
	 * a background gradient for the view with the properties: type,startPoint,endPoint,startRadius,endRadius,backfillStart,backfillEnd,colors.
	 * @alias Titanium.Map.MapView.backgroundGradient
	 * @property {Object}
	 */
	backgroundGradient: {},
	/**
	 * Get the a background gradient for the view with the properties: type,startPoint,endPoint,startRadius,endRadius,backfillStart,backfillEnd,colors.
	 * @alias Titanium.Map.MapView.getBackgroundGradient
	 * @return {Object}
	 */
	getBackgroundGradient: function () { return backgroundGradient; },
	/**
	 * Set the a background gradient for the view with the properties: type,startPoint,endPoint,startRadius,endRadius,backfillStart,backfillEnd,colors.
	 * @param {Object} value New value to set.
	 * @alias Titanium.Map.MapView.setBackgroundGradient
	 */
	setBackgroundGradient: function () { },
	/**
	 * the background image url of the view
	 * @alias Titanium.Map.MapView.backgroundImage
	 * @property {String}
	 */
	backgroundImage: '',
	/**
	 * Get the the background image url of the view
	 * @alias Titanium.Map.MapView.getBackgroundImage
	 * @return {String}
	 */
	getBackgroundImage: function () { return backgroundImage; },
	/**
	 * Set the the background image url of the view
	 * @param {String} value New value to set.
	 * @alias Titanium.Map.MapView.setBackgroundImage
	 */
	setBackgroundImage: function () { },
	/**
	 * End caps specify the portion of an image that should not be resized when an image is stretched. This technique is used to implement buttons and other resizable image-based interface elements. When a button with end caps is resized, the resizing occurs only in the middle of the button, in the region between the end caps. The end caps themselves keep their original size and appearance. This property specifies the size of the left end cap. The middle (stretchable) portion is assumed to be 1 pixel wide. The right end cap is therefore computed by adding the size of the left end cap and the middle portion together and then subtracting that value from the width of the image
	 * @alias Titanium.Map.MapView.backgroundLeftCap
	 * @property {Float}
	 */
	backgroundLeftCap: 0.0,
	/**
	 * Get the End caps specify the portion of an image that should not be resized when an image is stretched. This technique is used to implement buttons and other resizable image-based interface elements. When a button with end caps is resized, the resizing occurs only in the middle of the button, in the region between the end caps. The end caps themselves keep their original size and appearance. This property specifies the size of the left end cap. The middle (stretchable) portion is assumed to be 1 pixel wide. The right end cap is therefore computed by adding the size of the left end cap and the middle portion together and then subtracting that value from the width of the image
	 * @alias Titanium.Map.MapView.getBackgroundLeftCap
	 * @return {Float}
	 */
	getBackgroundLeftCap: function () { return backgroundLeftCap; },
	/**
	 * Set the End caps specify the portion of an image that should not be resized when an image is stretched. This technique is used to implement buttons and other resizable image-based interface elements. When a button with end caps is resized, the resizing occurs only in the middle of the button, in the region between the end caps. The end caps themselves keep their original size and appearance. This property specifies the size of the left end cap. The middle (stretchable) portion is assumed to be 1 pixel wide. The right end cap is therefore computed by adding the size of the left end cap and the middle portion together and then subtracting that value from the width of the image
	 * @param {Float} value New value to set.
	 * @alias Titanium.Map.MapView.setBackgroundLeftCap
	 */
	setBackgroundLeftCap: function () { },
	/**
	 * the selected background color of the view. focusable must be true for normal views. (Android)
	 * @alias Titanium.Map.MapView.backgroundSelectedColor
	 * @property {String}
	 */
	backgroundSelectedColor: '',
	/**
	 * Get the the selected background color of the view. focusable must be true for normal views. (Android)
	 * @alias Titanium.Map.MapView.getBackgroundSelectedColor
	 * @return {String}
	 */
	getBackgroundSelectedColor: function () { return backgroundSelectedColor; },
	/**
	 * Set the the selected background color of the view. focusable must be true for normal views. (Android)
	 * @param {String} value New value to set.
	 * @alias Titanium.Map.MapView.setBackgroundSelectedColor
	 */
	setBackgroundSelectedColor: function () { },
	/**
	 * the selected background image url of the view. focusable must be true for normal views. (Android)
	 * @alias Titanium.Map.MapView.backgroundSelectedImage
	 * @property {String}
	 */
	backgroundSelectedImage: '',
	/**
	 * Get the the selected background image url of the view. focusable must be true for normal views. (Android)
	 * @alias Titanium.Map.MapView.getBackgroundSelectedImage
	 * @return {String}
	 */
	getBackgroundSelectedImage: function () { return backgroundSelectedImage; },
	/**
	 * Set the the selected background image url of the view. focusable must be true for normal views. (Android)
	 * @param {String} value New value to set.
	 * @alias Titanium.Map.MapView.setBackgroundSelectedImage
	 */
	setBackgroundSelectedImage: function () { },
	/**
	 * End caps specify the portion of an image that should not be resized when an image is stretched. This technique is used to implement buttons and other resizable image-based interface elements. When a button with end caps is resized, the resizing occurs only in the middle of the button, in the region between the end caps. The end caps themselves keep their original size and appearance. This property specifies the size of the top end cap. The middle (stretchable) portion is assumed to be 1 pixel wide. The bottom end cap is therefore computed by adding the size of the top end cap and the middle portion together and then subtracting that value from the height of the image
	 * @alias Titanium.Map.MapView.backgroundTopCap
	 * @property {Float}
	 */
	backgroundTopCap: 0.0,
	/**
	 * Get the End caps specify the portion of an image that should not be resized when an image is stretched. This technique is used to implement buttons and other resizable image-based interface elements. When a button with end caps is resized, the resizing occurs only in the middle of the button, in the region between the end caps. The end caps themselves keep their original size and appearance. This property specifies the size of the top end cap. The middle (stretchable) portion is assumed to be 1 pixel wide. The bottom end cap is therefore computed by adding the size of the top end cap and the middle portion together and then subtracting that value from the height of the image
	 * @alias Titanium.Map.MapView.getBackgroundTopCap
	 * @return {Float}
	 */
	getBackgroundTopCap: function () { return backgroundTopCap; },
	/**
	 * Set the End caps specify the portion of an image that should not be resized when an image is stretched. This technique is used to implement buttons and other resizable image-based interface elements. When a button with end caps is resized, the resizing occurs only in the middle of the button, in the region between the end caps. The end caps themselves keep their original size and appearance. This property specifies the size of the top end cap. The middle (stretchable) portion is assumed to be 1 pixel wide. The bottom end cap is therefore computed by adding the size of the top end cap and the middle portion together and then subtracting that value from the height of the image
	 * @param {Float} value New value to set.
	 * @alias Titanium.Map.MapView.setBackgroundTopCap
	 */
	setBackgroundTopCap: function () { },
	/**
	 * the border color of the view
	 * @alias Titanium.Map.MapView.borderColor
	 * @property {String}
	 */
	borderColor: '',
	/**
	 * Get the the border color of the view
	 * @alias Titanium.Map.MapView.getBorderColor
	 * @return {String}
	 */
	getBorderColor: function () { return borderColor; },
	/**
	 * Set the the border color of the view
	 * @param {String} value New value to set.
	 * @alias Titanium.Map.MapView.setBorderColor
	 */
	setBorderColor: function () { },
	/**
	 * the border radius of the view
	 * @alias Titanium.Map.MapView.borderRadius
	 * @property {Float}
	 */
	borderRadius: 0.0,
	/**
	 * Get the the border radius of the view
	 * @alias Titanium.Map.MapView.getBorderRadius
	 * @return {Float}
	 */
	getBorderRadius: function () { return borderRadius; },
	/**
	 * Set the the border radius of the view
	 * @param {Float} value New value to set.
	 * @alias Titanium.Map.MapView.setBorderRadius
	 */
	setBorderRadius: function () { },
	/**
	 * the border width of the view
	 * @alias Titanium.Map.MapView.borderWidth
	 * @property {Float}
	 */
	borderWidth: 0.0,
	/**
	 * Get the the border width of the view
	 * @alias Titanium.Map.MapView.getBorderWidth
	 * @return {Float}
	 */
	getBorderWidth: function () { return borderWidth; },
	/**
	 * Set the the border width of the view
	 * @param {Float} value New value to set.
	 * @alias Titanium.Map.MapView.setBorderWidth
	 */
	setBorderWidth: function () { },
	/**
	 * property for the view bottom position. This position is relative to the view's parent. Can be either a float value or a dimension string ie 'auto' (default), '50%' (iPhone only).
	 * @alias Titanium.Map.MapView.bottom
	 * @property {Float,String}
	 */
	bottom: 0.0,
	/**
	 * Get the property for the view bottom position. This position is relative to the view's parent. Can be either a float value or a dimension string ie 'auto' (default), '50%' (iPhone only).
	 * @alias Titanium.Map.MapView.getBottom
	 * @return {Float,String}
	 */
	getBottom: function () { return bottom; },
	/**
	 * Set the property for the view bottom position. This position is relative to the view's parent. Can be either a float value or a dimension string ie 'auto' (default), '50%' (iPhone only).
	 * @param {Float,String} value New value to set.
	 * @alias Titanium.Map.MapView.setBottom
	 */
	setBottom: function () { },
	/**
	 * a dictionary with properties x and y to indicate the center of the views position relative to the parent view
	 * @alias Titanium.Map.MapView.center
	 * @property {Object}
	 */
	center: {},
	/**
	 * Get the a dictionary with properties x and y to indicate the center of the views position relative to the parent view
	 * @alias Titanium.Map.MapView.getCenter
	 * @return {Object}
	 */
	getCenter: function () { return center; },
	/**
	 * Set the a dictionary with properties x and y to indicate the center of the views position relative to the parent view
	 * @param {Object} value New value to set.
	 * @alias Titanium.Map.MapView.setCenter
	 */
	setCenter: function () { },
	/**
	 * Set true if you want a view to be focusable when navigating with the trackball or D-Pad. Default: false. (Android Only)
	 * @alias Titanium.Map.MapView.focusable
	 * @property {Boolean}
	 */
	focusable: false,
	/**
	 * Get the Set true if you want a view to be focusable when navigating with the trackball or D-Pad. Default: false. (Android Only)
	 * @alias Titanium.Map.MapView.getFocusable
	 * @return {Boolean}
	 */
	getFocusable: function () { return focusable; },
	/**
	 * Set the Set true if you want a view to be focusable when navigating with the trackball or D-Pad. Default: false. (Android Only)
	 * @param {Boolean} value New value to set.
	 * @alias Titanium.Map.MapView.setFocusable
	 */
	setFocusable: function () { },
	/**
	 * the font family
	 * @alias Titanium.Map.MapView.font-family
	 * @property {String}
	 */
	font-family: '',
	/**
	 * Get the the font family
	 * @alias Titanium.Map.MapView.getFont-family
	 * @return {String}
	 */
	getFont-family: function () { return font-family; },
	/**
	 * Set the the font family
	 * @param {String} value New value to set.
	 * @alias Titanium.Map.MapView.setFont-family
	 */
	setFont-family: function () { },
	/**
	 * the font size
	 * @alias Titanium.Map.MapView.font-size
	 * @property {String}
	 */
	font-size: '',
	/**
	 * Get the the font size
	 * @alias Titanium.Map.MapView.getFont-size
	 * @return {String}
	 */
	getFont-size: function () { return font-size; },
	/**
	 * Set the the font size
	 * @param {String} value New value to set.
	 * @alias Titanium.Map.MapView.setFont-size
	 */
	setFont-size: function () { },
	/**
	 * the font style, either normal or italics
	 * @alias Titanium.Map.MapView.font-style
	 * @property {String}
	 */
	font-style: '',
	/**
	 * Get the the font style, either normal or italics
	 * @alias Titanium.Map.MapView.getFont-style
	 * @return {String}
	 */
	getFont-style: function () { return font-style; },
	/**
	 * Set the the font style, either normal or italics
	 * @param {String} value New value to set.
	 * @alias Titanium.Map.MapView.setFont-style
	 */
	setFont-style: function () { },
	/**
	 * the font weight, either normal or bold
	 * @alias Titanium.Map.MapView.font-weight
	 * @property {String}
	 */
	font-weight: '',
	/**
	 * Get the the font weight, either normal or bold
	 * @alias Titanium.Map.MapView.getFont-weight
	 * @return {String}
	 */
	getFont-weight: function () { return font-weight; },
	/**
	 * Set the the font weight, either normal or bold
	 * @param {String} value New value to set.
	 * @alias Titanium.Map.MapView.setFont-weight
	 */
	setFont-weight: function () { },
	/**
	 * property for the view height. Can be either a float value or a dimension string ie 'auto' (default), '50%' (iPhone only).
	 * @alias Titanium.Map.MapView.height
	 * @property {Float,String}
	 */
	height: 0.0,
	/**
	 * Get the property for the view height. Can be either a float value or a dimension string ie 'auto' (default), '50%' (iPhone only).
	 * @alias Titanium.Map.MapView.getHeight
	 * @return {Float,String}
	 */
	getHeight: function () { return height; },
	/**
	 * Set the property for the view height. Can be either a float value or a dimension string ie 'auto' (default), '50%' (iPhone only).
	 * @param {Float,String} value New value to set.
	 * @alias Titanium.Map.MapView.setHeight
	 */
	setHeight: function () { },
	/**
	 * property for the view left position. This position is relative to the view's parent. Can be either a float value or a dimension string ie 'auto' (default), '50%' (iPhone only).
	 * @alias Titanium.Map.MapView.left
	 * @property {Float,String}
	 */
	left: 0.0,
	/**
	 * Get the property for the view left position. This position is relative to the view's parent. Can be either a float value or a dimension string ie 'auto' (default), '50%' (iPhone only).
	 * @alias Titanium.Map.MapView.getLeft
	 * @return {Float,String}
	 */
	getLeft: function () { return left; },
	/**
	 * Set the property for the view left position. This position is relative to the view's parent. Can be either a float value or a dimension string ie 'auto' (default), '50%' (iPhone only).
	 * @param {Float,String} value New value to set.
	 * @alias Titanium.Map.MapView.setLeft
	 */
	setLeft: function () { },
	/**
	 * a dictionary that specifies the following properties specifying the region location to set the map: latitudeDelta, longitudeDelta, latitude, longitude.
	 * @alias Titanium.Map.MapView.location
	 * @property {Object}
	 */
	location: {},
	/**
	 * Get the a dictionary that specifies the following properties specifying the region location to set the map: latitudeDelta, longitudeDelta, latitude, longitude.
	 * @alias Titanium.Map.MapView.getLocation
	 * @return {Object}
	 */
	getLocation: function () { return location; },
	/**
	 * Set the a dictionary that specifies the following properties specifying the region location to set the map: latitudeDelta, longitudeDelta, latitude, longitude.
	 * @param {Object} value New value to set.
	 * @alias Titanium.Map.MapView.setLocation
	 */
	setLocation: function () { },
	/**
	 * the map type constant of either Titanium.Map.STANDARD_TYPE, Titanium.Map.SATELLITE_TYPE or Titanium.Map.HYBRID_TYPE.
	 * @alias Titanium.Map.MapView.mapType
	 * @property {Integer}
	 */
	mapType: 0,
	/**
	 * Get the the map type constant of either Titanium.Map.STANDARD_TYPE, Titanium.Map.SATELLITE_TYPE or Titanium.Map.HYBRID_TYPE.
	 * @alias Titanium.Map.MapView.getMapType
	 * @return {Integer}
	 */
	getMapType: function () { return mapType; },
	/**
	 * Set the the map type constant of either Titanium.Map.STANDARD_TYPE, Titanium.Map.SATELLITE_TYPE or Titanium.Map.HYBRID_TYPE.
	 * @param {Integer} value New value to set.
	 * @alias Titanium.Map.MapView.setMapType
	 */
	setMapType: function () { },
	/**
	 * the opacity from 0.0-1.0
	 * @alias Titanium.Map.MapView.opacity
	 * @property {Float}
	 */
	opacity: 0.0,
	/**
	 * Get the the opacity from 0.0-1.0
	 * @alias Titanium.Map.MapView.getOpacity
	 * @return {Float}
	 */
	getOpacity: function () { return opacity; },
	/**
	 * Set the the opacity from 0.0-1.0
	 * @param {Float} value New value to set.
	 * @alias Titanium.Map.MapView.setOpacity
	 */
	setOpacity: function () { },
	/**
	 * a dictionary that specifies the following properties specifying the region location to set the map: latitudeDelta, longitudeDelta, latitude, longitude.
	 * @alias Titanium.Map.MapView.region
	 * @property {Object}
	 */
	region: {},
	/**
	 * Get the a dictionary that specifies the following properties specifying the region location to set the map: latitudeDelta, longitudeDelta, latitude, longitude.
	 * @alias Titanium.Map.MapView.getRegion
	 * @return {Object}
	 */
	getRegion: function () { return region; },
	/**
	 * Set the a dictionary that specifies the following properties specifying the region location to set the map: latitudeDelta, longitudeDelta, latitude, longitude.
	 * @param {Object} value New value to set.
	 * @alias Titanium.Map.MapView.setRegion
	 */
	setRegion: function () { },
	/**
	 * boolean to indicate if the map should attempt to fit the map view into the region in the visible view
	 * @alias Titanium.Map.MapView.regionFit
	 * @property {Boolean}
	 */
	regionFit: false,
	/**
	 * Get the boolean to indicate if the map should attempt to fit the map view into the region in the visible view
	 * @alias Titanium.Map.MapView.getRegionFit
	 * @return {Boolean}
	 */
	getRegionFit: function () { return regionFit; },
	/**
	 * Set the boolean to indicate if the map should attempt to fit the map view into the region in the visible view
	 * @param {Boolean} value New value to set.
	 * @alias Titanium.Map.MapView.setRegionFit
	 */
	setRegionFit: function () { },
	/**
	 * property for the view right position. This position is relative to the view's parent. Can be either a float value or a dimension string ie 'auto' (default), '50%' (iPhone only).
	 * @alias Titanium.Map.MapView.right
	 * @property {Float,String}
	 */
	right: 0.0,
	/**
	 * Get the property for the view right position. This position is relative to the view's parent. Can be either a float value or a dimension string ie 'auto' (default), '50%' (iPhone only).
	 * @alias Titanium.Map.MapView.getRight
	 * @return {Float,String}
	 */
	getRight: function () { return right; },
	/**
	 * Set the property for the view right position. This position is relative to the view's parent. Can be either a float value or a dimension string ie 'auto' (default), '50%' (iPhone only).
	 * @param {Float,String} value New value to set.
	 * @alias Titanium.Map.MapView.setRight
	 */
	setRight: function () { },
	/**
	 * the size of the view as a dictionary of width and height properties
	 * @alias Titanium.Map.MapView.size
	 * @property {Object}
	 */
	size: {},
	/**
	 * Get the the size of the view as a dictionary of width and height properties
	 * @alias Titanium.Map.MapView.getSize
	 * @return {Object}
	 */
	getSize: function () { return size; },
	/**
	 * Set the the size of the view as a dictionary of width and height properties
	 * @param {Object} value New value to set.
	 * @alias Titanium.Map.MapView.setSize
	 */
	setSize: function () { },
	/**
	 * One of Titanium.UI.Android.SOFT_KEYBOARD_DEFAULT_ON_FOCUS, Titanium.UI.Android.SOFT_KEYBOARD_HIDE_ON_FOCUS, or Titanium.UI.Android.SOFT_KEYBOARD_SHOW_ON_FOCUS. (Android only)
	 * @alias Titanium.Map.MapView.softKeyboardOnFocus
	 * @property {Integer}
	 */
	softKeyboardOnFocus: 0,
	/**
	 * Get the One of Titanium.UI.Android.SOFT_KEYBOARD_DEFAULT_ON_FOCUS, Titanium.UI.Android.SOFT_KEYBOARD_HIDE_ON_FOCUS, or Titanium.UI.Android.SOFT_KEYBOARD_SHOW_ON_FOCUS. (Android only)
	 * @alias Titanium.Map.MapView.getSoftKeyboardOnFocus
	 * @return {Integer}
	 */
	getSoftKeyboardOnFocus: function () { return softKeyboardOnFocus; },
	/**
	 * Set the One of Titanium.UI.Android.SOFT_KEYBOARD_DEFAULT_ON_FOCUS, Titanium.UI.Android.SOFT_KEYBOARD_HIDE_ON_FOCUS, or Titanium.UI.Android.SOFT_KEYBOARD_SHOW_ON_FOCUS. (Android only)
	 * @param {Integer} value New value to set.
	 * @alias Titanium.Map.MapView.setSoftKeyboardOnFocus
	 */
	setSoftKeyboardOnFocus: function () { },
	/**
	 * property for the view top position. This position is relative to the view's parent. Can be either a float value or a dimension string ie 'auto' (default), '50%' (iPhone only).
	 * @alias Titanium.Map.MapView.top
	 * @property {Float,String}
	 */
	top: 0.0,
	/**
	 * Get the property for the view top position. This position is relative to the view's parent. Can be either a float value or a dimension string ie 'auto' (default), '50%' (iPhone only).
	 * @alias Titanium.Map.MapView.getTop
	 * @return {Float,String}
	 */
	getTop: function () { return top; },
	/**
	 * Set the property for the view top position. This position is relative to the view's parent. Can be either a float value or a dimension string ie 'auto' (default), '50%' (iPhone only).
	 * @param {Float,String} value New value to set.
	 * @alias Titanium.Map.MapView.setTop
	 */
	setTop: function () { },
	/**
	 * a boolean indicating if the view should receive touch events (true, default) or forward them to peers (false)
	 * @alias Titanium.Map.MapView.touchEnabled
	 * @property {Boolean}
	 */
	touchEnabled: false,
	/**
	 * Get the a boolean indicating if the view should receive touch events (true, default) or forward them to peers (false)
	 * @alias Titanium.Map.MapView.getTouchEnabled
	 * @return {Boolean}
	 */
	getTouchEnabled: function () { return touchEnabled; },
	/**
	 * Set the a boolean indicating if the view should receive touch events (true, default) or forward them to peers (false)
	 * @param {Boolean} value New value to set.
	 * @alias Titanium.Map.MapView.setTouchEnabled
	 */
	setTouchEnabled: function () { },
	/**
	 * the transformation matrix to apply to the view
	 * @alias Titanium.Map.MapView.transform
	 * @property {Object}
	 */
	transform: {},
	/**
	 * Get the the transformation matrix to apply to the view
	 * @alias Titanium.Map.MapView.getTransform
	 * @return {Object}
	 */
	getTransform: function () { return transform; },
	/**
	 * Set the the transformation matrix to apply to the view
	 * @param {Object} value New value to set.
	 * @alias Titanium.Map.MapView.setTransform
	 */
	setTransform: function () { },
	/**
	 * boolean to indicate if the map should show the user's current device location as a pin on the map
	 * @alias Titanium.Map.MapView.userLocation
	 * @property {Boolean}
	 */
	userLocation: false,
	/**
	 * Get the boolean to indicate if the map should show the user's current device location as a pin on the map
	 * @alias Titanium.Map.MapView.getUserLocation
	 * @return {Boolean}
	 */
	getUserLocation: function () { return userLocation; },
	/**
	 * Set the boolean to indicate if the map should show the user's current device location as a pin on the map
	 * @param {Boolean} value New value to set.
	 * @alias Titanium.Map.MapView.setUserLocation
	 */
	setUserLocation: function () { },
	/**
	 * a boolean of the visibility of the view
	 * @alias Titanium.Map.MapView.visible
	 * @property {Boolean}
	 */
	visible: false,
	/**
	 * Get the a boolean of the visibility of the view
	 * @alias Titanium.Map.MapView.getVisible
	 * @return {Boolean}
	 */
	getVisible: function () { return visible; },
	/**
	 * Set the a boolean of the visibility of the view
	 * @param {Boolean} value New value to set.
	 * @alias Titanium.Map.MapView.setVisible
	 */
	setVisible: function () { },
	/**
	 * property for the view width. Can be either a float value or a dimension string ie 'auto' (default), '50%' (iPhone only).
	 * @alias Titanium.Map.MapView.width
	 * @property {Float,String}
	 */
	width: 0.0,
	/**
	 * Get the property for the view width. Can be either a float value or a dimension string ie 'auto' (default), '50%' (iPhone only).
	 * @alias Titanium.Map.MapView.getWidth
	 * @return {Float,String}
	 */
	getWidth: function () { return width; },
	/**
	 * Set the property for the view width. Can be either a float value or a dimension string ie 'auto' (default), '50%' (iPhone only).
	 * @param {Float,String} value New value to set.
	 * @alias Titanium.Map.MapView.setWidth
	 */
	setWidth: function () { },
	/**
	 * the z index position relative to other sibling views
	 * @alias Titanium.Map.MapView.zIndex
	 * @property {Integer}
	 */
	zIndex: 0,
	/**
	 * Get the the z index position relative to other sibling views
	 * @alias Titanium.Map.MapView.getZIndex
	 * @return {Integer}
	 */
	getZIndex: function () { return zIndex; },
	/**
	 * Set the the z index position relative to other sibling views
	 * @param {Integer} value New value to set.
	 * @alias Titanium.Map.MapView.setZIndex
	 */
	setZIndex: function () { },
	/**
	 * add a child to the view hierarchy
	 * @param {Object} view the view to add to this views hiearchy
	 * @alias Titanium.Map.MapView.add
	 */
	add: function (view) { },
	/**
	 * add a new annotation to the map
	 * @param {Object} annotation either a dictionary of properties for the annotation or a [Titanium.Map.Annotation](Titanium.Map.Annotation) instance.
	 * @alias Titanium.Map.MapView.addAnnotation
	 */
	addAnnotation: function (annotation) { },
	/**
	 * add one or more new annotation to the map
	 * @param {Array} annotations an array of either a dictionary of properties for the annotation or a [Titanium.Map.Annotation](Titanium.Map.Annotation) instance.
	 * @alias Titanium.Map.MapView.addAnnotations
	 */
	addAnnotations: function (annotations) { },
	/**
	 * add an event listener for the instance to receive view triggered events
	 * @param {String} name name of the event
	 * @param {Function} callback callback function to invoke when the event is fired
	 * @alias Titanium.Map.MapView.addEventListener
	 */
	addEventListener: function (name,callback) { },
	/**
	 * add a route. currently only supported on iphone
	 * @param {Object} route dictionary with the properties: <tt>name</tt> route name, <tt>points</tt> dictionary of values with longitude and latitude keys, <tt>color</tt> for the line color and <tt>width</tt> for the line width.
	 * @alias Titanium.Map.MapView.addRoute
	 */
	addRoute: function (route) { },
	/**
	 * animate the view
	 * @param {Object} obj either a dictionary of animation properties or an Animation object
	 * @param {Function} callback function to be invoked upon completion of the animation
	 * @alias Titanium.Map.MapView.animate
	 */
	animate: function (obj,callback) { },
	/**
	 * cause the annotation to be deselected (hidden).
	 * @param {String,Object} annotation either a string of the annotation title or a [Titanium.Map.Annotation](Titanium.Map.Annotation) reference.
	 * @alias Titanium.Map.MapView.deselectAnnotation
	 */
	deselectAnnotation: function (annotation) { },
	/**
	 * fire a synthesized event to the views listener
	 * @param {String} name name of the event
	 * @param {Object} event event object
	 * @alias Titanium.Map.MapView.fireEvent
	 */
	fireEvent: function (name,event) { },
	/**
	 * hide the view
	 * @alias Titanium.Map.MapView.hide
	 */
	hide: function () { },
	/**
	 * remove a previously add view from the view hiearchy
	 * @param {Object} view the view to remove from this views hiearchy
	 * @alias Titanium.Map.MapView.remove
	 */
	remove: function (view) { },
	/**
	 * removes all annotations added to the map
	 * @alias Titanium.Map.MapView.removeAllAnnotations
	 */
	removeAllAnnotations: function () { },
	/**
	 * remove an existing annotation from the map
	 * @param {String,Object} annotation either a string of the annotation title or a [Titanium.Map.Annotation](Titanium.Map.Annotation) reference.
	 * @alias Titanium.Map.MapView.removeAnnotation
	 */
	removeAnnotation: function (annotation) { },
	/**
	 * remove one or more existing annotations from the map
	 * @param {Array} annotation an array of either a string of the annotation title or a [Titanium.Map.Annotation](Titanium.Map.Annotation) reference.
	 * @alias Titanium.Map.MapView.removeAnnotations
	 */
	removeAnnotations: function (annotation) { },
	/**
	 * remove a previously added event listener
	 * @param {String} name name of the event
	 * @param {Function} callback callback function passed in addEventListener
	 * @alias Titanium.Map.MapView.removeEventListener
	 */
	removeEventListener: function (name,callback) { },
	/**
	 * remove a previously added route. currently only supported on iphone
	 * @param {Object} route same route object used during addRoute
	 * @alias Titanium.Map.MapView.removeRoute
	 */
	removeRoute: function (route) { },
	/**
	 * cause the annotation to be selected (shown).
	 * @param {String,Object} annotation either a string of the annotation title or a [Titanium.Map.Annotation](Titanium.Map.Annotation) reference.
	 * @alias Titanium.Map.MapView.selectAnnotation
	 */
	selectAnnotation: function (annotation) { },
	/**
	 * set and center the map location.
	 * @param {Object} location a dictionary that specifies the following properties specifying the location to set the map: <tt>latitudeDelta</tt>, <tt>longitudeDelta</tt>, <tt>latitude</tt>, <tt>longitude</tt>.
	 * @alias Titanium.Map.MapView.setLocation
	 */
	setLocation: function (location) { },
	/**
	 * set the type of map (satellite, hybrid, standard)
	 * @param {Integer} mapType the map type constant of either <a href="Titanium.Map.STANDARD_TYPE-property.html">Titanium.Map.STANDARD_TYPE</a>, <a href="Titanium.Map.SATELLITE_TYPE-property.html">Titanium.Map.SATELLITE_TYPE</a> or <a href="Titanium.Map.HYBRID_TYPE-property.html">Titanium.Map.HYBRID_TYPE</a>.
	 * @alias Titanium.Map.MapView.setMapType
	 */
	setMapType: function (mapType) { },
	/**
	 * make the view visible
	 * @alias Titanium.Map.MapView.show
	 */
	show: function () { },
	/**
	 * return a Blob image of the rendered view
	 * @param {Function} f function to be invoked upon completion. if non-null, this method will be performed asynchronously. if null, it will be performed immediately
	 * @alias Titanium.Map.MapView.toImage
	 * @return {Object}
	 */
	toImage: function (f) { return {}; },
	/**
	 * zoom in or out of the map
	 * @param {Double} level zoom level (can be positive or negative)
	 * @alias Titanium.Map.MapView.zoom
	 */
	zoom: function (level) { },
};

/**
 * The top level Media module.  The Media module is used accessing the device's media related  functionality such as playing audio or recording video.
 * @since 0.1
 */
Titanium.Media = {
	/**
	 * audio file format 3GPP-2
	 * @alias Titanium.Media.AUDIO_FILEFORMAT_3GP2
	 * @property {Integer}
	 */
	AUDIO_FILEFORMAT_3GP2: 0,
	/**
	 * audio file format 3GPP
	 * @alias Titanium.Media.AUDIO_FILEFORMAT_3GPP
	 * @property {Integer}
	 */
	AUDIO_FILEFORMAT_3GPP: 0,
	/**
	 * audio file format AIFF
	 * @alias Titanium.Media.AUDIO_FILEFORMAT_AIFF
	 * @property {Integer}
	 */
	AUDIO_FILEFORMAT_AIFF: 0,
	/**
	 * audio file format AMR
	 * @alias Titanium.Media.AUDIO_FILEFORMAT_AMR
	 * @property {Integer}
	 */
	AUDIO_FILEFORMAT_AMR: 0,
	/**
	 * audio file format Apple Compressed Audio Format (CAF)
	 * @alias Titanium.Media.AUDIO_FILEFORMAT_CAF
	 * @property {Integer}
	 */
	AUDIO_FILEFORMAT_CAF: 0,
	/**
	 * audio file format MP3
	 * @alias Titanium.Media.AUDIO_FILEFORMAT_MP3
	 * @property {Integer}
	 */
	AUDIO_FILEFORMAT_MP3: 0,
	/**
	 * audio file format MP4
	 * @alias Titanium.Media.AUDIO_FILEFORMAT_MP4
	 * @property {Integer}
	 */
	AUDIO_FILEFORMAT_MP4: 0,
	/**
	 * audio file format MP4A
	 * @alias Titanium.Media.AUDIO_FILEFORMAT_MP4A
	 * @property {Integer}
	 */
	AUDIO_FILEFORMAT_MP4A: 0,
	/**
	 * audio file format WAVE
	 * @alias Titanium.Media.AUDIO_FILEFORMAT_WAVE
	 * @property {Integer}
	 */
	AUDIO_FILEFORMAT_WAVE: 0,
	/**
	 * audio format MPEG4 AAC encoding
	 * @alias Titanium.Media.AUDIO_FORMAT_AAC
	 * @property {Integer}
	 */
	AUDIO_FORMAT_AAC: 0,
	/**
	 * audio format 8-bit aLaw encoding
	 * @alias Titanium.Media.AUDIO_FORMAT_ALAW
	 * @property {Integer}
	 */
	AUDIO_FORMAT_ALAW: 0,
	/**
	 * audio format apple lossless encoding
	 * @alias Titanium.Media.AUDIO_FORMAT_APPLE_LOSSLESS
	 * @property {Integer}
	 */
	AUDIO_FORMAT_APPLE_LOSSLESS: 0,
	/**
	 * audio format iLBC encoding
	 * @alias Titanium.Media.AUDIO_FORMAT_ILBC
	 * @property {Integer}
	 */
	AUDIO_FORMAT_ILBC: 0,
	/**
	 * audio format Apple IMA4 encoding
	 * @alias Titanium.Media.AUDIO_FORMAT_IMA4
	 * @property {Integer}
	 */
	AUDIO_FORMAT_IMA4: 0,
	/**
	 * audio format Linear 16-bit, PCM encoding
	 * @alias Titanium.Media.AUDIO_FORMAT_LINEAR_PCM
	 * @property {Integer}
	 */
	AUDIO_FORMAT_LINEAR_PCM: 0,
	/**
	 * audio format 8-bit muLaw encoding
	 * @alias Titanium.Media.AUDIO_FORMAT_ULAW
	 * @property {Integer}
	 */
	AUDIO_FORMAT_ULAW: 0,
	/**
	 * constant for line type headphones
	 * @alias Titanium.Media.AUDIO_HEADPHONES
	 * @property {Integer}
	 */
	AUDIO_HEADPHONES: 0,
	/**
	 * constant line type headphones and microphone
	 * @alias Titanium.Media.AUDIO_HEADPHONES_AND_MIC
	 * @property {Integer}
	 */
	AUDIO_HEADPHONES_AND_MIC: 0,
	/**
	 * constant line type headset in/out
	 * @alias Titanium.Media.AUDIO_HEADSET_INOUT
	 * @property {Integer}
	 */
	AUDIO_HEADSET_INOUT: 0,
	/**
	 * constant line type line out
	 * @alias Titanium.Media.AUDIO_LINEOUT
	 * @property {Integer}
	 */
	AUDIO_LINEOUT: 0,
	/**
	 * constant line type microphone
	 * @alias Titanium.Media.AUDIO_MICROPHONE
	 * @property {Integer}
	 */
	AUDIO_MICROPHONE: 0,
	/**
	 * constant line type muted switch is on
	 * @alias Titanium.Media.AUDIO_MUTED
	 * @property {Integer}
	 */
	AUDIO_MUTED: 0,
	/**
	 * constant line type receiver and microphone
	 * @alias Titanium.Media.AUDIO_RECEIVER_AND_MIC
	 * @property {Integer}
	 */
	AUDIO_RECEIVER_AND_MIC: 0,
	/**
	 * For long-duration sounds such as rain, car engine noise, and so on. It is also for 'play along' style applications, such a virtual piano that a user plays over iPod audio.
	 * @alias Titanium.Media.AUDIO_SESSION_MODE_AMBIENT
	 * @property {Integer}
	 */
	AUDIO_SESSION_MODE_AMBIENT: 0,
	/**
	 * For playing recorded music or other sounds that are central to the successful use of your application. When using this mode, your application audio continues with the Ring/Silent switch set to silent or when the screen locks. This property normally disallows iPod audio to mix with application audio
	 * @alias Titanium.Media.AUDIO_SESSION_MODE_PLAYBACK
	 * @property {Integer}
	 */
	AUDIO_SESSION_MODE_PLAYBACK: 0,
	/**
	 * Allows recording (input) and playback (output) of audio, such as for a VOIP (voice over IP) application. This category is appropriate for simultaneous recording and playback, and also for applications that record and play back but not simultaneously. If you want to ensure that sounds such as Messages alerts do not play while your application is recording, use  Titanium.Media.AUDIO_SESSION_MODE_RECORD instead. This category normally disallows iPod audio to mix with application audio.
	 * @alias Titanium.Media.AUDIO_SESSION_MODE_PLAY_AND_RECORD
	 * @property {Integer}
	 */
	AUDIO_SESSION_MODE_PLAY_AND_RECORD: 0,
	/**
	 * For recording audio; it silences playback audio.
	 * @alias Titanium.Media.AUDIO_SESSION_MODE_RECORD
	 * @property {Integer}
	 */
	AUDIO_SESSION_MODE_RECORD: 0,
	/**
	 * The solo ambient sound category is for long-duration sounds such as rain, car engine noise, and so on. When you use this category, audio from built-in applications, such as the iPod, is silenced. Your audio is silenced when the Ring/Silent switch is set to silent or when the screen locks.
	 * @alias Titanium.Media.AUDIO_SESSION_MODE_SOLO_AMBIENT
	 * @property {Integer}
	 */
	AUDIO_SESSION_MODE_SOLO_AMBIENT: 0,
	/**
	 * constant line type speaker
	 * @alias Titanium.Media.AUDIO_SPEAKER
	 * @property {Integer}
	 */
	AUDIO_SPEAKER: 0,
	/**
	 * constant line type unavailable
	 * @alias Titanium.Media.AUDIO_UNAVAILABLE
	 * @property {Integer}
	 */
	AUDIO_UNAVAILABLE: 0,
	/**
	 * constant line type unknown or not determined
	 * @alias Titanium.Media.AUDIO_UNKNOWN
	 * @property {Integer}
	 */
	AUDIO_UNKNOWN: 0,
	/**
	 * constant for media device busy error
	 * @alias Titanium.Media.DEVICE_BUSY
	 * @property {Integer}
	 */
	DEVICE_BUSY: 0,
	/**
	 * media type constant to signify photo
	 * @alias Titanium.Media.MEDIA_TYPE_PHOTO
	 * @property {Integer}
	 */
	MEDIA_TYPE_PHOTO: 0,
	/**
	 * media type constant to signify video
	 * @alias Titanium.Media.MEDIA_TYPE_VIDEO
	 * @property {Integer}
	 */
	MEDIA_TYPE_VIDEO: 0,
	/**
	 * media containing any content
	 * @alias Titanium.Media.MUSIC_MEDIA_TYPE_ALL
	 * @property {Integer}
	 */
	MUSIC_MEDIA_TYPE_ALL: 0,
	/**
	 * media containing any audio content
	 * @alias Titanium.Media.MUSIC_MEDIA_TYPE_ANY_AUDIO
	 * @property {Integer}
	 */
	MUSIC_MEDIA_TYPE_ANY_AUDIO: 0,
	/**
	 * media containing audiobook content
	 * @alias Titanium.Media.MUSIC_MEDIA_TYPE_AUDIOBOOK
	 * @property {Integer}
	 */
	MUSIC_MEDIA_TYPE_AUDIOBOOK: 0,
	/**
	 * media containing music content
	 * @alias Titanium.Media.MUSIC_MEDIA_TYPE_MUSIC
	 * @property {Integer}
	 */
	MUSIC_MEDIA_TYPE_MUSIC: 0,
	/**
	 * media containing podcast content
	 * @alias Titanium.Media.MUSIC_MEDIA_TYPE_PODCAST
	 * @property {Integer}
	 */
	MUSIC_MEDIA_TYPE_PODCAST: 0,
	/**
	 * constant for repeating all setting
	 * @alias Titanium.Media.MUSIC_PLAYER_REPEAT_ALL
	 * @property {Integer}
	 */
	MUSIC_PLAYER_REPEAT_ALL: 0,
	/**
	 * constant for user default repeat setting
	 * @alias Titanium.Media.MUSIC_PLAYER_REPEAT_DEFAULT
	 * @property {Integer}
	 */
	MUSIC_PLAYER_REPEAT_DEFAULT: 0,
	/**
	 * constant for no repeat setting
	 * @alias Titanium.Media.MUSIC_PLAYER_REPEAT_NONE
	 * @property {Integer}
	 */
	MUSIC_PLAYER_REPEAT_NONE: 0,
	/**
	 * constant for repeating one item setting
	 * @alias Titanium.Media.MUSIC_PLAYER_REPEAT_ONE
	 * @property {Integer}
	 */
	MUSIC_PLAYER_REPEAT_ONE: 0,
	/**
	 * constant for shuffling complete albums setting
	 * @alias Titanium.Media.MUSIC_PLAYER_SHUFFLE_ALBUMS
	 * @property {Integer}
	 */
	MUSIC_PLAYER_SHUFFLE_ALBUMS: 0,
	/**
	 * constant for user default shuffle setting
	 * @alias Titanium.Media.MUSIC_PLAYER_SHUFFLE_DEFAULT
	 * @property {Integer}
	 */
	MUSIC_PLAYER_SHUFFLE_DEFAULT: 0,
	/**
	 * constant for no shuffle setting
	 * @alias Titanium.Media.MUSIC_PLAYER_SHUFFLE_NONE
	 * @property {Integer}
	 */
	MUSIC_PLAYER_SHUFFLE_NONE: 0,
	/**
	 * constant for shuffling songs setting
	 * @alias Titanium.Media.MUSIC_PLAYER_SHUFFLE_SONGS
	 * @property {Integer}
	 */
	MUSIC_PLAYER_SHUFFLE_SONGS: 0,
	/**
	 * constant for interrupted state
	 * @alias Titanium.Media.MUSIC_PLAYER_STATE_INTERRUPTED
	 * @property {Integer}
	 */
	MUSIC_PLAYER_STATE_INTERRUPTED: 0,
	/**
	 * constant for paused state
	 * @alias Titanium.Media.MUSIC_PLAYER_STATE_PAUSED
	 * @property {Integer}
	 */
	MUSIC_PLAYER_STATE_PAUSED: 0,
	/**
	 * constant for playing state
	 * @alias Titanium.Media.MUSIC_PLAYER_STATE_PLAYING
	 * @property {Integer}
	 */
	MUSIC_PLAYER_STATE_PLAYING: 0,
	/**
	 * constant for backward seek state
	 * @alias Titanium.Media.MUSIC_PLAYER_STATE_SEEK_BACKWARD
	 * @property {Integer}
	 */
	MUSIC_PLAYER_STATE_SEEK_BACKWARD: 0,
	/**
	 * constant for forward seek state
	 * @alias Titanium.Media.MUSIC_PLAYER_STATE_SKEEK_FORWARD
	 * @property {Integer}
	 */
	MUSIC_PLAYER_STATE_SKEEK_FORWARD: 0,
	/**
	 * constant for stopped state
	 * @alias Titanium.Media.MUSIC_PLAYER_STATE_STOPPED
	 * @property {Integer}
	 */
	MUSIC_PLAYER_STATE_STOPPED: 0,
	/**
	 * constant for media no camera error
	 * @alias Titanium.Media.NO_CAMERA
	 * @property {Integer}
	 */
	NO_CAMERA: 0,
	/**
	 * constant for media no video error
	 * @alias Titanium.Media.NO_VIDEO
	 * @property {Integer}
	 */
	NO_VIDEO: 0,
	/**
	 * media type constant to use high-quality video recording. Recorded files are suitable for on-device playback and for wired transfer to the Desktop using Image Capture; they are likely to be too large for transfer using Wi-Fi.
	 * @alias Titanium.Media.QUALITY_HIGH
	 * @property {Integer}
	 */
	QUALITY_HIGH: 0,
	/**
	 * media type constant to use use low-quality video recording. Recorded files can usually be transferred over the cellular network.
	 * @alias Titanium.Media.QUALITY_LOW
	 * @property {Integer}
	 */
	QUALITY_LOW: 0,
	/**
	 * media type constant to use medium-quality video recording. Recorded files can usually be transferred using Wi-Fi. This is the default video quality setting.
	 * @alias Titanium.Media.QUALITY_MEDIUM
	 * @property {Integer}
	 */
	QUALITY_MEDIUM: 0,
	/**
	 * constant for unknown media error
	 * @alias Titanium.Media.UNKNOWN_ERROR
	 * @property {Integer}
	 */
	UNKNOWN_ERROR: 0,
	/**
	 * constant for video controls default
	 * @alias Titanium.Media.VIDEO_CONTROL_DEFAULT
	 * @property {Integer}
	 */
	VIDEO_CONTROL_DEFAULT: 0,
	/**
	 * Controls for an embedded view. Used in conjunction with movieControlStyle property of Titanium.Media.VideoPlayer in iPhone 3.2+
	 * @alias Titanium.Media.VIDEO_CONTROL_EMBEDDED
	 * @property {Integer}
	 */
	VIDEO_CONTROL_EMBEDDED: 0,
	/**
	 * Controls for fullscreen. Used in conjunction with movieControlStyle property of Titanium.Media.VideoPlayer in iPhone 3.2+
	 * @alias Titanium.Media.VIDEO_CONTROL_FULLSCREEN
	 * @property {Integer}
	 */
	VIDEO_CONTROL_FULLSCREEN: 0,
	/**
	 * constant for video controls hidden
	 * @alias Titanium.Media.VIDEO_CONTROL_HIDDEN
	 * @property {Integer}
	 */
	VIDEO_CONTROL_HIDDEN: 0,
	/**
	 * No controls. Used in conjunction with movieControlStyle property of Titanium.Media.VideoPlayer in iPhone 3.2+
	 * @alias Titanium.Media.VIDEO_CONTROL_NONE
	 * @property {Integer}
	 */
	VIDEO_CONTROL_NONE: 0,
	/**
	 * constant for video controls volume only
	 * @alias Titanium.Media.VIDEO_CONTROL_VOLUME_ONLY
	 * @property {Integer}
	 */
	VIDEO_CONTROL_VOLUME_ONLY: 0,
	/**
	 * the video playback ended normally
	 * @alias Titanium.Media.VIDEO_FINISH_REASON_PLAYBACK_ENDED
	 * @property {Integer}
	 */
	VIDEO_FINISH_REASON_PLAYBACK_ENDED: 0,
	/**
	 * the video playback ended abnormally
	 * @alias Titanium.Media.VIDEO_FINISH_REASON_PLAYBACK_ERROR
	 * @property {Integer}
	 */
	VIDEO_FINISH_REASON_PLAYBACK_ERROR: 0,
	/**
	 * the video playback ended by user action (such as clicking the Done button)
	 * @alias Titanium.Media.VIDEO_FINISH_REASON_USER_EXITED
	 * @property {Integer}
	 */
	VIDEO_FINISH_REASON_USER_EXITED: 0,
	/**
	 * the current media is playable
	 * @alias Titanium.Media.VIDEO_LOAD_STATE_PLAYABLE
	 * @property {Integer}
	 */
	VIDEO_LOAD_STATE_PLAYABLE: 0,
	/**
	 * playback will be automatically started in this state when autoplay is true
	 * @alias Titanium.Media.VIDEO_LOAD_STATE_PLAYTHROUGH_OK
	 * @property {Integer}
	 */
	VIDEO_LOAD_STATE_PLAYTHROUGH_OK: 0,
	/**
	 * playback will be automatically paused in this state, if started
	 * @alias Titanium.Media.VIDEO_LOAD_STATE_STALLED
	 * @property {Integer}
	 */
	VIDEO_LOAD_STATE_STALLED: 0,
	/**
	 * the current load state is not known
	 * @alias Titanium.Media.VIDEO_LOAD_STATE_UNKNOWN
	 * @property {Integer}
	 */
	VIDEO_LOAD_STATE_UNKNOWN: 0,
	/**
	 * A audio type of media in the movie returned by Titanium.Media.VideoPlayer mediaTypes property
	 * @alias Titanium.Media.VIDEO_MEDIA_TYPE_AUDIO
	 * @property {Integer}
	 */
	VIDEO_MEDIA_TYPE_AUDIO: 0,
	/**
	 * An unknown type of media in the movie returned by Titanium.Media.VideoPlayer mediaTypes property.
	 * @alias Titanium.Media.VIDEO_MEDIA_TYPE_NONE
	 * @property {Integer}
	 */
	VIDEO_MEDIA_TYPE_NONE: 0,
	/**
	 * A video type of media in the movie returned by Titanium.Media.VideoPlayer mediaTypes property
	 * @alias Titanium.Media.VIDEO_MEDIA_TYPE_VIDEO
	 * @property {Integer}
	 */
	VIDEO_MEDIA_TYPE_VIDEO: 0,
	/**
	 * playback has been interrupted
	 * @alias Titanium.Media.VIDEO_PLAYBACK_STATE_INTERRUPTED
	 * @property {Integer}
	 */
	VIDEO_PLAYBACK_STATE_INTERRUPTED: 0,
	/**
	 * playback is paused
	 * @alias Titanium.Media.VIDEO_PLAYBACK_STATE_PAUSED
	 * @property {Integer}
	 */
	VIDEO_PLAYBACK_STATE_PAUSED: 0,
	/**
	 * playback is playing
	 * @alias Titanium.Media.VIDEO_PLAYBACK_STATE_PLAYING
	 * @property {Integer}
	 */
	VIDEO_PLAYBACK_STATE_PLAYING: 0,
	/**
	 * playback is rewinding
	 * @alias Titanium.Media.VIDEO_PLAYBACK_STATE_SEEKING_BACKWARD
	 * @property {Integer}
	 */
	VIDEO_PLAYBACK_STATE_SEEKING_BACKWARD: 0,
	/**
	 * playback is seeking forward
	 * @alias Titanium.Media.VIDEO_PLAYBACK_STATE_SEEKING_FORWARD
	 * @property {Integer}
	 */
	VIDEO_PLAYBACK_STATE_SEEKING_FORWARD: 0,
	/**
	 * playback has stopped
	 * @alias Titanium.Media.VIDEO_PLAYBACK_STATE_STOPPED
	 * @property {Integer}
	 */
	VIDEO_PLAYBACK_STATE_STOPPED: 0,
	/**
	 * the video will not repeat
	 * @alias Titanium.Media.VIDEO_REPEAT_MODE_NONE
	 * @property {Integer}
	 */
	VIDEO_REPEAT_MODE_NONE: 0,
	/**
	 * the video will repeat once
	 * @alias Titanium.Media.VIDEO_REPEAT_MODE_ONE
	 * @property {Integer}
	 */
	VIDEO_REPEAT_MODE_ONE: 0,
	/**
	 * constant for video aspect where the movie will be scaled until the movie fills the entire screen. Content at the edges of the larger of the two dimensions is clipped so that the other dimension fits the screen exactly. The aspect ratio of the movie is preserved.
	 * @alias Titanium.Media.VIDEO_SCALING_ASPECT_FILL
	 * @property {Integer}
	 */
	VIDEO_SCALING_ASPECT_FILL: 0,
	/**
	 * constant for video aspect fit where the movie will be scaled until one dimension fits on the screen exactly. In the other dimension, the region between the edge of the movie and the edge of the screen is filled with a black bar. The aspect ratio of the movie is preserved.
	 * @alias Titanium.Media.VIDEO_SCALING_ASPECT_FIT
	 * @property {Integer}
	 */
	VIDEO_SCALING_ASPECT_FIT: 0,
	/**
	 * constant for video aspect where the movie will be scaled until both dimensions fit the screen exactly. The aspect ratio of the movie is not preserved.
	 * @alias Titanium.Media.VIDEO_SCALING_MODE_FILL
	 * @property {Integer}
	 */
	VIDEO_SCALING_MODE_FILL: 0,
	/**
	 * constant for video scaling where the scaling is turn off. The movie will not be scaled.
	 * @alias Titanium.Media.VIDEO_SCALING_NONE
	 * @property {Integer}
	 */
	VIDEO_SCALING_NONE: 0,
	/**
	 * the video source type is a file. Related to the sourceType property of Titanium.Media.VideoPlayer
	 * @alias Titanium.Media.VIDEO_SOURCE_TYPE_FILE
	 * @property {Integer}
	 */
	VIDEO_SOURCE_TYPE_FILE: 0,
	/**
	 * the video source type is a remote stream. Related to the sourceType property of Titanium.Media.VideoPlayer
	 * @alias Titanium.Media.VIDEO_SOURCE_TYPE_STREAMING
	 * @property {Integer}
	 */
	VIDEO_SOURCE_TYPE_STREAMING: 0,
	/**
	 * the video source type is unknown. Related to the sourceType property of Titanium.Media.VideoPlayer
	 * @alias Titanium.Media.VIDEO_SOURCE_TYPE_UNKNOWN
	 * @property {Integer}
	 */
	VIDEO_SOURCE_TYPE_UNKNOWN: 0,
	/**
	 * use the exact time
	 * @alias Titanium.Media.VIDEO_TIME_OPTION_EXACT
	 * @property {Integer}
	 */
	VIDEO_TIME_OPTION_EXACT: 0,
	/**
	 * use the closest keyframe in the time
	 * @alias Titanium.Media.VIDEO_TIME_OPTION_NEAREST_KEYFRAME
	 * @property {Integer}
	 */
	VIDEO_TIME_OPTION_NEAREST_KEYFRAME: 0,
	/**
	 * an instance of Titanium.Media.MusicPlayer representing the app-specific music player.  iPhone/iPad only
	 * @alias Titanium.Media.appMusicPlayer
	 * @property {Object}
	 */
	appMusicPlayer: {},
	/**
	 * Get the an instance of Titanium.Media.MusicPlayer representing the app-specific music player.  iPhone/iPad only
	 * @alias Titanium.Media.getAppMusicPlayer
	 * @return {Object}
	 */
	getAppMusicPlayer: function () { return appMusicPlayer; },
	/**
	 * Set the an instance of Titanium.Media.MusicPlayer representing the app-specific music player.  iPhone/iPad only
	 * @param {Object} value New value to set.
	 * @alias Titanium.Media.setAppMusicPlayer
	 */
	setAppMusicPlayer: function () { },
	/**
	 * returns the line type constant for the current line type
	 * @alias Titanium.Media.audioLineType
	 * @property {Integer}
	 */
	audioLineType: 0,
	/**
	 * Get the returns the line type constant for the current line type
	 * @alias Titanium.Media.getAudioLineType
	 * @return {Integer}
	 */
	getAudioLineType: function () { return audioLineType; },
	/**
	 * Set the returns the line type constant for the current line type
	 * @param {Integer} value New value to set.
	 * @alias Titanium.Media.setAudioLineType
	 */
	setAudioLineType: function () { },
	/**
	 * returns true if the device is playing audio
	 * @alias Titanium.Media.audioPlaying
	 * @property {Boolean}
	 */
	audioPlaying: false,
	/**
	 * Get the returns true if the device is playing audio
	 * @alias Titanium.Media.getAudioPlaying
	 * @return {Boolean}
	 */
	getAudioPlaying: function () { return audioPlaying; },
	/**
	 * Set the returns true if the device is playing audio
	 * @param {Boolean} value New value to set.
	 * @alias Titanium.Media.setAudioPlaying
	 */
	setAudioPlaying: function () { },
	/**
	 * a constant for the audio session mode to be used. Must be set while the audio session is inactive (no sounds are playing, no listeners for audio properties on the Media module, but the iPod may be active).
	 * @alias Titanium.Media.audioSessionMode
	 * @property {Integer}
	 */
	audioSessionMode: 0,
	/**
	 * Get the a constant for the audio session mode to be used. Must be set while the audio session is inactive (no sounds are playing, no listeners for audio properties on the Media module, but the iPod may be active).
	 * @alias Titanium.Media.getAudioSessionMode
	 * @return {Integer}
	 */
	getAudioSessionMode: function () { return audioSessionMode; },
	/**
	 * Set the a constant for the audio session mode to be used. Must be set while the audio session is inactive (no sounds are playing, no listeners for audio properties on the Media module, but the iPod may be active).
	 * @param {Integer} value New value to set.
	 * @alias Titanium.Media.setAudioSessionMode
	 */
	setAudioSessionMode: function () { },
	/**
	 * return an array of media type constants supported for the camera
	 * @alias Titanium.Media.availableCameraMediaTypes
	 * @property {Array}
	 */
	availableCameraMediaTypes: [],
	/**
	 * Get the return an array of media type constants supported for the camera
	 * @alias Titanium.Media.getAvailableCameraMediaTypes
	 * @return {Array}
	 */
	getAvailableCameraMediaTypes: function () { return availableCameraMediaTypes; },
	/**
	 * Set the return an array of media type constants supported for the camera
	 * @param {Array} value New value to set.
	 * @alias Titanium.Media.setAvailableCameraMediaTypes
	 */
	setAvailableCameraMediaTypes: function () { },
	/**
	 * return an array of media type constants supported for saving to the photo gallery
	 * @alias Titanium.Media.availablePhotoGalleryMediaTypes
	 * @property {Array}
	 */
	availablePhotoGalleryMediaTypes: [],
	/**
	 * Get the return an array of media type constants supported for saving to the photo gallery
	 * @alias Titanium.Media.getAvailablePhotoGalleryMediaTypes
	 * @return {Array}
	 */
	getAvailablePhotoGalleryMediaTypes: function () { return availablePhotoGalleryMediaTypes; },
	/**
	 * Set the return an array of media type constants supported for saving to the photo gallery
	 * @param {Array} value New value to set.
	 * @alias Titanium.Media.setAvailablePhotoGalleryMediaTypes
	 */
	setAvailablePhotoGalleryMediaTypes: function () { },
	/**
	 * return an array of media type constants supported for the photo
	 * @alias Titanium.Media.availablePhotoMediaTypes
	 * @property {Array}
	 */
	availablePhotoMediaTypes: [],
	/**
	 * Get the return an array of media type constants supported for the photo
	 * @alias Titanium.Media.getAvailablePhotoMediaTypes
	 * @return {Array}
	 */
	getAvailablePhotoMediaTypes: function () { return availablePhotoMediaTypes; },
	/**
	 * Set the return an array of media type constants supported for the photo
	 * @param {Array} value New value to set.
	 * @alias Titanium.Media.setAvailablePhotoMediaTypes
	 */
	setAvailablePhotoMediaTypes: function () { },
	/**
	 * return the current average microphone level in dB or -1 if microphone monitoring is disabled
	 * @alias Titanium.Media.averageMicrophonePower
	 * @property {Float}
	 */
	averageMicrophonePower: 0.0,
	/**
	 * Get the return the current average microphone level in dB or -1 if microphone monitoring is disabled
	 * @alias Titanium.Media.getAverageMicrophonePower
	 * @return {Float}
	 */
	getAverageMicrophonePower: function () { return averageMicrophonePower; },
	/**
	 * Set the return the current average microphone level in dB or -1 if microphone monitoring is disabled
	 * @param {Float} value New value to set.
	 * @alias Titanium.Media.setAverageMicrophonePower
	 */
	setAverageMicrophonePower: function () { },
	/**
	 * returns true if the device has recording input device available
	 * @alias Titanium.Media.canRecord
	 * @property {Boolean}
	 */
	canRecord: false,
	/**
	 * Get the returns true if the device has recording input device available
	 * @alias Titanium.Media.getCanRecord
	 * @return {Boolean}
	 */
	getCanRecord: function () { return canRecord; },
	/**
	 * Set the returns true if the device has recording input device available
	 * @param {Boolean} value New value to set.
	 * @alias Titanium.Media.setCanRecord
	 */
	setCanRecord: function () { },
	/**
	 * returns true if the device has camera support
	 * @alias Titanium.Media.isCameraSupported
	 * @property {Boolean}
	 */
	isCameraSupported: false,
	/**
	 * Get the returns true if the device has camera support
	 * @alias Titanium.Media.getIsCameraSupported
	 * @return {Boolean}
	 */
	getIsCameraSupported: function () { return isCameraSupported; },
	/**
	 * Set the returns true if the device has camera support
	 * @param {Boolean} value New value to set.
	 * @alias Titanium.Media.setIsCameraSupported
	 */
	setIsCameraSupported: function () { },
	/**
	 * return the current microphone level peak power in dB or -1 if microphone monitoring is disabled
	 * @alias Titanium.Media.peakMicrophonePower
	 * @property {Float}
	 */
	peakMicrophonePower: 0.0,
	/**
	 * Get the return the current microphone level peak power in dB or -1 if microphone monitoring is disabled
	 * @alias Titanium.Media.getPeakMicrophonePower
	 * @return {Float}
	 */
	getPeakMicrophonePower: function () { return peakMicrophonePower; },
	/**
	 * Set the return the current microphone level peak power in dB or -1 if microphone monitoring is disabled
	 * @param {Float} value New value to set.
	 * @alias Titanium.Media.setPeakMicrophonePower
	 */
	setPeakMicrophonePower: function () { },
	/**
	 * an instance of Titanium.Media.MusicPlayer representing the system-wide music player.  iPhone/iPad only
	 * @alias Titanium.Media.systemMusicPlayer
	 * @property {Object}
	 */
	systemMusicPlayer: {},
	/**
	 * Get the an instance of Titanium.Media.MusicPlayer representing the system-wide music player.  iPhone/iPad only
	 * @alias Titanium.Media.getSystemMusicPlayer
	 * @return {Object}
	 */
	getSystemMusicPlayer: function () { return systemMusicPlayer; },
	/**
	 * Set the an instance of Titanium.Media.MusicPlayer representing the system-wide music player.  iPhone/iPad only
	 * @param {Object} value New value to set.
	 * @alias Titanium.Media.setSystemMusicPlayer
	 */
	setSystemMusicPlayer: function () { },
	/**
	 * the current volume of the playback device
	 * @alias Titanium.Media.volume
	 * @property {Float}
	 */
	volume: 0.0,
	/**
	 * Get the the current volume of the playback device
	 * @alias Titanium.Media.getVolume
	 * @return {Float}
	 */
	getVolume: function () { return volume; },
	/**
	 * Set the the current volume of the playback device
	 * @param {Float} value New value to set.
	 * @alias Titanium.Media.setVolume
	 */
	setVolume: function () { },
	/**
	 * add an event listener for the instance to receive view triggered events
	 * @param {String} name name of the event
	 * @param {Function} callback callback function to invoke when the event is fired
	 * @alias Titanium.Media.addEventListener
	 */
	addEventListener: function (name,callback) { },
	/**
	 * play a device beep notification
	 * @alias Titanium.Media.beep
	 */
	beep: function () { },
	/**
	 * create and return an instance of Titanium.Media.AudioPlayer
	 * @param {Object} [parameters] (optional) a dictionary object properties defined in <a href="Titanium.Media.AudioPlayer.html">Titanium.Media.AudioPlayer</a>
	 * @alias Titanium.Media.createAudioPlayer
	 * @return {Titanium_Media_AudioPlayer}
	 */
	createAudioPlayer: function (parameters) { return new Titanium_Media_AudioPlayer(); },
	/**
	 * create and return an instance of Titanium.Media.AudioRecorder
	 * @param {Object} [parameters] (optional) a dictionary object properties defined in <a href="Titanium.Media.AudioRecorder.html">Titanium.Media.AudioRecorder</a>
	 * @alias Titanium.Media.createAudioRecorder
	 * @return {Titanium_Media_AudioRecorder}
	 */
	createAudioRecorder: function (parameters) { return new Titanium_Media_AudioRecorder(); },
	/**
	 * create and return an instance of Titanium.Media.Item
	 * @param {Object} [parameters] (optional) a dictionary object properties defined in <a href="Titanium.Media.Item.html">Titanium.Media.Item</a>
	 * @alias Titanium.Media.createItem
	 * @return {Titanium_Media_Item}
	 */
	createItem: function (parameters) { return new Titanium_Media_Item(); },
	/**
	 * create and return an instance of Titanium.Media.MusicPlayer
	 * @param {Object} [parameters] (optional) a dictionary object properties defined in <a href="Titanium.Media.MusicPlayer.html">Titanium.Media.MusicPlayer</a>
	 * @alias Titanium.Media.createMusicPlayer
	 * @return {Titanium_Media_MusicPlayer}
	 */
	createMusicPlayer: function (parameters) { return new Titanium_Media_MusicPlayer(); },
	/**
	 * create and return an instance of Titanium.Media.Sound
	 * @param {Object} [parameters] (optional) a dictionary object properties defined in <a href="Titanium.Media.Sound.html">Titanium.Media.Sound</a>
	 * @alias Titanium.Media.createSound
	 * @return {Titanium_Media_Sound}
	 */
	createSound: function (parameters) { return new Titanium_Media_Sound(); },
	/**
	 * create and return an instance of Titanium.Media.VideoPlayer
	 * @param {Object} [parameters] (optional) a dictionary object properties defined in <a href="Titanium.Media.VideoPlayer.html">Titanium.Media.VideoPlayer</a>
	 * @alias Titanium.Media.createVideoPlayer
	 * @return {Titanium_Media_VideoPlayer}
	 */
	createVideoPlayer: function (parameters) { return new Titanium_Media_VideoPlayer(); },
	/**
	 * fire a synthesized event to the views listener
	 * @param {String} name name of the event
	 * @param {Object} event event object
	 * @alias Titanium.Media.fireEvent
	 */
	fireEvent: function (name,event) { },
	/**
	 * hide the device camera UI. this must be called after calling showCamera and only when autohide is set to false. this method will cause the media capture device be hidden.
	 * @alias Titanium.Media.hideCamera
	 */
	hideCamera: function () { },
	/**
	 * hide the music library.  This must be called after calling showMusicLibrary and only when autohide is set to false.  iPhone and iPad only.
	 * @alias Titanium.Media.hideMusicLibrary
	 */
	hideMusicLibrary: function () { },
	/**
	 * return boolean to indicate if the media type is supported
	 * @param {String} media media type as a string of either <tt>camera</tt>, <tt>photo</tt> or <tt>photogallery</tt>.
	 * @param {String} type the type of media to check
	 * @alias Titanium.Media.isMediaTypeSupported
	 * @return {Boolean}
	 */
	isMediaTypeSupported: function (media,type) { return false; },
	/**
	 * open the photo gallery picker
	 * @param {Object} options pass a dictionary with the following supported keys: <tt>success</tt> a function that will be called when the camera is completed, <tt>error</tt> a function that will be called upon receiving an error, <tt>cancel</tt> a function that will be called if the user presses the cancel button, <tt>autohide</tt> boolean if the camera should auto hide after the media capture is completed (defaults to true), <tt>animated</tt> boolean if the dialog should be animated (defaults to true) upon showing and hiding, <tt>saveToPhotoGallery</tt> boolean if the media should be saved to the photo gallery upon successful capture, <tt>allowEditing</tt> boolean if the media should be editable after capture in the UI interface, <tt>mediaTypes</tt> an array of media type constants supported by the capture device UI, <tt>showControls</tt> boolean to indicate if the built-in UI controls should be displayed, <tt>overlay</tt> view which is added as an overlay to the UI (on top), <tt>transform</tt> an transformation matrix that applies to the UI transform. For iPad, <tt>popoverView</tt> can be provided to position the photo gallery popover a specific view and <tt>arrowDirection</tt> can be provided to control the type of arrow and position of the gallery.
	 * @alias Titanium.Media.openPhotoGallery
	 */
	openPhotoGallery: function (options) { },
	/**
	 * remove a previously added event listener
	 * @param {String} name name of the event
	 * @param {Function} callback callback function passed in addEventListener
	 * @alias Titanium.Media.removeEventListener
	 */
	removeEventListener: function (name,callback) { },
	/**
	 * save media to photo gallery / camera roll
	 * @param {Object} media save the media passed to the cameras photo roll/media gallery. must be one of Blob object or File object or an error will be generated.
	 * @param {Object} callbacks pass a dictionary with the following supported keys: <tt>success</tt> a function that will be called when the save succeeds, and <tt>error</tt> a function that will be called upon anreceiving an error
	 * @alias Titanium.Media.saveToPhotoGallery
	 */
	saveToPhotoGallery: function (media,callbacks) { },
	/**
	 * show the camera
	 * @param {Object} options pass a dictionary with the following supported keys: <tt>success</tt> a function that will be called when the camera is completed, <tt>error</tt> a function that will be called upon receiving an error, <tt>cancel</tt> a function that will be called if the user presses the cancel button, <tt>autohide</tt> boolean if the camera should auto hide after the media capture is completed (defaults to true), <tt>animated</tt> boolean if the dialog should be animated (defaults to true) upon showing and hiding, <tt>saveToPhotoGallery</tt> boolean if the media should be saved to the photo gallery upon successful capture, <tt>allowEditing</tt> boolean if the media should be editable after capture in the UI interface, <tt>mediaTypes</tt> an array of media type constants supported by the capture device UI, <tt>videoMaximumDuration</tt> float duration on how long in milliseconds to allow capture before completing, <tt>videoQuality</tt> constant to indicate the video quality during capture, <tt>showControls</tt> boolean to indicate if the built-in UI controls should be displayed, <tt>overlay</tt> view which is added as an overlay to the camera UI (on top), <tt>transform</tt> an transformation matrix that applies to the camera UI transform.
	 * @alias Titanium.Media.showCamera
	 */
	showCamera: function (options) { },
	/**
	 * show the music library.  iPhone and iPad only.
	 * @param {Object} options pass a dictionary with the following supported keys: <tt>success</tt> a function that will be called when the camera is completed, <tt>error</tt> a function that will be called upon receiving an error, <tt>cancel</tt> a function that will be called if the user presses the cancel button, <tt>autohide</tt> boolean if the library listing should auto hide after selection is completed (defaults to true), <tt>animated</tt> boolean if the dialog should be animated (defaults to true) upon showing and hiding, <tt>mediaTypes</tt> an array of media type constants defining selectable media (see MUSIC_MEDIA_TYPE_* properties below) as either an array or a bitwise-or single value, <tt>allowMultipleSelections</tt> boolean whether or not more than one media selection is allowed
	 * @alias Titanium.Media.showMusicLibrary
	 */
	showMusicLibrary: function (options) { },
	/**
	 * start the monitoring of microphone sound level
	 * @alias Titanium.Media.startMicrophoneMonitor
	 */
	startMicrophoneMonitor: function () { },
	/**
	 * stop the monitoring of microphone sound level
	 * @alias Titanium.Media.stopMicrophoneMonitor
	 */
	stopMicrophoneMonitor: function () { },
	/**
	 * use the device camera to capture a photo. this must be called after calling showCamera and only when autohide is set to false. this method will cause the media capture device to capture a photo and call the success callback.
	 * @alias Titanium.Media.takePicture
	 */
	takePicture: function () { },
	/**
	 * take a screen shot of the visible UI on the device
	 * @param {Function} callback function that will be called upon capture. the event property <tt>media</tt> will contain an image Blob object of the screenshot
	 * @alias Titanium.Media.takeScreenshot
	 */
	takeScreenshot: function (callback) { },
	/**
	 * play a device vibration
	 * @alias Titanium.Media.vibrate
	 */
	vibrate: function () { },
};

/**
 * The AudioPlayer object is returned by Titanium.Media.createAudioPlayer and is used for streaming audio to the device and low-level control of the audio playback.
 * @since 0.9
 */
Titanium.Media.AudioPlayer = {
	/**
	 * current playback is in the buffering from the network state
	 * @alias Titanium.Media.AudioPlayer.STATE_BUFFERING
	 * @property {Integer}
	 */
	STATE_BUFFERING: 0,
	/**
	 * current playback is in the initialization state
	 * @alias Titanium.Media.AudioPlayer.STATE_INITIALIZED
	 * @property {Integer}
	 */
	STATE_INITIALIZED: 0,
	/**
	 * current playback is in the paused state
	 * @alias Titanium.Media.AudioPlayer.STATE_PAUSED
	 * @property {Integer}
	 */
	STATE_PAUSED: 0,
	/**
	 * current playback is in the playing state
	 * @alias Titanium.Media.AudioPlayer.STATE_PLAYING
	 * @property {Integer}
	 */
	STATE_PLAYING: 0,
	/**
	 * current playback is in the starting playback state
	 * @alias Titanium.Media.AudioPlayer.STATE_STARTING
	 * @property {Integer}
	 */
	STATE_STARTING: 0,
	/**
	 * current playback is in the stopped state
	 * @alias Titanium.Media.AudioPlayer.STATE_STOPPED
	 * @property {Integer}
	 */
	STATE_STOPPED: 0,
	/**
	 * current playback is in the stopping state
	 * @alias Titanium.Media.AudioPlayer.STATE_STOPPING
	 * @property {Integer}
	 */
	STATE_STOPPING: 0,
	/**
	 * current playback is in the waiting for audio data from the network state
	 * @alias Titanium.Media.AudioPlayer.STATE_WAITING_FOR_DATA
	 * @property {Integer}
	 */
	STATE_WAITING_FOR_DATA: 0,
	/**
	 * current playback is in the waiting for audio data to fill the queue state
	 * @alias Titanium.Media.AudioPlayer.STATE_WAITING_FOR_QUEUE
	 * @property {Integer}
	 */
	STATE_WAITING_FOR_QUEUE: 0,
	/**
	 * boolean to indicate if audio should continue playing even if Activity is paused (Android only as of 1.3.0)
	 * @alias Titanium.Media.AudioPlayer.allowBackground
	 * @property {Boolean}
	 */
	allowBackground: false,
	/**
	 * Get the boolean to indicate if audio should continue playing even if Activity is paused (Android only as of 1.3.0)
	 * @alias Titanium.Media.AudioPlayer.getAllowBackground
	 * @return {Boolean}
	 */
	getAllowBackground: function () { return allowBackground; },
	/**
	 * Set the boolean to indicate if audio should continue playing even if Activity is paused (Android only as of 1.3.0)
	 * @param {Boolean} value New value to set.
	 * @alias Titanium.Media.AudioPlayer.setAllowBackground
	 */
	setAllowBackground: function () { },
	/**
	 * bit rate of the current playback stream
	 * @alias Titanium.Media.AudioPlayer.bitRate
	 * @property {Double}
	 */
	bitRate: 0.0,
	/**
	 * Get the bit rate of the current playback stream
	 * @alias Titanium.Media.AudioPlayer.getBitRate
	 * @return {Double}
	 */
	getBitRate: function () { return bitRate; },
	/**
	 * Set the bit rate of the current playback stream
	 * @param {Double} value New value to set.
	 * @alias Titanium.Media.AudioPlayer.setBitRate
	 */
	setBitRate: function () { },
	/**
	 * returns boolean indicating if the playback is idle
	 * @alias Titanium.Media.AudioPlayer.idle
	 * @property {Boolean}
	 */
	idle: false,
	/**
	 * Get the returns boolean indicating if the playback is idle
	 * @alias Titanium.Media.AudioPlayer.getIdle
	 * @return {Boolean}
	 */
	getIdle: function () { return idle; },
	/**
	 * Set the returns boolean indicating if the playback is idle
	 * @param {Boolean} value New value to set.
	 * @alias Titanium.Media.AudioPlayer.setIdle
	 */
	setIdle: function () { },
	/**
	 * returns boolean indicating if the playback is paused
	 * @alias Titanium.Media.AudioPlayer.paused
	 * @property {Boolean}
	 */
	paused: false,
	/**
	 * Get the returns boolean indicating if the playback is paused
	 * @alias Titanium.Media.AudioPlayer.getPaused
	 * @return {Boolean}
	 */
	getPaused: function () { return paused; },
	/**
	 * Set the returns boolean indicating if the playback is paused
	 * @param {Boolean} value New value to set.
	 * @alias Titanium.Media.AudioPlayer.setPaused
	 */
	setPaused: function () { },
	/**
	 * returns boolean indicating if the playback is streaming audio
	 * @alias Titanium.Media.AudioPlayer.playing
	 * @property {Boolean}
	 */
	playing: false,
	/**
	 * Get the returns boolean indicating if the playback is streaming audio
	 * @alias Titanium.Media.AudioPlayer.getPlaying
	 * @return {Boolean}
	 */
	getPlaying: function () { return playing; },
	/**
	 * Set the returns boolean indicating if the playback is streaming audio
	 * @param {Boolean} value New value to set.
	 * @alias Titanium.Media.AudioPlayer.setPlaying
	 */
	setPlaying: function () { },
	/**
	 * returns the current playback progress. Will return zero if sampleRate has not yet been detected
	 * @alias Titanium.Media.AudioPlayer.progress
	 * @property {Double}
	 */
	progress: 0.0,
	/**
	 * Get the returns the current playback progress. Will return zero if sampleRate has not yet been detected
	 * @alias Titanium.Media.AudioPlayer.getProgress
	 * @return {Double}
	 */
	getProgress: function () { return progress; },
	/**
	 * Set the returns the current playback progress. Will return zero if sampleRate has not yet been detected
	 * @param {Double} value New value to set.
	 * @alias Titanium.Media.AudioPlayer.setProgress
	 */
	setProgress: function () { },
	/**
	 * returns int for the current state of playback
	 * @alias Titanium.Media.AudioPlayer.state
	 * @property {Integer}
	 */
	state: 0,
	/**
	 * Get the returns int for the current state of playback
	 * @alias Titanium.Media.AudioPlayer.getState
	 * @return {Integer}
	 */
	getState: function () { return state; },
	/**
	 * Set the returns int for the current state of playback
	 * @param {Integer} value New value to set.
	 * @alias Titanium.Media.AudioPlayer.setState
	 */
	setState: function () { },
	/**
	 * returns the url for the current playback
	 * @alias Titanium.Media.AudioPlayer.url
	 * @property {String}
	 */
	url: '',
	/**
	 * Get the returns the url for the current playback
	 * @alias Titanium.Media.AudioPlayer.getUrl
	 * @return {String}
	 */
	getUrl: function () { return url; },
	/**
	 * Set the returns the url for the current playback
	 * @param {String} value New value to set.
	 * @alias Titanium.Media.AudioPlayer.setUrl
	 */
	setUrl: function () { },
	/**
	 * returns boolean indicating if the playback is waiting for audio data from the network
	 * @alias Titanium.Media.AudioPlayer.waiting
	 * @property {Boolean}
	 */
	waiting: false,
	/**
	 * Get the returns boolean indicating if the playback is waiting for audio data from the network
	 * @alias Titanium.Media.AudioPlayer.getWaiting
	 * @return {Boolean}
	 */
	getWaiting: function () { return waiting; },
	/**
	 * Set the returns boolean indicating if the playback is waiting for audio data from the network
	 * @param {Boolean} value New value to set.
	 * @alias Titanium.Media.AudioPlayer.setWaiting
	 */
	setWaiting: function () { },
	/**
	 * add an event listener for the instance to receive view triggered events
	 * @param {String} name name of the event
	 * @param {Function} callback callback function to invoke when the event is fired
	 * @alias Titanium.Media.AudioPlayer.addEventListener
	 */
	addEventListener: function (name,callback) { },
	/**
	 * fire a synthesized event to the views listener
	 * @param {String} name name of the event
	 * @param {Object} event event object
	 * @alias Titanium.Media.AudioPlayer.fireEvent
	 */
	fireEvent: function (name,event) { },
	/**
	 * pause playback
	 * @alias Titanium.Media.AudioPlayer.pause
	 */
	pause: function () { },
	/**
	 * remove a previously added event listener
	 * @param {String} name name of the event
	 * @param {Function} callback callback function passed in addEventListener
	 * @alias Titanium.Media.AudioPlayer.removeEventListener
	 */
	removeEventListener: function (name,callback) { },
	/**
	 * control the playback of the audio
	 * @param {Boolean} paused pass true to pause the current playback temporarily, false to unpause it
	 * @alias Titanium.Media.AudioPlayer.setPaused
	 */
	setPaused: function (paused) { },
	/**
	 * change the url of the audio playback
	 * @param {String} url the new url
	 * @alias Titanium.Media.AudioPlayer.setUrl
	 */
	setUrl: function (url) { },
	/**
	 * start playback
	 * @alias Titanium.Media.AudioPlayer.start
	 */
	start: function () { },
	/**
	 * convert a state into a textual description suitable for display
	 * @alias Titanium.Media.AudioPlayer.stateDescription
	 * @return {String}
	 */
	stateDescription: function () { return ''; },
	/**
	 * stop playback
	 * @alias Titanium.Media.AudioPlayer.stop
	 */
	stop: function () { },
};

/**
 * The AudioRecorder object is returned by Titanium.Media.createAudioRecorder and is used for recording audio from the device microphone.
 * @since 0.9
 */
Titanium.Media.AudioRecorder = {
	/**
	 * audio compression constant to be used for the recording
	 * @alias Titanium.Media.AudioRecorder.compression
	 * @property {Integer}
	 */
	compression: 0,
	/**
	 * Get the audio compression constant to be used for the recording
	 * @alias Titanium.Media.AudioRecorder.getCompression
	 * @return {Integer}
	 */
	getCompression: function () { return compression; },
	/**
	 * Set the audio compression constant to be used for the recording
	 * @param {Integer} value New value to set.
	 * @alias Titanium.Media.AudioRecorder.setCompression
	 */
	setCompression: function () { },
	/**
	 * audio format constant for used for the recording
	 * @alias Titanium.Media.AudioRecorder.format
	 * @property {Integer}
	 */
	format: 0,
	/**
	 * Get the audio format constant for used for the recording
	 * @alias Titanium.Media.AudioRecorder.getFormat
	 * @return {Integer}
	 */
	getFormat: function () { return format; },
	/**
	 * Set the audio format constant for used for the recording
	 * @param {Integer} value New value to set.
	 * @alias Titanium.Media.AudioRecorder.setFormat
	 */
	setFormat: function () { },
	/**
	 * readonly property to indicate if paused
	 * @alias Titanium.Media.AudioRecorder.paused
	 * @property {Boolean}
	 */
	paused: false,
	/**
	 * Get the readonly property to indicate if paused
	 * @alias Titanium.Media.AudioRecorder.getPaused
	 * @return {Boolean}
	 */
	getPaused: function () { return paused; },
	/**
	 * Set the readonly property to indicate if paused
	 * @param {Boolean} value New value to set.
	 * @alias Titanium.Media.AudioRecorder.setPaused
	 */
	setPaused: function () { },
	/**
	 * readonly property to indicate if recording
	 * @alias Titanium.Media.AudioRecorder.recording
	 * @property {Boolean}
	 */
	recording: false,
	/**
	 * Get the readonly property to indicate if recording
	 * @alias Titanium.Media.AudioRecorder.getRecording
	 * @return {Boolean}
	 */
	getRecording: function () { return recording; },
	/**
	 * Set the readonly property to indicate if recording
	 * @param {Boolean} value New value to set.
	 * @alias Titanium.Media.AudioRecorder.setRecording
	 */
	setRecording: function () { },
	/**
	 * readonly property to indicate if stopped
	 * @alias Titanium.Media.AudioRecorder.stopped
	 * @property {Boolean}
	 */
	stopped: false,
	/**
	 * Get the readonly property to indicate if stopped
	 * @alias Titanium.Media.AudioRecorder.getStopped
	 * @return {Boolean}
	 */
	getStopped: function () { return stopped; },
	/**
	 * Set the readonly property to indicate if stopped
	 * @param {Boolean} value New value to set.
	 * @alias Titanium.Media.AudioRecorder.setStopped
	 */
	setStopped: function () { },
	/**
	 * add an event listener for the instance to receive view triggered events
	 * @param {String} name name of the event
	 * @param {Function} callback callback function to invoke when the event is fired
	 * @alias Titanium.Media.AudioRecorder.addEventListener
	 */
	addEventListener: function (name,callback) { },
	/**
	 * fire a synthesized event to the views listener
	 * @param {String} name name of the event
	 * @param {Object} event event object
	 * @alias Titanium.Media.AudioRecorder.fireEvent
	 */
	fireEvent: function (name,event) { },
	/**
	 * called to temporarily pause recording
	 * @alias Titanium.Media.AudioRecorder.pause
	 */
	pause: function () { },
	/**
	 * remove a previously added event listener
	 * @param {String} name name of the event
	 * @param {Function} callback callback function passed in addEventListener
	 * @alias Titanium.Media.AudioRecorder.removeEventListener
	 */
	removeEventListener: function (name,callback) { },
	/**
	 * called to resume audio recording
	 * @alias Titanium.Media.AudioRecorder.resume
	 */
	resume: function () { },
	/**
	 * called to start recording audio
	 * @alias Titanium.Media.AudioRecorder.start
	 */
	start: function () { },
	/**
	 * called to stop recording audio
	 * @alias Titanium.Media.AudioRecorder.stop
	 */
	stop: function () { },
};

/**
 * A representation of a media item returned by the music picker as part of the items array in the dictionary passed to its success function.
 * @since 1.4.0
 */
Titanium.Media.Item = {
	/**
	 * the artist for the album of the item
	 * @alias Titanium.Media.Item.albumArtist
	 * @property {String}
	 */
	albumArtist: '',
	/**
	 * Get the the artist for the album of the item
	 * @alias Titanium.Media.Item.getAlbumArtist
	 * @return {String}
	 */
	getAlbumArtist: function () { return albumArtist; },
	/**
	 * Set the the artist for the album of the item
	 * @param {String} value New value to set.
	 * @alias Titanium.Media.Item.setAlbumArtist
	 */
	setAlbumArtist: function () { },
	/**
	 * the album title of the item
	 * @alias Titanium.Media.Item.albumTitle
	 * @property {String}
	 */
	albumTitle: '',
	/**
	 * Get the the album title of the item
	 * @alias Titanium.Media.Item.getAlbumTitle
	 * @return {String}
	 */
	getAlbumTitle: function () { return albumTitle; },
	/**
	 * Set the the album title of the item
	 * @param {String} value New value to set.
	 * @alias Titanium.Media.Item.setAlbumTitle
	 */
	setAlbumTitle: function () { },
	/**
	 * the number of tracks for the album of the item
	 * @alias Titanium.Media.Item.albumTrackCount
	 * @property {Integer}
	 */
	albumTrackCount: 0,
	/**
	 * Get the the number of tracks for the album of the item
	 * @alias Titanium.Media.Item.getAlbumTrackCount
	 * @return {Integer}
	 */
	getAlbumTrackCount: function () { return albumTrackCount; },
	/**
	 * Set the the number of tracks for the album of the item
	 * @param {Integer} value New value to set.
	 * @alias Titanium.Media.Item.setAlbumTrackCount
	 */
	setAlbumTrackCount: function () { },
	/**
	 * the track number of the item
	 * @alias Titanium.Media.Item.albumTrackNumber
	 * @property {Integer}
	 */
	albumTrackNumber: 0,
	/**
	 * Get the the track number of the item
	 * @alias Titanium.Media.Item.getAlbumTrackNumber
	 * @return {Integer}
	 */
	getAlbumTrackNumber: function () { return albumTrackNumber; },
	/**
	 * Set the the track number of the item
	 * @param {Integer} value New value to set.
	 * @alias Titanium.Media.Item.setAlbumTrackNumber
	 */
	setAlbumTrackNumber: function () { },
	/**
	 * the artist of the item
	 * @alias Titanium.Media.Item.artist
	 * @property {String}
	 */
	artist: '',
	/**
	 * Get the the artist of the item
	 * @alias Titanium.Media.Item.getArtist
	 * @return {String}
	 */
	getArtist: function () { return artist; },
	/**
	 * Set the the artist of the item
	 * @param {String} value New value to set.
	 * @alias Titanium.Media.Item.setArtist
	 */
	setArtist: function () { },
	/**
	 * a blob object containing the image for the item's artwork, or null if none
	 * @alias Titanium.Media.Item.artwork
	 * @property {Object}
	 */
	artwork: {},
	/**
	 * Get the a blob object containing the image for the item's artwork, or null if none
	 * @alias Titanium.Media.Item.getArtwork
	 * @return {Object}
	 */
	getArtwork: function () { return artwork; },
	/**
	 * Set the a blob object containing the image for the item's artwork, or null if none
	 * @param {Object} value New value to set.
	 * @alias Titanium.Media.Item.setArtwork
	 */
	setArtwork: function () { },
	/**
	 * the composer of the item
	 * @alias Titanium.Media.Item.composer
	 * @property {String}
	 */
	composer: '',
	/**
	 * Get the the composer of the item
	 * @alias Titanium.Media.Item.getComposer
	 * @return {String}
	 */
	getComposer: function () { return composer; },
	/**
	 * Set the the composer of the item
	 * @param {String} value New value to set.
	 * @alias Titanium.Media.Item.setComposer
	 */
	setComposer: function () { },
	/**
	 * the total number of discs of the item
	 * @alias Titanium.Media.Item.discCount
	 * @property {Integer}
	 */
	discCount: 0,
	/**
	 * Get the the total number of discs of the item
	 * @alias Titanium.Media.Item.getDiscCount
	 * @return {Integer}
	 */
	getDiscCount: function () { return discCount; },
	/**
	 * Set the the total number of discs of the item
	 * @param {Integer} value New value to set.
	 * @alias Titanium.Media.Item.setDiscCount
	 */
	setDiscCount: function () { },
	/**
	 * the disc number of the item
	 * @alias Titanium.Media.Item.discNumber
	 * @property {Integer}
	 */
	discNumber: 0,
	/**
	 * Get the the disc number of the item
	 * @alias Titanium.Media.Item.getDiscNumber
	 * @return {Integer}
	 */
	getDiscNumber: function () { return discNumber; },
	/**
	 * Set the the disc number of the item
	 * @param {Integer} value New value to set.
	 * @alias Titanium.Media.Item.setDiscNumber
	 */
	setDiscNumber: function () { },
	/**
	 * the genre of the item
	 * @alias Titanium.Media.Item.genre
	 * @property {String}
	 */
	genre: '',
	/**
	 * Get the the genre of the item
	 * @alias Titanium.Media.Item.getGenre
	 * @return {String}
	 */
	getGenre: function () { return genre; },
	/**
	 * Set the the genre of the item
	 * @param {String} value New value to set.
	 * @alias Titanium.Media.Item.setGenre
	 */
	setGenre: function () { },
	/**
	 * true if the item is part of a compilation album
	 * @alias Titanium.Media.Item.isCompilation
	 * @property {Boolean}
	 */
	isCompilation: false,
	/**
	 * Get the true if the item is part of a compilation album
	 * @alias Titanium.Media.Item.getIsCompilation
	 * @return {Boolean}
	 */
	getIsCompilation: function () { return isCompilation; },
	/**
	 * Set the true if the item is part of a compilation album
	 * @param {Boolean} value New value to set.
	 * @alias Titanium.Media.Item.setIsCompilation
	 */
	setIsCompilation: function () { },
	/**
	 * the lyrics of the item
	 * @alias Titanium.Media.Item.lyrics
	 * @property {String}
	 */
	lyrics: '',
	/**
	 * Get the the lyrics of the item
	 * @alias Titanium.Media.Item.getLyrics
	 * @return {String}
	 */
	getLyrics: function () { return lyrics; },
	/**
	 * Set the the lyrics of the item
	 * @param {String} value New value to set.
	 * @alias Titanium.Media.Item.setLyrics
	 */
	setLyrics: function () { },
	/**
	 * the type of the item
	 * @alias Titanium.Media.Item.mediaType
	 * @property {Integer}
	 */
	mediaType: 0,
	/**
	 * Get the the type of the item
	 * @alias Titanium.Media.Item.getMediaType
	 * @return {Integer}
	 */
	getMediaType: function () { return mediaType; },
	/**
	 * Set the the type of the item
	 * @param {Integer} value New value to set.
	 * @alias Titanium.Media.Item.setMediaType
	 */
	setMediaType: function () { },
	/**
	 * the number of times the item has been played
	 * @alias Titanium.Media.Item.playCount
	 * @property {Integer}
	 */
	playCount: 0,
	/**
	 * Get the the number of times the item has been played
	 * @alias Titanium.Media.Item.getPlayCount
	 * @return {Integer}
	 */
	getPlayCount: function () { return playCount; },
	/**
	 * Set the the number of times the item has been played
	 * @param {Integer} value New value to set.
	 * @alias Titanium.Media.Item.setPlayCount
	 */
	setPlayCount: function () { },
	/**
	 * the length (in seconds) of the item
	 * @alias Titanium.Media.Item.playbackDuration
	 * @property {Double}
	 */
	playbackDuration: 0.0,
	/**
	 * Get the the length (in seconds) of the item
	 * @alias Titanium.Media.Item.getPlaybackDuration
	 * @return {Double}
	 */
	getPlaybackDuration: function () { return playbackDuration; },
	/**
	 * Set the the length (in seconds) of the item
	 * @param {Double} value New value to set.
	 * @alias Titanium.Media.Item.setPlaybackDuration
	 */
	setPlaybackDuration: function () { },
	/**
	 * the title of a podcast item.  Only for media types of Titanium.Media.MUSIC_MEDIA_TYPE_PODCAST.
	 * @alias Titanium.Media.Item.podcastTitle
	 * @property {String}
	 */
	podcastTitle: '',
	/**
	 * Get the the title of a podcast item.  Only for media types of Titanium.Media.MUSIC_MEDIA_TYPE_PODCAST.
	 * @alias Titanium.Media.Item.getPodcastTitle
	 * @return {String}
	 */
	getPodcastTitle: function () { return podcastTitle; },
	/**
	 * Set the the title of a podcast item.  Only for media types of Titanium.Media.MUSIC_MEDIA_TYPE_PODCAST.
	 * @param {String} value New value to set.
	 * @alias Titanium.Media.Item.setPodcastTitle
	 */
	setPodcastTitle: function () { },
	/**
	 * the rating of the item
	 * @alias Titanium.Media.Item.rating
	 * @property {Integer}
	 */
	rating: 0,
	/**
	 * Get the the rating of the item
	 * @alias Titanium.Media.Item.getRating
	 * @return {Integer}
	 */
	getRating: function () { return rating; },
	/**
	 * Set the the rating of the item
	 * @param {Integer} value New value to set.
	 * @alias Titanium.Media.Item.setRating
	 */
	setRating: function () { },
	/**
	 * the number of times the item has been skipped
	 * @alias Titanium.Media.Item.skipCount
	 * @property {Integer}
	 */
	skipCount: 0,
	/**
	 * Get the the number of times the item has been skipped
	 * @alias Titanium.Media.Item.getSkipCount
	 * @return {Integer}
	 */
	getSkipCount: function () { return skipCount; },
	/**
	 * Set the the number of times the item has been skipped
	 * @param {Integer} value New value to set.
	 * @alias Titanium.Media.Item.setSkipCount
	 */
	setSkipCount: function () { },
	/**
	 * the title of the item
	 * @alias Titanium.Media.Item.title
	 * @property {String}
	 */
	title: '',
	/**
	 * Get the the title of the item
	 * @alias Titanium.Media.Item.getTitle
	 * @return {String}
	 */
	getTitle: function () { return title; },
	/**
	 * Set the the title of the item
	 * @param {String} value New value to set.
	 * @alias Titanium.Media.Item.setTitle
	 */
	setTitle: function () { },
};

/**
 * The MusicPlayer instance returned from Titanium.Media.createMusicPlayer.  This object represents a music controller.
 * @since 1.4.0
 */
Titanium.Media.MusicPlayer = {
	/**
	 * the current point in song playback
	 * @alias Titanium.Media.MusicPlayer.currentPlaybackTime
	 * @property {Double}
	 */
	currentPlaybackTime: 0.0,
	/**
	 * Get the the current point in song playback
	 * @alias Titanium.Media.MusicPlayer.getCurrentPlaybackTime
	 * @return {Double}
	 */
	getCurrentPlaybackTime: function () { return currentPlaybackTime; },
	/**
	 * Set the the current point in song playback
	 * @param {Double} value New value to set.
	 * @alias Titanium.Media.MusicPlayer.setCurrentPlaybackTime
	 */
	setCurrentPlaybackTime: function () { },
	/**
	 * an Item object which indicates the currently playing media
	 * @alias Titanium.Media.MusicPlayer.nowPlaying
	 * @property {Object}
	 */
	nowPlaying: {},
	/**
	 * Get the an Item object which indicates the currently playing media
	 * @alias Titanium.Media.MusicPlayer.getNowPlaying
	 * @return {Object}
	 */
	getNowPlaying: function () { return nowPlaying; },
	/**
	 * Set the an Item object which indicates the currently playing media
	 * @param {Object} value New value to set.
	 * @alias Titanium.Media.MusicPlayer.setNowPlaying
	 */
	setNowPlaying: function () { },
	/**
	 * the playback state; one of Titanium.Media.MUSIC_PLAYER_STATE_STOPPED, Titanium.Media.MUSIC_PLAYER_STATE_PLAYING, Titanium.Media.MUSIC_PLAYER_STATE_PAUSED, Titanium.Media.MUSIC_PLAYER_STATE_INTERRUPTED, Titanium.Media.MUSIC_PLAYER_STATE_SKEEK_FORWARD, Titanium.Media.MUSIC_PLAYER_STATE_SEEK_BACKWARD
	 * @alias Titanium.Media.MusicPlayer.playbackState
	 * @property {Integer}
	 */
	playbackState: 0,
	/**
	 * Get the the playback state; one of Titanium.Media.MUSIC_PLAYER_STATE_STOPPED, Titanium.Media.MUSIC_PLAYER_STATE_PLAYING, Titanium.Media.MUSIC_PLAYER_STATE_PAUSED, Titanium.Media.MUSIC_PLAYER_STATE_INTERRUPTED, Titanium.Media.MUSIC_PLAYER_STATE_SKEEK_FORWARD, Titanium.Media.MUSIC_PLAYER_STATE_SEEK_BACKWARD
	 * @alias Titanium.Media.MusicPlayer.getPlaybackState
	 * @return {Integer}
	 */
	getPlaybackState: function () { return playbackState; },
	/**
	 * Set the the playback state; one of Titanium.Media.MUSIC_PLAYER_STATE_STOPPED, Titanium.Media.MUSIC_PLAYER_STATE_PLAYING, Titanium.Media.MUSIC_PLAYER_STATE_PAUSED, Titanium.Media.MUSIC_PLAYER_STATE_INTERRUPTED, Titanium.Media.MUSIC_PLAYER_STATE_SKEEK_FORWARD, Titanium.Media.MUSIC_PLAYER_STATE_SEEK_BACKWARD
	 * @param {Integer} value New value to set.
	 * @alias Titanium.Media.MusicPlayer.setPlaybackState
	 */
	setPlaybackState: function () { },
	/**
	 * the repeat setting; one of Titanium.Media.MUSIC_PLAYER_REPEAT_DEFAULT, Titanium.Media.MUSIC_PLAYER_REPEAT_NONE, Titanium.Media.MUSIC_PLAYER_REPEAT_ONE, Titanium.Media.MUSIC_PLAYER_REPEAT_ALL
	 * @alias Titanium.Media.MusicPlayer.repeatMode
	 * @property {Integer}
	 */
	repeatMode: 0,
	/**
	 * Get the the repeat setting; one of Titanium.Media.MUSIC_PLAYER_REPEAT_DEFAULT, Titanium.Media.MUSIC_PLAYER_REPEAT_NONE, Titanium.Media.MUSIC_PLAYER_REPEAT_ONE, Titanium.Media.MUSIC_PLAYER_REPEAT_ALL
	 * @alias Titanium.Media.MusicPlayer.getRepeatMode
	 * @return {Integer}
	 */
	getRepeatMode: function () { return repeatMode; },
	/**
	 * Set the the repeat setting; one of Titanium.Media.MUSIC_PLAYER_REPEAT_DEFAULT, Titanium.Media.MUSIC_PLAYER_REPEAT_NONE, Titanium.Media.MUSIC_PLAYER_REPEAT_ONE, Titanium.Media.MUSIC_PLAYER_REPEAT_ALL
	 * @param {Integer} value New value to set.
	 * @alias Titanium.Media.MusicPlayer.setRepeatMode
	 */
	setRepeatMode: function () { },
	/**
	 * the shuffle setting; one of Titanium.Media.MUSIC_PLAYER_SHUFFLE_DEFAULT, Titanium.Media.MUSIC_PLAYER_SHUFFLE_NONE, Titanium.Media.MUSIC_PLAYER_SHUFFLE_SONGS, Titanium.Media.MUSIC_PLAYER_SHUFFLE_ALBUMS
	 * @alias Titanium.Media.MusicPlayer.shuffleMode
	 * @property {Integer}
	 */
	shuffleMode: 0,
	/**
	 * Get the the shuffle setting; one of Titanium.Media.MUSIC_PLAYER_SHUFFLE_DEFAULT, Titanium.Media.MUSIC_PLAYER_SHUFFLE_NONE, Titanium.Media.MUSIC_PLAYER_SHUFFLE_SONGS, Titanium.Media.MUSIC_PLAYER_SHUFFLE_ALBUMS
	 * @alias Titanium.Media.MusicPlayer.getShuffleMode
	 * @return {Integer}
	 */
	getShuffleMode: function () { return shuffleMode; },
	/**
	 * Set the the shuffle setting; one of Titanium.Media.MUSIC_PLAYER_SHUFFLE_DEFAULT, Titanium.Media.MUSIC_PLAYER_SHUFFLE_NONE, Titanium.Media.MUSIC_PLAYER_SHUFFLE_SONGS, Titanium.Media.MUSIC_PLAYER_SHUFFLE_ALBUMS
	 * @param {Integer} value New value to set.
	 * @alias Titanium.Media.MusicPlayer.setShuffleMode
	 */
	setShuffleMode: function () { },
	/**
	 * a value between 0.0 and 1.0 indicating the volume level for the music player
	 * @alias Titanium.Media.MusicPlayer.volume
	 * @property {Float}
	 */
	volume: 0.0,
	/**
	 * Get the a value between 0.0 and 1.0 indicating the volume level for the music player
	 * @alias Titanium.Media.MusicPlayer.getVolume
	 * @return {Float}
	 */
	getVolume: function () { return volume; },
	/**
	 * Set the a value between 0.0 and 1.0 indicating the volume level for the music player
	 * @param {Float} value New value to set.
	 * @alias Titanium.Media.MusicPlayer.setVolume
	 */
	setVolume: function () { },
	/**
	 * pause playback
	 * @alias Titanium.Media.MusicPlayer.pause
	 */
	pause: function () { },
	/**
	 * begin playback
	 * @alias Titanium.Media.MusicPlayer.play
	 */
	play: function () { },
	/**
	 * seek backward in the currently playing media
	 * @alias Titanium.Media.MusicPlayer.seekBackward
	 */
	seekBackward: function () { },
	/**
	 * seek forward in the currently playing media
	 * @alias Titanium.Media.MusicPlayer.seekForward
	 */
	seekForward: function () { },
	/**
	 * set the media queue
	 * @param {Object} queue a queue representation to set the player queue to.  Can be any of: A dictionary with an <tt>items</tt> key that is an array of <a href="Titanium.Media.Item-object.html">Titanium.Media.Item</a> objects, an array of <a href="Titanium.Media.Item-object.html">Titanium.Media.Item</a> objects, or a single <a href="Titanium.Media.Item-object.html">Titanium.Media.Item</a> object.
	 * @alias Titanium.Media.MusicPlayer.setQueue
	 */
	setQueue: function (queue) { },
	/**
	 * skip to the beginning of the currently playing media
	 * @alias Titanium.Media.MusicPlayer.skipToBeginning
	 */
	skipToBeginning: function () { },
	/**
	 * skip to the next media in the queue
	 * @alias Titanium.Media.MusicPlayer.skipToNext
	 */
	skipToNext: function () { },
	/**
	 * skip to the previous media in the queue
	 * @alias Titanium.Media.MusicPlayer.skipToPrevious
	 */
	skipToPrevious: function () { },
	/**
	 * stop playback
	 * @alias Titanium.Media.MusicPlayer.stop
	 */
	stop: function () { },
	/**
	 * end a seek operation
	 * @alias Titanium.Media.MusicPlayer.stopSeeking
	 */
	stopSeeking: function () { },
};

/**
 * The Sound object is returned by Titanium.Media.createSound and is useful for playing basic sounds. The Sound object loads the entire media resource in memory before playing.  If you need to support streaming, use the Titanium.Media.createAudioPlayer API.
 * @since 0.8
 */
Titanium.Media.Sound = {
	/**
	 * boolean to indicate if audio should continue playing even if Activity is paused (Android only as of 1.3.0)
	 * @alias Titanium.Media.Sound.allowBackground
	 * @property {Boolean}
	 */
	allowBackground: false,
	/**
	 * Get the boolean to indicate if audio should continue playing even if Activity is paused (Android only as of 1.3.0)
	 * @alias Titanium.Media.Sound.getAllowBackground
	 * @return {Boolean}
	 */
	getAllowBackground: function () { return allowBackground; },
	/**
	 * Set the boolean to indicate if audio should continue playing even if Activity is paused (Android only as of 1.3.0)
	 * @param {Boolean} value New value to set.
	 * @alias Titanium.Media.Sound.setAllowBackground
	 */
	setAllowBackground: function () { },
	/**
	 * the duration of the audio.
	 * @alias Titanium.Media.Sound.duration
	 * @property {Float}
	 */
	duration: 0.0,
	/**
	 * Get the the duration of the audio.
	 * @alias Titanium.Media.Sound.getDuration
	 * @return {Float}
	 */
	getDuration: function () { return duration; },
	/**
	 * Set the the duration of the audio.
	 * @param {Float} value New value to set.
	 * @alias Titanium.Media.Sound.setDuration
	 */
	setDuration: function () { },
	/**
	 * boolean to indicate if the audio should loop upon completion
	 * @alias Titanium.Media.Sound.looping
	 * @property {Boolean}
	 */
	looping: false,
	/**
	 * Get the boolean to indicate if the audio should loop upon completion
	 * @alias Titanium.Media.Sound.getLooping
	 * @return {Boolean}
	 */
	getLooping: function () { return looping; },
	/**
	 * Set the boolean to indicate if the audio should loop upon completion
	 * @param {Boolean} value New value to set.
	 * @alias Titanium.Media.Sound.setLooping
	 */
	setLooping: function () { },
	/**
	 * boolean to indicate if the audio is paused
	 * @alias Titanium.Media.Sound.paused
	 * @property {Boolean}
	 */
	paused: false,
	/**
	 * Get the boolean to indicate if the audio is paused
	 * @alias Titanium.Media.Sound.getPaused
	 * @return {Boolean}
	 */
	getPaused: function () { return paused; },
	/**
	 * Set the boolean to indicate if the audio is paused
	 * @param {Boolean} value New value to set.
	 * @alias Titanium.Media.Sound.setPaused
	 */
	setPaused: function () { },
	/**
	 * boolean to indicate if the audio is playing
	 * @alias Titanium.Media.Sound.playing
	 * @property {Boolean}
	 */
	playing: false,
	/**
	 * Get the boolean to indicate if the audio is playing
	 * @alias Titanium.Media.Sound.getPlaying
	 * @return {Boolean}
	 */
	getPlaying: function () { return playing; },
	/**
	 * Set the boolean to indicate if the audio is playing
	 * @param {Boolean} value New value to set.
	 * @alias Titanium.Media.Sound.setPlaying
	 */
	setPlaying: function () { },
	/**
	 * the time position of the audio.
	 * @alias Titanium.Media.Sound.time
	 * @property {Float}
	 */
	time: 0.0,
	/**
	 * Get the the time position of the audio.
	 * @alias Titanium.Media.Sound.getTime
	 * @return {Float}
	 */
	getTime: function () { return time; },
	/**
	 * Set the the time position of the audio.
	 * @param {Float} value New value to set.
	 * @alias Titanium.Media.Sound.setTime
	 */
	setTime: function () { },
	/**
	 * url to the audio
	 * @alias Titanium.Media.Sound.url
	 * @property {String}
	 */
	url: '',
	/**
	 * Get the url to the audio
	 * @alias Titanium.Media.Sound.getUrl
	 * @return {String}
	 */
	getUrl: function () { return url; },
	/**
	 * Set the url to the audio
	 * @param {String} value New value to set.
	 * @alias Titanium.Media.Sound.setUrl
	 */
	setUrl: function () { },
	/**
	 * the volume of the audio. this volume only affects the media, not the device audio.
	 * @alias Titanium.Media.Sound.volume
	 * @property {Float}
	 */
	volume: 0.0,
	/**
	 * Get the the volume of the audio. this volume only affects the media, not the device audio.
	 * @alias Titanium.Media.Sound.getVolume
	 * @return {Float}
	 */
	getVolume: function () { return volume; },
	/**
	 * Set the the volume of the audio. this volume only affects the media, not the device audio.
	 * @param {Float} value New value to set.
	 * @alias Titanium.Media.Sound.setVolume
	 */
	setVolume: function () { },
	/**
	 * add an event listener for the instance to receive view triggered events
	 * @param {String} name name of the event
	 * @param {Function} callback callback function to invoke when the event is fired
	 * @alias Titanium.Media.Sound.addEventListener
	 */
	addEventListener: function (name,callback) { },
	/**
	 * fire a synthesized event to the views listener
	 * @param {String} name name of the event
	 * @param {Object} event event object
	 * @alias Titanium.Media.Sound.fireEvent
	 */
	fireEvent: function (name,event) { },
	/**
	 * return the current time position of the audio
	 * @alias Titanium.Media.Sound.getTime
	 * @return {Double}
	 */
	getTime: function () { return 0.0; },
	/**
	 * return the value of the audio
	 * @alias Titanium.Media.Sound.getVolume
	 * @return {Float}
	 */
	getVolume: function () { return 0.0; },
	/**
	 * returns true if the audio will loop
	 * @alias Titanium.Media.Sound.isLooping
	 * @return {Boolean}
	 */
	isLooping: function () { return false; },
	/**
	 * returns true if the audio is paused
	 * @alias Titanium.Media.Sound.isPaused
	 * @return {Boolean}
	 */
	isPaused: function () { return false; },
	/**
	 * returns true if the audio is playing
	 * @alias Titanium.Media.Sound.isPlaying
	 * @return {Boolean}
	 */
	isPlaying: function () { return false; },
	/**
	 * temporarily pause the audio. to resume, invoke play.
	 * @alias Titanium.Media.Sound.pause
	 */
	pause: function () { },
	/**
	 * starting playing the source. if paused, will resume.
	 * @alias Titanium.Media.Sound.play
	 */
	play: function () { },
	/**
	 * release all internal resources. this is typically unnecessary but can be useful if you load a large audio file in app.js and play it only once and you would like to release all releases after your final play to reduce memory.
	 * @alias Titanium.Media.Sound.release
	 */
	release: function () { },
	/**
	 * remove a previously added event listener
	 * @param {String} name name of the event
	 * @param {Function} callback callback function passed in addEventListener
	 * @alias Titanium.Media.Sound.removeEventListener
	 */
	removeEventListener: function (name,callback) { },
	/**
	 * reset the audio to the beginning.
	 * @alias Titanium.Media.Sound.reset
	 */
	reset: function () { },
	/**
	 * control whether the audio should loop
	 * @alias Titanium.Media.Sound.setLooping
	 */
	setLooping: function () { },
	/**
	 * control whether the audio is paused
	 * @alias Titanium.Media.Sound.setPaused
	 */
	setPaused: function () { },
	/**
	 * set the time position of the audio
	 * @alias Titanium.Media.Sound.setTime
	 */
	setTime: function () { },
	/**
	 * set the volume of the audio
	 * @alias Titanium.Media.Sound.setVolume
	 */
	setVolume: function () { },
	/**
	 * stop playing the audio and reset it to the beginning.
	 * @alias Titanium.Media.Sound.stop
	 */
	stop: function () { },
};

/**
 * The VideoPlayer object is returned by Titanium.Media.createVideoPlayer and is useful for playing videos.
 * @since 0.9
 */
Titanium.Media.VideoPlayer = {
	/**
	 * a dictionary with properties x and y to indicate the anchor point value. anchor specifies the position by which animation should occur. center is 0.5, 0.5
	 * @alias Titanium.Media.VideoPlayer.anchorPoint
	 * @property {Object}
	 */
	anchorPoint: {},
	/**
	 * Get the a dictionary with properties x and y to indicate the anchor point value. anchor specifies the position by which animation should occur. center is 0.5, 0.5
	 * @alias Titanium.Media.VideoPlayer.getAnchorPoint
	 * @return {Object}
	 */
	getAnchorPoint: function () { return anchorPoint; },
	/**
	 * Set the a dictionary with properties x and y to indicate the anchor point value. anchor specifies the position by which animation should occur. center is 0.5, 0.5
	 * @param {Object} value New value to set.
	 * @alias Titanium.Media.VideoPlayer.setAnchorPoint
	 */
	setAnchorPoint: function () { },
	/**
	 * read-only object with x and y properties of where the view is during animation
	 * @alias Titanium.Media.VideoPlayer.animatedCenterPoint
	 * @property {Object}
	 */
	animatedCenterPoint: {},
	/**
	 * Get the read-only object with x and y properties of where the view is during animation
	 * @alias Titanium.Media.VideoPlayer.getAnimatedCenterPoint
	 * @return {Object}
	 */
	getAnimatedCenterPoint: function () { return animatedCenterPoint; },
	/**
	 * Set the read-only object with x and y properties of where the view is during animation
	 * @param {Object} value New value to set.
	 * @alias Titanium.Media.VideoPlayer.setAnimatedCenterPoint
	 */
	setAnimatedCenterPoint: function () { },
	/**
	 * indicates if a movie should automatically start playback when it is likely to finish uninterrupted based on e.g. network conditions. Defaults to true.
	 * @alias Titanium.Media.VideoPlayer.autoplay
	 * @property {Boolean}
	 */
	autoplay: false,
	/**
	 * Get the indicates if a movie should automatically start playback when it is likely to finish uninterrupted based on e.g. network conditions. Defaults to true.
	 * @alias Titanium.Media.VideoPlayer.getAutoplay
	 * @return {Boolean}
	 */
	getAutoplay: function () { return autoplay; },
	/**
	 * Set the indicates if a movie should automatically start playback when it is likely to finish uninterrupted based on e.g. network conditions. Defaults to true.
	 * @param {Boolean} value New value to set.
	 * @alias Titanium.Media.VideoPlayer.setAutoplay
	 */
	setAutoplay: function () { },
	/**
	 * background color for the view. deprecated, set the background color on the view.
	 * @alias Titanium.Media.VideoPlayer.backgroundColor
	 * @property {String}
	 */
	backgroundColor: '',
	/**
	 * Get the background color for the view. deprecated, set the background color on the view.
	 * @alias Titanium.Media.VideoPlayer.getBackgroundColor
	 * @return {String}
	 */
	getBackgroundColor: function () { return backgroundColor; },
	/**
	 * Set the background color for the view. deprecated, set the background color on the view.
	 * @param {String} value New value to set.
	 * @alias Titanium.Media.VideoPlayer.setBackgroundColor
	 */
	setBackgroundColor: function () { },
	/**
	 * the disabled background color of the view. (Android)
	 * @alias Titanium.Media.VideoPlayer.backgroundDisabledColor
	 * @property {String}
	 */
	backgroundDisabledColor: '',
	/**
	 * Get the the disabled background color of the view. (Android)
	 * @alias Titanium.Media.VideoPlayer.getBackgroundDisabledColor
	 * @return {String}
	 */
	getBackgroundDisabledColor: function () { return backgroundDisabledColor; },
	/**
	 * Set the the disabled background color of the view. (Android)
	 * @param {String} value New value to set.
	 * @alias Titanium.Media.VideoPlayer.setBackgroundDisabledColor
	 */
	setBackgroundDisabledColor: function () { },
	/**
	 * the disabled background image url of the view. (Android)
	 * @alias Titanium.Media.VideoPlayer.backgroundDisabledImage
	 * @property {String}
	 */
	backgroundDisabledImage: '',
	/**
	 * Get the the disabled background image url of the view. (Android)
	 * @alias Titanium.Media.VideoPlayer.getBackgroundDisabledImage
	 * @return {String}
	 */
	getBackgroundDisabledImage: function () { return backgroundDisabledImage; },
	/**
	 * Set the the disabled background image url of the view. (Android)
	 * @param {String} value New value to set.
	 * @alias Titanium.Media.VideoPlayer.setBackgroundDisabledImage
	 */
	setBackgroundDisabledImage: function () { },
	/**
	 * the focused background color of the view. focusable must be true for normal views. (Android)
	 * @alias Titanium.Media.VideoPlayer.backgroundFocusedColor
	 * @property {String}
	 */
	backgroundFocusedColor: '',
	/**
	 * Get the the focused background color of the view. focusable must be true for normal views. (Android)
	 * @alias Titanium.Media.VideoPlayer.getBackgroundFocusedColor
	 * @return {String}
	 */
	getBackgroundFocusedColor: function () { return backgroundFocusedColor; },
	/**
	 * Set the the focused background color of the view. focusable must be true for normal views. (Android)
	 * @param {String} value New value to set.
	 * @alias Titanium.Media.VideoPlayer.setBackgroundFocusedColor
	 */
	setBackgroundFocusedColor: function () { },
	/**
	 * the focused background image url of the view. focusable must be true for normal views. (Android)
	 * @alias Titanium.Media.VideoPlayer.backgroundFocusedImage
	 * @property {String}
	 */
	backgroundFocusedImage: '',
	/**
	 * Get the the focused background image url of the view. focusable must be true for normal views. (Android)
	 * @alias Titanium.Media.VideoPlayer.getBackgroundFocusedImage
	 * @return {String}
	 */
	getBackgroundFocusedImage: function () { return backgroundFocusedImage; },
	/**
	 * Set the the focused background image url of the view. focusable must be true for normal views. (Android)
	 * @param {String} value New value to set.
	 * @alias Titanium.Media.VideoPlayer.setBackgroundFocusedImage
	 */
	setBackgroundFocusedImage: function () { },
	/**
	 * a background gradient for the view with the properties: type,startPoint,endPoint,startRadius,endRadius,backfillStart,backfillEnd,colors.
	 * @alias Titanium.Media.VideoPlayer.backgroundGradient
	 * @property {Object}
	 */
	backgroundGradient: {},
	/**
	 * Get the a background gradient for the view with the properties: type,startPoint,endPoint,startRadius,endRadius,backfillStart,backfillEnd,colors.
	 * @alias Titanium.Media.VideoPlayer.getBackgroundGradient
	 * @return {Object}
	 */
	getBackgroundGradient: function () { return backgroundGradient; },
	/**
	 * Set the a background gradient for the view with the properties: type,startPoint,endPoint,startRadius,endRadius,backfillStart,backfillEnd,colors.
	 * @param {Object} value New value to set.
	 * @alias Titanium.Media.VideoPlayer.setBackgroundGradient
	 */
	setBackgroundGradient: function () { },
	/**
	 * the background image url of the view
	 * @alias Titanium.Media.VideoPlayer.backgroundImage
	 * @property {String}
	 */
	backgroundImage: '',
	/**
	 * Get the the background image url of the view
	 * @alias Titanium.Media.VideoPlayer.getBackgroundImage
	 * @return {String}
	 */
	getBackgroundImage: function () { return backgroundImage; },
	/**
	 * Set the the background image url of the view
	 * @param {String} value New value to set.
	 * @alias Titanium.Media.VideoPlayer.setBackgroundImage
	 */
	setBackgroundImage: function () { },
	/**
	 * End caps specify the portion of an image that should not be resized when an image is stretched. This technique is used to implement buttons and other resizable image-based interface elements. When a button with end caps is resized, the resizing occurs only in the middle of the button, in the region between the end caps. The end caps themselves keep their original size and appearance. This property specifies the size of the left end cap. The middle (stretchable) portion is assumed to be 1 pixel wide. The right end cap is therefore computed by adding the size of the left end cap and the middle portion together and then subtracting that value from the width of the image
	 * @alias Titanium.Media.VideoPlayer.backgroundLeftCap
	 * @property {Float}
	 */
	backgroundLeftCap: 0.0,
	/**
	 * Get the End caps specify the portion of an image that should not be resized when an image is stretched. This technique is used to implement buttons and other resizable image-based interface elements. When a button with end caps is resized, the resizing occurs only in the middle of the button, in the region between the end caps. The end caps themselves keep their original size and appearance. This property specifies the size of the left end cap. The middle (stretchable) portion is assumed to be 1 pixel wide. The right end cap is therefore computed by adding the size of the left end cap and the middle portion together and then subtracting that value from the width of the image
	 * @alias Titanium.Media.VideoPlayer.getBackgroundLeftCap
	 * @return {Float}
	 */
	getBackgroundLeftCap: function () { return backgroundLeftCap; },
	/**
	 * Set the End caps specify the portion of an image that should not be resized when an image is stretched. This technique is used to implement buttons and other resizable image-based interface elements. When a button with end caps is resized, the resizing occurs only in the middle of the button, in the region between the end caps. The end caps themselves keep their original size and appearance. This property specifies the size of the left end cap. The middle (stretchable) portion is assumed to be 1 pixel wide. The right end cap is therefore computed by adding the size of the left end cap and the middle portion together and then subtracting that value from the width of the image
	 * @param {Float} value New value to set.
	 * @alias Titanium.Media.VideoPlayer.setBackgroundLeftCap
	 */
	setBackgroundLeftCap: function () { },
	/**
	 * the selected background color of the view. focusable must be true for normal views. (Android)
	 * @alias Titanium.Media.VideoPlayer.backgroundSelectedColor
	 * @property {String}
	 */
	backgroundSelectedColor: '',
	/**
	 * Get the the selected background color of the view. focusable must be true for normal views. (Android)
	 * @alias Titanium.Media.VideoPlayer.getBackgroundSelectedColor
	 * @return {String}
	 */
	getBackgroundSelectedColor: function () { return backgroundSelectedColor; },
	/**
	 * Set the the selected background color of the view. focusable must be true for normal views. (Android)
	 * @param {String} value New value to set.
	 * @alias Titanium.Media.VideoPlayer.setBackgroundSelectedColor
	 */
	setBackgroundSelectedColor: function () { },
	/**
	 * the selected background image url of the view. focusable must be true for normal views. (Android)
	 * @alias Titanium.Media.VideoPlayer.backgroundSelectedImage
	 * @property {String}
	 */
	backgroundSelectedImage: '',
	/**
	 * Get the the selected background image url of the view. focusable must be true for normal views. (Android)
	 * @alias Titanium.Media.VideoPlayer.getBackgroundSelectedImage
	 * @return {String}
	 */
	getBackgroundSelectedImage: function () { return backgroundSelectedImage; },
	/**
	 * Set the the selected background image url of the view. focusable must be true for normal views. (Android)
	 * @param {String} value New value to set.
	 * @alias Titanium.Media.VideoPlayer.setBackgroundSelectedImage
	 */
	setBackgroundSelectedImage: function () { },
	/**
	 * End caps specify the portion of an image that should not be resized when an image is stretched. This technique is used to implement buttons and other resizable image-based interface elements. When a button with end caps is resized, the resizing occurs only in the middle of the button, in the region between the end caps. The end caps themselves keep their original size and appearance. This property specifies the size of the top end cap. The middle (stretchable) portion is assumed to be 1 pixel wide. The bottom end cap is therefore computed by adding the size of the top end cap and the middle portion together and then subtracting that value from the height of the image
	 * @alias Titanium.Media.VideoPlayer.backgroundTopCap
	 * @property {Float}
	 */
	backgroundTopCap: 0.0,
	/**
	 * Get the End caps specify the portion of an image that should not be resized when an image is stretched. This technique is used to implement buttons and other resizable image-based interface elements. When a button with end caps is resized, the resizing occurs only in the middle of the button, in the region between the end caps. The end caps themselves keep their original size and appearance. This property specifies the size of the top end cap. The middle (stretchable) portion is assumed to be 1 pixel wide. The bottom end cap is therefore computed by adding the size of the top end cap and the middle portion together and then subtracting that value from the height of the image
	 * @alias Titanium.Media.VideoPlayer.getBackgroundTopCap
	 * @return {Float}
	 */
	getBackgroundTopCap: function () { return backgroundTopCap; },
	/**
	 * Set the End caps specify the portion of an image that should not be resized when an image is stretched. This technique is used to implement buttons and other resizable image-based interface elements. When a button with end caps is resized, the resizing occurs only in the middle of the button, in the region between the end caps. The end caps themselves keep their original size and appearance. This property specifies the size of the top end cap. The middle (stretchable) portion is assumed to be 1 pixel wide. The bottom end cap is therefore computed by adding the size of the top end cap and the middle portion together and then subtracting that value from the height of the image
	 * @param {Float} value New value to set.
	 * @alias Titanium.Media.VideoPlayer.setBackgroundTopCap
	 */
	setBackgroundTopCap: function () { },
	/**
	 * the border color of the view
	 * @alias Titanium.Media.VideoPlayer.borderColor
	 * @property {String}
	 */
	borderColor: '',
	/**
	 * Get the the border color of the view
	 * @alias Titanium.Media.VideoPlayer.getBorderColor
	 * @return {String}
	 */
	getBorderColor: function () { return borderColor; },
	/**
	 * Set the the border color of the view
	 * @param {String} value New value to set.
	 * @alias Titanium.Media.VideoPlayer.setBorderColor
	 */
	setBorderColor: function () { },
	/**
	 * the border radius of the view
	 * @alias Titanium.Media.VideoPlayer.borderRadius
	 * @property {Float}
	 */
	borderRadius: 0.0,
	/**
	 * Get the the border radius of the view
	 * @alias Titanium.Media.VideoPlayer.getBorderRadius
	 * @return {Float}
	 */
	getBorderRadius: function () { return borderRadius; },
	/**
	 * Set the the border radius of the view
	 * @param {Float} value New value to set.
	 * @alias Titanium.Media.VideoPlayer.setBorderRadius
	 */
	setBorderRadius: function () { },
	/**
	 * the border width of the view
	 * @alias Titanium.Media.VideoPlayer.borderWidth
	 * @property {Float}
	 */
	borderWidth: 0.0,
	/**
	 * Get the the border width of the view
	 * @alias Titanium.Media.VideoPlayer.getBorderWidth
	 * @return {Float}
	 */
	getBorderWidth: function () { return borderWidth; },
	/**
	 * Set the the border width of the view
	 * @param {Float} value New value to set.
	 * @alias Titanium.Media.VideoPlayer.setBorderWidth
	 */
	setBorderWidth: function () { },
	/**
	 * property for the view bottom position. This position is relative to the view's parent. Can be either a float value or a dimension string ie 'auto' (default), '50%' (iPhone only).
	 * @alias Titanium.Media.VideoPlayer.bottom
	 * @property {Float,String}
	 */
	bottom: 0.0,
	/**
	 * Get the property for the view bottom position. This position is relative to the view's parent. Can be either a float value or a dimension string ie 'auto' (default), '50%' (iPhone only).
	 * @alias Titanium.Media.VideoPlayer.getBottom
	 * @return {Float,String}
	 */
	getBottom: function () { return bottom; },
	/**
	 * Set the property for the view bottom position. This position is relative to the view's parent. Can be either a float value or a dimension string ie 'auto' (default), '50%' (iPhone only).
	 * @param {Float,String} value New value to set.
	 * @alias Titanium.Media.VideoPlayer.setBottom
	 */
	setBottom: function () { },
	/**
	 * a dictionary with properties x and y to indicate the center of the views position relative to the parent view
	 * @alias Titanium.Media.VideoPlayer.center
	 * @property {Object}
	 */
	center: {},
	/**
	 * Get the a dictionary with properties x and y to indicate the center of the views position relative to the parent view
	 * @alias Titanium.Media.VideoPlayer.getCenter
	 * @return {Object}
	 */
	getCenter: function () { return center; },
	/**
	 * Set the a dictionary with properties x and y to indicate the center of the views position relative to the parent view
	 * @param {Object} value New value to set.
	 * @alias Titanium.Media.VideoPlayer.setCenter
	 */
	setCenter: function () { },
	/**
	 * deprecated. use url property instead.
	 * @alias Titanium.Media.VideoPlayer.contentURL
	 * @property {String}
	 */
	contentURL: '',
	/**
	 * Get the deprecated. use url property instead.
	 * @alias Titanium.Media.VideoPlayer.getContentURL
	 * @return {String}
	 */
	getContentURL: function () { return contentURL; },
	/**
	 * Set the deprecated. use url property instead.
	 * @param {String} value New value to set.
	 * @alias Titanium.Media.VideoPlayer.setContentURL
	 */
	setContentURL: function () { },
	/**
	 * The duration of the movie, or 0.0 if not known.
	 * @alias Titanium.Media.VideoPlayer.duration
	 * @property {Double}
	 */
	duration: 0.0,
	/**
	 * Get the The duration of the movie, or 0.0 if not known.
	 * @alias Titanium.Media.VideoPlayer.getDuration
	 * @return {Double}
	 */
	getDuration: function () { return duration; },
	/**
	 * Set the The duration of the movie, or 0.0 if not known.
	 * @param {Double} value New value to set.
	 * @alias Titanium.Media.VideoPlayer.setDuration
	 */
	setDuration: function () { },
	/**
	 * The end time of movie playback. Defaults to NaN, which indicates natural end time of the movie.
	 * @alias Titanium.Media.VideoPlayer.endPlaybackTime
	 * @property {Double}
	 */
	endPlaybackTime: 0.0,
	/**
	 * Get the The end time of movie playback. Defaults to NaN, which indicates natural end time of the movie.
	 * @alias Titanium.Media.VideoPlayer.getEndPlaybackTime
	 * @return {Double}
	 */
	getEndPlaybackTime: function () { return endPlaybackTime; },
	/**
	 * Set the The end time of movie playback. Defaults to NaN, which indicates natural end time of the movie.
	 * @param {Double} value New value to set.
	 * @alias Titanium.Media.VideoPlayer.setEndPlaybackTime
	 */
	setEndPlaybackTime: function () { },
	/**
	 * Set true if you want a view to be focusable when navigating with the trackball or D-Pad. Default: false. (Android Only)
	 * @alias Titanium.Media.VideoPlayer.focusable
	 * @property {Boolean}
	 */
	focusable: false,
	/**
	 * Get the Set true if you want a view to be focusable when navigating with the trackball or D-Pad. Default: false. (Android Only)
	 * @alias Titanium.Media.VideoPlayer.getFocusable
	 * @return {Boolean}
	 */
	getFocusable: function () { return focusable; },
	/**
	 * Set the Set true if you want a view to be focusable when navigating with the trackball or D-Pad. Default: false. (Android Only)
	 * @param {Boolean} value New value to set.
	 * @alias Titanium.Media.VideoPlayer.setFocusable
	 */
	setFocusable: function () { },
	/**
	 * the font family
	 * @alias Titanium.Media.VideoPlayer.font-family
	 * @property {String}
	 */
	font-family: '',
	/**
	 * Get the the font family
	 * @alias Titanium.Media.VideoPlayer.getFont-family
	 * @return {String}
	 */
	getFont-family: function () { return font-family; },
	/**
	 * Set the the font family
	 * @param {String} value New value to set.
	 * @alias Titanium.Media.VideoPlayer.setFont-family
	 */
	setFont-family: function () { },
	/**
	 * the font size
	 * @alias Titanium.Media.VideoPlayer.font-size
	 * @property {String}
	 */
	font-size: '',
	/**
	 * Get the the font size
	 * @alias Titanium.Media.VideoPlayer.getFont-size
	 * @return {String}
	 */
	getFont-size: function () { return font-size; },
	/**
	 * Set the the font size
	 * @param {String} value New value to set.
	 * @alias Titanium.Media.VideoPlayer.setFont-size
	 */
	setFont-size: function () { },
	/**
	 * the font style, either normal or italics
	 * @alias Titanium.Media.VideoPlayer.font-style
	 * @property {String}
	 */
	font-style: '',
	/**
	 * Get the the font style, either normal or italics
	 * @alias Titanium.Media.VideoPlayer.getFont-style
	 * @return {String}
	 */
	getFont-style: function () { return font-style; },
	/**
	 * Set the the font style, either normal or italics
	 * @param {String} value New value to set.
	 * @alias Titanium.Media.VideoPlayer.setFont-style
	 */
	setFont-style: function () { },
	/**
	 * the font weight, either normal or bold
	 * @alias Titanium.Media.VideoPlayer.font-weight
	 * @property {String}
	 */
	font-weight: '',
	/**
	 * Get the the font weight, either normal or bold
	 * @alias Titanium.Media.VideoPlayer.getFont-weight
	 * @return {String}
	 */
	getFont-weight: function () { return font-weight; },
	/**
	 * Set the the font weight, either normal or bold
	 * @param {String} value New value to set.
	 * @alias Titanium.Media.VideoPlayer.setFont-weight
	 */
	setFont-weight: function () { },
	/**
	 * Determines if the movie is presented in the entire screen (obscuring all other application content). Default is false. Setting this property to true before the movie player's view is visible will have no effect.
	 * @alias Titanium.Media.VideoPlayer.fullscreen
	 * @property {Boolean}
	 */
	fullscreen: false,
	/**
	 * Get the Determines if the movie is presented in the entire screen (obscuring all other application content). Default is false. Setting this property to true before the movie player's view is visible will have no effect.
	 * @alias Titanium.Media.VideoPlayer.getFullscreen
	 * @return {Boolean}
	 */
	getFullscreen: function () { return fullscreen; },
	/**
	 * Set the Determines if the movie is presented in the entire screen (obscuring all other application content). Default is false. Setting this property to true before the movie player's view is visible will have no effect.
	 * @param {Boolean} value New value to set.
	 * @alias Titanium.Media.VideoPlayer.setFullscreen
	 */
	setFullscreen: function () { },
	/**
	 * property for the view height. Can be either a float value or a dimension string ie 'auto' (default), '50%' (iPhone only).
	 * @alias Titanium.Media.VideoPlayer.height
	 * @property {Float,String}
	 */
	height: 0.0,
	/**
	 * Get the property for the view height. Can be either a float value or a dimension string ie 'auto' (default), '50%' (iPhone only).
	 * @alias Titanium.Media.VideoPlayer.getHeight
	 * @return {Float,String}
	 */
	getHeight: function () { return height; },
	/**
	 * Set the property for the view height. Can be either a float value or a dimension string ie 'auto' (default), '50%' (iPhone only).
	 * @param {Float,String} value New value to set.
	 * @alias Titanium.Media.VideoPlayer.setHeight
	 */
	setHeight: function () { },
	/**
	 * The start time of movie playback. Defaults to NaN, indicating the natural start time of the movie.
	 * @alias Titanium.Media.VideoPlayer.initialPlaybackTime
	 * @property {Double}
	 */
	initialPlaybackTime: 0.0,
	/**
	 * Get the The start time of movie playback. Defaults to NaN, indicating the natural start time of the movie.
	 * @alias Titanium.Media.VideoPlayer.getInitialPlaybackTime
	 * @return {Double}
	 */
	getInitialPlaybackTime: function () { return initialPlaybackTime; },
	/**
	 * Set the The start time of movie playback. Defaults to NaN, indicating the natural start time of the movie.
	 * @param {Double} value New value to set.
	 * @alias Titanium.Media.VideoPlayer.setInitialPlaybackTime
	 */
	setInitialPlaybackTime: function () { },
	/**
	 * property for the view left position. This position is relative to the view's parent. Can be either a float value or a dimension string ie 'auto' (default), '50%' (iPhone only).
	 * @alias Titanium.Media.VideoPlayer.left
	 * @property {Float,String}
	 */
	left: 0.0,
	/**
	 * Get the property for the view left position. This position is relative to the view's parent. Can be either a float value or a dimension string ie 'auto' (default), '50%' (iPhone only).
	 * @alias Titanium.Media.VideoPlayer.getLeft
	 * @return {Float,String}
	 */
	getLeft: function () { return left; },
	/**
	 * Set the property for the view left position. This position is relative to the view's parent. Can be either a float value or a dimension string ie 'auto' (default), '50%' (iPhone only).
	 * @param {Float,String} value New value to set.
	 * @alias Titanium.Media.VideoPlayer.setLeft
	 */
	setLeft: function () { },
	/**
	 * Returns the network load state of the movie player.
	 * @alias Titanium.Media.VideoPlayer.loadState
	 * @property {Integer}
	 */
	loadState: 0,
	/**
	 * Get the Returns the network load state of the movie player.
	 * @alias Titanium.Media.VideoPlayer.getLoadState
	 * @return {Integer}
	 */
	getLoadState: function () { return loadState; },
	/**
	 * Set the Returns the network load state of the movie player.
	 * @param {Integer} value New value to set.
	 * @alias Titanium.Media.VideoPlayer.setLoadState
	 */
	setLoadState: function () { },
	/**
	 * the media object, either a File or Blob.
	 * @alias Titanium.Media.VideoPlayer.media
	 * @property {Object}
	 */
	media: {},
	/**
	 * Get the the media object, either a File or Blob.
	 * @alias Titanium.Media.VideoPlayer.getMedia
	 * @return {Object}
	 */
	getMedia: function () { return media; },
	/**
	 * Set the the media object, either a File or Blob.
	 * @param {Object} value New value to set.
	 * @alias Titanium.Media.VideoPlayer.setMedia
	 */
	setMedia: function () { },
	/**
	 * The style of the playback controls. Defaults to Titanium.Media.VIDEO_CONTROL_DEFAULT
	 * @alias Titanium.Media.VideoPlayer.mediaControlStyle
	 * @property {Integer}
	 */
	mediaControlStyle: 0,
	/**
	 * Get the The style of the playback controls. Defaults to Titanium.Media.VIDEO_CONTROL_DEFAULT
	 * @alias Titanium.Media.VideoPlayer.getMediaControlStyle
	 * @return {Integer}
	 */
	getMediaControlStyle: function () { return mediaControlStyle; },
	/**
	 * Set the The style of the playback controls. Defaults to Titanium.Media.VIDEO_CONTROL_DEFAULT
	 * @param {Integer} value New value to set.
	 * @alias Titanium.Media.VideoPlayer.setMediaControlStyle
	 */
	setMediaControlStyle: function () { },
	/**
	 * The types of media in the movie, or Titanium.Media.VIDEO_MEDIA_TYPE_NONE if not known.
	 * @alias Titanium.Media.VideoPlayer.mediaTypes
	 * @property {Integer}
	 */
	mediaTypes: 0,
	/**
	 * Get the The types of media in the movie, or Titanium.Media.VIDEO_MEDIA_TYPE_NONE if not known.
	 * @alias Titanium.Media.VideoPlayer.getMediaTypes
	 * @return {Integer}
	 */
	getMediaTypes: function () { return mediaTypes; },
	/**
	 * Set the The types of media in the movie, or Titanium.Media.VIDEO_MEDIA_TYPE_NONE if not known.
	 * @param {Integer} value New value to set.
	 * @alias Titanium.Media.VideoPlayer.setMediaTypes
	 */
	setMediaTypes: function () { },
	/**
	 * deprecated in 3.2+ of the iPhone SDK - use mediaControlStyle. Provides the ability to set the control mode of the movie player. Defaults to Titanium.Media.VIDEO_CONTROL_DEFAULT.
	 * @alias Titanium.Media.VideoPlayer.movieControlMode
	 * @property {Integer}
	 */
	movieControlMode: 0,
	/**
	 * Get the deprecated in 3.2+ of the iPhone SDK - use mediaControlStyle. Provides the ability to set the control mode of the movie player. Defaults to Titanium.Media.VIDEO_CONTROL_DEFAULT.
	 * @alias Titanium.Media.VideoPlayer.getMovieControlMode
	 * @return {Integer}
	 */
	getMovieControlMode: function () { return movieControlMode; },
	/**
	 * Set the deprecated in 3.2+ of the iPhone SDK - use mediaControlStyle. Provides the ability to set the control mode of the movie player. Defaults to Titanium.Media.VIDEO_CONTROL_DEFAULT.
	 * @param {Integer} value New value to set.
	 * @alias Titanium.Media.VideoPlayer.setMovieControlMode
	 */
	setMovieControlMode: function () { },
	/**
	 * returns a dictionary with properties width and height. Returns the natural size of the movie or 0 for both properties if not known or applicable.
	 * @alias Titanium.Media.VideoPlayer.naturalSize
	 * @property {Object}
	 */
	naturalSize: {},
	/**
	 * Get the returns a dictionary with properties width and height. Returns the natural size of the movie or 0 for both properties if not known or applicable.
	 * @alias Titanium.Media.VideoPlayer.getNaturalSize
	 * @return {Object}
	 */
	getNaturalSize: function () { return naturalSize; },
	/**
	 * Set the returns a dictionary with properties width and height. Returns the natural size of the movie or 0 for both properties if not known or applicable.
	 * @param {Object} value New value to set.
	 * @alias Titanium.Media.VideoPlayer.setNaturalSize
	 */
	setNaturalSize: function () { },
	/**
	 * the opacity from 0.0-1.0
	 * @alias Titanium.Media.VideoPlayer.opacity
	 * @property {Float}
	 */
	opacity: 0.0,
	/**
	 * Get the the opacity from 0.0-1.0
	 * @alias Titanium.Media.VideoPlayer.getOpacity
	 * @return {Float}
	 */
	getOpacity: function () { return opacity; },
	/**
	 * Set the the opacity from 0.0-1.0
	 * @param {Float} value New value to set.
	 * @alias Titanium.Media.VideoPlayer.setOpacity
	 */
	setOpacity: function () { },
	/**
	 * The currently playable duration of the movie, for progressively downloaded network content.
	 * @alias Titanium.Media.VideoPlayer.playableDuration
	 * @property {Double}
	 */
	playableDuration: 0.0,
	/**
	 * Get the The currently playable duration of the movie, for progressively downloaded network content.
	 * @alias Titanium.Media.VideoPlayer.getPlayableDuration
	 * @return {Double}
	 */
	getPlayableDuration: function () { return playableDuration; },
	/**
	 * Set the The currently playable duration of the movie, for progressively downloaded network content.
	 * @param {Double} value New value to set.
	 * @alias Titanium.Media.VideoPlayer.setPlayableDuration
	 */
	setPlayableDuration: function () { },
	/**
	 * Returns the current playback state of the music player
	 * @alias Titanium.Media.VideoPlayer.playbackState
	 * @property {Integer}
	 */
	playbackState: 0,
	/**
	 * Get the Returns the current playback state of the music player
	 * @alias Titanium.Media.VideoPlayer.getPlaybackState
	 * @return {Integer}
	 */
	getPlaybackState: function () { return playbackState; },
	/**
	 * Set the Returns the current playback state of the music player
	 * @param {Integer} value New value to set.
	 * @alias Titanium.Media.VideoPlayer.setPlaybackState
	 */
	setPlaybackState: function () { },
	/**
	 * Boolean to indicate if the player has started playing.
	 * @alias Titanium.Media.VideoPlayer.playing
	 * @property {Boolean}
	 */
	playing: false,
	/**
	 * Get the Boolean to indicate if the player has started playing.
	 * @alias Titanium.Media.VideoPlayer.getPlaying
	 * @return {Boolean}
	 */
	getPlaying: function () { return playing; },
	/**
	 * Set the Boolean to indicate if the player has started playing.
	 * @param {Boolean} value New value to set.
	 * @alias Titanium.Media.VideoPlayer.setPlaying
	 */
	setPlaying: function () { },
	/**
	 * Determines how the movie player repeats when reaching the end of playback. Defaults to Titanium.Media.VIDEO_REPEAT_MODE_NONE.
	 * @alias Titanium.Media.VideoPlayer.repeatMode
	 * @property {Integer}
	 */
	repeatMode: 0,
	/**
	 * Get the Determines how the movie player repeats when reaching the end of playback. Defaults to Titanium.Media.VIDEO_REPEAT_MODE_NONE.
	 * @alias Titanium.Media.VideoPlayer.getRepeatMode
	 * @return {Integer}
	 */
	getRepeatMode: function () { return repeatMode; },
	/**
	 * Set the Determines how the movie player repeats when reaching the end of playback. Defaults to Titanium.Media.VIDEO_REPEAT_MODE_NONE.
	 * @param {Integer} value New value to set.
	 * @alias Titanium.Media.VideoPlayer.setRepeatMode
	 */
	setRepeatMode: function () { },
	/**
	 * property for the view right position. This position is relative to the view's parent. Can be either a float value or a dimension string ie 'auto' (default), '50%' (iPhone only).
	 * @alias Titanium.Media.VideoPlayer.right
	 * @property {Float,String}
	 */
	right: 0.0,
	/**
	 * Get the property for the view right position. This position is relative to the view's parent. Can be either a float value or a dimension string ie 'auto' (default), '50%' (iPhone only).
	 * @alias Titanium.Media.VideoPlayer.getRight
	 * @return {Float,String}
	 */
	getRight: function () { return right; },
	/**
	 * Set the property for the view right position. This position is relative to the view's parent. Can be either a float value or a dimension string ie 'auto' (default), '50%' (iPhone only).
	 * @param {Float,String} value New value to set.
	 * @alias Titanium.Media.VideoPlayer.setRight
	 */
	setRight: function () { },
	/**
	 * Determines how the content scales to fit the view. Defaults to Titanium.Media.VIDEO_SCALING_ASPECT_FIT.
	 * @alias Titanium.Media.VideoPlayer.scalingMode
	 * @property {Integer}
	 */
	scalingMode: 0,
	/**
	 * Get the Determines how the content scales to fit the view. Defaults to Titanium.Media.VIDEO_SCALING_ASPECT_FIT.
	 * @alias Titanium.Media.VideoPlayer.getScalingMode
	 * @return {Integer}
	 */
	getScalingMode: function () { return scalingMode; },
	/**
	 * Set the Determines how the content scales to fit the view. Defaults to Titanium.Media.VIDEO_SCALING_ASPECT_FIT.
	 * @param {Integer} value New value to set.
	 * @alias Titanium.Media.VideoPlayer.setScalingMode
	 */
	setScalingMode: function () { },
	/**
	 * the size of the view as a dictionary of width and height properties
	 * @alias Titanium.Media.VideoPlayer.size
	 * @property {Object}
	 */
	size: {},
	/**
	 * Get the the size of the view as a dictionary of width and height properties
	 * @alias Titanium.Media.VideoPlayer.getSize
	 * @return {Object}
	 */
	getSize: function () { return size; },
	/**
	 * Set the the size of the view as a dictionary of width and height properties
	 * @param {Object} value New value to set.
	 * @alias Titanium.Media.VideoPlayer.setSize
	 */
	setSize: function () { },
	/**
	 * One of Titanium.UI.Android.SOFT_KEYBOARD_DEFAULT_ON_FOCUS, Titanium.UI.Android.SOFT_KEYBOARD_HIDE_ON_FOCUS, or Titanium.UI.Android.SOFT_KEYBOARD_SHOW_ON_FOCUS. (Android only)
	 * @alias Titanium.Media.VideoPlayer.softKeyboardOnFocus
	 * @property {Integer}
	 */
	softKeyboardOnFocus: 0,
	/**
	 * Get the One of Titanium.UI.Android.SOFT_KEYBOARD_DEFAULT_ON_FOCUS, Titanium.UI.Android.SOFT_KEYBOARD_HIDE_ON_FOCUS, or Titanium.UI.Android.SOFT_KEYBOARD_SHOW_ON_FOCUS. (Android only)
	 * @alias Titanium.Media.VideoPlayer.getSoftKeyboardOnFocus
	 * @return {Integer}
	 */
	getSoftKeyboardOnFocus: function () { return softKeyboardOnFocus; },
	/**
	 * Set the One of Titanium.UI.Android.SOFT_KEYBOARD_DEFAULT_ON_FOCUS, Titanium.UI.Android.SOFT_KEYBOARD_HIDE_ON_FOCUS, or Titanium.UI.Android.SOFT_KEYBOARD_SHOW_ON_FOCUS. (Android only)
	 * @param {Integer} value New value to set.
	 * @alias Titanium.Media.VideoPlayer.setSoftKeyboardOnFocus
	 */
	setSoftKeyboardOnFocus: function () { },
	/**
	 * The playback type of the movie. Defaults to Titanium.Media.VIDEO_SOURCE_TYPE_UNKNOWN. Specifying a playback type before playing the movie can result in faster load times.
	 * @alias Titanium.Media.VideoPlayer.sourceType
	 * @property {Integer}
	 */
	sourceType: 0,
	/**
	 * Get the The playback type of the movie. Defaults to Titanium.Media.VIDEO_SOURCE_TYPE_UNKNOWN. Specifying a playback type before playing the movie can result in faster load times.
	 * @alias Titanium.Media.VideoPlayer.getSourceType
	 * @return {Integer}
	 */
	getSourceType: function () { return sourceType; },
	/**
	 * Set the The playback type of the movie. Defaults to Titanium.Media.VIDEO_SOURCE_TYPE_UNKNOWN. Specifying a playback type before playing the movie can result in faster load times.
	 * @param {Integer} value New value to set.
	 * @alias Titanium.Media.VideoPlayer.setSourceType
	 */
	setSourceType: function () { },
	/**
	 * property for the view top position. This position is relative to the view's parent. Can be either a float value or a dimension string ie 'auto' (default), '50%' (iPhone only).
	 * @alias Titanium.Media.VideoPlayer.top
	 * @property {Float,String}
	 */
	top: 0.0,
	/**
	 * Get the property for the view top position. This position is relative to the view's parent. Can be either a float value or a dimension string ie 'auto' (default), '50%' (iPhone only).
	 * @alias Titanium.Media.VideoPlayer.getTop
	 * @return {Float,String}
	 */
	getTop: function () { return top; },
	/**
	 * Set the property for the view top position. This position is relative to the view's parent. Can be either a float value or a dimension string ie 'auto' (default), '50%' (iPhone only).
	 * @param {Float,String} value New value to set.
	 * @alias Titanium.Media.VideoPlayer.setTop
	 */
	setTop: function () { },
	/**
	 * a boolean indicating if the view should receive touch events (true, default) or forward them to peers (false)
	 * @alias Titanium.Media.VideoPlayer.touchEnabled
	 * @property {Boolean}
	 */
	touchEnabled: false,
	/**
	 * Get the a boolean indicating if the view should receive touch events (true, default) or forward them to peers (false)
	 * @alias Titanium.Media.VideoPlayer.getTouchEnabled
	 * @return {Boolean}
	 */
	getTouchEnabled: function () { return touchEnabled; },
	/**
	 * Set the a boolean indicating if the view should receive touch events (true, default) or forward them to peers (false)
	 * @param {Boolean} value New value to set.
	 * @alias Titanium.Media.VideoPlayer.setTouchEnabled
	 */
	setTouchEnabled: function () { },
	/**
	 * the transformation matrix to apply to the view
	 * @alias Titanium.Media.VideoPlayer.transform
	 * @property {Object}
	 */
	transform: {},
	/**
	 * Get the the transformation matrix to apply to the view
	 * @alias Titanium.Media.VideoPlayer.getTransform
	 * @return {Object}
	 */
	getTransform: function () { return transform; },
	/**
	 * Set the the transformation matrix to apply to the view
	 * @param {Object} value New value to set.
	 * @alias Titanium.Media.VideoPlayer.setTransform
	 */
	setTransform: function () { },
	/**
	 * url of the media.
	 * @alias Titanium.Media.VideoPlayer.url
	 * @property {String}
	 */
	url: '',
	/**
	 * Get the url of the media.
	 * @alias Titanium.Media.VideoPlayer.getUrl
	 * @return {String}
	 */
	getUrl: function () { return url; },
	/**
	 * Set the url of the media.
	 * @param {String} value New value to set.
	 * @alias Titanium.Media.VideoPlayer.setUrl
	 */
	setUrl: function () { },
	/**
	 * Indicates if the movie player should inherit the application's audio session instead of creating a new session (which would interrupt the application's session). Defaults to true. Setting this property during playback will not take effect until playback is stopped and started again.
	 * @alias Titanium.Media.VideoPlayer.useApplicationAudioSession
	 * @property {Boolean}
	 */
	useApplicationAudioSession: false,
	/**
	 * Get the Indicates if the movie player should inherit the application's audio session instead of creating a new session (which would interrupt the application's session). Defaults to true. Setting this property during playback will not take effect until playback is stopped and started again.
	 * @alias Titanium.Media.VideoPlayer.getUseApplicationAudioSession
	 * @return {Boolean}
	 */
	getUseApplicationAudioSession: function () { return useApplicationAudioSession; },
	/**
	 * Set the Indicates if the movie player should inherit the application's audio session instead of creating a new session (which would interrupt the application's session). Defaults to true. Setting this property during playback will not take effect until playback is stopped and started again.
	 * @param {Boolean} value New value to set.
	 * @alias Titanium.Media.VideoPlayer.setUseApplicationAudioSession
	 */
	setUseApplicationAudioSession: function () { },
	/**
	 * a boolean of the visibility of the view
	 * @alias Titanium.Media.VideoPlayer.visible
	 * @property {Boolean}
	 */
	visible: false,
	/**
	 * Get the a boolean of the visibility of the view
	 * @alias Titanium.Media.VideoPlayer.getVisible
	 * @return {Boolean}
	 */
	getVisible: function () { return visible; },
	/**
	 * Set the a boolean of the visibility of the view
	 * @param {Boolean} value New value to set.
	 * @alias Titanium.Media.VideoPlayer.setVisible
	 */
	setVisible: function () { },
	/**
	 * property for the view width. Can be either a float value or a dimension string ie 'auto' (default), '50%' (iPhone only).
	 * @alias Titanium.Media.VideoPlayer.width
	 * @property {Float,String}
	 */
	width: 0.0,
	/**
	 * Get the property for the view width. Can be either a float value or a dimension string ie 'auto' (default), '50%' (iPhone only).
	 * @alias Titanium.Media.VideoPlayer.getWidth
	 * @return {Float,String}
	 */
	getWidth: function () { return width; },
	/**
	 * Set the property for the view width. Can be either a float value or a dimension string ie 'auto' (default), '50%' (iPhone only).
	 * @param {Float,String} value New value to set.
	 * @alias Titanium.Media.VideoPlayer.setWidth
	 */
	setWidth: function () { },
	/**
	 * the z index position relative to other sibling views
	 * @alias Titanium.Media.VideoPlayer.zIndex
	 * @property {Integer}
	 */
	zIndex: 0,
	/**
	 * Get the the z index position relative to other sibling views
	 * @alias Titanium.Media.VideoPlayer.getZIndex
	 * @return {Integer}
	 */
	getZIndex: function () { return zIndex; },
	/**
	 * Set the the z index position relative to other sibling views
	 * @param {Integer} value New value to set.
	 * @alias Titanium.Media.VideoPlayer.setZIndex
	 */
	setZIndex: function () { },
	/**
	 * add a child to the view hierarchy
	 * @param {Object} view the view to add to this views hiearchy
	 * @alias Titanium.Media.VideoPlayer.add
	 */
	add: function (view) { },
	/**
	 * add an event listener for the instance to receive view triggered events
	 * @param {String} name name of the event
	 * @param {Function} callback callback function to invoke when the event is fired
	 * @alias Titanium.Media.VideoPlayer.addEventListener
	 */
	addEventListener: function (name,callback) { },
	/**
	 * animate the view
	 * @param {Object} obj either a dictionary of animation properties or an Animation object
	 * @param {Function} callback function to be invoked upon completion of the animation
	 * @alias Titanium.Media.VideoPlayer.animate
	 */
	animate: function (obj,callback) { },
	/**
	 * Cancels all pending asynchronous thumbnail requests.
	 * @alias Titanium.Media.VideoPlayer.cancelAllThumbnailImageRequests
	 */
	cancelAllThumbnailImageRequests: function () { },
	/**
	 * fire a synthesized event to the views listener
	 * @param {String} name name of the event
	 * @param {Object} event event object
	 * @alias Titanium.Media.VideoPlayer.fireEvent
	 */
	fireEvent: function (name,event) { },
	/**
	 * hide the view
	 * @alias Titanium.Media.VideoPlayer.hide
	 */
	hide: function () { },
	/**
	 * pause playing the video. On iOS only available under 3.2 and later
	 * @alias Titanium.Media.VideoPlayer.pause
	 */
	pause: function () { },
	/**
	 * start playing the video
	 * @alias Titanium.Media.VideoPlayer.play
	 */
	play: function () { },
	/**
	 * release the internal video resources immediately.  this is not usually necessary but can help if you no longer need to use the player after it is used to help converse memory.
	 * @alias Titanium.Media.VideoPlayer.release
	 */
	release: function () { },
	/**
	 * remove a previously add view from the view hiearchy
	 * @param {Object} view the view to remove from this views hiearchy
	 * @alias Titanium.Media.VideoPlayer.remove
	 */
	remove: function (view) { },
	/**
	 * remove a previously added event listener
	 * @param {String} name name of the event
	 * @param {Function} callback callback function passed in addEventListener
	 * @alias Titanium.Media.VideoPlayer.removeEventListener
	 */
	removeEventListener: function (name,callback) { },
	/**
	 * Asynchronously request thumbnails for one or more times, provided as an array of numbers (double). Fires a thumbnail event on completion. Optionally invokes the callback function passed in the method.
	 * @param {Array} times array of doubles for each time to request
	 * @param {Integer} option either [[Titanium.Media.VIDEO_TIME_OPTION_NEAREST_KEYFRAME]] or [[Titanium.Media.VIDEO_TIME_OPTION_EXACT]].
	 * @alias Titanium.Media.VideoPlayer.requestThumbnailImagesAtTimes
	 */
	requestThumbnailImagesAtTimes: function (times,option) { },
	/**
	 * A view for customization which is always displayed behind movie content.
	 * @param {Object} view view to set
	 * @alias Titanium.Media.VideoPlayer.setBackgroundView
	 */
	setBackgroundView: function (view) { },
	/**
	 * the a non-url based media to play, either a File or Blob.
	 * @param {Object} media media to play
	 * @alias Titanium.Media.VideoPlayer.setMedia
	 */
	setMedia: function (media) { },
	/**
	 * the url to play
	 * @param {String} url the url to play
	 * @alias Titanium.Media.VideoPlayer.setUrl
	 */
	setUrl: function (url) { },
	/**
	 * make the view visible
	 * @alias Titanium.Media.VideoPlayer.show
	 */
	show: function () { },
	/**
	 * stop playing the video
	 * @alias Titanium.Media.VideoPlayer.stop
	 */
	stop: function () { },
	/**
	 * Returns a thumbnail at the given time as a blob.
	 * @param {Double} time playback time
	 * @param {Integer} option either [[Titanium.Media.VIDEO_TIME_OPTION_NEAREST_KEYFRAME]] or [[Titanium.Media.VIDEO_TIME_OPTION_EXACT]]
	 * @alias Titanium.Media.VideoPlayer.thumbnailImageAtTime
	 * @return {Object}
	 */
	thumbnailImageAtTime: function (time,option) { return {}; },
	/**
	 * return a Blob image of the rendered view
	 * @param {Function} f function to be invoked upon completion. if non-null, this method will be performed asynchronously. if null, it will be performed immediately
	 * @alias Titanium.Media.VideoPlayer.toImage
	 * @return {Object}
	 */
	toImage: function (f) { return {}; },
};

/**
 * The top level Network module.  The Network module is used accessing Networking related functionality.
 * @since 0.1
 */
Titanium.Network = {
	/**
	 * constant value representing the ability for sockets to listen on any locally available network device
	 * @alias Titanium.Network.INADDR_ANY
	 * @property {String}
	 */
	INADDR_ANY: '',
	/**
	 * constant value to indicate that the network is LAN
	 * @alias Titanium.Network.NETWORK_LAN
	 * @property {Integer}
	 */
	NETWORK_LAN: 0,
	/**
	 * constant value to indicate that the network is MOBILE
	 * @alias Titanium.Network.NETWORK_MOBILE
	 * @property {Integer}
	 */
	NETWORK_MOBILE: 0,
	/**
	 * constant value to indicate that the network is not available
	 * @alias Titanium.Network.NETWORK_NONE
	 * @property {Integer}
	 */
	NETWORK_NONE: 0,
	/**
	 * constant value to indicate that the network is not known
	 * @alias Titanium.Network.NETWORK_UNKNOWN
	 * @property {Integer}
	 */
	NETWORK_UNKNOWN: 0,
	/**
	 * constant value to indicate that the network is WIFI
	 * @alias Titanium.Network.NETWORK_WIFI
	 * @property {Integer}
	 */
	NETWORK_WIFI: 0,
	/**
	 * constant value for the push notification alert type
	 * @alias Titanium.Network.NOTIFICATION_TYPE_ALERT
	 * @property {Integer}
	 */
	NOTIFICATION_TYPE_ALERT: 0,
	/**
	 * constant value for the push notification badge type
	 * @alias Titanium.Network.NOTIFICATION_TYPE_BADGE
	 * @property {Integer}
	 */
	NOTIFICATION_TYPE_BADGE: 0,
	/**
	 * constant value for the push notification sound type
	 * @alias Titanium.Network.NOTIFICATION_TYPE_SOUND
	 * @property {Integer}
	 */
	NOTIFICATION_TYPE_SOUND: 0,
	/**
	 * constant value specifying read-only mode for sockets
	 * @alias Titanium.Network.READ_MODE
	 * @property {Integer}
	 */
	READ_MODE: 0,
	/**
	 * constant value specifying read-write mode for sockets
	 * @alias Titanium.Network.READ_WRITE_MODE
	 * @property {Integer}
	 */
	READ_WRITE_MODE: 0,
	/**
	 * constant value specifying write-only mode for sockets
	 * @alias Titanium.Network.WRITE_MODE
	 * @property {Integer}
	 */
	WRITE_MODE: 0,
	/**
	 * the network type value as a constant.
	 * @alias Titanium.Network.networkType
	 * @property {Integer}
	 */
	networkType: 0,
	/**
	 * Get the the network type value as a constant.
	 * @alias Titanium.Network.getNetworkType
	 * @return {Integer}
	 */
	getNetworkType: function () { return networkType; },
	/**
	 * Set the the network type value as a constant.
	 * @param {Integer} value New value to set.
	 * @alias Titanium.Network.setNetworkType
	 */
	setNetworkType: function () { },
	/**
	 * the network type name constant. Returns one of NONE, WIFI, LAN or MOBILE.
	 * @alias Titanium.Network.networkTypeName
	 * @property {String}
	 */
	networkTypeName: '',
	/**
	 * Get the the network type name constant. Returns one of NONE, WIFI, LAN or MOBILE.
	 * @alias Titanium.Network.getNetworkTypeName
	 * @return {String}
	 */
	getNetworkTypeName: function () { return networkTypeName; },
	/**
	 * Set the the network type name constant. Returns one of NONE, WIFI, LAN or MOBILE.
	 * @param {String} value New value to set.
	 * @alias Titanium.Network.setNetworkTypeName
	 */
	setNetworkTypeName: function () { },
	/**
	 * readonly boolean value that indicates if the network is reachable to the Internet either via WIFI or Carrier network
	 * @alias Titanium.Network.online
	 * @property {Boolean}
	 */
	online: false,
	/**
	 * Get the readonly boolean value that indicates if the network is reachable to the Internet either via WIFI or Carrier network
	 * @alias Titanium.Network.getOnline
	 * @return {Boolean}
	 */
	getOnline: function () { return online; },
	/**
	 * Set the readonly boolean value that indicates if the network is reachable to the Internet either via WIFI or Carrier network
	 * @param {Boolean} value New value to set.
	 * @alias Titanium.Network.setOnline
	 */
	setOnline: function () { },
	/**
	 * the remote device UUID if the device was registered with the Apple Push Notification Service or null if not set. Only available on iPhone.
	 * @alias Titanium.Network.remoteDeviceUUID
	 * @property {String}
	 */
	remoteDeviceUUID: '',
	/**
	 * Get the the remote device UUID if the device was registered with the Apple Push Notification Service or null if not set. Only available on iPhone.
	 * @alias Titanium.Network.getRemoteDeviceUUID
	 * @return {String}
	 */
	getRemoteDeviceUUID: function () { return remoteDeviceUUID; },
	/**
	 * Set the the remote device UUID if the device was registered with the Apple Push Notification Service or null if not set. Only available on iPhone.
	 * @param {String} value New value to set.
	 * @alias Titanium.Network.setRemoteDeviceUUID
	 */
	setRemoteDeviceUUID: function () { },
	/**
	 * returns an array of network type constants enabled for the application. Only available on iPhone.
	 * @alias Titanium.Network.remoteNotificationTypes
	 * @property {Array}
	 */
	remoteNotificationTypes: [],
	/**
	 * Get the returns an array of network type constants enabled for the application. Only available on iPhone.
	 * @alias Titanium.Network.getRemoteNotificationTypes
	 * @return {Array}
	 */
	getRemoteNotificationTypes: function () { return remoteNotificationTypes; },
	/**
	 * Set the returns an array of network type constants enabled for the application. Only available on iPhone.
	 * @param {Array} value New value to set.
	 * @alias Titanium.Network.setRemoteNotificationTypes
	 */
	setRemoteNotificationTypes: function () { },
	/**
	 * returns true if remote notifications have been enabled. Only available on iPhone.
	 * @alias Titanium.Network.remoteNotificationsEnabled
	 * @property {Boolean}
	 */
	remoteNotificationsEnabled: false,
	/**
	 * Get the returns true if remote notifications have been enabled. Only available on iPhone.
	 * @alias Titanium.Network.getRemoteNotificationsEnabled
	 * @return {Boolean}
	 */
	getRemoteNotificationsEnabled: function () { return remoteNotificationsEnabled; },
	/**
	 * Set the returns true if remote notifications have been enabled. Only available on iPhone.
	 * @param {Boolean} value New value to set.
	 * @alias Titanium.Network.setRemoteNotificationsEnabled
	 */
	setRemoteNotificationsEnabled: function () { },
	/**
	 * adds a connectivity listener to listen for network changes. This method has been deprecated in favor of listening for a change event.
	 * @param {Function} callback callback function to invoke upon network connectivity changes
	 * @alias Titanium.Network.addConnectivityListener
	 */
	addConnectivityListener: function (callback) { },
	/**
	 * add an event listener for the instance to receive view triggered events
	 * @param {String} name name of the event
	 * @param {Function} callback callback function to invoke when the event is fired
	 * @alias Titanium.Network.addEventListener
	 */
	addEventListener: function (name,callback) { },
	/**
	 * create and return an instance of Titanium.Network.BonjourBrowser
	 * @param {String} serviceType service to search for, must include the protocol type suffix (._tcp)
	 * @param {String} domain the Bonjour service domain to conduct the search in.  Default value is 'local.'
	 * @param {Object} [parameters] (optional) a dictionary object properties defined in <a href="Titanium.Network.BonjourBrowser.html">Titanium.Network.BonjourBrowser</a>
	 * @alias Titanium.Network.createBonjourBrowser
	 * @return {Titanium_Network_BonjourBrowser}
	 */
	createBonjourBrowser: function (serviceType,domain,parameters) { return new Titanium_Network_BonjourBrowser(); },
	/**
	 * create and return an instance of Titanium.Network.BonjourService
	 * @param {String} name the name of the service.  Must be a unique identifier for this service type and domain.
	 * @param {String} type the type of service.  Must include the protocol identifier (._tcp)
	 * @param {String} domain the domain to publish the service in.  Default value is 'local.'
	 * @param {Object} [parameters] (optional) a dictionary object properties defined in <a href="Titanium.Network.BonjourService.html">Titanium.Network.BonjourService</a>
	 * @alias Titanium.Network.createBonjourService
	 * @return {Titanium_Network_BonjourService}
	 */
	createBonjourService: function (name,type,domain,parameters) { return new Titanium_Network_BonjourService(); },
	/**
	 * create and return an instance of Titanium.Network.HTTPClient
	 * @param {Object} [parameters] (optional) a dictionary object properties defined in <a href="Titanium.Network.HTTPClient.html">Titanium.Network.HTTPClient</a>
	 * @alias Titanium.Network.createHTTPClient
	 * @return {Titanium_Network_HTTPClient}
	 */
	createHTTPClient: function (parameters) { return new Titanium_Network_HTTPClient(); },
	/**
	 * create and return an instance of Titanium.Network.TCPSocket
	 * @param {String} hostName the host name to connect to/listen on
	 * @param {Integer} port the port for the socket
	 * @param {Integer} mode the socket's mode; one of <a href="Titanium.Network.READ_MODE.html">Titanium.Network.READ_MODE</a>, <a href="Titanium.Network.WRITE_MODE.html">Titanium.Network.WRITE_MODE</a>, <a href="Titanium.Network.READ_WRITE_MODE.html">Titanium.Network.READ_WRITE_MODE</a>
	 * @param {Object} [parameters] (optional) a dictionary object properties defined in <a href="Titanium.Network.TCPSocket.html">Titanium.Network.TCPSocket</a>
	 * @alias Titanium.Network.createTCPSocket
	 * @return {Titanium_Network_TCPSocket}
	 */
	createTCPSocket: function (hostName,port,mode,parameters) { return new Titanium_Network_TCPSocket(); },
	/**
	 * decode a URI component part using URI encoding
	 * @param {String} value input value to be decoded
	 * @alias Titanium.Network.decodeURIComponent
	 * @return {String}
	 */
	decodeURIComponent: function (value) { return ''; },
	/**
	 * encode a URI component part using URI encoding
	 * @param {String} value input value to be encoded
	 * @alias Titanium.Network.encodeURIComponent
	 * @return {String}
	 */
	encodeURIComponent: function (value) { return ''; },
	/**
	 * fire a synthesized event to the views listener
	 * @param {String} name name of the event
	 * @param {Object} event event object
	 * @alias Titanium.Network.fireEvent
	 */
	fireEvent: function (name,event) { },
	/**
	 * register for push notifications with the Apple Push Notification Service. Only available on iPhone.
	 * @param {Object} config dictionary of the following: <tt>types</tt> is an array of type constants that the application would like to receive, <tt>success</tt> is a callback function that is called when the push registration is successfully completed, <tt>error</tt> is a callback function that is called when an error is received during registration and <tt>callback</tt> is a callback function that is invoked upon receiving a new push notification. This method should be called at application startup.
	 * @alias Titanium.Network.registerForPushNotifications
	 */
	registerForPushNotifications: function (config) { },
	/**
	 * removes a connectivity listener. This method has been deprecated in favor of listening for a change event.
	 * @param {Function} callback callback function to remove
	 * @alias Titanium.Network.removeConnectivityListener
	 */
	removeConnectivityListener: function (callback) { },
	/**
	 * remove a previously added event listener
	 * @param {String} name name of the event
	 * @param {Function} callback callback function passed in addEventListener
	 * @alias Titanium.Network.removeEventListener
	 */
	removeEventListener: function (name,callback) { },
};

/**
 * The BonjourBrowser instance returned from Titanium.Network.createBonjourBrowser.  This object is a browser for the discovery and retrieval of Bonjour services available on the network.
 * @since 1.2.0
 */
Titanium.Network.BonjourBrowser = {
	/**
	 * The domain the browser is searching in
	 * @alias Titanium.Network.BonjourBrowser.domain
	 * @property {String}
	 */
	domain: '',
	/**
	 * Get the The domain the browser is searching in
	 * @alias Titanium.Network.BonjourBrowser.getDomain
	 * @return {String}
	 */
	getDomain: function () { return domain; },
	/**
	 * Set the The domain the browser is searching in
	 * @param {String} value New value to set.
	 * @alias Titanium.Network.BonjourBrowser.setDomain
	 */
	setDomain: function () { },
	/**
	 * Whether or not the browser is currently searching
	 * @alias Titanium.Network.BonjourBrowser.isSearching
	 * @property {Boolean}
	 */
	isSearching: false,
	/**
	 * Get the Whether or not the browser is currently searching
	 * @alias Titanium.Network.BonjourBrowser.getIsSearching
	 * @return {Boolean}
	 */
	getIsSearching: function () { return isSearching; },
	/**
	 * Set the Whether or not the browser is currently searching
	 * @param {Boolean} value New value to set.
	 * @alias Titanium.Network.BonjourBrowser.setIsSearching
	 */
	setIsSearching: function () { },
	/**
	 * The type of the service the browser searches for
	 * @alias Titanium.Network.BonjourBrowser.serviceType
	 * @property {String}
	 */
	serviceType: '',
	/**
	 * Get the The type of the service the browser searches for
	 * @alias Titanium.Network.BonjourBrowser.getServiceType
	 * @return {String}
	 */
	getServiceType: function () { return serviceType; },
	/**
	 * Set the The type of the service the browser searches for
	 * @param {String} value New value to set.
	 * @alias Titanium.Network.BonjourBrowser.setServiceType
	 */
	setServiceType: function () { },
	/**
	 * Conduct a search for Bonjour services matching the type and domain specified during creation
	 * @alias Titanium.Network.BonjourBrowser.search
	 */
	search: function () { },
	/**
	 * Halt an ongoing search
	 * @alias Titanium.Network.BonjourBrowser.stopSearch
	 */
	stopSearch: function () { },
};

/**
 * The BonjourService instance returned either from Titanium.Network.createBonjourService or via the service list from a BonjourBrowser updatedServices event.  This object describes a service on the network which is published by Bonjour.
 * @since 1.2.0
 */
Titanium.Network.BonjourService = {
	/**
	 * the domain of the service
	 * @alias Titanium.Network.BonjourService.domain
	 * @property {String}
	 */
	domain: '',
	/**
	 * Get the the domain of the service
	 * @alias Titanium.Network.BonjourService.getDomain
	 * @return {String}
	 */
	getDomain: function () { return domain; },
	/**
	 * Set the the domain of the service
	 * @param {String} value New value to set.
	 * @alias Titanium.Network.BonjourService.setDomain
	 */
	setDomain: function () { },
	/**
	 * whether or not the service is local to the device
	 * @alias Titanium.Network.BonjourService.isLocal
	 * @property {Boolean}
	 */
	isLocal: false,
	/**
	 * Get the whether or not the service is local to the device
	 * @alias Titanium.Network.BonjourService.getIsLocal
	 * @return {Boolean}
	 */
	getIsLocal: function () { return isLocal; },
	/**
	 * Set the whether or not the service is local to the device
	 * @param {Boolean} value New value to set.
	 * @alias Titanium.Network.BonjourService.setIsLocal
	 */
	setIsLocal: function () { },
	/**
	 * the name of the service
	 * @alias Titanium.Network.BonjourService.name
	 * @property {String}
	 */
	name: '',
	/**
	 * Get the the name of the service
	 * @alias Titanium.Network.BonjourService.getName
	 * @return {String}
	 */
	getName: function () { return name; },
	/**
	 * Set the the name of the service
	 * @param {String} value New value to set.
	 * @alias Titanium.Network.BonjourService.setName
	 */
	setName: function () { },
	/**
	 * the TCPSocket object that is used to connect to the service
	 * @alias Titanium.Network.BonjourService.socket
	 * @property {Object}
	 */
	socket: {},
	/**
	 * Get the the TCPSocket object that is used to connect to the service
	 * @alias Titanium.Network.BonjourService.getSocket
	 * @return {Object}
	 */
	getSocket: function () { return socket; },
	/**
	 * Set the the TCPSocket object that is used to connect to the service
	 * @param {Object} value New value to set.
	 * @alias Titanium.Network.BonjourService.setSocket
	 */
	setSocket: function () { },
	/**
	 * the type of the service
	 * @alias Titanium.Network.BonjourService.type
	 * @property {String}
	 */
	type: '',
	/**
	 * Get the the type of the service
	 * @alias Titanium.Network.BonjourService.getType
	 * @return {String}
	 */
	getType: function () { return type; },
	/**
	 * Set the the type of the service
	 * @param {String} value New value to set.
	 * @alias Titanium.Network.BonjourService.setType
	 */
	setType: function () { },
	/**
	 * Publish a Bonjour service to the network.  Only works if isLocal is TRUE
	 * @param {Object} socket a TCPSocket object to associate with the Bonjour service.
	 * @alias Titanium.Network.BonjourService.publish
	 */
	publish: function (socket) { },
	/**
	 * Resolve a Bonjour service from the network.  Must be done before attempting to access the service's socket information, if a remote service.  You cannot resolve a locally published service.
	 * @param {Double} timeout the timeout for service resolution, in seconds.  Optional, default is 120s.
	 * @alias Titanium.Network.BonjourService.resolve
	 */
	resolve: function (timeout) { },
	/**
	 * Halts publication of a service.
	 * @alias Titanium.Network.BonjourService.stop
	 */
	stop: function () { },
};

/**
 * The HttpClient instance returned from Titanium.Network.createHTTPClient. This object (mostly) implements the XMLHttpRequest specification.
 * @since 0.1
 */
Titanium.Network.HTTPClient = {
	/**
	 * the DONE readyState constant
	 * @alias Titanium.Network.HTTPClient.DONE
	 * @property {Integer}
	 */
	DONE: 0,
	/**
	 * the HEADERS_RECEIVED readyState constant
	 * @alias Titanium.Network.HTTPClient.HEADERS_RECEIVED
	 * @property {Integer}
	 */
	HEADERS_RECEIVED: 0,
	/**
	 * the LOADING readyState constant
	 * @alias Titanium.Network.HTTPClient.LOADING
	 * @property {Integer}
	 */
	LOADING: 0,
	/**
	 * the OPENED readyState constant
	 * @alias Titanium.Network.HTTPClient.OPENED
	 * @property {Integer}
	 */
	OPENED: 0,
	/**
	 * the UNSET readyState constant
	 * @alias Titanium.Network.HTTPClient.UNSENT
	 * @property {Integer}
	 */
	UNSENT: 0,
	/**
	 * boolean to indicate that the response was successful
	 * @alias Titanium.Network.HTTPClient.connected
	 * @property {Boolean}
	 */
	connected: false,
	/**
	 * Get the boolean to indicate that the response was successful
	 * @alias Titanium.Network.HTTPClient.getConnected
	 * @return {Boolean}
	 */
	getConnected: function () { return connected; },
	/**
	 * Set the boolean to indicate that the response was successful
	 * @param {Boolean} value New value to set.
	 * @alias Titanium.Network.HTTPClient.setConnected
	 */
	setConnected: function () { },
	/**
	 * the connection type, normally either GET or POST.
	 * @alias Titanium.Network.HTTPClient.connectionType
	 * @property {String}
	 */
	connectionType: '',
	/**
	 * Get the the connection type, normally either GET or POST.
	 * @alias Titanium.Network.HTTPClient.getConnectionType
	 * @return {String}
	 */
	getConnectionType: function () { return connectionType; },
	/**
	 * Set the the connection type, normally either GET or POST.
	 * @param {String} value New value to set.
	 * @alias Titanium.Network.HTTPClient.setConnectionType
	 */
	setConnectionType: function () { },
	/**
	 * file to download contents to.  Can only be set after calling open.  iOS only
	 * @alias Titanium.Network.HTTPClient.file
	 * @property {String}
	 */
	file: '',
	/**
	 * Get the file to download contents to.  Can only be set after calling open.  iOS only
	 * @alias Titanium.Network.HTTPClient.getFile
	 * @return {String}
	 */
	getFile: function () { return file; },
	/**
	 * Set the file to download contents to.  Can only be set after calling open.  iOS only
	 * @param {String} value New value to set.
	 * @alias Titanium.Network.HTTPClient.setFile
	 */
	setFile: function () { },
	/**
	 * the absolute URL of the request
	 * @alias Titanium.Network.HTTPClient.location
	 * @property {String}
	 */
	location: '',
	/**
	 * Get the the absolute URL of the request
	 * @alias Titanium.Network.HTTPClient.getLocation
	 * @return {String}
	 */
	getLocation: function () { return location; },
	/**
	 * Set the the absolute URL of the request
	 * @param {String} value New value to set.
	 * @alias Titanium.Network.HTTPClient.setLocation
	 */
	setLocation: function () { },
	/**
	 * set this to a function before calling open to cause the function to be called at regular intervals as the request data is being received. the progress property of the event will contain a value from 0.0-1.0 with the progress.
	 * @alias Titanium.Network.HTTPClient.ondatastream
	 * @property {Function}
	 */
	ondatastream: {},
	/**
	 * Get the set this to a function before calling open to cause the function to be called at regular intervals as the request data is being received. the progress property of the event will contain a value from 0.0-1.0 with the progress.
	 * @alias Titanium.Network.HTTPClient.getOndatastream
	 * @return {Function}
	 */
	getOndatastream: function () { return ondatastream; },
	/**
	 * Set the set this to a function before calling open to cause the function to be called at regular intervals as the request data is being received. the progress property of the event will contain a value from 0.0-1.0 with the progress.
	 * @param {Function} value New value to set.
	 * @alias Titanium.Network.HTTPClient.setOndatastream
	 */
	setOndatastream: function () { },
	/**
	 * set this to a function before calling open to cause the function to be called upon a error response
	 * @alias Titanium.Network.HTTPClient.onerror
	 * @property {Function}
	 */
	onerror: {},
	/**
	 * Get the set this to a function before calling open to cause the function to be called upon a error response
	 * @alias Titanium.Network.HTTPClient.getOnerror
	 * @return {Function}
	 */
	getOnerror: function () { return onerror; },
	/**
	 * Set the set this to a function before calling open to cause the function to be called upon a error response
	 * @param {Function} value New value to set.
	 * @alias Titanium.Network.HTTPClient.setOnerror
	 */
	setOnerror: function () { },
	/**
	 * set this to a function before calling open to cause the function to be called upon a successful response
	 * @alias Titanium.Network.HTTPClient.onload
	 * @property {Function}
	 */
	onload: {},
	/**
	 * Get the set this to a function before calling open to cause the function to be called upon a successful response
	 * @alias Titanium.Network.HTTPClient.getOnload
	 * @return {Function}
	 */
	getOnload: function () { return onload; },
	/**
	 * Set the set this to a function before calling open to cause the function to be called upon a successful response
	 * @param {Function} value New value to set.
	 * @alias Titanium.Network.HTTPClient.setOnload
	 */
	setOnload: function () { },
	/**
	 * set this to a function before calling open to cause the function to be called for each readyState change
	 * @alias Titanium.Network.HTTPClient.onreadystatechange
	 * @property {Function}
	 */
	onreadystatechange: {},
	/**
	 * Get the set this to a function before calling open to cause the function to be called for each readyState change
	 * @alias Titanium.Network.HTTPClient.getOnreadystatechange
	 * @return {Function}
	 */
	getOnreadystatechange: function () { return onreadystatechange; },
	/**
	 * Set the set this to a function before calling open to cause the function to be called for each readyState change
	 * @param {Function} value New value to set.
	 * @alias Titanium.Network.HTTPClient.setOnreadystatechange
	 */
	setOnreadystatechange: function () { },
	/**
	 * set this to a function before calling open to cause the function to be called at regular intervals as the request data is being transmitted. the progress property of the event will contain a value from 0.0-1.0 with the progress.
	 * @alias Titanium.Network.HTTPClient.onsendstream
	 * @property {Function}
	 */
	onsendstream: {},
	/**
	 * Get the set this to a function before calling open to cause the function to be called at regular intervals as the request data is being transmitted. the progress property of the event will contain a value from 0.0-1.0 with the progress.
	 * @alias Titanium.Network.HTTPClient.getOnsendstream
	 * @return {Function}
	 */
	getOnsendstream: function () { return onsendstream; },
	/**
	 * Set the set this to a function before calling open to cause the function to be called at regular intervals as the request data is being transmitted. the progress property of the event will contain a value from 0.0-1.0 with the progress.
	 * @param {Function} value New value to set.
	 * @alias Titanium.Network.HTTPClient.setOnsendstream
	 */
	setOnsendstream: function () { },
	/**
	 * the readyState value
	 * @alias Titanium.Network.HTTPClient.readyState
	 * @property {Integer}
	 */
	readyState: 0,
	/**
	 * Get the the readyState value
	 * @alias Titanium.Network.HTTPClient.getReadyState
	 * @return {Integer}
	 */
	getReadyState: function () { return readyState; },
	/**
	 * Set the the readyState value
	 * @param {Integer} value New value to set.
	 * @alias Titanium.Network.HTTPClient.setReadyState
	 */
	setReadyState: function () { },
	/**
	 * the response data as a Blob object.
	 * @alias Titanium.Network.HTTPClient.responseData
	 * @property {Object}
	 */
	responseData: {},
	/**
	 * Get the the response data as a Blob object.
	 * @alias Titanium.Network.HTTPClient.getResponseData
	 * @return {Object}
	 */
	getResponseData: function () { return responseData; },
	/**
	 * Set the the response data as a Blob object.
	 * @param {Object} value New value to set.
	 * @alias Titanium.Network.HTTPClient.setResponseData
	 */
	setResponseData: function () { },
	/**
	 * the response as text or null if an error was received or no data was returned
	 * @alias Titanium.Network.HTTPClient.responseText
	 * @property {String}
	 */
	responseText: '',
	/**
	 * Get the the response as text or null if an error was received or no data was returned
	 * @alias Titanium.Network.HTTPClient.getResponseText
	 * @return {String}
	 */
	getResponseText: function () { return responseText; },
	/**
	 * Set the the response as text or null if an error was received or no data was returned
	 * @param {String} value New value to set.
	 * @alias Titanium.Network.HTTPClient.setResponseText
	 */
	setResponseText: function () { },
	/**
	 * the response object as an XML DOMDocument object. returns null if the content type returned by the server was not XML or the content could not be parsed
	 * @alias Titanium.Network.HTTPClient.responseXML
	 * @property {Object}
	 */
	responseXML: {},
	/**
	 * Get the the response object as an XML DOMDocument object. returns null if the content type returned by the server was not XML or the content could not be parsed
	 * @alias Titanium.Network.HTTPClient.getResponseXML
	 * @return {Object}
	 */
	getResponseXML: function () { return responseXML; },
	/**
	 * Set the the response object as an XML DOMDocument object. returns null if the content type returned by the server was not XML or the content could not be parsed
	 * @param {Object} value New value to set.
	 * @alias Titanium.Network.HTTPClient.setResponseXML
	 */
	setResponseXML: function () { },
	/**
	 * the response HTTP status code
	 * @alias Titanium.Network.HTTPClient.status
	 * @property {Integer}
	 */
	status: 0,
	/**
	 * Get the the response HTTP status code
	 * @alias Titanium.Network.HTTPClient.getStatus
	 * @return {Integer}
	 */
	getStatus: function () { return status; },
	/**
	 * Set the the response HTTP status code
	 * @param {Integer} value New value to set.
	 * @alias Titanium.Network.HTTPClient.setStatus
	 */
	setStatus: function () { },
	/**
	 * timeout is milliseconds when the connection should be aborted
	 * @alias Titanium.Network.HTTPClient.timeout
	 * @property {Integer}
	 */
	timeout: 0,
	/**
	 * Get the timeout is milliseconds when the connection should be aborted
	 * @alias Titanium.Network.HTTPClient.getTimeout
	 * @return {Integer}
	 */
	getTimeout: function () { return timeout; },
	/**
	 * Set the timeout is milliseconds when the connection should be aborted
	 * @param {Integer} value New value to set.
	 * @alias Titanium.Network.HTTPClient.setTimeout
	 */
	setTimeout: function () { },
	/**
	 * set this to control how SSL certification validation is performed on connection.  defaults to false if in simulator or device testing and true if release for distribution mode.
	 * @alias Titanium.Network.HTTPClient.validatesSecureCertificate
	 * @property {Boolean}
	 */
	validatesSecureCertificate: false,
	/**
	 * Get the set this to control how SSL certification validation is performed on connection.  defaults to false if in simulator or device testing and true if release for distribution mode.
	 * @alias Titanium.Network.HTTPClient.getValidatesSecureCertificate
	 * @return {Boolean}
	 */
	getValidatesSecureCertificate: function () { return validatesSecureCertificate; },
	/**
	 * Set the set this to control how SSL certification validation is performed on connection.  defaults to false if in simulator or device testing and true if release for distribution mode.
	 * @param {Boolean} value New value to set.
	 * @alias Titanium.Network.HTTPClient.setValidatesSecureCertificate
	 */
	setValidatesSecureCertificate: function () { },
	/**
	 * abort a pending request
	 * @alias Titanium.Network.HTTPClient.abort
	 */
	abort: function () { },
	/**
	 * return the response header.
	 * @param {String} name the header name
	 * @alias Titanium.Network.HTTPClient.getResponseHeader
	 * @return {String}
	 */
	getResponseHeader: function (name) { return ''; },
	/**
	 * open the request and ready the connection
	 * @param {String} method the HTTP method
	 * @param {String} url the URL for the request
	 * @param {Boolean} [async] optional property to indicate if asynchronous (default) or not
	 * @alias Titanium.Network.HTTPClient.open
	 */
	open: function (method,url,async) { },
	/**
	 * send the request
	 * @param {Object} data the data to send in the request. can either be null, dictionary, string, File object or Blob.
	 * @alias Titanium.Network.HTTPClient.send
	 */
	send: function (data) { },
	/**
	 * set the request header. Must be called after open but before send.
	 * @param {String} name name of the header
	 * @param {String} value value of the header. May be null to clearing out a property, such as X-Requested-With
	 * @alias Titanium.Network.HTTPClient.setRequestHeader
	 */
	setRequestHeader: function (name,value) { },
	/**
	 * set the request timeout
	 * @param {Double} timeout the timeout in milliseconds
	 * @alias Titanium.Network.HTTPClient.setTimeout
	 */
	setTimeout: function (timeout) { },
};

/**
 * The TCPSocket instance returned from Titanium.Network.createTCPSocket.  This object represents a socket which either listens locally on the device for connections, or connects to a remote machine.
 * @since 1.2.0
 */
Titanium.Network.TCPSocket = {
	/**
	 * the host name to connect to.  Must be Titanium.Network.INADDR_ANY or an identifier for the local device in order to listen
	 * @alias Titanium.Network.TCPSocket.hostName
	 * @property {String}
	 */
	hostName: '',
	/**
	 * Get the the host name to connect to.  Must be Titanium.Network.INADDR_ANY or an identifier for the local device in order to listen
	 * @alias Titanium.Network.TCPSocket.getHostName
	 * @return {String}
	 */
	getHostName: function () { return hostName; },
	/**
	 * Set the the host name to connect to.  Must be Titanium.Network.INADDR_ANY or an identifier for the local device in order to listen
	 * @param {String} value New value to set.
	 * @alias Titanium.Network.TCPSocket.setHostName
	 */
	setHostName: function () { },
	/**
	 * whether or not the socket is valid
	 * @alias Titanium.Network.TCPSocket.isValid
	 * @property {Boolean}
	 */
	isValid: false,
	/**
	 * Get the whether or not the socket is valid
	 * @alias Titanium.Network.TCPSocket.getIsValid
	 * @return {Boolean}
	 */
	getIsValid: function () { return isValid; },
	/**
	 * Set the whether or not the socket is valid
	 * @param {Boolean} value New value to set.
	 * @alias Titanium.Network.TCPSocket.setIsValid
	 */
	setIsValid: function () { },
	/**
	 * the socket's mode
	 * @alias Titanium.Network.TCPSocket.mode
	 * @property {Integer}
	 */
	mode: 0,
	/**
	 * Get the the socket's mode
	 * @alias Titanium.Network.TCPSocket.getMode
	 * @return {Integer}
	 */
	getMode: function () { return mode; },
	/**
	 * Set the the socket's mode
	 * @param {Integer} value New value to set.
	 * @alias Titanium.Network.TCPSocket.setMode
	 */
	setMode: function () { },
	/**
	 * the port to connect/listen on
	 * @alias Titanium.Network.TCPSocket.port
	 * @property {Integer}
	 */
	port: 0,
	/**
	 * Get the the port to connect/listen on
	 * @alias Titanium.Network.TCPSocket.getPort
	 * @return {Integer}
	 */
	getPort: function () { return port; },
	/**
	 * Set the the port to connect/listen on
	 * @param {Integer} value New value to set.
	 * @alias Titanium.Network.TCPSocket.setPort
	 */
	setPort: function () { },
	/**
	 * strip terminating null character when sending string data; default is false
	 * @alias Titanium.Network.TCPSocket.stripTerminator
	 * @property {Boolean}
	 */
	stripTerminator: false,
	/**
	 * Get the strip terminating null character when sending string data; default is false
	 * @alias Titanium.Network.TCPSocket.getStripTerminator
	 * @return {Boolean}
	 */
	getStripTerminator: function () { return stripTerminator; },
	/**
	 * Set the strip terminating null character when sending string data; default is false
	 * @param {Boolean} value New value to set.
	 * @alias Titanium.Network.TCPSocket.setStripTerminator
	 */
	setStripTerminator: function () { },
	/**
	 * close the socket
	 * @alias Titanium.Network.TCPSocket.close
	 */
	close: function () { },
	/**
	 * connect the scocket to a TCP server
	 * @alias Titanium.Network.TCPSocket.connect
	 */
	connect: function () { },
	/**
	 * set up the socket to receive connections
	 * @alias Titanium.Network.TCPSocket.listen
	 */
	listen: function () { },
	/**
	 * write data to the socket, if the mode is WRITE_MODE or READ_WRITE_MODE
	 * @param {Object,String} data either a string or blob object representing the data to be transferred
	 * @param {Integer} sendTo the socket reference to send the data to.  Default is to send to all connected sockets
	 * @alias Titanium.Network.TCPSocket.write
	 */
	write: function (data,sendTo) { },
};

/**
 * The top level Platform module.  The Platform module is used accessing the device's platform
related functionality.
 * @since 0.1
 */
Titanium.Platform = {
	/**
	 * the device is plugged in and currently being charged
	 * @alias Titanium.Platform.BATTERY_STATE_CHARGING
	 * @property {Integer}
	 */
	BATTERY_STATE_CHARGING: 0,
	/**
	 * the battery is fully charged
	 * @alias Titanium.Platform.BATTERY_STATE_FULL
	 * @property {Integer}
	 */
	BATTERY_STATE_FULL: 0,
	/**
	 * the battery state is unknown or not monitoring is not enabled
	 * @alias Titanium.Platform.BATTERY_STATE_UNKNOWN
	 * @property {Integer}
	 */
	BATTERY_STATE_UNKNOWN: 0,
	/**
	 * the device is unplugged
	 * @alias Titanium.Platform.BATTERY_STATE_UNPLUGGED
	 * @property {Integer}
	 */
	BATTERY_STATE_UNPLUGGED: 0,
	/**
	 * the ip address that the device reports (only applicable on WIFI network)
	 * @alias Titanium.Platform.address
	 * @property {String}
	 */
	address: '',
	/**
	 * Get the the ip address that the device reports (only applicable on WIFI network)
	 * @alias Titanium.Platform.getAddress
	 * @return {String}
	 */
	getAddress: function () { return address; },
	/**
	 * Set the the ip address that the device reports (only applicable on WIFI network)
	 * @param {String} value New value to set.
	 * @alias Titanium.Platform.setAddress
	 */
	setAddress: function () { },
	/**
	 * the processor architecture that the device reports
	 * @alias Titanium.Platform.architecture
	 * @property {String}
	 */
	architecture: '',
	/**
	 * Get the the processor architecture that the device reports
	 * @alias Titanium.Platform.getArchitecture
	 * @return {String}
	 */
	getArchitecture: function () { return architecture; },
	/**
	 * Set the the processor architecture that the device reports
	 * @param {String} value New value to set.
	 * @alias Titanium.Platform.setArchitecture
	 */
	setArchitecture: function () { },
	/**
	 * return the amount of memory available on the device in bytes
	 * @alias Titanium.Platform.availableMemory
	 * @property {Double}
	 */
	availableMemory: 0.0,
	/**
	 * Get the return the amount of memory available on the device in bytes
	 * @alias Titanium.Platform.getAvailableMemory
	 * @return {Double}
	 */
	getAvailableMemory: function () { return availableMemory; },
	/**
	 * Set the return the amount of memory available on the device in bytes
	 * @param {Double} value New value to set.
	 * @alias Titanium.Platform.setAvailableMemory
	 */
	setAvailableMemory: function () { },
	/**
	 * the current device battery level. this property is only accessible if batteryMonitoring is enabled. on iPhone, this level only changes at 5% intervals.
	 * @alias Titanium.Platform.batteryLevel
	 * @property {Float}
	 */
	batteryLevel: 0.0,
	/**
	 * Get the the current device battery level. this property is only accessible if batteryMonitoring is enabled. on iPhone, this level only changes at 5% intervals.
	 * @alias Titanium.Platform.getBatteryLevel
	 * @return {Float}
	 */
	getBatteryLevel: function () { return batteryLevel; },
	/**
	 * Set the the current device battery level. this property is only accessible if batteryMonitoring is enabled. on iPhone, this level only changes at 5% intervals.
	 * @param {Float} value New value to set.
	 * @alias Titanium.Platform.setBatteryLevel
	 */
	setBatteryLevel: function () { },
	/**
	 * boolean to indicate if battery monitoring is enabled
	 * @alias Titanium.Platform.batteryMonitoring
	 * @property {Boolean}
	 */
	batteryMonitoring: false,
	/**
	 * Get the boolean to indicate if battery monitoring is enabled
	 * @alias Titanium.Platform.getBatteryMonitoring
	 * @return {Boolean}
	 */
	getBatteryMonitoring: function () { return batteryMonitoring; },
	/**
	 * Set the boolean to indicate if battery monitoring is enabled
	 * @param {Boolean} value New value to set.
	 * @alias Titanium.Platform.setBatteryMonitoring
	 */
	setBatteryMonitoring: function () { },
	/**
	 * constant that represents the state of the battery. this property is only accessible if batteryMonitoring is enabled
	 * @alias Titanium.Platform.batteryState
	 * @property {Integer}
	 */
	batteryState: 0,
	/**
	 * Get the constant that represents the state of the battery. this property is only accessible if batteryMonitoring is enabled
	 * @alias Titanium.Platform.getBatteryState
	 * @return {Integer}
	 */
	getBatteryState: function () { return batteryState; },
	/**
	 * Set the constant that represents the state of the battery. this property is only accessible if batteryMonitoring is enabled
	 * @param {Integer} value New value to set.
	 * @alias Titanium.Platform.setBatteryState
	 */
	setBatteryState: function () { },
	/**
	 * return the DisplayCaps object for platform
	 * @alias Titanium.Platform.displayCaps
	 * @property {Object}
	 */
	displayCaps: {},
	/**
	 * Get the return the DisplayCaps object for platform
	 * @alias Titanium.Platform.getDisplayCaps
	 * @return {Object}
	 */
	getDisplayCaps: function () { return displayCaps; },
	/**
	 * Set the return the DisplayCaps object for platform
	 * @param {Object} value New value to set.
	 * @alias Titanium.Platform.setDisplayCaps
	 */
	setDisplayCaps: function () { },
	/**
	 * the unique id of the device
	 * @alias Titanium.Platform.id
	 * @property {String}
	 */
	id: '',
	/**
	 * Get the the unique id of the device
	 * @alias Titanium.Platform.getId
	 * @return {String}
	 */
	getId: function () { return id; },
	/**
	 * Set the the unique id of the device
	 * @param {String} value New value to set.
	 * @alias Titanium.Platform.setId
	 */
	setId: function () { },
	/**
	 * the primary language of the device that the user has enabled
	 * @alias Titanium.Platform.locale
	 * @property {String}
	 */
	locale: '',
	/**
	 * Get the the primary language of the device that the user has enabled
	 * @alias Titanium.Platform.getLocale
	 * @return {String}
	 */
	getLocale: function () { return locale; },
	/**
	 * Set the the primary language of the device that the user has enabled
	 * @param {String} value New value to set.
	 * @alias Titanium.Platform.setLocale
	 */
	setLocale: function () { },
	/**
	 * this property will return a unique identifier for the device
	 * @alias Titanium.Platform.macaddress
	 * @property {String}
	 */
	macaddress: '',
	/**
	 * Get the this property will return a unique identifier for the device
	 * @alias Titanium.Platform.getMacaddress
	 * @return {String}
	 */
	getMacaddress: function () { return macaddress; },
	/**
	 * Set the this property will return a unique identifier for the device
	 * @param {String} value New value to set.
	 * @alias Titanium.Platform.setMacaddress
	 */
	setMacaddress: function () { },
	/**
	 * the model of the phone that the device reports
	 * @alias Titanium.Platform.model
	 * @property {String}
	 */
	model: '',
	/**
	 * Get the the model of the phone that the device reports
	 * @alias Titanium.Platform.getModel
	 * @return {String}
	 */
	getModel: function () { return model; },
	/**
	 * Set the the model of the phone that the device reports
	 * @param {String} value New value to set.
	 * @alias Titanium.Platform.setModel
	 */
	setModel: function () { },
	/**
	 * the name of the platform returned by the device
	 * @alias Titanium.Platform.name
	 * @property {String}
	 */
	name: '',
	/**
	 * Get the the name of the platform returned by the device
	 * @alias Titanium.Platform.getName
	 * @return {String}
	 */
	getName: function () { return name; },
	/**
	 * Set the the name of the platform returned by the device
	 * @param {String} value New value to set.
	 * @alias Titanium.Platform.setName
	 */
	setName: function () { },
	/**
	 * the network mask that the device reports (only applicable on WIFI network)
	 * @alias Titanium.Platform.netmask
	 * @property {String}
	 */
	netmask: '',
	/**
	 * Get the the network mask that the device reports (only applicable on WIFI network)
	 * @alias Titanium.Platform.getNetmask
	 * @return {String}
	 */
	getNetmask: function () { return netmask; },
	/**
	 * Set the the network mask that the device reports (only applicable on WIFI network)
	 * @param {String} value New value to set.
	 * @alias Titanium.Platform.setNetmask
	 */
	setNetmask: function () { },
	/**
	 * the shortname of the operating system. for example, on an iPhone, will return iphone, iPad will return ipad and Android will return android.
	 * @alias Titanium.Platform.osname
	 * @property {String}
	 */
	osname: '',
	/**
	 * Get the the shortname of the operating system. for example, on an iPhone, will return iphone, iPad will return ipad and Android will return android.
	 * @alias Titanium.Platform.getOsname
	 * @return {String}
	 */
	getOsname: function () { return osname; },
	/**
	 * Set the the shortname of the operating system. for example, on an iPhone, will return iphone, iPad will return ipad and Android will return android.
	 * @param {String} value New value to set.
	 * @alias Titanium.Platform.setOsname
	 */
	setOsname: function () { },
	/**
	 * the OS architecture, such as 32 bit
	 * @alias Titanium.Platform.ostype
	 * @property {String}
	 */
	ostype: '',
	/**
	 * Get the the OS architecture, such as 32 bit
	 * @alias Titanium.Platform.getOstype
	 * @return {String}
	 */
	getOstype: function () { return ostype; },
	/**
	 * Set the the OS architecture, such as 32 bit
	 * @param {String} value New value to set.
	 * @alias Titanium.Platform.setOstype
	 */
	setOstype: function () { },
	/**
	 * the number of processors the device reports
	 * @alias Titanium.Platform.processorCount
	 * @property {Integer}
	 */
	processorCount: 0,
	/**
	 * Get the the number of processors the device reports
	 * @alias Titanium.Platform.getProcessorCount
	 * @return {Integer}
	 */
	getProcessorCount: function () { return processorCount; },
	/**
	 * Set the the number of processors the device reports
	 * @param {Integer} value New value to set.
	 * @alias Titanium.Platform.setProcessorCount
	 */
	setProcessorCount: function () { },
	/**
	 * the username of the device, if set
	 * @alias Titanium.Platform.username
	 * @property {String}
	 */
	username: '',
	/**
	 * Get the the username of the device, if set
	 * @alias Titanium.Platform.getUsername
	 * @return {String}
	 */
	getUsername: function () { return username; },
	/**
	 * Set the the username of the device, if set
	 * @param {String} value New value to set.
	 * @alias Titanium.Platform.setUsername
	 */
	setUsername: function () { },
	/**
	 * the version of the platform returned by the device
	 * @alias Titanium.Platform.version
	 * @property {String}
	 */
	version: '',
	/**
	 * Get the the version of the platform returned by the device
	 * @alias Titanium.Platform.getVersion
	 * @return {String}
	 */
	getVersion: function () { return version; },
	/**
	 * Set the the version of the platform returned by the device
	 * @param {String} value New value to set.
	 * @alias Titanium.Platform.setVersion
	 */
	setVersion: function () { },
	/**
	 * add an event listener for the instance to receive view triggered events
	 * @param {String} name name of the event
	 * @param {Function} callback callback function to invoke when the event is fired
	 * @alias Titanium.Platform.addEventListener
	 */
	addEventListener: function (name,callback) { },
	/**
	 * returns whether or not a system URL can be opened. iOS only
	 * @param {String} url the url to check
	 * @alias Titanium.Platform.canOpenURL
	 */
	canOpenURL: function (url) { },
	/**
	 * create a globally unique identifier
	 * @alias Titanium.Platform.createUUID
	 * @return {BLANK}
	 */
	createUUID: function () { return new BLANK(); },
	/**
	 * fire a synthesized event to the views listener
	 * @param {String} name name of the event
	 * @param {Object} event event object
	 * @alias Titanium.Platform.fireEvent
	 */
	fireEvent: function (name,event) { },
	/**
	 * open a URL in the system default manner
	 * @param {String} url the url to open
	 * @alias Titanium.Platform.openURL
	 */
	openURL: function (url) { },
	/**
	 * remove a previously added event listener
	 * @param {String} name name of the event
	 * @param {Function} callback callback function passed in addEventListener
	 * @alias Titanium.Platform.removeEventListener
	 */
	removeEventListener: function (name,callback) { },
};

/**
 * The Display Caps object returned by the Titanium.Platform.displayCaps property.
 * @since 0.8
 */
Titanium.Platform.DisplayCaps = {
	/**
	 * returns the density property of the display device.
	 * @alias Titanium.Platform.DisplayCaps.density
	 * @property {String}
	 */
	density: '',
	/**
	 * Get the returns the density property of the display device.
	 * @alias Titanium.Platform.DisplayCaps.getDensity
	 * @return {String}
	 */
	getDensity: function () { return density; },
	/**
	 * Set the returns the density property of the display device.
	 * @param {String} value New value to set.
	 * @alias Titanium.Platform.DisplayCaps.setDensity
	 */
	setDensity: function () { },
	/**
	 * the DPI of the display device.
	 * @alias Titanium.Platform.DisplayCaps.dpi
	 * @property {Integer}
	 */
	dpi: 0,
	/**
	 * Get the the DPI of the display device.
	 * @alias Titanium.Platform.DisplayCaps.getDpi
	 * @return {Integer}
	 */
	getDpi: function () { return dpi; },
	/**
	 * Set the the DPI of the display device.
	 * @param {Integer} value New value to set.
	 * @alias Titanium.Platform.DisplayCaps.setDpi
	 */
	setDpi: function () { },
	/**
	 * the height of the device screen
	 * @alias Titanium.Platform.DisplayCaps.platformHeight
	 * @property {Float}
	 */
	platformHeight: 0.0,
	/**
	 * Get the the height of the device screen
	 * @alias Titanium.Platform.DisplayCaps.getPlatformHeight
	 * @return {Float}
	 */
	getPlatformHeight: function () { return platformHeight; },
	/**
	 * Set the the height of the device screen
	 * @param {Float} value New value to set.
	 * @alias Titanium.Platform.DisplayCaps.setPlatformHeight
	 */
	setPlatformHeight: function () { },
	/**
	 * the width of the device screen
	 * @alias Titanium.Platform.DisplayCaps.platformWidth
	 * @property {Float}
	 */
	platformWidth: 0.0,
	/**
	 * Get the the width of the device screen
	 * @alias Titanium.Platform.DisplayCaps.getPlatformWidth
	 * @return {Float}
	 */
	getPlatformWidth: function () { return platformWidth; },
	/**
	 * Set the the width of the device screen
	 * @param {Float} value New value to set.
	 * @alias Titanium.Platform.DisplayCaps.setPlatformWidth
	 */
	setPlatformWidth: function () { },
};

/**
 * The main Titanium.UI module.  The UI module is responsible for native user-interface components and interaction inside Titanium.  The goal of the UI module is to provide a native experience along with native performance by compiling Javascript code into their native counterparts as part of the build process.
 * @since 0.4
 */
Titanium.UI = {
	/**
	 * animation curve constant
	 * @alias Titanium.UI.ANIMATION_CURVE_EASE_IN
	 * @property {Integer}
	 */
	ANIMATION_CURVE_EASE_IN: 0,
	/**
	 * animation curve constant
	 * @alias Titanium.UI.ANIMATION_CURVE_EASE_IN_OUT
	 * @property {Integer}
	 */
	ANIMATION_CURVE_EASE_IN_OUT: 0,
	/**
	 * animation curve constant
	 * @alias Titanium.UI.ANIMATION_CURVE_EASE_OUT
	 * @property {Integer}
	 */
	ANIMATION_CURVE_EASE_OUT: 0,
	/**
	 * animation curve constant
	 * @alias Titanium.UI.ANIMATION_CURVE_LINEAR
	 * @property {Integer}
	 */
	ANIMATION_CURVE_LINEAR: 0,
	/**
	 * image mode constant
	 * @alias Titanium.UI.BLEND_MODE_CLEAR
	 * @property {Integer}
	 */
	BLEND_MODE_CLEAR: 0,
	/**
	 * image mode constant
	 * @alias Titanium.UI.BLEND_MODE_COLOR
	 * @property {Integer}
	 */
	BLEND_MODE_COLOR: 0,
	/**
	 * image mode constant
	 * @alias Titanium.UI.BLEND_MODE_COLOR_BURN
	 * @property {Integer}
	 */
	BLEND_MODE_COLOR_BURN: 0,
	/**
	 * image mode constant
	 * @alias Titanium.UI.BLEND_MODE_COLOR_DODGE
	 * @property {Integer}
	 */
	BLEND_MODE_COLOR_DODGE: 0,
	/**
	 * image mode constant
	 * @alias Titanium.UI.BLEND_MODE_COPY
	 * @property {Integer}
	 */
	BLEND_MODE_COPY: 0,
	/**
	 * image mode constant
	 * @alias Titanium.UI.BLEND_MODE_DARKEN
	 * @property {Integer}
	 */
	BLEND_MODE_DARKEN: 0,
	/**
	 * image mode constant
	 * @alias Titanium.UI.BLEND_MODE_DESTINATION_ATOP
	 * @property {Integer}
	 */
	BLEND_MODE_DESTINATION_ATOP: 0,
	/**
	 * image mode constant
	 * @alias Titanium.UI.BLEND_MODE_DESTINATION_IN
	 * @property {Integer}
	 */
	BLEND_MODE_DESTINATION_IN: 0,
	/**
	 * image mode constant
	 * @alias Titanium.UI.BLEND_MODE_DESTINATION_OUT
	 * @property {Integer}
	 */
	BLEND_MODE_DESTINATION_OUT: 0,
	/**
	 * image mode constant
	 * @alias Titanium.UI.BLEND_MODE_DESTINATION_OVER
	 * @property {Integer}
	 */
	BLEND_MODE_DESTINATION_OVER: 0,
	/**
	 * image mode constant
	 * @alias Titanium.UI.BLEND_MODE_DIFFERENCE
	 * @property {Integer}
	 */
	BLEND_MODE_DIFFERENCE: 0,
	/**
	 * image mode constant
	 * @alias Titanium.UI.BLEND_MODE_EXCLUSION
	 * @property {Integer}
	 */
	BLEND_MODE_EXCLUSION: 0,
	/**
	 * image mode constant
	 * @alias Titanium.UI.BLEND_MODE_HARD_LIGHT
	 * @property {Integer}
	 */
	BLEND_MODE_HARD_LIGHT: 0,
	/**
	 * image mode constant
	 * @alias Titanium.UI.BLEND_MODE_HUE
	 * @property {Integer}
	 */
	BLEND_MODE_HUE: 0,
	/**
	 * image mode constant
	 * @alias Titanium.UI.BLEND_MODE_LIGHTEN
	 * @property {Integer}
	 */
	BLEND_MODE_LIGHTEN: 0,
	/**
	 * image mode constant
	 * @alias Titanium.UI.BLEND_MODE_LUMINOSITY
	 * @property {Integer}
	 */
	BLEND_MODE_LUMINOSITY: 0,
	/**
	 * image mode constant
	 * @alias Titanium.UI.BLEND_MODE_MULTIPLY
	 * @property {Integer}
	 */
	BLEND_MODE_MULTIPLY: 0,
	/**
	 * image mode constant
	 * @alias Titanium.UI.BLEND_MODE_NORMAL
	 * @property {Integer}
	 */
	BLEND_MODE_NORMAL: 0,
	/**
	 * image mode constant
	 * @alias Titanium.UI.BLEND_MODE_OVERLAY
	 * @property {Integer}
	 */
	BLEND_MODE_OVERLAY: 0,
	/**
	 * image mode constant
	 * @alias Titanium.UI.BLEND_MODE_PLUS_DARKER
	 * @property {Integer}
	 */
	BLEND_MODE_PLUS_DARKER: 0,
	/**
	 * image mode constant
	 * @alias Titanium.UI.BLEND_MODE_PLUS_LIGHTER
	 * @property {Integer}
	 */
	BLEND_MODE_PLUS_LIGHTER: 0,
	/**
	 * image mode constant
	 * @alias Titanium.UI.BLEND_MODE_SATURATION
	 * @property {Integer}
	 */
	BLEND_MODE_SATURATION: 0,
	/**
	 * image mode constant
	 * @alias Titanium.UI.BLEND_MODE_SCREEN
	 * @property {Integer}
	 */
	BLEND_MODE_SCREEN: 0,
	/**
	 * image mode constant
	 * @alias Titanium.UI.BLEND_MODE_SOFT_LIGHT
	 * @property {Integer}
	 */
	BLEND_MODE_SOFT_LIGHT: 0,
	/**
	 * image mode constant
	 * @alias Titanium.UI.BLEND_MODE_SOURCE_ATOP
	 * @property {Integer}
	 */
	BLEND_MODE_SOURCE_ATOP: 0,
	/**
	 * image mode constant
	 * @alias Titanium.UI.BLEND_MODE_SOURCE_IN
	 * @property {Integer}
	 */
	BLEND_MODE_SOURCE_IN: 0,
	/**
	 * image mode constant
	 * @alias Titanium.UI.BLEND_MODE_SOURCE_OUT
	 * @property {Integer}
	 */
	BLEND_MODE_SOURCE_OUT: 0,
	/**
	 * image mode constant
	 * @alias Titanium.UI.BLEND_MODE_XOR
	 * @property {Integer}
	 */
	BLEND_MODE_XOR: 0,
	/**
	 * orientation constant
	 * @alias Titanium.UI.FACE_DOWN
	 * @property {Integer}
	 */
	FACE_DOWN: 0,
	/**
	 * orientation constant
	 * @alias Titanium.UI.FACE_UP
	 * @property {Integer}
	 */
	FACE_UP: 0,
	/**
	 * input border style constant
	 * @alias Titanium.UI.INPUT_BORDERSTYLE_BEZEL
	 * @property {Integer}
	 */
	INPUT_BORDERSTYLE_BEZEL: 0,
	/**
	 * input border style constant
	 * @alias Titanium.UI.INPUT_BORDERSTYLE_LINE
	 * @property {Integer}
	 */
	INPUT_BORDERSTYLE_LINE: 0,
	/**
	 * input border style constant
	 * @alias Titanium.UI.INPUT_BORDERSTYLE_NONE
	 * @property {Integer}
	 */
	INPUT_BORDERSTYLE_NONE: 0,
	/**
	 * input border style constant
	 * @alias Titanium.UI.INPUT_BORDERSTYLE_ROUNDED
	 * @property {Integer}
	 */
	INPUT_BORDERSTYLE_ROUNDED: 0,
	/**
	 * input button mode constant
	 * @alias Titanium.UI.INPUT_BUTTONMODE_ALWAYS
	 * @property {Integer}
	 */
	INPUT_BUTTONMODE_ALWAYS: 0,
	/**
	 * input button mode constant
	 * @alias Titanium.UI.INPUT_BUTTONMODE_NEVER
	 * @property {Integer}
	 */
	INPUT_BUTTONMODE_NEVER: 0,
	/**
	 * input button mode constant
	 * @alias Titanium.UI.INPUT_BUTTONMODE_ONBLUR
	 * @property {Integer}
	 */
	INPUT_BUTTONMODE_ONBLUR: 0,
	/**
	 * input button mode constant
	 * @alias Titanium.UI.INPUT_BUTTONMODE_ONFOCUS
	 * @property {Integer}
	 */
	INPUT_BUTTONMODE_ONFOCUS: 0,
	/**
	 * textfield keyboard appearance constant
	 * @alias Titanium.UI.KEYBOARD_APPEARANCE_ALERT
	 * @property {Integer}
	 */
	KEYBOARD_APPEARANCE_ALERT: 0,
	/**
	 * textfield keyboard appearance constant
	 * @alias Titanium.UI.KEYBOARD_APPEARANCE_DEFAULT
	 * @property {Integer}
	 */
	KEYBOARD_APPEARANCE_DEFAULT: 0,
	/**
	 * textfield keyboard constant
	 * @alias Titanium.UI.KEYBOARD_ASCII
	 * @property {Integer}
	 */
	KEYBOARD_ASCII: 0,
	/**
	 * textfield keyboard constant
	 * @alias Titanium.UI.KEYBOARD_DEFAULT
	 * @property {Integer}
	 */
	KEYBOARD_DEFAULT: 0,
	/**
	 * textfield keyboard constant
	 * @alias Titanium.UI.KEYBOARD_EMAIL
	 * @property {Integer}
	 */
	KEYBOARD_EMAIL: 0,
	/**
	 * textfield keyboard constant
	 * @alias Titanium.UI.KEYBOARD_NAMEPHONE_PAD
	 * @property {Integer}
	 */
	KEYBOARD_NAMEPHONE_PAD: 0,
	/**
	 * textfield keyboard constant
	 * @alias Titanium.UI.KEYBOARD_NUMBERS_PUNCTUATION
	 * @property {Integer}
	 */
	KEYBOARD_NUMBERS_PUNCTUATION: 0,
	/**
	 * textfield keyboard constant
	 * @alias Titanium.UI.KEYBOARD_NUMBER_PAD
	 * @property {Integer}
	 */
	KEYBOARD_NUMBER_PAD: 0,
	/**
	 * textfield keyboard constant
	 * @alias Titanium.UI.KEYBOARD_PHONE_PAD
	 * @property {Integer}
	 */
	KEYBOARD_PHONE_PAD: 0,
	/**
	 * textfield keyboard constant
	 * @alias Titanium.UI.KEYBOARD_URL
	 * @property {Integer}
	 */
	KEYBOARD_URL: 0,
	/**
	 * orientation (home button on left) constant
	 * @alias Titanium.UI.LANDSCAPE_LEFT
	 * @property {Integer}
	 */
	LANDSCAPE_LEFT: 0,
	/**
	 * orientation (home button on right) constant
	 * @alias Titanium.UI.LANDSCAPE_RIGHT
	 * @property {Integer}
	 */
	LANDSCAPE_RIGHT: 0,
	/**
	 * Duration of the notification
	 * @alias Titanium.UI.NOTIFICATION_DURATION_LONG
	 * @property {Integer}
	 */
	NOTIFICATION_DURATION_LONG: 0,
	/**
	 * Duration of the notification
	 * @alias Titanium.UI.NOTIFICATION_DURATION_SHORT
	 * @property {Integer}
	 */
	NOTIFICATION_DURATION_SHORT: 0,
	/**
	 * picker type constant
	 * @alias Titanium.UI.PICKER_TYPE_COUNT_DOWN_TIMER
	 * @property {Integer}
	 */
	PICKER_TYPE_COUNT_DOWN_TIMER: 0,
	/**
	 * picker type constant
	 * @alias Titanium.UI.PICKER_TYPE_DATE
	 * @property {Integer}
	 */
	PICKER_TYPE_DATE: 0,
	/**
	 * picker type constant
	 * @alias Titanium.UI.PICKER_TYPE_DATE_AND_TIME
	 * @property {Integer}
	 */
	PICKER_TYPE_DATE_AND_TIME: 0,
	/**
	 * picker type constant
	 * @alias Titanium.UI.PICKER_TYPE_PLAIN
	 * @property {Integer}
	 */
	PICKER_TYPE_PLAIN: 0,
	/**
	 * picker type constant
	 * @alias Titanium.UI.PICKER_TYPE_TIME
	 * @property {Integer}
	 */
	PICKER_TYPE_TIME: 0,
	/**
	 * orientation (home button on bottom) constant
	 * @alias Titanium.UI.PORTRAIT
	 * @property {Integer}
	 */
	PORTRAIT: 0,
	/**
	 * textfield return key constant
	 * @alias Titanium.UI.RETURNKEY_DEFAULT
	 * @property {Integer}
	 */
	RETURNKEY_DEFAULT: 0,
	/**
	 * textfield return key constant
	 * @alias Titanium.UI.RETURNKEY_DONE
	 * @property {Integer}
	 */
	RETURNKEY_DONE: 0,
	/**
	 * textfield return key constant
	 * @alias Titanium.UI.RETURNKEY_EMERGENCY_CALL
	 * @property {Integer}
	 */
	RETURNKEY_EMERGENCY_CALL: 0,
	/**
	 * textfield return key constant
	 * @alias Titanium.UI.RETURNKEY_GO
	 * @property {Integer}
	 */
	RETURNKEY_GO: 0,
	/**
	 * textfield return key constant
	 * @alias Titanium.UI.RETURNKEY_GOOGLE
	 * @property {Integer}
	 */
	RETURNKEY_GOOGLE: 0,
	/**
	 * textfield return key constant
	 * @alias Titanium.UI.RETURNKEY_JOIN
	 * @property {Integer}
	 */
	RETURNKEY_JOIN: 0,
	/**
	 * textfield return key constant
	 * @alias Titanium.UI.RETURNKEY_NEXT
	 * @property {Integer}
	 */
	RETURNKEY_NEXT: 0,
	/**
	 * textfield return key constant
	 * @alias Titanium.UI.RETURNKEY_ROUTE
	 * @property {Integer}
	 */
	RETURNKEY_ROUTE: 0,
	/**
	 * textfield return key constant
	 * @alias Titanium.UI.RETURNKEY_SEARCH
	 * @property {Integer}
	 */
	RETURNKEY_SEARCH: 0,
	/**
	 * textfield return key constant
	 * @alias Titanium.UI.RETURNKEY_SEND
	 * @property {Integer}
	 */
	RETURNKEY_SEND: 0,
	/**
	 * textfield return key constant
	 * @alias Titanium.UI.RETURNKEY_YAHOO
	 * @property {Integer}
	 */
	RETURNKEY_YAHOO: 0,
	/**
	 * text align constant
	 * @alias Titanium.UI.TEXT_ALIGNMENT_CENTER
	 * @property {Integer}
	 */
	TEXT_ALIGNMENT_CENTER: 0,
	/**
	 * text align constant
	 * @alias Titanium.UI.TEXT_ALIGNMENT_LEFT
	 * @property {Integer}
	 */
	TEXT_ALIGNMENT_LEFT: 0,
	/**
	 * text align constant
	 * @alias Titanium.UI.TEXT_ALIGNMENT_RIGHT
	 * @property {Integer}
	 */
	TEXT_ALIGNMENT_RIGHT: 0,
	/**
	 * text capitalization constant
	 * @alias Titanium.UI.TEXT_AUTOCAPITALIZATION_ALL
	 * @property {Integer}
	 */
	TEXT_AUTOCAPITALIZATION_ALL: 0,
	/**
	 * text capitalization constant
	 * @alias Titanium.UI.TEXT_AUTOCAPITALIZATION_NONE
	 * @property {Integer}
	 */
	TEXT_AUTOCAPITALIZATION_NONE: 0,
	/**
	 * text capitalization constant
	 * @alias Titanium.UI.TEXT_AUTOCAPITALIZATION_SENTENCES
	 * @property {Integer}
	 */
	TEXT_AUTOCAPITALIZATION_SENTENCES: 0,
	/**
	 * text capitalization constant
	 * @alias Titanium.UI.TEXT_AUTOCAPITALIZATION_WORDS
	 * @property {Integer}
	 */
	TEXT_AUTOCAPITALIZATION_WORDS: 0,
	/**
	 * text vertical align constant
	 * @alias Titanium.UI.TEXT_VERTICAL_ALIGNMENT_BOTTOM
	 * @property {Integer}
	 */
	TEXT_VERTICAL_ALIGNMENT_BOTTOM: 0,
	/**
	 * text vertical align constant
	 * @alias Titanium.UI.TEXT_VERTICAL_ALIGNMENT_CENTER
	 * @property {Integer}
	 */
	TEXT_VERTICAL_ALIGNMENT_CENTER: 0,
	/**
	 * text vertical align constant
	 * @alias Titanium.UI.TEXT_VERTICAL_ALIGNMENT_TOP
	 * @property {Integer}
	 */
	TEXT_VERTICAL_ALIGNMENT_TOP: 0,
	/**
	 * orientation constant
	 * @alias Titanium.UI.UNKNOWN
	 * @property {Integer}
	 */
	UNKNOWN: 0,
	/**
	 * orientation (home button on top) constant
	 * @alias Titanium.UI.UPSIDE_PORTRAIT
	 * @property {Integer}
	 */
	UPSIDE_PORTRAIT: 0,
	/**
	 * add an event listener for the instance to receive view triggered events
	 * @param {String} name name of the event
	 * @param {Function} callback callback function to invoke when the event is fired
	 * @alias Titanium.UI.addEventListener
	 */
	addEventListener: function (name,callback) { },
	/**
	 * create and return an instance of Titanium.UI.2DMatrix
	 * @param {Object} [parameters] (optional) a dictionary object properties defined in <a href="Titanium.UI.2DMatrix.html">Titanium.UI.2DMatrix</a>
	 * @alias Titanium.UI.create2DMatrix
	 * @return {Titanium_UI_2DMatrix}
	 */
	create2DMatrix: function (parameters) { return new Titanium_UI_2DMatrix(); },
	/**
	 * create and return an instance of Titanium.UI.3DMatrix
	 * @param {Object} [parameters] (optional) a dictionary object properties defined in <a href="Titanium.UI.3DMatrix.html">Titanium.UI.3DMatrix</a>
	 * @alias Titanium.UI.create3DMatrix
	 * @return {Titanium_UI_3DMatrix}
	 */
	create3DMatrix: function (parameters) { return new Titanium_UI_3DMatrix(); },
	/**
	 * create and return an instance of Titanium.UI.ActivityIndicator
	 * @param {Object} [parameters] (optional) a dictionary object properties defined in <a href="Titanium.UI.ActivityIndicator.html">Titanium.UI.ActivityIndicator</a>
	 * @alias Titanium.UI.createActivityIndicator
	 * @return {Titanium_UI_ActivityIndicator}
	 */
	createActivityIndicator: function (parameters) { return new Titanium_UI_ActivityIndicator(); },
	/**
	 * create and return an instance of Titanium.UI.AlertDialog
	 * @param {Object} [parameters] (optional) a dictionary object properties defined in <a href="Titanium.UI.AlertDialog.html">Titanium.UI.AlertDialog</a>
	 * @alias Titanium.UI.createAlertDialog
	 * @return {Titanium_UI_AlertDialog}
	 */
	createAlertDialog: function (parameters) { return new Titanium_UI_AlertDialog(); },
	/**
	 * create and return an instance of Titanium.UI.Animation
	 * @param {Object} [parameters] (optional) a dictionary object properties defined in <a href="Titanium.UI.Animation.html">Titanium.UI.Animation</a>
	 * @alias Titanium.UI.createAnimation
	 * @return {Titanium_UI_Animation}
	 */
	createAnimation: function (parameters) { return new Titanium_UI_Animation(); },
	/**
	 * create and return an instance of Titanium.UI.Button
	 * @param {Object} [parameters] (optional) a dictionary object properties defined in <a href="Titanium.UI.Button.html">Titanium.UI.Button</a>
	 * @alias Titanium.UI.createButton
	 * @return {Titanium_UI_Button}
	 */
	createButton: function (parameters) { return new Titanium_UI_Button(); },
	/**
	 * create and return an instance of Titanium.UI.ButtonBar
	 * @param {Object} [parameters] (optional) a dictionary object properties defined in <a href="Titanium.UI.ButtonBar.html">Titanium.UI.ButtonBar</a>
	 * @alias Titanium.UI.createButtonBar
	 * @return {Titanium_UI_ButtonBar}
	 */
	createButtonBar: function (parameters) { return new Titanium_UI_ButtonBar(); },
	/**
	 * create and return an instance of Titanium.UI.CoverFlowView
	 * @param {Object} [parameters] (optional) a dictionary object properties defined in <a href="Titanium.UI.CoverFlowView.html">Titanium.UI.CoverFlowView</a>
	 * @alias Titanium.UI.createCoverFlowView
	 * @return {Titanium_UI_CoverFlowView}
	 */
	createCoverFlowView: function (parameters) { return new Titanium_UI_CoverFlowView(); },
	/**
	 * create and return an instance of Titanium.UI.DashboardItem
	 * @param {Object} [parameters] (optional) a dictionary object properties defined in <a href="Titanium.UI.DashboardItem.html">Titanium.UI.DashboardItem</a>
	 * @alias Titanium.UI.createDashboardItem
	 * @return {Titanium_UI_DashboardItem}
	 */
	createDashboardItem: function (parameters) { return new Titanium_UI_DashboardItem(); },
	/**
	 * create and return an instance of Titanium.UI.DashboardView
	 * @param {Object} [parameters] (optional) a dictionary object properties defined in <a href="Titanium.UI.DashboardView.html">Titanium.UI.DashboardView</a>
	 * @alias Titanium.UI.createDashboardView
	 * @return {Titanium_UI_DashboardView}
	 */
	createDashboardView: function (parameters) { return new Titanium_UI_DashboardView(); },
	/**
	 * create and return an instance of Titanium.UI.EmailDialog
	 * @param {Object} [parameters] (optional) a dictionary object properties defined in <a href="Titanium.UI.EmailDialog.html">Titanium.UI.EmailDialog</a>
	 * @alias Titanium.UI.createEmailDialog
	 * @return {Titanium_UI_EmailDialog}
	 */
	createEmailDialog: function (parameters) { return new Titanium_UI_EmailDialog(); },
	/**
	 * create and return an instance of Titanium.UI.ImageView
	 * @param {Object} [parameters] (optional) a dictionary object properties defined in <a href="Titanium.UI.ImageView.html">Titanium.UI.ImageView</a>
	 * @alias Titanium.UI.createImageView
	 * @return {Titanium_UI_ImageView}
	 */
	createImageView: function (parameters) { return new Titanium_UI_ImageView(); },
	/**
	 * create and return an instance of Titanium.UI.Label
	 * @param {Object} [parameters] (optional) a dictionary object properties defined in <a href="Titanium.UI.Label.html">Titanium.UI.Label</a>
	 * @alias Titanium.UI.createLabel
	 * @return {Titanium_UI_Label}
	 */
	createLabel: function (parameters) { return new Titanium_UI_Label(); },
	/**
	 * create and return an instance of Titanium.UI.OptionDialog
	 * @param {Object} [parameters] (optional) a dictionary object properties defined in <a href="Titanium.UI.OptionDialog.html">Titanium.UI.OptionDialog</a>
	 * @alias Titanium.UI.createOptionDialog
	 * @return {Titanium_UI_OptionDialog}
	 */
	createOptionDialog: function (parameters) { return new Titanium_UI_OptionDialog(); },
	/**
	 * create and return an instance of Titanium.UI.Picker
	 * @param {Object} [parameters] (optional) a dictionary object properties defined in <a href="Titanium.UI.Picker.html">Titanium.UI.Picker</a>
	 * @alias Titanium.UI.createPicker
	 * @return {Titanium_UI_Picker}
	 */
	createPicker: function (parameters) { return new Titanium_UI_Picker(); },
	/**
	 * create and return an instance of Titanium.UI.PickerColumn
	 * @param {Object} [parameters] (optional) a dictionary object properties defined in <a href="Titanium.UI.PickerColumn.html">Titanium.UI.PickerColumn</a>
	 * @alias Titanium.UI.createPickerColumn
	 * @return {Titanium_UI_PickerColumn}
	 */
	createPickerColumn: function (parameters) { return new Titanium_UI_PickerColumn(); },
	/**
	 * create and return an instance of Titanium.UI.PickerRow
	 * @param {Object} [parameters] (optional) a dictionary object properties defined in <a href="Titanium.UI.PickerRow.html">Titanium.UI.PickerRow</a>
	 * @alias Titanium.UI.createPickerRow
	 * @return {Titanium_UI_PickerRow}
	 */
	createPickerRow: function (parameters) { return new Titanium_UI_PickerRow(); },
	/**
	 * create and return an instance of Titanium.UI.ProgressBar
	 * @param {Object} [parameters] (optional) a dictionary object properties defined in <a href="Titanium.UI.ProgressBar.html">Titanium.UI.ProgressBar</a>
	 * @alias Titanium.UI.createProgressBar
	 * @return {Titanium_UI_ProgressBar}
	 */
	createProgressBar: function (parameters) { return new Titanium_UI_ProgressBar(); },
	/**
	 * create and return an instance of Titanium.UI.ScrollView
	 * @param {Object} [parameters] (optional) a dictionary object properties defined in <a href="Titanium.UI.ScrollView.html">Titanium.UI.ScrollView</a>
	 * @alias Titanium.UI.createScrollView
	 * @return {Titanium_UI_ScrollView}
	 */
	createScrollView: function (parameters) { return new Titanium_UI_ScrollView(); },
	/**
	 * create and return an instance of Titanium.UI.ScrollableView
	 * @param {Object} [parameters] (optional) a dictionary object properties defined in <a href="Titanium.UI.ScrollableView.html">Titanium.UI.ScrollableView</a>
	 * @alias Titanium.UI.createScrollableView
	 * @return {Titanium_UI_ScrollableView}
	 */
	createScrollableView: function (parameters) { return new Titanium_UI_ScrollableView(); },
	/**
	 * create and return an instance of Titanium.UI.SearchBar
	 * @param {Object} [parameters] (optional) a dictionary object properties defined in <a href="Titanium.UI.SearchBar.html">Titanium.UI.SearchBar</a>
	 * @alias Titanium.UI.createSearchBar
	 * @return {Titanium_UI_SearchBar}
	 */
	createSearchBar: function (parameters) { return new Titanium_UI_SearchBar(); },
	/**
	 * create and return an instance of Titanium.UI.Slider
	 * @param {Object} [parameters] (optional) a dictionary object properties defined in <a href="Titanium.UI.Slider.html">Titanium.UI.Slider</a>
	 * @alias Titanium.UI.createSlider
	 * @return {Titanium_UI_Slider}
	 */
	createSlider: function (parameters) { return new Titanium_UI_Slider(); },
	/**
	 * create and return an instance of Titanium.UI.Switch
	 * @param {Object} [parameters] (optional) a dictionary object properties defined in <a href="Titanium.UI.Switch.html">Titanium.UI.Switch</a>
	 * @alias Titanium.UI.createSwitch
	 * @return {Titanium_UI_Switch}
	 */
	createSwitch: function (parameters) { return new Titanium_UI_Switch(); },
	/**
	 * create and return an instance of Titanium.UI.Tab
	 * @param {Object} [parameters] (optional) a dictionary object properties defined in <a href="Titanium.UI.Tab.html">Titanium.UI.Tab</a>
	 * @alias Titanium.UI.createTab
	 * @return {Titanium_UI_Tab}
	 */
	createTab: function (parameters) { return new Titanium_UI_Tab(); },
	/**
	 * create and return an instance of Titanium.UI.TabGroup
	 * @param {Object} [parameters] (optional) a dictionary object properties defined in <a href="Titanium.UI.TabGroup.html">Titanium.UI.TabGroup</a>
	 * @alias Titanium.UI.createTabGroup
	 * @return {Titanium_UI_TabGroup}
	 */
	createTabGroup: function (parameters) { return new Titanium_UI_TabGroup(); },
	/**
	 * create and return an instance of Titanium.UI.TabbedBar
	 * @param {Object} [parameters] (optional) a dictionary object properties defined in <a href="Titanium.UI.TabbedBar.html">Titanium.UI.TabbedBar</a>
	 * @alias Titanium.UI.createTabbedBar
	 * @return {Titanium_UI_TabbedBar}
	 */
	createTabbedBar: function (parameters) { return new Titanium_UI_TabbedBar(); },
	/**
	 * create and return an instance of Titanium.UI.TableView
	 * @param {Object} [parameters] (optional) a dictionary object properties defined in <a href="Titanium.UI.TableView.html">Titanium.UI.TableView</a>
	 * @alias Titanium.UI.createTableView
	 * @return {Titanium_UI_TableView}
	 */
	createTableView: function (parameters) { return new Titanium_UI_TableView(); },
	/**
	 * create and return an instance of Titanium.UI.TableViewRow
	 * @param {Object} [parameters] (optional) a dictionary object properties defined in <a href="Titanium.UI.TableViewRow.html">Titanium.UI.TableViewRow</a>
	 * @alias Titanium.UI.createTableViewRow
	 * @return {Titanium_UI_TableViewRow}
	 */
	createTableViewRow: function (parameters) { return new Titanium_UI_TableViewRow(); },
	/**
	 * create and return an instance of Titanium.UI.TableViewSection
	 * @param {Object} [parameters] (optional) a dictionary object properties defined in <a href="Titanium.UI.TableViewSection.html">Titanium.UI.TableViewSection</a>
	 * @alias Titanium.UI.createTableViewSection
	 * @return {Titanium_UI_TableViewSection}
	 */
	createTableViewSection: function (parameters) { return new Titanium_UI_TableViewSection(); },
	/**
	 * create and return an instance of Titanium.UI.TextArea
	 * @param {Object} [parameters] (optional) a dictionary object properties defined in <a href="Titanium.UI.TextArea.html">Titanium.UI.TextArea</a>
	 * @alias Titanium.UI.createTextArea
	 * @return {Titanium_UI_TextArea}
	 */
	createTextArea: function (parameters) { return new Titanium_UI_TextArea(); },
	/**
	 * create and return an instance of Titanium.UI.TextField
	 * @param {Object} [parameters] (optional) a dictionary object properties defined in <a href="Titanium.UI.TextField.html">Titanium.UI.TextField</a>
	 * @alias Titanium.UI.createTextField
	 * @return {Titanium_UI_TextField}
	 */
	createTextField: function (parameters) { return new Titanium_UI_TextField(); },
	/**
	 * create and return an instance of Titanium.UI.Toolbar
	 * @param {Object} [parameters] (optional) a dictionary object properties defined in <a href="Titanium.UI.Toolbar.html">Titanium.UI.Toolbar</a>
	 * @alias Titanium.UI.createToolbar
	 * @return {Titanium_UI_Toolbar}
	 */
	createToolbar: function (parameters) { return new Titanium_UI_Toolbar(); },
	/**
	 * create and return an instance of Titanium.UI.View
	 * @param {Object} [parameters] (optional) a dictionary object properties defined in <a href="Titanium.UI.View.html">Titanium.UI.View</a>
	 * @alias Titanium.UI.createView
	 * @return {Titanium_UI_View}
	 */
	createView: function (parameters) { return new Titanium_UI_View(); },
	/**
	 * create and return an instance of Titanium.UI.WebView
	 * @param {Object} [parameters] (optional) a dictionary object properties defined in <a href="Titanium.UI.WebView.html">Titanium.UI.WebView</a>
	 * @alias Titanium.UI.createWebView
	 * @return {Titanium_UI_WebView}
	 */
	createWebView: function (parameters) { return new Titanium_UI_WebView(); },
	/**
	 * create and return an instance of Titanium.UI.Window
	 * @param {Object} [parameters] (optional) a dictionary object properties defined in <a href="Titanium.UI.Window.html">Titanium.UI.Window</a>
	 * @alias Titanium.UI.createWindow
	 * @return {Titanium_UI_Window}
	 */
	createWindow: function (parameters) { return new Titanium_UI_Window(); },
	/**
	 * fire a synthesized event to the views listener
	 * @param {String} name name of the event
	 * @param {Object} event event object
	 * @alias Titanium.UI.fireEvent
	 */
	fireEvent: function (name,event) { },
	/**
	 * remove a previously added event listener
	 * @param {String} name name of the event
	 * @param {Function} callback callback function passed in addEventListener
	 * @alias Titanium.UI.removeEventListener
	 */
	removeEventListener: function (name,callback) { },
};

/**
 * An Activity Indicator is created by the method Titanium.UI.createActivityIndicator.  An activity indicator can be used to show the progress of an operation in the UI to let the user know some action is taking place.
 * @since 0.8
 */
Titanium.UI.ActivityIndicator = {
	/**
	 * the color of the message label
	 * @alias Titanium.UI.ActivityIndicator.color
	 * @property {String}
	 */
	color: '',
	/**
	 * Get the the color of the message label
	 * @alias Titanium.UI.ActivityIndicator.getColor
	 * @return {String}
	 */
	getColor: function () { return color; },
	/**
	 * Set the the color of the message label
	 * @param {String} value New value to set.
	 * @alias Titanium.UI.ActivityIndicator.setColor
	 */
	setColor: function () { },
	/**
	 * the font object for the activity message label
	 * @alias Titanium.UI.ActivityIndicator.font
	 * @property {Object}
	 */
	font: {},
	/**
	 * Get the the font object for the activity message label
	 * @alias Titanium.UI.ActivityIndicator.getFont
	 * @return {Object}
	 */
	getFont: function () { return font; },
	/**
	 * Set the the font object for the activity message label
	 * @param {Object} value New value to set.
	 * @alias Titanium.UI.ActivityIndicator.setFont
	 */
	setFont: function () { },
	/**
	 * the activity message label text
	 * @alias Titanium.UI.ActivityIndicator.message
	 * @property {String}
	 */
	message: '',
	/**
	 * Get the the activity message label text
	 * @alias Titanium.UI.ActivityIndicator.getMessage
	 * @return {String}
	 */
	getMessage: function () { return message; },
	/**
	 * Set the the activity message label text
	 * @param {String} value New value to set.
	 * @alias Titanium.UI.ActivityIndicator.setMessage
	 */
	setMessage: function () { },
	/**
	 * the key in the locale file to use for the message property
	 * @alias Titanium.UI.ActivityIndicator.messageid
	 * @property {String}
	 */
	messageid: '',
	/**
	 * Get the the key in the locale file to use for the message property
	 * @alias Titanium.UI.ActivityIndicator.getMessageid
	 * @return {String}
	 */
	getMessageid: function () { return messageid; },
	/**
	 * Set the the key in the locale file to use for the message property
	 * @param {String} value New value to set.
	 * @alias Titanium.UI.ActivityIndicator.setMessageid
	 */
	setMessageid: function () { },
	/**
	 * the style constant of the activity indicator
	 * @alias Titanium.UI.ActivityIndicator.style
	 * @property {Integer}
	 */
	style: 0,
	/**
	 * Get the the style constant of the activity indicator
	 * @alias Titanium.UI.ActivityIndicator.getStyle
	 * @return {Integer}
	 */
	getStyle: function () { return style; },
	/**
	 * Set the the style constant of the activity indicator
	 * @param {Integer} value New value to set.
	 * @alias Titanium.UI.ActivityIndicator.setStyle
	 */
	setStyle: function () { },
	/**
	 * call hide to make the activity indicator hidden and stop spinning
	 * @alias Titanium.UI.ActivityIndicator.hide
	 */
	hide: function () { },
	/**
	 * call show to make the activity indicator visible and start spinning
	 * @alias Titanium.UI.ActivityIndicator.show
	 */
	show: function () { },
};

/**
 * The Alert Dialog is created by Titanium.UI.createAlertDialog and allows you to show a modal application dialog.
 * @since 0.8
 */
Titanium.UI.AlertDialog = {
	/**
	 * array of button names as strings
	 * @alias Titanium.UI.AlertDialog.buttonNames
	 * @property {Array}
	 */
	buttonNames: [],
	/**
	 * Get the array of button names as strings
	 * @alias Titanium.UI.AlertDialog.getButtonNames
	 * @return {Array}
	 */
	getButtonNames: function () { return buttonNames; },
	/**
	 * Set the array of button names as strings
	 * @param {Array} value New value to set.
	 * @alias Titanium.UI.AlertDialog.setButtonNames
	 */
	setButtonNames: function () { },
	/**
	 * an index to indicate which button should be the cancel button
	 * @alias Titanium.UI.AlertDialog.cancel
	 * @property {Integer}
	 */
	cancel: 0,
	/**
	 * Get the an index to indicate which button should be the cancel button
	 * @alias Titanium.UI.AlertDialog.getCancel
	 * @return {Integer}
	 */
	getCancel: function () { return cancel; },
	/**
	 * Set the an index to indicate which button should be the cancel button
	 * @param {Integer} value New value to set.
	 * @alias Titanium.UI.AlertDialog.setCancel
	 */
	setCancel: function () { },
	/**
	 * the message of the dialog
	 * @alias Titanium.UI.AlertDialog.message
	 * @property {String}
	 */
	message: '',
	/**
	 * Get the the message of the dialog
	 * @alias Titanium.UI.AlertDialog.getMessage
	 * @return {String}
	 */
	getMessage: function () { return message; },
	/**
	 * Set the the message of the dialog
	 * @param {String} value New value to set.
	 * @alias Titanium.UI.AlertDialog.setMessage
	 */
	setMessage: function () { },
	/**
	 * the key in the locale file to use for the message property
	 * @alias Titanium.UI.AlertDialog.messageid
	 * @property {String}
	 */
	messageid: '',
	/**
	 * Get the the key in the locale file to use for the message property
	 * @alias Titanium.UI.AlertDialog.getMessageid
	 * @return {String}
	 */
	getMessageid: function () { return messageid; },
	/**
	 * Set the the key in the locale file to use for the message property
	 * @param {String} value New value to set.
	 * @alias Titanium.UI.AlertDialog.setMessageid
	 */
	setMessageid: function () { },
	/**
	 * the title of the dialog
	 * @alias Titanium.UI.AlertDialog.title
	 * @property {String}
	 */
	title: '',
	/**
	 * Get the the title of the dialog
	 * @alias Titanium.UI.AlertDialog.getTitle
	 * @return {String}
	 */
	getTitle: function () { return title; },
	/**
	 * Set the the title of the dialog
	 * @param {String} value New value to set.
	 * @alias Titanium.UI.AlertDialog.setTitle
	 */
	setTitle: function () { },
	/**
	 * add an event listener for the instance to receive view triggered events
	 * @param {String} name name of the event
	 * @param {Function} callback callback function to invoke when the event is fired
	 * @alias Titanium.UI.AlertDialog.addEventListener
	 */
	addEventListener: function (name,callback) { },
	/**
	 * fire a synthesized event to the views listener
	 * @param {String} name name of the event
	 * @param {Object} event event object
	 * @alias Titanium.UI.AlertDialog.fireEvent
	 */
	fireEvent: function (name,event) { },
	/**
	 * cause the dialog to become hidden
	 * @alias Titanium.UI.AlertDialog.hide
	 */
	hide: function () { },
	/**
	 * remove a previously added event listener
	 * @param {String} name name of the event
	 * @param {Function} callback callback function passed in addEventListener
	 * @alias Titanium.UI.AlertDialog.removeEventListener
	 */
	removeEventListener: function (name,callback) { },
	/**
	 * cause the dialog to become visible
	 * @alias Titanium.UI.AlertDialog.show
	 */
	show: function () { },
};

/**
 * The Android specific UI capabilities. All properties, methods and events in this namespace will only work on Android related devices.
 * @since 1.0
 */
Titanium.UI.Android = {
	/**
	 * Auto link all supported types.
	 * @alias Titanium.UI.Android.LINKIFY_ALL
	 * @property {Integer}
	 */
	LINKIFY_ALL: 0,
	/**
	 * Auto link email addresses.
	 * @alias Titanium.UI.Android.LINKIFY_EMAIL_ADDRESSES
	 * @property {Integer}
	 */
	LINKIFY_EMAIL_ADDRESSES: 0,
	/**
	 * Auto link physical addresses.
	 * @alias Titanium.UI.Android.LINKIFY_MAP_ADDRESSES
	 * @property {Integer}
	 */
	LINKIFY_MAP_ADDRESSES: 0,
	/**
	 * Convert all street addresses to clickable links
	 * @alias Titanium.UI.Android.LINKIFY_MAP_LINKS
	 * @property {Integer}
	 */
	LINKIFY_MAP_LINKS: 0,
	/**
	 * Auto link phone numbers.
	 * @alias Titanium.UI.Android.LINKIFY_PHONE_NUMBERS
	 * @property {Integer}
	 */
	LINKIFY_PHONE_NUMBERS: 0,
	/**
	 * Auto link web urls.
	 * @alias Titanium.UI.Android.LINKIFY_WEB_URLS
	 * @property {Integer}
	 */
	LINKIFY_WEB_URLS: 0,
	/**
	 * Pan contents when soft keyboard is visible. Use on Activity ("heavy weight window") to suggest how the virtual keyboard should treat the window contents. Must be specified in creation options.
	 * @alias Titanium.UI.Android.SOFT_INPUT_ADJUST_PAN
	 * @property {Integer}
	 */
	SOFT_INPUT_ADJUST_PAN: 0,
	/**
	 * Resize contents when soft keyboard is visible. Use on Activity ("heavy weight window") to suggest how the virtual keyboard should treat the window contents. Must be specified in creation options.
	 * @alias Titanium.UI.Android.SOFT_INPUT_ADJUST_RESIZE
	 * @property {Integer}
	 */
	SOFT_INPUT_ADJUST_RESIZE: 0,
	/**
	 * (default) If set in the AndroidManifest.xml use that setting. Otherwise, let the keyboard decided. Must be specified in creation options.
	 * @alias Titanium.UI.Android.SOFT_INPUT_ADJUST_UNSPECIFIED
	 * @property {Integer}
	 */
	SOFT_INPUT_ADJUST_UNSPECIFIED: 0,
	/**
	 * Attempt to hide the soft keyboard when control receives keyboard focus.
	 * @alias Titanium.UI.Android.SOFT_INPUT_STATE_HIDDEN
	 * @property {Integer}
	 */
	SOFT_INPUT_STATE_HIDDEN: 0,
	/**
	 * Use OS default behavior for keyboard focus.
	 * @alias Titanium.UI.Android.SOFT_INPUT_STATE_UNSPECIFIED
	 * @property {Integer}
	 */
	SOFT_INPUT_STATE_UNSPECIFIED: 0,
	/**
	 * Attempt to show the soft keyboard when control receives keyboard focus.
	 * @alias Titanium.UI.Android.SOFT_INPUT_STATE_VISIBLE
	 * @property {Integer}
	 */
	SOFT_INPUT_STATE_VISIBLE: 0,
	/**
	 * Use Android default soft keyboard handling. Same as not specifying a value.
	 * @alias Titanium.UI.Android.SOFT_KEYBOARD_DEFAULT_ON_FOCUS
	 * @property {Integer}
	 */
	SOFT_KEYBOARD_DEFAULT_ON_FOCUS: 0,
	/**
	 * Request hide soft keyboard on focus. Note: OS can override request.
	 * @alias Titanium.UI.Android.SOFT_KEYBOARD_HIDE_ON_FOCUS
	 * @property {Integer}
	 */
	SOFT_KEYBOARD_HIDE_ON_FOCUS: 0,
	/**
	 * Request show soft keyboard on focus. Note: OS can override request.
	 * @alias Titanium.UI.Android.SOFT_KEYBOARD_SHOW_ON_FOCUS
	 * @property {Integer}
	 */
	SOFT_KEYBOARD_SHOW_ON_FOCUS: 0,
	/**
	 * Display Switch as an Android Checkbox
	 * @alias Titanium.UI.Android.SWITCH_STYLE_CHECKBOX
	 * @property {Integer}
	 */
	SWITCH_STYLE_CHECKBOX: 0,
	/**
	 * Display Switch as an Android Toggle Button (default)
	 * @alias Titanium.UI.Android.SWITCH_STYLE_TOGGLEBUTTON
	 * @property {Integer}
	 */
	SWITCH_STYLE_TOGGLEBUTTON: 0,
	/**
	 * add an event listener for the instance to receive view triggered events
	 * @param {String} name name of the event
	 * @param {Function} callback callback function to invoke when the event is fired
	 * @alias Titanium.UI.Android.addEventListener
	 */
	addEventListener: function (name,callback) { },
	/**
	 * fire a synthesized event to the views listener
	 * @param {String} name name of the event
	 * @param {Object} event event object
	 * @alias Titanium.UI.Android.fireEvent
	 */
	fireEvent: function (name,event) { },
	/**
	 * request that the soft keyboard hide. Note: It is not currently possible in the native Android API to detect that the keyboard is already visible. Note: It is not possible to globally show the keyboard at this point.
	 * @alias Titanium.UI.Android.hideSoftKeyboard
	 */
	hideSoftKeyboard: function () { },
	/**
	 * open Android native preferences UI activity. You need to place your preferences.xml file in the platform/android/res/xml/ folder of your project. Documentation on the file format may be found in the Android documentation http://developer.android.com/resources/samples/ApiDemos/res/xml/preferences.html
	 * @alias Titanium.UI.Android.openPreferences
	 */
	openPreferences: function () { },
	/**
	 * remove a previously added event listener
	 * @param {String} name name of the event
	 * @param {Function} callback callback function passed in addEventListener
	 * @alias Titanium.UI.Android.removeEventListener
	 */
	removeEventListener: function (name,callback) { },
};

/**
 * The Animation object is used for specifying lower-level animation properties and more low-level control of events during an animation. The Animation is created by the method Titanium.UI.createAnimation.
 * @since 0.9
 */
Titanium.UI.Animation = {
	/**
	 * the property specifies if the animation should be replayed in reverse upon completion
	 * @alias Titanium.UI.Animation.autoreverse
	 * @property {Boolean}
	 */
	autoreverse: false,
	/**
	 * Get the the property specifies if the animation should be replayed in reverse upon completion
	 * @alias Titanium.UI.Animation.getAutoreverse
	 * @return {Boolean}
	 */
	getAutoreverse: function () { return autoreverse; },
	/**
	 * Set the the property specifies if the animation should be replayed in reverse upon completion
	 * @param {Boolean} value New value to set.
	 * @alias Titanium.UI.Animation.setAutoreverse
	 */
	setAutoreverse: function () { },
	/**
	 * value of the backgroundColor property to change during animation
	 * @alias Titanium.UI.Animation.backgroundColor
	 * @property {String}
	 */
	backgroundColor: '',
	/**
	 * Get the value of the backgroundColor property to change during animation
	 * @alias Titanium.UI.Animation.getBackgroundColor
	 * @return {String}
	 */
	getBackgroundColor: function () { return backgroundColor; },
	/**
	 * Set the value of the backgroundColor property to change during animation
	 * @param {String} value New value to set.
	 * @alias Titanium.UI.Animation.setBackgroundColor
	 */
	setBackgroundColor: function () { },
	/**
	 * value of the bottom property to change during animation
	 * @alias Titanium.UI.Animation.bottom
	 * @property {Float}
	 */
	bottom: 0.0,
	/**
	 * Get the value of the bottom property to change during animation
	 * @alias Titanium.UI.Animation.getBottom
	 * @return {Float}
	 */
	getBottom: function () { return bottom; },
	/**
	 * Set the value of the bottom property to change during animation
	 * @param {Float} value New value to set.
	 * @alias Titanium.UI.Animation.setBottom
	 */
	setBottom: function () { },
	/**
	 * value of the center property to change during animation
	 * @alias Titanium.UI.Animation.center
	 * @property {Object}
	 */
	center: {},
	/**
	 * Get the value of the center property to change during animation
	 * @alias Titanium.UI.Animation.getCenter
	 * @return {Object}
	 */
	getCenter: function () { return center; },
	/**
	 * Set the value of the center property to change during animation
	 * @param {Object} value New value to set.
	 * @alias Titanium.UI.Animation.setCenter
	 */
	setCenter: function () { },
	/**
	 * value of the color property to change during animation
	 * @alias Titanium.UI.Animation.color
	 * @property {String}
	 */
	color: '',
	/**
	 * Get the value of the color property to change during animation
	 * @alias Titanium.UI.Animation.getColor
	 * @return {String}
	 */
	getColor: function () { return color; },
	/**
	 * Set the value of the color property to change during animation
	 * @param {String} value New value to set.
	 * @alias Titanium.UI.Animation.setColor
	 */
	setColor: function () { },
	/**
	 * the curve of the animation
	 * @alias Titanium.UI.Animation.curve
	 * @property {Integer}
	 */
	curve: 0,
	/**
	 * Get the the curve of the animation
	 * @alias Titanium.UI.Animation.getCurve
	 * @return {Integer}
	 */
	getCurve: function () { return curve; },
	/**
	 * Set the the curve of the animation
	 * @param {Integer} value New value to set.
	 * @alias Titanium.UI.Animation.setCurve
	 */
	setCurve: function () { },
	/**
	 * the duration of time in milliseconds before starting the animation
	 * @alias Titanium.UI.Animation.delay
	 * @property {Float}
	 */
	delay: 0.0,
	/**
	 * Get the the duration of time in milliseconds before starting the animation
	 * @alias Titanium.UI.Animation.getDelay
	 * @return {Float}
	 */
	getDelay: function () { return delay; },
	/**
	 * Set the the duration of time in milliseconds before starting the animation
	 * @param {Float} value New value to set.
	 * @alias Titanium.UI.Animation.setDelay
	 */
	setDelay: function () { },
	/**
	 * the duration of time in milliseconds to perform the animation
	 * @alias Titanium.UI.Animation.duration
	 * @property {Float}
	 */
	duration: 0.0,
	/**
	 * Get the the duration of time in milliseconds to perform the animation
	 * @alias Titanium.UI.Animation.getDuration
	 * @return {Float}
	 */
	getDuration: function () { return duration; },
	/**
	 * Set the the duration of time in milliseconds to perform the animation
	 * @param {Float} value New value to set.
	 * @alias Titanium.UI.Animation.setDuration
	 */
	setDuration: function () { },
	/**
	 * value of the height property to change during animation
	 * @alias Titanium.UI.Animation.height
	 * @property {Float}
	 */
	height: 0.0,
	/**
	 * Get the value of the height property to change during animation
	 * @alias Titanium.UI.Animation.getHeight
	 * @return {Float}
	 */
	getHeight: function () { return height; },
	/**
	 * Set the value of the height property to change during animation
	 * @param {Float} value New value to set.
	 * @alias Titanium.UI.Animation.setHeight
	 */
	setHeight: function () { },
	/**
	 * value of the left property to change during animation
	 * @alias Titanium.UI.Animation.left
	 * @property {Float}
	 */
	left: 0.0,
	/**
	 * Get the value of the left property to change during animation
	 * @alias Titanium.UI.Animation.getLeft
	 * @return {Float}
	 */
	getLeft: function () { return left; },
	/**
	 * Set the value of the left property to change during animation
	 * @param {Float} value New value to set.
	 * @alias Titanium.UI.Animation.setLeft
	 */
	setLeft: function () { },
	/**
	 * value of the opacity property to change during animation
	 * @alias Titanium.UI.Animation.opacity
	 * @property {Float}
	 */
	opacity: 0.0,
	/**
	 * Get the value of the opacity property to change during animation
	 * @alias Titanium.UI.Animation.getOpacity
	 * @return {Float}
	 */
	getOpacity: function () { return opacity; },
	/**
	 * Set the value of the opacity property to change during animation
	 * @param {Float} value New value to set.
	 * @alias Titanium.UI.Animation.setOpacity
	 */
	setOpacity: function () { },
	/**
	 * value of the opaque property to change during animation
	 * @alias Titanium.UI.Animation.opaque
	 * @property {Boolean}
	 */
	opaque: false,
	/**
	 * Get the value of the opaque property to change during animation
	 * @alias Titanium.UI.Animation.getOpaque
	 * @return {Boolean}
	 */
	getOpaque: function () { return opaque; },
	/**
	 * Set the value of the opaque property to change during animation
	 * @param {Boolean} value New value to set.
	 * @alias Titanium.UI.Animation.setOpaque
	 */
	setOpaque: function () { },
	/**
	 * the number of times the animation should be performed
	 * @alias Titanium.UI.Animation.repeat
	 * @property {Integer}
	 */
	repeat: 0,
	/**
	 * Get the the number of times the animation should be performed
	 * @alias Titanium.UI.Animation.getRepeat
	 * @return {Integer}
	 */
	getRepeat: function () { return repeat; },
	/**
	 * Set the the number of times the animation should be performed
	 * @param {Integer} value New value to set.
	 * @alias Titanium.UI.Animation.setRepeat
	 */
	setRepeat: function () { },
	/**
	 * value of the right property to change during animation
	 * @alias Titanium.UI.Animation.right
	 * @property {Float}
	 */
	right: 0.0,
	/**
	 * Get the value of the right property to change during animation
	 * @alias Titanium.UI.Animation.getRight
	 * @return {Float}
	 */
	getRight: function () { return right; },
	/**
	 * Set the value of the right property to change during animation
	 * @param {Float} value New value to set.
	 * @alias Titanium.UI.Animation.setRight
	 */
	setRight: function () { },
	/**
	 * value of the top property to change during animation
	 * @alias Titanium.UI.Animation.top
	 * @property {Float}
	 */
	top: 0.0,
	/**
	 * Get the value of the top property to change during animation
	 * @alias Titanium.UI.Animation.getTop
	 * @return {Float}
	 */
	getTop: function () { return top; },
	/**
	 * Set the value of the top property to change during animation
	 * @param {Float} value New value to set.
	 * @alias Titanium.UI.Animation.setTop
	 */
	setTop: function () { },
	/**
	 * value of the transform property to change during animation
	 * @alias Titanium.UI.Animation.transform
	 * @property {Object}
	 */
	transform: {},
	/**
	 * Get the value of the transform property to change during animation
	 * @alias Titanium.UI.Animation.getTransform
	 * @return {Object}
	 */
	getTransform: function () { return transform; },
	/**
	 * Set the value of the transform property to change during animation
	 * @param {Object} value New value to set.
	 * @alias Titanium.UI.Animation.setTransform
	 */
	setTransform: function () { },
	/**
	 * during a transition animation, this is the constant to the type of transition to use
	 * @alias Titanium.UI.Animation.transition
	 * @property {Integer}
	 */
	transition: 0,
	/**
	 * Get the during a transition animation, this is the constant to the type of transition to use
	 * @alias Titanium.UI.Animation.getTransition
	 * @return {Integer}
	 */
	getTransition: function () { return transition; },
	/**
	 * Set the during a transition animation, this is the constant to the type of transition to use
	 * @param {Integer} value New value to set.
	 * @alias Titanium.UI.Animation.setTransition
	 */
	setTransition: function () { },
	/**
	 * value of the visible property to change during animation
	 * @alias Titanium.UI.Animation.visible
	 * @property {Boolean}
	 */
	visible: false,
	/**
	 * Get the value of the visible property to change during animation
	 * @alias Titanium.UI.Animation.getVisible
	 * @return {Boolean}
	 */
	getVisible: function () { return visible; },
	/**
	 * Set the value of the visible property to change during animation
	 * @param {Boolean} value New value to set.
	 * @alias Titanium.UI.Animation.setVisible
	 */
	setVisible: function () { },
	/**
	 * value of the width property to change during animation
	 * @alias Titanium.UI.Animation.width
	 * @property {Float}
	 */
	width: 0.0,
	/**
	 * Get the value of the width property to change during animation
	 * @alias Titanium.UI.Animation.getWidth
	 * @return {Float}
	 */
	getWidth: function () { return width; },
	/**
	 * Set the value of the width property to change during animation
	 * @param {Float} value New value to set.
	 * @alias Titanium.UI.Animation.setWidth
	 */
	setWidth: function () { },
	/**
	 * value of the zIndex property to change during animation
	 * @alias Titanium.UI.Animation.zIndex
	 * @property {Integer}
	 */
	zIndex: 0,
	/**
	 * Get the value of the zIndex property to change during animation
	 * @alias Titanium.UI.Animation.getZIndex
	 * @return {Integer}
	 */
	getZIndex: function () { return zIndex; },
	/**
	 * Set the value of the zIndex property to change during animation
	 * @param {Integer} value New value to set.
	 * @alias Titanium.UI.Animation.setZIndex
	 */
	setZIndex: function () { },
	/**
	 * add an event listener for the instance to receive view triggered events
	 * @param {String} name name of the event
	 * @param {Function} callback callback function to invoke when the event is fired
	 * @alias Titanium.UI.Animation.addEventListener
	 */
	addEventListener: function (name,callback) { },
	/**
	 * fire a synthesized event to the views listener
	 * @param {String} name name of the event
	 * @param {Object} event event object
	 * @alias Titanium.UI.Animation.fireEvent
	 */
	fireEvent: function (name,event) { },
	/**
	 * remove a previously added event listener
	 * @param {String} name name of the event
	 * @param {Function} callback callback function passed in addEventListener
	 * @alias Titanium.UI.Animation.removeEventListener
	 */
	removeEventListener: function (name,callback) { },
};

/**
 * A Button is created by the method Titanium.UI.createButton.
 * @since 0.8
 */
Titanium.UI.Button = {
	/**
	 * a dictionary with properties x and y to indicate the anchor point value. anchor specifies the position by which animation should occur. center is 0.5, 0.5
	 * @alias Titanium.UI.Button.anchorPoint
	 * @property {Object}
	 */
	anchorPoint: {},
	/**
	 * Get the a dictionary with properties x and y to indicate the anchor point value. anchor specifies the position by which animation should occur. center is 0.5, 0.5
	 * @alias Titanium.UI.Button.getAnchorPoint
	 * @return {Object}
	 */
	getAnchorPoint: function () { return anchorPoint; },
	/**
	 * Set the a dictionary with properties x and y to indicate the anchor point value. anchor specifies the position by which animation should occur. center is 0.5, 0.5
	 * @param {Object} value New value to set.
	 * @alias Titanium.UI.Button.setAnchorPoint
	 */
	setAnchorPoint: function () { },
	/**
	 * read-only object with x and y properties of where the view is during animation
	 * @alias Titanium.UI.Button.animatedCenterPoint
	 * @property {Object}
	 */
	animatedCenterPoint: {},
	/**
	 * Get the read-only object with x and y properties of where the view is during animation
	 * @alias Titanium.UI.Button.getAnimatedCenterPoint
	 * @return {Object}
	 */
	getAnimatedCenterPoint: function () { return animatedCenterPoint; },
	/**
	 * Set the read-only object with x and y properties of where the view is during animation
	 * @param {Object} value New value to set.
	 * @alias Titanium.UI.Button.setAnimatedCenterPoint
	 */
	setAnimatedCenterPoint: function () { },
	/**
	 * the buttons background color
	 * @alias Titanium.UI.Button.backgroundColor
	 * @property {String}
	 */
	backgroundColor: '',
	/**
	 * Get the the buttons background color
	 * @alias Titanium.UI.Button.getBackgroundColor
	 * @return {String}
	 */
	getBackgroundColor: function () { return backgroundColor; },
	/**
	 * Set the the buttons background color
	 * @param {String} value New value to set.
	 * @alias Titanium.UI.Button.setBackgroundColor
	 */
	setBackgroundColor: function () { },
	/**
	 * the disabled background color of the view. (Android)
	 * @alias Titanium.UI.Button.backgroundDisabledColor
	 * @property {String}
	 */
	backgroundDisabledColor: '',
	/**
	 * Get the the disabled background color of the view. (Android)
	 * @alias Titanium.UI.Button.getBackgroundDisabledColor
	 * @return {String}
	 */
	getBackgroundDisabledColor: function () { return backgroundDisabledColor; },
	/**
	 * Set the the disabled background color of the view. (Android)
	 * @param {String} value New value to set.
	 * @alias Titanium.UI.Button.setBackgroundDisabledColor
	 */
	setBackgroundDisabledColor: function () { },
	/**
	 * url to a button image that is drawn as the background of the button when the button is in the disabled state
	 * @alias Titanium.UI.Button.backgroundDisabledImage
	 * @property {String}
	 */
	backgroundDisabledImage: '',
	/**
	 * Get the url to a button image that is drawn as the background of the button when the button is in the disabled state
	 * @alias Titanium.UI.Button.getBackgroundDisabledImage
	 * @return {String}
	 */
	getBackgroundDisabledImage: function () { return backgroundDisabledImage; },
	/**
	 * Set the url to a button image that is drawn as the background of the button when the button is in the disabled state
	 * @param {String} value New value to set.
	 * @alias Titanium.UI.Button.setBackgroundDisabledImage
	 */
	setBackgroundDisabledImage: function () { },
	/**
	 * the focused background color of the view. focusable must be true for normal views. (Android)
	 * @alias Titanium.UI.Button.backgroundFocusedColor
	 * @property {String}
	 */
	backgroundFocusedColor: '',
	/**
	 * Get the the focused background color of the view. focusable must be true for normal views. (Android)
	 * @alias Titanium.UI.Button.getBackgroundFocusedColor
	 * @return {String}
	 */
	getBackgroundFocusedColor: function () { return backgroundFocusedColor; },
	/**
	 * Set the the focused background color of the view. focusable must be true for normal views. (Android)
	 * @param {String} value New value to set.
	 * @alias Titanium.UI.Button.setBackgroundFocusedColor
	 */
	setBackgroundFocusedColor: function () { },
	/**
	 * the focused background image url of the view. focusable must be true for normal views. (Android)
	 * @alias Titanium.UI.Button.backgroundFocusedImage
	 * @property {String}
	 */
	backgroundFocusedImage: '',
	/**
	 * Get the the focused background image url of the view. focusable must be true for normal views. (Android)
	 * @alias Titanium.UI.Button.getBackgroundFocusedImage
	 * @return {String}
	 */
	getBackgroundFocusedImage: function () { return backgroundFocusedImage; },
	/**
	 * Set the the focused background image url of the view. focusable must be true for normal views. (Android)
	 * @param {String} value New value to set.
	 * @alias Titanium.UI.Button.setBackgroundFocusedImage
	 */
	setBackgroundFocusedImage: function () { },
	/**
	 * a background gradient for the view with the properties: type,startPoint,endPoint,startRadius,endRadius,backfillStart,backfillEnd,colors.
	 * @alias Titanium.UI.Button.backgroundGradient
	 * @property {Object}
	 */
	backgroundGradient: {},
	/**
	 * Get the a background gradient for the view with the properties: type,startPoint,endPoint,startRadius,endRadius,backfillStart,backfillEnd,colors.
	 * @alias Titanium.UI.Button.getBackgroundGradient
	 * @return {Object}
	 */
	getBackgroundGradient: function () { return backgroundGradient; },
	/**
	 * Set the a background gradient for the view with the properties: type,startPoint,endPoint,startRadius,endRadius,backfillStart,backfillEnd,colors.
	 * @param {Object} value New value to set.
	 * @alias Titanium.UI.Button.setBackgroundGradient
	 */
	setBackgroundGradient: function () { },
	/**
	 * url to a button image that is drawn as the background of the button
	 * @alias Titanium.UI.Button.backgroundImage
	 * @property {String}
	 */
	backgroundImage: '',
	/**
	 * Get the url to a button image that is drawn as the background of the button
	 * @alias Titanium.UI.Button.getBackgroundImage
	 * @return {String}
	 */
	getBackgroundImage: function () { return backgroundImage; },
	/**
	 * Set the url to a button image that is drawn as the background of the button
	 * @param {String} value New value to set.
	 * @alias Titanium.UI.Button.setBackgroundImage
	 */
	setBackgroundImage: function () { },
	/**
	 * End caps specify the portion of an image that should not be resized when an image is stretched. This technique is used to implement buttons and other resizable image-based interface elements. When a button with end caps is resized, the resizing occurs only in the middle of the button, in the region between the end caps. The end caps themselves keep their original size and appearance. This property specifies the size of the left end cap. The middle (stretchable) portion is assumed to be 1 pixel wide. The right end cap is therefore computed by adding the size of the left end cap and the middle portion together and then subtracting that value from the width of the image
	 * @alias Titanium.UI.Button.backgroundLeftCap
	 * @property {Float}
	 */
	backgroundLeftCap: 0.0,
	/**
	 * Get the End caps specify the portion of an image that should not be resized when an image is stretched. This technique is used to implement buttons and other resizable image-based interface elements. When a button with end caps is resized, the resizing occurs only in the middle of the button, in the region between the end caps. The end caps themselves keep their original size and appearance. This property specifies the size of the left end cap. The middle (stretchable) portion is assumed to be 1 pixel wide. The right end cap is therefore computed by adding the size of the left end cap and the middle portion together and then subtracting that value from the width of the image
	 * @alias Titanium.UI.Button.getBackgroundLeftCap
	 * @return {Float}
	 */
	getBackgroundLeftCap: function () { return backgroundLeftCap; },
	/**
	 * Set the End caps specify the portion of an image that should not be resized when an image is stretched. This technique is used to implement buttons and other resizable image-based interface elements. When a button with end caps is resized, the resizing occurs only in the middle of the button, in the region between the end caps. The end caps themselves keep their original size and appearance. This property specifies the size of the left end cap. The middle (stretchable) portion is assumed to be 1 pixel wide. The right end cap is therefore computed by adding the size of the left end cap and the middle portion together and then subtracting that value from the width of the image
	 * @param {Float} value New value to set.
	 * @alias Titanium.UI.Button.setBackgroundLeftCap
	 */
	setBackgroundLeftCap: function () { },
	/**
	 * the selected background color of the view. focusable must be true for normal views. (Android)
	 * @alias Titanium.UI.Button.backgroundSelectedColor
	 * @property {String}
	 */
	backgroundSelectedColor: '',
	/**
	 * Get the the selected background color of the view. focusable must be true for normal views. (Android)
	 * @alias Titanium.UI.Button.getBackgroundSelectedColor
	 * @return {String}
	 */
	getBackgroundSelectedColor: function () { return backgroundSelectedColor; },
	/**
	 * Set the the selected background color of the view. focusable must be true for normal views. (Android)
	 * @param {String} value New value to set.
	 * @alias Titanium.UI.Button.setBackgroundSelectedColor
	 */
	setBackgroundSelectedColor: function () { },
	/**
	 * url to a button image that is drawn as the background of the button when the button is in the selected state
	 * @alias Titanium.UI.Button.backgroundSelectedImage
	 * @property {String}
	 */
	backgroundSelectedImage: '',
	/**
	 * Get the url to a button image that is drawn as the background of the button when the button is in the selected state
	 * @alias Titanium.UI.Button.getBackgroundSelectedImage
	 * @return {String}
	 */
	getBackgroundSelectedImage: function () { return backgroundSelectedImage; },
	/**
	 * Set the url to a button image that is drawn as the background of the button when the button is in the selected state
	 * @param {String} value New value to set.
	 * @alias Titanium.UI.Button.setBackgroundSelectedImage
	 */
	setBackgroundSelectedImage: function () { },
	/**
	 * End caps specify the portion of an image that should not be resized when an image is stretched. This technique is used to implement buttons and other resizable image-based interface elements. When a button with end caps is resized, the resizing occurs only in the middle of the button, in the region between the end caps. The end caps themselves keep their original size and appearance. This property specifies the size of the top end cap. The middle (stretchable) portion is assumed to be 1 pixel wide. The bottom end cap is therefore computed by adding the size of the top end cap and the middle portion together and then subtracting that value from the height of the image
	 * @alias Titanium.UI.Button.backgroundTopCap
	 * @property {Float}
	 */
	backgroundTopCap: 0.0,
	/**
	 * Get the End caps specify the portion of an image that should not be resized when an image is stretched. This technique is used to implement buttons and other resizable image-based interface elements. When a button with end caps is resized, the resizing occurs only in the middle of the button, in the region between the end caps. The end caps themselves keep their original size and appearance. This property specifies the size of the top end cap. The middle (stretchable) portion is assumed to be 1 pixel wide. The bottom end cap is therefore computed by adding the size of the top end cap and the middle portion together and then subtracting that value from the height of the image
	 * @alias Titanium.UI.Button.getBackgroundTopCap
	 * @return {Float}
	 */
	getBackgroundTopCap: function () { return backgroundTopCap; },
	/**
	 * Set the End caps specify the portion of an image that should not be resized when an image is stretched. This technique is used to implement buttons and other resizable image-based interface elements. When a button with end caps is resized, the resizing occurs only in the middle of the button, in the region between the end caps. The end caps themselves keep their original size and appearance. This property specifies the size of the top end cap. The middle (stretchable) portion is assumed to be 1 pixel wide. The bottom end cap is therefore computed by adding the size of the top end cap and the middle portion together and then subtracting that value from the height of the image
	 * @param {Float} value New value to set.
	 * @alias Titanium.UI.Button.setBackgroundTopCap
	 */
	setBackgroundTopCap: function () { },
	/**
	 * the border color of the view
	 * @alias Titanium.UI.Button.borderColor
	 * @property {String}
	 */
	borderColor: '',
	/**
	 * Get the the border color of the view
	 * @alias Titanium.UI.Button.getBorderColor
	 * @return {String}
	 */
	getBorderColor: function () { return borderColor; },
	/**
	 * Set the the border color of the view
	 * @param {String} value New value to set.
	 * @alias Titanium.UI.Button.setBorderColor
	 */
	setBorderColor: function () { },
	/**
	 * the border radius of the view
	 * @alias Titanium.UI.Button.borderRadius
	 * @property {Float}
	 */
	borderRadius: 0.0,
	/**
	 * Get the the border radius of the view
	 * @alias Titanium.UI.Button.getBorderRadius
	 * @return {Float}
	 */
	getBorderRadius: function () { return borderRadius; },
	/**
	 * Set the the border radius of the view
	 * @param {Float} value New value to set.
	 * @alias Titanium.UI.Button.setBorderRadius
	 */
	setBorderRadius: function () { },
	/**
	 * the border width of the view
	 * @alias Titanium.UI.Button.borderWidth
	 * @property {Float}
	 */
	borderWidth: 0.0,
	/**
	 * Get the the border width of the view
	 * @alias Titanium.UI.Button.getBorderWidth
	 * @return {Float}
	 */
	getBorderWidth: function () { return borderWidth; },
	/**
	 * Set the the border width of the view
	 * @param {Float} value New value to set.
	 * @alias Titanium.UI.Button.setBorderWidth
	 */
	setBorderWidth: function () { },
	/**
	 * property for the view bottom position. This position is relative to the view's parent. Can be either a float value or a dimension string ie 'auto' (default), '50%' (iPhone only).
	 * @alias Titanium.UI.Button.bottom
	 * @property {Float,String}
	 */
	bottom: 0.0,
	/**
	 * Get the property for the view bottom position. This position is relative to the view's parent. Can be either a float value or a dimension string ie 'auto' (default), '50%' (iPhone only).
	 * @alias Titanium.UI.Button.getBottom
	 * @return {Float,String}
	 */
	getBottom: function () { return bottom; },
	/**
	 * Set the property for the view bottom position. This position is relative to the view's parent. Can be either a float value or a dimension string ie 'auto' (default), '50%' (iPhone only).
	 * @param {Float,String} value New value to set.
	 * @alias Titanium.UI.Button.setBottom
	 */
	setBottom: function () { },
	/**
	 * a dictionary with properties x and y to indicate the center of the views position relative to the parent view
	 * @alias Titanium.UI.Button.center
	 * @property {Object}
	 */
	center: {},
	/**
	 * Get the a dictionary with properties x and y to indicate the center of the views position relative to the parent view
	 * @alias Titanium.UI.Button.getCenter
	 * @return {Object}
	 */
	getCenter: function () { return center; },
	/**
	 * Set the a dictionary with properties x and y to indicate the center of the views position relative to the parent view
	 * @param {Object} value New value to set.
	 * @alias Titanium.UI.Button.setCenter
	 */
	setCenter: function () { },
	/**
	 * the foreground color of the button text
	 * @alias Titanium.UI.Button.color
	 * @property {String}
	 */
	color: '',
	/**
	 * Get the the foreground color of the button text
	 * @alias Titanium.UI.Button.getColor
	 * @return {String}
	 */
	getColor: function () { return color; },
	/**
	 * Set the the foreground color of the button text
	 * @param {String} value New value to set.
	 * @alias Titanium.UI.Button.setColor
	 */
	setColor: function () { },
	/**
	 * boolean that indicates if the button is enabled or not
	 * @alias Titanium.UI.Button.enabled
	 * @property {Boolean}
	 */
	enabled: false,
	/**
	 * Get the boolean that indicates if the button is enabled or not
	 * @alias Titanium.UI.Button.getEnabled
	 * @return {Boolean}
	 */
	getEnabled: function () { return enabled; },
	/**
	 * Set the boolean that indicates if the button is enabled or not
	 * @param {Boolean} value New value to set.
	 * @alias Titanium.UI.Button.setEnabled
	 */
	setEnabled: function () { },
	/**
	 * Set true if you want a view to be focusable when navigating with the trackball or D-Pad. Default: false. (Android Only)
	 * @alias Titanium.UI.Button.focusable
	 * @property {Boolean}
	 */
	focusable: false,
	/**
	 * Get the Set true if you want a view to be focusable when navigating with the trackball or D-Pad. Default: false. (Android Only)
	 * @alias Titanium.UI.Button.getFocusable
	 * @return {Boolean}
	 */
	getFocusable: function () { return focusable; },
	/**
	 * Set the Set true if you want a view to be focusable when navigating with the trackball or D-Pad. Default: false. (Android Only)
	 * @param {Boolean} value New value to set.
	 * @alias Titanium.UI.Button.setFocusable
	 */
	setFocusable: function () { },
	/**
	 * the font properties of the button
	 * @alias Titanium.UI.Button.font
	 * @property {Object}
	 */
	font: {},
	/**
	 * Get the the font properties of the button
	 * @alias Titanium.UI.Button.getFont
	 * @return {Object}
	 */
	getFont: function () { return font; },
	/**
	 * Set the the font properties of the button
	 * @param {Object} value New value to set.
	 * @alias Titanium.UI.Button.setFont
	 */
	setFont: function () { },
	/**
	 * the font family
	 * @alias Titanium.UI.Button.font-family
	 * @property {String}
	 */
	font-family: '',
	/**
	 * Get the the font family
	 * @alias Titanium.UI.Button.getFont-family
	 * @return {String}
	 */
	getFont-family: function () { return font-family; },
	/**
	 * Set the the font family
	 * @param {String} value New value to set.
	 * @alias Titanium.UI.Button.setFont-family
	 */
	setFont-family: function () { },
	/**
	 * the font size
	 * @alias Titanium.UI.Button.font-size
	 * @property {String}
	 */
	font-size: '',
	/**
	 * Get the the font size
	 * @alias Titanium.UI.Button.getFont-size
	 * @return {String}
	 */
	getFont-size: function () { return font-size; },
	/**
	 * Set the the font size
	 * @param {String} value New value to set.
	 * @alias Titanium.UI.Button.setFont-size
	 */
	setFont-size: function () { },
	/**
	 * the font style, either normal or italics
	 * @alias Titanium.UI.Button.font-style
	 * @property {String}
	 */
	font-style: '',
	/**
	 * Get the the font style, either normal or italics
	 * @alias Titanium.UI.Button.getFont-style
	 * @return {String}
	 */
	getFont-style: function () { return font-style; },
	/**
	 * Set the the font style, either normal or italics
	 * @param {String} value New value to set.
	 * @alias Titanium.UI.Button.setFont-style
	 */
	setFont-style: function () { },
	/**
	 * the font weight, either normal or bold
	 * @alias Titanium.UI.Button.font-weight
	 * @property {String}
	 */
	font-weight: '',
	/**
	 * Get the the font weight, either normal or bold
	 * @alias Titanium.UI.Button.getFont-weight
	 * @return {String}
	 */
	getFont-weight: function () { return font-weight; },
	/**
	 * Set the the font weight, either normal or bold
	 * @param {String} value New value to set.
	 * @alias Titanium.UI.Button.setFont-weight
	 */
	setFont-weight: function () { },
	/**
	 * property for the view height. Can be either a float value or a dimension string ie 'auto' (default), '50%' (iPhone only).
	 * @alias Titanium.UI.Button.height
	 * @property {Float,String}
	 */
	height: 0.0,
	/**
	 * Get the property for the view height. Can be either a float value or a dimension string ie 'auto' (default), '50%' (iPhone only).
	 * @alias Titanium.UI.Button.getHeight
	 * @return {Float,String}
	 */
	getHeight: function () { return height; },
	/**
	 * Set the property for the view height. Can be either a float value or a dimension string ie 'auto' (default), '50%' (iPhone only).
	 * @param {Float,String} value New value to set.
	 * @alias Titanium.UI.Button.setHeight
	 */
	setHeight: function () { },
	/**
	 * the image to display on the button to the left of the title
	 * @alias Titanium.UI.Button.image
	 * @property {String}
	 */
	image: '',
	/**
	 * Get the the image to display on the button to the left of the title
	 * @alias Titanium.UI.Button.getImage
	 * @return {String}
	 */
	getImage: function () { return image; },
	/**
	 * Set the the image to display on the button to the left of the title
	 * @param {String} value New value to set.
	 * @alias Titanium.UI.Button.setImage
	 */
	setImage: function () { },
	/**
	 * property for the view left position. This position is relative to the view's parent. Can be either a float value or a dimension string ie 'auto' (default), '50%' (iPhone only).
	 * @alias Titanium.UI.Button.left
	 * @property {Float,String}
	 */
	left: 0.0,
	/**
	 * Get the property for the view left position. This position is relative to the view's parent. Can be either a float value or a dimension string ie 'auto' (default), '50%' (iPhone only).
	 * @alias Titanium.UI.Button.getLeft
	 * @return {Float,String}
	 */
	getLeft: function () { return left; },
	/**
	 * Set the property for the view left position. This position is relative to the view's parent. Can be either a float value or a dimension string ie 'auto' (default), '50%' (iPhone only).
	 * @param {Float,String} value New value to set.
	 * @alias Titanium.UI.Button.setLeft
	 */
	setLeft: function () { },
	/**
	 * the opacity from 0.0-1.0
	 * @alias Titanium.UI.Button.opacity
	 * @property {Float}
	 */
	opacity: 0.0,
	/**
	 * Get the the opacity from 0.0-1.0
	 * @alias Titanium.UI.Button.getOpacity
	 * @return {Float}
	 */
	getOpacity: function () { return opacity; },
	/**
	 * Set the the opacity from 0.0-1.0
	 * @param {Float} value New value to set.
	 * @alias Titanium.UI.Button.setOpacity
	 */
	setOpacity: function () { },
	/**
	 * property for the view right position. This position is relative to the view's parent. Can be either a float value or a dimension string ie 'auto' (default), '50%' (iPhone only).
	 * @alias Titanium.UI.Button.right
	 * @property {Float,String}
	 */
	right: 0.0,
	/**
	 * Get the property for the view right position. This position is relative to the view's parent. Can be either a float value or a dimension string ie 'auto' (default), '50%' (iPhone only).
	 * @alias Titanium.UI.Button.getRight
	 * @return {Float,String}
	 */
	getRight: function () { return right; },
	/**
	 * Set the property for the view right position. This position is relative to the view's parent. Can be either a float value or a dimension string ie 'auto' (default), '50%' (iPhone only).
	 * @param {Float,String} value New value to set.
	 * @alias Titanium.UI.Button.setRight
	 */
	setRight: function () { },
	/**
	 * the selected color of the button text when the button is in the selected state
	 * @alias Titanium.UI.Button.selectedColor
	 * @property {String}
	 */
	selectedColor: '',
	/**
	 * Get the the selected color of the button text when the button is in the selected state
	 * @alias Titanium.UI.Button.getSelectedColor
	 * @return {String}
	 */
	getSelectedColor: function () { return selectedColor; },
	/**
	 * Set the the selected color of the button text when the button is in the selected state
	 * @param {String} value New value to set.
	 * @alias Titanium.UI.Button.setSelectedColor
	 */
	setSelectedColor: function () { },
	/**
	 * the size of the view as a dictionary of width and height properties
	 * @alias Titanium.UI.Button.size
	 * @property {Object}
	 */
	size: {},
	/**
	 * Get the the size of the view as a dictionary of width and height properties
	 * @alias Titanium.UI.Button.getSize
	 * @return {Object}
	 */
	getSize: function () { return size; },
	/**
	 * Set the the size of the view as a dictionary of width and height properties
	 * @param {Object} value New value to set.
	 * @alias Titanium.UI.Button.setSize
	 */
	setSize: function () { },
	/**
	 * One of Titanium.UI.Android.SOFT_KEYBOARD_DEFAULT_ON_FOCUS, Titanium.UI.Android.SOFT_KEYBOARD_HIDE_ON_FOCUS, or Titanium.UI.Android.SOFT_KEYBOARD_SHOW_ON_FOCUS. (Android only)
	 * @alias Titanium.UI.Button.softKeyboardOnFocus
	 * @property {Integer}
	 */
	softKeyboardOnFocus: 0,
	/**
	 * Get the One of Titanium.UI.Android.SOFT_KEYBOARD_DEFAULT_ON_FOCUS, Titanium.UI.Android.SOFT_KEYBOARD_HIDE_ON_FOCUS, or Titanium.UI.Android.SOFT_KEYBOARD_SHOW_ON_FOCUS. (Android only)
	 * @alias Titanium.UI.Button.getSoftKeyboardOnFocus
	 * @return {Integer}
	 */
	getSoftKeyboardOnFocus: function () { return softKeyboardOnFocus; },
	/**
	 * Set the One of Titanium.UI.Android.SOFT_KEYBOARD_DEFAULT_ON_FOCUS, Titanium.UI.Android.SOFT_KEYBOARD_HIDE_ON_FOCUS, or Titanium.UI.Android.SOFT_KEYBOARD_SHOW_ON_FOCUS. (Android only)
	 * @param {Integer} value New value to set.
	 * @alias Titanium.UI.Button.setSoftKeyboardOnFocus
	 */
	setSoftKeyboardOnFocus: function () { },
	/**
	 * style constant for the type of button
	 * @alias Titanium.UI.Button.style
	 * @property {Integer}
	 */
	style: 0,
	/**
	 * Get the style constant for the type of button
	 * @alias Titanium.UI.Button.getStyle
	 * @return {Integer}
	 */
	getStyle: function () { return style; },
	/**
	 * Set the style constant for the type of button
	 * @param {Integer} value New value to set.
	 * @alias Titanium.UI.Button.setStyle
	 */
	setStyle: function () { },
	/**
	 * button title
	 * @alias Titanium.UI.Button.title
	 * @property {String}
	 */
	title: '',
	/**
	 * Get the button title
	 * @alias Titanium.UI.Button.getTitle
	 * @return {String}
	 */
	getTitle: function () { return title; },
	/**
	 * Set the button title
	 * @param {String} value New value to set.
	 * @alias Titanium.UI.Button.setTitle
	 */
	setTitle: function () { },
	/**
	 * the key in the locale file to use for the title property
	 * @alias Titanium.UI.Button.titleid
	 * @property {String}
	 */
	titleid: '',
	/**
	 * Get the the key in the locale file to use for the title property
	 * @alias Titanium.UI.Button.getTitleid
	 * @return {String}
	 */
	getTitleid: function () { return titleid; },
	/**
	 * Set the the key in the locale file to use for the title property
	 * @param {String} value New value to set.
	 * @alias Titanium.UI.Button.setTitleid
	 */
	setTitleid: function () { },
	/**
	 * property for the view top position. This position is relative to the view's parent. Can be either a float value or a dimension string ie 'auto' (default), '50%' (iPhone only).
	 * @alias Titanium.UI.Button.top
	 * @property {Float,String}
	 */
	top: 0.0,
	/**
	 * Get the property for the view top position. This position is relative to the view's parent. Can be either a float value or a dimension string ie 'auto' (default), '50%' (iPhone only).
	 * @alias Titanium.UI.Button.getTop
	 * @return {Float,String}
	 */
	getTop: function () { return top; },
	/**
	 * Set the property for the view top position. This position is relative to the view's parent. Can be either a float value or a dimension string ie 'auto' (default), '50%' (iPhone only).
	 * @param {Float,String} value New value to set.
	 * @alias Titanium.UI.Button.setTop
	 */
	setTop: function () { },
	/**
	 * a boolean indicating if the view should receive touch events (true, default) or forward them to peers (false)
	 * @alias Titanium.UI.Button.touchEnabled
	 * @property {Boolean}
	 */
	touchEnabled: false,
	/**
	 * Get the a boolean indicating if the view should receive touch events (true, default) or forward them to peers (false)
	 * @alias Titanium.UI.Button.getTouchEnabled
	 * @return {Boolean}
	 */
	getTouchEnabled: function () { return touchEnabled; },
	/**
	 * Set the a boolean indicating if the view should receive touch events (true, default) or forward them to peers (false)
	 * @param {Boolean} value New value to set.
	 * @alias Titanium.UI.Button.setTouchEnabled
	 */
	setTouchEnabled: function () { },
	/**
	 * the transformation matrix to apply to the view
	 * @alias Titanium.UI.Button.transform
	 * @property {Object}
	 */
	transform: {},
	/**
	 * Get the the transformation matrix to apply to the view
	 * @alias Titanium.UI.Button.getTransform
	 * @return {Object}
	 */
	getTransform: function () { return transform; },
	/**
	 * Set the the transformation matrix to apply to the view
	 * @param {Object} value New value to set.
	 * @alias Titanium.UI.Button.setTransform
	 */
	setTransform: function () { },
	/**
	 * a boolean of the visibility of the view
	 * @alias Titanium.UI.Button.visible
	 * @property {Boolean}
	 */
	visible: false,
	/**
	 * Get the a boolean of the visibility of the view
	 * @alias Titanium.UI.Button.getVisible
	 * @return {Boolean}
	 */
	getVisible: function () { return visible; },
	/**
	 * Set the a boolean of the visibility of the view
	 * @param {Boolean} value New value to set.
	 * @alias Titanium.UI.Button.setVisible
	 */
	setVisible: function () { },
	/**
	 * property for the view width. Can be either a float value or a dimension string ie 'auto' (default), '50%' (iPhone only).
	 * @alias Titanium.UI.Button.width
	 * @property {Float,String}
	 */
	width: 0.0,
	/**
	 * Get the property for the view width. Can be either a float value or a dimension string ie 'auto' (default), '50%' (iPhone only).
	 * @alias Titanium.UI.Button.getWidth
	 * @return {Float,String}
	 */
	getWidth: function () { return width; },
	/**
	 * Set the property for the view width. Can be either a float value or a dimension string ie 'auto' (default), '50%' (iPhone only).
	 * @param {Float,String} value New value to set.
	 * @alias Titanium.UI.Button.setWidth
	 */
	setWidth: function () { },
	/**
	 * the z index position relative to other sibling views
	 * @alias Titanium.UI.Button.zIndex
	 * @property {Integer}
	 */
	zIndex: 0,
	/**
	 * Get the the z index position relative to other sibling views
	 * @alias Titanium.UI.Button.getZIndex
	 * @return {Integer}
	 */
	getZIndex: function () { return zIndex; },
	/**
	 * Set the the z index position relative to other sibling views
	 * @param {Integer} value New value to set.
	 * @alias Titanium.UI.Button.setZIndex
	 */
	setZIndex: function () { },
	/**
	 * add a child to the view hierarchy
	 * @param {Object} view the view to add to this views hiearchy
	 * @alias Titanium.UI.Button.add
	 */
	add: function (view) { },
	/**
	 * add an event listener for the instance to receive view triggered events
	 * @param {String} name name of the event
	 * @param {Function} callback callback function to invoke when the event is fired
	 * @alias Titanium.UI.Button.addEventListener
	 */
	addEventListener: function (name,callback) { },
	/**
	 * animate the view
	 * @param {Object} obj either a dictionary of animation properties or an Animation object
	 * @param {Function} callback function to be invoked upon completion of the animation
	 * @alias Titanium.UI.Button.animate
	 */
	animate: function (obj,callback) { },
	/**
	 * fire a synthesized event to the views listener
	 * @param {String} name name of the event
	 * @param {Object} event event object
	 * @alias Titanium.UI.Button.fireEvent
	 */
	fireEvent: function (name,event) { },
	/**
	 * hide the view
	 * @alias Titanium.UI.Button.hide
	 */
	hide: function () { },
	/**
	 * remove a previously add view from the view hiearchy
	 * @param {Object} view the view to remove from this views hiearchy
	 * @alias Titanium.UI.Button.remove
	 */
	remove: function (view) { },
	/**
	 * remove a previously added event listener
	 * @param {String} name name of the event
	 * @param {Function} callback callback function passed in addEventListener
	 * @alias Titanium.UI.Button.removeEventListener
	 */
	removeEventListener: function (name,callback) { },
	/**
	 * make the view visible
	 * @alias Titanium.UI.Button.show
	 */
	show: function () { },
	/**
	 * return a Blob image of the rendered view
	 * @param {Function} f function to be invoked upon completion. if non-null, this method will be performed asynchronously. if null, it will be performed immediately
	 * @alias Titanium.UI.Button.toImage
	 * @return {Object}
	 */
	toImage: function (f) { return {}; },
};

/**
 * A Button Bar is created by the method Titanium.UI.createButtonBar.
 * @since 0.8
 */
Titanium.UI.ButtonBar = {
	/**
	 * a dictionary with properties x and y to indicate the anchor point value. anchor specifies the position by which animation should occur. center is 0.5, 0.5
	 * @alias Titanium.UI.ButtonBar.anchorPoint
	 * @property {Object}
	 */
	anchorPoint: {},
	/**
	 * Get the a dictionary with properties x and y to indicate the anchor point value. anchor specifies the position by which animation should occur. center is 0.5, 0.5
	 * @alias Titanium.UI.ButtonBar.getAnchorPoint
	 * @return {Object}
	 */
	getAnchorPoint: function () { return anchorPoint; },
	/**
	 * Set the a dictionary with properties x and y to indicate the anchor point value. anchor specifies the position by which animation should occur. center is 0.5, 0.5
	 * @param {Object} value New value to set.
	 * @alias Titanium.UI.ButtonBar.setAnchorPoint
	 */
	setAnchorPoint: function () { },
	/**
	 * read-only object with x and y properties of where the view is during animation
	 * @alias Titanium.UI.ButtonBar.animatedCenterPoint
	 * @property {Object}
	 */
	animatedCenterPoint: {},
	/**
	 * Get the read-only object with x and y properties of where the view is during animation
	 * @alias Titanium.UI.ButtonBar.getAnimatedCenterPoint
	 * @return {Object}
	 */
	getAnimatedCenterPoint: function () { return animatedCenterPoint; },
	/**
	 * Set the read-only object with x and y properties of where the view is during animation
	 * @param {Object} value New value to set.
	 * @alias Titanium.UI.ButtonBar.setAnimatedCenterPoint
	 */
	setAnimatedCenterPoint: function () { },
	/**
	 * the background color of the button bar
	 * @alias Titanium.UI.ButtonBar.backgroundColor
	 * @property {String}
	 */
	backgroundColor: '',
	/**
	 * Get the the background color of the button bar
	 * @alias Titanium.UI.ButtonBar.getBackgroundColor
	 * @return {String}
	 */
	getBackgroundColor: function () { return backgroundColor; },
	/**
	 * Set the the background color of the button bar
	 * @param {String} value New value to set.
	 * @alias Titanium.UI.ButtonBar.setBackgroundColor
	 */
	setBackgroundColor: function () { },
	/**
	 * the disabled background color of the view. (Android)
	 * @alias Titanium.UI.ButtonBar.backgroundDisabledColor
	 * @property {String}
	 */
	backgroundDisabledColor: '',
	/**
	 * Get the the disabled background color of the view. (Android)
	 * @alias Titanium.UI.ButtonBar.getBackgroundDisabledColor
	 * @return {String}
	 */
	getBackgroundDisabledColor: function () { return backgroundDisabledColor; },
	/**
	 * Set the the disabled background color of the view. (Android)
	 * @param {String} value New value to set.
	 * @alias Titanium.UI.ButtonBar.setBackgroundDisabledColor
	 */
	setBackgroundDisabledColor: function () { },
	/**
	 * the disabled background image url of the view. (Android)
	 * @alias Titanium.UI.ButtonBar.backgroundDisabledImage
	 * @property {String}
	 */
	backgroundDisabledImage: '',
	/**
	 * Get the the disabled background image url of the view. (Android)
	 * @alias Titanium.UI.ButtonBar.getBackgroundDisabledImage
	 * @return {String}
	 */
	getBackgroundDisabledImage: function () { return backgroundDisabledImage; },
	/**
	 * Set the the disabled background image url of the view. (Android)
	 * @param {String} value New value to set.
	 * @alias Titanium.UI.ButtonBar.setBackgroundDisabledImage
	 */
	setBackgroundDisabledImage: function () { },
	/**
	 * the focused background color of the view. focusable must be true for normal views. (Android)
	 * @alias Titanium.UI.ButtonBar.backgroundFocusedColor
	 * @property {String}
	 */
	backgroundFocusedColor: '',
	/**
	 * Get the the focused background color of the view. focusable must be true for normal views. (Android)
	 * @alias Titanium.UI.ButtonBar.getBackgroundFocusedColor
	 * @return {String}
	 */
	getBackgroundFocusedColor: function () { return backgroundFocusedColor; },
	/**
	 * Set the the focused background color of the view. focusable must be true for normal views. (Android)
	 * @param {String} value New value to set.
	 * @alias Titanium.UI.ButtonBar.setBackgroundFocusedColor
	 */
	setBackgroundFocusedColor: function () { },
	/**
	 * the focused background image url of the view. focusable must be true for normal views. (Android)
	 * @alias Titanium.UI.ButtonBar.backgroundFocusedImage
	 * @property {String}
	 */
	backgroundFocusedImage: '',
	/**
	 * Get the the focused background image url of the view. focusable must be true for normal views. (Android)
	 * @alias Titanium.UI.ButtonBar.getBackgroundFocusedImage
	 * @return {String}
	 */
	getBackgroundFocusedImage: function () { return backgroundFocusedImage; },
	/**
	 * Set the the focused background image url of the view. focusable must be true for normal views. (Android)
	 * @param {String} value New value to set.
	 * @alias Titanium.UI.ButtonBar.setBackgroundFocusedImage
	 */
	setBackgroundFocusedImage: function () { },
	/**
	 * a background gradient for the view with the properties: type,startPoint,endPoint,startRadius,endRadius,backfillStart,backfillEnd,colors.
	 * @alias Titanium.UI.ButtonBar.backgroundGradient
	 * @property {Object}
	 */
	backgroundGradient: {},
	/**
	 * Get the a background gradient for the view with the properties: type,startPoint,endPoint,startRadius,endRadius,backfillStart,backfillEnd,colors.
	 * @alias Titanium.UI.ButtonBar.getBackgroundGradient
	 * @return {Object}
	 */
	getBackgroundGradient: function () { return backgroundGradient; },
	/**
	 * Set the a background gradient for the view with the properties: type,startPoint,endPoint,startRadius,endRadius,backfillStart,backfillEnd,colors.
	 * @param {Object} value New value to set.
	 * @alias Titanium.UI.ButtonBar.setBackgroundGradient
	 */
	setBackgroundGradient: function () { },
	/**
	 * the background image url of the view
	 * @alias Titanium.UI.ButtonBar.backgroundImage
	 * @property {String}
	 */
	backgroundImage: '',
	/**
	 * Get the the background image url of the view
	 * @alias Titanium.UI.ButtonBar.getBackgroundImage
	 * @return {String}
	 */
	getBackgroundImage: function () { return backgroundImage; },
	/**
	 * Set the the background image url of the view
	 * @param {String} value New value to set.
	 * @alias Titanium.UI.ButtonBar.setBackgroundImage
	 */
	setBackgroundImage: function () { },
	/**
	 * End caps specify the portion of an image that should not be resized when an image is stretched. This technique is used to implement buttons and other resizable image-based interface elements. When a button with end caps is resized, the resizing occurs only in the middle of the button, in the region between the end caps. The end caps themselves keep their original size and appearance. This property specifies the size of the left end cap. The middle (stretchable) portion is assumed to be 1 pixel wide. The right end cap is therefore computed by adding the size of the left end cap and the middle portion together and then subtracting that value from the width of the image
	 * @alias Titanium.UI.ButtonBar.backgroundLeftCap
	 * @property {Float}
	 */
	backgroundLeftCap: 0.0,
	/**
	 * Get the End caps specify the portion of an image that should not be resized when an image is stretched. This technique is used to implement buttons and other resizable image-based interface elements. When a button with end caps is resized, the resizing occurs only in the middle of the button, in the region between the end caps. The end caps themselves keep their original size and appearance. This property specifies the size of the left end cap. The middle (stretchable) portion is assumed to be 1 pixel wide. The right end cap is therefore computed by adding the size of the left end cap and the middle portion together and then subtracting that value from the width of the image
	 * @alias Titanium.UI.ButtonBar.getBackgroundLeftCap
	 * @return {Float}
	 */
	getBackgroundLeftCap: function () { return backgroundLeftCap; },
	/**
	 * Set the End caps specify the portion of an image that should not be resized when an image is stretched. This technique is used to implement buttons and other resizable image-based interface elements. When a button with end caps is resized, the resizing occurs only in the middle of the button, in the region between the end caps. The end caps themselves keep their original size and appearance. This property specifies the size of the left end cap. The middle (stretchable) portion is assumed to be 1 pixel wide. The right end cap is therefore computed by adding the size of the left end cap and the middle portion together and then subtracting that value from the width of the image
	 * @param {Float} value New value to set.
	 * @alias Titanium.UI.ButtonBar.setBackgroundLeftCap
	 */
	setBackgroundLeftCap: function () { },
	/**
	 * the selected background color of the view. focusable must be true for normal views. (Android)
	 * @alias Titanium.UI.ButtonBar.backgroundSelectedColor
	 * @property {String}
	 */
	backgroundSelectedColor: '',
	/**
	 * Get the the selected background color of the view. focusable must be true for normal views. (Android)
	 * @alias Titanium.UI.ButtonBar.getBackgroundSelectedColor
	 * @return {String}
	 */
	getBackgroundSelectedColor: function () { return backgroundSelectedColor; },
	/**
	 * Set the the selected background color of the view. focusable must be true for normal views. (Android)
	 * @param {String} value New value to set.
	 * @alias Titanium.UI.ButtonBar.setBackgroundSelectedColor
	 */
	setBackgroundSelectedColor: function () { },
	/**
	 * the selected background image url of the view. focusable must be true for normal views. (Android)
	 * @alias Titanium.UI.ButtonBar.backgroundSelectedImage
	 * @property {String}
	 */
	backgroundSelectedImage: '',
	/**
	 * Get the the selected background image url of the view. focusable must be true for normal views. (Android)
	 * @alias Titanium.UI.ButtonBar.getBackgroundSelectedImage
	 * @return {String}
	 */
	getBackgroundSelectedImage: function () { return backgroundSelectedImage; },
	/**
	 * Set the the selected background image url of the view. focusable must be true for normal views. (Android)
	 * @param {String} value New value to set.
	 * @alias Titanium.UI.ButtonBar.setBackgroundSelectedImage
	 */
	setBackgroundSelectedImage: function () { },
	/**
	 * End caps specify the portion of an image that should not be resized when an image is stretched. This technique is used to implement buttons and other resizable image-based interface elements. When a button with end caps is resized, the resizing occurs only in the middle of the button, in the region between the end caps. The end caps themselves keep their original size and appearance. This property specifies the size of the top end cap. The middle (stretchable) portion is assumed to be 1 pixel wide. The bottom end cap is therefore computed by adding the size of the top end cap and the middle portion together and then subtracting that value from the height of the image
	 * @alias Titanium.UI.ButtonBar.backgroundTopCap
	 * @property {Float}
	 */
	backgroundTopCap: 0.0,
	/**
	 * Get the End caps specify the portion of an image that should not be resized when an image is stretched. This technique is used to implement buttons and other resizable image-based interface elements. When a button with end caps is resized, the resizing occurs only in the middle of the button, in the region between the end caps. The end caps themselves keep their original size and appearance. This property specifies the size of the top end cap. The middle (stretchable) portion is assumed to be 1 pixel wide. The bottom end cap is therefore computed by adding the size of the top end cap and the middle portion together and then subtracting that value from the height of the image
	 * @alias Titanium.UI.ButtonBar.getBackgroundTopCap
	 * @return {Float}
	 */
	getBackgroundTopCap: function () { return backgroundTopCap; },
	/**
	 * Set the End caps specify the portion of an image that should not be resized when an image is stretched. This technique is used to implement buttons and other resizable image-based interface elements. When a button with end caps is resized, the resizing occurs only in the middle of the button, in the region between the end caps. The end caps themselves keep their original size and appearance. This property specifies the size of the top end cap. The middle (stretchable) portion is assumed to be 1 pixel wide. The bottom end cap is therefore computed by adding the size of the top end cap and the middle portion together and then subtracting that value from the height of the image
	 * @param {Float} value New value to set.
	 * @alias Titanium.UI.ButtonBar.setBackgroundTopCap
	 */
	setBackgroundTopCap: function () { },
	/**
	 * the border color of the view
	 * @alias Titanium.UI.ButtonBar.borderColor
	 * @property {String}
	 */
	borderColor: '',
	/**
	 * Get the the border color of the view
	 * @alias Titanium.UI.ButtonBar.getBorderColor
	 * @return {String}
	 */
	getBorderColor: function () { return borderColor; },
	/**
	 * Set the the border color of the view
	 * @param {String} value New value to set.
	 * @alias Titanium.UI.ButtonBar.setBorderColor
	 */
	setBorderColor: function () { },
	/**
	 * the border radius of the view
	 * @alias Titanium.UI.ButtonBar.borderRadius
	 * @property {Float}
	 */
	borderRadius: 0.0,
	/**
	 * Get the the border radius of the view
	 * @alias Titanium.UI.ButtonBar.getBorderRadius
	 * @return {Float}
	 */
	getBorderRadius: function () { return borderRadius; },
	/**
	 * Set the the border radius of the view
	 * @param {Float} value New value to set.
	 * @alias Titanium.UI.ButtonBar.setBorderRadius
	 */
	setBorderRadius: function () { },
	/**
	 * the border width of the view
	 * @alias Titanium.UI.ButtonBar.borderWidth
	 * @property {Float}
	 */
	borderWidth: 0.0,
	/**
	 * Get the the border width of the view
	 * @alias Titanium.UI.ButtonBar.getBorderWidth
	 * @return {Float}
	 */
	getBorderWidth: function () { return borderWidth; },
	/**
	 * Set the the border width of the view
	 * @param {Float} value New value to set.
	 * @alias Titanium.UI.ButtonBar.setBorderWidth
	 */
	setBorderWidth: function () { },
	/**
	 * property for the view bottom position. This position is relative to the view's parent. Can be either a float value or a dimension string ie 'auto' (default), '50%' (iPhone only).
	 * @alias Titanium.UI.ButtonBar.bottom
	 * @property {Float,String}
	 */
	bottom: 0.0,
	/**
	 * Get the property for the view bottom position. This position is relative to the view's parent. Can be either a float value or a dimension string ie 'auto' (default), '50%' (iPhone only).
	 * @alias Titanium.UI.ButtonBar.getBottom
	 * @return {Float,String}
	 */
	getBottom: function () { return bottom; },
	/**
	 * Set the property for the view bottom position. This position is relative to the view's parent. Can be either a float value or a dimension string ie 'auto' (default), '50%' (iPhone only).
	 * @param {Float,String} value New value to set.
	 * @alias Titanium.UI.ButtonBar.setBottom
	 */
	setBottom: function () { },
	/**
	 * a dictionary with properties x and y to indicate the center of the views position relative to the parent view
	 * @alias Titanium.UI.ButtonBar.center
	 * @property {Object}
	 */
	center: {},
	/**
	 * Get the a dictionary with properties x and y to indicate the center of the views position relative to the parent view
	 * @alias Titanium.UI.ButtonBar.getCenter
	 * @return {Object}
	 */
	getCenter: function () { return center; },
	/**
	 * Set the a dictionary with properties x and y to indicate the center of the views position relative to the parent view
	 * @param {Object} value New value to set.
	 * @alias Titanium.UI.ButtonBar.setCenter
	 */
	setCenter: function () { },
	/**
	 * Set true if you want a view to be focusable when navigating with the trackball or D-Pad. Default: false. (Android Only)
	 * @alias Titanium.UI.ButtonBar.focusable
	 * @property {Boolean}
	 */
	focusable: false,
	/**
	 * Get the Set true if you want a view to be focusable when navigating with the trackball or D-Pad. Default: false. (Android Only)
	 * @alias Titanium.UI.ButtonBar.getFocusable
	 * @return {Boolean}
	 */
	getFocusable: function () { return focusable; },
	/**
	 * Set the Set true if you want a view to be focusable when navigating with the trackball or D-Pad. Default: false. (Android Only)
	 * @param {Boolean} value New value to set.
	 * @alias Titanium.UI.ButtonBar.setFocusable
	 */
	setFocusable: function () { },
	/**
	 * the font family
	 * @alias Titanium.UI.ButtonBar.font-family
	 * @property {String}
	 */
	font-family: '',
	/**
	 * Get the the font family
	 * @alias Titanium.UI.ButtonBar.getFont-family
	 * @return {String}
	 */
	getFont-family: function () { return font-family; },
	/**
	 * Set the the font family
	 * @param {String} value New value to set.
	 * @alias Titanium.UI.ButtonBar.setFont-family
	 */
	setFont-family: function () { },
	/**
	 * the font size
	 * @alias Titanium.UI.ButtonBar.font-size
	 * @property {String}
	 */
	font-size: '',
	/**
	 * Get the the font size
	 * @alias Titanium.UI.ButtonBar.getFont-size
	 * @return {String}
	 */
	getFont-size: function () { return font-size; },
	/**
	 * Set the the font size
	 * @param {String} value New value to set.
	 * @alias Titanium.UI.ButtonBar.setFont-size
	 */
	setFont-size: function () { },
	/**
	 * the font style, either normal or italics
	 * @alias Titanium.UI.ButtonBar.font-style
	 * @property {String}
	 */
	font-style: '',
	/**
	 * Get the the font style, either normal or italics
	 * @alias Titanium.UI.ButtonBar.getFont-style
	 * @return {String}
	 */
	getFont-style: function () { return font-style; },
	/**
	 * Set the the font style, either normal or italics
	 * @param {String} value New value to set.
	 * @alias Titanium.UI.ButtonBar.setFont-style
	 */
	setFont-style: function () { },
	/**
	 * the font weight, either normal or bold
	 * @alias Titanium.UI.ButtonBar.font-weight
	 * @property {String}
	 */
	font-weight: '',
	/**
	 * Get the the font weight, either normal or bold
	 * @alias Titanium.UI.ButtonBar.getFont-weight
	 * @return {String}
	 */
	getFont-weight: function () { return font-weight; },
	/**
	 * Set the the font weight, either normal or bold
	 * @param {String} value New value to set.
	 * @alias Titanium.UI.ButtonBar.setFont-weight
	 */
	setFont-weight: function () { },
	/**
	 * property for the view height. Can be either a float value or a dimension string ie 'auto' (default), '50%' (iPhone only).
	 * @alias Titanium.UI.ButtonBar.height
	 * @property {Float,String}
	 */
	height: 0.0,
	/**
	 * Get the property for the view height. Can be either a float value or a dimension string ie 'auto' (default), '50%' (iPhone only).
	 * @alias Titanium.UI.ButtonBar.getHeight
	 * @return {Float,String}
	 */
	getHeight: function () { return height; },
	/**
	 * Set the property for the view height. Can be either a float value or a dimension string ie 'auto' (default), '50%' (iPhone only).
	 * @param {Float,String} value New value to set.
	 * @alias Titanium.UI.ButtonBar.setHeight
	 */
	setHeight: function () { },
	/**
	 * the selected index
	 * @alias Titanium.UI.ButtonBar.index
	 * @property {Integer}
	 */
	index: 0,
	/**
	 * Get the the selected index
	 * @alias Titanium.UI.ButtonBar.getIndex
	 * @return {Integer}
	 */
	getIndex: function () { return index; },
	/**
	 * Set the the selected index
	 * @param {Integer} value New value to set.
	 * @alias Titanium.UI.ButtonBar.setIndex
	 */
	setIndex: function () { },
	/**
	 * the array of labels for the button bar. each object should have the properties title, image, width and enabled.
	 * @alias Titanium.UI.ButtonBar.labels
	 * @property {Array}
	 */
	labels: [],
	/**
	 * Get the the array of labels for the button bar. each object should have the properties title, image, width and enabled.
	 * @alias Titanium.UI.ButtonBar.getLabels
	 * @return {Array}
	 */
	getLabels: function () { return labels; },
	/**
	 * Set the the array of labels for the button bar. each object should have the properties title, image, width and enabled.
	 * @param {Array} value New value to set.
	 * @alias Titanium.UI.ButtonBar.setLabels
	 */
	setLabels: function () { },
	/**
	 * property for the view left position. This position is relative to the view's parent. Can be either a float value or a dimension string ie 'auto' (default), '50%' (iPhone only).
	 * @alias Titanium.UI.ButtonBar.left
	 * @property {Float,String}
	 */
	left: 0.0,
	/**
	 * Get the property for the view left position. This position is relative to the view's parent. Can be either a float value or a dimension string ie 'auto' (default), '50%' (iPhone only).
	 * @alias Titanium.UI.ButtonBar.getLeft
	 * @return {Float,String}
	 */
	getLeft: function () { return left; },
	/**
	 * Set the property for the view left position. This position is relative to the view's parent. Can be either a float value or a dimension string ie 'auto' (default), '50%' (iPhone only).
	 * @param {Float,String} value New value to set.
	 * @alias Titanium.UI.ButtonBar.setLeft
	 */
	setLeft: function () { },
	/**
	 * the opacity from 0.0-1.0
	 * @alias Titanium.UI.ButtonBar.opacity
	 * @property {Float}
	 */
	opacity: 0.0,
	/**
	 * Get the the opacity from 0.0-1.0
	 * @alias Titanium.UI.ButtonBar.getOpacity
	 * @return {Float}
	 */
	getOpacity: function () { return opacity; },
	/**
	 * Set the the opacity from 0.0-1.0
	 * @param {Float} value New value to set.
	 * @alias Titanium.UI.ButtonBar.setOpacity
	 */
	setOpacity: function () { },
	/**
	 * property for the view right position. This position is relative to the view's parent. Can be either a float value or a dimension string ie 'auto' (default), '50%' (iPhone only).
	 * @alias Titanium.UI.ButtonBar.right
	 * @property {Float,String}
	 */
	right: 0.0,
	/**
	 * Get the property for the view right position. This position is relative to the view's parent. Can be either a float value or a dimension string ie 'auto' (default), '50%' (iPhone only).
	 * @alias Titanium.UI.ButtonBar.getRight
	 * @return {Float,String}
	 */
	getRight: function () { return right; },
	/**
	 * Set the property for the view right position. This position is relative to the view's parent. Can be either a float value or a dimension string ie 'auto' (default), '50%' (iPhone only).
	 * @param {Float,String} value New value to set.
	 * @alias Titanium.UI.ButtonBar.setRight
	 */
	setRight: function () { },
	/**
	 * the size of the view as a dictionary of width and height properties
	 * @alias Titanium.UI.ButtonBar.size
	 * @property {Object}
	 */
	size: {},
	/**
	 * Get the the size of the view as a dictionary of width and height properties
	 * @alias Titanium.UI.ButtonBar.getSize
	 * @return {Object}
	 */
	getSize: function () { return size; },
	/**
	 * Set the the size of the view as a dictionary of width and height properties
	 * @param {Object} value New value to set.
	 * @alias Titanium.UI.ButtonBar.setSize
	 */
	setSize: function () { },
	/**
	 * One of Titanium.UI.Android.SOFT_KEYBOARD_DEFAULT_ON_FOCUS, Titanium.UI.Android.SOFT_KEYBOARD_HIDE_ON_FOCUS, or Titanium.UI.Android.SOFT_KEYBOARD_SHOW_ON_FOCUS. (Android only)
	 * @alias Titanium.UI.ButtonBar.softKeyboardOnFocus
	 * @property {Integer}
	 */
	softKeyboardOnFocus: 0,
	/**
	 * Get the One of Titanium.UI.Android.SOFT_KEYBOARD_DEFAULT_ON_FOCUS, Titanium.UI.Android.SOFT_KEYBOARD_HIDE_ON_FOCUS, or Titanium.UI.Android.SOFT_KEYBOARD_SHOW_ON_FOCUS. (Android only)
	 * @alias Titanium.UI.ButtonBar.getSoftKeyboardOnFocus
	 * @return {Integer}
	 */
	getSoftKeyboardOnFocus: function () { return softKeyboardOnFocus; },
	/**
	 * Set the One of Titanium.UI.Android.SOFT_KEYBOARD_DEFAULT_ON_FOCUS, Titanium.UI.Android.SOFT_KEYBOARD_HIDE_ON_FOCUS, or Titanium.UI.Android.SOFT_KEYBOARD_SHOW_ON_FOCUS. (Android only)
	 * @param {Integer} value New value to set.
	 * @alias Titanium.UI.ButtonBar.setSoftKeyboardOnFocus
	 */
	setSoftKeyboardOnFocus: function () { },
	/**
	 * the style of the button bar
	 * @alias Titanium.UI.ButtonBar.style
	 * @property {Integer}
	 */
	style: 0,
	/**
	 * Get the the style of the button bar
	 * @alias Titanium.UI.ButtonBar.getStyle
	 * @return {Integer}
	 */
	getStyle: function () { return style; },
	/**
	 * Set the the style of the button bar
	 * @param {Integer} value New value to set.
	 * @alias Titanium.UI.ButtonBar.setStyle
	 */
	setStyle: function () { },
	/**
	 * property for the view top position. This position is relative to the view's parent. Can be either a float value or a dimension string ie 'auto' (default), '50%' (iPhone only).
	 * @alias Titanium.UI.ButtonBar.top
	 * @property {Float,String}
	 */
	top: 0.0,
	/**
	 * Get the property for the view top position. This position is relative to the view's parent. Can be either a float value or a dimension string ie 'auto' (default), '50%' (iPhone only).
	 * @alias Titanium.UI.ButtonBar.getTop
	 * @return {Float,String}
	 */
	getTop: function () { return top; },
	/**
	 * Set the property for the view top position. This position is relative to the view's parent. Can be either a float value or a dimension string ie 'auto' (default), '50%' (iPhone only).
	 * @param {Float,String} value New value to set.
	 * @alias Titanium.UI.ButtonBar.setTop
	 */
	setTop: function () { },
	/**
	 * a boolean indicating if the view should receive touch events (true, default) or forward them to peers (false)
	 * @alias Titanium.UI.ButtonBar.touchEnabled
	 * @property {Boolean}
	 */
	touchEnabled: false,
	/**
	 * Get the a boolean indicating if the view should receive touch events (true, default) or forward them to peers (false)
	 * @alias Titanium.UI.ButtonBar.getTouchEnabled
	 * @return {Boolean}
	 */
	getTouchEnabled: function () { return touchEnabled; },
	/**
	 * Set the a boolean indicating if the view should receive touch events (true, default) or forward them to peers (false)
	 * @param {Boolean} value New value to set.
	 * @alias Titanium.UI.ButtonBar.setTouchEnabled
	 */
	setTouchEnabled: function () { },
	/**
	 * the transformation matrix to apply to the view
	 * @alias Titanium.UI.ButtonBar.transform
	 * @property {Object}
	 */
	transform: {},
	/**
	 * Get the the transformation matrix to apply to the view
	 * @alias Titanium.UI.ButtonBar.getTransform
	 * @return {Object}
	 */
	getTransform: function () { return transform; },
	/**
	 * Set the the transformation matrix to apply to the view
	 * @param {Object} value New value to set.
	 * @alias Titanium.UI.ButtonBar.setTransform
	 */
	setTransform: function () { },
	/**
	 * a boolean of the visibility of the view
	 * @alias Titanium.UI.ButtonBar.visible
	 * @property {Boolean}
	 */
	visible: false,
	/**
	 * Get the a boolean of the visibility of the view
	 * @alias Titanium.UI.ButtonBar.getVisible
	 * @return {Boolean}
	 */
	getVisible: function () { return visible; },
	/**
	 * Set the a boolean of the visibility of the view
	 * @param {Boolean} value New value to set.
	 * @alias Titanium.UI.ButtonBar.setVisible
	 */
	setVisible: function () { },
	/**
	 * property for the view width. Can be either a float value or a dimension string ie 'auto' (default), '50%' (iPhone only).
	 * @alias Titanium.UI.ButtonBar.width
	 * @property {Float,String}
	 */
	width: 0.0,
	/**
	 * Get the property for the view width. Can be either a float value or a dimension string ie 'auto' (default), '50%' (iPhone only).
	 * @alias Titanium.UI.ButtonBar.getWidth
	 * @return {Float,String}
	 */
	getWidth: function () { return width; },
	/**
	 * Set the property for the view width. Can be either a float value or a dimension string ie 'auto' (default), '50%' (iPhone only).
	 * @param {Float,String} value New value to set.
	 * @alias Titanium.UI.ButtonBar.setWidth
	 */
	setWidth: function () { },
	/**
	 * the z index position relative to other sibling views
	 * @alias Titanium.UI.ButtonBar.zIndex
	 * @property {Integer}
	 */
	zIndex: 0,
	/**
	 * Get the the z index position relative to other sibling views
	 * @alias Titanium.UI.ButtonBar.getZIndex
	 * @return {Integer}
	 */
	getZIndex: function () { return zIndex; },
	/**
	 * Set the the z index position relative to other sibling views
	 * @param {Integer} value New value to set.
	 * @alias Titanium.UI.ButtonBar.setZIndex
	 */
	setZIndex: function () { },
	/**
	 * add a child to the view hierarchy
	 * @param {Object} view the view to add to this views hiearchy
	 * @alias Titanium.UI.ButtonBar.add
	 */
	add: function (view) { },
	/**
	 * add an event listener for the instance to receive view triggered events
	 * @param {String} name name of the event
	 * @param {Function} callback callback function to invoke when the event is fired
	 * @alias Titanium.UI.ButtonBar.addEventListener
	 */
	addEventListener: function (name,callback) { },
	/**
	 * animate the view
	 * @param {Object} obj either a dictionary of animation properties or an Animation object
	 * @param {Function} callback function to be invoked upon completion of the animation
	 * @alias Titanium.UI.ButtonBar.animate
	 */
	animate: function (obj,callback) { },
	/**
	 * fire a synthesized event to the views listener
	 * @param {String} name name of the event
	 * @param {Object} event event object
	 * @alias Titanium.UI.ButtonBar.fireEvent
	 */
	fireEvent: function (name,event) { },
	/**
	 * hide the view
	 * @alias Titanium.UI.ButtonBar.hide
	 */
	hide: function () { },
	/**
	 * remove a previously add view from the view hiearchy
	 * @param {Object} view the view to remove from this views hiearchy
	 * @alias Titanium.UI.ButtonBar.remove
	 */
	remove: function (view) { },
	/**
	 * remove a previously added event listener
	 * @param {String} name name of the event
	 * @param {Function} callback callback function passed in addEventListener
	 * @alias Titanium.UI.ButtonBar.removeEventListener
	 */
	removeEventListener: function (name,callback) { },
	/**
	 * make the view visible
	 * @alias Titanium.UI.ButtonBar.show
	 */
	show: function () { },
	/**
	 * return a Blob image of the rendered view
	 * @param {Function} f function to be invoked upon completion. if non-null, this method will be performed asynchronously. if null, it will be performed immediately
	 * @alias Titanium.UI.ButtonBar.toImage
	 * @return {Object}
	 */
	toImage: function (f) { return {}; },
};

/**
 * A module used for accessing clipboard data.
 * @since 1.5
 */
Titanium.UI.Clipboard = {
	/**
	 * add an event listener for the instance to receive view triggered events
	 * @param {String} name name of the event
	 * @param {Function} callback callback function to invoke when the event is fired
	 * @alias Titanium.UI.Clipboard.addEventListener
	 */
	addEventListener: function (name,callback) { },
	/**
	 * Clear data of the given mime-type from the clipboard. If no mime-type is given, clear all data from the clipboard.
	 * @param {String} [type] (optional) The mime-type of the data to clear.
	 * @alias Titanium.UI.Clipboard.clearData
	 */
	clearData: function (type) { },
	/**
	 * Clear the text portion of the clipboard.
	 * @alias Titanium.UI.Clipboard.clearText
	 */
	clearText: function () { },
	/**
	 * fire a synthesized event to the views listener
	 * @param {String} name name of the event
	 * @param {Object} event event object
	 * @alias Titanium.UI.Clipboard.fireEvent
	 */
	fireEvent: function (name,event) { },
	/**
	 * Get the data on the clipboard from the portion which contains data of the given mime-type.
	 * @param {String} type The mime-type of the data to get.
	 * @alias Titanium.UI.Clipboard.getData
	 */
	getData: function (type) { },
	/**
	 * Get the current text on the clipboard.
	 * @alias Titanium.UI.Clipboard.getText
	 */
	getText: function () { },
	/**
	 * Return true if there is any content of the given mime-type on the clipboard.
	 * @param {String} [type] (optional) The mime-type of the data to check.
	 * @alias Titanium.UI.Clipboard.hasData
	 */
	hasData: function (type) { },
	/**
	 * Return true if there is any content in the text portion of the clipboard.
	 * @alias Titanium.UI.Clipboard.hasText
	 */
	hasText: function () { },
	/**
	 * remove a previously added event listener
	 * @param {String} name name of the event
	 * @param {Function} callback callback function passed in addEventListener
	 * @alias Titanium.UI.Clipboard.removeEventListener
	 */
	removeEventListener: function (name,callback) { },
	/**
	 * Set the data on the clipboard given a mime-type and the new data. This method will set data on the appropriate portion of the clipboard for the given mime-type.
	 * @param {String} type The mime-type of the data to set.
	 * @param {Object} data The new clipboard text.
	 * @alias Titanium.UI.Clipboard.setData
	 */
	setData: function (type,data) { },
	/**
	 * Set the text on the clipboard. This will overwrite the current contents of the clipboard.
	 * @param {String} text The new clipboard text. If the text is an empty string
	 * @alias Titanium.UI.Clipboard.setText
	 */
	setText: function (text) { },
};

/**
 * The Cover Flow view is container for showing  animated, three dimensional images in a nice UI. The Cover Flow view is created by the method Titanium.UI.createCoverFlowView.
 * @since 0.8
 */
Titanium.UI.CoverFlowView = {
	/**
	 * a dictionary with properties x and y to indicate the anchor point value. anchor specifies the position by which animation should occur. center is 0.5, 0.5
	 * @alias Titanium.UI.CoverFlowView.anchorPoint
	 * @property {Object}
	 */
	anchorPoint: {},
	/**
	 * Get the a dictionary with properties x and y to indicate the anchor point value. anchor specifies the position by which animation should occur. center is 0.5, 0.5
	 * @alias Titanium.UI.CoverFlowView.getAnchorPoint
	 * @return {Object}
	 */
	getAnchorPoint: function () { return anchorPoint; },
	/**
	 * Set the a dictionary with properties x and y to indicate the anchor point value. anchor specifies the position by which animation should occur. center is 0.5, 0.5
	 * @param {Object} value New value to set.
	 * @alias Titanium.UI.CoverFlowView.setAnchorPoint
	 */
	setAnchorPoint: function () { },
	/**
	 * read-only object with x and y properties of where the view is during animation
	 * @alias Titanium.UI.CoverFlowView.animatedCenterPoint
	 * @property {Object}
	 */
	animatedCenterPoint: {},
	/**
	 * Get the read-only object with x and y properties of where the view is during animation
	 * @alias Titanium.UI.CoverFlowView.getAnimatedCenterPoint
	 * @return {Object}
	 */
	getAnimatedCenterPoint: function () { return animatedCenterPoint; },
	/**
	 * Set the read-only object with x and y properties of where the view is during animation
	 * @param {Object} value New value to set.
	 * @alias Titanium.UI.CoverFlowView.setAnimatedCenterPoint
	 */
	setAnimatedCenterPoint: function () { },
	/**
	 * the background color of the view
	 * @alias Titanium.UI.CoverFlowView.backgroundColor
	 * @property {String}
	 */
	backgroundColor: '',
	/**
	 * Get the the background color of the view
	 * @alias Titanium.UI.CoverFlowView.getBackgroundColor
	 * @return {String}
	 */
	getBackgroundColor: function () { return backgroundColor; },
	/**
	 * Set the the background color of the view
	 * @param {String} value New value to set.
	 * @alias Titanium.UI.CoverFlowView.setBackgroundColor
	 */
	setBackgroundColor: function () { },
	/**
	 * the disabled background color of the view. (Android)
	 * @alias Titanium.UI.CoverFlowView.backgroundDisabledColor
	 * @property {String}
	 */
	backgroundDisabledColor: '',
	/**
	 * Get the the disabled background color of the view. (Android)
	 * @alias Titanium.UI.CoverFlowView.getBackgroundDisabledColor
	 * @return {String}
	 */
	getBackgroundDisabledColor: function () { return backgroundDisabledColor; },
	/**
	 * Set the the disabled background color of the view. (Android)
	 * @param {String} value New value to set.
	 * @alias Titanium.UI.CoverFlowView.setBackgroundDisabledColor
	 */
	setBackgroundDisabledColor: function () { },
	/**
	 * the disabled background image url of the view. (Android)
	 * @alias Titanium.UI.CoverFlowView.backgroundDisabledImage
	 * @property {String}
	 */
	backgroundDisabledImage: '',
	/**
	 * Get the the disabled background image url of the view. (Android)
	 * @alias Titanium.UI.CoverFlowView.getBackgroundDisabledImage
	 * @return {String}
	 */
	getBackgroundDisabledImage: function () { return backgroundDisabledImage; },
	/**
	 * Set the the disabled background image url of the view. (Android)
	 * @param {String} value New value to set.
	 * @alias Titanium.UI.CoverFlowView.setBackgroundDisabledImage
	 */
	setBackgroundDisabledImage: function () { },
	/**
	 * the focused background color of the view. focusable must be true for normal views. (Android)
	 * @alias Titanium.UI.CoverFlowView.backgroundFocusedColor
	 * @property {String}
	 */
	backgroundFocusedColor: '',
	/**
	 * Get the the focused background color of the view. focusable must be true for normal views. (Android)
	 * @alias Titanium.UI.CoverFlowView.getBackgroundFocusedColor
	 * @return {String}
	 */
	getBackgroundFocusedColor: function () { return backgroundFocusedColor; },
	/**
	 * Set the the focused background color of the view. focusable must be true for normal views. (Android)
	 * @param {String} value New value to set.
	 * @alias Titanium.UI.CoverFlowView.setBackgroundFocusedColor
	 */
	setBackgroundFocusedColor: function () { },
	/**
	 * the focused background image url of the view. focusable must be true for normal views. (Android)
	 * @alias Titanium.UI.CoverFlowView.backgroundFocusedImage
	 * @property {String}
	 */
	backgroundFocusedImage: '',
	/**
	 * Get the the focused background image url of the view. focusable must be true for normal views. (Android)
	 * @alias Titanium.UI.CoverFlowView.getBackgroundFocusedImage
	 * @return {String}
	 */
	getBackgroundFocusedImage: function () { return backgroundFocusedImage; },
	/**
	 * Set the the focused background image url of the view. focusable must be true for normal views. (Android)
	 * @param {String} value New value to set.
	 * @alias Titanium.UI.CoverFlowView.setBackgroundFocusedImage
	 */
	setBackgroundFocusedImage: function () { },
	/**
	 * a background gradient for the view with the properties: type,startPoint,endPoint,startRadius,endRadius,backfillStart,backfillEnd,colors.
	 * @alias Titanium.UI.CoverFlowView.backgroundGradient
	 * @property {Object}
	 */
	backgroundGradient: {},
	/**
	 * Get the a background gradient for the view with the properties: type,startPoint,endPoint,startRadius,endRadius,backfillStart,backfillEnd,colors.
	 * @alias Titanium.UI.CoverFlowView.getBackgroundGradient
	 * @return {Object}
	 */
	getBackgroundGradient: function () { return backgroundGradient; },
	/**
	 * Set the a background gradient for the view with the properties: type,startPoint,endPoint,startRadius,endRadius,backfillStart,backfillEnd,colors.
	 * @param {Object} value New value to set.
	 * @alias Titanium.UI.CoverFlowView.setBackgroundGradient
	 */
	setBackgroundGradient: function () { },
	/**
	 * the background image url of the view
	 * @alias Titanium.UI.CoverFlowView.backgroundImage
	 * @property {String}
	 */
	backgroundImage: '',
	/**
	 * Get the the background image url of the view
	 * @alias Titanium.UI.CoverFlowView.getBackgroundImage
	 * @return {String}
	 */
	getBackgroundImage: function () { return backgroundImage; },
	/**
	 * Set the the background image url of the view
	 * @param {String} value New value to set.
	 * @alias Titanium.UI.CoverFlowView.setBackgroundImage
	 */
	setBackgroundImage: function () { },
	/**
	 * End caps specify the portion of an image that should not be resized when an image is stretched. This technique is used to implement buttons and other resizable image-based interface elements. When a button with end caps is resized, the resizing occurs only in the middle of the button, in the region between the end caps. The end caps themselves keep their original size and appearance. This property specifies the size of the left end cap. The middle (stretchable) portion is assumed to be 1 pixel wide. The right end cap is therefore computed by adding the size of the left end cap and the middle portion together and then subtracting that value from the width of the image
	 * @alias Titanium.UI.CoverFlowView.backgroundLeftCap
	 * @property {Float}
	 */
	backgroundLeftCap: 0.0,
	/**
	 * Get the End caps specify the portion of an image that should not be resized when an image is stretched. This technique is used to implement buttons and other resizable image-based interface elements. When a button with end caps is resized, the resizing occurs only in the middle of the button, in the region between the end caps. The end caps themselves keep their original size and appearance. This property specifies the size of the left end cap. The middle (stretchable) portion is assumed to be 1 pixel wide. The right end cap is therefore computed by adding the size of the left end cap and the middle portion together and then subtracting that value from the width of the image
	 * @alias Titanium.UI.CoverFlowView.getBackgroundLeftCap
	 * @return {Float}
	 */
	getBackgroundLeftCap: function () { return backgroundLeftCap; },
	/**
	 * Set the End caps specify the portion of an image that should not be resized when an image is stretched. This technique is used to implement buttons and other resizable image-based interface elements. When a button with end caps is resized, the resizing occurs only in the middle of the button, in the region between the end caps. The end caps themselves keep their original size and appearance. This property specifies the size of the left end cap. The middle (stretchable) portion is assumed to be 1 pixel wide. The right end cap is therefore computed by adding the size of the left end cap and the middle portion together and then subtracting that value from the width of the image
	 * @param {Float} value New value to set.
	 * @alias Titanium.UI.CoverFlowView.setBackgroundLeftCap
	 */
	setBackgroundLeftCap: function () { },
	/**
	 * the selected background color of the view. focusable must be true for normal views. (Android)
	 * @alias Titanium.UI.CoverFlowView.backgroundSelectedColor
	 * @property {String}
	 */
	backgroundSelectedColor: '',
	/**
	 * Get the the selected background color of the view. focusable must be true for normal views. (Android)
	 * @alias Titanium.UI.CoverFlowView.getBackgroundSelectedColor
	 * @return {String}
	 */
	getBackgroundSelectedColor: function () { return backgroundSelectedColor; },
	/**
	 * Set the the selected background color of the view. focusable must be true for normal views. (Android)
	 * @param {String} value New value to set.
	 * @alias Titanium.UI.CoverFlowView.setBackgroundSelectedColor
	 */
	setBackgroundSelectedColor: function () { },
	/**
	 * the selected background image url of the view. focusable must be true for normal views. (Android)
	 * @alias Titanium.UI.CoverFlowView.backgroundSelectedImage
	 * @property {String}
	 */
	backgroundSelectedImage: '',
	/**
	 * Get the the selected background image url of the view. focusable must be true for normal views. (Android)
	 * @alias Titanium.UI.CoverFlowView.getBackgroundSelectedImage
	 * @return {String}
	 */
	getBackgroundSelectedImage: function () { return backgroundSelectedImage; },
	/**
	 * Set the the selected background image url of the view. focusable must be true for normal views. (Android)
	 * @param {String} value New value to set.
	 * @alias Titanium.UI.CoverFlowView.setBackgroundSelectedImage
	 */
	setBackgroundSelectedImage: function () { },
	/**
	 * End caps specify the portion of an image that should not be resized when an image is stretched. This technique is used to implement buttons and other resizable image-based interface elements. When a button with end caps is resized, the resizing occurs only in the middle of the button, in the region between the end caps. The end caps themselves keep their original size and appearance. This property specifies the size of the top end cap. The middle (stretchable) portion is assumed to be 1 pixel wide. The bottom end cap is therefore computed by adding the size of the top end cap and the middle portion together and then subtracting that value from the height of the image
	 * @alias Titanium.UI.CoverFlowView.backgroundTopCap
	 * @property {Float}
	 */
	backgroundTopCap: 0.0,
	/**
	 * Get the End caps specify the portion of an image that should not be resized when an image is stretched. This technique is used to implement buttons and other resizable image-based interface elements. When a button with end caps is resized, the resizing occurs only in the middle of the button, in the region between the end caps. The end caps themselves keep their original size and appearance. This property specifies the size of the top end cap. The middle (stretchable) portion is assumed to be 1 pixel wide. The bottom end cap is therefore computed by adding the size of the top end cap and the middle portion together and then subtracting that value from the height of the image
	 * @alias Titanium.UI.CoverFlowView.getBackgroundTopCap
	 * @return {Float}
	 */
	getBackgroundTopCap: function () { return backgroundTopCap; },
	/**
	 * Set the End caps specify the portion of an image that should not be resized when an image is stretched. This technique is used to implement buttons and other resizable image-based interface elements. When a button with end caps is resized, the resizing occurs only in the middle of the button, in the region between the end caps. The end caps themselves keep their original size and appearance. This property specifies the size of the top end cap. The middle (stretchable) portion is assumed to be 1 pixel wide. The bottom end cap is therefore computed by adding the size of the top end cap and the middle portion together and then subtracting that value from the height of the image
	 * @param {Float} value New value to set.
	 * @alias Titanium.UI.CoverFlowView.setBackgroundTopCap
	 */
	setBackgroundTopCap: function () { },
	/**
	 * the border color of the view
	 * @alias Titanium.UI.CoverFlowView.borderColor
	 * @property {String}
	 */
	borderColor: '',
	/**
	 * Get the the border color of the view
	 * @alias Titanium.UI.CoverFlowView.getBorderColor
	 * @return {String}
	 */
	getBorderColor: function () { return borderColor; },
	/**
	 * Set the the border color of the view
	 * @param {String} value New value to set.
	 * @alias Titanium.UI.CoverFlowView.setBorderColor
	 */
	setBorderColor: function () { },
	/**
	 * the border radius of the view
	 * @alias Titanium.UI.CoverFlowView.borderRadius
	 * @property {Float}
	 */
	borderRadius: 0.0,
	/**
	 * Get the the border radius of the view
	 * @alias Titanium.UI.CoverFlowView.getBorderRadius
	 * @return {Float}
	 */
	getBorderRadius: function () { return borderRadius; },
	/**
	 * Set the the border radius of the view
	 * @param {Float} value New value to set.
	 * @alias Titanium.UI.CoverFlowView.setBorderRadius
	 */
	setBorderRadius: function () { },
	/**
	 * the border width of the view
	 * @alias Titanium.UI.CoverFlowView.borderWidth
	 * @property {Float}
	 */
	borderWidth: 0.0,
	/**
	 * Get the the border width of the view
	 * @alias Titanium.UI.CoverFlowView.getBorderWidth
	 * @return {Float}
	 */
	getBorderWidth: function () { return borderWidth; },
	/**
	 * Set the the border width of the view
	 * @param {Float} value New value to set.
	 * @alias Titanium.UI.CoverFlowView.setBorderWidth
	 */
	setBorderWidth: function () { },
	/**
	 * property for the view bottom position. This position is relative to the view's parent. Can be either a float value or a dimension string ie 'auto' (default), '50%' (iPhone only).
	 * @alias Titanium.UI.CoverFlowView.bottom
	 * @property {Float,String}
	 */
	bottom: 0.0,
	/**
	 * Get the property for the view bottom position. This position is relative to the view's parent. Can be either a float value or a dimension string ie 'auto' (default), '50%' (iPhone only).
	 * @alias Titanium.UI.CoverFlowView.getBottom
	 * @return {Float,String}
	 */
	getBottom: function () { return bottom; },
	/**
	 * Set the property for the view bottom position. This position is relative to the view's parent. Can be either a float value or a dimension string ie 'auto' (default), '50%' (iPhone only).
	 * @param {Float,String} value New value to set.
	 * @alias Titanium.UI.CoverFlowView.setBottom
	 */
	setBottom: function () { },
	/**
	 * a dictionary with properties x and y to indicate the center of the views position relative to the parent view
	 * @alias Titanium.UI.CoverFlowView.center
	 * @property {Object}
	 */
	center: {},
	/**
	 * Get the a dictionary with properties x and y to indicate the center of the views position relative to the parent view
	 * @alias Titanium.UI.CoverFlowView.getCenter
	 * @return {Object}
	 */
	getCenter: function () { return center; },
	/**
	 * Set the a dictionary with properties x and y to indicate the center of the views position relative to the parent view
	 * @param {Object} value New value to set.
	 * @alias Titanium.UI.CoverFlowView.setCenter
	 */
	setCenter: function () { },
	/**
	 * Set true if you want a view to be focusable when navigating with the trackball or D-Pad. Default: false. (Android Only)
	 * @alias Titanium.UI.CoverFlowView.focusable
	 * @property {Boolean}
	 */
	focusable: false,
	/**
	 * Get the Set true if you want a view to be focusable when navigating with the trackball or D-Pad. Default: false. (Android Only)
	 * @alias Titanium.UI.CoverFlowView.getFocusable
	 * @return {Boolean}
	 */
	getFocusable: function () { return focusable; },
	/**
	 * Set the Set true if you want a view to be focusable when navigating with the trackball or D-Pad. Default: false. (Android Only)
	 * @param {Boolean} value New value to set.
	 * @alias Titanium.UI.CoverFlowView.setFocusable
	 */
	setFocusable: function () { },
	/**
	 * the font family
	 * @alias Titanium.UI.CoverFlowView.font-family
	 * @property {String}
	 */
	font-family: '',
	/**
	 * Get the the font family
	 * @alias Titanium.UI.CoverFlowView.getFont-family
	 * @return {String}
	 */
	getFont-family: function () { return font-family; },
	/**
	 * Set the the font family
	 * @param {String} value New value to set.
	 * @alias Titanium.UI.CoverFlowView.setFont-family
	 */
	setFont-family: function () { },
	/**
	 * the font size
	 * @alias Titanium.UI.CoverFlowView.font-size
	 * @property {String}
	 */
	font-size: '',
	/**
	 * Get the the font size
	 * @alias Titanium.UI.CoverFlowView.getFont-size
	 * @return {String}
	 */
	getFont-size: function () { return font-size; },
	/**
	 * Set the the font size
	 * @param {String} value New value to set.
	 * @alias Titanium.UI.CoverFlowView.setFont-size
	 */
	setFont-size: function () { },
	/**
	 * the font style, either normal or italics
	 * @alias Titanium.UI.CoverFlowView.font-style
	 * @property {String}
	 */
	font-style: '',
	/**
	 * Get the the font style, either normal or italics
	 * @alias Titanium.UI.CoverFlowView.getFont-style
	 * @return {String}
	 */
	getFont-style: function () { return font-style; },
	/**
	 * Set the the font style, either normal or italics
	 * @param {String} value New value to set.
	 * @alias Titanium.UI.CoverFlowView.setFont-style
	 */
	setFont-style: function () { },
	/**
	 * the font weight, either normal or bold
	 * @alias Titanium.UI.CoverFlowView.font-weight
	 * @property {String}
	 */
	font-weight: '',
	/**
	 * Get the the font weight, either normal or bold
	 * @alias Titanium.UI.CoverFlowView.getFont-weight
	 * @return {String}
	 */
	getFont-weight: function () { return font-weight; },
	/**
	 * Set the the font weight, either normal or bold
	 * @param {String} value New value to set.
	 * @alias Titanium.UI.CoverFlowView.setFont-weight
	 */
	setFont-weight: function () { },
	/**
	 * property for the view height. Can be either a float value or a dimension string ie 'auto' (default), '50%' (iPhone only).
	 * @alias Titanium.UI.CoverFlowView.height
	 * @property {Float,String}
	 */
	height: 0.0,
	/**
	 * Get the property for the view height. Can be either a float value or a dimension string ie 'auto' (default), '50%' (iPhone only).
	 * @alias Titanium.UI.CoverFlowView.getHeight
	 * @return {Float,String}
	 */
	getHeight: function () { return height; },
	/**
	 * Set the property for the view height. Can be either a float value or a dimension string ie 'auto' (default), '50%' (iPhone only).
	 * @param {Float,String} value New value to set.
	 * @alias Titanium.UI.CoverFlowView.setHeight
	 */
	setHeight: function () { },
	/**
	 * array of images to display in the view
	 * @alias Titanium.UI.CoverFlowView.images
	 * @property {Array}
	 */
	images: [],
	/**
	 * Get the array of images to display in the view
	 * @alias Titanium.UI.CoverFlowView.getImages
	 * @return {Array}
	 */
	getImages: function () { return images; },
	/**
	 * Set the array of images to display in the view
	 * @param {Array} value New value to set.
	 * @alias Titanium.UI.CoverFlowView.setImages
	 */
	setImages: function () { },
	/**
	 * property for the view left position. This position is relative to the view's parent. Can be either a float value or a dimension string ie 'auto' (default), '50%' (iPhone only).
	 * @alias Titanium.UI.CoverFlowView.left
	 * @property {Float,String}
	 */
	left: 0.0,
	/**
	 * Get the property for the view left position. This position is relative to the view's parent. Can be either a float value or a dimension string ie 'auto' (default), '50%' (iPhone only).
	 * @alias Titanium.UI.CoverFlowView.getLeft
	 * @return {Float,String}
	 */
	getLeft: function () { return left; },
	/**
	 * Set the property for the view left position. This position is relative to the view's parent. Can be either a float value or a dimension string ie 'auto' (default), '50%' (iPhone only).
	 * @param {Float,String} value New value to set.
	 * @alias Titanium.UI.CoverFlowView.setLeft
	 */
	setLeft: function () { },
	/**
	 * the opacity from 0.0-1.0
	 * @alias Titanium.UI.CoverFlowView.opacity
	 * @property {Float}
	 */
	opacity: 0.0,
	/**
	 * Get the the opacity from 0.0-1.0
	 * @alias Titanium.UI.CoverFlowView.getOpacity
	 * @return {Float}
	 */
	getOpacity: function () { return opacity; },
	/**
	 * Set the the opacity from 0.0-1.0
	 * @param {Float} value New value to set.
	 * @alias Titanium.UI.CoverFlowView.setOpacity
	 */
	setOpacity: function () { },
	/**
	 * property for the view right position. This position is relative to the view's parent. Can be either a float value or a dimension string ie 'auto' (default), '50%' (iPhone only).
	 * @alias Titanium.UI.CoverFlowView.right
	 * @property {Float,String}
	 */
	right: 0.0,
	/**
	 * Get the property for the view right position. This position is relative to the view's parent. Can be either a float value or a dimension string ie 'auto' (default), '50%' (iPhone only).
	 * @alias Titanium.UI.CoverFlowView.getRight
	 * @return {Float,String}
	 */
	getRight: function () { return right; },
	/**
	 * Set the property for the view right position. This position is relative to the view's parent. Can be either a float value or a dimension string ie 'auto' (default), '50%' (iPhone only).
	 * @param {Float,String} value New value to set.
	 * @alias Titanium.UI.CoverFlowView.setRight
	 */
	setRight: function () { },
	/**
	 * index to make selected
	 * @alias Titanium.UI.CoverFlowView.selected
	 * @property {Integer}
	 */
	selected: 0,
	/**
	 * Get the index to make selected
	 * @alias Titanium.UI.CoverFlowView.getSelected
	 * @return {Integer}
	 */
	getSelected: function () { return selected; },
	/**
	 * Set the index to make selected
	 * @param {Integer} value New value to set.
	 * @alias Titanium.UI.CoverFlowView.setSelected
	 */
	setSelected: function () { },
	/**
	 * the size of the view as a dictionary of width and height properties
	 * @alias Titanium.UI.CoverFlowView.size
	 * @property {Object}
	 */
	size: {},
	/**
	 * Get the the size of the view as a dictionary of width and height properties
	 * @alias Titanium.UI.CoverFlowView.getSize
	 * @return {Object}
	 */
	getSize: function () { return size; },
	/**
	 * Set the the size of the view as a dictionary of width and height properties
	 * @param {Object} value New value to set.
	 * @alias Titanium.UI.CoverFlowView.setSize
	 */
	setSize: function () { },
	/**
	 * One of Titanium.UI.Android.SOFT_KEYBOARD_DEFAULT_ON_FOCUS, Titanium.UI.Android.SOFT_KEYBOARD_HIDE_ON_FOCUS, or Titanium.UI.Android.SOFT_KEYBOARD_SHOW_ON_FOCUS. (Android only)
	 * @alias Titanium.UI.CoverFlowView.softKeyboardOnFocus
	 * @property {Integer}
	 */
	softKeyboardOnFocus: 0,
	/**
	 * Get the One of Titanium.UI.Android.SOFT_KEYBOARD_DEFAULT_ON_FOCUS, Titanium.UI.Android.SOFT_KEYBOARD_HIDE_ON_FOCUS, or Titanium.UI.Android.SOFT_KEYBOARD_SHOW_ON_FOCUS. (Android only)
	 * @alias Titanium.UI.CoverFlowView.getSoftKeyboardOnFocus
	 * @return {Integer}
	 */
	getSoftKeyboardOnFocus: function () { return softKeyboardOnFocus; },
	/**
	 * Set the One of Titanium.UI.Android.SOFT_KEYBOARD_DEFAULT_ON_FOCUS, Titanium.UI.Android.SOFT_KEYBOARD_HIDE_ON_FOCUS, or Titanium.UI.Android.SOFT_KEYBOARD_SHOW_ON_FOCUS. (Android only)
	 * @param {Integer} value New value to set.
	 * @alias Titanium.UI.CoverFlowView.setSoftKeyboardOnFocus
	 */
	setSoftKeyboardOnFocus: function () { },
	/**
	 * property for the view top position. This position is relative to the view's parent. Can be either a float value or a dimension string ie 'auto' (default), '50%' (iPhone only).
	 * @alias Titanium.UI.CoverFlowView.top
	 * @property {Float,String}
	 */
	top: 0.0,
	/**
	 * Get the property for the view top position. This position is relative to the view's parent. Can be either a float value or a dimension string ie 'auto' (default), '50%' (iPhone only).
	 * @alias Titanium.UI.CoverFlowView.getTop
	 * @return {Float,String}
	 */
	getTop: function () { return top; },
	/**
	 * Set the property for the view top position. This position is relative to the view's parent. Can be either a float value or a dimension string ie 'auto' (default), '50%' (iPhone only).
	 * @param {Float,String} value New value to set.
	 * @alias Titanium.UI.CoverFlowView.setTop
	 */
	setTop: function () { },
	/**
	 * a boolean indicating if the view should receive touch events (true, default) or forward them to peers (false)
	 * @alias Titanium.UI.CoverFlowView.touchEnabled
	 * @property {Boolean}
	 */
	touchEnabled: false,
	/**
	 * Get the a boolean indicating if the view should receive touch events (true, default) or forward them to peers (false)
	 * @alias Titanium.UI.CoverFlowView.getTouchEnabled
	 * @return {Boolean}
	 */
	getTouchEnabled: function () { return touchEnabled; },
	/**
	 * Set the a boolean indicating if the view should receive touch events (true, default) or forward them to peers (false)
	 * @param {Boolean} value New value to set.
	 * @alias Titanium.UI.CoverFlowView.setTouchEnabled
	 */
	setTouchEnabled: function () { },
	/**
	 * the transformation matrix to apply to the view
	 * @alias Titanium.UI.CoverFlowView.transform
	 * @property {Object}
	 */
	transform: {},
	/**
	 * Get the the transformation matrix to apply to the view
	 * @alias Titanium.UI.CoverFlowView.getTransform
	 * @return {Object}
	 */
	getTransform: function () { return transform; },
	/**
	 * Set the the transformation matrix to apply to the view
	 * @param {Object} value New value to set.
	 * @alias Titanium.UI.CoverFlowView.setTransform
	 */
	setTransform: function () { },
	/**
	 * a boolean of the visibility of the view
	 * @alias Titanium.UI.CoverFlowView.visible
	 * @property {Boolean}
	 */
	visible: false,
	/**
	 * Get the a boolean of the visibility of the view
	 * @alias Titanium.UI.CoverFlowView.getVisible
	 * @return {Boolean}
	 */
	getVisible: function () { return visible; },
	/**
	 * Set the a boolean of the visibility of the view
	 * @param {Boolean} value New value to set.
	 * @alias Titanium.UI.CoverFlowView.setVisible
	 */
	setVisible: function () { },
	/**
	 * property for the view width. Can be either a float value or a dimension string ie 'auto' (default), '50%' (iPhone only).
	 * @alias Titanium.UI.CoverFlowView.width
	 * @property {Float,String}
	 */
	width: 0.0,
	/**
	 * Get the property for the view width. Can be either a float value or a dimension string ie 'auto' (default), '50%' (iPhone only).
	 * @alias Titanium.UI.CoverFlowView.getWidth
	 * @return {Float,String}
	 */
	getWidth: function () { return width; },
	/**
	 * Set the property for the view width. Can be either a float value or a dimension string ie 'auto' (default), '50%' (iPhone only).
	 * @param {Float,String} value New value to set.
	 * @alias Titanium.UI.CoverFlowView.setWidth
	 */
	setWidth: function () { },
	/**
	 * the z index position relative to other sibling views
	 * @alias Titanium.UI.CoverFlowView.zIndex
	 * @property {Integer}
	 */
	zIndex: 0,
	/**
	 * Get the the z index position relative to other sibling views
	 * @alias Titanium.UI.CoverFlowView.getZIndex
	 * @return {Integer}
	 */
	getZIndex: function () { return zIndex; },
	/**
	 * Set the the z index position relative to other sibling views
	 * @param {Integer} value New value to set.
	 * @alias Titanium.UI.CoverFlowView.setZIndex
	 */
	setZIndex: function () { },
	/**
	 * add a child to the view hierarchy
	 * @param {Object} view the view to add to this views hiearchy
	 * @alias Titanium.UI.CoverFlowView.add
	 */
	add: function (view) { },
	/**
	 * add an event listener for the instance to receive view triggered events
	 * @param {String} name name of the event
	 * @param {Function} callback callback function to invoke when the event is fired
	 * @alias Titanium.UI.CoverFlowView.addEventListener
	 */
	addEventListener: function (name,callback) { },
	/**
	 * animate the view
	 * @param {Object} obj either a dictionary of animation properties or an Animation object
	 * @param {Function} callback function to be invoked upon completion of the animation
	 * @alias Titanium.UI.CoverFlowView.animate
	 */
	animate: function (obj,callback) { },
	/**
	 * fire a synthesized event to the views listener
	 * @param {String} name name of the event
	 * @param {Object} event event object
	 * @alias Titanium.UI.CoverFlowView.fireEvent
	 */
	fireEvent: function (name,event) { },
	/**
	 * hide the view
	 * @alias Titanium.UI.CoverFlowView.hide
	 */
	hide: function () { },
	/**
	 * remove a previously add view from the view hiearchy
	 * @param {Object} view the view to remove from this views hiearchy
	 * @alias Titanium.UI.CoverFlowView.remove
	 */
	remove: function (view) { },
	/**
	 * remove a previously added event listener
	 * @param {String} name name of the event
	 * @param {Function} callback callback function passed in addEventListener
	 * @alias Titanium.UI.CoverFlowView.removeEventListener
	 */
	removeEventListener: function (name,callback) { },
	/**
	 * change an image for a index
	 * @param {Integer} index index to change
	 * @param {Object} image the image to set the index to. May be a TiBlob, TiFile, URL, or dictionary with 'image' (may be any of TiBlob, TiFile, URL), 'width', 'height' keys.  'auto' is not allowed, only exact sizes (although a size may be omitted to keep the image at that size).  If passed as a TiFile or URL, will perform a check for '@2x' on Retina displays
	 * @alias Titanium.UI.CoverFlowView.setImage
	 */
	setImage: function (index,image) { },
	/**
	 * make the view visible
	 * @alias Titanium.UI.CoverFlowView.show
	 */
	show: function () { },
	/**
	 * return a Blob image of the rendered view
	 * @param {Function} f function to be invoked upon completion. if non-null, this method will be performed asynchronously. if null, it will be performed immediately
	 * @alias Titanium.UI.CoverFlowView.toImage
	 * @return {Object}
	 */
	toImage: function (f) { return {}; },
};

/**
 * An item that represents a visual icon in the Titanium.UI.DashboardView. The Dashboard Item is created by the method Titanium.UI.createDashboardItem.
 * @since 1.2
 */
Titanium.UI.DashboardItem = {
	/**
	 * the badge value or 0 to remove the badge
	 * @alias Titanium.UI.DashboardItem.badge
	 * @property {Integer}
	 */
	badge: 0,
	/**
	 * Get the the badge value or 0 to remove the badge
	 * @alias Titanium.UI.DashboardItem.getBadge
	 * @return {Integer}
	 */
	getBadge: function () { return badge; },
	/**
	 * Set the the badge value or 0 to remove the badge
	 * @param {Integer} value New value to set.
	 * @alias Titanium.UI.DashboardItem.setBadge
	 */
	setBadge: function () { },
	/**
	 * a boolean to indicate if this item can be deleted when it edit mode
	 * @alias Titanium.UI.DashboardItem.canDelete
	 * @property {Boolean}
	 */
	canDelete: false,
	/**
	 * Get the a boolean to indicate if this item can be deleted when it edit mode
	 * @alias Titanium.UI.DashboardItem.getCanDelete
	 * @return {Boolean}
	 */
	getCanDelete: function () { return canDelete; },
	/**
	 * Set the a boolean to indicate if this item can be deleted when it edit mode
	 * @param {Boolean} value New value to set.
	 * @alias Titanium.UI.DashboardItem.setCanDelete
	 */
	setCanDelete: function () { },
	/**
	 * the URL to the image
	 * @alias Titanium.UI.DashboardItem.image
	 * @property {String}
	 */
	image: '',
	/**
	 * Get the the URL to the image
	 * @alias Titanium.UI.DashboardItem.getImage
	 * @return {String}
	 */
	getImage: function () { return image; },
	/**
	 * Set the the URL to the image
	 * @param {String} value New value to set.
	 * @alias Titanium.UI.DashboardItem.setImage
	 */
	setImage: function () { },
	/**
	 * the URL to the image to display when the item is depressed (clicked)
	 * @alias Titanium.UI.DashboardItem.selectedImage
	 * @property {String}
	 */
	selectedImage: '',
	/**
	 * Get the the URL to the image to display when the item is depressed (clicked)
	 * @alias Titanium.UI.DashboardItem.getSelectedImage
	 * @return {String}
	 */
	getSelectedImage: function () { return selectedImage; },
	/**
	 * Set the the URL to the image to display when the item is depressed (clicked)
	 * @param {String} value New value to set.
	 * @alias Titanium.UI.DashboardItem.setSelectedImage
	 */
	setSelectedImage: function () { },
	/**
	 * add an event listener for the instance to receive view triggered events
	 * @param {String} name name of the event
	 * @param {Function} callback callback function to invoke when the event is fired
	 * @alias Titanium.UI.DashboardItem.addEventListener
	 */
	addEventListener: function (name,callback) { },
	/**
	 * fire a synthesized event to the views listener
	 * @param {String} name name of the event
	 * @param {Object} event event object
	 * @alias Titanium.UI.DashboardItem.fireEvent
	 */
	fireEvent: function (name,event) { },
	/**
	 * remove a previously added event listener
	 * @param {String} name name of the event
	 * @param {Function} callback callback function passed in addEventListener
	 * @alias Titanium.UI.DashboardItem.removeEventListener
	 */
	removeEventListener: function (name,callback) { },
};

/**
 * The Dashboard View provides a view that supports the ability to have Springboard-like view of icons which can be reordered by dragging and can contain multiple pages of icons in a scrollable view. The Dashboard View is created by the method Titanium.UI.createDashboardView.
 * @since 1.2
 */
Titanium.UI.DashboardView = {
	/**
	 * a dictionary with properties x and y to indicate the anchor point value. anchor specifies the position by which animation should occur. center is 0.5, 0.5
	 * @alias Titanium.UI.DashboardView.anchorPoint
	 * @property {Object}
	 */
	anchorPoint: {},
	/**
	 * Get the a dictionary with properties x and y to indicate the anchor point value. anchor specifies the position by which animation should occur. center is 0.5, 0.5
	 * @alias Titanium.UI.DashboardView.getAnchorPoint
	 * @return {Object}
	 */
	getAnchorPoint: function () { return anchorPoint; },
	/**
	 * Set the a dictionary with properties x and y to indicate the anchor point value. anchor specifies the position by which animation should occur. center is 0.5, 0.5
	 * @param {Object} value New value to set.
	 * @alias Titanium.UI.DashboardView.setAnchorPoint
	 */
	setAnchorPoint: function () { },
	/**
	 * read-only object with x and y properties of where the view is during animation
	 * @alias Titanium.UI.DashboardView.animatedCenterPoint
	 * @property {Object}
	 */
	animatedCenterPoint: {},
	/**
	 * Get the read-only object with x and y properties of where the view is during animation
	 * @alias Titanium.UI.DashboardView.getAnimatedCenterPoint
	 * @return {Object}
	 */
	getAnimatedCenterPoint: function () { return animatedCenterPoint; },
	/**
	 * Set the read-only object with x and y properties of where the view is during animation
	 * @param {Object} value New value to set.
	 * @alias Titanium.UI.DashboardView.setAnimatedCenterPoint
	 */
	setAnimatedCenterPoint: function () { },
	/**
	 * the background color of the view
	 * @alias Titanium.UI.DashboardView.backgroundColor
	 * @property {String}
	 */
	backgroundColor: '',
	/**
	 * Get the the background color of the view
	 * @alias Titanium.UI.DashboardView.getBackgroundColor
	 * @return {String}
	 */
	getBackgroundColor: function () { return backgroundColor; },
	/**
	 * Set the the background color of the view
	 * @param {String} value New value to set.
	 * @alias Titanium.UI.DashboardView.setBackgroundColor
	 */
	setBackgroundColor: function () { },
	/**
	 * the disabled background color of the view. (Android)
	 * @alias Titanium.UI.DashboardView.backgroundDisabledColor
	 * @property {String}
	 */
	backgroundDisabledColor: '',
	/**
	 * Get the the disabled background color of the view. (Android)
	 * @alias Titanium.UI.DashboardView.getBackgroundDisabledColor
	 * @return {String}
	 */
	getBackgroundDisabledColor: function () { return backgroundDisabledColor; },
	/**
	 * Set the the disabled background color of the view. (Android)
	 * @param {String} value New value to set.
	 * @alias Titanium.UI.DashboardView.setBackgroundDisabledColor
	 */
	setBackgroundDisabledColor: function () { },
	/**
	 * the disabled background image url of the view. (Android)
	 * @alias Titanium.UI.DashboardView.backgroundDisabledImage
	 * @property {String}
	 */
	backgroundDisabledImage: '',
	/**
	 * Get the the disabled background image url of the view. (Android)
	 * @alias Titanium.UI.DashboardView.getBackgroundDisabledImage
	 * @return {String}
	 */
	getBackgroundDisabledImage: function () { return backgroundDisabledImage; },
	/**
	 * Set the the disabled background image url of the view. (Android)
	 * @param {String} value New value to set.
	 * @alias Titanium.UI.DashboardView.setBackgroundDisabledImage
	 */
	setBackgroundDisabledImage: function () { },
	/**
	 * the focused background color of the view. focusable must be true for normal views. (Android)
	 * @alias Titanium.UI.DashboardView.backgroundFocusedColor
	 * @property {String}
	 */
	backgroundFocusedColor: '',
	/**
	 * Get the the focused background color of the view. focusable must be true for normal views. (Android)
	 * @alias Titanium.UI.DashboardView.getBackgroundFocusedColor
	 * @return {String}
	 */
	getBackgroundFocusedColor: function () { return backgroundFocusedColor; },
	/**
	 * Set the the focused background color of the view. focusable must be true for normal views. (Android)
	 * @param {String} value New value to set.
	 * @alias Titanium.UI.DashboardView.setBackgroundFocusedColor
	 */
	setBackgroundFocusedColor: function () { },
	/**
	 * the focused background image url of the view. focusable must be true for normal views. (Android)
	 * @alias Titanium.UI.DashboardView.backgroundFocusedImage
	 * @property {String}
	 */
	backgroundFocusedImage: '',
	/**
	 * Get the the focused background image url of the view. focusable must be true for normal views. (Android)
	 * @alias Titanium.UI.DashboardView.getBackgroundFocusedImage
	 * @return {String}
	 */
	getBackgroundFocusedImage: function () { return backgroundFocusedImage; },
	/**
	 * Set the the focused background image url of the view. focusable must be true for normal views. (Android)
	 * @param {String} value New value to set.
	 * @alias Titanium.UI.DashboardView.setBackgroundFocusedImage
	 */
	setBackgroundFocusedImage: function () { },
	/**
	 * a background gradient for the view with the properties: type,startPoint,endPoint,startRadius,endRadius,backfillStart,backfillEnd,colors.
	 * @alias Titanium.UI.DashboardView.backgroundGradient
	 * @property {Object}
	 */
	backgroundGradient: {},
	/**
	 * Get the a background gradient for the view with the properties: type,startPoint,endPoint,startRadius,endRadius,backfillStart,backfillEnd,colors.
	 * @alias Titanium.UI.DashboardView.getBackgroundGradient
	 * @return {Object}
	 */
	getBackgroundGradient: function () { return backgroundGradient; },
	/**
	 * Set the a background gradient for the view with the properties: type,startPoint,endPoint,startRadius,endRadius,backfillStart,backfillEnd,colors.
	 * @param {Object} value New value to set.
	 * @alias Titanium.UI.DashboardView.setBackgroundGradient
	 */
	setBackgroundGradient: function () { },
	/**
	 * the background image url of the view
	 * @alias Titanium.UI.DashboardView.backgroundImage
	 * @property {String}
	 */
	backgroundImage: '',
	/**
	 * Get the the background image url of the view
	 * @alias Titanium.UI.DashboardView.getBackgroundImage
	 * @return {String}
	 */
	getBackgroundImage: function () { return backgroundImage; },
	/**
	 * Set the the background image url of the view
	 * @param {String} value New value to set.
	 * @alias Titanium.UI.DashboardView.setBackgroundImage
	 */
	setBackgroundImage: function () { },
	/**
	 * End caps specify the portion of an image that should not be resized when an image is stretched. This technique is used to implement buttons and other resizable image-based interface elements. When a button with end caps is resized, the resizing occurs only in the middle of the button, in the region between the end caps. The end caps themselves keep their original size and appearance. This property specifies the size of the left end cap. The middle (stretchable) portion is assumed to be 1 pixel wide. The right end cap is therefore computed by adding the size of the left end cap and the middle portion together and then subtracting that value from the width of the image
	 * @alias Titanium.UI.DashboardView.backgroundLeftCap
	 * @property {Float}
	 */
	backgroundLeftCap: 0.0,
	/**
	 * Get the End caps specify the portion of an image that should not be resized when an image is stretched. This technique is used to implement buttons and other resizable image-based interface elements. When a button with end caps is resized, the resizing occurs only in the middle of the button, in the region between the end caps. The end caps themselves keep their original size and appearance. This property specifies the size of the left end cap. The middle (stretchable) portion is assumed to be 1 pixel wide. The right end cap is therefore computed by adding the size of the left end cap and the middle portion together and then subtracting that value from the width of the image
	 * @alias Titanium.UI.DashboardView.getBackgroundLeftCap
	 * @return {Float}
	 */
	getBackgroundLeftCap: function () { return backgroundLeftCap; },
	/**
	 * Set the End caps specify the portion of an image that should not be resized when an image is stretched. This technique is used to implement buttons and other resizable image-based interface elements. When a button with end caps is resized, the resizing occurs only in the middle of the button, in the region between the end caps. The end caps themselves keep their original size and appearance. This property specifies the size of the left end cap. The middle (stretchable) portion is assumed to be 1 pixel wide. The right end cap is therefore computed by adding the size of the left end cap and the middle portion together and then subtracting that value from the width of the image
	 * @param {Float} value New value to set.
	 * @alias Titanium.UI.DashboardView.setBackgroundLeftCap
	 */
	setBackgroundLeftCap: function () { },
	/**
	 * the selected background color of the view. focusable must be true for normal views. (Android)
	 * @alias Titanium.UI.DashboardView.backgroundSelectedColor
	 * @property {String}
	 */
	backgroundSelectedColor: '',
	/**
	 * Get the the selected background color of the view. focusable must be true for normal views. (Android)
	 * @alias Titanium.UI.DashboardView.getBackgroundSelectedColor
	 * @return {String}
	 */
	getBackgroundSelectedColor: function () { return backgroundSelectedColor; },
	/**
	 * Set the the selected background color of the view. focusable must be true for normal views. (Android)
	 * @param {String} value New value to set.
	 * @alias Titanium.UI.DashboardView.setBackgroundSelectedColor
	 */
	setBackgroundSelectedColor: function () { },
	/**
	 * the selected background image url of the view. focusable must be true for normal views. (Android)
	 * @alias Titanium.UI.DashboardView.backgroundSelectedImage
	 * @property {String}
	 */
	backgroundSelectedImage: '',
	/**
	 * Get the the selected background image url of the view. focusable must be true for normal views. (Android)
	 * @alias Titanium.UI.DashboardView.getBackgroundSelectedImage
	 * @return {String}
	 */
	getBackgroundSelectedImage: function () { return backgroundSelectedImage; },
	/**
	 * Set the the selected background image url of the view. focusable must be true for normal views. (Android)
	 * @param {String} value New value to set.
	 * @alias Titanium.UI.DashboardView.setBackgroundSelectedImage
	 */
	setBackgroundSelectedImage: function () { },
	/**
	 * End caps specify the portion of an image that should not be resized when an image is stretched. This technique is used to implement buttons and other resizable image-based interface elements. When a button with end caps is resized, the resizing occurs only in the middle of the button, in the region between the end caps. The end caps themselves keep their original size and appearance. This property specifies the size of the top end cap. The middle (stretchable) portion is assumed to be 1 pixel wide. The bottom end cap is therefore computed by adding the size of the top end cap and the middle portion together and then subtracting that value from the height of the image
	 * @alias Titanium.UI.DashboardView.backgroundTopCap
	 * @property {Float}
	 */
	backgroundTopCap: 0.0,
	/**
	 * Get the End caps specify the portion of an image that should not be resized when an image is stretched. This technique is used to implement buttons and other resizable image-based interface elements. When a button with end caps is resized, the resizing occurs only in the middle of the button, in the region between the end caps. The end caps themselves keep their original size and appearance. This property specifies the size of the top end cap. The middle (stretchable) portion is assumed to be 1 pixel wide. The bottom end cap is therefore computed by adding the size of the top end cap and the middle portion together and then subtracting that value from the height of the image
	 * @alias Titanium.UI.DashboardView.getBackgroundTopCap
	 * @return {Float}
	 */
	getBackgroundTopCap: function () { return backgroundTopCap; },
	/**
	 * Set the End caps specify the portion of an image that should not be resized when an image is stretched. This technique is used to implement buttons and other resizable image-based interface elements. When a button with end caps is resized, the resizing occurs only in the middle of the button, in the region between the end caps. The end caps themselves keep their original size and appearance. This property specifies the size of the top end cap. The middle (stretchable) portion is assumed to be 1 pixel wide. The bottom end cap is therefore computed by adding the size of the top end cap and the middle portion together and then subtracting that value from the height of the image
	 * @param {Float} value New value to set.
	 * @alias Titanium.UI.DashboardView.setBackgroundTopCap
	 */
	setBackgroundTopCap: function () { },
	/**
	 * the border color of the view
	 * @alias Titanium.UI.DashboardView.borderColor
	 * @property {String}
	 */
	borderColor: '',
	/**
	 * Get the the border color of the view
	 * @alias Titanium.UI.DashboardView.getBorderColor
	 * @return {String}
	 */
	getBorderColor: function () { return borderColor; },
	/**
	 * Set the the border color of the view
	 * @param {String} value New value to set.
	 * @alias Titanium.UI.DashboardView.setBorderColor
	 */
	setBorderColor: function () { },
	/**
	 * the border radius of the view
	 * @alias Titanium.UI.DashboardView.borderRadius
	 * @property {Float}
	 */
	borderRadius: 0.0,
	/**
	 * Get the the border radius of the view
	 * @alias Titanium.UI.DashboardView.getBorderRadius
	 * @return {Float}
	 */
	getBorderRadius: function () { return borderRadius; },
	/**
	 * Set the the border radius of the view
	 * @param {Float} value New value to set.
	 * @alias Titanium.UI.DashboardView.setBorderRadius
	 */
	setBorderRadius: function () { },
	/**
	 * the border width of the view
	 * @alias Titanium.UI.DashboardView.borderWidth
	 * @property {Float}
	 */
	borderWidth: 0.0,
	/**
	 * Get the the border width of the view
	 * @alias Titanium.UI.DashboardView.getBorderWidth
	 * @return {Float}
	 */
	getBorderWidth: function () { return borderWidth; },
	/**
	 * Set the the border width of the view
	 * @param {Float} value New value to set.
	 * @alias Titanium.UI.DashboardView.setBorderWidth
	 */
	setBorderWidth: function () { },
	/**
	 * property for the view bottom position. This position is relative to the view's parent. Can be either a float value or a dimension string ie 'auto' (default), '50%' (iPhone only).
	 * @alias Titanium.UI.DashboardView.bottom
	 * @property {Float,String}
	 */
	bottom: 0.0,
	/**
	 * Get the property for the view bottom position. This position is relative to the view's parent. Can be either a float value or a dimension string ie 'auto' (default), '50%' (iPhone only).
	 * @alias Titanium.UI.DashboardView.getBottom
	 * @return {Float,String}
	 */
	getBottom: function () { return bottom; },
	/**
	 * Set the property for the view bottom position. This position is relative to the view's parent. Can be either a float value or a dimension string ie 'auto' (default), '50%' (iPhone only).
	 * @param {Float,String} value New value to set.
	 * @alias Titanium.UI.DashboardView.setBottom
	 */
	setBottom: function () { },
	/**
	 * a dictionary with properties x and y to indicate the center of the views position relative to the parent view
	 * @alias Titanium.UI.DashboardView.center
	 * @property {Object}
	 */
	center: {},
	/**
	 * Get the a dictionary with properties x and y to indicate the center of the views position relative to the parent view
	 * @alias Titanium.UI.DashboardView.getCenter
	 * @return {Object}
	 */
	getCenter: function () { return center; },
	/**
	 * Set the a dictionary with properties x and y to indicate the center of the views position relative to the parent view
	 * @param {Object} value New value to set.
	 * @alias Titanium.UI.DashboardView.setCenter
	 */
	setCenter: function () { },
	/**
	 * an array of Titanium.UI.DashboardItem objects to display in the view
	 * @alias Titanium.UI.DashboardView.data
	 * @property {Array}
	 */
	data: [],
	/**
	 * Get the an array of Titanium.UI.DashboardItem objects to display in the view
	 * @alias Titanium.UI.DashboardView.getData
	 * @return {Array}
	 */
	getData: function () { return data; },
	/**
	 * Set the an array of Titanium.UI.DashboardItem objects to display in the view
	 * @param {Array} value New value to set.
	 * @alias Titanium.UI.DashboardView.setData
	 */
	setData: function () { },
	/**
	 * Set true if you want a view to be focusable when navigating with the trackball or D-Pad. Default: false. (Android Only)
	 * @alias Titanium.UI.DashboardView.focusable
	 * @property {Boolean}
	 */
	focusable: false,
	/**
	 * Get the Set true if you want a view to be focusable when navigating with the trackball or D-Pad. Default: false. (Android Only)
	 * @alias Titanium.UI.DashboardView.getFocusable
	 * @return {Boolean}
	 */
	getFocusable: function () { return focusable; },
	/**
	 * Set the Set true if you want a view to be focusable when navigating with the trackball or D-Pad. Default: false. (Android Only)
	 * @param {Boolean} value New value to set.
	 * @alias Titanium.UI.DashboardView.setFocusable
	 */
	setFocusable: function () { },
	/**
	 * the font family
	 * @alias Titanium.UI.DashboardView.font-family
	 * @property {String}
	 */
	font-family: '',
	/**
	 * Get the the font family
	 * @alias Titanium.UI.DashboardView.getFont-family
	 * @return {String}
	 */
	getFont-family: function () { return font-family; },
	/**
	 * Set the the font family
	 * @param {String} value New value to set.
	 * @alias Titanium.UI.DashboardView.setFont-family
	 */
	setFont-family: function () { },
	/**
	 * the font size
	 * @alias Titanium.UI.DashboardView.font-size
	 * @property {String}
	 */
	font-size: '',
	/**
	 * Get the the font size
	 * @alias Titanium.UI.DashboardView.getFont-size
	 * @return {String}
	 */
	getFont-size: function () { return font-size; },
	/**
	 * Set the the font size
	 * @param {String} value New value to set.
	 * @alias Titanium.UI.DashboardView.setFont-size
	 */
	setFont-size: function () { },
	/**
	 * the font style, either normal or italics
	 * @alias Titanium.UI.DashboardView.font-style
	 * @property {String}
	 */
	font-style: '',
	/**
	 * Get the the font style, either normal or italics
	 * @alias Titanium.UI.DashboardView.getFont-style
	 * @return {String}
	 */
	getFont-style: function () { return font-style; },
	/**
	 * Set the the font style, either normal or italics
	 * @param {String} value New value to set.
	 * @alias Titanium.UI.DashboardView.setFont-style
	 */
	setFont-style: function () { },
	/**
	 * the font weight, either normal or bold
	 * @alias Titanium.UI.DashboardView.font-weight
	 * @property {String}
	 */
	font-weight: '',
	/**
	 * Get the the font weight, either normal or bold
	 * @alias Titanium.UI.DashboardView.getFont-weight
	 * @return {String}
	 */
	getFont-weight: function () { return font-weight; },
	/**
	 * Set the the font weight, either normal or bold
	 * @param {String} value New value to set.
	 * @alias Titanium.UI.DashboardView.setFont-weight
	 */
	setFont-weight: function () { },
	/**
	 * property for the view height. Can be either a float value or a dimension string ie 'auto' (default), '50%' (iPhone only).
	 * @alias Titanium.UI.DashboardView.height
	 * @property {Float,String}
	 */
	height: 0.0,
	/**
	 * Get the property for the view height. Can be either a float value or a dimension string ie 'auto' (default), '50%' (iPhone only).
	 * @alias Titanium.UI.DashboardView.getHeight
	 * @return {Float,String}
	 */
	getHeight: function () { return height; },
	/**
	 * Set the property for the view height. Can be either a float value or a dimension string ie 'auto' (default), '50%' (iPhone only).
	 * @param {Float,String} value New value to set.
	 * @alias Titanium.UI.DashboardView.setHeight
	 */
	setHeight: function () { },
	/**
	 * property for the view left position. This position is relative to the view's parent. Can be either a float value or a dimension string ie 'auto' (default), '50%' (iPhone only).
	 * @alias Titanium.UI.DashboardView.left
	 * @property {Float,String}
	 */
	left: 0.0,
	/**
	 * Get the property for the view left position. This position is relative to the view's parent. Can be either a float value or a dimension string ie 'auto' (default), '50%' (iPhone only).
	 * @alias Titanium.UI.DashboardView.getLeft
	 * @return {Float,String}
	 */
	getLeft: function () { return left; },
	/**
	 * Set the property for the view left position. This position is relative to the view's parent. Can be either a float value or a dimension string ie 'auto' (default), '50%' (iPhone only).
	 * @param {Float,String} value New value to set.
	 * @alias Titanium.UI.DashboardView.setLeft
	 */
	setLeft: function () { },
	/**
	 * the opacity from 0.0-1.0
	 * @alias Titanium.UI.DashboardView.opacity
	 * @property {Float}
	 */
	opacity: 0.0,
	/**
	 * Get the the opacity from 0.0-1.0
	 * @alias Titanium.UI.DashboardView.getOpacity
	 * @return {Float}
	 */
	getOpacity: function () { return opacity; },
	/**
	 * Set the the opacity from 0.0-1.0
	 * @param {Float} value New value to set.
	 * @alias Titanium.UI.DashboardView.setOpacity
	 */
	setOpacity: function () { },
	/**
	 * property for the view right position. This position is relative to the view's parent. Can be either a float value or a dimension string ie 'auto' (default), '50%' (iPhone only).
	 * @alias Titanium.UI.DashboardView.right
	 * @property {Float,String}
	 */
	right: 0.0,
	/**
	 * Get the property for the view right position. This position is relative to the view's parent. Can be either a float value or a dimension string ie 'auto' (default), '50%' (iPhone only).
	 * @alias Titanium.UI.DashboardView.getRight
	 * @return {Float,String}
	 */
	getRight: function () { return right; },
	/**
	 * Set the property for the view right position. This position is relative to the view's parent. Can be either a float value or a dimension string ie 'auto' (default), '50%' (iPhone only).
	 * @param {Float,String} value New value to set.
	 * @alias Titanium.UI.DashboardView.setRight
	 */
	setRight: function () { },
	/**
	 * the size of the view as a dictionary of width and height properties
	 * @alias Titanium.UI.DashboardView.size
	 * @property {Object}
	 */
	size: {},
	/**
	 * Get the the size of the view as a dictionary of width and height properties
	 * @alias Titanium.UI.DashboardView.getSize
	 * @return {Object}
	 */
	getSize: function () { return size; },
	/**
	 * Set the the size of the view as a dictionary of width and height properties
	 * @param {Object} value New value to set.
	 * @alias Titanium.UI.DashboardView.setSize
	 */
	setSize: function () { },
	/**
	 * One of Titanium.UI.Android.SOFT_KEYBOARD_DEFAULT_ON_FOCUS, Titanium.UI.Android.SOFT_KEYBOARD_HIDE_ON_FOCUS, or Titanium.UI.Android.SOFT_KEYBOARD_SHOW_ON_FOCUS. (Android only)
	 * @alias Titanium.UI.DashboardView.softKeyboardOnFocus
	 * @property {Integer}
	 */
	softKeyboardOnFocus: 0,
	/**
	 * Get the One of Titanium.UI.Android.SOFT_KEYBOARD_DEFAULT_ON_FOCUS, Titanium.UI.Android.SOFT_KEYBOARD_HIDE_ON_FOCUS, or Titanium.UI.Android.SOFT_KEYBOARD_SHOW_ON_FOCUS. (Android only)
	 * @alias Titanium.UI.DashboardView.getSoftKeyboardOnFocus
	 * @return {Integer}
	 */
	getSoftKeyboardOnFocus: function () { return softKeyboardOnFocus; },
	/**
	 * Set the One of Titanium.UI.Android.SOFT_KEYBOARD_DEFAULT_ON_FOCUS, Titanium.UI.Android.SOFT_KEYBOARD_HIDE_ON_FOCUS, or Titanium.UI.Android.SOFT_KEYBOARD_SHOW_ON_FOCUS. (Android only)
	 * @param {Integer} value New value to set.
	 * @alias Titanium.UI.DashboardView.setSoftKeyboardOnFocus
	 */
	setSoftKeyboardOnFocus: function () { },
	/**
	 * property for the view top position. This position is relative to the view's parent. Can be either a float value or a dimension string ie 'auto' (default), '50%' (iPhone only).
	 * @alias Titanium.UI.DashboardView.top
	 * @property {Float,String}
	 */
	top: 0.0,
	/**
	 * Get the property for the view top position. This position is relative to the view's parent. Can be either a float value or a dimension string ie 'auto' (default), '50%' (iPhone only).
	 * @alias Titanium.UI.DashboardView.getTop
	 * @return {Float,String}
	 */
	getTop: function () { return top; },
	/**
	 * Set the property for the view top position. This position is relative to the view's parent. Can be either a float value or a dimension string ie 'auto' (default), '50%' (iPhone only).
	 * @param {Float,String} value New value to set.
	 * @alias Titanium.UI.DashboardView.setTop
	 */
	setTop: function () { },
	/**
	 * a boolean indicating if the view should receive touch events (true, default) or forward them to peers (false)
	 * @alias Titanium.UI.DashboardView.touchEnabled
	 * @property {Boolean}
	 */
	touchEnabled: false,
	/**
	 * Get the a boolean indicating if the view should receive touch events (true, default) or forward them to peers (false)
	 * @alias Titanium.UI.DashboardView.getTouchEnabled
	 * @return {Boolean}
	 */
	getTouchEnabled: function () { return touchEnabled; },
	/**
	 * Set the a boolean indicating if the view should receive touch events (true, default) or forward them to peers (false)
	 * @param {Boolean} value New value to set.
	 * @alias Titanium.UI.DashboardView.setTouchEnabled
	 */
	setTouchEnabled: function () { },
	/**
	 * the transformation matrix to apply to the view
	 * @alias Titanium.UI.DashboardView.transform
	 * @property {Object}
	 */
	transform: {},
	/**
	 * Get the the transformation matrix to apply to the view
	 * @alias Titanium.UI.DashboardView.getTransform
	 * @return {Object}
	 */
	getTransform: function () { return transform; },
	/**
	 * Set the the transformation matrix to apply to the view
	 * @param {Object} value New value to set.
	 * @alias Titanium.UI.DashboardView.setTransform
	 */
	setTransform: function () { },
	/**
	 * a boolean of the visibility of the view
	 * @alias Titanium.UI.DashboardView.visible
	 * @property {Boolean}
	 */
	visible: false,
	/**
	 * Get the a boolean of the visibility of the view
	 * @alias Titanium.UI.DashboardView.getVisible
	 * @return {Boolean}
	 */
	getVisible: function () { return visible; },
	/**
	 * Set the a boolean of the visibility of the view
	 * @param {Boolean} value New value to set.
	 * @alias Titanium.UI.DashboardView.setVisible
	 */
	setVisible: function () { },
	/**
	 * property for the view width. Can be either a float value or a dimension string ie 'auto' (default), '50%' (iPhone only).
	 * @alias Titanium.UI.DashboardView.width
	 * @property {Float,String}
	 */
	width: 0.0,
	/**
	 * Get the property for the view width. Can be either a float value or a dimension string ie 'auto' (default), '50%' (iPhone only).
	 * @alias Titanium.UI.DashboardView.getWidth
	 * @return {Float,String}
	 */
	getWidth: function () { return width; },
	/**
	 * Set the property for the view width. Can be either a float value or a dimension string ie 'auto' (default), '50%' (iPhone only).
	 * @param {Float,String} value New value to set.
	 * @alias Titanium.UI.DashboardView.setWidth
	 */
	setWidth: function () { },
	/**
	 * true (default) to wobble during edit, false to disable wobble effect
	 * @alias Titanium.UI.DashboardView.wobble
	 * @property {Boolean}
	 */
	wobble: false,
	/**
	 * Get the true (default) to wobble during edit, false to disable wobble effect
	 * @alias Titanium.UI.DashboardView.getWobble
	 * @return {Boolean}
	 */
	getWobble: function () { return wobble; },
	/**
	 * Set the true (default) to wobble during edit, false to disable wobble effect
	 * @param {Boolean} value New value to set.
	 * @alias Titanium.UI.DashboardView.setWobble
	 */
	setWobble: function () { },
	/**
	 * the z index position relative to other sibling views
	 * @alias Titanium.UI.DashboardView.zIndex
	 * @property {Integer}
	 */
	zIndex: 0,
	/**
	 * Get the the z index position relative to other sibling views
	 * @alias Titanium.UI.DashboardView.getZIndex
	 * @return {Integer}
	 */
	getZIndex: function () { return zIndex; },
	/**
	 * Set the the z index position relative to other sibling views
	 * @param {Integer} value New value to set.
	 * @alias Titanium.UI.DashboardView.setZIndex
	 */
	setZIndex: function () { },
	/**
	 * add a child to the view hierarchy
	 * @param {Object} view the view to add to this views hiearchy
	 * @alias Titanium.UI.DashboardView.add
	 */
	add: function (view) { },
	/**
	 * add an event listener for the instance to receive view triggered events
	 * @param {String} name name of the event
	 * @param {Function} callback callback function to invoke when the event is fired
	 * @alias Titanium.UI.DashboardView.addEventListener
	 */
	addEventListener: function (name,callback) { },
	/**
	 * animate the view
	 * @param {Object} obj either a dictionary of animation properties or an Animation object
	 * @param {Function} callback function to be invoked upon completion of the animation
	 * @alias Titanium.UI.DashboardView.animate
	 */
	animate: function (obj,callback) { },
	/**
	 * fire a synthesized event to the views listener
	 * @param {String} name name of the event
	 * @param {Object} event event object
	 * @alias Titanium.UI.DashboardView.fireEvent
	 */
	fireEvent: function (name,event) { },
	/**
	 * hide the view
	 * @alias Titanium.UI.DashboardView.hide
	 */
	hide: function () { },
	/**
	 * remove a previously add view from the view hiearchy
	 * @param {Object} view the view to remove from this views hiearchy
	 * @alias Titanium.UI.DashboardView.remove
	 */
	remove: function (view) { },
	/**
	 * remove a previously added event listener
	 * @param {String} name name of the event
	 * @param {Function} callback callback function passed in addEventListener
	 * @alias Titanium.UI.DashboardView.removeEventListener
	 */
	removeEventListener: function (name,callback) { },
	/**
	 * make the view visible
	 * @alias Titanium.UI.DashboardView.show
	 */
	show: function () { },
	/**
	 * put the dashboard in edit mode
	 * @alias Titanium.UI.DashboardView.startEditing
	 */
	startEditing: function () { },
	/**
	 * cancel editing
	 * @alias Titanium.UI.DashboardView.stopEditing
	 */
	stopEditing: function () { },
	/**
	 * return a Blob image of the rendered view
	 * @param {Function} f function to be invoked upon completion. if non-null, this method will be performed asynchronously. if null, it will be performed immediately
	 * @alias Titanium.UI.DashboardView.toImage
	 * @return {Object}
	 */
	toImage: function (f) { return {}; },
};

/**
 * The Email Dialog is created by Titanium.UI.createEmailDialog and allows you to send in application emails on behalf of the application user.
 * @since 0.8
 */
Titanium.UI.EmailDialog = {
	/**
	 * constant for the CANCELLED status result
	 * @alias Titanium.UI.EmailDialog.CANCELLED
	 * @property {Integer}
	 */
	CANCELLED: 0,
	/**
	 * constant for the FAILED status result
	 * @alias Titanium.UI.EmailDialog.FAILED
	 * @property {Integer}
	 */
	FAILED: 0,
	/**
	 * constant for the SAVED status result
	 * @alias Titanium.UI.EmailDialog.SAVED
	 * @property {Integer}
	 */
	SAVED: 0,
	/**
	 * constant for the SENT status result
	 * @alias Titanium.UI.EmailDialog.SENT
	 * @property {Integer}
	 */
	SENT: 0,
	/**
	 * the bar color of the email dialog window when opened
	 * @alias Titanium.UI.EmailDialog.barColor
	 * @property {String}
	 */
	barColor: '',
	/**
	 * Get the the bar color of the email dialog window when opened
	 * @alias Titanium.UI.EmailDialog.getBarColor
	 * @return {String}
	 */
	getBarColor: function () { return barColor; },
	/**
	 * Set the the bar color of the email dialog window when opened
	 * @param {String} value New value to set.
	 * @alias Titanium.UI.EmailDialog.setBarColor
	 */
	setBarColor: function () { },
	/**
	 * array of email BCC: recipients
	 * @alias Titanium.UI.EmailDialog.bccRecipients
	 * @property {Array}
	 */
	bccRecipients: [],
	/**
	 * Get the array of email BCC: recipients
	 * @alias Titanium.UI.EmailDialog.getBccRecipients
	 * @return {Array}
	 */
	getBccRecipients: function () { return bccRecipients; },
	/**
	 * Set the array of email BCC: recipients
	 * @param {Array} value New value to set.
	 * @alias Titanium.UI.EmailDialog.setBccRecipients
	 */
	setBccRecipients: function () { },
	/**
	 * array of email CC: recipients
	 * @alias Titanium.UI.EmailDialog.ccRecipients
	 * @property {Array}
	 */
	ccRecipients: [],
	/**
	 * Get the array of email CC: recipients
	 * @alias Titanium.UI.EmailDialog.getCcRecipients
	 * @return {Array}
	 */
	getCcRecipients: function () { return ccRecipients; },
	/**
	 * Set the array of email CC: recipients
	 * @param {Array} value New value to set.
	 * @alias Titanium.UI.EmailDialog.setCcRecipients
	 */
	setCcRecipients: function () { },
	/**
	 * boolean to indicate whether the email messageBody should be sent as HTML content type. defaults to false. (Android note: you should not use html messages in 1.6: after that is okay.)
	 * @alias Titanium.UI.EmailDialog.html
	 * @property {Boolean}
	 */
	html: false,
	/**
	 * Get the boolean to indicate whether the email messageBody should be sent as HTML content type. defaults to false. (Android note: you should not use html messages in 1.6: after that is okay.)
	 * @alias Titanium.UI.EmailDialog.getHtml
	 * @return {Boolean}
	 */
	getHtml: function () { return html; },
	/**
	 * Set the boolean to indicate whether the email messageBody should be sent as HTML content type. defaults to false. (Android note: you should not use html messages in 1.6: after that is okay.)
	 * @param {Boolean} value New value to set.
	 * @alias Titanium.UI.EmailDialog.setHtml
	 */
	setHtml: function () { },
	/**
	 * the email message body
	 * @alias Titanium.UI.EmailDialog.messageBody
	 * @property {String}
	 */
	messageBody: '',
	/**
	 * Get the the email message body
	 * @alias Titanium.UI.EmailDialog.getMessageBody
	 * @return {String}
	 */
	getMessageBody: function () { return messageBody; },
	/**
	 * Set the the email message body
	 * @param {String} value New value to set.
	 * @alias Titanium.UI.EmailDialog.setMessageBody
	 */
	setMessageBody: function () { },
	/**
	 * the subject line for the email
	 * @alias Titanium.UI.EmailDialog.subject
	 * @property {String}
	 */
	subject: '',
	/**
	 * Get the the subject line for the email
	 * @alias Titanium.UI.EmailDialog.getSubject
	 * @return {String}
	 */
	getSubject: function () { return subject; },
	/**
	 * Set the the subject line for the email
	 * @param {String} value New value to set.
	 * @alias Titanium.UI.EmailDialog.setSubject
	 */
	setSubject: function () { },
	/**
	 * array of email recipients
	 * @alias Titanium.UI.EmailDialog.toRecipients
	 * @property {Array}
	 */
	toRecipients: [],
	/**
	 * Get the array of email recipients
	 * @alias Titanium.UI.EmailDialog.getToRecipients
	 * @return {Array}
	 */
	getToRecipients: function () { return toRecipients; },
	/**
	 * Set the array of email recipients
	 * @param {Array} value New value to set.
	 * @alias Titanium.UI.EmailDialog.setToRecipients
	 */
	setToRecipients: function () { },
	/**
	 * add an attachment to the email. the attachment can either be a Blob or File object. (Note: Android will only accept one attachment at this time.)
	 * @param {Object} attachment attachment object as either a Blob or File object
	 * @alias Titanium.UI.EmailDialog.addAttachment
	 */
	addAttachment: function (attachment) { },
	/**
	 * add an event listener for the instance to receive view triggered events
	 * @param {String} name name of the event
	 * @param {Function} callback callback function to invoke when the event is fired
	 * @alias Titanium.UI.EmailDialog.addEventListener
	 */
	addEventListener: function (name,callback) { },
	/**
	 * fire a synthesized event to the views listener
	 * @param {String} name name of the event
	 * @param {Object} event event object
	 * @alias Titanium.UI.EmailDialog.fireEvent
	 */
	fireEvent: function (name,event) { },
	/**
	 * return whether or not sending email is supported
	 * @alias Titanium.UI.EmailDialog.isSupported
	 */
	isSupported: function () { },
	/**
	 * open the email dialog. the email dialog itself is a modal window
	 * @param {Object} properties object of animation properties. pass <tt>animated</tt> property (as boolean) to indicate if the dialog should be animated on open.
	 * @alias Titanium.UI.EmailDialog.open
	 */
	open: function (properties) { },
	/**
	 * remove a previously added event listener
	 * @param {String} name name of the event
	 * @param {Function} callback callback function passed in addEventListener
	 * @alias Titanium.UI.EmailDialog.removeEventListener
	 */
	removeEventListener: function (name,callback) { },
};

/**
 * An Image View is used to display an image or a series of images in an animation. The Image View is created by the method Titanium.UI.createImageView.
 * @since 0.9
 */
Titanium.UI.ImageView = {
	/**
	 * a dictionary with properties x and y to indicate the anchor point value. anchor specifies the position by which animation should occur. center is 0.5, 0.5
	 * @alias Titanium.UI.ImageView.anchorPoint
	 * @property {Object}
	 */
	anchorPoint: {},
	/**
	 * Get the a dictionary with properties x and y to indicate the anchor point value. anchor specifies the position by which animation should occur. center is 0.5, 0.5
	 * @alias Titanium.UI.ImageView.getAnchorPoint
	 * @return {Object}
	 */
	getAnchorPoint: function () { return anchorPoint; },
	/**
	 * Set the a dictionary with properties x and y to indicate the anchor point value. anchor specifies the position by which animation should occur. center is 0.5, 0.5
	 * @param {Object} value New value to set.
	 * @alias Titanium.UI.ImageView.setAnchorPoint
	 */
	setAnchorPoint: function () { },
	/**
	 * read-only object with x and y properties of where the view is during animation
	 * @alias Titanium.UI.ImageView.animatedCenterPoint
	 * @property {Object}
	 */
	animatedCenterPoint: {},
	/**
	 * Get the read-only object with x and y properties of where the view is during animation
	 * @alias Titanium.UI.ImageView.getAnimatedCenterPoint
	 * @return {Object}
	 */
	getAnimatedCenterPoint: function () { return animatedCenterPoint; },
	/**
	 * Set the read-only object with x and y properties of where the view is during animation
	 * @param {Object} value New value to set.
	 * @alias Titanium.UI.ImageView.setAnimatedCenterPoint
	 */
	setAnimatedCenterPoint: function () { },
	/**
	 * readonly boolean to indicate if the animation is animating
	 * @alias Titanium.UI.ImageView.animating
	 * @property {Boolean}
	 */
	animating: false,
	/**
	 * Get the readonly boolean to indicate if the animation is animating
	 * @alias Titanium.UI.ImageView.getAnimating
	 * @return {Boolean}
	 */
	getAnimating: function () { return animating; },
	/**
	 * Set the readonly boolean to indicate if the animation is animating
	 * @param {Boolean} value New value to set.
	 * @alias Titanium.UI.ImageView.setAnimating
	 */
	setAnimating: function () { },
	/**
	 * the background color of the view
	 * @alias Titanium.UI.ImageView.backgroundColor
	 * @property {String}
	 */
	backgroundColor: '',
	/**
	 * Get the the background color of the view
	 * @alias Titanium.UI.ImageView.getBackgroundColor
	 * @return {String}
	 */
	getBackgroundColor: function () { return backgroundColor; },
	/**
	 * Set the the background color of the view
	 * @param {String} value New value to set.
	 * @alias Titanium.UI.ImageView.setBackgroundColor
	 */
	setBackgroundColor: function () { },
	/**
	 * the disabled background color of the view. (Android)
	 * @alias Titanium.UI.ImageView.backgroundDisabledColor
	 * @property {String}
	 */
	backgroundDisabledColor: '',
	/**
	 * Get the the disabled background color of the view. (Android)
	 * @alias Titanium.UI.ImageView.getBackgroundDisabledColor
	 * @return {String}
	 */
	getBackgroundDisabledColor: function () { return backgroundDisabledColor; },
	/**
	 * Set the the disabled background color of the view. (Android)
	 * @param {String} value New value to set.
	 * @alias Titanium.UI.ImageView.setBackgroundDisabledColor
	 */
	setBackgroundDisabledColor: function () { },
	/**
	 * the disabled background image url of the view. (Android)
	 * @alias Titanium.UI.ImageView.backgroundDisabledImage
	 * @property {String}
	 */
	backgroundDisabledImage: '',
	/**
	 * Get the the disabled background image url of the view. (Android)
	 * @alias Titanium.UI.ImageView.getBackgroundDisabledImage
	 * @return {String}
	 */
	getBackgroundDisabledImage: function () { return backgroundDisabledImage; },
	/**
	 * Set the the disabled background image url of the view. (Android)
	 * @param {String} value New value to set.
	 * @alias Titanium.UI.ImageView.setBackgroundDisabledImage
	 */
	setBackgroundDisabledImage: function () { },
	/**
	 * the focused background color of the view. focusable must be true for normal views. (Android)
	 * @alias Titanium.UI.ImageView.backgroundFocusedColor
	 * @property {String}
	 */
	backgroundFocusedColor: '',
	/**
	 * Get the the focused background color of the view. focusable must be true for normal views. (Android)
	 * @alias Titanium.UI.ImageView.getBackgroundFocusedColor
	 * @return {String}
	 */
	getBackgroundFocusedColor: function () { return backgroundFocusedColor; },
	/**
	 * Set the the focused background color of the view. focusable must be true for normal views. (Android)
	 * @param {String} value New value to set.
	 * @alias Titanium.UI.ImageView.setBackgroundFocusedColor
	 */
	setBackgroundFocusedColor: function () { },
	/**
	 * the focused background image url of the view. focusable must be true for normal views. (Android)
	 * @alias Titanium.UI.ImageView.backgroundFocusedImage
	 * @property {String}
	 */
	backgroundFocusedImage: '',
	/**
	 * Get the the focused background image url of the view. focusable must be true for normal views. (Android)
	 * @alias Titanium.UI.ImageView.getBackgroundFocusedImage
	 * @return {String}
	 */
	getBackgroundFocusedImage: function () { return backgroundFocusedImage; },
	/**
	 * Set the the focused background image url of the view. focusable must be true for normal views. (Android)
	 * @param {String} value New value to set.
	 * @alias Titanium.UI.ImageView.setBackgroundFocusedImage
	 */
	setBackgroundFocusedImage: function () { },
	/**
	 * a background gradient for the view with the properties: type,startPoint,endPoint,startRadius,endRadius,backfillStart,backfillEnd,colors.
	 * @alias Titanium.UI.ImageView.backgroundGradient
	 * @property {Object}
	 */
	backgroundGradient: {},
	/**
	 * Get the a background gradient for the view with the properties: type,startPoint,endPoint,startRadius,endRadius,backfillStart,backfillEnd,colors.
	 * @alias Titanium.UI.ImageView.getBackgroundGradient
	 * @return {Object}
	 */
	getBackgroundGradient: function () { return backgroundGradient; },
	/**
	 * Set the a background gradient for the view with the properties: type,startPoint,endPoint,startRadius,endRadius,backfillStart,backfillEnd,colors.
	 * @param {Object} value New value to set.
	 * @alias Titanium.UI.ImageView.setBackgroundGradient
	 */
	setBackgroundGradient: function () { },
	/**
	 * the background image url of the view
	 * @alias Titanium.UI.ImageView.backgroundImage
	 * @property {String}
	 */
	backgroundImage: '',
	/**
	 * Get the the background image url of the view
	 * @alias Titanium.UI.ImageView.getBackgroundImage
	 * @return {String}
	 */
	getBackgroundImage: function () { return backgroundImage; },
	/**
	 * Set the the background image url of the view
	 * @param {String} value New value to set.
	 * @alias Titanium.UI.ImageView.setBackgroundImage
	 */
	setBackgroundImage: function () { },
	/**
	 * End caps specify the portion of an image that should not be resized when an image is stretched. This technique is used to implement buttons and other resizable image-based interface elements. When a button with end caps is resized, the resizing occurs only in the middle of the button, in the region between the end caps. The end caps themselves keep their original size and appearance. This property specifies the size of the left end cap. The middle (stretchable) portion is assumed to be 1 pixel wide. The right end cap is therefore computed by adding the size of the left end cap and the middle portion together and then subtracting that value from the width of the image
	 * @alias Titanium.UI.ImageView.backgroundLeftCap
	 * @property {Float}
	 */
	backgroundLeftCap: 0.0,
	/**
	 * Get the End caps specify the portion of an image that should not be resized when an image is stretched. This technique is used to implement buttons and other resizable image-based interface elements. When a button with end caps is resized, the resizing occurs only in the middle of the button, in the region between the end caps. The end caps themselves keep their original size and appearance. This property specifies the size of the left end cap. The middle (stretchable) portion is assumed to be 1 pixel wide. The right end cap is therefore computed by adding the size of the left end cap and the middle portion together and then subtracting that value from the width of the image
	 * @alias Titanium.UI.ImageView.getBackgroundLeftCap
	 * @return {Float}
	 */
	getBackgroundLeftCap: function () { return backgroundLeftCap; },
	/**
	 * Set the End caps specify the portion of an image that should not be resized when an image is stretched. This technique is used to implement buttons and other resizable image-based interface elements. When a button with end caps is resized, the resizing occurs only in the middle of the button, in the region between the end caps. The end caps themselves keep their original size and appearance. This property specifies the size of the left end cap. The middle (stretchable) portion is assumed to be 1 pixel wide. The right end cap is therefore computed by adding the size of the left end cap and the middle portion together and then subtracting that value from the width of the image
	 * @param {Float} value New value to set.
	 * @alias Titanium.UI.ImageView.setBackgroundLeftCap
	 */
	setBackgroundLeftCap: function () { },
	/**
	 * the selected background color of the view. focusable must be true for normal views. (Android)
	 * @alias Titanium.UI.ImageView.backgroundSelectedColor
	 * @property {String}
	 */
	backgroundSelectedColor: '',
	/**
	 * Get the the selected background color of the view. focusable must be true for normal views. (Android)
	 * @alias Titanium.UI.ImageView.getBackgroundSelectedColor
	 * @return {String}
	 */
	getBackgroundSelectedColor: function () { return backgroundSelectedColor; },
	/**
	 * Set the the selected background color of the view. focusable must be true for normal views. (Android)
	 * @param {String} value New value to set.
	 * @alias Titanium.UI.ImageView.setBackgroundSelectedColor
	 */
	setBackgroundSelectedColor: function () { },
	/**
	 * the selected background image url of the view. focusable must be true for normal views. (Android)
	 * @alias Titanium.UI.ImageView.backgroundSelectedImage
	 * @property {String}
	 */
	backgroundSelectedImage: '',
	/**
	 * Get the the selected background image url of the view. focusable must be true for normal views. (Android)
	 * @alias Titanium.UI.ImageView.getBackgroundSelectedImage
	 * @return {String}
	 */
	getBackgroundSelectedImage: function () { return backgroundSelectedImage; },
	/**
	 * Set the the selected background image url of the view. focusable must be true for normal views. (Android)
	 * @param {String} value New value to set.
	 * @alias Titanium.UI.ImageView.setBackgroundSelectedImage
	 */
	setBackgroundSelectedImage: function () { },
	/**
	 * End caps specify the portion of an image that should not be resized when an image is stretched. This technique is used to implement buttons and other resizable image-based interface elements. When a button with end caps is resized, the resizing occurs only in the middle of the button, in the region between the end caps. The end caps themselves keep their original size and appearance. This property specifies the size of the top end cap. The middle (stretchable) portion is assumed to be 1 pixel wide. The bottom end cap is therefore computed by adding the size of the top end cap and the middle portion together and then subtracting that value from the height of the image
	 * @alias Titanium.UI.ImageView.backgroundTopCap
	 * @property {Float}
	 */
	backgroundTopCap: 0.0,
	/**
	 * Get the End caps specify the portion of an image that should not be resized when an image is stretched. This technique is used to implement buttons and other resizable image-based interface elements. When a button with end caps is resized, the resizing occurs only in the middle of the button, in the region between the end caps. The end caps themselves keep their original size and appearance. This property specifies the size of the top end cap. The middle (stretchable) portion is assumed to be 1 pixel wide. The bottom end cap is therefore computed by adding the size of the top end cap and the middle portion together and then subtracting that value from the height of the image
	 * @alias Titanium.UI.ImageView.getBackgroundTopCap
	 * @return {Float}
	 */
	getBackgroundTopCap: function () { return backgroundTopCap; },
	/**
	 * Set the End caps specify the portion of an image that should not be resized when an image is stretched. This technique is used to implement buttons and other resizable image-based interface elements. When a button with end caps is resized, the resizing occurs only in the middle of the button, in the region between the end caps. The end caps themselves keep their original size and appearance. This property specifies the size of the top end cap. The middle (stretchable) portion is assumed to be 1 pixel wide. The bottom end cap is therefore computed by adding the size of the top end cap and the middle portion together and then subtracting that value from the height of the image
	 * @param {Float} value New value to set.
	 * @alias Titanium.UI.ImageView.setBackgroundTopCap
	 */
	setBackgroundTopCap: function () { },
	/**
	 * the border color of the view
	 * @alias Titanium.UI.ImageView.borderColor
	 * @property {String}
	 */
	borderColor: '',
	/**
	 * Get the the border color of the view
	 * @alias Titanium.UI.ImageView.getBorderColor
	 * @return {String}
	 */
	getBorderColor: function () { return borderColor; },
	/**
	 * Set the the border color of the view
	 * @param {String} value New value to set.
	 * @alias Titanium.UI.ImageView.setBorderColor
	 */
	setBorderColor: function () { },
	/**
	 * the border radius of the view
	 * @alias Titanium.UI.ImageView.borderRadius
	 * @property {Float}
	 */
	borderRadius: 0.0,
	/**
	 * Get the the border radius of the view
	 * @alias Titanium.UI.ImageView.getBorderRadius
	 * @return {Float}
	 */
	getBorderRadius: function () { return borderRadius; },
	/**
	 * Set the the border radius of the view
	 * @param {Float} value New value to set.
	 * @alias Titanium.UI.ImageView.setBorderRadius
	 */
	setBorderRadius: function () { },
	/**
	 * the border width of the view
	 * @alias Titanium.UI.ImageView.borderWidth
	 * @property {Float}
	 */
	borderWidth: 0.0,
	/**
	 * Get the the border width of the view
	 * @alias Titanium.UI.ImageView.getBorderWidth
	 * @return {Float}
	 */
	getBorderWidth: function () { return borderWidth; },
	/**
	 * Set the the border width of the view
	 * @param {Float} value New value to set.
	 * @alias Titanium.UI.ImageView.setBorderWidth
	 */
	setBorderWidth: function () { },
	/**
	 * property for the view bottom position. This position is relative to the view's parent. Can be either a float value or a dimension string ie 'auto' (default), '50%' (iPhone only).
	 * @alias Titanium.UI.ImageView.bottom
	 * @property {Float,String}
	 */
	bottom: 0.0,
	/**
	 * Get the property for the view bottom position. This position is relative to the view's parent. Can be either a float value or a dimension string ie 'auto' (default), '50%' (iPhone only).
	 * @alias Titanium.UI.ImageView.getBottom
	 * @return {Float,String}
	 */
	getBottom: function () { return bottom; },
	/**
	 * Set the property for the view bottom position. This position is relative to the view's parent. Can be either a float value or a dimension string ie 'auto' (default), '50%' (iPhone only).
	 * @param {Float,String} value New value to set.
	 * @alias Titanium.UI.ImageView.setBottom
	 */
	setBottom: function () { },
	/**
	 * allow image to scale (Android)
	 * @alias Titanium.UI.ImageView.canScale
	 * @property {Boolean}
	 */
	canScale: false,
	/**
	 * Get the allow image to scale (Android)
	 * @alias Titanium.UI.ImageView.getCanScale
	 * @return {Boolean}
	 */
	getCanScale: function () { return canScale; },
	/**
	 * Set the allow image to scale (Android)
	 * @param {Boolean} value New value to set.
	 * @alias Titanium.UI.ImageView.setCanScale
	 */
	setCanScale: function () { },
	/**
	 * a dictionary with properties x and y to indicate the center of the views position relative to the parent view
	 * @alias Titanium.UI.ImageView.center
	 * @property {Object}
	 */
	center: {},
	/**
	 * Get the a dictionary with properties x and y to indicate the center of the views position relative to the parent view
	 * @alias Titanium.UI.ImageView.getCenter
	 * @return {Object}
	 */
	getCenter: function () { return center; },
	/**
	 * Set the a dictionary with properties x and y to indicate the center of the views position relative to the parent view
	 * @param {Object} value New value to set.
	 * @alias Titanium.UI.ImageView.setCenter
	 */
	setCenter: function () { },
	/**
	 * url to the default image to display while loading a remote image
	 * @alias Titanium.UI.ImageView.defaultImage
	 * @property {String}
	 */
	defaultImage: '',
	/**
	 * Get the url to the default image to display while loading a remote image
	 * @alias Titanium.UI.ImageView.getDefaultImage
	 * @return {String}
	 */
	getDefaultImage: function () { return defaultImage; },
	/**
	 * Set the url to the default image to display while loading a remote image
	 * @param {String} value New value to set.
	 * @alias Titanium.UI.ImageView.setDefaultImage
	 */
	setDefaultImage: function () { },
	/**
	 * amount of time in milliseconds to animate one cycle
	 * @alias Titanium.UI.ImageView.duration
	 * @property {Float}
	 */
	duration: 0.0,
	/**
	 * Get the amount of time in milliseconds to animate one cycle
	 * @alias Titanium.UI.ImageView.getDuration
	 * @return {Float}
	 */
	getDuration: function () { return duration; },
	/**
	 * Set the amount of time in milliseconds to animate one cycle
	 * @param {Float} value New value to set.
	 * @alias Titanium.UI.ImageView.setDuration
	 */
	setDuration: function () { },
	/**
	 * enable zoom controls on Android. Default is true for backward compatibility. (1.3.0)
	 * @alias Titanium.UI.ImageView.enableZoomControls
	 * @property {Boolean}
	 */
	enableZoomControls: false,
	/**
	 * Get the enable zoom controls on Android. Default is true for backward compatibility. (1.3.0)
	 * @alias Titanium.UI.ImageView.getEnableZoomControls
	 * @return {Boolean}
	 */
	getEnableZoomControls: function () { return enableZoomControls; },
	/**
	 * Set the enable zoom controls on Android. Default is true for backward compatibility. (1.3.0)
	 * @param {Boolean} value New value to set.
	 * @alias Titanium.UI.ImageView.setEnableZoomControls
	 */
	setEnableZoomControls: function () { },
	/**
	 * Set true if you want a view to be focusable when navigating with the trackball or D-Pad. Default: false. (Android Only)
	 * @alias Titanium.UI.ImageView.focusable
	 * @property {Boolean}
	 */
	focusable: false,
	/**
	 * Get the Set true if you want a view to be focusable when navigating with the trackball or D-Pad. Default: false. (Android Only)
	 * @alias Titanium.UI.ImageView.getFocusable
	 * @return {Boolean}
	 */
	getFocusable: function () { return focusable; },
	/**
	 * Set the Set true if you want a view to be focusable when navigating with the trackball or D-Pad. Default: false. (Android Only)
	 * @param {Boolean} value New value to set.
	 * @alias Titanium.UI.ImageView.setFocusable
	 */
	setFocusable: function () { },
	/**
	 * the font family
	 * @alias Titanium.UI.ImageView.font-family
	 * @property {String}
	 */
	font-family: '',
	/**
	 * Get the the font family
	 * @alias Titanium.UI.ImageView.getFont-family
	 * @return {String}
	 */
	getFont-family: function () { return font-family; },
	/**
	 * Set the the font family
	 * @param {String} value New value to set.
	 * @alias Titanium.UI.ImageView.setFont-family
	 */
	setFont-family: function () { },
	/**
	 * the font size
	 * @alias Titanium.UI.ImageView.font-size
	 * @property {String}
	 */
	font-size: '',
	/**
	 * Get the the font size
	 * @alias Titanium.UI.ImageView.getFont-size
	 * @return {String}
	 */
	getFont-size: function () { return font-size; },
	/**
	 * Set the the font size
	 * @param {String} value New value to set.
	 * @alias Titanium.UI.ImageView.setFont-size
	 */
	setFont-size: function () { },
	/**
	 * the font style, either normal or italics
	 * @alias Titanium.UI.ImageView.font-style
	 * @property {String}
	 */
	font-style: '',
	/**
	 * Get the the font style, either normal or italics
	 * @alias Titanium.UI.ImageView.getFont-style
	 * @return {String}
	 */
	getFont-style: function () { return font-style; },
	/**
	 * Set the the font style, either normal or italics
	 * @param {String} value New value to set.
	 * @alias Titanium.UI.ImageView.setFont-style
	 */
	setFont-style: function () { },
	/**
	 * the font weight, either normal or bold
	 * @alias Titanium.UI.ImageView.font-weight
	 * @property {String}
	 */
	font-weight: '',
	/**
	 * Get the the font weight, either normal or bold
	 * @alias Titanium.UI.ImageView.getFont-weight
	 * @return {String}
	 */
	getFont-weight: function () { return font-weight; },
	/**
	 * Set the the font weight, either normal or bold
	 * @param {String} value New value to set.
	 * @alias Titanium.UI.ImageView.setFont-weight
	 */
	setFont-weight: function () { },
	/**
	 * height of the image display
	 * @alias Titanium.UI.ImageView.height
	 * @property {Float}
	 */
	height: 0.0,
	/**
	 * Get the height of the image display
	 * @alias Titanium.UI.ImageView.getHeight
	 * @return {Float}
	 */
	getHeight: function () { return height; },
	/**
	 * Set the height of the image display
	 * @param {Float} value New value to set.
	 * @alias Titanium.UI.ImageView.setHeight
	 */
	setHeight: function () { },
	/**
	 * image to display either as string url, Blob or File
	 * @alias Titanium.UI.ImageView.image
	 * @property {Object}
	 */
	image: {},
	/**
	 * Get the image to display either as string url, Blob or File
	 * @alias Titanium.UI.ImageView.getImage
	 * @return {Object}
	 */
	getImage: function () { return image; },
	/**
	 * Set the image to display either as string url, Blob or File
	 * @param {Object} value New value to set.
	 * @alias Titanium.UI.ImageView.setImage
	 */
	setImage: function () { },
	/**
	 * array of images (either as string url, Blob or File) to display in an animation
	 * @alias Titanium.UI.ImageView.images
	 * @property {Array}
	 */
	images: [],
	/**
	 * Get the array of images (either as string url, Blob or File) to display in an animation
	 * @alias Titanium.UI.ImageView.getImages
	 * @return {Array}
	 */
	getImages: function () { return images; },
	/**
	 * Set the array of images (either as string url, Blob or File) to display in an animation
	 * @param {Array} value New value to set.
	 * @alias Titanium.UI.ImageView.setImages
	 */
	setImages: function () { },
	/**
	 * property for the view left position. This position is relative to the view's parent. Can be either a float value or a dimension string ie 'auto' (default), '50%' (iPhone only).
	 * @alias Titanium.UI.ImageView.left
	 * @property {Float,String}
	 */
	left: 0.0,
	/**
	 * Get the property for the view left position. This position is relative to the view's parent. Can be either a float value or a dimension string ie 'auto' (default), '50%' (iPhone only).
	 * @alias Titanium.UI.ImageView.getLeft
	 * @return {Float,String}
	 */
	getLeft: function () { return left; },
	/**
	 * Set the property for the view left position. This position is relative to the view's parent. Can be either a float value or a dimension string ie 'auto' (default), '50%' (iPhone only).
	 * @param {Float,String} value New value to set.
	 * @alias Titanium.UI.ImageView.setLeft
	 */
	setLeft: function () { },
	/**
	 * the opacity from 0.0-1.0
	 * @alias Titanium.UI.ImageView.opacity
	 * @property {Float}
	 */
	opacity: 0.0,
	/**
	 * Get the the opacity from 0.0-1.0
	 * @alias Titanium.UI.ImageView.getOpacity
	 * @return {Float}
	 */
	getOpacity: function () { return opacity; },
	/**
	 * Set the the opacity from 0.0-1.0
	 * @param {Float} value New value to set.
	 * @alias Titanium.UI.ImageView.setOpacity
	 */
	setOpacity: function () { },
	/**
	 * readonly boolean to indicate if the animation is paused
	 * @alias Titanium.UI.ImageView.paused
	 * @property {Boolean}
	 */
	paused: false,
	/**
	 * Get the readonly boolean to indicate if the animation is paused
	 * @alias Titanium.UI.ImageView.getPaused
	 * @return {Boolean}
	 */
	getPaused: function () { return paused; },
	/**
	 * Set the readonly boolean to indicate if the animation is paused
	 * @param {Boolean} value New value to set.
	 * @alias Titanium.UI.ImageView.setPaused
	 */
	setPaused: function () { },
	/**
	 * boolean to indicate if the default image should be displaying while loading a remote image
	 * @alias Titanium.UI.ImageView.preventDefaultImage
	 * @property {Boolean}
	 */
	preventDefaultImage: false,
	/**
	 * Get the boolean to indicate if the default image should be displaying while loading a remote image
	 * @alias Titanium.UI.ImageView.getPreventDefaultImage
	 * @return {Boolean}
	 */
	getPreventDefaultImage: function () { return preventDefaultImage; },
	/**
	 * Set the boolean to indicate if the default image should be displaying while loading a remote image
	 * @param {Boolean} value New value to set.
	 * @alias Titanium.UI.ImageView.setPreventDefaultImage
	 */
	setPreventDefaultImage: function () { },
	/**
	 * number of times to repeat the image animation
	 * @alias Titanium.UI.ImageView.repeatCount
	 * @property {Integer}
	 */
	repeatCount: 0,
	/**
	 * Get the number of times to repeat the image animation
	 * @alias Titanium.UI.ImageView.getRepeatCount
	 * @return {Integer}
	 */
	getRepeatCount: function () { return repeatCount; },
	/**
	 * Set the number of times to repeat the image animation
	 * @param {Integer} value New value to set.
	 * @alias Titanium.UI.ImageView.setRepeatCount
	 */
	setRepeatCount: function () { },
	/**
	 * boolean to indicate if the animation should happen in reverse (from last to first)
	 * @alias Titanium.UI.ImageView.reverse
	 * @property {Boolean}
	 */
	reverse: false,
	/**
	 * Get the boolean to indicate if the animation should happen in reverse (from last to first)
	 * @alias Titanium.UI.ImageView.getReverse
	 * @return {Boolean}
	 */
	getReverse: function () { return reverse; },
	/**
	 * Set the boolean to indicate if the animation should happen in reverse (from last to first)
	 * @param {Boolean} value New value to set.
	 * @alias Titanium.UI.ImageView.setReverse
	 */
	setReverse: function () { },
	/**
	 * property for the view right position. This position is relative to the view's parent. Can be either a float value or a dimension string ie 'auto' (default), '50%' (iPhone only).
	 * @alias Titanium.UI.ImageView.right
	 * @property {Float,String}
	 */
	right: 0.0,
	/**
	 * Get the property for the view right position. This position is relative to the view's parent. Can be either a float value or a dimension string ie 'auto' (default), '50%' (iPhone only).
	 * @alias Titanium.UI.ImageView.getRight
	 * @return {Float,String}
	 */
	getRight: function () { return right; },
	/**
	 * Set the property for the view right position. This position is relative to the view's parent. Can be either a float value or a dimension string ie 'auto' (default), '50%' (iPhone only).
	 * @param {Float,String} value New value to set.
	 * @alias Titanium.UI.ImageView.setRight
	 */
	setRight: function () { },
	/**
	 * the size of the view as a dictionary of width and height properties
	 * @alias Titanium.UI.ImageView.size
	 * @property {Object}
	 */
	size: {},
	/**
	 * Get the the size of the view as a dictionary of width and height properties
	 * @alias Titanium.UI.ImageView.getSize
	 * @return {Object}
	 */
	getSize: function () { return size; },
	/**
	 * Set the the size of the view as a dictionary of width and height properties
	 * @param {Object} value New value to set.
	 * @alias Titanium.UI.ImageView.setSize
	 */
	setSize: function () { },
	/**
	 * One of Titanium.UI.Android.SOFT_KEYBOARD_DEFAULT_ON_FOCUS, Titanium.UI.Android.SOFT_KEYBOARD_HIDE_ON_FOCUS, or Titanium.UI.Android.SOFT_KEYBOARD_SHOW_ON_FOCUS. (Android only)
	 * @alias Titanium.UI.ImageView.softKeyboardOnFocus
	 * @property {Integer}
	 */
	softKeyboardOnFocus: 0,
	/**
	 * Get the One of Titanium.UI.Android.SOFT_KEYBOARD_DEFAULT_ON_FOCUS, Titanium.UI.Android.SOFT_KEYBOARD_HIDE_ON_FOCUS, or Titanium.UI.Android.SOFT_KEYBOARD_SHOW_ON_FOCUS. (Android only)
	 * @alias Titanium.UI.ImageView.getSoftKeyboardOnFocus
	 * @return {Integer}
	 */
	getSoftKeyboardOnFocus: function () { return softKeyboardOnFocus; },
	/**
	 * Set the One of Titanium.UI.Android.SOFT_KEYBOARD_DEFAULT_ON_FOCUS, Titanium.UI.Android.SOFT_KEYBOARD_HIDE_ON_FOCUS, or Titanium.UI.Android.SOFT_KEYBOARD_SHOW_ON_FOCUS. (Android only)
	 * @param {Integer} value New value to set.
	 * @alias Titanium.UI.ImageView.setSoftKeyboardOnFocus
	 */
	setSoftKeyboardOnFocus: function () { },
	/**
	 * property for the view top position. This position is relative to the view's parent. Can be either a float value or a dimension string ie 'auto' (default), '50%' (iPhone only).
	 * @alias Titanium.UI.ImageView.top
	 * @property {Float,String}
	 */
	top: 0.0,
	/**
	 * Get the property for the view top position. This position is relative to the view's parent. Can be either a float value or a dimension string ie 'auto' (default), '50%' (iPhone only).
	 * @alias Titanium.UI.ImageView.getTop
	 * @return {Float,String}
	 */
	getTop: function () { return top; },
	/**
	 * Set the property for the view top position. This position is relative to the view's parent. Can be either a float value or a dimension string ie 'auto' (default), '50%' (iPhone only).
	 * @param {Float,String} value New value to set.
	 * @alias Titanium.UI.ImageView.setTop
	 */
	setTop: function () { },
	/**
	 * a boolean indicating if the view should receive touch events (true, default) or forward them to peers (false)
	 * @alias Titanium.UI.ImageView.touchEnabled
	 * @property {Boolean}
	 */
	touchEnabled: false,
	/**
	 * Get the a boolean indicating if the view should receive touch events (true, default) or forward them to peers (false)
	 * @alias Titanium.UI.ImageView.getTouchEnabled
	 * @return {Boolean}
	 */
	getTouchEnabled: function () { return touchEnabled; },
	/**
	 * Set the a boolean indicating if the view should receive touch events (true, default) or forward them to peers (false)
	 * @param {Boolean} value New value to set.
	 * @alias Titanium.UI.ImageView.setTouchEnabled
	 */
	setTouchEnabled: function () { },
	/**
	 * the transformation matrix to apply to the view
	 * @alias Titanium.UI.ImageView.transform
	 * @property {Object}
	 */
	transform: {},
	/**
	 * Get the the transformation matrix to apply to the view
	 * @alias Titanium.UI.ImageView.getTransform
	 * @return {Object}
	 */
	getTransform: function () { return transform; },
	/**
	 * Set the the transformation matrix to apply to the view
	 * @param {Object} value New value to set.
	 * @alias Titanium.UI.ImageView.setTransform
	 */
	setTransform: function () { },
	/**
	 * url to the image to display (NOTE: this property is deprecated. use image instead)
	 * @alias Titanium.UI.ImageView.url
	 * @property {String}
	 */
	url: '',
	/**
	 * Get the url to the image to display (NOTE: this property is deprecated. use image instead)
	 * @alias Titanium.UI.ImageView.getUrl
	 * @return {String}
	 */
	getUrl: function () { return url; },
	/**
	 * Set the url to the image to display (NOTE: this property is deprecated. use image instead)
	 * @param {String} value New value to set.
	 * @alias Titanium.UI.ImageView.setUrl
	 */
	setUrl: function () { },
	/**
	 * a boolean of the visibility of the view
	 * @alias Titanium.UI.ImageView.visible
	 * @property {Boolean}
	 */
	visible: false,
	/**
	 * Get the a boolean of the visibility of the view
	 * @alias Titanium.UI.ImageView.getVisible
	 * @return {Boolean}
	 */
	getVisible: function () { return visible; },
	/**
	 * Set the a boolean of the visibility of the view
	 * @param {Boolean} value New value to set.
	 * @alias Titanium.UI.ImageView.setVisible
	 */
	setVisible: function () { },
	/**
	 * width of the image display
	 * @alias Titanium.UI.ImageView.width
	 * @property {Float}
	 */
	width: 0.0,
	/**
	 * Get the width of the image display
	 * @alias Titanium.UI.ImageView.getWidth
	 * @return {Float}
	 */
	getWidth: function () { return width; },
	/**
	 * Set the width of the image display
	 * @param {Float} value New value to set.
	 * @alias Titanium.UI.ImageView.setWidth
	 */
	setWidth: function () { },
	/**
	 * the z index position relative to other sibling views
	 * @alias Titanium.UI.ImageView.zIndex
	 * @property {Integer}
	 */
	zIndex: 0,
	/**
	 * Get the the z index position relative to other sibling views
	 * @alias Titanium.UI.ImageView.getZIndex
	 * @return {Integer}
	 */
	getZIndex: function () { return zIndex; },
	/**
	 * Set the the z index position relative to other sibling views
	 * @param {Integer} value New value to set.
	 * @alias Titanium.UI.ImageView.setZIndex
	 */
	setZIndex: function () { },
	/**
	 * add a child to the view hierarchy
	 * @param {Object} view the view to add to this views hiearchy
	 * @alias Titanium.UI.ImageView.add
	 */
	add: function (view) { },
	/**
	 * add an event listener for the instance to receive view triggered events
	 * @param {String} name name of the event
	 * @param {Function} callback callback function to invoke when the event is fired
	 * @alias Titanium.UI.ImageView.addEventListener
	 */
	addEventListener: function (name,callback) { },
	/**
	 * animate the view
	 * @param {Object} obj either a dictionary of animation properties or an Animation object
	 * @param {Function} callback function to be invoked upon completion of the animation
	 * @alias Titanium.UI.ImageView.animate
	 */
	animate: function (obj,callback) { },
	/**
	 * fire a synthesized event to the views listener
	 * @param {String} name name of the event
	 * @param {Object} event event object
	 * @alias Titanium.UI.ImageView.fireEvent
	 */
	fireEvent: function (name,event) { },
	/**
	 * hide the view
	 * @alias Titanium.UI.ImageView.hide
	 */
	hide: function () { },
	/**
	 * pause a started animation.
	 * @alias Titanium.UI.ImageView.pause
	 */
	pause: function () { },
	/**
	 * remove a previously add view from the view hiearchy
	 * @param {Object} view the view to remove from this views hiearchy
	 * @alias Titanium.UI.ImageView.remove
	 */
	remove: function (view) { },
	/**
	 * remove a previously added event listener
	 * @param {String} name name of the event
	 * @param {Function} callback callback function passed in addEventListener
	 * @alias Titanium.UI.ImageView.removeEventListener
	 */
	removeEventListener: function (name,callback) { },
	/**
	 * make the view visible
	 * @alias Titanium.UI.ImageView.show
	 */
	show: function () { },
	/**
	 * start the image animation. this method only works if you set multiple images
	 * @alias Titanium.UI.ImageView.start
	 */
	start: function () { },
	/**
	 * stop a started animation and reset the index to the first image
	 * @alias Titanium.UI.ImageView.stop
	 */
	stop: function () { },
	/**
	 * return the image as a Blob object
	 * @alias Titanium.UI.ImageView.toBlob
	 */
	toBlob: function () { },
	/**
	 * return a Blob image of the rendered view
	 * @param {Function} f function to be invoked upon completion. if non-null, this method will be performed asynchronously. if null, it will be performed immediately
	 * @alias Titanium.UI.ImageView.toImage
	 * @return {Object}
	 */
	toImage: function (f) { return {}; },
};

/**
 * A Label is created by the method Titanium.UI.createLabel.
 * @since 0.8
 */
Titanium.UI.Label = {
	/**
	 * a dictionary with properties x and y to indicate the anchor point value. anchor specifies the position by which animation should occur. center is 0.5, 0.5
	 * @alias Titanium.UI.Label.anchorPoint
	 * @property {Object}
	 */
	anchorPoint: {},
	/**
	 * Get the a dictionary with properties x and y to indicate the anchor point value. anchor specifies the position by which animation should occur. center is 0.5, 0.5
	 * @alias Titanium.UI.Label.getAnchorPoint
	 * @return {Object}
	 */
	getAnchorPoint: function () { return anchorPoint; },
	/**
	 * Set the a dictionary with properties x and y to indicate the anchor point value. anchor specifies the position by which animation should occur. center is 0.5, 0.5
	 * @param {Object} value New value to set.
	 * @alias Titanium.UI.Label.setAnchorPoint
	 */
	setAnchorPoint: function () { },
	/**
	 * read-only object with x and y properties of where the view is during animation
	 * @alias Titanium.UI.Label.animatedCenterPoint
	 * @property {Object}
	 */
	animatedCenterPoint: {},
	/**
	 * Get the read-only object with x and y properties of where the view is during animation
	 * @alias Titanium.UI.Label.getAnimatedCenterPoint
	 * @return {Object}
	 */
	getAnimatedCenterPoint: function () { return animatedCenterPoint; },
	/**
	 * Set the read-only object with x and y properties of where the view is during animation
	 * @param {Object} value New value to set.
	 * @alias Titanium.UI.Label.setAnimatedCenterPoint
	 */
	setAnimatedCenterPoint: function () { },
	/**
	 * One of Ti.UI.Android.LINKIFY constants. Automatically create clickable links for the specified type. (Android Only)
	 * @alias Titanium.UI.Label.autoLink
	 * @property {Integer}
	 */
	autoLink: 0,
	/**
	 * Get the One of Ti.UI.Android.LINKIFY constants. Automatically create clickable links for the specified type. (Android Only)
	 * @alias Titanium.UI.Label.getAutoLink
	 * @return {Integer}
	 */
	getAutoLink: function () { return autoLink; },
	/**
	 * Set the One of Ti.UI.Android.LINKIFY constants. Automatically create clickable links for the specified type. (Android Only)
	 * @param {Integer} value New value to set.
	 * @alias Titanium.UI.Label.setAutoLink
	 */
	setAutoLink: function () { },
	/**
	 * the background color of the view
	 * @alias Titanium.UI.Label.backgroundColor
	 * @property {String}
	 */
	backgroundColor: '',
	/**
	 * Get the the background color of the view
	 * @alias Titanium.UI.Label.getBackgroundColor
	 * @return {String}
	 */
	getBackgroundColor: function () { return backgroundColor; },
	/**
	 * Set the the background color of the view
	 * @param {String} value New value to set.
	 * @alias Titanium.UI.Label.setBackgroundColor
	 */
	setBackgroundColor: function () { },
	/**
	 * the disabled background color of the view. (Android)
	 * @alias Titanium.UI.Label.backgroundDisabledColor
	 * @property {String}
	 */
	backgroundDisabledColor: '',
	/**
	 * Get the the disabled background color of the view. (Android)
	 * @alias Titanium.UI.Label.getBackgroundDisabledColor
	 * @return {String}
	 */
	getBackgroundDisabledColor: function () { return backgroundDisabledColor; },
	/**
	 * Set the the disabled background color of the view. (Android)
	 * @param {String} value New value to set.
	 * @alias Titanium.UI.Label.setBackgroundDisabledColor
	 */
	setBackgroundDisabledColor: function () { },
	/**
	 * the disabled background image url of the view. (Android)
	 * @alias Titanium.UI.Label.backgroundDisabledImage
	 * @property {String}
	 */
	backgroundDisabledImage: '',
	/**
	 * Get the the disabled background image url of the view. (Android)
	 * @alias Titanium.UI.Label.getBackgroundDisabledImage
	 * @return {String}
	 */
	getBackgroundDisabledImage: function () { return backgroundDisabledImage; },
	/**
	 * Set the the disabled background image url of the view. (Android)
	 * @param {String} value New value to set.
	 * @alias Titanium.UI.Label.setBackgroundDisabledImage
	 */
	setBackgroundDisabledImage: function () { },
	/**
	 * the focused background color of the view. focusable must be true for normal views. (Android)
	 * @alias Titanium.UI.Label.backgroundFocusedColor
	 * @property {String}
	 */
	backgroundFocusedColor: '',
	/**
	 * Get the the focused background color of the view. focusable must be true for normal views. (Android)
	 * @alias Titanium.UI.Label.getBackgroundFocusedColor
	 * @return {String}
	 */
	getBackgroundFocusedColor: function () { return backgroundFocusedColor; },
	/**
	 * Set the the focused background color of the view. focusable must be true for normal views. (Android)
	 * @param {String} value New value to set.
	 * @alias Titanium.UI.Label.setBackgroundFocusedColor
	 */
	setBackgroundFocusedColor: function () { },
	/**
	 * the focused background image url of the view. focusable must be true for normal views. (Android)
	 * @alias Titanium.UI.Label.backgroundFocusedImage
	 * @property {String}
	 */
	backgroundFocusedImage: '',
	/**
	 * Get the the focused background image url of the view. focusable must be true for normal views. (Android)
	 * @alias Titanium.UI.Label.getBackgroundFocusedImage
	 * @return {String}
	 */
	getBackgroundFocusedImage: function () { return backgroundFocusedImage; },
	/**
	 * Set the the focused background image url of the view. focusable must be true for normal views. (Android)
	 * @param {String} value New value to set.
	 * @alias Titanium.UI.Label.setBackgroundFocusedImage
	 */
	setBackgroundFocusedImage: function () { },
	/**
	 * a background gradient for the view with the properties: type,startPoint,endPoint,startRadius,endRadius,backfillStart,backfillEnd,colors.
	 * @alias Titanium.UI.Label.backgroundGradient
	 * @property {Object}
	 */
	backgroundGradient: {},
	/**
	 * Get the a background gradient for the view with the properties: type,startPoint,endPoint,startRadius,endRadius,backfillStart,backfillEnd,colors.
	 * @alias Titanium.UI.Label.getBackgroundGradient
	 * @return {Object}
	 */
	getBackgroundGradient: function () { return backgroundGradient; },
	/**
	 * Set the a background gradient for the view with the properties: type,startPoint,endPoint,startRadius,endRadius,backfillStart,backfillEnd,colors.
	 * @param {Object} value New value to set.
	 * @alias Titanium.UI.Label.setBackgroundGradient
	 */
	setBackgroundGradient: function () { },
	/**
	 * background image for the label
	 * @alias Titanium.UI.Label.backgroundImage
	 * @property {String}
	 */
	backgroundImage: '',
	/**
	 * Get the background image for the label
	 * @alias Titanium.UI.Label.getBackgroundImage
	 * @return {String}
	 */
	getBackgroundImage: function () { return backgroundImage; },
	/**
	 * Set the background image for the label
	 * @param {String} value New value to set.
	 * @alias Titanium.UI.Label.setBackgroundImage
	 */
	setBackgroundImage: function () { },
	/**
	 * End caps specify the portion of an image that should not be resized when an image is stretched. This technique is used to implement buttons and other resizable image-based interface elements. When a button with end caps is resized, the resizing occurs only in the middle of the button, in the region between the end caps. The end caps themselves keep their original size and appearance. This property specifies the size of the left end cap. The middle (stretchable) portion is assumed to be 1 pixel wide. The right end cap is therefore computed by adding the size of the left end cap and the middle portion together and then subtracting that value from the width of the image
	 * @alias Titanium.UI.Label.backgroundLeftCap
	 * @property {Float}
	 */
	backgroundLeftCap: 0.0,
	/**
	 * Get the End caps specify the portion of an image that should not be resized when an image is stretched. This technique is used to implement buttons and other resizable image-based interface elements. When a button with end caps is resized, the resizing occurs only in the middle of the button, in the region between the end caps. The end caps themselves keep their original size and appearance. This property specifies the size of the left end cap. The middle (stretchable) portion is assumed to be 1 pixel wide. The right end cap is therefore computed by adding the size of the left end cap and the middle portion together and then subtracting that value from the width of the image
	 * @alias Titanium.UI.Label.getBackgroundLeftCap
	 * @return {Float}
	 */
	getBackgroundLeftCap: function () { return backgroundLeftCap; },
	/**
	 * Set the End caps specify the portion of an image that should not be resized when an image is stretched. This technique is used to implement buttons and other resizable image-based interface elements. When a button with end caps is resized, the resizing occurs only in the middle of the button, in the region between the end caps. The end caps themselves keep their original size and appearance. This property specifies the size of the left end cap. The middle (stretchable) portion is assumed to be 1 pixel wide. The right end cap is therefore computed by adding the size of the left end cap and the middle portion together and then subtracting that value from the width of the image
	 * @param {Float} value New value to set.
	 * @alias Titanium.UI.Label.setBackgroundLeftCap
	 */
	setBackgroundLeftCap: function () { },
	/**
	 * the number of pixels to extend the background image past the label on the bottom
	 * @alias Titanium.UI.Label.backgroundPaddingBottom
	 * @property {Integer}
	 */
	backgroundPaddingBottom: 0,
	/**
	 * Get the the number of pixels to extend the background image past the label on the bottom
	 * @alias Titanium.UI.Label.getBackgroundPaddingBottom
	 * @return {Integer}
	 */
	getBackgroundPaddingBottom: function () { return backgroundPaddingBottom; },
	/**
	 * Set the the number of pixels to extend the background image past the label on the bottom
	 * @param {Integer} value New value to set.
	 * @alias Titanium.UI.Label.setBackgroundPaddingBottom
	 */
	setBackgroundPaddingBottom: function () { },
	/**
	 * the number of pixels to extend the background image past the label on the left
	 * @alias Titanium.UI.Label.backgroundPaddingLeft
	 * @property {Integer}
	 */
	backgroundPaddingLeft: 0,
	/**
	 * Get the the number of pixels to extend the background image past the label on the left
	 * @alias Titanium.UI.Label.getBackgroundPaddingLeft
	 * @return {Integer}
	 */
	getBackgroundPaddingLeft: function () { return backgroundPaddingLeft; },
	/**
	 * Set the the number of pixels to extend the background image past the label on the left
	 * @param {Integer} value New value to set.
	 * @alias Titanium.UI.Label.setBackgroundPaddingLeft
	 */
	setBackgroundPaddingLeft: function () { },
	/**
	 * the number of pixels to extend the background image past the label on the right
	 * @alias Titanium.UI.Label.backgroundPaddingRight
	 * @property {Integer}
	 */
	backgroundPaddingRight: 0,
	/**
	 * Get the the number of pixels to extend the background image past the label on the right
	 * @alias Titanium.UI.Label.getBackgroundPaddingRight
	 * @return {Integer}
	 */
	getBackgroundPaddingRight: function () { return backgroundPaddingRight; },
	/**
	 * Set the the number of pixels to extend the background image past the label on the right
	 * @param {Integer} value New value to set.
	 * @alias Titanium.UI.Label.setBackgroundPaddingRight
	 */
	setBackgroundPaddingRight: function () { },
	/**
	 * the number of pixels to extend the background image past the label on the top
	 * @alias Titanium.UI.Label.backgroundPaddingTop
	 * @property {Integer}
	 */
	backgroundPaddingTop: 0,
	/**
	 * Get the the number of pixels to extend the background image past the label on the top
	 * @alias Titanium.UI.Label.getBackgroundPaddingTop
	 * @return {Integer}
	 */
	getBackgroundPaddingTop: function () { return backgroundPaddingTop; },
	/**
	 * Set the the number of pixels to extend the background image past the label on the top
	 * @param {Integer} value New value to set.
	 * @alias Titanium.UI.Label.setBackgroundPaddingTop
	 */
	setBackgroundPaddingTop: function () { },
	/**
	 * the selected background color of the view. focusable must be true for normal views. (Android)
	 * @alias Titanium.UI.Label.backgroundSelectedColor
	 * @property {String}
	 */
	backgroundSelectedColor: '',
	/**
	 * Get the the selected background color of the view. focusable must be true for normal views. (Android)
	 * @alias Titanium.UI.Label.getBackgroundSelectedColor
	 * @return {String}
	 */
	getBackgroundSelectedColor: function () { return backgroundSelectedColor; },
	/**
	 * Set the the selected background color of the view. focusable must be true for normal views. (Android)
	 * @param {String} value New value to set.
	 * @alias Titanium.UI.Label.setBackgroundSelectedColor
	 */
	setBackgroundSelectedColor: function () { },
	/**
	 * the selected background image url of the view. focusable must be true for normal views. (Android)
	 * @alias Titanium.UI.Label.backgroundSelectedImage
	 * @property {String}
	 */
	backgroundSelectedImage: '',
	/**
	 * Get the the selected background image url of the view. focusable must be true for normal views. (Android)
	 * @alias Titanium.UI.Label.getBackgroundSelectedImage
	 * @return {String}
	 */
	getBackgroundSelectedImage: function () { return backgroundSelectedImage; },
	/**
	 * Set the the selected background image url of the view. focusable must be true for normal views. (Android)
	 * @param {String} value New value to set.
	 * @alias Titanium.UI.Label.setBackgroundSelectedImage
	 */
	setBackgroundSelectedImage: function () { },
	/**
	 * End caps specify the portion of an image that should not be resized when an image is stretched. This technique is used to implement buttons and other resizable image-based interface elements. When a button with end caps is resized, the resizing occurs only in the middle of the button, in the region between the end caps. The end caps themselves keep their original size and appearance. This property specifies the size of the top end cap. The middle (stretchable) portion is assumed to be 1 pixel wide. The bottom end cap is therefore computed by adding the size of the top end cap and the middle portion together and then subtracting that value from the height of the image
	 * @alias Titanium.UI.Label.backgroundTopCap
	 * @property {Float}
	 */
	backgroundTopCap: 0.0,
	/**
	 * Get the End caps specify the portion of an image that should not be resized when an image is stretched. This technique is used to implement buttons and other resizable image-based interface elements. When a button with end caps is resized, the resizing occurs only in the middle of the button, in the region between the end caps. The end caps themselves keep their original size and appearance. This property specifies the size of the top end cap. The middle (stretchable) portion is assumed to be 1 pixel wide. The bottom end cap is therefore computed by adding the size of the top end cap and the middle portion together and then subtracting that value from the height of the image
	 * @alias Titanium.UI.Label.getBackgroundTopCap
	 * @return {Float}
	 */
	getBackgroundTopCap: function () { return backgroundTopCap; },
	/**
	 * Set the End caps specify the portion of an image that should not be resized when an image is stretched. This technique is used to implement buttons and other resizable image-based interface elements. When a button with end caps is resized, the resizing occurs only in the middle of the button, in the region between the end caps. The end caps themselves keep their original size and appearance. This property specifies the size of the top end cap. The middle (stretchable) portion is assumed to be 1 pixel wide. The bottom end cap is therefore computed by adding the size of the top end cap and the middle portion together and then subtracting that value from the height of the image
	 * @param {Float} value New value to set.
	 * @alias Titanium.UI.Label.setBackgroundTopCap
	 */
	setBackgroundTopCap: function () { },
	/**
	 * the border color of the view
	 * @alias Titanium.UI.Label.borderColor
	 * @property {String}
	 */
	borderColor: '',
	/**
	 * Get the the border color of the view
	 * @alias Titanium.UI.Label.getBorderColor
	 * @return {String}
	 */
	getBorderColor: function () { return borderColor; },
	/**
	 * Set the the border color of the view
	 * @param {String} value New value to set.
	 * @alias Titanium.UI.Label.setBorderColor
	 */
	setBorderColor: function () { },
	/**
	 * the border radius of the view
	 * @alias Titanium.UI.Label.borderRadius
	 * @property {Float}
	 */
	borderRadius: 0.0,
	/**
	 * Get the the border radius of the view
	 * @alias Titanium.UI.Label.getBorderRadius
	 * @return {Float}
	 */
	getBorderRadius: function () { return borderRadius; },
	/**
	 * Set the the border radius of the view
	 * @param {Float} value New value to set.
	 * @alias Titanium.UI.Label.setBorderRadius
	 */
	setBorderRadius: function () { },
	/**
	 * the border width of the view
	 * @alias Titanium.UI.Label.borderWidth
	 * @property {Float}
	 */
	borderWidth: 0.0,
	/**
	 * Get the the border width of the view
	 * @alias Titanium.UI.Label.getBorderWidth
	 * @return {Float}
	 */
	getBorderWidth: function () { return borderWidth; },
	/**
	 * Set the the border width of the view
	 * @param {Float} value New value to set.
	 * @alias Titanium.UI.Label.setBorderWidth
	 */
	setBorderWidth: function () { },
	/**
	 * property for the view bottom position. This position is relative to the view's parent. Can be either a float value or a dimension string ie 'auto' (default), '50%' (iPhone only).
	 * @alias Titanium.UI.Label.bottom
	 * @property {Float,String}
	 */
	bottom: 0.0,
	/**
	 * Get the property for the view bottom position. This position is relative to the view's parent. Can be either a float value or a dimension string ie 'auto' (default), '50%' (iPhone only).
	 * @alias Titanium.UI.Label.getBottom
	 * @return {Float,String}
	 */
	getBottom: function () { return bottom; },
	/**
	 * Set the property for the view bottom position. This position is relative to the view's parent. Can be either a float value or a dimension string ie 'auto' (default), '50%' (iPhone only).
	 * @param {Float,String} value New value to set.
	 * @alias Titanium.UI.Label.setBottom
	 */
	setBottom: function () { },
	/**
	 * a dictionary with properties x and y to indicate the center of the views position relative to the parent view
	 * @alias Titanium.UI.Label.center
	 * @property {Object}
	 */
	center: {},
	/**
	 * Get the a dictionary with properties x and y to indicate the center of the views position relative to the parent view
	 * @alias Titanium.UI.Label.getCenter
	 * @return {Object}
	 */
	getCenter: function () { return center; },
	/**
	 * Set the a dictionary with properties x and y to indicate the center of the views position relative to the parent view
	 * @param {Object} value New value to set.
	 * @alias Titanium.UI.Label.setCenter
	 */
	setCenter: function () { },
	/**
	 * the color of the label
	 * @alias Titanium.UI.Label.color
	 * @property {String}
	 */
	color: '',
	/**
	 * Get the the color of the label
	 * @alias Titanium.UI.Label.getColor
	 * @return {String}
	 */
	getColor: function () { return color; },
	/**
	 * Set the the color of the label
	 * @param {String} value New value to set.
	 * @alias Titanium.UI.Label.setColor
	 */
	setColor: function () { },
	/**
	 * Turn on/off the addition of ellipses at the end of the label if the text is too large to fit. (Android Only, default false)
	 * @alias Titanium.UI.Label.ellipsize
	 * @property {bool}
	 */
	ellipsize: {},
	/**
	 * Get the Turn on/off the addition of ellipses at the end of the label if the text is too large to fit. (Android Only, default false)
	 * @alias Titanium.UI.Label.getEllipsize
	 * @return {bool}
	 */
	getEllipsize: function () { return ellipsize; },
	/**
	 * Set the Turn on/off the addition of ellipses at the end of the label if the text is too large to fit. (Android Only, default false)
	 * @param {bool} value New value to set.
	 * @alias Titanium.UI.Label.setEllipsize
	 */
	setEllipsize: function () { },
	/**
	 * Set true if you want a view to be focusable when navigating with the trackball or D-Pad. Default: false. (Android Only)
	 * @alias Titanium.UI.Label.focusable
	 * @property {Boolean}
	 */
	focusable: false,
	/**
	 * Get the Set true if you want a view to be focusable when navigating with the trackball or D-Pad. Default: false. (Android Only)
	 * @alias Titanium.UI.Label.getFocusable
	 * @return {Boolean}
	 */
	getFocusable: function () { return focusable; },
	/**
	 * Set the Set true if you want a view to be focusable when navigating with the trackball or D-Pad. Default: false. (Android Only)
	 * @param {Boolean} value New value to set.
	 * @alias Titanium.UI.Label.setFocusable
	 */
	setFocusable: function () { },
	/**
	 * the label font object properties
	 * @alias Titanium.UI.Label.font
	 * @property {Object}
	 */
	font: {},
	/**
	 * Get the the label font object properties
	 * @alias Titanium.UI.Label.getFont
	 * @return {Object}
	 */
	getFont: function () { return font; },
	/**
	 * Set the the label font object properties
	 * @param {Object} value New value to set.
	 * @alias Titanium.UI.Label.setFont
	 */
	setFont: function () { },
	/**
	 * the font family
	 * @alias Titanium.UI.Label.font-family
	 * @property {String}
	 */
	font-family: '',
	/**
	 * Get the the font family
	 * @alias Titanium.UI.Label.getFont-family
	 * @return {String}
	 */
	getFont-family: function () { return font-family; },
	/**
	 * Set the the font family
	 * @param {String} value New value to set.
	 * @alias Titanium.UI.Label.setFont-family
	 */
	setFont-family: function () { },
	/**
	 * the font size
	 * @alias Titanium.UI.Label.font-size
	 * @property {String}
	 */
	font-size: '',
	/**
	 * Get the the font size
	 * @alias Titanium.UI.Label.getFont-size
	 * @return {String}
	 */
	getFont-size: function () { return font-size; },
	/**
	 * Set the the font size
	 * @param {String} value New value to set.
	 * @alias Titanium.UI.Label.setFont-size
	 */
	setFont-size: function () { },
	/**
	 * the font style, either normal or italics
	 * @alias Titanium.UI.Label.font-style
	 * @property {String}
	 */
	font-style: '',
	/**
	 * Get the the font style, either normal or italics
	 * @alias Titanium.UI.Label.getFont-style
	 * @return {String}
	 */
	getFont-style: function () { return font-style; },
	/**
	 * Set the the font style, either normal or italics
	 * @param {String} value New value to set.
	 * @alias Titanium.UI.Label.setFont-style
	 */
	setFont-style: function () { },
	/**
	 * the font weight, either normal or bold
	 * @alias Titanium.UI.Label.font-weight
	 * @property {String}
	 */
	font-weight: '',
	/**
	 * Get the the font weight, either normal or bold
	 * @alias Titanium.UI.Label.getFont-weight
	 * @return {String}
	 */
	getFont-weight: function () { return font-weight; },
	/**
	 * Set the the font weight, either normal or bold
	 * @param {String} value New value to set.
	 * @alias Titanium.UI.Label.setFont-weight
	 */
	setFont-weight: function () { },
	/**
	 * property for the view height. Can be either a float value or a dimension string ie 'auto' (default), '50%' (iPhone only).
	 * @alias Titanium.UI.Label.height
	 * @property {Float,String}
	 */
	height: 0.0,
	/**
	 * Get the property for the view height. Can be either a float value or a dimension string ie 'auto' (default), '50%' (iPhone only).
	 * @alias Titanium.UI.Label.getHeight
	 * @return {Float,String}
	 */
	getHeight: function () { return height; },
	/**
	 * Set the property for the view height. Can be either a float value or a dimension string ie 'auto' (default), '50%' (iPhone only).
	 * @param {Float,String} value New value to set.
	 * @alias Titanium.UI.Label.setHeight
	 */
	setHeight: function () { },
	/**
	 * the color of the label when in the highlighted state
	 * @alias Titanium.UI.Label.highlightedColor
	 * @property {String}
	 */
	highlightedColor: '',
	/**
	 * Get the the color of the label when in the highlighted state
	 * @alias Titanium.UI.Label.getHighlightedColor
	 * @return {String}
	 */
	getHighlightedColor: function () { return highlightedColor; },
	/**
	 * Set the the color of the label when in the highlighted state
	 * @param {String} value New value to set.
	 * @alias Titanium.UI.Label.setHighlightedColor
	 */
	setHighlightedColor: function () { },
	/**
	 * simple html formatting. (Android Only)
	 * @alias Titanium.UI.Label.html
	 * @property {String}
	 */
	html: '',
	/**
	 * Get the simple html formatting. (Android Only)
	 * @alias Titanium.UI.Label.getHtml
	 * @return {String}
	 */
	getHtml: function () { return html; },
	/**
	 * Set the simple html formatting. (Android Only)
	 * @param {String} value New value to set.
	 * @alias Titanium.UI.Label.setHtml
	 */
	setHtml: function () { },
	/**
	 * property for the view left position. This position is relative to the view's parent. Can be either a float value or a dimension string ie 'auto' (default), '50%' (iPhone only).
	 * @alias Titanium.UI.Label.left
	 * @property {Float,String}
	 */
	left: 0.0,
	/**
	 * Get the property for the view left position. This position is relative to the view's parent. Can be either a float value or a dimension string ie 'auto' (default), '50%' (iPhone only).
	 * @alias Titanium.UI.Label.getLeft
	 * @return {Float,String}
	 */
	getLeft: function () { return left; },
	/**
	 * Set the property for the view left position. This position is relative to the view's parent. Can be either a float value or a dimension string ie 'auto' (default), '50%' (iPhone only).
	 * @param {Float,String} value New value to set.
	 * @alias Titanium.UI.Label.setLeft
	 */
	setLeft: function () { },
	/**
	 * the minimum size of the font when the font is sized based on the contents.  Enables font scaling to fit and forces the label content to be limited to a single line
	 * @alias Titanium.UI.Label.minimumFontSize
	 * @property {Integer}
	 */
	minimumFontSize: 0,
	/**
	 * Get the the minimum size of the font when the font is sized based on the contents.  Enables font scaling to fit and forces the label content to be limited to a single line
	 * @alias Titanium.UI.Label.getMinimumFontSize
	 * @return {Integer}
	 */
	getMinimumFontSize: function () { return minimumFontSize; },
	/**
	 * Set the the minimum size of the font when the font is sized based on the contents.  Enables font scaling to fit and forces the label content to be limited to a single line
	 * @param {Integer} value New value to set.
	 * @alias Titanium.UI.Label.setMinimumFontSize
	 */
	setMinimumFontSize: function () { },
	/**
	 * the opacity from 0.0-1.0
	 * @alias Titanium.UI.Label.opacity
	 * @property {Float}
	 */
	opacity: 0.0,
	/**
	 * Get the the opacity from 0.0-1.0
	 * @alias Titanium.UI.Label.getOpacity
	 * @return {Float}
	 */
	getOpacity: function () { return opacity; },
	/**
	 * Set the the opacity from 0.0-1.0
	 * @param {Float} value New value to set.
	 * @alias Titanium.UI.Label.setOpacity
	 */
	setOpacity: function () { },
	/**
	 * property for the view right position. This position is relative to the view's parent. Can be either a float value or a dimension string ie 'auto' (default), '50%' (iPhone only).
	 * @alias Titanium.UI.Label.right
	 * @property {Float,String}
	 */
	right: 0.0,
	/**
	 * Get the property for the view right position. This position is relative to the view's parent. Can be either a float value or a dimension string ie 'auto' (default), '50%' (iPhone only).
	 * @alias Titanium.UI.Label.getRight
	 * @return {Float,String}
	 */
	getRight: function () { return right; },
	/**
	 * Set the property for the view right position. This position is relative to the view's parent. Can be either a float value or a dimension string ie 'auto' (default), '50%' (iPhone only).
	 * @param {Float,String} value New value to set.
	 * @alias Titanium.UI.Label.setRight
	 */
	setRight: function () { },
	/**
	 * the text shadow color
	 * @alias Titanium.UI.Label.shadowColor
	 * @property {String}
	 */
	shadowColor: '',
	/**
	 * Get the the text shadow color
	 * @alias Titanium.UI.Label.getShadowColor
	 * @return {String}
	 */
	getShadowColor: function () { return shadowColor; },
	/**
	 * Set the the text shadow color
	 * @param {String} value New value to set.
	 * @alias Titanium.UI.Label.setShadowColor
	 */
	setShadowColor: function () { },
	/**
	 * the shadow offset as a dictionary with the properties x and y
	 * @alias Titanium.UI.Label.shadowOffset
	 * @property {Object}
	 */
	shadowOffset: {},
	/**
	 * Get the the shadow offset as a dictionary with the properties x and y
	 * @alias Titanium.UI.Label.getShadowOffset
	 * @return {Object}
	 */
	getShadowOffset: function () { return shadowOffset; },
	/**
	 * Set the the shadow offset as a dictionary with the properties x and y
	 * @param {Object} value New value to set.
	 * @alias Titanium.UI.Label.setShadowOffset
	 */
	setShadowOffset: function () { },
	/**
	 * the size of the view as a dictionary of width and height properties
	 * @alias Titanium.UI.Label.size
	 * @property {Object}
	 */
	size: {},
	/**
	 * Get the the size of the view as a dictionary of width and height properties
	 * @alias Titanium.UI.Label.getSize
	 * @return {Object}
	 */
	getSize: function () { return size; },
	/**
	 * Set the the size of the view as a dictionary of width and height properties
	 * @param {Object} value New value to set.
	 * @alias Titanium.UI.Label.setSize
	 */
	setSize: function () { },
	/**
	 * One of Titanium.UI.Android.SOFT_KEYBOARD_DEFAULT_ON_FOCUS, Titanium.UI.Android.SOFT_KEYBOARD_HIDE_ON_FOCUS, or Titanium.UI.Android.SOFT_KEYBOARD_SHOW_ON_FOCUS. (Android only)
	 * @alias Titanium.UI.Label.softKeyboardOnFocus
	 * @property {Integer}
	 */
	softKeyboardOnFocus: 0,
	/**
	 * Get the One of Titanium.UI.Android.SOFT_KEYBOARD_DEFAULT_ON_FOCUS, Titanium.UI.Android.SOFT_KEYBOARD_HIDE_ON_FOCUS, or Titanium.UI.Android.SOFT_KEYBOARD_SHOW_ON_FOCUS. (Android only)
	 * @alias Titanium.UI.Label.getSoftKeyboardOnFocus
	 * @return {Integer}
	 */
	getSoftKeyboardOnFocus: function () { return softKeyboardOnFocus; },
	/**
	 * Set the One of Titanium.UI.Android.SOFT_KEYBOARD_DEFAULT_ON_FOCUS, Titanium.UI.Android.SOFT_KEYBOARD_HIDE_ON_FOCUS, or Titanium.UI.Android.SOFT_KEYBOARD_SHOW_ON_FOCUS. (Android only)
	 * @param {Integer} value New value to set.
	 * @alias Titanium.UI.Label.setSoftKeyboardOnFocus
	 */
	setSoftKeyboardOnFocus: function () { },
	/**
	 * the text of the label
	 * @alias Titanium.UI.Label.text
	 * @property {String}
	 */
	text: '',
	/**
	 * Get the the text of the label
	 * @alias Titanium.UI.Label.getText
	 * @return {String}
	 */
	getText: function () { return text; },
	/**
	 * Set the the text of the label
	 * @param {String} value New value to set.
	 * @alias Titanium.UI.Label.setText
	 */
	setText: function () { },
	/**
	 * the alignment constant or string value such as left, center or right
	 * @alias Titanium.UI.Label.textAlign
	 * @property {String,Integer}
	 */
	textAlign: '',
	/**
	 * Get the the alignment constant or string value such as left, center or right
	 * @alias Titanium.UI.Label.getTextAlign
	 * @return {String,Integer}
	 */
	getTextAlign: function () { return textAlign; },
	/**
	 * Set the the alignment constant or string value such as left, center or right
	 * @param {String,Integer} value New value to set.
	 * @alias Titanium.UI.Label.setTextAlign
	 */
	setTextAlign: function () { },
	/**
	 * the key in the locale file to use for the text property
	 * @alias Titanium.UI.Label.textid
	 * @property {String}
	 */
	textid: '',
	/**
	 * Get the the key in the locale file to use for the text property
	 * @alias Titanium.UI.Label.getTextid
	 * @return {String}
	 */
	getTextid: function () { return textid; },
	/**
	 * Set the the key in the locale file to use for the text property
	 * @param {String} value New value to set.
	 * @alias Titanium.UI.Label.setTextid
	 */
	setTextid: function () { },
	/**
	 * property for the view top position. This position is relative to the view's parent. Can be either a float value or a dimension string ie 'auto' (default), '50%' (iPhone only).
	 * @alias Titanium.UI.Label.top
	 * @property {Float,String}
	 */
	top: 0.0,
	/**
	 * Get the property for the view top position. This position is relative to the view's parent. Can be either a float value or a dimension string ie 'auto' (default), '50%' (iPhone only).
	 * @alias Titanium.UI.Label.getTop
	 * @return {Float,String}
	 */
	getTop: function () { return top; },
	/**
	 * Set the property for the view top position. This position is relative to the view's parent. Can be either a float value or a dimension string ie 'auto' (default), '50%' (iPhone only).
	 * @param {Float,String} value New value to set.
	 * @alias Titanium.UI.Label.setTop
	 */
	setTop: function () { },
	/**
	 * a boolean indicating if the view should receive touch events (true, default) or forward them to peers (false)
	 * @alias Titanium.UI.Label.touchEnabled
	 * @property {Boolean}
	 */
	touchEnabled: false,
	/**
	 * Get the a boolean indicating if the view should receive touch events (true, default) or forward them to peers (false)
	 * @alias Titanium.UI.Label.getTouchEnabled
	 * @return {Boolean}
	 */
	getTouchEnabled: function () { return touchEnabled; },
	/**
	 * Set the a boolean indicating if the view should receive touch events (true, default) or forward them to peers (false)
	 * @param {Boolean} value New value to set.
	 * @alias Titanium.UI.Label.setTouchEnabled
	 */
	setTouchEnabled: function () { },
	/**
	 * the transformation matrix to apply to the view
	 * @alias Titanium.UI.Label.transform
	 * @property {Object}
	 */
	transform: {},
	/**
	 * Get the the transformation matrix to apply to the view
	 * @alias Titanium.UI.Label.getTransform
	 * @return {Object}
	 */
	getTransform: function () { return transform; },
	/**
	 * Set the the transformation matrix to apply to the view
	 * @param {Object} value New value to set.
	 * @alias Titanium.UI.Label.setTransform
	 */
	setTransform: function () { },
	/**
	 * a boolean of the visibility of the view
	 * @alias Titanium.UI.Label.visible
	 * @property {Boolean}
	 */
	visible: false,
	/**
	 * Get the a boolean of the visibility of the view
	 * @alias Titanium.UI.Label.getVisible
	 * @return {Boolean}
	 */
	getVisible: function () { return visible; },
	/**
	 * Set the a boolean of the visibility of the view
	 * @param {Boolean} value New value to set.
	 * @alias Titanium.UI.Label.setVisible
	 */
	setVisible: function () { },
	/**
	 * property for the view width. Can be either a float value or a dimension string ie 'auto' (default), '50%' (iPhone only).
	 * @alias Titanium.UI.Label.width
	 * @property {Float,String}
	 */
	width: 0.0,
	/**
	 * Get the property for the view width. Can be either a float value or a dimension string ie 'auto' (default), '50%' (iPhone only).
	 * @alias Titanium.UI.Label.getWidth
	 * @return {Float,String}
	 */
	getWidth: function () { return width; },
	/**
	 * Set the property for the view width. Can be either a float value or a dimension string ie 'auto' (default), '50%' (iPhone only).
	 * @param {Float,String} value New value to set.
	 * @alias Titanium.UI.Label.setWidth
	 */
	setWidth: function () { },
	/**
	 * Turn on/off word wrapping in the label. (Android Only - default true)
	 * @alias Titanium.UI.Label.wordWrap
	 * @property {bool}
	 */
	wordWrap: {},
	/**
	 * Get the Turn on/off word wrapping in the label. (Android Only - default true)
	 * @alias Titanium.UI.Label.getWordWrap
	 * @return {bool}
	 */
	getWordWrap: function () { return wordWrap; },
	/**
	 * Set the Turn on/off word wrapping in the label. (Android Only - default true)
	 * @param {bool} value New value to set.
	 * @alias Titanium.UI.Label.setWordWrap
	 */
	setWordWrap: function () { },
	/**
	 * the z index position relative to other sibling views
	 * @alias Titanium.UI.Label.zIndex
	 * @property {Integer}
	 */
	zIndex: 0,
	/**
	 * Get the the z index position relative to other sibling views
	 * @alias Titanium.UI.Label.getZIndex
	 * @return {Integer}
	 */
	getZIndex: function () { return zIndex; },
	/**
	 * Set the the z index position relative to other sibling views
	 * @param {Integer} value New value to set.
	 * @alias Titanium.UI.Label.setZIndex
	 */
	setZIndex: function () { },
	/**
	 * add a child to the view hierarchy
	 * @param {Object} view the view to add to this views hiearchy
	 * @alias Titanium.UI.Label.add
	 */
	add: function (view) { },
	/**
	 * add an event listener for the instance to receive view triggered events
	 * @param {String} name name of the event
	 * @param {Function} callback callback function to invoke when the event is fired
	 * @alias Titanium.UI.Label.addEventListener
	 */
	addEventListener: function (name,callback) { },
	/**
	 * animate the view
	 * @param {Object} obj either a dictionary of animation properties or an Animation object
	 * @param {Function} callback function to be invoked upon completion of the animation
	 * @alias Titanium.UI.Label.animate
	 */
	animate: function (obj,callback) { },
	/**
	 * fire a synthesized event to the views listener
	 * @param {String} name name of the event
	 * @param {Object} event event object
	 * @alias Titanium.UI.Label.fireEvent
	 */
	fireEvent: function (name,event) { },
	/**
	 * hide the view
	 * @alias Titanium.UI.Label.hide
	 */
	hide: function () { },
	/**
	 * remove a previously add view from the view hiearchy
	 * @param {Object} view the view to remove from this views hiearchy
	 * @alias Titanium.UI.Label.remove
	 */
	remove: function (view) { },
	/**
	 * remove a previously added event listener
	 * @param {String} name name of the event
	 * @param {Function} callback callback function passed in addEventListener
	 * @alias Titanium.UI.Label.removeEventListener
	 */
	removeEventListener: function (name,callback) { },
	/**
	 * make the view visible
	 * @alias Titanium.UI.Label.show
	 */
	show: function () { },
	/**
	 * return a Blob image of the rendered view
	 * @param {Function} f function to be invoked upon completion. if non-null, this method will be performed asynchronously. if null, it will be performed immediately
	 * @alias Titanium.UI.Label.toImage
	 * @return {Object}
	 */
	toImage: function (f) { return {}; },
};

/**
 * The Option Dialog is created by Titanium.UI.createOptionDialog and allows you to show a modal dialog of one or more options to the user.
 * @since 0.8
 */
Titanium.UI.OptionDialog = {
	/**
	 * A Titanium.UI.View. Allows for arbitrary contents inside a native dialog. Works for any dialog. (Android)
	 * @alias Titanium.UI.OptionDialog.androidView
	 * @property {Object}
	 */
	androidView: {},
	/**
	 * Get the A Titanium.UI.View. Allows for arbitrary contents inside a native dialog. Works for any dialog. (Android)
	 * @alias Titanium.UI.OptionDialog.getAndroidView
	 * @return {Object}
	 */
	getAndroidView: function () { return androidView; },
	/**
	 * Set the A Titanium.UI.View. Allows for arbitrary contents inside a native dialog. Works for any dialog. (Android)
	 * @param {Object} value New value to set.
	 * @alias Titanium.UI.OptionDialog.setAndroidView
	 */
	setAndroidView: function () { },
	/**
	 * an index to indicate which button should be the cancel button
	 * @alias Titanium.UI.OptionDialog.cancel
	 * @property {Integer}
	 */
	cancel: 0,
	/**
	 * Get the an index to indicate which button should be the cancel button
	 * @alias Titanium.UI.OptionDialog.getCancel
	 * @return {Integer}
	 */
	getCancel: function () { return cancel; },
	/**
	 * Set the an index to indicate which button should be the cancel button
	 * @param {Integer} value New value to set.
	 * @alias Titanium.UI.OptionDialog.setCancel
	 */
	setCancel: function () { },
	/**
	 * the destructive button (indicated by a visual clue in the UI)
	 * @alias Titanium.UI.OptionDialog.destructive
	 * @property {Integer}
	 */
	destructive: 0,
	/**
	 * Get the the destructive button (indicated by a visual clue in the UI)
	 * @alias Titanium.UI.OptionDialog.getDestructive
	 * @return {Integer}
	 */
	getDestructive: function () { return destructive; },
	/**
	 * Set the the destructive button (indicated by a visual clue in the UI)
	 * @param {Integer} value New value to set.
	 * @alias Titanium.UI.OptionDialog.setDestructive
	 */
	setDestructive: function () { },
	/**
	 * array of button names as strings
	 * @alias Titanium.UI.OptionDialog.options
	 * @property {Array}
	 */
	options: [],
	/**
	 * Get the array of button names as strings
	 * @alias Titanium.UI.OptionDialog.getOptions
	 * @return {Array}
	 */
	getOptions: function () { return options; },
	/**
	 * Set the array of button names as strings
	 * @param {Array} value New value to set.
	 * @alias Titanium.UI.OptionDialog.setOptions
	 */
	setOptions: function () { },
	/**
	 * the title of the dialog
	 * @alias Titanium.UI.OptionDialog.title
	 * @property {String}
	 */
	title: '',
	/**
	 * Get the the title of the dialog
	 * @alias Titanium.UI.OptionDialog.getTitle
	 * @return {String}
	 */
	getTitle: function () { return title; },
	/**
	 * Set the the title of the dialog
	 * @param {String} value New value to set.
	 * @alias Titanium.UI.OptionDialog.setTitle
	 */
	setTitle: function () { },
	/**
	 * the key in the locale file to use for the title property
	 * @alias Titanium.UI.OptionDialog.titleid
	 * @property {String}
	 */
	titleid: '',
	/**
	 * Get the the key in the locale file to use for the title property
	 * @alias Titanium.UI.OptionDialog.getTitleid
	 * @return {String}
	 */
	getTitleid: function () { return titleid; },
	/**
	 * Set the the key in the locale file to use for the title property
	 * @param {String} value New value to set.
	 * @alias Titanium.UI.OptionDialog.setTitleid
	 */
	setTitleid: function () { },
	/**
	 * cause the dialog to become visible
	 * @alias Titanium.UI.OptionDialog.show
	 */
	show: function () { },
};

/**
 * A Picker is created by the method Titanium.UI.createPicker.  A Picker can be used to select one or more fixed values.
 * @since 0.8
 */
Titanium.UI.Picker = {
	/**
	 * array of column values
	 * @alias Titanium.UI.Picker.columns
	 * @property {Array}
	 */
	columns: [],
	/**
	 * Get the array of column values
	 * @alias Titanium.UI.Picker.getColumns
	 * @return {Array}
	 */
	getColumns: function () { return columns; },
	/**
	 * Set the array of column values
	 * @param {Array} value New value to set.
	 * @alias Titanium.UI.Picker.setColumns
	 */
	setColumns: function () { },
	/**
	 * the duration value in milliseconds for count down timer pickers. (Note that Titanium's Android implementation does not support the countdown timer.)
	 * @alias Titanium.UI.Picker.countDownDuration
	 * @property {Double}
	 */
	countDownDuration: 0.0,
	/**
	 * Get the the duration value in milliseconds for count down timer pickers. (Note that Titanium's Android implementation does not support the countdown timer.)
	 * @alias Titanium.UI.Picker.getCountDownDuration
	 * @return {Double}
	 */
	getCountDownDuration: function () { return countDownDuration; },
	/**
	 * Set the the duration value in milliseconds for count down timer pickers. (Note that Titanium's Android implementation does not support the countdown timer.)
	 * @param {Double} value New value to set.
	 * @alias Titanium.UI.Picker.setCountDownDuration
	 */
	setCountDownDuration: function () { },
	/**
	 * the locale used for displaying Date/Time pickers values
	 * @alias Titanium.UI.Picker.locale
	 * @property {String}
	 */
	locale: '',
	/**
	 * Get the the locale used for displaying Date/Time pickers values
	 * @alias Titanium.UI.Picker.getLocale
	 * @return {String}
	 */
	getLocale: function () { return locale; },
	/**
	 * Set the the locale used for displaying Date/Time pickers values
	 * @param {String} value New value to set.
	 * @alias Titanium.UI.Picker.setLocale
	 */
	setLocale: function () { },
	/**
	 * the minimum Date/Time for value for date pickers
	 * @alias Titanium.UI.Picker.minDate
	 * @property {Date}
	 */
	minDate: new Date(),
	/**
	 * Get the the minimum Date/Time for value for date pickers
	 * @alias Titanium.UI.Picker.getMinDate
	 * @return {Date}
	 */
	getMinDate: function () { return minDate; },
	/**
	 * Set the the minimum Date/Time for value for date pickers
	 * @param {Date} value New value to set.
	 * @alias Titanium.UI.Picker.setMinDate
	 */
	setMinDate: function () { },
	/**
	 * property to set the interval displayed by the minutes wheel (for example, 15 minutes). The interval value must be evenly divided into 60; if it is not, the default value is used. The default and minimum values are 1; the maximum value is 30.  (Not currently supported on Android.)
	 * @alias Titanium.UI.Picker.minuteInterval
	 * @property {Integer}
	 */
	minuteInterval: 0,
	/**
	 * Get the property to set the interval displayed by the minutes wheel (for example, 15 minutes). The interval value must be evenly divided into 60; if it is not, the default value is used. The default and minimum values are 1; the maximum value is 30.  (Not currently supported on Android.)
	 * @alias Titanium.UI.Picker.getMinuteInterval
	 * @return {Integer}
	 */
	getMinuteInterval: function () { return minuteInterval; },
	/**
	 * Set the property to set the interval displayed by the minutes wheel (for example, 15 minutes). The interval value must be evenly divided into 60; if it is not, the default value is used. The default and minimum values are 1; the maximum value is 30.  (Not currently supported on Android.)
	 * @param {Integer} value New value to set.
	 * @alias Titanium.UI.Picker.setMinuteInterval
	 */
	setMinuteInterval: function () { },
	/**
	 * for basic picker, boolean value to indicate whether the visual selection style is shown. On the iPhone, this is a blue selected bar.
	 * @alias Titanium.UI.Picker.selectionIndicator
	 * @property {Boolean}
	 */
	selectionIndicator: false,
	/**
	 * Get the for basic picker, boolean value to indicate whether the visual selection style is shown. On the iPhone, this is a blue selected bar.
	 * @alias Titanium.UI.Picker.getSelectionIndicator
	 * @return {Boolean}
	 */
	getSelectionIndicator: function () { return selectionIndicator; },
	/**
	 * Set the for basic picker, boolean value to indicate whether the visual selection style is shown. On the iPhone, this is a blue selected bar.
	 * @param {Boolean} value New value to set.
	 * @alias Titanium.UI.Picker.setSelectionIndicator
	 */
	setSelectionIndicator: function () { },
	/**
	 * the type constant for the picker. One of Titanium.UI.PICKER_TYPE_PLAIN (default), Titanium.UI.PICKER_TYPE_DATE_AND_TIME, Titanium.UI.PICKER_TYPE_DATE, Titanium.UI.PICKER_TYPE_TIME or Titanium.UI.PICKER_TYPE_COUNT_DOWN_TIMER. (Note that Titanium's Android implementation does not support the countdown timer or date+time varieties.)
	 * @alias Titanium.UI.Picker.type
	 * @property {Integer}
	 */
	type: 0,
	/**
	 * Get the the type constant for the picker. One of Titanium.UI.PICKER_TYPE_PLAIN (default), Titanium.UI.PICKER_TYPE_DATE_AND_TIME, Titanium.UI.PICKER_TYPE_DATE, Titanium.UI.PICKER_TYPE_TIME or Titanium.UI.PICKER_TYPE_COUNT_DOWN_TIMER. (Note that Titanium's Android implementation does not support the countdown timer or date+time varieties.)
	 * @alias Titanium.UI.Picker.getType
	 * @return {Integer}
	 */
	getType: function () { return type; },
	/**
	 * Set the the type constant for the picker. One of Titanium.UI.PICKER_TYPE_PLAIN (default), Titanium.UI.PICKER_TYPE_DATE_AND_TIME, Titanium.UI.PICKER_TYPE_DATE, Titanium.UI.PICKER_TYPE_TIME or Titanium.UI.PICKER_TYPE_COUNT_DOWN_TIMER. (Note that Titanium's Android implementation does not support the countdown timer or date+time varieties.)
	 * @param {Integer} value New value to set.
	 * @alias Titanium.UI.Picker.setType
	 */
	setType: function () { },
	/**
	 * (Android only, default false.) An indicator that you wish to use a non-native Android control that looks and behaves more like the iOS picker in the sense that the user selects values by spinning a wheel.  (The native Android spinner is more like a conventional "dropdown".)  Note that this option works both plain pickers, date pickers and time pickers.
	 * @alias Titanium.UI.Picker.useSpinner
	 * @property {Boolean}
	 */
	useSpinner: false,
	/**
	 * Get the (Android only, default false.) An indicator that you wish to use a non-native Android control that looks and behaves more like the iOS picker in the sense that the user selects values by spinning a wheel.  (The native Android spinner is more like a conventional "dropdown".)  Note that this option works both plain pickers, date pickers and time pickers.
	 * @alias Titanium.UI.Picker.getUseSpinner
	 * @return {Boolean}
	 */
	getUseSpinner: function () { return useSpinner; },
	/**
	 * Set the (Android only, default false.) An indicator that you wish to use a non-native Android control that looks and behaves more like the iOS picker in the sense that the user selects values by spinning a wheel.  (The native Android spinner is more like a conventional "dropdown".)  Note that this option works both plain pickers, date pickers and time pickers.
	 * @param {Boolean} value New value to set.
	 * @alias Titanium.UI.Picker.setUseSpinner
	 */
	setUseSpinner: function () { },
	/**
	 * the Date/Time value for date pickers
	 * @alias Titanium.UI.Picker.value
	 * @property {Date}
	 */
	value: new Date(),
	/**
	 * Get the the Date/Time value for date pickers
	 * @alias Titanium.UI.Picker.getValue
	 * @return {Date}
	 */
	getValue: function () { return value; },
	/**
	 * Set the the Date/Time value for date pickers
	 * @param {Date} value New value to set.
	 * @alias Titanium.UI.Picker.setValue
	 */
	setValue: function () { },
	/**
	 * (Android only.)  This is relevant only if you set useSpinner to true, and it is relevant only for the plain picker (not date/time).  By default, the spinner-style Android picker will show 5 rows: the one in the middle which is selected, and then 2 above and below.  You can set this to allow more (use an odd number to be sure the selected row is in the middle.)
	 * @alias Titanium.UI.Picker.visibleItems
	 * @property {Integer}
	 */
	visibleItems: 0,
	/**
	 * Get the (Android only.)  This is relevant only if you set useSpinner to true, and it is relevant only for the plain picker (not date/time).  By default, the spinner-style Android picker will show 5 rows: the one in the middle which is selected, and then 2 above and below.  You can set this to allow more (use an odd number to be sure the selected row is in the middle.)
	 * @alias Titanium.UI.Picker.getVisibleItems
	 * @return {Integer}
	 */
	getVisibleItems: function () { return visibleItems; },
	/**
	 * Set the (Android only.)  This is relevant only if you set useSpinner to true, and it is relevant only for the plain picker (not date/time).  By default, the spinner-style Android picker will show 5 rows: the one in the middle which is selected, and then 2 above and below.  You can set this to allow more (use an odd number to be sure the selected row is in the middle.)
	 * @param {Integer} value New value to set.
	 * @alias Titanium.UI.Picker.setVisibleItems
	 */
	setVisibleItems: function () { },
	/**
	 * add an array of rows, a single row or a column to the picker
	 * @param {Array,Object} data add an array of rows, a single row or a column to the picker
	 * @alias Titanium.UI.Picker.add
	 */
	add: function (data) { },
	/**
	 * add an event listener for the instance to receive view triggered events
	 * @param {String} name name of the event
	 * @param {Function} callback callback function to invoke when the event is fired
	 * @alias Titanium.UI.Picker.addEventListener
	 */
	addEventListener: function (name,callback) { },
	/**
	 * fire a synthesized event to the views listener
	 * @param {String} name name of the event
	 * @param {Object} event event object
	 * @alias Titanium.UI.Picker.fireEvent
	 */
	fireEvent: function (name,event) { },
	/**
	 * get the selected row object for column
	 * @param {Integer} index for the column index, return the row object or nil if not found
	 * @alias Titanium.UI.Picker.getSelectedRow
	 * @return {Object}
	 */
	getSelectedRow: function (index) { return {}; },
	/**
	 * causes the picker to reload the values from the new column.
	 * @param {Object} column new column to load
	 * @alias Titanium.UI.Picker.reloadColumn
	 */
	reloadColumn: function (column) { },
	/**
	 * remove a previously added event listener
	 * @param {String} name name of the event
	 * @param {Function} callback callback function passed in addEventListener
	 * @alias Titanium.UI.Picker.removeEventListener
	 */
	removeEventListener: function (name,callback) { },
	/**
	 * set the column's row to the selected state
	 * @param {Integer} column the column index
	 * @param {Integer} row the row index
	 * @param {Boolean} animated boolean to indicate if the selection should be animated (default) (optional)
	 * @alias Titanium.UI.Picker.setSelectedRow
	 */
	setSelectedRow: function (column,row,animated) { },
};

/**
 * The picker row object created by Titanium.UI.createPickerColumn.
 * @since 0.9
 */
Titanium.UI.PickerColumn = {
	/**
	 * a dictionary with properties x and y to indicate the anchor point value. anchor specifies the position by which animation should occur. center is 0.5, 0.5
	 * @alias Titanium.UI.PickerColumn.anchorPoint
	 * @property {Object}
	 */
	anchorPoint: {},
	/**
	 * Get the a dictionary with properties x and y to indicate the anchor point value. anchor specifies the position by which animation should occur. center is 0.5, 0.5
	 * @alias Titanium.UI.PickerColumn.getAnchorPoint
	 * @return {Object}
	 */
	getAnchorPoint: function () { return anchorPoint; },
	/**
	 * Set the a dictionary with properties x and y to indicate the anchor point value. anchor specifies the position by which animation should occur. center is 0.5, 0.5
	 * @param {Object} value New value to set.
	 * @alias Titanium.UI.PickerColumn.setAnchorPoint
	 */
	setAnchorPoint: function () { },
	/**
	 * read-only object with x and y properties of where the view is during animation
	 * @alias Titanium.UI.PickerColumn.animatedCenterPoint
	 * @property {Object}
	 */
	animatedCenterPoint: {},
	/**
	 * Get the read-only object with x and y properties of where the view is during animation
	 * @alias Titanium.UI.PickerColumn.getAnimatedCenterPoint
	 * @return {Object}
	 */
	getAnimatedCenterPoint: function () { return animatedCenterPoint; },
	/**
	 * Set the read-only object with x and y properties of where the view is during animation
	 * @param {Object} value New value to set.
	 * @alias Titanium.UI.PickerColumn.setAnimatedCenterPoint
	 */
	setAnimatedCenterPoint: function () { },
	/**
	 * the background color of the view
	 * @alias Titanium.UI.PickerColumn.backgroundColor
	 * @property {String}
	 */
	backgroundColor: '',
	/**
	 * Get the the background color of the view
	 * @alias Titanium.UI.PickerColumn.getBackgroundColor
	 * @return {String}
	 */
	getBackgroundColor: function () { return backgroundColor; },
	/**
	 * Set the the background color of the view
	 * @param {String} value New value to set.
	 * @alias Titanium.UI.PickerColumn.setBackgroundColor
	 */
	setBackgroundColor: function () { },
	/**
	 * the disabled background color of the view. (Android)
	 * @alias Titanium.UI.PickerColumn.backgroundDisabledColor
	 * @property {String}
	 */
	backgroundDisabledColor: '',
	/**
	 * Get the the disabled background color of the view. (Android)
	 * @alias Titanium.UI.PickerColumn.getBackgroundDisabledColor
	 * @return {String}
	 */
	getBackgroundDisabledColor: function () { return backgroundDisabledColor; },
	/**
	 * Set the the disabled background color of the view. (Android)
	 * @param {String} value New value to set.
	 * @alias Titanium.UI.PickerColumn.setBackgroundDisabledColor
	 */
	setBackgroundDisabledColor: function () { },
	/**
	 * the disabled background image url of the view. (Android)
	 * @alias Titanium.UI.PickerColumn.backgroundDisabledImage
	 * @property {String}
	 */
	backgroundDisabledImage: '',
	/**
	 * Get the the disabled background image url of the view. (Android)
	 * @alias Titanium.UI.PickerColumn.getBackgroundDisabledImage
	 * @return {String}
	 */
	getBackgroundDisabledImage: function () { return backgroundDisabledImage; },
	/**
	 * Set the the disabled background image url of the view. (Android)
	 * @param {String} value New value to set.
	 * @alias Titanium.UI.PickerColumn.setBackgroundDisabledImage
	 */
	setBackgroundDisabledImage: function () { },
	/**
	 * the focused background color of the view. focusable must be true for normal views. (Android)
	 * @alias Titanium.UI.PickerColumn.backgroundFocusedColor
	 * @property {String}
	 */
	backgroundFocusedColor: '',
	/**
	 * Get the the focused background color of the view. focusable must be true for normal views. (Android)
	 * @alias Titanium.UI.PickerColumn.getBackgroundFocusedColor
	 * @return {String}
	 */
	getBackgroundFocusedColor: function () { return backgroundFocusedColor; },
	/**
	 * Set the the focused background color of the view. focusable must be true for normal views. (Android)
	 * @param {String} value New value to set.
	 * @alias Titanium.UI.PickerColumn.setBackgroundFocusedColor
	 */
	setBackgroundFocusedColor: function () { },
	/**
	 * the focused background image url of the view. focusable must be true for normal views. (Android)
	 * @alias Titanium.UI.PickerColumn.backgroundFocusedImage
	 * @property {String}
	 */
	backgroundFocusedImage: '',
	/**
	 * Get the the focused background image url of the view. focusable must be true for normal views. (Android)
	 * @alias Titanium.UI.PickerColumn.getBackgroundFocusedImage
	 * @return {String}
	 */
	getBackgroundFocusedImage: function () { return backgroundFocusedImage; },
	/**
	 * Set the the focused background image url of the view. focusable must be true for normal views. (Android)
	 * @param {String} value New value to set.
	 * @alias Titanium.UI.PickerColumn.setBackgroundFocusedImage
	 */
	setBackgroundFocusedImage: function () { },
	/**
	 * a background gradient for the view with the properties: type,startPoint,endPoint,startRadius,endRadius,backfillStart,backfillEnd,colors.
	 * @alias Titanium.UI.PickerColumn.backgroundGradient
	 * @property {Object}
	 */
	backgroundGradient: {},
	/**
	 * Get the a background gradient for the view with the properties: type,startPoint,endPoint,startRadius,endRadius,backfillStart,backfillEnd,colors.
	 * @alias Titanium.UI.PickerColumn.getBackgroundGradient
	 * @return {Object}
	 */
	getBackgroundGradient: function () { return backgroundGradient; },
	/**
	 * Set the a background gradient for the view with the properties: type,startPoint,endPoint,startRadius,endRadius,backfillStart,backfillEnd,colors.
	 * @param {Object} value New value to set.
	 * @alias Titanium.UI.PickerColumn.setBackgroundGradient
	 */
	setBackgroundGradient: function () { },
	/**
	 * the background image url of the view
	 * @alias Titanium.UI.PickerColumn.backgroundImage
	 * @property {String}
	 */
	backgroundImage: '',
	/**
	 * Get the the background image url of the view
	 * @alias Titanium.UI.PickerColumn.getBackgroundImage
	 * @return {String}
	 */
	getBackgroundImage: function () { return backgroundImage; },
	/**
	 * Set the the background image url of the view
	 * @param {String} value New value to set.
	 * @alias Titanium.UI.PickerColumn.setBackgroundImage
	 */
	setBackgroundImage: function () { },
	/**
	 * End caps specify the portion of an image that should not be resized when an image is stretched. This technique is used to implement buttons and other resizable image-based interface elements. When a button with end caps is resized, the resizing occurs only in the middle of the button, in the region between the end caps. The end caps themselves keep their original size and appearance. This property specifies the size of the left end cap. The middle (stretchable) portion is assumed to be 1 pixel wide. The right end cap is therefore computed by adding the size of the left end cap and the middle portion together and then subtracting that value from the width of the image
	 * @alias Titanium.UI.PickerColumn.backgroundLeftCap
	 * @property {Float}
	 */
	backgroundLeftCap: 0.0,
	/**
	 * Get the End caps specify the portion of an image that should not be resized when an image is stretched. This technique is used to implement buttons and other resizable image-based interface elements. When a button with end caps is resized, the resizing occurs only in the middle of the button, in the region between the end caps. The end caps themselves keep their original size and appearance. This property specifies the size of the left end cap. The middle (stretchable) portion is assumed to be 1 pixel wide. The right end cap is therefore computed by adding the size of the left end cap and the middle portion together and then subtracting that value from the width of the image
	 * @alias Titanium.UI.PickerColumn.getBackgroundLeftCap
	 * @return {Float}
	 */
	getBackgroundLeftCap: function () { return backgroundLeftCap; },
	/**
	 * Set the End caps specify the portion of an image that should not be resized when an image is stretched. This technique is used to implement buttons and other resizable image-based interface elements. When a button with end caps is resized, the resizing occurs only in the middle of the button, in the region between the end caps. The end caps themselves keep their original size and appearance. This property specifies the size of the left end cap. The middle (stretchable) portion is assumed to be 1 pixel wide. The right end cap is therefore computed by adding the size of the left end cap and the middle portion together and then subtracting that value from the width of the image
	 * @param {Float} value New value to set.
	 * @alias Titanium.UI.PickerColumn.setBackgroundLeftCap
	 */
	setBackgroundLeftCap: function () { },
	/**
	 * the selected background color of the view. focusable must be true for normal views. (Android)
	 * @alias Titanium.UI.PickerColumn.backgroundSelectedColor
	 * @property {String}
	 */
	backgroundSelectedColor: '',
	/**
	 * Get the the selected background color of the view. focusable must be true for normal views. (Android)
	 * @alias Titanium.UI.PickerColumn.getBackgroundSelectedColor
	 * @return {String}
	 */
	getBackgroundSelectedColor: function () { return backgroundSelectedColor; },
	/**
	 * Set the the selected background color of the view. focusable must be true for normal views. (Android)
	 * @param {String} value New value to set.
	 * @alias Titanium.UI.PickerColumn.setBackgroundSelectedColor
	 */
	setBackgroundSelectedColor: function () { },
	/**
	 * the selected background image url of the view. focusable must be true for normal views. (Android)
	 * @alias Titanium.UI.PickerColumn.backgroundSelectedImage
	 * @property {String}
	 */
	backgroundSelectedImage: '',
	/**
	 * Get the the selected background image url of the view. focusable must be true for normal views. (Android)
	 * @alias Titanium.UI.PickerColumn.getBackgroundSelectedImage
	 * @return {String}
	 */
	getBackgroundSelectedImage: function () { return backgroundSelectedImage; },
	/**
	 * Set the the selected background image url of the view. focusable must be true for normal views. (Android)
	 * @param {String} value New value to set.
	 * @alias Titanium.UI.PickerColumn.setBackgroundSelectedImage
	 */
	setBackgroundSelectedImage: function () { },
	/**
	 * End caps specify the portion of an image that should not be resized when an image is stretched. This technique is used to implement buttons and other resizable image-based interface elements. When a button with end caps is resized, the resizing occurs only in the middle of the button, in the region between the end caps. The end caps themselves keep their original size and appearance. This property specifies the size of the top end cap. The middle (stretchable) portion is assumed to be 1 pixel wide. The bottom end cap is therefore computed by adding the size of the top end cap and the middle portion together and then subtracting that value from the height of the image
	 * @alias Titanium.UI.PickerColumn.backgroundTopCap
	 * @property {Float}
	 */
	backgroundTopCap: 0.0,
	/**
	 * Get the End caps specify the portion of an image that should not be resized when an image is stretched. This technique is used to implement buttons and other resizable image-based interface elements. When a button with end caps is resized, the resizing occurs only in the middle of the button, in the region between the end caps. The end caps themselves keep their original size and appearance. This property specifies the size of the top end cap. The middle (stretchable) portion is assumed to be 1 pixel wide. The bottom end cap is therefore computed by adding the size of the top end cap and the middle portion together and then subtracting that value from the height of the image
	 * @alias Titanium.UI.PickerColumn.getBackgroundTopCap
	 * @return {Float}
	 */
	getBackgroundTopCap: function () { return backgroundTopCap; },
	/**
	 * Set the End caps specify the portion of an image that should not be resized when an image is stretched. This technique is used to implement buttons and other resizable image-based interface elements. When a button with end caps is resized, the resizing occurs only in the middle of the button, in the region between the end caps. The end caps themselves keep their original size and appearance. This property specifies the size of the top end cap. The middle (stretchable) portion is assumed to be 1 pixel wide. The bottom end cap is therefore computed by adding the size of the top end cap and the middle portion together and then subtracting that value from the height of the image
	 * @param {Float} value New value to set.
	 * @alias Titanium.UI.PickerColumn.setBackgroundTopCap
	 */
	setBackgroundTopCap: function () { },
	/**
	 * the border color of the view
	 * @alias Titanium.UI.PickerColumn.borderColor
	 * @property {String}
	 */
	borderColor: '',
	/**
	 * Get the the border color of the view
	 * @alias Titanium.UI.PickerColumn.getBorderColor
	 * @return {String}
	 */
	getBorderColor: function () { return borderColor; },
	/**
	 * Set the the border color of the view
	 * @param {String} value New value to set.
	 * @alias Titanium.UI.PickerColumn.setBorderColor
	 */
	setBorderColor: function () { },
	/**
	 * the border radius of the view
	 * @alias Titanium.UI.PickerColumn.borderRadius
	 * @property {Float}
	 */
	borderRadius: 0.0,
	/**
	 * Get the the border radius of the view
	 * @alias Titanium.UI.PickerColumn.getBorderRadius
	 * @return {Float}
	 */
	getBorderRadius: function () { return borderRadius; },
	/**
	 * Set the the border radius of the view
	 * @param {Float} value New value to set.
	 * @alias Titanium.UI.PickerColumn.setBorderRadius
	 */
	setBorderRadius: function () { },
	/**
	 * the border width of the view
	 * @alias Titanium.UI.PickerColumn.borderWidth
	 * @property {Float}
	 */
	borderWidth: 0.0,
	/**
	 * Get the the border width of the view
	 * @alias Titanium.UI.PickerColumn.getBorderWidth
	 * @return {Float}
	 */
	getBorderWidth: function () { return borderWidth; },
	/**
	 * Set the the border width of the view
	 * @param {Float} value New value to set.
	 * @alias Titanium.UI.PickerColumn.setBorderWidth
	 */
	setBorderWidth: function () { },
	/**
	 * property for the view bottom position. This position is relative to the view's parent. Can be either a float value or a dimension string ie 'auto' (default), '50%' (iPhone only).
	 * @alias Titanium.UI.PickerColumn.bottom
	 * @property {Float,String}
	 */
	bottom: 0.0,
	/**
	 * Get the property for the view bottom position. This position is relative to the view's parent. Can be either a float value or a dimension string ie 'auto' (default), '50%' (iPhone only).
	 * @alias Titanium.UI.PickerColumn.getBottom
	 * @return {Float,String}
	 */
	getBottom: function () { return bottom; },
	/**
	 * Set the property for the view bottom position. This position is relative to the view's parent. Can be either a float value or a dimension string ie 'auto' (default), '50%' (iPhone only).
	 * @param {Float,String} value New value to set.
	 * @alias Titanium.UI.PickerColumn.setBottom
	 */
	setBottom: function () { },
	/**
	 * a dictionary with properties x and y to indicate the center of the views position relative to the parent view
	 * @alias Titanium.UI.PickerColumn.center
	 * @property {Object}
	 */
	center: {},
	/**
	 * Get the a dictionary with properties x and y to indicate the center of the views position relative to the parent view
	 * @alias Titanium.UI.PickerColumn.getCenter
	 * @return {Object}
	 */
	getCenter: function () { return center; },
	/**
	 * Set the a dictionary with properties x and y to indicate the center of the views position relative to the parent view
	 * @param {Object} value New value to set.
	 * @alias Titanium.UI.PickerColumn.setCenter
	 */
	setCenter: function () { },
	/**
	 * Set true if you want a view to be focusable when navigating with the trackball or D-Pad. Default: false. (Android Only)
	 * @alias Titanium.UI.PickerColumn.focusable
	 * @property {Boolean}
	 */
	focusable: false,
	/**
	 * Get the Set true if you want a view to be focusable when navigating with the trackball or D-Pad. Default: false. (Android Only)
	 * @alias Titanium.UI.PickerColumn.getFocusable
	 * @return {Boolean}
	 */
	getFocusable: function () { return focusable; },
	/**
	 * Set the Set true if you want a view to be focusable when navigating with the trackball or D-Pad. Default: false. (Android Only)
	 * @param {Boolean} value New value to set.
	 * @alias Titanium.UI.PickerColumn.setFocusable
	 */
	setFocusable: function () { },
	/**
	 * the font family
	 * @alias Titanium.UI.PickerColumn.font-family
	 * @property {String}
	 */
	font-family: '',
	/**
	 * Get the the font family
	 * @alias Titanium.UI.PickerColumn.getFont-family
	 * @return {String}
	 */
	getFont-family: function () { return font-family; },
	/**
	 * Set the the font family
	 * @param {String} value New value to set.
	 * @alias Titanium.UI.PickerColumn.setFont-family
	 */
	setFont-family: function () { },
	/**
	 * the font size
	 * @alias Titanium.UI.PickerColumn.font-size
	 * @property {String}
	 */
	font-size: '',
	/**
	 * Get the the font size
	 * @alias Titanium.UI.PickerColumn.getFont-size
	 * @return {String}
	 */
	getFont-size: function () { return font-size; },
	/**
	 * Set the the font size
	 * @param {String} value New value to set.
	 * @alias Titanium.UI.PickerColumn.setFont-size
	 */
	setFont-size: function () { },
	/**
	 * the font style, either normal or italics
	 * @alias Titanium.UI.PickerColumn.font-style
	 * @property {String}
	 */
	font-style: '',
	/**
	 * Get the the font style, either normal or italics
	 * @alias Titanium.UI.PickerColumn.getFont-style
	 * @return {String}
	 */
	getFont-style: function () { return font-style; },
	/**
	 * Set the the font style, either normal or italics
	 * @param {String} value New value to set.
	 * @alias Titanium.UI.PickerColumn.setFont-style
	 */
	setFont-style: function () { },
	/**
	 * the font weight, either normal or bold
	 * @alias Titanium.UI.PickerColumn.font-weight
	 * @property {String}
	 */
	font-weight: '',
	/**
	 * Get the the font weight, either normal or bold
	 * @alias Titanium.UI.PickerColumn.getFont-weight
	 * @return {String}
	 */
	getFont-weight: function () { return font-weight; },
	/**
	 * Set the the font weight, either normal or bold
	 * @param {String} value New value to set.
	 * @alias Titanium.UI.PickerColumn.setFont-weight
	 */
	setFont-weight: function () { },
	/**
	 * property for the view height. Can be either a float value or a dimension string ie 'auto' (default), '50%' (iPhone only).
	 * @alias Titanium.UI.PickerColumn.height
	 * @property {Float,String}
	 */
	height: 0.0,
	/**
	 * Get the property for the view height. Can be either a float value or a dimension string ie 'auto' (default), '50%' (iPhone only).
	 * @alias Titanium.UI.PickerColumn.getHeight
	 * @return {Float,String}
	 */
	getHeight: function () { return height; },
	/**
	 * Set the property for the view height. Can be either a float value or a dimension string ie 'auto' (default), '50%' (iPhone only).
	 * @param {Float,String} value New value to set.
	 * @alias Titanium.UI.PickerColumn.setHeight
	 */
	setHeight: function () { },
	/**
	 * property for the view left position. This position is relative to the view's parent. Can be either a float value or a dimension string ie 'auto' (default), '50%' (iPhone only).
	 * @alias Titanium.UI.PickerColumn.left
	 * @property {Float,String}
	 */
	left: 0.0,
	/**
	 * Get the property for the view left position. This position is relative to the view's parent. Can be either a float value or a dimension string ie 'auto' (default), '50%' (iPhone only).
	 * @alias Titanium.UI.PickerColumn.getLeft
	 * @return {Float,String}
	 */
	getLeft: function () { return left; },
	/**
	 * Set the property for the view left position. This position is relative to the view's parent. Can be either a float value or a dimension string ie 'auto' (default), '50%' (iPhone only).
	 * @param {Float,String} value New value to set.
	 * @alias Titanium.UI.PickerColumn.setLeft
	 */
	setLeft: function () { },
	/**
	 * the opacity from 0.0-1.0
	 * @alias Titanium.UI.PickerColumn.opacity
	 * @property {Float}
	 */
	opacity: 0.0,
	/**
	 * Get the the opacity from 0.0-1.0
	 * @alias Titanium.UI.PickerColumn.getOpacity
	 * @return {Float}
	 */
	getOpacity: function () { return opacity; },
	/**
	 * Set the the opacity from 0.0-1.0
	 * @param {Float} value New value to set.
	 * @alias Titanium.UI.PickerColumn.setOpacity
	 */
	setOpacity: function () { },
	/**
	 * property for the view right position. This position is relative to the view's parent. Can be either a float value or a dimension string ie 'auto' (default), '50%' (iPhone only).
	 * @alias Titanium.UI.PickerColumn.right
	 * @property {Float,String}
	 */
	right: 0.0,
	/**
	 * Get the property for the view right position. This position is relative to the view's parent. Can be either a float value or a dimension string ie 'auto' (default), '50%' (iPhone only).
	 * @alias Titanium.UI.PickerColumn.getRight
	 * @return {Float,String}
	 */
	getRight: function () { return right; },
	/**
	 * Set the property for the view right position. This position is relative to the view's parent. Can be either a float value or a dimension string ie 'auto' (default), '50%' (iPhone only).
	 * @param {Float,String} value New value to set.
	 * @alias Titanium.UI.PickerColumn.setRight
	 */
	setRight: function () { },
	/**
	 * number of rows in the column (readonly)
	 * @alias Titanium.UI.PickerColumn.rowCount
	 * @property {Integer}
	 */
	rowCount: 0,
	/**
	 * Get the number of rows in the column (readonly)
	 * @alias Titanium.UI.PickerColumn.getRowCount
	 * @return {Integer}
	 */
	getRowCount: function () { return rowCount; },
	/**
	 * Set the number of rows in the column (readonly)
	 * @param {Integer} value New value to set.
	 * @alias Titanium.UI.PickerColumn.setRowCount
	 */
	setRowCount: function () { },
	/**
	 * an array of rows
	 * @alias Titanium.UI.PickerColumn.rows
	 * @property {Array}
	 */
	rows: [],
	/**
	 * Get the an array of rows
	 * @alias Titanium.UI.PickerColumn.getRows
	 * @return {Array}
	 */
	getRows: function () { return rows; },
	/**
	 * Set the an array of rows
	 * @param {Array} value New value to set.
	 * @alias Titanium.UI.PickerColumn.setRows
	 */
	setRows: function () { },
	/**
	 * the size of the view as a dictionary of width and height properties
	 * @alias Titanium.UI.PickerColumn.size
	 * @property {Object}
	 */
	size: {},
	/**
	 * Get the the size of the view as a dictionary of width and height properties
	 * @alias Titanium.UI.PickerColumn.getSize
	 * @return {Object}
	 */
	getSize: function () { return size; },
	/**
	 * Set the the size of the view as a dictionary of width and height properties
	 * @param {Object} value New value to set.
	 * @alias Titanium.UI.PickerColumn.setSize
	 */
	setSize: function () { },
	/**
	 * One of Titanium.UI.Android.SOFT_KEYBOARD_DEFAULT_ON_FOCUS, Titanium.UI.Android.SOFT_KEYBOARD_HIDE_ON_FOCUS, or Titanium.UI.Android.SOFT_KEYBOARD_SHOW_ON_FOCUS. (Android only)
	 * @alias Titanium.UI.PickerColumn.softKeyboardOnFocus
	 * @property {Integer}
	 */
	softKeyboardOnFocus: 0,
	/**
	 * Get the One of Titanium.UI.Android.SOFT_KEYBOARD_DEFAULT_ON_FOCUS, Titanium.UI.Android.SOFT_KEYBOARD_HIDE_ON_FOCUS, or Titanium.UI.Android.SOFT_KEYBOARD_SHOW_ON_FOCUS. (Android only)
	 * @alias Titanium.UI.PickerColumn.getSoftKeyboardOnFocus
	 * @return {Integer}
	 */
	getSoftKeyboardOnFocus: function () { return softKeyboardOnFocus; },
	/**
	 * Set the One of Titanium.UI.Android.SOFT_KEYBOARD_DEFAULT_ON_FOCUS, Titanium.UI.Android.SOFT_KEYBOARD_HIDE_ON_FOCUS, or Titanium.UI.Android.SOFT_KEYBOARD_SHOW_ON_FOCUS. (Android only)
	 * @param {Integer} value New value to set.
	 * @alias Titanium.UI.PickerColumn.setSoftKeyboardOnFocus
	 */
	setSoftKeyboardOnFocus: function () { },
	/**
	 * property for the view top position. This position is relative to the view's parent. Can be either a float value or a dimension string ie 'auto' (default), '50%' (iPhone only).
	 * @alias Titanium.UI.PickerColumn.top
	 * @property {Float,String}
	 */
	top: 0.0,
	/**
	 * Get the property for the view top position. This position is relative to the view's parent. Can be either a float value or a dimension string ie 'auto' (default), '50%' (iPhone only).
	 * @alias Titanium.UI.PickerColumn.getTop
	 * @return {Float,String}
	 */
	getTop: function () { return top; },
	/**
	 * Set the property for the view top position. This position is relative to the view's parent. Can be either a float value or a dimension string ie 'auto' (default), '50%' (iPhone only).
	 * @param {Float,String} value New value to set.
	 * @alias Titanium.UI.PickerColumn.setTop
	 */
	setTop: function () { },
	/**
	 * a boolean indicating if the view should receive touch events (true, default) or forward them to peers (false)
	 * @alias Titanium.UI.PickerColumn.touchEnabled
	 * @property {Boolean}
	 */
	touchEnabled: false,
	/**
	 * Get the a boolean indicating if the view should receive touch events (true, default) or forward them to peers (false)
	 * @alias Titanium.UI.PickerColumn.getTouchEnabled
	 * @return {Boolean}
	 */
	getTouchEnabled: function () { return touchEnabled; },
	/**
	 * Set the a boolean indicating if the view should receive touch events (true, default) or forward them to peers (false)
	 * @param {Boolean} value New value to set.
	 * @alias Titanium.UI.PickerColumn.setTouchEnabled
	 */
	setTouchEnabled: function () { },
	/**
	 * the transformation matrix to apply to the view
	 * @alias Titanium.UI.PickerColumn.transform
	 * @property {Object}
	 */
	transform: {},
	/**
	 * Get the the transformation matrix to apply to the view
	 * @alias Titanium.UI.PickerColumn.getTransform
	 * @return {Object}
	 */
	getTransform: function () { return transform; },
	/**
	 * Set the the transformation matrix to apply to the view
	 * @param {Object} value New value to set.
	 * @alias Titanium.UI.PickerColumn.setTransform
	 */
	setTransform: function () { },
	/**
	 * a boolean of the visibility of the view
	 * @alias Titanium.UI.PickerColumn.visible
	 * @property {Boolean}
	 */
	visible: false,
	/**
	 * Get the a boolean of the visibility of the view
	 * @alias Titanium.UI.PickerColumn.getVisible
	 * @return {Boolean}
	 */
	getVisible: function () { return visible; },
	/**
	 * Set the a boolean of the visibility of the view
	 * @param {Boolean} value New value to set.
	 * @alias Titanium.UI.PickerColumn.setVisible
	 */
	setVisible: function () { },
	/**
	 * property for the view width. Can be either a float value or a dimension string ie 'auto' (default), '50%' (iPhone only).
	 * @alias Titanium.UI.PickerColumn.width
	 * @property {Float,String}
	 */
	width: 0.0,
	/**
	 * Get the property for the view width. Can be either a float value or a dimension string ie 'auto' (default), '50%' (iPhone only).
	 * @alias Titanium.UI.PickerColumn.getWidth
	 * @return {Float,String}
	 */
	getWidth: function () { return width; },
	/**
	 * Set the property for the view width. Can be either a float value or a dimension string ie 'auto' (default), '50%' (iPhone only).
	 * @param {Float,String} value New value to set.
	 * @alias Titanium.UI.PickerColumn.setWidth
	 */
	setWidth: function () { },
	/**
	 * the z index position relative to other sibling views
	 * @alias Titanium.UI.PickerColumn.zIndex
	 * @property {Integer}
	 */
	zIndex: 0,
	/**
	 * Get the the z index position relative to other sibling views
	 * @alias Titanium.UI.PickerColumn.getZIndex
	 * @return {Integer}
	 */
	getZIndex: function () { return zIndex; },
	/**
	 * Set the the z index position relative to other sibling views
	 * @param {Integer} value New value to set.
	 * @alias Titanium.UI.PickerColumn.setZIndex
	 */
	setZIndex: function () { },
	/**
	 * add a child to the view hierarchy
	 * @param {Object} view the view to add to this views hiearchy
	 * @alias Titanium.UI.PickerColumn.add
	 */
	add: function (view) { },
	/**
	 * add an event listener for the instance to receive view triggered events
	 * @param {String} name name of the event
	 * @param {Function} callback callback function to invoke when the event is fired
	 * @alias Titanium.UI.PickerColumn.addEventListener
	 */
	addEventListener: function (name,callback) { },
	/**
	 * a Titanium.UI.PickerRow object to add to the column
	 * @alias Titanium.UI.PickerColumn.addRow
	 */
	addRow: function () { },
	/**
	 * animate the view
	 * @param {Object} obj either a dictionary of animation properties or an Animation object
	 * @param {Function} callback function to be invoked upon completion of the animation
	 * @alias Titanium.UI.PickerColumn.animate
	 */
	animate: function (obj,callback) { },
	/**
	 * fire a synthesized event to the views listener
	 * @param {String} name name of the event
	 * @param {Object} event event object
	 * @alias Titanium.UI.PickerColumn.fireEvent
	 */
	fireEvent: function (name,event) { },
	/**
	 * hide the view
	 * @alias Titanium.UI.PickerColumn.hide
	 */
	hide: function () { },
	/**
	 * remove a previously add view from the view hiearchy
	 * @param {Object} view the view to remove from this views hiearchy
	 * @alias Titanium.UI.PickerColumn.remove
	 */
	remove: function (view) { },
	/**
	 * remove a previously added event listener
	 * @param {String} name name of the event
	 * @param {Function} callback callback function passed in addEventListener
	 * @alias Titanium.UI.PickerColumn.removeEventListener
	 */
	removeEventListener: function (name,callback) { },
	/**
	 * a Titanium.UI.PickerRow object to remove
	 * @alias Titanium.UI.PickerColumn.removeRow
	 */
	removeRow: function () { },
	/**
	 * make the view visible
	 * @alias Titanium.UI.PickerColumn.show
	 */
	show: function () { },
	/**
	 * return a Blob image of the rendered view
	 * @param {Function} f function to be invoked upon completion. if non-null, this method will be performed asynchronously. if null, it will be performed immediately
	 * @alias Titanium.UI.PickerColumn.toImage
	 * @return {Object}
	 */
	toImage: function (f) { return {}; },
};

/**
 * The picker row object created by Titanium.UI.createPickerRow.
 * @since 0.9
 */
Titanium.UI.PickerRow = {
	/**
	 * a dictionary with properties x and y to indicate the anchor point value. anchor specifies the position by which animation should occur. center is 0.5, 0.5
	 * @alias Titanium.UI.PickerRow.anchorPoint
	 * @property {Object}
	 */
	anchorPoint: {},
	/**
	 * Get the a dictionary with properties x and y to indicate the anchor point value. anchor specifies the position by which animation should occur. center is 0.5, 0.5
	 * @alias Titanium.UI.PickerRow.getAnchorPoint
	 * @return {Object}
	 */
	getAnchorPoint: function () { return anchorPoint; },
	/**
	 * Set the a dictionary with properties x and y to indicate the anchor point value. anchor specifies the position by which animation should occur. center is 0.5, 0.5
	 * @param {Object} value New value to set.
	 * @alias Titanium.UI.PickerRow.setAnchorPoint
	 */
	setAnchorPoint: function () { },
	/**
	 * read-only object with x and y properties of where the view is during animation
	 * @alias Titanium.UI.PickerRow.animatedCenterPoint
	 * @property {Object}
	 */
	animatedCenterPoint: {},
	/**
	 * Get the read-only object with x and y properties of where the view is during animation
	 * @alias Titanium.UI.PickerRow.getAnimatedCenterPoint
	 * @return {Object}
	 */
	getAnimatedCenterPoint: function () { return animatedCenterPoint; },
	/**
	 * Set the read-only object with x and y properties of where the view is during animation
	 * @param {Object} value New value to set.
	 * @alias Titanium.UI.PickerRow.setAnimatedCenterPoint
	 */
	setAnimatedCenterPoint: function () { },
	/**
	 * the background color of the view
	 * @alias Titanium.UI.PickerRow.backgroundColor
	 * @property {String}
	 */
	backgroundColor: '',
	/**
	 * Get the the background color of the view
	 * @alias Titanium.UI.PickerRow.getBackgroundColor
	 * @return {String}
	 */
	getBackgroundColor: function () { return backgroundColor; },
	/**
	 * Set the the background color of the view
	 * @param {String} value New value to set.
	 * @alias Titanium.UI.PickerRow.setBackgroundColor
	 */
	setBackgroundColor: function () { },
	/**
	 * the disabled background color of the view. (Android)
	 * @alias Titanium.UI.PickerRow.backgroundDisabledColor
	 * @property {String}
	 */
	backgroundDisabledColor: '',
	/**
	 * Get the the disabled background color of the view. (Android)
	 * @alias Titanium.UI.PickerRow.getBackgroundDisabledColor
	 * @return {String}
	 */
	getBackgroundDisabledColor: function () { return backgroundDisabledColor; },
	/**
	 * Set the the disabled background color of the view. (Android)
	 * @param {String} value New value to set.
	 * @alias Titanium.UI.PickerRow.setBackgroundDisabledColor
	 */
	setBackgroundDisabledColor: function () { },
	/**
	 * the disabled background image url of the view. (Android)
	 * @alias Titanium.UI.PickerRow.backgroundDisabledImage
	 * @property {String}
	 */
	backgroundDisabledImage: '',
	/**
	 * Get the the disabled background image url of the view. (Android)
	 * @alias Titanium.UI.PickerRow.getBackgroundDisabledImage
	 * @return {String}
	 */
	getBackgroundDisabledImage: function () { return backgroundDisabledImage; },
	/**
	 * Set the the disabled background image url of the view. (Android)
	 * @param {String} value New value to set.
	 * @alias Titanium.UI.PickerRow.setBackgroundDisabledImage
	 */
	setBackgroundDisabledImage: function () { },
	/**
	 * the focused background color of the view. focusable must be true for normal views. (Android)
	 * @alias Titanium.UI.PickerRow.backgroundFocusedColor
	 * @property {String}
	 */
	backgroundFocusedColor: '',
	/**
	 * Get the the focused background color of the view. focusable must be true for normal views. (Android)
	 * @alias Titanium.UI.PickerRow.getBackgroundFocusedColor
	 * @return {String}
	 */
	getBackgroundFocusedColor: function () { return backgroundFocusedColor; },
	/**
	 * Set the the focused background color of the view. focusable must be true for normal views. (Android)
	 * @param {String} value New value to set.
	 * @alias Titanium.UI.PickerRow.setBackgroundFocusedColor
	 */
	setBackgroundFocusedColor: function () { },
	/**
	 * the focused background image url of the view. focusable must be true for normal views. (Android)
	 * @alias Titanium.UI.PickerRow.backgroundFocusedImage
	 * @property {String}
	 */
	backgroundFocusedImage: '',
	/**
	 * Get the the focused background image url of the view. focusable must be true for normal views. (Android)
	 * @alias Titanium.UI.PickerRow.getBackgroundFocusedImage
	 * @return {String}
	 */
	getBackgroundFocusedImage: function () { return backgroundFocusedImage; },
	/**
	 * Set the the focused background image url of the view. focusable must be true for normal views. (Android)
	 * @param {String} value New value to set.
	 * @alias Titanium.UI.PickerRow.setBackgroundFocusedImage
	 */
	setBackgroundFocusedImage: function () { },
	/**
	 * a background gradient for the view with the properties: type,startPoint,endPoint,startRadius,endRadius,backfillStart,backfillEnd,colors.
	 * @alias Titanium.UI.PickerRow.backgroundGradient
	 * @property {Object}
	 */
	backgroundGradient: {},
	/**
	 * Get the a background gradient for the view with the properties: type,startPoint,endPoint,startRadius,endRadius,backfillStart,backfillEnd,colors.
	 * @alias Titanium.UI.PickerRow.getBackgroundGradient
	 * @return {Object}
	 */
	getBackgroundGradient: function () { return backgroundGradient; },
	/**
	 * Set the a background gradient for the view with the properties: type,startPoint,endPoint,startRadius,endRadius,backfillStart,backfillEnd,colors.
	 * @param {Object} value New value to set.
	 * @alias Titanium.UI.PickerRow.setBackgroundGradient
	 */
	setBackgroundGradient: function () { },
	/**
	 * the background image url of the view
	 * @alias Titanium.UI.PickerRow.backgroundImage
	 * @property {String}
	 */
	backgroundImage: '',
	/**
	 * Get the the background image url of the view
	 * @alias Titanium.UI.PickerRow.getBackgroundImage
	 * @return {String}
	 */
	getBackgroundImage: function () { return backgroundImage; },
	/**
	 * Set the the background image url of the view
	 * @param {String} value New value to set.
	 * @alias Titanium.UI.PickerRow.setBackgroundImage
	 */
	setBackgroundImage: function () { },
	/**
	 * End caps specify the portion of an image that should not be resized when an image is stretched. This technique is used to implement buttons and other resizable image-based interface elements. When a button with end caps is resized, the resizing occurs only in the middle of the button, in the region between the end caps. The end caps themselves keep their original size and appearance. This property specifies the size of the left end cap. The middle (stretchable) portion is assumed to be 1 pixel wide. The right end cap is therefore computed by adding the size of the left end cap and the middle portion together and then subtracting that value from the width of the image
	 * @alias Titanium.UI.PickerRow.backgroundLeftCap
	 * @property {Float}
	 */
	backgroundLeftCap: 0.0,
	/**
	 * Get the End caps specify the portion of an image that should not be resized when an image is stretched. This technique is used to implement buttons and other resizable image-based interface elements. When a button with end caps is resized, the resizing occurs only in the middle of the button, in the region between the end caps. The end caps themselves keep their original size and appearance. This property specifies the size of the left end cap. The middle (stretchable) portion is assumed to be 1 pixel wide. The right end cap is therefore computed by adding the size of the left end cap and the middle portion together and then subtracting that value from the width of the image
	 * @alias Titanium.UI.PickerRow.getBackgroundLeftCap
	 * @return {Float}
	 */
	getBackgroundLeftCap: function () { return backgroundLeftCap; },
	/**
	 * Set the End caps specify the portion of an image that should not be resized when an image is stretched. This technique is used to implement buttons and other resizable image-based interface elements. When a button with end caps is resized, the resizing occurs only in the middle of the button, in the region between the end caps. The end caps themselves keep their original size and appearance. This property specifies the size of the left end cap. The middle (stretchable) portion is assumed to be 1 pixel wide. The right end cap is therefore computed by adding the size of the left end cap and the middle portion together and then subtracting that value from the width of the image
	 * @param {Float} value New value to set.
	 * @alias Titanium.UI.PickerRow.setBackgroundLeftCap
	 */
	setBackgroundLeftCap: function () { },
	/**
	 * the selected background color of the view. focusable must be true for normal views. (Android)
	 * @alias Titanium.UI.PickerRow.backgroundSelectedColor
	 * @property {String}
	 */
	backgroundSelectedColor: '',
	/**
	 * Get the the selected background color of the view. focusable must be true for normal views. (Android)
	 * @alias Titanium.UI.PickerRow.getBackgroundSelectedColor
	 * @return {String}
	 */
	getBackgroundSelectedColor: function () { return backgroundSelectedColor; },
	/**
	 * Set the the selected background color of the view. focusable must be true for normal views. (Android)
	 * @param {String} value New value to set.
	 * @alias Titanium.UI.PickerRow.setBackgroundSelectedColor
	 */
	setBackgroundSelectedColor: function () { },
	/**
	 * the selected background image url of the view. focusable must be true for normal views. (Android)
	 * @alias Titanium.UI.PickerRow.backgroundSelectedImage
	 * @property {String}
	 */
	backgroundSelectedImage: '',
	/**
	 * Get the the selected background image url of the view. focusable must be true for normal views. (Android)
	 * @alias Titanium.UI.PickerRow.getBackgroundSelectedImage
	 * @return {String}
	 */
	getBackgroundSelectedImage: function () { return backgroundSelectedImage; },
	/**
	 * Set the the selected background image url of the view. focusable must be true for normal views. (Android)
	 * @param {String} value New value to set.
	 * @alias Titanium.UI.PickerRow.setBackgroundSelectedImage
	 */
	setBackgroundSelectedImage: function () { },
	/**
	 * End caps specify the portion of an image that should not be resized when an image is stretched. This technique is used to implement buttons and other resizable image-based interface elements. When a button with end caps is resized, the resizing occurs only in the middle of the button, in the region between the end caps. The end caps themselves keep their original size and appearance. This property specifies the size of the top end cap. The middle (stretchable) portion is assumed to be 1 pixel wide. The bottom end cap is therefore computed by adding the size of the top end cap and the middle portion together and then subtracting that value from the height of the image
	 * @alias Titanium.UI.PickerRow.backgroundTopCap
	 * @property {Float}
	 */
	backgroundTopCap: 0.0,
	/**
	 * Get the End caps specify the portion of an image that should not be resized when an image is stretched. This technique is used to implement buttons and other resizable image-based interface elements. When a button with end caps is resized, the resizing occurs only in the middle of the button, in the region between the end caps. The end caps themselves keep their original size and appearance. This property specifies the size of the top end cap. The middle (stretchable) portion is assumed to be 1 pixel wide. The bottom end cap is therefore computed by adding the size of the top end cap and the middle portion together and then subtracting that value from the height of the image
	 * @alias Titanium.UI.PickerRow.getBackgroundTopCap
	 * @return {Float}
	 */
	getBackgroundTopCap: function () { return backgroundTopCap; },
	/**
	 * Set the End caps specify the portion of an image that should not be resized when an image is stretched. This technique is used to implement buttons and other resizable image-based interface elements. When a button with end caps is resized, the resizing occurs only in the middle of the button, in the region between the end caps. The end caps themselves keep their original size and appearance. This property specifies the size of the top end cap. The middle (stretchable) portion is assumed to be 1 pixel wide. The bottom end cap is therefore computed by adding the size of the top end cap and the middle portion together and then subtracting that value from the height of the image
	 * @param {Float} value New value to set.
	 * @alias Titanium.UI.PickerRow.setBackgroundTopCap
	 */
	setBackgroundTopCap: function () { },
	/**
	 * the border color of the view
	 * @alias Titanium.UI.PickerRow.borderColor
	 * @property {String}
	 */
	borderColor: '',
	/**
	 * Get the the border color of the view
	 * @alias Titanium.UI.PickerRow.getBorderColor
	 * @return {String}
	 */
	getBorderColor: function () { return borderColor; },
	/**
	 * Set the the border color of the view
	 * @param {String} value New value to set.
	 * @alias Titanium.UI.PickerRow.setBorderColor
	 */
	setBorderColor: function () { },
	/**
	 * the border radius of the view
	 * @alias Titanium.UI.PickerRow.borderRadius
	 * @property {Float}
	 */
	borderRadius: 0.0,
	/**
	 * Get the the border radius of the view
	 * @alias Titanium.UI.PickerRow.getBorderRadius
	 * @return {Float}
	 */
	getBorderRadius: function () { return borderRadius; },
	/**
	 * Set the the border radius of the view
	 * @param {Float} value New value to set.
	 * @alias Titanium.UI.PickerRow.setBorderRadius
	 */
	setBorderRadius: function () { },
	/**
	 * the border width of the view
	 * @alias Titanium.UI.PickerRow.borderWidth
	 * @property {Float}
	 */
	borderWidth: 0.0,
	/**
	 * Get the the border width of the view
	 * @alias Titanium.UI.PickerRow.getBorderWidth
	 * @return {Float}
	 */
	getBorderWidth: function () { return borderWidth; },
	/**
	 * Set the the border width of the view
	 * @param {Float} value New value to set.
	 * @alias Titanium.UI.PickerRow.setBorderWidth
	 */
	setBorderWidth: function () { },
	/**
	 * property for the view bottom position. This position is relative to the view's parent. Can be either a float value or a dimension string ie 'auto' (default), '50%' (iPhone only).
	 * @alias Titanium.UI.PickerRow.bottom
	 * @property {Float,String}
	 */
	bottom: 0.0,
	/**
	 * Get the property for the view bottom position. This position is relative to the view's parent. Can be either a float value or a dimension string ie 'auto' (default), '50%' (iPhone only).
	 * @alias Titanium.UI.PickerRow.getBottom
	 * @return {Float,String}
	 */
	getBottom: function () { return bottom; },
	/**
	 * Set the property for the view bottom position. This position is relative to the view's parent. Can be either a float value or a dimension string ie 'auto' (default), '50%' (iPhone only).
	 * @param {Float,String} value New value to set.
	 * @alias Titanium.UI.PickerRow.setBottom
	 */
	setBottom: function () { },
	/**
	 * a dictionary with properties x and y to indicate the center of the views position relative to the parent view
	 * @alias Titanium.UI.PickerRow.center
	 * @property {Object}
	 */
	center: {},
	/**
	 * Get the a dictionary with properties x and y to indicate the center of the views position relative to the parent view
	 * @alias Titanium.UI.PickerRow.getCenter
	 * @return {Object}
	 */
	getCenter: function () { return center; },
	/**
	 * Set the a dictionary with properties x and y to indicate the center of the views position relative to the parent view
	 * @param {Object} value New value to set.
	 * @alias Titanium.UI.PickerRow.setCenter
	 */
	setCenter: function () { },
	/**
	 * Set true if you want a view to be focusable when navigating with the trackball or D-Pad. Default: false. (Android Only)
	 * @alias Titanium.UI.PickerRow.focusable
	 * @property {Boolean}
	 */
	focusable: false,
	/**
	 * Get the Set true if you want a view to be focusable when navigating with the trackball or D-Pad. Default: false. (Android Only)
	 * @alias Titanium.UI.PickerRow.getFocusable
	 * @return {Boolean}
	 */
	getFocusable: function () { return focusable; },
	/**
	 * Set the Set true if you want a view to be focusable when navigating with the trackball or D-Pad. Default: false. (Android Only)
	 * @param {Boolean} value New value to set.
	 * @alias Titanium.UI.PickerRow.setFocusable
	 */
	setFocusable: function () { },
	/**
	 * the font family
	 * @alias Titanium.UI.PickerRow.font-family
	 * @property {String}
	 */
	font-family: '',
	/**
	 * Get the the font family
	 * @alias Titanium.UI.PickerRow.getFont-family
	 * @return {String}
	 */
	getFont-family: function () { return font-family; },
	/**
	 * Set the the font family
	 * @param {String} value New value to set.
	 * @alias Titanium.UI.PickerRow.setFont-family
	 */
	setFont-family: function () { },
	/**
	 * the font size
	 * @alias Titanium.UI.PickerRow.font-size
	 * @property {String}
	 */
	font-size: '',
	/**
	 * Get the the font size
	 * @alias Titanium.UI.PickerRow.getFont-size
	 * @return {String}
	 */
	getFont-size: function () { return font-size; },
	/**
	 * Set the the font size
	 * @param {String} value New value to set.
	 * @alias Titanium.UI.PickerRow.setFont-size
	 */
	setFont-size: function () { },
	/**
	 * the font style, either normal or italics
	 * @alias Titanium.UI.PickerRow.font-style
	 * @property {String}
	 */
	font-style: '',
	/**
	 * Get the the font style, either normal or italics
	 * @alias Titanium.UI.PickerRow.getFont-style
	 * @return {String}
	 */
	getFont-style: function () { return font-style; },
	/**
	 * Set the the font style, either normal or italics
	 * @param {String} value New value to set.
	 * @alias Titanium.UI.PickerRow.setFont-style
	 */
	setFont-style: function () { },
	/**
	 * the font weight, either normal or bold
	 * @alias Titanium.UI.PickerRow.font-weight
	 * @property {String}
	 */
	font-weight: '',
	/**
	 * Get the the font weight, either normal or bold
	 * @alias Titanium.UI.PickerRow.getFont-weight
	 * @return {String}
	 */
	getFont-weight: function () { return font-weight; },
	/**
	 * Set the the font weight, either normal or bold
	 * @param {String} value New value to set.
	 * @alias Titanium.UI.PickerRow.setFont-weight
	 */
	setFont-weight: function () { },
	/**
	 * the font size when displaying the text. ignored when using a custom view
	 * @alias Titanium.UI.PickerRow.fontSize
	 * @property {Integer}
	 */
	fontSize: 0,
	/**
	 * Get the the font size when displaying the text. ignored when using a custom view
	 * @alias Titanium.UI.PickerRow.getFontSize
	 * @return {Integer}
	 */
	getFontSize: function () { return fontSize; },
	/**
	 * Set the the font size when displaying the text. ignored when using a custom view
	 * @param {Integer} value New value to set.
	 * @alias Titanium.UI.PickerRow.setFontSize
	 */
	setFontSize: function () { },
	/**
	 * property for the view height. Can be either a float value or a dimension string ie 'auto' (default), '50%' (iPhone only).
	 * @alias Titanium.UI.PickerRow.height
	 * @property {Float,String}
	 */
	height: 0.0,
	/**
	 * Get the property for the view height. Can be either a float value or a dimension string ie 'auto' (default), '50%' (iPhone only).
	 * @alias Titanium.UI.PickerRow.getHeight
	 * @return {Float,String}
	 */
	getHeight: function () { return height; },
	/**
	 * Set the property for the view height. Can be either a float value or a dimension string ie 'auto' (default), '50%' (iPhone only).
	 * @param {Float,String} value New value to set.
	 * @alias Titanium.UI.PickerRow.setHeight
	 */
	setHeight: function () { },
	/**
	 * property for the view left position. This position is relative to the view's parent. Can be either a float value or a dimension string ie 'auto' (default), '50%' (iPhone only).
	 * @alias Titanium.UI.PickerRow.left
	 * @property {Float,String}
	 */
	left: 0.0,
	/**
	 * Get the property for the view left position. This position is relative to the view's parent. Can be either a float value or a dimension string ie 'auto' (default), '50%' (iPhone only).
	 * @alias Titanium.UI.PickerRow.getLeft
	 * @return {Float,String}
	 */
	getLeft: function () { return left; },
	/**
	 * Set the property for the view left position. This position is relative to the view's parent. Can be either a float value or a dimension string ie 'auto' (default), '50%' (iPhone only).
	 * @param {Float,String} value New value to set.
	 * @alias Titanium.UI.PickerRow.setLeft
	 */
	setLeft: function () { },
	/**
	 * the opacity from 0.0-1.0
	 * @alias Titanium.UI.PickerRow.opacity
	 * @property {Float}
	 */
	opacity: 0.0,
	/**
	 * Get the the opacity from 0.0-1.0
	 * @alias Titanium.UI.PickerRow.getOpacity
	 * @return {Float}
	 */
	getOpacity: function () { return opacity; },
	/**
	 * Set the the opacity from 0.0-1.0
	 * @param {Float} value New value to set.
	 * @alias Titanium.UI.PickerRow.setOpacity
	 */
	setOpacity: function () { },
	/**
	 * property for the view right position. This position is relative to the view's parent. Can be either a float value or a dimension string ie 'auto' (default), '50%' (iPhone only).
	 * @alias Titanium.UI.PickerRow.right
	 * @property {Float,String}
	 */
	right: 0.0,
	/**
	 * Get the property for the view right position. This position is relative to the view's parent. Can be either a float value or a dimension string ie 'auto' (default), '50%' (iPhone only).
	 * @alias Titanium.UI.PickerRow.getRight
	 * @return {Float,String}
	 */
	getRight: function () { return right; },
	/**
	 * Set the property for the view right position. This position is relative to the view's parent. Can be either a float value or a dimension string ie 'auto' (default), '50%' (iPhone only).
	 * @param {Float,String} value New value to set.
	 * @alias Titanium.UI.PickerRow.setRight
	 */
	setRight: function () { },
	/**
	 * when used in the constructor, set the row to selected on initial display
	 * @alias Titanium.UI.PickerRow.selected
	 * @property {Boolean}
	 */
	selected: false,
	/**
	 * Get the when used in the constructor, set the row to selected on initial display
	 * @alias Titanium.UI.PickerRow.getSelected
	 * @return {Boolean}
	 */
	getSelected: function () { return selected; },
	/**
	 * Set the when used in the constructor, set the row to selected on initial display
	 * @param {Boolean} value New value to set.
	 * @alias Titanium.UI.PickerRow.setSelected
	 */
	setSelected: function () { },
	/**
	 * the size of the view as a dictionary of width and height properties
	 * @alias Titanium.UI.PickerRow.size
	 * @property {Object}
	 */
	size: {},
	/**
	 * Get the the size of the view as a dictionary of width and height properties
	 * @alias Titanium.UI.PickerRow.getSize
	 * @return {Object}
	 */
	getSize: function () { return size; },
	/**
	 * Set the the size of the view as a dictionary of width and height properties
	 * @param {Object} value New value to set.
	 * @alias Titanium.UI.PickerRow.setSize
	 */
	setSize: function () { },
	/**
	 * One of Titanium.UI.Android.SOFT_KEYBOARD_DEFAULT_ON_FOCUS, Titanium.UI.Android.SOFT_KEYBOARD_HIDE_ON_FOCUS, or Titanium.UI.Android.SOFT_KEYBOARD_SHOW_ON_FOCUS. (Android only)
	 * @alias Titanium.UI.PickerRow.softKeyboardOnFocus
	 * @property {Integer}
	 */
	softKeyboardOnFocus: 0,
	/**
	 * Get the One of Titanium.UI.Android.SOFT_KEYBOARD_DEFAULT_ON_FOCUS, Titanium.UI.Android.SOFT_KEYBOARD_HIDE_ON_FOCUS, or Titanium.UI.Android.SOFT_KEYBOARD_SHOW_ON_FOCUS. (Android only)
	 * @alias Titanium.UI.PickerRow.getSoftKeyboardOnFocus
	 * @return {Integer}
	 */
	getSoftKeyboardOnFocus: function () { return softKeyboardOnFocus; },
	/**
	 * Set the One of Titanium.UI.Android.SOFT_KEYBOARD_DEFAULT_ON_FOCUS, Titanium.UI.Android.SOFT_KEYBOARD_HIDE_ON_FOCUS, or Titanium.UI.Android.SOFT_KEYBOARD_SHOW_ON_FOCUS. (Android only)
	 * @param {Integer} value New value to set.
	 * @alias Titanium.UI.PickerRow.setSoftKeyboardOnFocus
	 */
	setSoftKeyboardOnFocus: function () { },
	/**
	 * the display text
	 * @alias Titanium.UI.PickerRow.title
	 * @property {String}
	 */
	title: '',
	/**
	 * Get the the display text
	 * @alias Titanium.UI.PickerRow.getTitle
	 * @return {String}
	 */
	getTitle: function () { return title; },
	/**
	 * Set the the display text
	 * @param {String} value New value to set.
	 * @alias Titanium.UI.PickerRow.setTitle
	 */
	setTitle: function () { },
	/**
	 * property for the view top position. This position is relative to the view's parent. Can be either a float value or a dimension string ie 'auto' (default), '50%' (iPhone only).
	 * @alias Titanium.UI.PickerRow.top
	 * @property {Float,String}
	 */
	top: 0.0,
	/**
	 * Get the property for the view top position. This position is relative to the view's parent. Can be either a float value or a dimension string ie 'auto' (default), '50%' (iPhone only).
	 * @alias Titanium.UI.PickerRow.getTop
	 * @return {Float,String}
	 */
	getTop: function () { return top; },
	/**
	 * Set the property for the view top position. This position is relative to the view's parent. Can be either a float value or a dimension string ie 'auto' (default), '50%' (iPhone only).
	 * @param {Float,String} value New value to set.
	 * @alias Titanium.UI.PickerRow.setTop
	 */
	setTop: function () { },
	/**
	 * a boolean indicating if the view should receive touch events (true, default) or forward them to peers (false)
	 * @alias Titanium.UI.PickerRow.touchEnabled
	 * @property {Boolean}
	 */
	touchEnabled: false,
	/**
	 * Get the a boolean indicating if the view should receive touch events (true, default) or forward them to peers (false)
	 * @alias Titanium.UI.PickerRow.getTouchEnabled
	 * @return {Boolean}
	 */
	getTouchEnabled: function () { return touchEnabled; },
	/**
	 * Set the a boolean indicating if the view should receive touch events (true, default) or forward them to peers (false)
	 * @param {Boolean} value New value to set.
	 * @alias Titanium.UI.PickerRow.setTouchEnabled
	 */
	setTouchEnabled: function () { },
	/**
	 * the transformation matrix to apply to the view
	 * @alias Titanium.UI.PickerRow.transform
	 * @property {Object}
	 */
	transform: {},
	/**
	 * Get the the transformation matrix to apply to the view
	 * @alias Titanium.UI.PickerRow.getTransform
	 * @return {Object}
	 */
	getTransform: function () { return transform; },
	/**
	 * Set the the transformation matrix to apply to the view
	 * @param {Object} value New value to set.
	 * @alias Titanium.UI.PickerRow.setTransform
	 */
	setTransform: function () { },
	/**
	 * a boolean of the visibility of the view
	 * @alias Titanium.UI.PickerRow.visible
	 * @property {Boolean}
	 */
	visible: false,
	/**
	 * Get the a boolean of the visibility of the view
	 * @alias Titanium.UI.PickerRow.getVisible
	 * @return {Boolean}
	 */
	getVisible: function () { return visible; },
	/**
	 * Set the a boolean of the visibility of the view
	 * @param {Boolean} value New value to set.
	 * @alias Titanium.UI.PickerRow.setVisible
	 */
	setVisible: function () { },
	/**
	 * property for the view width. Can be either a float value or a dimension string ie 'auto' (default), '50%' (iPhone only).
	 * @alias Titanium.UI.PickerRow.width
	 * @property {Float,String}
	 */
	width: 0.0,
	/**
	 * Get the property for the view width. Can be either a float value or a dimension string ie 'auto' (default), '50%' (iPhone only).
	 * @alias Titanium.UI.PickerRow.getWidth
	 * @return {Float,String}
	 */
	getWidth: function () { return width; },
	/**
	 * Set the property for the view width. Can be either a float value or a dimension string ie 'auto' (default), '50%' (iPhone only).
	 * @param {Float,String} value New value to set.
	 * @alias Titanium.UI.PickerRow.setWidth
	 */
	setWidth: function () { },
	/**
	 * the z index position relative to other sibling views
	 * @alias Titanium.UI.PickerRow.zIndex
	 * @property {Integer}
	 */
	zIndex: 0,
	/**
	 * Get the the z index position relative to other sibling views
	 * @alias Titanium.UI.PickerRow.getZIndex
	 * @return {Integer}
	 */
	getZIndex: function () { return zIndex; },
	/**
	 * Set the the z index position relative to other sibling views
	 * @param {Integer} value New value to set.
	 * @alias Titanium.UI.PickerRow.setZIndex
	 */
	setZIndex: function () { },
	/**
	 * add a child to the view hierarchy
	 * @param {Object} view the view to add to this views hiearchy
	 * @alias Titanium.UI.PickerRow.add
	 */
	add: function (view) { },
	/**
	 * add an event listener for the instance to receive view triggered events
	 * @param {String} name name of the event
	 * @param {Function} callback callback function to invoke when the event is fired
	 * @alias Titanium.UI.PickerRow.addEventListener
	 */
	addEventListener: function (name,callback) { },
	/**
	 * animate the view
	 * @param {Object} obj either a dictionary of animation properties or an Animation object
	 * @param {Function} callback function to be invoked upon completion of the animation
	 * @alias Titanium.UI.PickerRow.animate
	 */
	animate: function (obj,callback) { },
	/**
	 * fire a synthesized event to the views listener
	 * @param {String} name name of the event
	 * @param {Object} event event object
	 * @alias Titanium.UI.PickerRow.fireEvent
	 */
	fireEvent: function (name,event) { },
	/**
	 * hide the view
	 * @alias Titanium.UI.PickerRow.hide
	 */
	hide: function () { },
	/**
	 * remove a previously add view from the view hiearchy
	 * @param {Object} view the view to remove from this views hiearchy
	 * @alias Titanium.UI.PickerRow.remove
	 */
	remove: function (view) { },
	/**
	 * remove a previously added event listener
	 * @param {String} name name of the event
	 * @param {Function} callback callback function passed in addEventListener
	 * @alias Titanium.UI.PickerRow.removeEventListener
	 */
	removeEventListener: function (name,callback) { },
	/**
	 * make the view visible
	 * @alias Titanium.UI.PickerRow.show
	 */
	show: function () { },
	/**
	 * return a Blob image of the rendered view
	 * @param {Function} f function to be invoked upon completion. if non-null, this method will be performed asynchronously. if null, it will be performed immediately
	 * @alias Titanium.UI.PickerRow.toImage
	 * @return {Object}
	 */
	toImage: function (f) { return {}; },
};

/**
 * A Progress Bar is created by the method Titanium.UI.createProgressBar.
 * @since 0.8
 */
Titanium.UI.ProgressBar = {
	/**
	 * the color of the progress bar text
	 * @alias Titanium.UI.ProgressBar.color
	 * @property {String}
	 */
	color: '',
	/**
	 * Get the the color of the progress bar text
	 * @alias Titanium.UI.ProgressBar.getColor
	 * @return {String}
	 */
	getColor: function () { return color; },
	/**
	 * Set the the color of the progress bar text
	 * @param {String} value New value to set.
	 * @alias Titanium.UI.ProgressBar.setColor
	 */
	setColor: function () { },
	/**
	 * the font object for the progress bar text
	 * @alias Titanium.UI.ProgressBar.font
	 * @property {Object}
	 */
	font: {},
	/**
	 * Get the the font object for the progress bar text
	 * @alias Titanium.UI.ProgressBar.getFont
	 * @return {Object}
	 */
	getFont: function () { return font; },
	/**
	 * Set the the font object for the progress bar text
	 * @param {Object} value New value to set.
	 * @alias Titanium.UI.ProgressBar.setFont
	 */
	setFont: function () { },
	/**
	 * the maximum value of the progress bar
	 * @alias Titanium.UI.ProgressBar.max
	 * @property {Float}
	 */
	max: 0.0,
	/**
	 * Get the the maximum value of the progress bar
	 * @alias Titanium.UI.ProgressBar.getMax
	 * @return {Float}
	 */
	getMax: function () { return max; },
	/**
	 * Set the the maximum value of the progress bar
	 * @param {Float} value New value to set.
	 * @alias Titanium.UI.ProgressBar.setMax
	 */
	setMax: function () { },
	/**
	 * the progress bar message
	 * @alias Titanium.UI.ProgressBar.message
	 * @property {String}
	 */
	message: '',
	/**
	 * Get the the progress bar message
	 * @alias Titanium.UI.ProgressBar.getMessage
	 * @return {String}
	 */
	getMessage: function () { return message; },
	/**
	 * Set the the progress bar message
	 * @param {String} value New value to set.
	 * @alias Titanium.UI.ProgressBar.setMessage
	 */
	setMessage: function () { },
	/**
	 * the minimum value of the progress bar
	 * @alias Titanium.UI.ProgressBar.min
	 * @property {Float}
	 */
	min: 0.0,
	/**
	 * Get the the minimum value of the progress bar
	 * @alias Titanium.UI.ProgressBar.getMin
	 * @return {Float}
	 */
	getMin: function () { return min; },
	/**
	 * Set the the minimum value of the progress bar
	 * @param {Float} value New value to set.
	 * @alias Titanium.UI.ProgressBar.setMin
	 */
	setMin: function () { },
	/**
	 * the style of the progress bar
	 * @alias Titanium.UI.ProgressBar.style
	 * @property {Integer}
	 */
	style: 0,
	/**
	 * Get the the style of the progress bar
	 * @alias Titanium.UI.ProgressBar.getStyle
	 * @return {Integer}
	 */
	getStyle: function () { return style; },
	/**
	 * Set the the style of the progress bar
	 * @param {Integer} value New value to set.
	 * @alias Titanium.UI.ProgressBar.setStyle
	 */
	setStyle: function () { },
	/**
	 * the current value of the progress bar
	 * @alias Titanium.UI.ProgressBar.value
	 * @property {Float}
	 */
	value: 0.0,
	/**
	 * Get the the current value of the progress bar
	 * @alias Titanium.UI.ProgressBar.getValue
	 * @return {Float}
	 */
	getValue: function () { return value; },
	/**
	 * Set the the current value of the progress bar
	 * @param {Float} value New value to set.
	 * @alias Titanium.UI.ProgressBar.setValue
	 */
	setValue: function () { },
};

/**
 * A Scroll View is used to create a scrollable region of content.  Views added to the Scroll View will be scrolled based on the content size of the Scroll View. The Scroll View is created by the method Titanium.UI.createScrollView. Note: In Android, Scroll Views can only scroll in one direction, either vertical or horizontal, but not both at the same time. See the Titanium.UI.ScrollView.scrollType property
 * @since 0.9
 */
Titanium.UI.ScrollView = {
	/**
	 * a dictionary with properties x and y to indicate the anchor point value. anchor specifies the position by which animation should occur. center is 0.5, 0.5
	 * @alias Titanium.UI.ScrollView.anchorPoint
	 * @property {Object}
	 */
	anchorPoint: {},
	/**
	 * Get the a dictionary with properties x and y to indicate the anchor point value. anchor specifies the position by which animation should occur. center is 0.5, 0.5
	 * @alias Titanium.UI.ScrollView.getAnchorPoint
	 * @return {Object}
	 */
	getAnchorPoint: function () { return anchorPoint; },
	/**
	 * Set the a dictionary with properties x and y to indicate the anchor point value. anchor specifies the position by which animation should occur. center is 0.5, 0.5
	 * @param {Object} value New value to set.
	 * @alias Titanium.UI.ScrollView.setAnchorPoint
	 */
	setAnchorPoint: function () { },
	/**
	 * read-only object with x and y properties of where the view is during animation
	 * @alias Titanium.UI.ScrollView.animatedCenterPoint
	 * @property {Object}
	 */
	animatedCenterPoint: {},
	/**
	 * Get the read-only object with x and y properties of where the view is during animation
	 * @alias Titanium.UI.ScrollView.getAnimatedCenterPoint
	 * @return {Object}
	 */
	getAnimatedCenterPoint: function () { return animatedCenterPoint; },
	/**
	 * Set the read-only object with x and y properties of where the view is during animation
	 * @param {Object} value New value to set.
	 * @alias Titanium.UI.ScrollView.setAnimatedCenterPoint
	 */
	setAnimatedCenterPoint: function () { },
	/**
	 * the background color of the view
	 * @alias Titanium.UI.ScrollView.backgroundColor
	 * @property {String}
	 */
	backgroundColor: '',
	/**
	 * Get the the background color of the view
	 * @alias Titanium.UI.ScrollView.getBackgroundColor
	 * @return {String}
	 */
	getBackgroundColor: function () { return backgroundColor; },
	/**
	 * Set the the background color of the view
	 * @param {String} value New value to set.
	 * @alias Titanium.UI.ScrollView.setBackgroundColor
	 */
	setBackgroundColor: function () { },
	/**
	 * the disabled background color of the view. (Android)
	 * @alias Titanium.UI.ScrollView.backgroundDisabledColor
	 * @property {String}
	 */
	backgroundDisabledColor: '',
	/**
	 * Get the the disabled background color of the view. (Android)
	 * @alias Titanium.UI.ScrollView.getBackgroundDisabledColor
	 * @return {String}
	 */
	getBackgroundDisabledColor: function () { return backgroundDisabledColor; },
	/**
	 * Set the the disabled background color of the view. (Android)
	 * @param {String} value New value to set.
	 * @alias Titanium.UI.ScrollView.setBackgroundDisabledColor
	 */
	setBackgroundDisabledColor: function () { },
	/**
	 * the disabled background image url of the view. (Android)
	 * @alias Titanium.UI.ScrollView.backgroundDisabledImage
	 * @property {String}
	 */
	backgroundDisabledImage: '',
	/**
	 * Get the the disabled background image url of the view. (Android)
	 * @alias Titanium.UI.ScrollView.getBackgroundDisabledImage
	 * @return {String}
	 */
	getBackgroundDisabledImage: function () { return backgroundDisabledImage; },
	/**
	 * Set the the disabled background image url of the view. (Android)
	 * @param {String} value New value to set.
	 * @alias Titanium.UI.ScrollView.setBackgroundDisabledImage
	 */
	setBackgroundDisabledImage: function () { },
	/**
	 * the focused background color of the view. focusable must be true for normal views. (Android)
	 * @alias Titanium.UI.ScrollView.backgroundFocusedColor
	 * @property {String}
	 */
	backgroundFocusedColor: '',
	/**
	 * Get the the focused background color of the view. focusable must be true for normal views. (Android)
	 * @alias Titanium.UI.ScrollView.getBackgroundFocusedColor
	 * @return {String}
	 */
	getBackgroundFocusedColor: function () { return backgroundFocusedColor; },
	/**
	 * Set the the focused background color of the view. focusable must be true for normal views. (Android)
	 * @param {String} value New value to set.
	 * @alias Titanium.UI.ScrollView.setBackgroundFocusedColor
	 */
	setBackgroundFocusedColor: function () { },
	/**
	 * the focused background image url of the view. focusable must be true for normal views. (Android)
	 * @alias Titanium.UI.ScrollView.backgroundFocusedImage
	 * @property {String}
	 */
	backgroundFocusedImage: '',
	/**
	 * Get the the focused background image url of the view. focusable must be true for normal views. (Android)
	 * @alias Titanium.UI.ScrollView.getBackgroundFocusedImage
	 * @return {String}
	 */
	getBackgroundFocusedImage: function () { return backgroundFocusedImage; },
	/**
	 * Set the the focused background image url of the view. focusable must be true for normal views. (Android)
	 * @param {String} value New value to set.
	 * @alias Titanium.UI.ScrollView.setBackgroundFocusedImage
	 */
	setBackgroundFocusedImage: function () { },
	/**
	 * a background gradient for the view with the properties: type,startPoint,endPoint,startRadius,endRadius,backfillStart,backfillEnd,colors.
	 * @alias Titanium.UI.ScrollView.backgroundGradient
	 * @property {Object}
	 */
	backgroundGradient: {},
	/**
	 * Get the a background gradient for the view with the properties: type,startPoint,endPoint,startRadius,endRadius,backfillStart,backfillEnd,colors.
	 * @alias Titanium.UI.ScrollView.getBackgroundGradient
	 * @return {Object}
	 */
	getBackgroundGradient: function () { return backgroundGradient; },
	/**
	 * Set the a background gradient for the view with the properties: type,startPoint,endPoint,startRadius,endRadius,backfillStart,backfillEnd,colors.
	 * @param {Object} value New value to set.
	 * @alias Titanium.UI.ScrollView.setBackgroundGradient
	 */
	setBackgroundGradient: function () { },
	/**
	 * the background image url of the view
	 * @alias Titanium.UI.ScrollView.backgroundImage
	 * @property {String}
	 */
	backgroundImage: '',
	/**
	 * Get the the background image url of the view
	 * @alias Titanium.UI.ScrollView.getBackgroundImage
	 * @return {String}
	 */
	getBackgroundImage: function () { return backgroundImage; },
	/**
	 * Set the the background image url of the view
	 * @param {String} value New value to set.
	 * @alias Titanium.UI.ScrollView.setBackgroundImage
	 */
	setBackgroundImage: function () { },
	/**
	 * End caps specify the portion of an image that should not be resized when an image is stretched. This technique is used to implement buttons and other resizable image-based interface elements. When a button with end caps is resized, the resizing occurs only in the middle of the button, in the region between the end caps. The end caps themselves keep their original size and appearance. This property specifies the size of the left end cap. The middle (stretchable) portion is assumed to be 1 pixel wide. The right end cap is therefore computed by adding the size of the left end cap and the middle portion together and then subtracting that value from the width of the image
	 * @alias Titanium.UI.ScrollView.backgroundLeftCap
	 * @property {Float}
	 */
	backgroundLeftCap: 0.0,
	/**
	 * Get the End caps specify the portion of an image that should not be resized when an image is stretched. This technique is used to implement buttons and other resizable image-based interface elements. When a button with end caps is resized, the resizing occurs only in the middle of the button, in the region between the end caps. The end caps themselves keep their original size and appearance. This property specifies the size of the left end cap. The middle (stretchable) portion is assumed to be 1 pixel wide. The right end cap is therefore computed by adding the size of the left end cap and the middle portion together and then subtracting that value from the width of the image
	 * @alias Titanium.UI.ScrollView.getBackgroundLeftCap
	 * @return {Float}
	 */
	getBackgroundLeftCap: function () { return backgroundLeftCap; },
	/**
	 * Set the End caps specify the portion of an image that should not be resized when an image is stretched. This technique is used to implement buttons and other resizable image-based interface elements. When a button with end caps is resized, the resizing occurs only in the middle of the button, in the region between the end caps. The end caps themselves keep their original size and appearance. This property specifies the size of the left end cap. The middle (stretchable) portion is assumed to be 1 pixel wide. The right end cap is therefore computed by adding the size of the left end cap and the middle portion together and then subtracting that value from the width of the image
	 * @param {Float} value New value to set.
	 * @alias Titanium.UI.ScrollView.setBackgroundLeftCap
	 */
	setBackgroundLeftCap: function () { },
	/**
	 * the selected background color of the view. focusable must be true for normal views. (Android)
	 * @alias Titanium.UI.ScrollView.backgroundSelectedColor
	 * @property {String}
	 */
	backgroundSelectedColor: '',
	/**
	 * Get the the selected background color of the view. focusable must be true for normal views. (Android)
	 * @alias Titanium.UI.ScrollView.getBackgroundSelectedColor
	 * @return {String}
	 */
	getBackgroundSelectedColor: function () { return backgroundSelectedColor; },
	/**
	 * Set the the selected background color of the view. focusable must be true for normal views. (Android)
	 * @param {String} value New value to set.
	 * @alias Titanium.UI.ScrollView.setBackgroundSelectedColor
	 */
	setBackgroundSelectedColor: function () { },
	/**
	 * the selected background image url of the view. focusable must be true for normal views. (Android)
	 * @alias Titanium.UI.ScrollView.backgroundSelectedImage
	 * @property {String}
	 */
	backgroundSelectedImage: '',
	/**
	 * Get the the selected background image url of the view. focusable must be true for normal views. (Android)
	 * @alias Titanium.UI.ScrollView.getBackgroundSelectedImage
	 * @return {String}
	 */
	getBackgroundSelectedImage: function () { return backgroundSelectedImage; },
	/**
	 * Set the the selected background image url of the view. focusable must be true for normal views. (Android)
	 * @param {String} value New value to set.
	 * @alias Titanium.UI.ScrollView.setBackgroundSelectedImage
	 */
	setBackgroundSelectedImage: function () { },
	/**
	 * End caps specify the portion of an image that should not be resized when an image is stretched. This technique is used to implement buttons and other resizable image-based interface elements. When a button with end caps is resized, the resizing occurs only in the middle of the button, in the region between the end caps. The end caps themselves keep their original size and appearance. This property specifies the size of the top end cap. The middle (stretchable) portion is assumed to be 1 pixel wide. The bottom end cap is therefore computed by adding the size of the top end cap and the middle portion together and then subtracting that value from the height of the image
	 * @alias Titanium.UI.ScrollView.backgroundTopCap
	 * @property {Float}
	 */
	backgroundTopCap: 0.0,
	/**
	 * Get the End caps specify the portion of an image that should not be resized when an image is stretched. This technique is used to implement buttons and other resizable image-based interface elements. When a button with end caps is resized, the resizing occurs only in the middle of the button, in the region between the end caps. The end caps themselves keep their original size and appearance. This property specifies the size of the top end cap. The middle (stretchable) portion is assumed to be 1 pixel wide. The bottom end cap is therefore computed by adding the size of the top end cap and the middle portion together and then subtracting that value from the height of the image
	 * @alias Titanium.UI.ScrollView.getBackgroundTopCap
	 * @return {Float}
	 */
	getBackgroundTopCap: function () { return backgroundTopCap; },
	/**
	 * Set the End caps specify the portion of an image that should not be resized when an image is stretched. This technique is used to implement buttons and other resizable image-based interface elements. When a button with end caps is resized, the resizing occurs only in the middle of the button, in the region between the end caps. The end caps themselves keep their original size and appearance. This property specifies the size of the top end cap. The middle (stretchable) portion is assumed to be 1 pixel wide. The bottom end cap is therefore computed by adding the size of the top end cap and the middle portion together and then subtracting that value from the height of the image
	 * @param {Float} value New value to set.
	 * @alias Titanium.UI.ScrollView.setBackgroundTopCap
	 */
	setBackgroundTopCap: function () { },
	/**
	 * the border color of the view
	 * @alias Titanium.UI.ScrollView.borderColor
	 * @property {String}
	 */
	borderColor: '',
	/**
	 * Get the the border color of the view
	 * @alias Titanium.UI.ScrollView.getBorderColor
	 * @return {String}
	 */
	getBorderColor: function () { return borderColor; },
	/**
	 * Set the the border color of the view
	 * @param {String} value New value to set.
	 * @alias Titanium.UI.ScrollView.setBorderColor
	 */
	setBorderColor: function () { },
	/**
	 * the border radius of the view
	 * @alias Titanium.UI.ScrollView.borderRadius
	 * @property {Float}
	 */
	borderRadius: 0.0,
	/**
	 * Get the the border radius of the view
	 * @alias Titanium.UI.ScrollView.getBorderRadius
	 * @return {Float}
	 */
	getBorderRadius: function () { return borderRadius; },
	/**
	 * Set the the border radius of the view
	 * @param {Float} value New value to set.
	 * @alias Titanium.UI.ScrollView.setBorderRadius
	 */
	setBorderRadius: function () { },
	/**
	 * the border width of the view
	 * @alias Titanium.UI.ScrollView.borderWidth
	 * @property {Float}
	 */
	borderWidth: 0.0,
	/**
	 * Get the the border width of the view
	 * @alias Titanium.UI.ScrollView.getBorderWidth
	 * @return {Float}
	 */
	getBorderWidth: function () { return borderWidth; },
	/**
	 * Set the the border width of the view
	 * @param {Float} value New value to set.
	 * @alias Titanium.UI.ScrollView.setBorderWidth
	 */
	setBorderWidth: function () { },
	/**
	 * property for the view bottom position. This position is relative to the view's parent. Can be either a float value or a dimension string ie 'auto' (default), '50%' (iPhone only).
	 * @alias Titanium.UI.ScrollView.bottom
	 * @property {Float,String}
	 */
	bottom: 0.0,
	/**
	 * Get the property for the view bottom position. This position is relative to the view's parent. Can be either a float value or a dimension string ie 'auto' (default), '50%' (iPhone only).
	 * @alias Titanium.UI.ScrollView.getBottom
	 * @return {Float,String}
	 */
	getBottom: function () { return bottom; },
	/**
	 * Set the property for the view bottom position. This position is relative to the view's parent. Can be either a float value or a dimension string ie 'auto' (default), '50%' (iPhone only).
	 * @param {Float,String} value New value to set.
	 * @alias Titanium.UI.ScrollView.setBottom
	 */
	setBottom: function () { },
	/**
	 * (iPhone only) boolean to indicate if the scroll view can cancel subview touches in order to scroll instead. Default of true
	 * @alias Titanium.UI.ScrollView.canCancelEvents
	 * @property {Boolean}
	 */
	canCancelEvents: false,
	/**
	 * Get the (iPhone only) boolean to indicate if the scroll view can cancel subview touches in order to scroll instead. Default of true
	 * @alias Titanium.UI.ScrollView.getCanCancelEvents
	 * @return {Boolean}
	 */
	getCanCancelEvents: function () { return canCancelEvents; },
	/**
	 * Set the (iPhone only) boolean to indicate if the scroll view can cancel subview touches in order to scroll instead. Default of true
	 * @param {Boolean} value New value to set.
	 * @alias Titanium.UI.ScrollView.setCanCancelEvents
	 */
	setCanCancelEvents: function () { },
	/**
	 * a dictionary with properties x and y to indicate the center of the views position relative to the parent view
	 * @alias Titanium.UI.ScrollView.center
	 * @property {Object}
	 */
	center: {},
	/**
	 * Get the a dictionary with properties x and y to indicate the center of the views position relative to the parent view
	 * @alias Titanium.UI.ScrollView.getCenter
	 * @return {Object}
	 */
	getCenter: function () { return center; },
	/**
	 * Set the a dictionary with properties x and y to indicate the center of the views position relative to the parent view
	 * @param {Object} value New value to set.
	 * @alias Titanium.UI.ScrollView.setCenter
	 */
	setCenter: function () { },
	/**
	 * the height of the scrollable area
	 * @alias Titanium.UI.ScrollView.contentHeight
	 * @property {Float}
	 */
	contentHeight: 0.0,
	/**
	 * Get the the height of the scrollable area
	 * @alias Titanium.UI.ScrollView.getContentHeight
	 * @return {Float}
	 */
	getContentHeight: function () { return contentHeight; },
	/**
	 * Set the the height of the scrollable area
	 * @param {Float} value New value to set.
	 * @alias Titanium.UI.ScrollView.setContentHeight
	 */
	setContentHeight: function () { },
	/**
	 * an object (with x and y properties) to indicate the offset of the content area
	 * @alias Titanium.UI.ScrollView.contentOffset
	 * @property {Object}
	 */
	contentOffset: {},
	/**
	 * Get the an object (with x and y properties) to indicate the offset of the content area
	 * @alias Titanium.UI.ScrollView.getContentOffset
	 * @return {Object}
	 */
	getContentOffset: function () { return contentOffset; },
	/**
	 * Set the an object (with x and y properties) to indicate the offset of the content area
	 * @param {Object} value New value to set.
	 * @alias Titanium.UI.ScrollView.setContentOffset
	 */
	setContentOffset: function () { },
	/**
	 * the width of the scrollable area
	 * @alias Titanium.UI.ScrollView.contentWidth
	 * @property {Float}
	 */
	contentWidth: 0.0,
	/**
	 * Get the the width of the scrollable area
	 * @alias Titanium.UI.ScrollView.getContentWidth
	 * @return {Float}
	 */
	getContentWidth: function () { return contentWidth; },
	/**
	 * Set the the width of the scrollable area
	 * @param {Float} value New value to set.
	 * @alias Titanium.UI.ScrollView.setContentWidth
	 */
	setContentWidth: function () { },
	/**
	 * boolean to control bounce during scrolling
	 * @alias Titanium.UI.ScrollView.disableBounce
	 * @property {Boolean}
	 */
	disableBounce: false,
	/**
	 * Get the boolean to control bounce during scrolling
	 * @alias Titanium.UI.ScrollView.getDisableBounce
	 * @return {Boolean}
	 */
	getDisableBounce: function () { return disableBounce; },
	/**
	 * Set the boolean to control bounce during scrolling
	 * @param {Boolean} value New value to set.
	 * @alias Titanium.UI.ScrollView.setDisableBounce
	 */
	setDisableBounce: function () { },
	/**
	 * Set true if you want a view to be focusable when navigating with the trackball or D-Pad. Default: false. (Android Only)
	 * @alias Titanium.UI.ScrollView.focusable
	 * @property {Boolean}
	 */
	focusable: false,
	/**
	 * Get the Set true if you want a view to be focusable when navigating with the trackball or D-Pad. Default: false. (Android Only)
	 * @alias Titanium.UI.ScrollView.getFocusable
	 * @return {Boolean}
	 */
	getFocusable: function () { return focusable; },
	/**
	 * Set the Set true if you want a view to be focusable when navigating with the trackball or D-Pad. Default: false. (Android Only)
	 * @param {Boolean} value New value to set.
	 * @alias Titanium.UI.ScrollView.setFocusable
	 */
	setFocusable: function () { },
	/**
	 * the font family
	 * @alias Titanium.UI.ScrollView.font-family
	 * @property {String}
	 */
	font-family: '',
	/**
	 * Get the the font family
	 * @alias Titanium.UI.ScrollView.getFont-family
	 * @return {String}
	 */
	getFont-family: function () { return font-family; },
	/**
	 * Set the the font family
	 * @param {String} value New value to set.
	 * @alias Titanium.UI.ScrollView.setFont-family
	 */
	setFont-family: function () { },
	/**
	 * the font size
	 * @alias Titanium.UI.ScrollView.font-size
	 * @property {String}
	 */
	font-size: '',
	/**
	 * Get the the font size
	 * @alias Titanium.UI.ScrollView.getFont-size
	 * @return {String}
	 */
	getFont-size: function () { return font-size; },
	/**
	 * Set the the font size
	 * @param {String} value New value to set.
	 * @alias Titanium.UI.ScrollView.setFont-size
	 */
	setFont-size: function () { },
	/**
	 * the font style, either normal or italics
	 * @alias Titanium.UI.ScrollView.font-style
	 * @property {String}
	 */
	font-style: '',
	/**
	 * Get the the font style, either normal or italics
	 * @alias Titanium.UI.ScrollView.getFont-style
	 * @return {String}
	 */
	getFont-style: function () { return font-style; },
	/**
	 * Set the the font style, either normal or italics
	 * @param {String} value New value to set.
	 * @alias Titanium.UI.ScrollView.setFont-style
	 */
	setFont-style: function () { },
	/**
	 * the font weight, either normal or bold
	 * @alias Titanium.UI.ScrollView.font-weight
	 * @property {String}
	 */
	font-weight: '',
	/**
	 * Get the the font weight, either normal or bold
	 * @alias Titanium.UI.ScrollView.getFont-weight
	 * @return {String}
	 */
	getFont-weight: function () { return font-weight; },
	/**
	 * Set the the font weight, either normal or bold
	 * @param {String} value New value to set.
	 * @alias Titanium.UI.ScrollView.setFont-weight
	 */
	setFont-weight: function () { },
	/**
	 * property for the view height. Can be either a float value or a dimension string ie 'auto' (default), '50%' (iPhone only).
	 * @alias Titanium.UI.ScrollView.height
	 * @property {Float,String}
	 */
	height: 0.0,
	/**
	 * Get the property for the view height. Can be either a float value or a dimension string ie 'auto' (default), '50%' (iPhone only).
	 * @alias Titanium.UI.ScrollView.getHeight
	 * @return {Float,String}
	 */
	getHeight: function () { return height; },
	/**
	 * Set the property for the view height. Can be either a float value or a dimension string ie 'auto' (default), '50%' (iPhone only).
	 * @param {Float,String} value New value to set.
	 * @alias Titanium.UI.ScrollView.setHeight
	 */
	setHeight: function () { },
	/**
	 * boolean to control the horizontal bounce during scrolling
	 * @alias Titanium.UI.ScrollView.horizontalBounce
	 * @property {Boolean}
	 */
	horizontalBounce: false,
	/**
	 * Get the boolean to control the horizontal bounce during scrolling
	 * @alias Titanium.UI.ScrollView.getHorizontalBounce
	 * @return {Boolean}
	 */
	getHorizontalBounce: function () { return horizontalBounce; },
	/**
	 * Set the boolean to control the horizontal bounce during scrolling
	 * @param {Boolean} value New value to set.
	 * @alias Titanium.UI.ScrollView.setHorizontalBounce
	 */
	setHorizontalBounce: function () { },
	/**
	 * property for the view left position. This position is relative to the view's parent. Can be either a float value or a dimension string ie 'auto' (default), '50%' (iPhone only).
	 * @alias Titanium.UI.ScrollView.left
	 * @property {Float,String}
	 */
	left: 0.0,
	/**
	 * Get the property for the view left position. This position is relative to the view's parent. Can be either a float value or a dimension string ie 'auto' (default), '50%' (iPhone only).
	 * @alias Titanium.UI.ScrollView.getLeft
	 * @return {Float,String}
	 */
	getLeft: function () { return left; },
	/**
	 * Set the property for the view left position. This position is relative to the view's parent. Can be either a float value or a dimension string ie 'auto' (default), '50%' (iPhone only).
	 * @param {Float,String} value New value to set.
	 * @alias Titanium.UI.ScrollView.setLeft
	 */
	setLeft: function () { },
	/**
	 * the maximum scale of the content
	 * @alias Titanium.UI.ScrollView.maxZoomScale
	 * @property {Float}
	 */
	maxZoomScale: 0.0,
	/**
	 * Get the the maximum scale of the content
	 * @alias Titanium.UI.ScrollView.getMaxZoomScale
	 * @return {Float}
	 */
	getMaxZoomScale: function () { return maxZoomScale; },
	/**
	 * Set the the maximum scale of the content
	 * @param {Float} value New value to set.
	 * @alias Titanium.UI.ScrollView.setMaxZoomScale
	 */
	setMaxZoomScale: function () { },
	/**
	 * the minimum scale of the content
	 * @alias Titanium.UI.ScrollView.minZoomScale
	 * @property {Float}
	 */
	minZoomScale: 0.0,
	/**
	 * Get the the minimum scale of the content
	 * @alias Titanium.UI.ScrollView.getMinZoomScale
	 * @return {Float}
	 */
	getMinZoomScale: function () { return minZoomScale; },
	/**
	 * Set the the minimum scale of the content
	 * @param {Float} value New value to set.
	 * @alias Titanium.UI.ScrollView.setMinZoomScale
	 */
	setMinZoomScale: function () { },
	/**
	 * the opacity from 0.0-1.0
	 * @alias Titanium.UI.ScrollView.opacity
	 * @property {Float}
	 */
	opacity: 0.0,
	/**
	 * Get the the opacity from 0.0-1.0
	 * @alias Titanium.UI.ScrollView.getOpacity
	 * @return {Float}
	 */
	getOpacity: function () { return opacity; },
	/**
	 * Set the the opacity from 0.0-1.0
	 * @param {Float} value New value to set.
	 * @alias Titanium.UI.ScrollView.setOpacity
	 */
	setOpacity: function () { },
	/**
	 * property for the view right position. This position is relative to the view's parent. Can be either a float value or a dimension string ie 'auto' (default), '50%' (iPhone only).
	 * @alias Titanium.UI.ScrollView.right
	 * @property {Float,String}
	 */
	right: 0.0,
	/**
	 * Get the property for the view right position. This position is relative to the view's parent. Can be either a float value or a dimension string ie 'auto' (default), '50%' (iPhone only).
	 * @alias Titanium.UI.ScrollView.getRight
	 * @return {Float,String}
	 */
	getRight: function () { return right; },
	/**
	 * Set the property for the view right position. This position is relative to the view's parent. Can be either a float value or a dimension string ie 'auto' (default), '50%' (iPhone only).
	 * @param {Float,String} value New value to set.
	 * @alias Titanium.UI.ScrollView.setRight
	 */
	setRight: function () { },
	/**
	 * (Android only) the type of ScrollView: "vertical" or "horizontal"
	 * @alias Titanium.UI.ScrollView.scrollType
	 * @property {String}
	 */
	scrollType: '',
	/**
	 * Get the (Android only) the type of ScrollView: "vertical" or "horizontal"
	 * @alias Titanium.UI.ScrollView.getScrollType
	 * @return {String}
	 */
	getScrollType: function () { return scrollType; },
	/**
	 * Set the (Android only) the type of ScrollView: "vertical" or "horizontal"
	 * @param {String} value New value to set.
	 * @alias Titanium.UI.ScrollView.setScrollType
	 */
	setScrollType: function () { },
	/**
	 * boolean to indicate whether the horizontal scroll indicator is visible
	 * @alias Titanium.UI.ScrollView.showHorizontalScrollIndicator
	 * @property {Boolean}
	 */
	showHorizontalScrollIndicator: false,
	/**
	 * Get the boolean to indicate whether the horizontal scroll indicator is visible
	 * @alias Titanium.UI.ScrollView.getShowHorizontalScrollIndicator
	 * @return {Boolean}
	 */
	getShowHorizontalScrollIndicator: function () { return showHorizontalScrollIndicator; },
	/**
	 * Set the boolean to indicate whether the horizontal scroll indicator is visible
	 * @param {Boolean} value New value to set.
	 * @alias Titanium.UI.ScrollView.setShowHorizontalScrollIndicator
	 */
	setShowHorizontalScrollIndicator: function () { },
	/**
	 * boolean to indicate whether the vertical scroll indicator is visible
	 * @alias Titanium.UI.ScrollView.showVerticalScrollIndicator
	 * @property {Boolean}
	 */
	showVerticalScrollIndicator: false,
	/**
	 * Get the boolean to indicate whether the vertical scroll indicator is visible
	 * @alias Titanium.UI.ScrollView.getShowVerticalScrollIndicator
	 * @return {Boolean}
	 */
	getShowVerticalScrollIndicator: function () { return showVerticalScrollIndicator; },
	/**
	 * Set the boolean to indicate whether the vertical scroll indicator is visible
	 * @param {Boolean} value New value to set.
	 * @alias Titanium.UI.ScrollView.setShowVerticalScrollIndicator
	 */
	setShowVerticalScrollIndicator: function () { },
	/**
	 * the size of the view as a dictionary of width and height properties
	 * @alias Titanium.UI.ScrollView.size
	 * @property {Object}
	 */
	size: {},
	/**
	 * Get the the size of the view as a dictionary of width and height properties
	 * @alias Titanium.UI.ScrollView.getSize
	 * @return {Object}
	 */
	getSize: function () { return size; },
	/**
	 * Set the the size of the view as a dictionary of width and height properties
	 * @param {Object} value New value to set.
	 * @alias Titanium.UI.ScrollView.setSize
	 */
	setSize: function () { },
	/**
	 * One of Titanium.UI.Android.SOFT_KEYBOARD_DEFAULT_ON_FOCUS, Titanium.UI.Android.SOFT_KEYBOARD_HIDE_ON_FOCUS, or Titanium.UI.Android.SOFT_KEYBOARD_SHOW_ON_FOCUS. (Android only)
	 * @alias Titanium.UI.ScrollView.softKeyboardOnFocus
	 * @property {Integer}
	 */
	softKeyboardOnFocus: 0,
	/**
	 * Get the One of Titanium.UI.Android.SOFT_KEYBOARD_DEFAULT_ON_FOCUS, Titanium.UI.Android.SOFT_KEYBOARD_HIDE_ON_FOCUS, or Titanium.UI.Android.SOFT_KEYBOARD_SHOW_ON_FOCUS. (Android only)
	 * @alias Titanium.UI.ScrollView.getSoftKeyboardOnFocus
	 * @return {Integer}
	 */
	getSoftKeyboardOnFocus: function () { return softKeyboardOnFocus; },
	/**
	 * Set the One of Titanium.UI.Android.SOFT_KEYBOARD_DEFAULT_ON_FOCUS, Titanium.UI.Android.SOFT_KEYBOARD_HIDE_ON_FOCUS, or Titanium.UI.Android.SOFT_KEYBOARD_SHOW_ON_FOCUS. (Android only)
	 * @param {Integer} value New value to set.
	 * @alias Titanium.UI.ScrollView.setSoftKeyboardOnFocus
	 */
	setSoftKeyboardOnFocus: function () { },
	/**
	 * property for the view top position. This position is relative to the view's parent. Can be either a float value or a dimension string ie 'auto' (default), '50%' (iPhone only).
	 * @alias Titanium.UI.ScrollView.top
	 * @property {Float,String}
	 */
	top: 0.0,
	/**
	 * Get the property for the view top position. This position is relative to the view's parent. Can be either a float value or a dimension string ie 'auto' (default), '50%' (iPhone only).
	 * @alias Titanium.UI.ScrollView.getTop
	 * @return {Float,String}
	 */
	getTop: function () { return top; },
	/**
	 * Set the property for the view top position. This position is relative to the view's parent. Can be either a float value or a dimension string ie 'auto' (default), '50%' (iPhone only).
	 * @param {Float,String} value New value to set.
	 * @alias Titanium.UI.ScrollView.setTop
	 */
	setTop: function () { },
	/**
	 * a boolean indicating if the view should receive touch events (true, default) or forward them to peers (false)
	 * @alias Titanium.UI.ScrollView.touchEnabled
	 * @property {Boolean}
	 */
	touchEnabled: false,
	/**
	 * Get the a boolean indicating if the view should receive touch events (true, default) or forward them to peers (false)
	 * @alias Titanium.UI.ScrollView.getTouchEnabled
	 * @return {Boolean}
	 */
	getTouchEnabled: function () { return touchEnabled; },
	/**
	 * Set the a boolean indicating if the view should receive touch events (true, default) or forward them to peers (false)
	 * @param {Boolean} value New value to set.
	 * @alias Titanium.UI.ScrollView.setTouchEnabled
	 */
	setTouchEnabled: function () { },
	/**
	 * the transformation matrix to apply to the view
	 * @alias Titanium.UI.ScrollView.transform
	 * @property {Object}
	 */
	transform: {},
	/**
	 * Get the the transformation matrix to apply to the view
	 * @alias Titanium.UI.ScrollView.getTransform
	 * @return {Object}
	 */
	getTransform: function () { return transform; },
	/**
	 * Set the the transformation matrix to apply to the view
	 * @param {Object} value New value to set.
	 * @alias Titanium.UI.ScrollView.setTransform
	 */
	setTransform: function () { },
	/**
	 * boolean to control the vertical bounce during scrolling
	 * @alias Titanium.UI.ScrollView.verticalBounce
	 * @property {Boolean}
	 */
	verticalBounce: false,
	/**
	 * Get the boolean to control the vertical bounce during scrolling
	 * @alias Titanium.UI.ScrollView.getVerticalBounce
	 * @return {Boolean}
	 */
	getVerticalBounce: function () { return verticalBounce; },
	/**
	 * Set the boolean to control the vertical bounce during scrolling
	 * @param {Boolean} value New value to set.
	 * @alias Titanium.UI.ScrollView.setVerticalBounce
	 */
	setVerticalBounce: function () { },
	/**
	 * a boolean of the visibility of the view
	 * @alias Titanium.UI.ScrollView.visible
	 * @property {Boolean}
	 */
	visible: false,
	/**
	 * Get the a boolean of the visibility of the view
	 * @alias Titanium.UI.ScrollView.getVisible
	 * @return {Boolean}
	 */
	getVisible: function () { return visible; },
	/**
	 * Set the a boolean of the visibility of the view
	 * @param {Boolean} value New value to set.
	 * @alias Titanium.UI.ScrollView.setVisible
	 */
	setVisible: function () { },
	/**
	 * property for the view width. Can be either a float value or a dimension string ie 'auto' (default), '50%' (iPhone only).
	 * @alias Titanium.UI.ScrollView.width
	 * @property {Float,String}
	 */
	width: 0.0,
	/**
	 * Get the property for the view width. Can be either a float value or a dimension string ie 'auto' (default), '50%' (iPhone only).
	 * @alias Titanium.UI.ScrollView.getWidth
	 * @return {Float,String}
	 */
	getWidth: function () { return width; },
	/**
	 * Set the property for the view width. Can be either a float value or a dimension string ie 'auto' (default), '50%' (iPhone only).
	 * @param {Float,String} value New value to set.
	 * @alias Titanium.UI.ScrollView.setWidth
	 */
	setWidth: function () { },
	/**
	 * the z index position relative to other sibling views
	 * @alias Titanium.UI.ScrollView.zIndex
	 * @property {Integer}
	 */
	zIndex: 0,
	/**
	 * Get the the z index position relative to other sibling views
	 * @alias Titanium.UI.ScrollView.getZIndex
	 * @return {Integer}
	 */
	getZIndex: function () { return zIndex; },
	/**
	 * Set the the z index position relative to other sibling views
	 * @param {Integer} value New value to set.
	 * @alias Titanium.UI.ScrollView.setZIndex
	 */
	setZIndex: function () { },
	/**
	 * set the zoom scale for the current content area
	 * @alias Titanium.UI.ScrollView.zoomScale
	 * @property {Float}
	 */
	zoomScale: 0.0,
	/**
	 * Get the set the zoom scale for the current content area
	 * @alias Titanium.UI.ScrollView.getZoomScale
	 * @return {Float}
	 */
	getZoomScale: function () { return zoomScale; },
	/**
	 * Set the set the zoom scale for the current content area
	 * @param {Float} value New value to set.
	 * @alias Titanium.UI.ScrollView.setZoomScale
	 */
	setZoomScale: function () { },
	/**
	 * add a child to the view hierarchy
	 * @param {Object} view the view to add to this views hiearchy
	 * @alias Titanium.UI.ScrollView.add
	 */
	add: function (view) { },
	/**
	 * add an event listener for the instance to receive view triggered events
	 * @param {String} name name of the event
	 * @param {Function} callback callback function to invoke when the event is fired
	 * @alias Titanium.UI.ScrollView.addEventListener
	 */
	addEventListener: function (name,callback) { },
	/**
	 * animate the view
	 * @param {Object} obj either a dictionary of animation properties or an Animation object
	 * @param {Function} callback function to be invoked upon completion of the animation
	 * @alias Titanium.UI.ScrollView.animate
	 */
	animate: function (obj,callback) { },
	/**
	 * fire a synthesized event to the views listener
	 * @param {String} name name of the event
	 * @param {Object} event event object
	 * @alias Titanium.UI.ScrollView.fireEvent
	 */
	fireEvent: function (name,event) { },
	/**
	 * hide the view
	 * @alias Titanium.UI.ScrollView.hide
	 */
	hide: function () { },
	/**
	 * remove a previously add view from the view hiearchy
	 * @param {Object} view the view to remove from this views hiearchy
	 * @alias Titanium.UI.ScrollView.remove
	 */
	remove: function (view) { },
	/**
	 * remove a previously added event listener
	 * @param {String} name name of the event
	 * @param {Function} callback callback function passed in addEventListener
	 * @alias Titanium.UI.ScrollView.removeEventListener
	 */
	removeEventListener: function (name,callback) { },
	/**
	 * scrollTo a particular point
	 * @param {Float} x the x point within the view
	 * @param {Float} y the y point within the view
	 * @alias Titanium.UI.ScrollView.scrollTo
	 */
	scrollTo: function (x,y) { },
	/**
	 * make the view visible
	 * @alias Titanium.UI.ScrollView.show
	 */
	show: function () { },
	/**
	 * return a Blob image of the rendered view
	 * @param {Function} f function to be invoked upon completion. if non-null, this method will be performed asynchronously. if null, it will be performed immediately
	 * @alias Titanium.UI.ScrollView.toImage
	 * @return {Object}
	 */
	toImage: function (f) { return {}; },
};

/**
 * The Scrollable View provides a view that supports horizontal scrolling on one or more views in a gesture motion.  The Scrollable View also optionally supports a visual paging control to indicate the page that the view is visible. The Scrollable View is created by the method Titanium.UI.createScrollableView.
 * @since 0.8
 */
Titanium.UI.ScrollableView = {
	/**
	 * a dictionary with properties x and y to indicate the anchor point value. anchor specifies the position by which animation should occur. center is 0.5, 0.5
	 * @alias Titanium.UI.ScrollableView.anchorPoint
	 * @property {Object}
	 */
	anchorPoint: {},
	/**
	 * Get the a dictionary with properties x and y to indicate the anchor point value. anchor specifies the position by which animation should occur. center is 0.5, 0.5
	 * @alias Titanium.UI.ScrollableView.getAnchorPoint
	 * @return {Object}
	 */
	getAnchorPoint: function () { return anchorPoint; },
	/**
	 * Set the a dictionary with properties x and y to indicate the anchor point value. anchor specifies the position by which animation should occur. center is 0.5, 0.5
	 * @param {Object} value New value to set.
	 * @alias Titanium.UI.ScrollableView.setAnchorPoint
	 */
	setAnchorPoint: function () { },
	/**
	 * read-only object with x and y properties of where the view is during animation
	 * @alias Titanium.UI.ScrollableView.animatedCenterPoint
	 * @property {Object}
	 */
	animatedCenterPoint: {},
	/**
	 * Get the read-only object with x and y properties of where the view is during animation
	 * @alias Titanium.UI.ScrollableView.getAnimatedCenterPoint
	 * @return {Object}
	 */
	getAnimatedCenterPoint: function () { return animatedCenterPoint; },
	/**
	 * Set the read-only object with x and y properties of where the view is during animation
	 * @param {Object} value New value to set.
	 * @alias Titanium.UI.ScrollableView.setAnimatedCenterPoint
	 */
	setAnimatedCenterPoint: function () { },
	/**
	 * the background color of the view
	 * @alias Titanium.UI.ScrollableView.backgroundColor
	 * @property {String}
	 */
	backgroundColor: '',
	/**
	 * Get the the background color of the view
	 * @alias Titanium.UI.ScrollableView.getBackgroundColor
	 * @return {String}
	 */
	getBackgroundColor: function () { return backgroundColor; },
	/**
	 * Set the the background color of the view
	 * @param {String} value New value to set.
	 * @alias Titanium.UI.ScrollableView.setBackgroundColor
	 */
	setBackgroundColor: function () { },
	/**
	 * the disabled background color of the view. (Android)
	 * @alias Titanium.UI.ScrollableView.backgroundDisabledColor
	 * @property {String}
	 */
	backgroundDisabledColor: '',
	/**
	 * Get the the disabled background color of the view. (Android)
	 * @alias Titanium.UI.ScrollableView.getBackgroundDisabledColor
	 * @return {String}
	 */
	getBackgroundDisabledColor: function () { return backgroundDisabledColor; },
	/**
	 * Set the the disabled background color of the view. (Android)
	 * @param {String} value New value to set.
	 * @alias Titanium.UI.ScrollableView.setBackgroundDisabledColor
	 */
	setBackgroundDisabledColor: function () { },
	/**
	 * the disabled background image url of the view. (Android)
	 * @alias Titanium.UI.ScrollableView.backgroundDisabledImage
	 * @property {String}
	 */
	backgroundDisabledImage: '',
	/**
	 * Get the the disabled background image url of the view. (Android)
	 * @alias Titanium.UI.ScrollableView.getBackgroundDisabledImage
	 * @return {String}
	 */
	getBackgroundDisabledImage: function () { return backgroundDisabledImage; },
	/**
	 * Set the the disabled background image url of the view. (Android)
	 * @param {String} value New value to set.
	 * @alias Titanium.UI.ScrollableView.setBackgroundDisabledImage
	 */
	setBackgroundDisabledImage: function () { },
	/**
	 * the focused background color of the view. focusable must be true for normal views. (Android)
	 * @alias Titanium.UI.ScrollableView.backgroundFocusedColor
	 * @property {String}
	 */
	backgroundFocusedColor: '',
	/**
	 * Get the the focused background color of the view. focusable must be true for normal views. (Android)
	 * @alias Titanium.UI.ScrollableView.getBackgroundFocusedColor
	 * @return {String}
	 */
	getBackgroundFocusedColor: function () { return backgroundFocusedColor; },
	/**
	 * Set the the focused background color of the view. focusable must be true for normal views. (Android)
	 * @param {String} value New value to set.
	 * @alias Titanium.UI.ScrollableView.setBackgroundFocusedColor
	 */
	setBackgroundFocusedColor: function () { },
	/**
	 * the focused background image url of the view. focusable must be true for normal views. (Android)
	 * @alias Titanium.UI.ScrollableView.backgroundFocusedImage
	 * @property {String}
	 */
	backgroundFocusedImage: '',
	/**
	 * Get the the focused background image url of the view. focusable must be true for normal views. (Android)
	 * @alias Titanium.UI.ScrollableView.getBackgroundFocusedImage
	 * @return {String}
	 */
	getBackgroundFocusedImage: function () { return backgroundFocusedImage; },
	/**
	 * Set the the focused background image url of the view. focusable must be true for normal views. (Android)
	 * @param {String} value New value to set.
	 * @alias Titanium.UI.ScrollableView.setBackgroundFocusedImage
	 */
	setBackgroundFocusedImage: function () { },
	/**
	 * a background gradient for the view with the properties: type,startPoint,endPoint,startRadius,endRadius,backfillStart,backfillEnd,colors.
	 * @alias Titanium.UI.ScrollableView.backgroundGradient
	 * @property {Object}
	 */
	backgroundGradient: {},
	/**
	 * Get the a background gradient for the view with the properties: type,startPoint,endPoint,startRadius,endRadius,backfillStart,backfillEnd,colors.
	 * @alias Titanium.UI.ScrollableView.getBackgroundGradient
	 * @return {Object}
	 */
	getBackgroundGradient: function () { return backgroundGradient; },
	/**
	 * Set the a background gradient for the view with the properties: type,startPoint,endPoint,startRadius,endRadius,backfillStart,backfillEnd,colors.
	 * @param {Object} value New value to set.
	 * @alias Titanium.UI.ScrollableView.setBackgroundGradient
	 */
	setBackgroundGradient: function () { },
	/**
	 * the background image url of the view
	 * @alias Titanium.UI.ScrollableView.backgroundImage
	 * @property {String}
	 */
	backgroundImage: '',
	/**
	 * Get the the background image url of the view
	 * @alias Titanium.UI.ScrollableView.getBackgroundImage
	 * @return {String}
	 */
	getBackgroundImage: function () { return backgroundImage; },
	/**
	 * Set the the background image url of the view
	 * @param {String} value New value to set.
	 * @alias Titanium.UI.ScrollableView.setBackgroundImage
	 */
	setBackgroundImage: function () { },
	/**
	 * End caps specify the portion of an image that should not be resized when an image is stretched. This technique is used to implement buttons and other resizable image-based interface elements. When a button with end caps is resized, the resizing occurs only in the middle of the button, in the region between the end caps. The end caps themselves keep their original size and appearance. This property specifies the size of the left end cap. The middle (stretchable) portion is assumed to be 1 pixel wide. The right end cap is therefore computed by adding the size of the left end cap and the middle portion together and then subtracting that value from the width of the image
	 * @alias Titanium.UI.ScrollableView.backgroundLeftCap
	 * @property {Float}
	 */
	backgroundLeftCap: 0.0,
	/**
	 * Get the End caps specify the portion of an image that should not be resized when an image is stretched. This technique is used to implement buttons and other resizable image-based interface elements. When a button with end caps is resized, the resizing occurs only in the middle of the button, in the region between the end caps. The end caps themselves keep their original size and appearance. This property specifies the size of the left end cap. The middle (stretchable) portion is assumed to be 1 pixel wide. The right end cap is therefore computed by adding the size of the left end cap and the middle portion together and then subtracting that value from the width of the image
	 * @alias Titanium.UI.ScrollableView.getBackgroundLeftCap
	 * @return {Float}
	 */
	getBackgroundLeftCap: function () { return backgroundLeftCap; },
	/**
	 * Set the End caps specify the portion of an image that should not be resized when an image is stretched. This technique is used to implement buttons and other resizable image-based interface elements. When a button with end caps is resized, the resizing occurs only in the middle of the button, in the region between the end caps. The end caps themselves keep their original size and appearance. This property specifies the size of the left end cap. The middle (stretchable) portion is assumed to be 1 pixel wide. The right end cap is therefore computed by adding the size of the left end cap and the middle portion together and then subtracting that value from the width of the image
	 * @param {Float} value New value to set.
	 * @alias Titanium.UI.ScrollableView.setBackgroundLeftCap
	 */
	setBackgroundLeftCap: function () { },
	/**
	 * the selected background color of the view. focusable must be true for normal views. (Android)
	 * @alias Titanium.UI.ScrollableView.backgroundSelectedColor
	 * @property {String}
	 */
	backgroundSelectedColor: '',
	/**
	 * Get the the selected background color of the view. focusable must be true for normal views. (Android)
	 * @alias Titanium.UI.ScrollableView.getBackgroundSelectedColor
	 * @return {String}
	 */
	getBackgroundSelectedColor: function () { return backgroundSelectedColor; },
	/**
	 * Set the the selected background color of the view. focusable must be true for normal views. (Android)
	 * @param {String} value New value to set.
	 * @alias Titanium.UI.ScrollableView.setBackgroundSelectedColor
	 */
	setBackgroundSelectedColor: function () { },
	/**
	 * the selected background image url of the view. focusable must be true for normal views. (Android)
	 * @alias Titanium.UI.ScrollableView.backgroundSelectedImage
	 * @property {String}
	 */
	backgroundSelectedImage: '',
	/**
	 * Get the the selected background image url of the view. focusable must be true for normal views. (Android)
	 * @alias Titanium.UI.ScrollableView.getBackgroundSelectedImage
	 * @return {String}
	 */
	getBackgroundSelectedImage: function () { return backgroundSelectedImage; },
	/**
	 * Set the the selected background image url of the view. focusable must be true for normal views. (Android)
	 * @param {String} value New value to set.
	 * @alias Titanium.UI.ScrollableView.setBackgroundSelectedImage
	 */
	setBackgroundSelectedImage: function () { },
	/**
	 * End caps specify the portion of an image that should not be resized when an image is stretched. This technique is used to implement buttons and other resizable image-based interface elements. When a button with end caps is resized, the resizing occurs only in the middle of the button, in the region between the end caps. The end caps themselves keep their original size and appearance. This property specifies the size of the top end cap. The middle (stretchable) portion is assumed to be 1 pixel wide. The bottom end cap is therefore computed by adding the size of the top end cap and the middle portion together and then subtracting that value from the height of the image
	 * @alias Titanium.UI.ScrollableView.backgroundTopCap
	 * @property {Float}
	 */
	backgroundTopCap: 0.0,
	/**
	 * Get the End caps specify the portion of an image that should not be resized when an image is stretched. This technique is used to implement buttons and other resizable image-based interface elements. When a button with end caps is resized, the resizing occurs only in the middle of the button, in the region between the end caps. The end caps themselves keep their original size and appearance. This property specifies the size of the top end cap. The middle (stretchable) portion is assumed to be 1 pixel wide. The bottom end cap is therefore computed by adding the size of the top end cap and the middle portion together and then subtracting that value from the height of the image
	 * @alias Titanium.UI.ScrollableView.getBackgroundTopCap
	 * @return {Float}
	 */
	getBackgroundTopCap: function () { return backgroundTopCap; },
	/**
	 * Set the End caps specify the portion of an image that should not be resized when an image is stretched. This technique is used to implement buttons and other resizable image-based interface elements. When a button with end caps is resized, the resizing occurs only in the middle of the button, in the region between the end caps. The end caps themselves keep their original size and appearance. This property specifies the size of the top end cap. The middle (stretchable) portion is assumed to be 1 pixel wide. The bottom end cap is therefore computed by adding the size of the top end cap and the middle portion together and then subtracting that value from the height of the image
	 * @param {Float} value New value to set.
	 * @alias Titanium.UI.ScrollableView.setBackgroundTopCap
	 */
	setBackgroundTopCap: function () { },
	/**
	 * the border color of the view
	 * @alias Titanium.UI.ScrollableView.borderColor
	 * @property {String}
	 */
	borderColor: '',
	/**
	 * Get the the border color of the view
	 * @alias Titanium.UI.ScrollableView.getBorderColor
	 * @return {String}
	 */
	getBorderColor: function () { return borderColor; },
	/**
	 * Set the the border color of the view
	 * @param {String} value New value to set.
	 * @alias Titanium.UI.ScrollableView.setBorderColor
	 */
	setBorderColor: function () { },
	/**
	 * the border radius of the view
	 * @alias Titanium.UI.ScrollableView.borderRadius
	 * @property {Float}
	 */
	borderRadius: 0.0,
	/**
	 * Get the the border radius of the view
	 * @alias Titanium.UI.ScrollableView.getBorderRadius
	 * @return {Float}
	 */
	getBorderRadius: function () { return borderRadius; },
	/**
	 * Set the the border radius of the view
	 * @param {Float} value New value to set.
	 * @alias Titanium.UI.ScrollableView.setBorderRadius
	 */
	setBorderRadius: function () { },
	/**
	 * the border width of the view
	 * @alias Titanium.UI.ScrollableView.borderWidth
	 * @property {Float}
	 */
	borderWidth: 0.0,
	/**
	 * Get the the border width of the view
	 * @alias Titanium.UI.ScrollableView.getBorderWidth
	 * @return {Float}
	 */
	getBorderWidth: function () { return borderWidth; },
	/**
	 * Set the the border width of the view
	 * @param {Float} value New value to set.
	 * @alias Titanium.UI.ScrollableView.setBorderWidth
	 */
	setBorderWidth: function () { },
	/**
	 * property for the view bottom position. This position is relative to the view's parent. Can be either a float value or a dimension string ie 'auto' (default), '50%' (iPhone only).
	 * @alias Titanium.UI.ScrollableView.bottom
	 * @property {Float,String}
	 */
	bottom: 0.0,
	/**
	 * Get the property for the view bottom position. This position is relative to the view's parent. Can be either a float value or a dimension string ie 'auto' (default), '50%' (iPhone only).
	 * @alias Titanium.UI.ScrollableView.getBottom
	 * @return {Float,String}
	 */
	getBottom: function () { return bottom; },
	/**
	 * Set the property for the view bottom position. This position is relative to the view's parent. Can be either a float value or a dimension string ie 'auto' (default), '50%' (iPhone only).
	 * @param {Float,String} value New value to set.
	 * @alias Titanium.UI.ScrollableView.setBottom
	 */
	setBottom: function () { },
	/**
	 * a dictionary with properties x and y to indicate the center of the views position relative to the parent view
	 * @alias Titanium.UI.ScrollableView.center
	 * @property {Object}
	 */
	center: {},
	/**
	 * Get the a dictionary with properties x and y to indicate the center of the views position relative to the parent view
	 * @alias Titanium.UI.ScrollableView.getCenter
	 * @return {Object}
	 */
	getCenter: function () { return center; },
	/**
	 * Set the a dictionary with properties x and y to indicate the center of the views position relative to the parent view
	 * @param {Object} value New value to set.
	 * @alias Titanium.UI.ScrollableView.setCenter
	 */
	setCenter: function () { },
	/**
	 * the current page visible in the view
	 * @alias Titanium.UI.ScrollableView.currentPage
	 * @property {Integer}
	 */
	currentPage: 0,
	/**
	 * Get the the current page visible in the view
	 * @alias Titanium.UI.ScrollableView.getCurrentPage
	 * @return {Integer}
	 */
	getCurrentPage: function () { return currentPage; },
	/**
	 * Set the the current page visible in the view
	 * @param {Integer} value New value to set.
	 * @alias Titanium.UI.ScrollableView.setCurrentPage
	 */
	setCurrentPage: function () { },
	/**
	 * Set true if you want a view to be focusable when navigating with the trackball or D-Pad. Default: false. (Android Only)
	 * @alias Titanium.UI.ScrollableView.focusable
	 * @property {Boolean}
	 */
	focusable: false,
	/**
	 * Get the Set true if you want a view to be focusable when navigating with the trackball or D-Pad. Default: false. (Android Only)
	 * @alias Titanium.UI.ScrollableView.getFocusable
	 * @return {Boolean}
	 */
	getFocusable: function () { return focusable; },
	/**
	 * Set the Set true if you want a view to be focusable when navigating with the trackball or D-Pad. Default: false. (Android Only)
	 * @param {Boolean} value New value to set.
	 * @alias Titanium.UI.ScrollableView.setFocusable
	 */
	setFocusable: function () { },
	/**
	 * the font family
	 * @alias Titanium.UI.ScrollableView.font-family
	 * @property {String}
	 */
	font-family: '',
	/**
	 * Get the the font family
	 * @alias Titanium.UI.ScrollableView.getFont-family
	 * @return {String}
	 */
	getFont-family: function () { return font-family; },
	/**
	 * Set the the font family
	 * @param {String} value New value to set.
	 * @alias Titanium.UI.ScrollableView.setFont-family
	 */
	setFont-family: function () { },
	/**
	 * the font size
	 * @alias Titanium.UI.ScrollableView.font-size
	 * @property {String}
	 */
	font-size: '',
	/**
	 * Get the the font size
	 * @alias Titanium.UI.ScrollableView.getFont-size
	 * @return {String}
	 */
	getFont-size: function () { return font-size; },
	/**
	 * Set the the font size
	 * @param {String} value New value to set.
	 * @alias Titanium.UI.ScrollableView.setFont-size
	 */
	setFont-size: function () { },
	/**
	 * the font style, either normal or italics
	 * @alias Titanium.UI.ScrollableView.font-style
	 * @property {String}
	 */
	font-style: '',
	/**
	 * Get the the font style, either normal or italics
	 * @alias Titanium.UI.ScrollableView.getFont-style
	 * @return {String}
	 */
	getFont-style: function () { return font-style; },
	/**
	 * Set the the font style, either normal or italics
	 * @param {String} value New value to set.
	 * @alias Titanium.UI.ScrollableView.setFont-style
	 */
	setFont-style: function () { },
	/**
	 * the font weight, either normal or bold
	 * @alias Titanium.UI.ScrollableView.font-weight
	 * @property {String}
	 */
	font-weight: '',
	/**
	 * Get the the font weight, either normal or bold
	 * @alias Titanium.UI.ScrollableView.getFont-weight
	 * @return {String}
	 */
	getFont-weight: function () { return font-weight; },
	/**
	 * Set the the font weight, either normal or bold
	 * @param {String} value New value to set.
	 * @alias Titanium.UI.ScrollableView.setFont-weight
	 */
	setFont-weight: function () { },
	/**
	 * property for the view height. Can be either a float value or a dimension string ie 'auto' (default), '50%' (iPhone only).
	 * @alias Titanium.UI.ScrollableView.height
	 * @property {Float,String}
	 */
	height: 0.0,
	/**
	 * Get the property for the view height. Can be either a float value or a dimension string ie 'auto' (default), '50%' (iPhone only).
	 * @alias Titanium.UI.ScrollableView.getHeight
	 * @return {Float,String}
	 */
	getHeight: function () { return height; },
	/**
	 * Set the property for the view height. Can be either a float value or a dimension string ie 'auto' (default), '50%' (iPhone only).
	 * @param {Float,String} value New value to set.
	 * @alias Titanium.UI.ScrollableView.setHeight
	 */
	setHeight: function () { },
	/**
	 * property for the view left position. This position is relative to the view's parent. Can be either a float value or a dimension string ie 'auto' (default), '50%' (iPhone only).
	 * @alias Titanium.UI.ScrollableView.left
	 * @property {Float,String}
	 */
	left: 0.0,
	/**
	 * Get the property for the view left position. This position is relative to the view's parent. Can be either a float value or a dimension string ie 'auto' (default), '50%' (iPhone only).
	 * @alias Titanium.UI.ScrollableView.getLeft
	 * @return {Float,String}
	 */
	getLeft: function () { return left; },
	/**
	 * Set the property for the view left position. This position is relative to the view's parent. Can be either a float value or a dimension string ie 'auto' (default), '50%' (iPhone only).
	 * @param {Float,String} value New value to set.
	 * @alias Titanium.UI.ScrollableView.setLeft
	 */
	setLeft: function () { },
	/**
	 * the maximum zoom scale for the view
	 * @alias Titanium.UI.ScrollableView.maxZoomScale
	 * @property {Float}
	 */
	maxZoomScale: 0.0,
	/**
	 * Get the the maximum zoom scale for the view
	 * @alias Titanium.UI.ScrollableView.getMaxZoomScale
	 * @return {Float}
	 */
	getMaxZoomScale: function () { return maxZoomScale; },
	/**
	 * Set the the maximum zoom scale for the view
	 * @param {Float} value New value to set.
	 * @alias Titanium.UI.ScrollableView.setMaxZoomScale
	 */
	setMaxZoomScale: function () { },
	/**
	 * the minimum zoom scale for the view
	 * @alias Titanium.UI.ScrollableView.minZoomScale
	 * @property {Float}
	 */
	minZoomScale: 0.0,
	/**
	 * Get the the minimum zoom scale for the view
	 * @alias Titanium.UI.ScrollableView.getMinZoomScale
	 * @return {Float}
	 */
	getMinZoomScale: function () { return minZoomScale; },
	/**
	 * Set the the minimum zoom scale for the view
	 * @param {Float} value New value to set.
	 * @alias Titanium.UI.ScrollableView.setMinZoomScale
	 */
	setMinZoomScale: function () { },
	/**
	 * the opacity from 0.0-1.0
	 * @alias Titanium.UI.ScrollableView.opacity
	 * @property {Float}
	 */
	opacity: 0.0,
	/**
	 * Get the the opacity from 0.0-1.0
	 * @alias Titanium.UI.ScrollableView.getOpacity
	 * @return {Float}
	 */
	getOpacity: function () { return opacity; },
	/**
	 * Set the the opacity from 0.0-1.0
	 * @param {Float} value New value to set.
	 * @alias Titanium.UI.ScrollableView.setOpacity
	 */
	setOpacity: function () { },
	/**
	 * the color of the paging control. defaults to black.
	 * @alias Titanium.UI.ScrollableView.pagingControlColor
	 * @property {String}
	 */
	pagingControlColor: '',
	/**
	 * Get the the color of the paging control. defaults to black.
	 * @alias Titanium.UI.ScrollableView.getPagingControlColor
	 * @return {String}
	 */
	getPagingControlColor: function () { return pagingControlColor; },
	/**
	 * Set the the color of the paging control. defaults to black.
	 * @param {String} value New value to set.
	 * @alias Titanium.UI.ScrollableView.setPagingControlColor
	 */
	setPagingControlColor: function () { },
	/**
	 * the height in pixels of the paging control, if visible. defaults to 20
	 * @alias Titanium.UI.ScrollableView.pagingControlHeight
	 * @property {Float}
	 */
	pagingControlHeight: 0.0,
	/**
	 * Get the the height in pixels of the paging control, if visible. defaults to 20
	 * @alias Titanium.UI.ScrollableView.getPagingControlHeight
	 * @return {Float}
	 */
	getPagingControlHeight: function () { return pagingControlHeight; },
	/**
	 * Set the the height in pixels of the paging control, if visible. defaults to 20
	 * @param {Float} value New value to set.
	 * @alias Titanium.UI.ScrollableView.setPagingControlHeight
	 */
	setPagingControlHeight: function () { },
	/**
	 * property for the view right position. This position is relative to the view's parent. Can be either a float value or a dimension string ie 'auto' (default), '50%' (iPhone only).
	 * @alias Titanium.UI.ScrollableView.right
	 * @property {Float,String}
	 */
	right: 0.0,
	/**
	 * Get the property for the view right position. This position is relative to the view's parent. Can be either a float value or a dimension string ie 'auto' (default), '50%' (iPhone only).
	 * @alias Titanium.UI.ScrollableView.getRight
	 * @return {Float,String}
	 */
	getRight: function () { return right; },
	/**
	 * Set the property for the view right position. This position is relative to the view's parent. Can be either a float value or a dimension string ie 'auto' (default), '50%' (iPhone only).
	 * @param {Float,String} value New value to set.
	 * @alias Titanium.UI.ScrollableView.setRight
	 */
	setRight: function () { },
	/**
	 * boolean to indicate whether the paging control UI is visible
	 * @alias Titanium.UI.ScrollableView.showPagingControl
	 * @property {Boolean}
	 */
	showPagingControl: false,
	/**
	 * Get the boolean to indicate whether the paging control UI is visible
	 * @alias Titanium.UI.ScrollableView.getShowPagingControl
	 * @return {Boolean}
	 */
	getShowPagingControl: function () { return showPagingControl; },
	/**
	 * Set the boolean to indicate whether the paging control UI is visible
	 * @param {Boolean} value New value to set.
	 * @alias Titanium.UI.ScrollableView.setShowPagingControl
	 */
	setShowPagingControl: function () { },
	/**
	 * the size of the view as a dictionary of width and height properties
	 * @alias Titanium.UI.ScrollableView.size
	 * @property {Object}
	 */
	size: {},
	/**
	 * Get the the size of the view as a dictionary of width and height properties
	 * @alias Titanium.UI.ScrollableView.getSize
	 * @return {Object}
	 */
	getSize: function () { return size; },
	/**
	 * Set the the size of the view as a dictionary of width and height properties
	 * @param {Object} value New value to set.
	 * @alias Titanium.UI.ScrollableView.setSize
	 */
	setSize: function () { },
	/**
	 * One of Titanium.UI.Android.SOFT_KEYBOARD_DEFAULT_ON_FOCUS, Titanium.UI.Android.SOFT_KEYBOARD_HIDE_ON_FOCUS, or Titanium.UI.Android.SOFT_KEYBOARD_SHOW_ON_FOCUS. (Android only)
	 * @alias Titanium.UI.ScrollableView.softKeyboardOnFocus
	 * @property {Integer}
	 */
	softKeyboardOnFocus: 0,
	/**
	 * Get the One of Titanium.UI.Android.SOFT_KEYBOARD_DEFAULT_ON_FOCUS, Titanium.UI.Android.SOFT_KEYBOARD_HIDE_ON_FOCUS, or Titanium.UI.Android.SOFT_KEYBOARD_SHOW_ON_FOCUS. (Android only)
	 * @alias Titanium.UI.ScrollableView.getSoftKeyboardOnFocus
	 * @return {Integer}
	 */
	getSoftKeyboardOnFocus: function () { return softKeyboardOnFocus; },
	/**
	 * Set the One of Titanium.UI.Android.SOFT_KEYBOARD_DEFAULT_ON_FOCUS, Titanium.UI.Android.SOFT_KEYBOARD_HIDE_ON_FOCUS, or Titanium.UI.Android.SOFT_KEYBOARD_SHOW_ON_FOCUS. (Android only)
	 * @param {Integer} value New value to set.
	 * @alias Titanium.UI.ScrollableView.setSoftKeyboardOnFocus
	 */
	setSoftKeyboardOnFocus: function () { },
	/**
	 * property for the view top position. This position is relative to the view's parent. Can be either a float value or a dimension string ie 'auto' (default), '50%' (iPhone only).
	 * @alias Titanium.UI.ScrollableView.top
	 * @property {Float,String}
	 */
	top: 0.0,
	/**
	 * Get the property for the view top position. This position is relative to the view's parent. Can be either a float value or a dimension string ie 'auto' (default), '50%' (iPhone only).
	 * @alias Titanium.UI.ScrollableView.getTop
	 * @return {Float,String}
	 */
	getTop: function () { return top; },
	/**
	 * Set the property for the view top position. This position is relative to the view's parent. Can be either a float value or a dimension string ie 'auto' (default), '50%' (iPhone only).
	 * @param {Float,String} value New value to set.
	 * @alias Titanium.UI.ScrollableView.setTop
	 */
	setTop: function () { },
	/**
	 * a boolean indicating if the view should receive touch events (true, default) or forward them to peers (false)
	 * @alias Titanium.UI.ScrollableView.touchEnabled
	 * @property {Boolean}
	 */
	touchEnabled: false,
	/**
	 * Get the a boolean indicating if the view should receive touch events (true, default) or forward them to peers (false)
	 * @alias Titanium.UI.ScrollableView.getTouchEnabled
	 * @return {Boolean}
	 */
	getTouchEnabled: function () { return touchEnabled; },
	/**
	 * Set the a boolean indicating if the view should receive touch events (true, default) or forward them to peers (false)
	 * @param {Boolean} value New value to set.
	 * @alias Titanium.UI.ScrollableView.setTouchEnabled
	 */
	setTouchEnabled: function () { },
	/**
	 * the transformation matrix to apply to the view
	 * @alias Titanium.UI.ScrollableView.transform
	 * @property {Object}
	 */
	transform: {},
	/**
	 * Get the the transformation matrix to apply to the view
	 * @alias Titanium.UI.ScrollableView.getTransform
	 * @return {Object}
	 */
	getTransform: function () { return transform; },
	/**
	 * Set the the transformation matrix to apply to the view
	 * @param {Object} value New value to set.
	 * @alias Titanium.UI.ScrollableView.setTransform
	 */
	setTransform: function () { },
	/**
	 * array of view objects to place in the view
	 * @alias Titanium.UI.ScrollableView.views
	 * @property {Array}
	 */
	views: [],
	/**
	 * Get the array of view objects to place in the view
	 * @alias Titanium.UI.ScrollableView.getViews
	 * @return {Array}
	 */
	getViews: function () { return views; },
	/**
	 * Set the array of view objects to place in the view
	 * @param {Array} value New value to set.
	 * @alias Titanium.UI.ScrollableView.setViews
	 */
	setViews: function () { },
	/**
	 * a boolean of the visibility of the view
	 * @alias Titanium.UI.ScrollableView.visible
	 * @property {Boolean}
	 */
	visible: false,
	/**
	 * Get the a boolean of the visibility of the view
	 * @alias Titanium.UI.ScrollableView.getVisible
	 * @return {Boolean}
	 */
	getVisible: function () { return visible; },
	/**
	 * Set the a boolean of the visibility of the view
	 * @param {Boolean} value New value to set.
	 * @alias Titanium.UI.ScrollableView.setVisible
	 */
	setVisible: function () { },
	/**
	 * property for the view width. Can be either a float value or a dimension string ie 'auto' (default), '50%' (iPhone only).
	 * @alias Titanium.UI.ScrollableView.width
	 * @property {Float,String}
	 */
	width: 0.0,
	/**
	 * Get the property for the view width. Can be either a float value or a dimension string ie 'auto' (default), '50%' (iPhone only).
	 * @alias Titanium.UI.ScrollableView.getWidth
	 * @return {Float,String}
	 */
	getWidth: function () { return width; },
	/**
	 * Set the property for the view width. Can be either a float value or a dimension string ie 'auto' (default), '50%' (iPhone only).
	 * @param {Float,String} value New value to set.
	 * @alias Titanium.UI.ScrollableView.setWidth
	 */
	setWidth: function () { },
	/**
	 * the z index position relative to other sibling views
	 * @alias Titanium.UI.ScrollableView.zIndex
	 * @property {Integer}
	 */
	zIndex: 0,
	/**
	 * Get the the z index position relative to other sibling views
	 * @alias Titanium.UI.ScrollableView.getZIndex
	 * @return {Integer}
	 */
	getZIndex: function () { return zIndex; },
	/**
	 * Set the the z index position relative to other sibling views
	 * @param {Integer} value New value to set.
	 * @alias Titanium.UI.ScrollableView.setZIndex
	 */
	setZIndex: function () { },
	/**
	 * add a child to the view hierarchy
	 * @param {Object} view the view to add to this views hiearchy
	 * @alias Titanium.UI.ScrollableView.add
	 */
	add: function (view) { },
	/**
	 * add an event listener for the instance to receive view triggered events
	 * @param {String} name name of the event
	 * @param {Function} callback callback function to invoke when the event is fired
	 * @alias Titanium.UI.ScrollableView.addEventListener
	 */
	addEventListener: function (name,callback) { },
	/**
	 * add a new view to the Scrollable View
	 * @param {Object} view the view to add
	 * @alias Titanium.UI.ScrollableView.addView
	 */
	addView: function (view) { },
	/**
	 * animate the view
	 * @param {Object} obj either a dictionary of animation properties or an Animation object
	 * @param {Function} callback function to be invoked upon completion of the animation
	 * @alias Titanium.UI.ScrollableView.animate
	 */
	animate: function (obj,callback) { },
	/**
	 * fire a synthesized event to the views listener
	 * @param {String} name name of the event
	 * @param {Object} event event object
	 * @alias Titanium.UI.ScrollableView.fireEvent
	 */
	fireEvent: function (name,event) { },
	/**
	 * hide the view
	 * @alias Titanium.UI.ScrollableView.hide
	 */
	hide: function () { },
	/**
	 * remove a previously add view from the view hiearchy
	 * @param {Object} view the view to remove from this views hiearchy
	 * @alias Titanium.UI.ScrollableView.remove
	 */
	remove: function (view) { },
	/**
	 * remove a previously added event listener
	 * @param {String} name name of the event
	 * @param {Function} callback callback function passed in addEventListener
	 * @alias Titanium.UI.ScrollableView.removeEventListener
	 */
	removeEventListener: function (name,callback) { },
	/**
	 * remove an existing view from the Scrollable View
	 * @param {Object} view the view to remove
	 * @alias Titanium.UI.ScrollableView.removeView
	 */
	removeView: function (view) { },
	/**
	 * scroll to a specific view
	 * @param {Integer,Object} view either an integer index or the view object to bring into view as the currentPage
	 * @alias Titanium.UI.ScrollableView.scrollToView
	 */
	scrollToView: function (view) { },
	/**
	 * make the view visible
	 * @alias Titanium.UI.ScrollableView.show
	 */
	show: function () { },
	/**
	 * return a Blob image of the rendered view
	 * @param {Function} f function to be invoked upon completion. if non-null, this method will be performed asynchronously. if null, it will be performed immediately
	 * @alias Titanium.UI.ScrollableView.toImage
	 * @return {Object}
	 */
	toImage: function (f) { return {}; },
};

/**
 * A Search Bar is created by the method Titanium.UI.createSearchBar.
 * @since 0.8
 */
Titanium.UI.SearchBar = {
	/**
	 * a dictionary with properties x and y to indicate the anchor point value. anchor specifies the position by which animation should occur. center is 0.5, 0.5
	 * @alias Titanium.UI.SearchBar.anchorPoint
	 * @property {Object}
	 */
	anchorPoint: {},
	/**
	 * Get the a dictionary with properties x and y to indicate the anchor point value. anchor specifies the position by which animation should occur. center is 0.5, 0.5
	 * @alias Titanium.UI.SearchBar.getAnchorPoint
	 * @return {Object}
	 */
	getAnchorPoint: function () { return anchorPoint; },
	/**
	 * Set the a dictionary with properties x and y to indicate the anchor point value. anchor specifies the position by which animation should occur. center is 0.5, 0.5
	 * @param {Object} value New value to set.
	 * @alias Titanium.UI.SearchBar.setAnchorPoint
	 */
	setAnchorPoint: function () { },
	/**
	 * read-only object with x and y properties of where the view is during animation
	 * @alias Titanium.UI.SearchBar.animatedCenterPoint
	 * @property {Object}
	 */
	animatedCenterPoint: {},
	/**
	 * Get the read-only object with x and y properties of where the view is during animation
	 * @alias Titanium.UI.SearchBar.getAnimatedCenterPoint
	 * @return {Object}
	 */
	getAnimatedCenterPoint: function () { return animatedCenterPoint; },
	/**
	 * Set the read-only object with x and y properties of where the view is during animation
	 * @param {Object} value New value to set.
	 * @alias Titanium.UI.SearchBar.setAnimatedCenterPoint
	 */
	setAnimatedCenterPoint: function () { },
	/**
	 * boolean to indicate if the text in the field should be autocapitalized as typed
	 * @alias Titanium.UI.SearchBar.autocapitalization
	 * @property {Boolean}
	 */
	autocapitalization: false,
	/**
	 * Get the boolean to indicate if the text in the field should be autocapitalized as typed
	 * @alias Titanium.UI.SearchBar.getAutocapitalization
	 * @return {Boolean}
	 */
	getAutocapitalization: function () { return autocapitalization; },
	/**
	 * Set the boolean to indicate if the text in the field should be autocapitalized as typed
	 * @param {Boolean} value New value to set.
	 * @alias Titanium.UI.SearchBar.setAutocapitalization
	 */
	setAutocapitalization: function () { },
	/**
	 * boolean to indicate if the text in the field should be autocorrected as typed
	 * @alias Titanium.UI.SearchBar.autocorrect
	 * @property {Boolean}
	 */
	autocorrect: false,
	/**
	 * Get the boolean to indicate if the text in the field should be autocorrected as typed
	 * @alias Titanium.UI.SearchBar.getAutocorrect
	 * @return {Boolean}
	 */
	getAutocorrect: function () { return autocorrect; },
	/**
	 * Set the boolean to indicate if the text in the field should be autocorrected as typed
	 * @param {Boolean} value New value to set.
	 * @alias Titanium.UI.SearchBar.setAutocorrect
	 */
	setAutocorrect: function () { },
	/**
	 * the background color of the view
	 * @alias Titanium.UI.SearchBar.backgroundColor
	 * @property {String}
	 */
	backgroundColor: '',
	/**
	 * Get the the background color of the view
	 * @alias Titanium.UI.SearchBar.getBackgroundColor
	 * @return {String}
	 */
	getBackgroundColor: function () { return backgroundColor; },
	/**
	 * Set the the background color of the view
	 * @param {String} value New value to set.
	 * @alias Titanium.UI.SearchBar.setBackgroundColor
	 */
	setBackgroundColor: function () { },
	/**
	 * the disabled background color of the view. (Android)
	 * @alias Titanium.UI.SearchBar.backgroundDisabledColor
	 * @property {String}
	 */
	backgroundDisabledColor: '',
	/**
	 * Get the the disabled background color of the view. (Android)
	 * @alias Titanium.UI.SearchBar.getBackgroundDisabledColor
	 * @return {String}
	 */
	getBackgroundDisabledColor: function () { return backgroundDisabledColor; },
	/**
	 * Set the the disabled background color of the view. (Android)
	 * @param {String} value New value to set.
	 * @alias Titanium.UI.SearchBar.setBackgroundDisabledColor
	 */
	setBackgroundDisabledColor: function () { },
	/**
	 * the disabled background image url of the view. (Android)
	 * @alias Titanium.UI.SearchBar.backgroundDisabledImage
	 * @property {String}
	 */
	backgroundDisabledImage: '',
	/**
	 * Get the the disabled background image url of the view. (Android)
	 * @alias Titanium.UI.SearchBar.getBackgroundDisabledImage
	 * @return {String}
	 */
	getBackgroundDisabledImage: function () { return backgroundDisabledImage; },
	/**
	 * Set the the disabled background image url of the view. (Android)
	 * @param {String} value New value to set.
	 * @alias Titanium.UI.SearchBar.setBackgroundDisabledImage
	 */
	setBackgroundDisabledImage: function () { },
	/**
	 * the focused background color of the view. focusable must be true for normal views. (Android)
	 * @alias Titanium.UI.SearchBar.backgroundFocusedColor
	 * @property {String}
	 */
	backgroundFocusedColor: '',
	/**
	 * Get the the focused background color of the view. focusable must be true for normal views. (Android)
	 * @alias Titanium.UI.SearchBar.getBackgroundFocusedColor
	 * @return {String}
	 */
	getBackgroundFocusedColor: function () { return backgroundFocusedColor; },
	/**
	 * Set the the focused background color of the view. focusable must be true for normal views. (Android)
	 * @param {String} value New value to set.
	 * @alias Titanium.UI.SearchBar.setBackgroundFocusedColor
	 */
	setBackgroundFocusedColor: function () { },
	/**
	 * the focused background image url of the view. focusable must be true for normal views. (Android)
	 * @alias Titanium.UI.SearchBar.backgroundFocusedImage
	 * @property {String}
	 */
	backgroundFocusedImage: '',
	/**
	 * Get the the focused background image url of the view. focusable must be true for normal views. (Android)
	 * @alias Titanium.UI.SearchBar.getBackgroundFocusedImage
	 * @return {String}
	 */
	getBackgroundFocusedImage: function () { return backgroundFocusedImage; },
	/**
	 * Set the the focused background image url of the view. focusable must be true for normal views. (Android)
	 * @param {String} value New value to set.
	 * @alias Titanium.UI.SearchBar.setBackgroundFocusedImage
	 */
	setBackgroundFocusedImage: function () { },
	/**
	 * a background gradient for the view with the properties: type,startPoint,endPoint,startRadius,endRadius,backfillStart,backfillEnd,colors.
	 * @alias Titanium.UI.SearchBar.backgroundGradient
	 * @property {Object}
	 */
	backgroundGradient: {},
	/**
	 * Get the a background gradient for the view with the properties: type,startPoint,endPoint,startRadius,endRadius,backfillStart,backfillEnd,colors.
	 * @alias Titanium.UI.SearchBar.getBackgroundGradient
	 * @return {Object}
	 */
	getBackgroundGradient: function () { return backgroundGradient; },
	/**
	 * Set the a background gradient for the view with the properties: type,startPoint,endPoint,startRadius,endRadius,backfillStart,backfillEnd,colors.
	 * @param {Object} value New value to set.
	 * @alias Titanium.UI.SearchBar.setBackgroundGradient
	 */
	setBackgroundGradient: function () { },
	/**
	 * the background image url of the view
	 * @alias Titanium.UI.SearchBar.backgroundImage
	 * @property {String}
	 */
	backgroundImage: '',
	/**
	 * Get the the background image url of the view
	 * @alias Titanium.UI.SearchBar.getBackgroundImage
	 * @return {String}
	 */
	getBackgroundImage: function () { return backgroundImage; },
	/**
	 * Set the the background image url of the view
	 * @param {String} value New value to set.
	 * @alias Titanium.UI.SearchBar.setBackgroundImage
	 */
	setBackgroundImage: function () { },
	/**
	 * End caps specify the portion of an image that should not be resized when an image is stretched. This technique is used to implement buttons and other resizable image-based interface elements. When a button with end caps is resized, the resizing occurs only in the middle of the button, in the region between the end caps. The end caps themselves keep their original size and appearance. This property specifies the size of the left end cap. The middle (stretchable) portion is assumed to be 1 pixel wide. The right end cap is therefore computed by adding the size of the left end cap and the middle portion together and then subtracting that value from the width of the image
	 * @alias Titanium.UI.SearchBar.backgroundLeftCap
	 * @property {Float}
	 */
	backgroundLeftCap: 0.0,
	/**
	 * Get the End caps specify the portion of an image that should not be resized when an image is stretched. This technique is used to implement buttons and other resizable image-based interface elements. When a button with end caps is resized, the resizing occurs only in the middle of the button, in the region between the end caps. The end caps themselves keep their original size and appearance. This property specifies the size of the left end cap. The middle (stretchable) portion is assumed to be 1 pixel wide. The right end cap is therefore computed by adding the size of the left end cap and the middle portion together and then subtracting that value from the width of the image
	 * @alias Titanium.UI.SearchBar.getBackgroundLeftCap
	 * @return {Float}
	 */
	getBackgroundLeftCap: function () { return backgroundLeftCap; },
	/**
	 * Set the End caps specify the portion of an image that should not be resized when an image is stretched. This technique is used to implement buttons and other resizable image-based interface elements. When a button with end caps is resized, the resizing occurs only in the middle of the button, in the region between the end caps. The end caps themselves keep their original size and appearance. This property specifies the size of the left end cap. The middle (stretchable) portion is assumed to be 1 pixel wide. The right end cap is therefore computed by adding the size of the left end cap and the middle portion together and then subtracting that value from the width of the image
	 * @param {Float} value New value to set.
	 * @alias Titanium.UI.SearchBar.setBackgroundLeftCap
	 */
	setBackgroundLeftCap: function () { },
	/**
	 * the selected background color of the view. focusable must be true for normal views. (Android)
	 * @alias Titanium.UI.SearchBar.backgroundSelectedColor
	 * @property {String}
	 */
	backgroundSelectedColor: '',
	/**
	 * Get the the selected background color of the view. focusable must be true for normal views. (Android)
	 * @alias Titanium.UI.SearchBar.getBackgroundSelectedColor
	 * @return {String}
	 */
	getBackgroundSelectedColor: function () { return backgroundSelectedColor; },
	/**
	 * Set the the selected background color of the view. focusable must be true for normal views. (Android)
	 * @param {String} value New value to set.
	 * @alias Titanium.UI.SearchBar.setBackgroundSelectedColor
	 */
	setBackgroundSelectedColor: function () { },
	/**
	 * the selected background image url of the view. focusable must be true for normal views. (Android)
	 * @alias Titanium.UI.SearchBar.backgroundSelectedImage
	 * @property {String}
	 */
	backgroundSelectedImage: '',
	/**
	 * Get the the selected background image url of the view. focusable must be true for normal views. (Android)
	 * @alias Titanium.UI.SearchBar.getBackgroundSelectedImage
	 * @return {String}
	 */
	getBackgroundSelectedImage: function () { return backgroundSelectedImage; },
	/**
	 * Set the the selected background image url of the view. focusable must be true for normal views. (Android)
	 * @param {String} value New value to set.
	 * @alias Titanium.UI.SearchBar.setBackgroundSelectedImage
	 */
	setBackgroundSelectedImage: function () { },
	/**
	 * End caps specify the portion of an image that should not be resized when an image is stretched. This technique is used to implement buttons and other resizable image-based interface elements. When a button with end caps is resized, the resizing occurs only in the middle of the button, in the region between the end caps. The end caps themselves keep their original size and appearance. This property specifies the size of the top end cap. The middle (stretchable) portion is assumed to be 1 pixel wide. The bottom end cap is therefore computed by adding the size of the top end cap and the middle portion together and then subtracting that value from the height of the image
	 * @alias Titanium.UI.SearchBar.backgroundTopCap
	 * @property {Float}
	 */
	backgroundTopCap: 0.0,
	/**
	 * Get the End caps specify the portion of an image that should not be resized when an image is stretched. This technique is used to implement buttons and other resizable image-based interface elements. When a button with end caps is resized, the resizing occurs only in the middle of the button, in the region between the end caps. The end caps themselves keep their original size and appearance. This property specifies the size of the top end cap. The middle (stretchable) portion is assumed to be 1 pixel wide. The bottom end cap is therefore computed by adding the size of the top end cap and the middle portion together and then subtracting that value from the height of the image
	 * @alias Titanium.UI.SearchBar.getBackgroundTopCap
	 * @return {Float}
	 */
	getBackgroundTopCap: function () { return backgroundTopCap; },
	/**
	 * Set the End caps specify the portion of an image that should not be resized when an image is stretched. This technique is used to implement buttons and other resizable image-based interface elements. When a button with end caps is resized, the resizing occurs only in the middle of the button, in the region between the end caps. The end caps themselves keep their original size and appearance. This property specifies the size of the top end cap. The middle (stretchable) portion is assumed to be 1 pixel wide. The bottom end cap is therefore computed by adding the size of the top end cap and the middle portion together and then subtracting that value from the height of the image
	 * @param {Float} value New value to set.
	 * @alias Titanium.UI.SearchBar.setBackgroundTopCap
	 */
	setBackgroundTopCap: function () { },
	/**
	 * the bar color of the search bar view
	 * @alias Titanium.UI.SearchBar.barColor
	 * @property {String}
	 */
	barColor: '',
	/**
	 * Get the the bar color of the search bar view
	 * @alias Titanium.UI.SearchBar.getBarColor
	 * @return {String}
	 */
	getBarColor: function () { return barColor; },
	/**
	 * Set the the bar color of the search bar view
	 * @param {String} value New value to set.
	 * @alias Titanium.UI.SearchBar.setBarColor
	 */
	setBarColor: function () { },
	/**
	 * the border color of the view
	 * @alias Titanium.UI.SearchBar.borderColor
	 * @property {String}
	 */
	borderColor: '',
	/**
	 * Get the the border color of the view
	 * @alias Titanium.UI.SearchBar.getBorderColor
	 * @return {String}
	 */
	getBorderColor: function () { return borderColor; },
	/**
	 * Set the the border color of the view
	 * @param {String} value New value to set.
	 * @alias Titanium.UI.SearchBar.setBorderColor
	 */
	setBorderColor: function () { },
	/**
	 * the border radius of the view
	 * @alias Titanium.UI.SearchBar.borderRadius
	 * @property {Float}
	 */
	borderRadius: 0.0,
	/**
	 * Get the the border radius of the view
	 * @alias Titanium.UI.SearchBar.getBorderRadius
	 * @return {Float}
	 */
	getBorderRadius: function () { return borderRadius; },
	/**
	 * Set the the border radius of the view
	 * @param {Float} value New value to set.
	 * @alias Titanium.UI.SearchBar.setBorderRadius
	 */
	setBorderRadius: function () { },
	/**
	 * the border width of the view
	 * @alias Titanium.UI.SearchBar.borderWidth
	 * @property {Float}
	 */
	borderWidth: 0.0,
	/**
	 * Get the the border width of the view
	 * @alias Titanium.UI.SearchBar.getBorderWidth
	 * @return {Float}
	 */
	getBorderWidth: function () { return borderWidth; },
	/**
	 * Set the the border width of the view
	 * @param {Float} value New value to set.
	 * @alias Titanium.UI.SearchBar.setBorderWidth
	 */
	setBorderWidth: function () { },
	/**
	 * property for the view bottom position. This position is relative to the view's parent. Can be either a float value or a dimension string ie 'auto' (default), '50%' (iPhone only).
	 * @alias Titanium.UI.SearchBar.bottom
	 * @property {Float,String}
	 */
	bottom: 0.0,
	/**
	 * Get the property for the view bottom position. This position is relative to the view's parent. Can be either a float value or a dimension string ie 'auto' (default), '50%' (iPhone only).
	 * @alias Titanium.UI.SearchBar.getBottom
	 * @return {Float,String}
	 */
	getBottom: function () { return bottom; },
	/**
	 * Set the property for the view bottom position. This position is relative to the view's parent. Can be either a float value or a dimension string ie 'auto' (default), '50%' (iPhone only).
	 * @param {Float,String} value New value to set.
	 * @alias Titanium.UI.SearchBar.setBottom
	 */
	setBottom: function () { },
	/**
	 * a dictionary with properties x and y to indicate the center of the views position relative to the parent view
	 * @alias Titanium.UI.SearchBar.center
	 * @property {Object}
	 */
	center: {},
	/**
	 * Get the a dictionary with properties x and y to indicate the center of the views position relative to the parent view
	 * @alias Titanium.UI.SearchBar.getCenter
	 * @return {Object}
	 */
	getCenter: function () { return center; },
	/**
	 * Set the a dictionary with properties x and y to indicate the center of the views position relative to the parent view
	 * @param {Object} value New value to set.
	 * @alias Titanium.UI.SearchBar.setCenter
	 */
	setCenter: function () { },
	/**
	 * Set true if you want a view to be focusable when navigating with the trackball or D-Pad. Default: false. (Android Only)
	 * @alias Titanium.UI.SearchBar.focusable
	 * @property {Boolean}
	 */
	focusable: false,
	/**
	 * Get the Set true if you want a view to be focusable when navigating with the trackball or D-Pad. Default: false. (Android Only)
	 * @alias Titanium.UI.SearchBar.getFocusable
	 * @return {Boolean}
	 */
	getFocusable: function () { return focusable; },
	/**
	 * Set the Set true if you want a view to be focusable when navigating with the trackball or D-Pad. Default: false. (Android Only)
	 * @param {Boolean} value New value to set.
	 * @alias Titanium.UI.SearchBar.setFocusable
	 */
	setFocusable: function () { },
	/**
	 * the font family
	 * @alias Titanium.UI.SearchBar.font-family
	 * @property {String}
	 */
	font-family: '',
	/**
	 * Get the the font family
	 * @alias Titanium.UI.SearchBar.getFont-family
	 * @return {String}
	 */
	getFont-family: function () { return font-family; },
	/**
	 * Set the the font family
	 * @param {String} value New value to set.
	 * @alias Titanium.UI.SearchBar.setFont-family
	 */
	setFont-family: function () { },
	/**
	 * the font size
	 * @alias Titanium.UI.SearchBar.font-size
	 * @property {String}
	 */
	font-size: '',
	/**
	 * Get the the font size
	 * @alias Titanium.UI.SearchBar.getFont-size
	 * @return {String}
	 */
	getFont-size: function () { return font-size; },
	/**
	 * Set the the font size
	 * @param {String} value New value to set.
	 * @alias Titanium.UI.SearchBar.setFont-size
	 */
	setFont-size: function () { },
	/**
	 * the font style, either normal or italics
	 * @alias Titanium.UI.SearchBar.font-style
	 * @property {String}
	 */
	font-style: '',
	/**
	 * Get the the font style, either normal or italics
	 * @alias Titanium.UI.SearchBar.getFont-style
	 * @return {String}
	 */
	getFont-style: function () { return font-style; },
	/**
	 * Set the the font style, either normal or italics
	 * @param {String} value New value to set.
	 * @alias Titanium.UI.SearchBar.setFont-style
	 */
	setFont-style: function () { },
	/**
	 * the font weight, either normal or bold
	 * @alias Titanium.UI.SearchBar.font-weight
	 * @property {String}
	 */
	font-weight: '',
	/**
	 * Get the the font weight, either normal or bold
	 * @alias Titanium.UI.SearchBar.getFont-weight
	 * @return {String}
	 */
	getFont-weight: function () { return font-weight; },
	/**
	 * Set the the font weight, either normal or bold
	 * @param {String} value New value to set.
	 * @alias Titanium.UI.SearchBar.setFont-weight
	 */
	setFont-weight: function () { },
	/**
	 * property for the view height. Can be either a float value or a dimension string ie 'auto' (default), '50%' (iPhone only).
	 * @alias Titanium.UI.SearchBar.height
	 * @property {Float,String}
	 */
	height: 0.0,
	/**
	 * Get the property for the view height. Can be either a float value or a dimension string ie 'auto' (default), '50%' (iPhone only).
	 * @alias Titanium.UI.SearchBar.getHeight
	 * @return {Float,String}
	 */
	getHeight: function () { return height; },
	/**
	 * Set the property for the view height. Can be either a float value or a dimension string ie 'auto' (default), '50%' (iPhone only).
	 * @param {Float,String} value New value to set.
	 * @alias Titanium.UI.SearchBar.setHeight
	 */
	setHeight: function () { },
	/**
	 * the text to show when the search bar field is not focused
	 * @alias Titanium.UI.SearchBar.hintText
	 * @property {String}
	 */
	hintText: '',
	/**
	 * Get the the text to show when the search bar field is not focused
	 * @alias Titanium.UI.SearchBar.getHintText
	 * @return {String}
	 */
	getHintText: function () { return hintText; },
	/**
	 * Set the the text to show when the search bar field is not focused
	 * @param {String} value New value to set.
	 * @alias Titanium.UI.SearchBar.setHintText
	 */
	setHintText: function () { },
	/**
	 * the key in the locale file to use for the hintText property
	 * @alias Titanium.UI.SearchBar.hinttextid
	 * @property {String}
	 */
	hinttextid: '',
	/**
	 * Get the the key in the locale file to use for the hintText property
	 * @alias Titanium.UI.SearchBar.getHinttextid
	 * @return {String}
	 */
	getHinttextid: function () { return hinttextid; },
	/**
	 * Set the the key in the locale file to use for the hintText property
	 * @param {String} value New value to set.
	 * @alias Titanium.UI.SearchBar.setHinttextid
	 */
	setHinttextid: function () { },
	/**
	 * the keyboard type constant to use when the field is focused
	 * @alias Titanium.UI.SearchBar.keyboardType
	 * @property {Integer}
	 */
	keyboardType: 0,
	/**
	 * Get the the keyboard type constant to use when the field is focused
	 * @alias Titanium.UI.SearchBar.getKeyboardType
	 * @return {Integer}
	 */
	getKeyboardType: function () { return keyboardType; },
	/**
	 * Set the the keyboard type constant to use when the field is focused
	 * @param {Integer} value New value to set.
	 * @alias Titanium.UI.SearchBar.setKeyboardType
	 */
	setKeyboardType: function () { },
	/**
	 * property for the view left position. This position is relative to the view's parent. Can be either a float value or a dimension string ie 'auto' (default), '50%' (iPhone only).
	 * @alias Titanium.UI.SearchBar.left
	 * @property {Float,String}
	 */
	left: 0.0,
	/**
	 * Get the property for the view left position. This position is relative to the view's parent. Can be either a float value or a dimension string ie 'auto' (default), '50%' (iPhone only).
	 * @alias Titanium.UI.SearchBar.getLeft
	 * @return {Float,String}
	 */
	getLeft: function () { return left; },
	/**
	 * Set the property for the view left position. This position is relative to the view's parent. Can be either a float value or a dimension string ie 'auto' (default), '50%' (iPhone only).
	 * @param {Float,String} value New value to set.
	 * @alias Titanium.UI.SearchBar.setLeft
	 */
	setLeft: function () { },
	/**
	 * the opacity from 0.0-1.0
	 * @alias Titanium.UI.SearchBar.opacity
	 * @property {Float}
	 */
	opacity: 0.0,
	/**
	 * Get the the opacity from 0.0-1.0
	 * @alias Titanium.UI.SearchBar.getOpacity
	 * @return {Float}
	 */
	getOpacity: function () { return opacity; },
	/**
	 * Set the the opacity from 0.0-1.0
	 * @param {Float} value New value to set.
	 * @alias Titanium.UI.SearchBar.setOpacity
	 */
	setOpacity: function () { },
	/**
	 * a single line of text displayed at the top of the search bar
	 * @alias Titanium.UI.SearchBar.prompt
	 * @property {String}
	 */
	prompt: '',
	/**
	 * Get the a single line of text displayed at the top of the search bar
	 * @alias Titanium.UI.SearchBar.getPrompt
	 * @return {String}
	 */
	getPrompt: function () { return prompt; },
	/**
	 * Set the a single line of text displayed at the top of the search bar
	 * @param {String} value New value to set.
	 * @alias Titanium.UI.SearchBar.setPrompt
	 */
	setPrompt: function () { },
	/**
	 * the key in the locale file to use for the prompt property
	 * @alias Titanium.UI.SearchBar.promptid
	 * @property {String}
	 */
	promptid: '',
	/**
	 * Get the the key in the locale file to use for the prompt property
	 * @alias Titanium.UI.SearchBar.getPromptid
	 * @return {String}
	 */
	getPromptid: function () { return promptid; },
	/**
	 * Set the the key in the locale file to use for the prompt property
	 * @param {String} value New value to set.
	 * @alias Titanium.UI.SearchBar.setPromptid
	 */
	setPromptid: function () { },
	/**
	 * property for the view right position. This position is relative to the view's parent. Can be either a float value or a dimension string ie 'auto' (default), '50%' (iPhone only).
	 * @alias Titanium.UI.SearchBar.right
	 * @property {Float,String}
	 */
	right: 0.0,
	/**
	 * Get the property for the view right position. This position is relative to the view's parent. Can be either a float value or a dimension string ie 'auto' (default), '50%' (iPhone only).
	 * @alias Titanium.UI.SearchBar.getRight
	 * @return {Float,String}
	 */
	getRight: function () { return right; },
	/**
	 * Set the property for the view right position. This position is relative to the view's parent. Can be either a float value or a dimension string ie 'auto' (default), '50%' (iPhone only).
	 * @param {Float,String} value New value to set.
	 * @alias Titanium.UI.SearchBar.setRight
	 */
	setRight: function () { },
	/**
	 * boolean indicates whether the cancel button is displayed
	 * @alias Titanium.UI.SearchBar.showCancel
	 * @property {Boolean}
	 */
	showCancel: false,
	/**
	 * Get the boolean indicates whether the cancel button is displayed
	 * @alias Titanium.UI.SearchBar.getShowCancel
	 * @return {Boolean}
	 */
	getShowCancel: function () { return showCancel; },
	/**
	 * Set the boolean indicates whether the cancel button is displayed
	 * @param {Boolean} value New value to set.
	 * @alias Titanium.UI.SearchBar.setShowCancel
	 */
	setShowCancel: function () { },
	/**
	 * the size of the view as a dictionary of width and height properties
	 * @alias Titanium.UI.SearchBar.size
	 * @property {Object}
	 */
	size: {},
	/**
	 * Get the the size of the view as a dictionary of width and height properties
	 * @alias Titanium.UI.SearchBar.getSize
	 * @return {Object}
	 */
	getSize: function () { return size; },
	/**
	 * Set the the size of the view as a dictionary of width and height properties
	 * @param {Object} value New value to set.
	 * @alias Titanium.UI.SearchBar.setSize
	 */
	setSize: function () { },
	/**
	 * One of Titanium.UI.Android.SOFT_KEYBOARD_DEFAULT_ON_FOCUS, Titanium.UI.Android.SOFT_KEYBOARD_HIDE_ON_FOCUS, or Titanium.UI.Android.SOFT_KEYBOARD_SHOW_ON_FOCUS. (Android only)
	 * @alias Titanium.UI.SearchBar.softKeyboardOnFocus
	 * @property {Integer}
	 */
	softKeyboardOnFocus: 0,
	/**
	 * Get the One of Titanium.UI.Android.SOFT_KEYBOARD_DEFAULT_ON_FOCUS, Titanium.UI.Android.SOFT_KEYBOARD_HIDE_ON_FOCUS, or Titanium.UI.Android.SOFT_KEYBOARD_SHOW_ON_FOCUS. (Android only)
	 * @alias Titanium.UI.SearchBar.getSoftKeyboardOnFocus
	 * @return {Integer}
	 */
	getSoftKeyboardOnFocus: function () { return softKeyboardOnFocus; },
	/**
	 * Set the One of Titanium.UI.Android.SOFT_KEYBOARD_DEFAULT_ON_FOCUS, Titanium.UI.Android.SOFT_KEYBOARD_HIDE_ON_FOCUS, or Titanium.UI.Android.SOFT_KEYBOARD_SHOW_ON_FOCUS. (Android only)
	 * @param {Integer} value New value to set.
	 * @alias Titanium.UI.SearchBar.setSoftKeyboardOnFocus
	 */
	setSoftKeyboardOnFocus: function () { },
	/**
	 * property for the view top position. This position is relative to the view's parent. Can be either a float value or a dimension string ie 'auto' (default), '50%' (iPhone only).
	 * @alias Titanium.UI.SearchBar.top
	 * @property {Float,String}
	 */
	top: 0.0,
	/**
	 * Get the property for the view top position. This position is relative to the view's parent. Can be either a float value or a dimension string ie 'auto' (default), '50%' (iPhone only).
	 * @alias Titanium.UI.SearchBar.getTop
	 * @return {Float,String}
	 */
	getTop: function () { return top; },
	/**
	 * Set the property for the view top position. This position is relative to the view's parent. Can be either a float value or a dimension string ie 'auto' (default), '50%' (iPhone only).
	 * @param {Float,String} value New value to set.
	 * @alias Titanium.UI.SearchBar.setTop
	 */
	setTop: function () { },
	/**
	 * a boolean indicating if the view should receive touch events (true, default) or forward them to peers (false)
	 * @alias Titanium.UI.SearchBar.touchEnabled
	 * @property {Boolean}
	 */
	touchEnabled: false,
	/**
	 * Get the a boolean indicating if the view should receive touch events (true, default) or forward them to peers (false)
	 * @alias Titanium.UI.SearchBar.getTouchEnabled
	 * @return {Boolean}
	 */
	getTouchEnabled: function () { return touchEnabled; },
	/**
	 * Set the a boolean indicating if the view should receive touch events (true, default) or forward them to peers (false)
	 * @param {Boolean} value New value to set.
	 * @alias Titanium.UI.SearchBar.setTouchEnabled
	 */
	setTouchEnabled: function () { },
	/**
	 * the transformation matrix to apply to the view
	 * @alias Titanium.UI.SearchBar.transform
	 * @property {Object}
	 */
	transform: {},
	/**
	 * Get the the transformation matrix to apply to the view
	 * @alias Titanium.UI.SearchBar.getTransform
	 * @return {Object}
	 */
	getTransform: function () { return transform; },
	/**
	 * Set the the transformation matrix to apply to the view
	 * @param {Object} value New value to set.
	 * @alias Titanium.UI.SearchBar.setTransform
	 */
	setTransform: function () { },
	/**
	 * the value of the search bar
	 * @alias Titanium.UI.SearchBar.value
	 * @property {String}
	 */
	value: '',
	/**
	 * Get the the value of the search bar
	 * @alias Titanium.UI.SearchBar.getValue
	 * @return {String}
	 */
	getValue: function () { return value; },
	/**
	 * Set the the value of the search bar
	 * @param {String} value New value to set.
	 * @alias Titanium.UI.SearchBar.setValue
	 */
	setValue: function () { },
	/**
	 * a boolean of the visibility of the view
	 * @alias Titanium.UI.SearchBar.visible
	 * @property {Boolean}
	 */
	visible: false,
	/**
	 * Get the a boolean of the visibility of the view
	 * @alias Titanium.UI.SearchBar.getVisible
	 * @return {Boolean}
	 */
	getVisible: function () { return visible; },
	/**
	 * Set the a boolean of the visibility of the view
	 * @param {Boolean} value New value to set.
	 * @alias Titanium.UI.SearchBar.setVisible
	 */
	setVisible: function () { },
	/**
	 * property for the view width. Can be either a float value or a dimension string ie 'auto' (default), '50%' (iPhone only).
	 * @alias Titanium.UI.SearchBar.width
	 * @property {Float,String}
	 */
	width: 0.0,
	/**
	 * Get the property for the view width. Can be either a float value or a dimension string ie 'auto' (default), '50%' (iPhone only).
	 * @alias Titanium.UI.SearchBar.getWidth
	 * @return {Float,String}
	 */
	getWidth: function () { return width; },
	/**
	 * Set the property for the view width. Can be either a float value or a dimension string ie 'auto' (default), '50%' (iPhone only).
	 * @param {Float,String} value New value to set.
	 * @alias Titanium.UI.SearchBar.setWidth
	 */
	setWidth: function () { },
	/**
	 * the z index position relative to other sibling views
	 * @alias Titanium.UI.SearchBar.zIndex
	 * @property {Integer}
	 */
	zIndex: 0,
	/**
	 * Get the the z index position relative to other sibling views
	 * @alias Titanium.UI.SearchBar.getZIndex
	 * @return {Integer}
	 */
	getZIndex: function () { return zIndex; },
	/**
	 * Set the the z index position relative to other sibling views
	 * @param {Integer} value New value to set.
	 * @alias Titanium.UI.SearchBar.setZIndex
	 */
	setZIndex: function () { },
	/**
	 * add a child to the view hierarchy
	 * @param {Object} view the view to add to this views hiearchy
	 * @alias Titanium.UI.SearchBar.add
	 */
	add: function (view) { },
	/**
	 * add an event listener for the instance to receive view triggered events
	 * @param {String} name name of the event
	 * @param {Function} callback callback function to invoke when the event is fired
	 * @alias Titanium.UI.SearchBar.addEventListener
	 */
	addEventListener: function (name,callback) { },
	/**
	 * animate the view
	 * @param {Object} obj either a dictionary of animation properties or an Animation object
	 * @param {Function} callback function to be invoked upon completion of the animation
	 * @alias Titanium.UI.SearchBar.animate
	 */
	animate: function (obj,callback) { },
	/**
	 * called to force the search bar to lose focus
	 * @alias Titanium.UI.SearchBar.blur
	 */
	blur: function () { },
	/**
	 * fire a synthesized event to the views listener
	 * @param {String} name name of the event
	 * @param {Object} event event object
	 * @alias Titanium.UI.SearchBar.fireEvent
	 */
	fireEvent: function (name,event) { },
	/**
	 * called to force the search bar to focus
	 * @alias Titanium.UI.SearchBar.focus
	 */
	focus: function () { },
	/**
	 * hide the view
	 * @alias Titanium.UI.SearchBar.hide
	 */
	hide: function () { },
	/**
	 * remove a previously add view from the view hiearchy
	 * @param {Object} view the view to remove from this views hiearchy
	 * @alias Titanium.UI.SearchBar.remove
	 */
	remove: function (view) { },
	/**
	 * remove a previously added event listener
	 * @param {String} name name of the event
	 * @param {Function} callback callback function passed in addEventListener
	 * @alias Titanium.UI.SearchBar.removeEventListener
	 */
	removeEventListener: function (name,callback) { },
	/**
	 * make the view visible
	 * @alias Titanium.UI.SearchBar.show
	 */
	show: function () { },
	/**
	 * return a Blob image of the rendered view
	 * @param {Function} f function to be invoked upon completion. if non-null, this method will be performed asynchronously. if null, it will be performed immediately
	 * @alias Titanium.UI.SearchBar.toImage
	 * @return {Object}
	 */
	toImage: function (f) { return {}; },
};

/**
 * A Slider is created by the method Titanium.UI.createSlider.
 * @since 0.8
 */
Titanium.UI.Slider = {
	/**
	 * a dictionary with properties x and y to indicate the anchor point value. anchor specifies the position by which animation should occur. center is 0.5, 0.5
	 * @alias Titanium.UI.Slider.anchorPoint
	 * @property {Object}
	 */
	anchorPoint: {},
	/**
	 * Get the a dictionary with properties x and y to indicate the anchor point value. anchor specifies the position by which animation should occur. center is 0.5, 0.5
	 * @alias Titanium.UI.Slider.getAnchorPoint
	 * @return {Object}
	 */
	getAnchorPoint: function () { return anchorPoint; },
	/**
	 * Set the a dictionary with properties x and y to indicate the anchor point value. anchor specifies the position by which animation should occur. center is 0.5, 0.5
	 * @param {Object} value New value to set.
	 * @alias Titanium.UI.Slider.setAnchorPoint
	 */
	setAnchorPoint: function () { },
	/**
	 * read-only object with x and y properties of where the view is during animation
	 * @alias Titanium.UI.Slider.animatedCenterPoint
	 * @property {Object}
	 */
	animatedCenterPoint: {},
	/**
	 * Get the read-only object with x and y properties of where the view is during animation
	 * @alias Titanium.UI.Slider.getAnimatedCenterPoint
	 * @return {Object}
	 */
	getAnimatedCenterPoint: function () { return animatedCenterPoint; },
	/**
	 * Set the read-only object with x and y properties of where the view is during animation
	 * @param {Object} value New value to set.
	 * @alias Titanium.UI.Slider.setAnimatedCenterPoint
	 */
	setAnimatedCenterPoint: function () { },
	/**
	 * the background color of the view
	 * @alias Titanium.UI.Slider.backgroundColor
	 * @property {String}
	 */
	backgroundColor: '',
	/**
	 * Get the the background color of the view
	 * @alias Titanium.UI.Slider.getBackgroundColor
	 * @return {String}
	 */
	getBackgroundColor: function () { return backgroundColor; },
	/**
	 * Set the the background color of the view
	 * @param {String} value New value to set.
	 * @alias Titanium.UI.Slider.setBackgroundColor
	 */
	setBackgroundColor: function () { },
	/**
	 * the disabled background color of the view. (Android)
	 * @alias Titanium.UI.Slider.backgroundDisabledColor
	 * @property {String}
	 */
	backgroundDisabledColor: '',
	/**
	 * Get the the disabled background color of the view. (Android)
	 * @alias Titanium.UI.Slider.getBackgroundDisabledColor
	 * @return {String}
	 */
	getBackgroundDisabledColor: function () { return backgroundDisabledColor; },
	/**
	 * Set the the disabled background color of the view. (Android)
	 * @param {String} value New value to set.
	 * @alias Titanium.UI.Slider.setBackgroundDisabledColor
	 */
	setBackgroundDisabledColor: function () { },
	/**
	 * the disabled background image url of the view. (Android)
	 * @alias Titanium.UI.Slider.backgroundDisabledImage
	 * @property {String}
	 */
	backgroundDisabledImage: '',
	/**
	 * Get the the disabled background image url of the view. (Android)
	 * @alias Titanium.UI.Slider.getBackgroundDisabledImage
	 * @return {String}
	 */
	getBackgroundDisabledImage: function () { return backgroundDisabledImage; },
	/**
	 * Set the the disabled background image url of the view. (Android)
	 * @param {String} value New value to set.
	 * @alias Titanium.UI.Slider.setBackgroundDisabledImage
	 */
	setBackgroundDisabledImage: function () { },
	/**
	 * the focused background color of the view. focusable must be true for normal views. (Android)
	 * @alias Titanium.UI.Slider.backgroundFocusedColor
	 * @property {String}
	 */
	backgroundFocusedColor: '',
	/**
	 * Get the the focused background color of the view. focusable must be true for normal views. (Android)
	 * @alias Titanium.UI.Slider.getBackgroundFocusedColor
	 * @return {String}
	 */
	getBackgroundFocusedColor: function () { return backgroundFocusedColor; },
	/**
	 * Set the the focused background color of the view. focusable must be true for normal views. (Android)
	 * @param {String} value New value to set.
	 * @alias Titanium.UI.Slider.setBackgroundFocusedColor
	 */
	setBackgroundFocusedColor: function () { },
	/**
	 * the focused background image url of the view. focusable must be true for normal views. (Android)
	 * @alias Titanium.UI.Slider.backgroundFocusedImage
	 * @property {String}
	 */
	backgroundFocusedImage: '',
	/**
	 * Get the the focused background image url of the view. focusable must be true for normal views. (Android)
	 * @alias Titanium.UI.Slider.getBackgroundFocusedImage
	 * @return {String}
	 */
	getBackgroundFocusedImage: function () { return backgroundFocusedImage; },
	/**
	 * Set the the focused background image url of the view. focusable must be true for normal views. (Android)
	 * @param {String} value New value to set.
	 * @alias Titanium.UI.Slider.setBackgroundFocusedImage
	 */
	setBackgroundFocusedImage: function () { },
	/**
	 * a background gradient for the view with the properties: type,startPoint,endPoint,startRadius,endRadius,backfillStart,backfillEnd,colors.
	 * @alias Titanium.UI.Slider.backgroundGradient
	 * @property {Object}
	 */
	backgroundGradient: {},
	/**
	 * Get the a background gradient for the view with the properties: type,startPoint,endPoint,startRadius,endRadius,backfillStart,backfillEnd,colors.
	 * @alias Titanium.UI.Slider.getBackgroundGradient
	 * @return {Object}
	 */
	getBackgroundGradient: function () { return backgroundGradient; },
	/**
	 * Set the a background gradient for the view with the properties: type,startPoint,endPoint,startRadius,endRadius,backfillStart,backfillEnd,colors.
	 * @param {Object} value New value to set.
	 * @alias Titanium.UI.Slider.setBackgroundGradient
	 */
	setBackgroundGradient: function () { },
	/**
	 * the background image url of the view
	 * @alias Titanium.UI.Slider.backgroundImage
	 * @property {String}
	 */
	backgroundImage: '',
	/**
	 * Get the the background image url of the view
	 * @alias Titanium.UI.Slider.getBackgroundImage
	 * @return {String}
	 */
	getBackgroundImage: function () { return backgroundImage; },
	/**
	 * Set the the background image url of the view
	 * @param {String} value New value to set.
	 * @alias Titanium.UI.Slider.setBackgroundImage
	 */
	setBackgroundImage: function () { },
	/**
	 * End caps specify the portion of an image that should not be resized when an image is stretched. This technique is used to implement buttons and other resizable image-based interface elements. When a button with end caps is resized, the resizing occurs only in the middle of the button, in the region between the end caps. The end caps themselves keep their original size and appearance. This property specifies the size of the left end cap. The middle (stretchable) portion is assumed to be 1 pixel wide. The right end cap is therefore computed by adding the size of the left end cap and the middle portion together and then subtracting that value from the width of the image
	 * @alias Titanium.UI.Slider.backgroundLeftCap
	 * @property {Float}
	 */
	backgroundLeftCap: 0.0,
	/**
	 * Get the End caps specify the portion of an image that should not be resized when an image is stretched. This technique is used to implement buttons and other resizable image-based interface elements. When a button with end caps is resized, the resizing occurs only in the middle of the button, in the region between the end caps. The end caps themselves keep their original size and appearance. This property specifies the size of the left end cap. The middle (stretchable) portion is assumed to be 1 pixel wide. The right end cap is therefore computed by adding the size of the left end cap and the middle portion together and then subtracting that value from the width of the image
	 * @alias Titanium.UI.Slider.getBackgroundLeftCap
	 * @return {Float}
	 */
	getBackgroundLeftCap: function () { return backgroundLeftCap; },
	/**
	 * Set the End caps specify the portion of an image that should not be resized when an image is stretched. This technique is used to implement buttons and other resizable image-based interface elements. When a button with end caps is resized, the resizing occurs only in the middle of the button, in the region between the end caps. The end caps themselves keep their original size and appearance. This property specifies the size of the left end cap. The middle (stretchable) portion is assumed to be 1 pixel wide. The right end cap is therefore computed by adding the size of the left end cap and the middle portion together and then subtracting that value from the width of the image
	 * @param {Float} value New value to set.
	 * @alias Titanium.UI.Slider.setBackgroundLeftCap
	 */
	setBackgroundLeftCap: function () { },
	/**
	 * the selected background color of the view. focusable must be true for normal views. (Android)
	 * @alias Titanium.UI.Slider.backgroundSelectedColor
	 * @property {String}
	 */
	backgroundSelectedColor: '',
	/**
	 * Get the the selected background color of the view. focusable must be true for normal views. (Android)
	 * @alias Titanium.UI.Slider.getBackgroundSelectedColor
	 * @return {String}
	 */
	getBackgroundSelectedColor: function () { return backgroundSelectedColor; },
	/**
	 * Set the the selected background color of the view. focusable must be true for normal views. (Android)
	 * @param {String} value New value to set.
	 * @alias Titanium.UI.Slider.setBackgroundSelectedColor
	 */
	setBackgroundSelectedColor: function () { },
	/**
	 * the selected background image url of the view. focusable must be true for normal views. (Android)
	 * @alias Titanium.UI.Slider.backgroundSelectedImage
	 * @property {String}
	 */
	backgroundSelectedImage: '',
	/**
	 * Get the the selected background image url of the view. focusable must be true for normal views. (Android)
	 * @alias Titanium.UI.Slider.getBackgroundSelectedImage
	 * @return {String}
	 */
	getBackgroundSelectedImage: function () { return backgroundSelectedImage; },
	/**
	 * Set the the selected background image url of the view. focusable must be true for normal views. (Android)
	 * @param {String} value New value to set.
	 * @alias Titanium.UI.Slider.setBackgroundSelectedImage
	 */
	setBackgroundSelectedImage: function () { },
	/**
	 * End caps specify the portion of an image that should not be resized when an image is stretched. This technique is used to implement buttons and other resizable image-based interface elements. When a button with end caps is resized, the resizing occurs only in the middle of the button, in the region between the end caps. The end caps themselves keep their original size and appearance. This property specifies the size of the top end cap. The middle (stretchable) portion is assumed to be 1 pixel wide. The bottom end cap is therefore computed by adding the size of the top end cap and the middle portion together and then subtracting that value from the height of the image
	 * @alias Titanium.UI.Slider.backgroundTopCap
	 * @property {Float}
	 */
	backgroundTopCap: 0.0,
	/**
	 * Get the End caps specify the portion of an image that should not be resized when an image is stretched. This technique is used to implement buttons and other resizable image-based interface elements. When a button with end caps is resized, the resizing occurs only in the middle of the button, in the region between the end caps. The end caps themselves keep their original size and appearance. This property specifies the size of the top end cap. The middle (stretchable) portion is assumed to be 1 pixel wide. The bottom end cap is therefore computed by adding the size of the top end cap and the middle portion together and then subtracting that value from the height of the image
	 * @alias Titanium.UI.Slider.getBackgroundTopCap
	 * @return {Float}
	 */
	getBackgroundTopCap: function () { return backgroundTopCap; },
	/**
	 * Set the End caps specify the portion of an image that should not be resized when an image is stretched. This technique is used to implement buttons and other resizable image-based interface elements. When a button with end caps is resized, the resizing occurs only in the middle of the button, in the region between the end caps. The end caps themselves keep their original size and appearance. This property specifies the size of the top end cap. The middle (stretchable) portion is assumed to be 1 pixel wide. The bottom end cap is therefore computed by adding the size of the top end cap and the middle portion together and then subtracting that value from the height of the image
	 * @param {Float} value New value to set.
	 * @alias Titanium.UI.Slider.setBackgroundTopCap
	 */
	setBackgroundTopCap: function () { },
	/**
	 * the border color of the view
	 * @alias Titanium.UI.Slider.borderColor
	 * @property {String}
	 */
	borderColor: '',
	/**
	 * Get the the border color of the view
	 * @alias Titanium.UI.Slider.getBorderColor
	 * @return {String}
	 */
	getBorderColor: function () { return borderColor; },
	/**
	 * Set the the border color of the view
	 * @param {String} value New value to set.
	 * @alias Titanium.UI.Slider.setBorderColor
	 */
	setBorderColor: function () { },
	/**
	 * the border radius of the view
	 * @alias Titanium.UI.Slider.borderRadius
	 * @property {Float}
	 */
	borderRadius: 0.0,
	/**
	 * Get the the border radius of the view
	 * @alias Titanium.UI.Slider.getBorderRadius
	 * @return {Float}
	 */
	getBorderRadius: function () { return borderRadius; },
	/**
	 * Set the the border radius of the view
	 * @param {Float} value New value to set.
	 * @alias Titanium.UI.Slider.setBorderRadius
	 */
	setBorderRadius: function () { },
	/**
	 * the border width of the view
	 * @alias Titanium.UI.Slider.borderWidth
	 * @property {Float}
	 */
	borderWidth: 0.0,
	/**
	 * Get the the border width of the view
	 * @alias Titanium.UI.Slider.getBorderWidth
	 * @return {Float}
	 */
	getBorderWidth: function () { return borderWidth; },
	/**
	 * Set the the border width of the view
	 * @param {Float} value New value to set.
	 * @alias Titanium.UI.Slider.setBorderWidth
	 */
	setBorderWidth: function () { },
	/**
	 * property for the view bottom position. This position is relative to the view's parent. Can be either a float value or a dimension string ie 'auto' (default), '50%' (iPhone only).
	 * @alias Titanium.UI.Slider.bottom
	 * @property {Float,String}
	 */
	bottom: 0.0,
	/**
	 * Get the property for the view bottom position. This position is relative to the view's parent. Can be either a float value or a dimension string ie 'auto' (default), '50%' (iPhone only).
	 * @alias Titanium.UI.Slider.getBottom
	 * @return {Float,String}
	 */
	getBottom: function () { return bottom; },
	/**
	 * Set the property for the view bottom position. This position is relative to the view's parent. Can be either a float value or a dimension string ie 'auto' (default), '50%' (iPhone only).
	 * @param {Float,String} value New value to set.
	 * @alias Titanium.UI.Slider.setBottom
	 */
	setBottom: function () { },
	/**
	 * a dictionary with properties x and y to indicate the center of the views position relative to the parent view
	 * @alias Titanium.UI.Slider.center
	 * @property {Object}
	 */
	center: {},
	/**
	 * Get the a dictionary with properties x and y to indicate the center of the views position relative to the parent view
	 * @alias Titanium.UI.Slider.getCenter
	 * @return {Object}
	 */
	getCenter: function () { return center; },
	/**
	 * Set the a dictionary with properties x and y to indicate the center of the views position relative to the parent view
	 * @param {Object} value New value to set.
	 * @alias Titanium.UI.Slider.setCenter
	 */
	setCenter: function () { },
	/**
	 * the image url of the slider left track when in the disabled state
	 * @alias Titanium.UI.Slider.disabledLeftTrackImage
	 * @property {String}
	 */
	disabledLeftTrackImage: '',
	/**
	 * Get the the image url of the slider left track when in the disabled state
	 * @alias Titanium.UI.Slider.getDisabledLeftTrackImage
	 * @return {String}
	 */
	getDisabledLeftTrackImage: function () { return disabledLeftTrackImage; },
	/**
	 * Set the the image url of the slider left track when in the disabled state
	 * @param {String} value New value to set.
	 * @alias Titanium.UI.Slider.setDisabledLeftTrackImage
	 */
	setDisabledLeftTrackImage: function () { },
	/**
	 * the image url of the slider right track when in the disabled state
	 * @alias Titanium.UI.Slider.disabledRightTrackImage
	 * @property {String}
	 */
	disabledRightTrackImage: '',
	/**
	 * Get the the image url of the slider right track when in the disabled state
	 * @alias Titanium.UI.Slider.getDisabledRightTrackImage
	 * @return {String}
	 */
	getDisabledRightTrackImage: function () { return disabledRightTrackImage; },
	/**
	 * Set the the image url of the slider right track when in the disabled state
	 * @param {String} value New value to set.
	 * @alias Titanium.UI.Slider.setDisabledRightTrackImage
	 */
	setDisabledRightTrackImage: function () { },
	/**
	 * the image url of the slider thumb when in the disabled state
	 * @alias Titanium.UI.Slider.disabledThumbImage
	 * @property {String}
	 */
	disabledThumbImage: '',
	/**
	 * Get the the image url of the slider thumb when in the disabled state
	 * @alias Titanium.UI.Slider.getDisabledThumbImage
	 * @return {String}
	 */
	getDisabledThumbImage: function () { return disabledThumbImage; },
	/**
	 * Set the the image url of the slider thumb when in the disabled state
	 * @param {String} value New value to set.
	 * @alias Titanium.UI.Slider.setDisabledThumbImage
	 */
	setDisabledThumbImage: function () { },
	/**
	 * boolean to indicate the enabled state of the slider
	 * @alias Titanium.UI.Slider.enabled
	 * @property {Boolean}
	 */
	enabled: false,
	/**
	 * Get the boolean to indicate the enabled state of the slider
	 * @alias Titanium.UI.Slider.getEnabled
	 * @return {Boolean}
	 */
	getEnabled: function () { return enabled; },
	/**
	 * Set the boolean to indicate the enabled state of the slider
	 * @param {Boolean} value New value to set.
	 * @alias Titanium.UI.Slider.setEnabled
	 */
	setEnabled: function () { },
	/**
	 * Set true if you want a view to be focusable when navigating with the trackball or D-Pad. Default: false. (Android Only)
	 * @alias Titanium.UI.Slider.focusable
	 * @property {Boolean}
	 */
	focusable: false,
	/**
	 * Get the Set true if you want a view to be focusable when navigating with the trackball or D-Pad. Default: false. (Android Only)
	 * @alias Titanium.UI.Slider.getFocusable
	 * @return {Boolean}
	 */
	getFocusable: function () { return focusable; },
	/**
	 * Set the Set true if you want a view to be focusable when navigating with the trackball or D-Pad. Default: false. (Android Only)
	 * @param {Boolean} value New value to set.
	 * @alias Titanium.UI.Slider.setFocusable
	 */
	setFocusable: function () { },
	/**
	 * the font family
	 * @alias Titanium.UI.Slider.font-family
	 * @property {String}
	 */
	font-family: '',
	/**
	 * Get the the font family
	 * @alias Titanium.UI.Slider.getFont-family
	 * @return {String}
	 */
	getFont-family: function () { return font-family; },
	/**
	 * Set the the font family
	 * @param {String} value New value to set.
	 * @alias Titanium.UI.Slider.setFont-family
	 */
	setFont-family: function () { },
	/**
	 * the font size
	 * @alias Titanium.UI.Slider.font-size
	 * @property {String}
	 */
	font-size: '',
	/**
	 * Get the the font size
	 * @alias Titanium.UI.Slider.getFont-size
	 * @return {String}
	 */
	getFont-size: function () { return font-size; },
	/**
	 * Set the the font size
	 * @param {String} value New value to set.
	 * @alias Titanium.UI.Slider.setFont-size
	 */
	setFont-size: function () { },
	/**
	 * the font style, either normal or italics
	 * @alias Titanium.UI.Slider.font-style
	 * @property {String}
	 */
	font-style: '',
	/**
	 * Get the the font style, either normal or italics
	 * @alias Titanium.UI.Slider.getFont-style
	 * @return {String}
	 */
	getFont-style: function () { return font-style; },
	/**
	 * Set the the font style, either normal or italics
	 * @param {String} value New value to set.
	 * @alias Titanium.UI.Slider.setFont-style
	 */
	setFont-style: function () { },
	/**
	 * the font weight, either normal or bold
	 * @alias Titanium.UI.Slider.font-weight
	 * @property {String}
	 */
	font-weight: '',
	/**
	 * Get the the font weight, either normal or bold
	 * @alias Titanium.UI.Slider.getFont-weight
	 * @return {String}
	 */
	getFont-weight: function () { return font-weight; },
	/**
	 * Set the the font weight, either normal or bold
	 * @param {String} value New value to set.
	 * @alias Titanium.UI.Slider.setFont-weight
	 */
	setFont-weight: function () { },
	/**
	 * property for the view height. Can be either a float value or a dimension string ie 'auto' (default), '50%' (iPhone only).
	 * @alias Titanium.UI.Slider.height
	 * @property {Float,String}
	 */
	height: 0.0,
	/**
	 * Get the property for the view height. Can be either a float value or a dimension string ie 'auto' (default), '50%' (iPhone only).
	 * @alias Titanium.UI.Slider.getHeight
	 * @return {Float,String}
	 */
	getHeight: function () { return height; },
	/**
	 * Set the property for the view height. Can be either a float value or a dimension string ie 'auto' (default), '50%' (iPhone only).
	 * @param {Float,String} value New value to set.
	 * @alias Titanium.UI.Slider.setHeight
	 */
	setHeight: function () { },
	/**
	 * the image url of the slider left track when in the highlighted state
	 * @alias Titanium.UI.Slider.highlightedLeftTrackImage
	 * @property {String}
	 */
	highlightedLeftTrackImage: '',
	/**
	 * Get the the image url of the slider left track when in the highlighted state
	 * @alias Titanium.UI.Slider.getHighlightedLeftTrackImage
	 * @return {String}
	 */
	getHighlightedLeftTrackImage: function () { return highlightedLeftTrackImage; },
	/**
	 * Set the the image url of the slider left track when in the highlighted state
	 * @param {String} value New value to set.
	 * @alias Titanium.UI.Slider.setHighlightedLeftTrackImage
	 */
	setHighlightedLeftTrackImage: function () { },
	/**
	 * the image url of the slider right track when in the highlighted state
	 * @alias Titanium.UI.Slider.highlightedRightTrackImage
	 * @property {String}
	 */
	highlightedRightTrackImage: '',
	/**
	 * Get the the image url of the slider right track when in the highlighted state
	 * @alias Titanium.UI.Slider.getHighlightedRightTrackImage
	 * @return {String}
	 */
	getHighlightedRightTrackImage: function () { return highlightedRightTrackImage; },
	/**
	 * Set the the image url of the slider right track when in the highlighted state
	 * @param {String} value New value to set.
	 * @alias Titanium.UI.Slider.setHighlightedRightTrackImage
	 */
	setHighlightedRightTrackImage: function () { },
	/**
	 * the image url of the slider thumb when in the highlighted state
	 * @alias Titanium.UI.Slider.highlightedThumbImage
	 * @property {String}
	 */
	highlightedThumbImage: '',
	/**
	 * Get the the image url of the slider thumb when in the highlighted state
	 * @alias Titanium.UI.Slider.getHighlightedThumbImage
	 * @return {String}
	 */
	getHighlightedThumbImage: function () { return highlightedThumbImage; },
	/**
	 * Set the the image url of the slider thumb when in the highlighted state
	 * @param {String} value New value to set.
	 * @alias Titanium.UI.Slider.setHighlightedThumbImage
	 */
	setHighlightedThumbImage: function () { },
	/**
	 * property for the view left position. This position is relative to the view's parent. Can be either a float value or a dimension string ie 'auto' (default), '50%' (iPhone only).
	 * @alias Titanium.UI.Slider.left
	 * @property {Float,String}
	 */
	left: 0.0,
	/**
	 * Get the property for the view left position. This position is relative to the view's parent. Can be either a float value or a dimension string ie 'auto' (default), '50%' (iPhone only).
	 * @alias Titanium.UI.Slider.getLeft
	 * @return {Float,String}
	 */
	getLeft: function () { return left; },
	/**
	 * Set the property for the view left position. This position is relative to the view's parent. Can be either a float value or a dimension string ie 'auto' (default), '50%' (iPhone only).
	 * @param {Float,String} value New value to set.
	 * @alias Titanium.UI.Slider.setLeft
	 */
	setLeft: function () { },
	/**
	 * the image url of the slider left track
	 * @alias Titanium.UI.Slider.leftTrackImage
	 * @property {String}
	 */
	leftTrackImage: '',
	/**
	 * Get the the image url of the slider left track
	 * @alias Titanium.UI.Slider.getLeftTrackImage
	 * @return {String}
	 */
	getLeftTrackImage: function () { return leftTrackImage; },
	/**
	 * Set the the image url of the slider left track
	 * @param {String} value New value to set.
	 * @alias Titanium.UI.Slider.setLeftTrackImage
	 */
	setLeftTrackImage: function () { },
	/**
	 * the maximum slider value
	 * @alias Titanium.UI.Slider.max
	 * @property {Float}
	 */
	max: 0.0,
	/**
	 * Get the the maximum slider value
	 * @alias Titanium.UI.Slider.getMax
	 * @return {Float}
	 */
	getMax: function () { return max; },
	/**
	 * Set the the maximum slider value
	 * @param {Float} value New value to set.
	 * @alias Titanium.UI.Slider.setMax
	 */
	setMax: function () { },
	/**
	 * value can't be moved higher than maxRange. maxRange equals max by default. (Android)
	 * @alias Titanium.UI.Slider.maxRange
	 * @property {Integer}
	 */
	maxRange: 0,
	/**
	 * Get the value can't be moved higher than maxRange. maxRange equals max by default. (Android)
	 * @alias Titanium.UI.Slider.getMaxRange
	 * @return {Integer}
	 */
	getMaxRange: function () { return maxRange; },
	/**
	 * Set the value can't be moved higher than maxRange. maxRange equals max by default. (Android)
	 * @param {Integer} value New value to set.
	 * @alias Titanium.UI.Slider.setMaxRange
	 */
	setMaxRange: function () { },
	/**
	 * the minimum slider value
	 * @alias Titanium.UI.Slider.min
	 * @property {Float}
	 */
	min: 0.0,
	/**
	 * Get the the minimum slider value
	 * @alias Titanium.UI.Slider.getMin
	 * @return {Float}
	 */
	getMin: function () { return min; },
	/**
	 * Set the the minimum slider value
	 * @param {Float} value New value to set.
	 * @alias Titanium.UI.Slider.setMin
	 */
	setMin: function () { },
	/**
	 * value can't be moved lower than minRange. minRange equals min by default. (Android)
	 * @alias Titanium.UI.Slider.minRange
	 * @property {Integer}
	 */
	minRange: 0,
	/**
	 * Get the value can't be moved lower than minRange. minRange equals min by default. (Android)
	 * @alias Titanium.UI.Slider.getMinRange
	 * @return {Integer}
	 */
	getMinRange: function () { return minRange; },
	/**
	 * Set the value can't be moved lower than minRange. minRange equals min by default. (Android)
	 * @param {Integer} value New value to set.
	 * @alias Titanium.UI.Slider.setMinRange
	 */
	setMinRange: function () { },
	/**
	 * the opacity from 0.0-1.0
	 * @alias Titanium.UI.Slider.opacity
	 * @property {Float}
	 */
	opacity: 0.0,
	/**
	 * Get the the opacity from 0.0-1.0
	 * @alias Titanium.UI.Slider.getOpacity
	 * @return {Float}
	 */
	getOpacity: function () { return opacity; },
	/**
	 * Set the the opacity from 0.0-1.0
	 * @param {Float} value New value to set.
	 * @alias Titanium.UI.Slider.setOpacity
	 */
	setOpacity: function () { },
	/**
	 * property for the view right position. This position is relative to the view's parent. Can be either a float value or a dimension string ie 'auto' (default), '50%' (iPhone only).
	 * @alias Titanium.UI.Slider.right
	 * @property {Float,String}
	 */
	right: 0.0,
	/**
	 * Get the property for the view right position. This position is relative to the view's parent. Can be either a float value or a dimension string ie 'auto' (default), '50%' (iPhone only).
	 * @alias Titanium.UI.Slider.getRight
	 * @return {Float,String}
	 */
	getRight: function () { return right; },
	/**
	 * Set the property for the view right position. This position is relative to the view's parent. Can be either a float value or a dimension string ie 'auto' (default), '50%' (iPhone only).
	 * @param {Float,String} value New value to set.
	 * @alias Titanium.UI.Slider.setRight
	 */
	setRight: function () { },
	/**
	 * the image url of the slider right track
	 * @alias Titanium.UI.Slider.rightTrackImage
	 * @property {String}
	 */
	rightTrackImage: '',
	/**
	 * Get the the image url of the slider right track
	 * @alias Titanium.UI.Slider.getRightTrackImage
	 * @return {String}
	 */
	getRightTrackImage: function () { return rightTrackImage; },
	/**
	 * Set the the image url of the slider right track
	 * @param {String} value New value to set.
	 * @alias Titanium.UI.Slider.setRightTrackImage
	 */
	setRightTrackImage: function () { },
	/**
	 * the image url of the slider left track when in the selected state
	 * @alias Titanium.UI.Slider.selectedLeftTrackImage
	 * @property {String}
	 */
	selectedLeftTrackImage: '',
	/**
	 * Get the the image url of the slider left track when in the selected state
	 * @alias Titanium.UI.Slider.getSelectedLeftTrackImage
	 * @return {String}
	 */
	getSelectedLeftTrackImage: function () { return selectedLeftTrackImage; },
	/**
	 * Set the the image url of the slider left track when in the selected state
	 * @param {String} value New value to set.
	 * @alias Titanium.UI.Slider.setSelectedLeftTrackImage
	 */
	setSelectedLeftTrackImage: function () { },
	/**
	 * the image url of the slider right track when in the selected state
	 * @alias Titanium.UI.Slider.selectedRightTrackImage
	 * @property {String}
	 */
	selectedRightTrackImage: '',
	/**
	 * Get the the image url of the slider right track when in the selected state
	 * @alias Titanium.UI.Slider.getSelectedRightTrackImage
	 * @return {String}
	 */
	getSelectedRightTrackImage: function () { return selectedRightTrackImage; },
	/**
	 * Set the the image url of the slider right track when in the selected state
	 * @param {String} value New value to set.
	 * @alias Titanium.UI.Slider.setSelectedRightTrackImage
	 */
	setSelectedRightTrackImage: function () { },
	/**
	 * the image url of the slider thumb when in the selected state
	 * @alias Titanium.UI.Slider.selectedThumbImage
	 * @property {String}
	 */
	selectedThumbImage: '',
	/**
	 * Get the the image url of the slider thumb when in the selected state
	 * @alias Titanium.UI.Slider.getSelectedThumbImage
	 * @return {String}
	 */
	getSelectedThumbImage: function () { return selectedThumbImage; },
	/**
	 * Set the the image url of the slider thumb when in the selected state
	 * @param {String} value New value to set.
	 * @alias Titanium.UI.Slider.setSelectedThumbImage
	 */
	setSelectedThumbImage: function () { },
	/**
	 * the size of the view as a dictionary of width and height properties
	 * @alias Titanium.UI.Slider.size
	 * @property {Object}
	 */
	size: {},
	/**
	 * Get the the size of the view as a dictionary of width and height properties
	 * @alias Titanium.UI.Slider.getSize
	 * @return {Object}
	 */
	getSize: function () { return size; },
	/**
	 * Set the the size of the view as a dictionary of width and height properties
	 * @param {Object} value New value to set.
	 * @alias Titanium.UI.Slider.setSize
	 */
	setSize: function () { },
	/**
	 * One of Titanium.UI.Android.SOFT_KEYBOARD_DEFAULT_ON_FOCUS, Titanium.UI.Android.SOFT_KEYBOARD_HIDE_ON_FOCUS, or Titanium.UI.Android.SOFT_KEYBOARD_SHOW_ON_FOCUS. (Android only)
	 * @alias Titanium.UI.Slider.softKeyboardOnFocus
	 * @property {Integer}
	 */
	softKeyboardOnFocus: 0,
	/**
	 * Get the One of Titanium.UI.Android.SOFT_KEYBOARD_DEFAULT_ON_FOCUS, Titanium.UI.Android.SOFT_KEYBOARD_HIDE_ON_FOCUS, or Titanium.UI.Android.SOFT_KEYBOARD_SHOW_ON_FOCUS. (Android only)
	 * @alias Titanium.UI.Slider.getSoftKeyboardOnFocus
	 * @return {Integer}
	 */
	getSoftKeyboardOnFocus: function () { return softKeyboardOnFocus; },
	/**
	 * Set the One of Titanium.UI.Android.SOFT_KEYBOARD_DEFAULT_ON_FOCUS, Titanium.UI.Android.SOFT_KEYBOARD_HIDE_ON_FOCUS, or Titanium.UI.Android.SOFT_KEYBOARD_SHOW_ON_FOCUS. (Android only)
	 * @param {Integer} value New value to set.
	 * @alias Titanium.UI.Slider.setSoftKeyboardOnFocus
	 */
	setSoftKeyboardOnFocus: function () { },
	/**
	 * the image url to the slider thumb
	 * @alias Titanium.UI.Slider.thumbImage
	 * @property {String}
	 */
	thumbImage: '',
	/**
	 * Get the the image url to the slider thumb
	 * @alias Titanium.UI.Slider.getThumbImage
	 * @return {String}
	 */
	getThumbImage: function () { return thumbImage; },
	/**
	 * Set the the image url to the slider thumb
	 * @param {String} value New value to set.
	 * @alias Titanium.UI.Slider.setThumbImage
	 */
	setThumbImage: function () { },
	/**
	 * property for the view top position. This position is relative to the view's parent. Can be either a float value or a dimension string ie 'auto' (default), '50%' (iPhone only).
	 * @alias Titanium.UI.Slider.top
	 * @property {Float,String}
	 */
	top: 0.0,
	/**
	 * Get the property for the view top position. This position is relative to the view's parent. Can be either a float value or a dimension string ie 'auto' (default), '50%' (iPhone only).
	 * @alias Titanium.UI.Slider.getTop
	 * @return {Float,String}
	 */
	getTop: function () { return top; },
	/**
	 * Set the property for the view top position. This position is relative to the view's parent. Can be either a float value or a dimension string ie 'auto' (default), '50%' (iPhone only).
	 * @param {Float,String} value New value to set.
	 * @alias Titanium.UI.Slider.setTop
	 */
	setTop: function () { },
	/**
	 * a boolean indicating if the view should receive touch events (true, default) or forward them to peers (false)
	 * @alias Titanium.UI.Slider.touchEnabled
	 * @property {Boolean}
	 */
	touchEnabled: false,
	/**
	 * Get the a boolean indicating if the view should receive touch events (true, default) or forward them to peers (false)
	 * @alias Titanium.UI.Slider.getTouchEnabled
	 * @return {Boolean}
	 */
	getTouchEnabled: function () { return touchEnabled; },
	/**
	 * Set the a boolean indicating if the view should receive touch events (true, default) or forward them to peers (false)
	 * @param {Boolean} value New value to set.
	 * @alias Titanium.UI.Slider.setTouchEnabled
	 */
	setTouchEnabled: function () { },
	/**
	 * the transformation matrix to apply to the view
	 * @alias Titanium.UI.Slider.transform
	 * @property {Object}
	 */
	transform: {},
	/**
	 * Get the the transformation matrix to apply to the view
	 * @alias Titanium.UI.Slider.getTransform
	 * @return {Object}
	 */
	getTransform: function () { return transform; },
	/**
	 * Set the the transformation matrix to apply to the view
	 * @param {Object} value New value to set.
	 * @alias Titanium.UI.Slider.setTransform
	 */
	setTransform: function () { },
	/**
	 * the value of the slider
	 * @alias Titanium.UI.Slider.value
	 * @property {String}
	 */
	value: '',
	/**
	 * Get the the value of the slider
	 * @alias Titanium.UI.Slider.getValue
	 * @return {String}
	 */
	getValue: function () { return value; },
	/**
	 * Set the the value of the slider
	 * @param {String} value New value to set.
	 * @alias Titanium.UI.Slider.setValue
	 */
	setValue: function () { },
	/**
	 * a boolean of the visibility of the view
	 * @alias Titanium.UI.Slider.visible
	 * @property {Boolean}
	 */
	visible: false,
	/**
	 * Get the a boolean of the visibility of the view
	 * @alias Titanium.UI.Slider.getVisible
	 * @return {Boolean}
	 */
	getVisible: function () { return visible; },
	/**
	 * Set the a boolean of the visibility of the view
	 * @param {Boolean} value New value to set.
	 * @alias Titanium.UI.Slider.setVisible
	 */
	setVisible: function () { },
	/**
	 * property for the view width. Can be either a float value or a dimension string ie 'auto' (default), '50%' (iPhone only).
	 * @alias Titanium.UI.Slider.width
	 * @property {Float,String}
	 */
	width: 0.0,
	/**
	 * Get the property for the view width. Can be either a float value or a dimension string ie 'auto' (default), '50%' (iPhone only).
	 * @alias Titanium.UI.Slider.getWidth
	 * @return {Float,String}
	 */
	getWidth: function () { return width; },
	/**
	 * Set the property for the view width. Can be either a float value or a dimension string ie 'auto' (default), '50%' (iPhone only).
	 * @param {Float,String} value New value to set.
	 * @alias Titanium.UI.Slider.setWidth
	 */
	setWidth: function () { },
	/**
	 * the z index position relative to other sibling views
	 * @alias Titanium.UI.Slider.zIndex
	 * @property {Integer}
	 */
	zIndex: 0,
	/**
	 * Get the the z index position relative to other sibling views
	 * @alias Titanium.UI.Slider.getZIndex
	 * @return {Integer}
	 */
	getZIndex: function () { return zIndex; },
	/**
	 * Set the the z index position relative to other sibling views
	 * @param {Integer} value New value to set.
	 * @alias Titanium.UI.Slider.setZIndex
	 */
	setZIndex: function () { },
	/**
	 * add a child to the view hierarchy
	 * @param {Object} view the view to add to this views hiearchy
	 * @alias Titanium.UI.Slider.add
	 */
	add: function (view) { },
	/**
	 * add an event listener for the instance to receive view triggered events
	 * @param {String} name name of the event
	 * @param {Function} callback callback function to invoke when the event is fired
	 * @alias Titanium.UI.Slider.addEventListener
	 */
	addEventListener: function (name,callback) { },
	/**
	 * animate the view
	 * @param {Object} obj either a dictionary of animation properties or an Animation object
	 * @param {Function} callback function to be invoked upon completion of the animation
	 * @alias Titanium.UI.Slider.animate
	 */
	animate: function (obj,callback) { },
	/**
	 * fire a synthesized event to the views listener
	 * @param {String} name name of the event
	 * @param {Object} event event object
	 * @alias Titanium.UI.Slider.fireEvent
	 */
	fireEvent: function (name,event) { },
	/**
	 * hide the view
	 * @alias Titanium.UI.Slider.hide
	 */
	hide: function () { },
	/**
	 * remove a previously add view from the view hiearchy
	 * @param {Object} view the view to remove from this views hiearchy
	 * @alias Titanium.UI.Slider.remove
	 */
	remove: function (view) { },
	/**
	 * remove a previously added event listener
	 * @param {String} name name of the event
	 * @param {Function} callback callback function passed in addEventListener
	 * @alias Titanium.UI.Slider.removeEventListener
	 */
	removeEventListener: function (name,callback) { },
	/**
	 * make the view visible
	 * @alias Titanium.UI.Slider.show
	 */
	show: function () { },
	/**
	 * return a Blob image of the rendered view
	 * @param {Function} f function to be invoked upon completion. if non-null, this method will be performed asynchronously. if null, it will be performed immediately
	 * @alias Titanium.UI.Slider.toImage
	 * @return {Object}
	 */
	toImage: function (f) { return {}; },
};

/**
 * A Switch is created by the method Titanium.UI.createSwitch.
 * @since 0.8
 */
Titanium.UI.Switch = {
	/**
	 * a dictionary with properties x and y to indicate the anchor point value. anchor specifies the position by which animation should occur. center is 0.5, 0.5
	 * @alias Titanium.UI.Switch.anchorPoint
	 * @property {Object}
	 */
	anchorPoint: {},
	/**
	 * Get the a dictionary with properties x and y to indicate the anchor point value. anchor specifies the position by which animation should occur. center is 0.5, 0.5
	 * @alias Titanium.UI.Switch.getAnchorPoint
	 * @return {Object}
	 */
	getAnchorPoint: function () { return anchorPoint; },
	/**
	 * Set the a dictionary with properties x and y to indicate the anchor point value. anchor specifies the position by which animation should occur. center is 0.5, 0.5
	 * @param {Object} value New value to set.
	 * @alias Titanium.UI.Switch.setAnchorPoint
	 */
	setAnchorPoint: function () { },
	/**
	 * read-only object with x and y properties of where the view is during animation
	 * @alias Titanium.UI.Switch.animatedCenterPoint
	 * @property {Object}
	 */
	animatedCenterPoint: {},
	/**
	 * Get the read-only object with x and y properties of where the view is during animation
	 * @alias Titanium.UI.Switch.getAnimatedCenterPoint
	 * @return {Object}
	 */
	getAnimatedCenterPoint: function () { return animatedCenterPoint; },
	/**
	 * Set the read-only object with x and y properties of where the view is during animation
	 * @param {Object} value New value to set.
	 * @alias Titanium.UI.Switch.setAnimatedCenterPoint
	 */
	setAnimatedCenterPoint: function () { },
	/**
	 * the background color of the view
	 * @alias Titanium.UI.Switch.backgroundColor
	 * @property {String}
	 */
	backgroundColor: '',
	/**
	 * Get the the background color of the view
	 * @alias Titanium.UI.Switch.getBackgroundColor
	 * @return {String}
	 */
	getBackgroundColor: function () { return backgroundColor; },
	/**
	 * Set the the background color of the view
	 * @param {String} value New value to set.
	 * @alias Titanium.UI.Switch.setBackgroundColor
	 */
	setBackgroundColor: function () { },
	/**
	 * the disabled background color of the view. (Android)
	 * @alias Titanium.UI.Switch.backgroundDisabledColor
	 * @property {String}
	 */
	backgroundDisabledColor: '',
	/**
	 * Get the the disabled background color of the view. (Android)
	 * @alias Titanium.UI.Switch.getBackgroundDisabledColor
	 * @return {String}
	 */
	getBackgroundDisabledColor: function () { return backgroundDisabledColor; },
	/**
	 * Set the the disabled background color of the view. (Android)
	 * @param {String} value New value to set.
	 * @alias Titanium.UI.Switch.setBackgroundDisabledColor
	 */
	setBackgroundDisabledColor: function () { },
	/**
	 * the disabled background image url of the view. (Android)
	 * @alias Titanium.UI.Switch.backgroundDisabledImage
	 * @property {String}
	 */
	backgroundDisabledImage: '',
	/**
	 * Get the the disabled background image url of the view. (Android)
	 * @alias Titanium.UI.Switch.getBackgroundDisabledImage
	 * @return {String}
	 */
	getBackgroundDisabledImage: function () { return backgroundDisabledImage; },
	/**
	 * Set the the disabled background image url of the view. (Android)
	 * @param {String} value New value to set.
	 * @alias Titanium.UI.Switch.setBackgroundDisabledImage
	 */
	setBackgroundDisabledImage: function () { },
	/**
	 * the focused background color of the view. focusable must be true for normal views. (Android)
	 * @alias Titanium.UI.Switch.backgroundFocusedColor
	 * @property {String}
	 */
	backgroundFocusedColor: '',
	/**
	 * Get the the focused background color of the view. focusable must be true for normal views. (Android)
	 * @alias Titanium.UI.Switch.getBackgroundFocusedColor
	 * @return {String}
	 */
	getBackgroundFocusedColor: function () { return backgroundFocusedColor; },
	/**
	 * Set the the focused background color of the view. focusable must be true for normal views. (Android)
	 * @param {String} value New value to set.
	 * @alias Titanium.UI.Switch.setBackgroundFocusedColor
	 */
	setBackgroundFocusedColor: function () { },
	/**
	 * the focused background image url of the view. focusable must be true for normal views. (Android)
	 * @alias Titanium.UI.Switch.backgroundFocusedImage
	 * @property {String}
	 */
	backgroundFocusedImage: '',
	/**
	 * Get the the focused background image url of the view. focusable must be true for normal views. (Android)
	 * @alias Titanium.UI.Switch.getBackgroundFocusedImage
	 * @return {String}
	 */
	getBackgroundFocusedImage: function () { return backgroundFocusedImage; },
	/**
	 * Set the the focused background image url of the view. focusable must be true for normal views. (Android)
	 * @param {String} value New value to set.
	 * @alias Titanium.UI.Switch.setBackgroundFocusedImage
	 */
	setBackgroundFocusedImage: function () { },
	/**
	 * a background gradient for the view with the properties: type,startPoint,endPoint,startRadius,endRadius,backfillStart,backfillEnd,colors.
	 * @alias Titanium.UI.Switch.backgroundGradient
	 * @property {Object}
	 */
	backgroundGradient: {},
	/**
	 * Get the a background gradient for the view with the properties: type,startPoint,endPoint,startRadius,endRadius,backfillStart,backfillEnd,colors.
	 * @alias Titanium.UI.Switch.getBackgroundGradient
	 * @return {Object}
	 */
	getBackgroundGradient: function () { return backgroundGradient; },
	/**
	 * Set the a background gradient for the view with the properties: type,startPoint,endPoint,startRadius,endRadius,backfillStart,backfillEnd,colors.
	 * @param {Object} value New value to set.
	 * @alias Titanium.UI.Switch.setBackgroundGradient
	 */
	setBackgroundGradient: function () { },
	/**
	 * the background image url of the view
	 * @alias Titanium.UI.Switch.backgroundImage
	 * @property {String}
	 */
	backgroundImage: '',
	/**
	 * Get the the background image url of the view
	 * @alias Titanium.UI.Switch.getBackgroundImage
	 * @return {String}
	 */
	getBackgroundImage: function () { return backgroundImage; },
	/**
	 * Set the the background image url of the view
	 * @param {String} value New value to set.
	 * @alias Titanium.UI.Switch.setBackgroundImage
	 */
	setBackgroundImage: function () { },
	/**
	 * End caps specify the portion of an image that should not be resized when an image is stretched. This technique is used to implement buttons and other resizable image-based interface elements. When a button with end caps is resized, the resizing occurs only in the middle of the button, in the region between the end caps. The end caps themselves keep their original size and appearance. This property specifies the size of the left end cap. The middle (stretchable) portion is assumed to be 1 pixel wide. The right end cap is therefore computed by adding the size of the left end cap and the middle portion together and then subtracting that value from the width of the image
	 * @alias Titanium.UI.Switch.backgroundLeftCap
	 * @property {Float}
	 */
	backgroundLeftCap: 0.0,
	/**
	 * Get the End caps specify the portion of an image that should not be resized when an image is stretched. This technique is used to implement buttons and other resizable image-based interface elements. When a button with end caps is resized, the resizing occurs only in the middle of the button, in the region between the end caps. The end caps themselves keep their original size and appearance. This property specifies the size of the left end cap. The middle (stretchable) portion is assumed to be 1 pixel wide. The right end cap is therefore computed by adding the size of the left end cap and the middle portion together and then subtracting that value from the width of the image
	 * @alias Titanium.UI.Switch.getBackgroundLeftCap
	 * @return {Float}
	 */
	getBackgroundLeftCap: function () { return backgroundLeftCap; },
	/**
	 * Set the End caps specify the portion of an image that should not be resized when an image is stretched. This technique is used to implement buttons and other resizable image-based interface elements. When a button with end caps is resized, the resizing occurs only in the middle of the button, in the region between the end caps. The end caps themselves keep their original size and appearance. This property specifies the size of the left end cap. The middle (stretchable) portion is assumed to be 1 pixel wide. The right end cap is therefore computed by adding the size of the left end cap and the middle portion together and then subtracting that value from the width of the image
	 * @param {Float} value New value to set.
	 * @alias Titanium.UI.Switch.setBackgroundLeftCap
	 */
	setBackgroundLeftCap: function () { },
	/**
	 * the selected background color of the view. focusable must be true for normal views. (Android)
	 * @alias Titanium.UI.Switch.backgroundSelectedColor
	 * @property {String}
	 */
	backgroundSelectedColor: '',
	/**
	 * Get the the selected background color of the view. focusable must be true for normal views. (Android)
	 * @alias Titanium.UI.Switch.getBackgroundSelectedColor
	 * @return {String}
	 */
	getBackgroundSelectedColor: function () { return backgroundSelectedColor; },
	/**
	 * Set the the selected background color of the view. focusable must be true for normal views. (Android)
	 * @param {String} value New value to set.
	 * @alias Titanium.UI.Switch.setBackgroundSelectedColor
	 */
	setBackgroundSelectedColor: function () { },
	/**
	 * the selected background image url of the view. focusable must be true for normal views. (Android)
	 * @alias Titanium.UI.Switch.backgroundSelectedImage
	 * @property {String}
	 */
	backgroundSelectedImage: '',
	/**
	 * Get the the selected background image url of the view. focusable must be true for normal views. (Android)
	 * @alias Titanium.UI.Switch.getBackgroundSelectedImage
	 * @return {String}
	 */
	getBackgroundSelectedImage: function () { return backgroundSelectedImage; },
	/**
	 * Set the the selected background image url of the view. focusable must be true for normal views. (Android)
	 * @param {String} value New value to set.
	 * @alias Titanium.UI.Switch.setBackgroundSelectedImage
	 */
	setBackgroundSelectedImage: function () { },
	/**
	 * End caps specify the portion of an image that should not be resized when an image is stretched. This technique is used to implement buttons and other resizable image-based interface elements. When a button with end caps is resized, the resizing occurs only in the middle of the button, in the region between the end caps. The end caps themselves keep their original size and appearance. This property specifies the size of the top end cap. The middle (stretchable) portion is assumed to be 1 pixel wide. The bottom end cap is therefore computed by adding the size of the top end cap and the middle portion together and then subtracting that value from the height of the image
	 * @alias Titanium.UI.Switch.backgroundTopCap
	 * @property {Float}
	 */
	backgroundTopCap: 0.0,
	/**
	 * Get the End caps specify the portion of an image that should not be resized when an image is stretched. This technique is used to implement buttons and other resizable image-based interface elements. When a button with end caps is resized, the resizing occurs only in the middle of the button, in the region between the end caps. The end caps themselves keep their original size and appearance. This property specifies the size of the top end cap. The middle (stretchable) portion is assumed to be 1 pixel wide. The bottom end cap is therefore computed by adding the size of the top end cap and the middle portion together and then subtracting that value from the height of the image
	 * @alias Titanium.UI.Switch.getBackgroundTopCap
	 * @return {Float}
	 */
	getBackgroundTopCap: function () { return backgroundTopCap; },
	/**
	 * Set the End caps specify the portion of an image that should not be resized when an image is stretched. This technique is used to implement buttons and other resizable image-based interface elements. When a button with end caps is resized, the resizing occurs only in the middle of the button, in the region between the end caps. The end caps themselves keep their original size and appearance. This property specifies the size of the top end cap. The middle (stretchable) portion is assumed to be 1 pixel wide. The bottom end cap is therefore computed by adding the size of the top end cap and the middle portion together and then subtracting that value from the height of the image
	 * @param {Float} value New value to set.
	 * @alias Titanium.UI.Switch.setBackgroundTopCap
	 */
	setBackgroundTopCap: function () { },
	/**
	 * the border color of the view
	 * @alias Titanium.UI.Switch.borderColor
	 * @property {String}
	 */
	borderColor: '',
	/**
	 * Get the the border color of the view
	 * @alias Titanium.UI.Switch.getBorderColor
	 * @return {String}
	 */
	getBorderColor: function () { return borderColor; },
	/**
	 * Set the the border color of the view
	 * @param {String} value New value to set.
	 * @alias Titanium.UI.Switch.setBorderColor
	 */
	setBorderColor: function () { },
	/**
	 * the border radius of the view
	 * @alias Titanium.UI.Switch.borderRadius
	 * @property {Float}
	 */
	borderRadius: 0.0,
	/**
	 * Get the the border radius of the view
	 * @alias Titanium.UI.Switch.getBorderRadius
	 * @return {Float}
	 */
	getBorderRadius: function () { return borderRadius; },
	/**
	 * Set the the border radius of the view
	 * @param {Float} value New value to set.
	 * @alias Titanium.UI.Switch.setBorderRadius
	 */
	setBorderRadius: function () { },
	/**
	 * the border width of the view
	 * @alias Titanium.UI.Switch.borderWidth
	 * @property {Float}
	 */
	borderWidth: 0.0,
	/**
	 * Get the the border width of the view
	 * @alias Titanium.UI.Switch.getBorderWidth
	 * @return {Float}
	 */
	getBorderWidth: function () { return borderWidth; },
	/**
	 * Set the the border width of the view
	 * @param {Float} value New value to set.
	 * @alias Titanium.UI.Switch.setBorderWidth
	 */
	setBorderWidth: function () { },
	/**
	 * property for the view bottom position. This position is relative to the view's parent. Can be either a float value or a dimension string ie 'auto' (default), '50%' (iPhone only).
	 * @alias Titanium.UI.Switch.bottom
	 * @property {Float,String}
	 */
	bottom: 0.0,
	/**
	 * Get the property for the view bottom position. This position is relative to the view's parent. Can be either a float value or a dimension string ie 'auto' (default), '50%' (iPhone only).
	 * @alias Titanium.UI.Switch.getBottom
	 * @return {Float,String}
	 */
	getBottom: function () { return bottom; },
	/**
	 * Set the property for the view bottom position. This position is relative to the view's parent. Can be either a float value or a dimension string ie 'auto' (default), '50%' (iPhone only).
	 * @param {Float,String} value New value to set.
	 * @alias Titanium.UI.Switch.setBottom
	 */
	setBottom: function () { },
	/**
	 * a dictionary with properties x and y to indicate the center of the views position relative to the parent view
	 * @alias Titanium.UI.Switch.center
	 * @property {Object}
	 */
	center: {},
	/**
	 * Get the a dictionary with properties x and y to indicate the center of the views position relative to the parent view
	 * @alias Titanium.UI.Switch.getCenter
	 * @return {Object}
	 */
	getCenter: function () { return center; },
	/**
	 * Set the a dictionary with properties x and y to indicate the center of the views position relative to the parent view
	 * @param {Object} value New value to set.
	 * @alias Titanium.UI.Switch.setCenter
	 */
	setCenter: function () { },
	/**
	 * boolean for the state of the switch
	 * @alias Titanium.UI.Switch.enabled
	 * @property {Boolean}
	 */
	enabled: false,
	/**
	 * Get the boolean for the state of the switch
	 * @alias Titanium.UI.Switch.getEnabled
	 * @return {Boolean}
	 */
	getEnabled: function () { return enabled; },
	/**
	 * Set the boolean for the state of the switch
	 * @param {Boolean} value New value to set.
	 * @alias Titanium.UI.Switch.setEnabled
	 */
	setEnabled: function () { },
	/**
	 * Set true if you want a view to be focusable when navigating with the trackball or D-Pad. Default: false. (Android Only)
	 * @alias Titanium.UI.Switch.focusable
	 * @property {Boolean}
	 */
	focusable: false,
	/**
	 * Get the Set true if you want a view to be focusable when navigating with the trackball or D-Pad. Default: false. (Android Only)
	 * @alias Titanium.UI.Switch.getFocusable
	 * @return {Boolean}
	 */
	getFocusable: function () { return focusable; },
	/**
	 * Set the Set true if you want a view to be focusable when navigating with the trackball or D-Pad. Default: false. (Android Only)
	 * @param {Boolean} value New value to set.
	 * @alias Titanium.UI.Switch.setFocusable
	 */
	setFocusable: function () { },
	/**
	 * the font family
	 * @alias Titanium.UI.Switch.font-family
	 * @property {String}
	 */
	font-family: '',
	/**
	 * Get the the font family
	 * @alias Titanium.UI.Switch.getFont-family
	 * @return {String}
	 */
	getFont-family: function () { return font-family; },
	/**
	 * Set the the font family
	 * @param {String} value New value to set.
	 * @alias Titanium.UI.Switch.setFont-family
	 */
	setFont-family: function () { },
	/**
	 * the font size
	 * @alias Titanium.UI.Switch.font-size
	 * @property {String}
	 */
	font-size: '',
	/**
	 * Get the the font size
	 * @alias Titanium.UI.Switch.getFont-size
	 * @return {String}
	 */
	getFont-size: function () { return font-size; },
	/**
	 * Set the the font size
	 * @param {String} value New value to set.
	 * @alias Titanium.UI.Switch.setFont-size
	 */
	setFont-size: function () { },
	/**
	 * the font style, either normal or italics
	 * @alias Titanium.UI.Switch.font-style
	 * @property {String}
	 */
	font-style: '',
	/**
	 * Get the the font style, either normal or italics
	 * @alias Titanium.UI.Switch.getFont-style
	 * @return {String}
	 */
	getFont-style: function () { return font-style; },
	/**
	 * Set the the font style, either normal or italics
	 * @param {String} value New value to set.
	 * @alias Titanium.UI.Switch.setFont-style
	 */
	setFont-style: function () { },
	/**
	 * the font weight, either normal or bold
	 * @alias Titanium.UI.Switch.font-weight
	 * @property {String}
	 */
	font-weight: '',
	/**
	 * Get the the font weight, either normal or bold
	 * @alias Titanium.UI.Switch.getFont-weight
	 * @return {String}
	 */
	getFont-weight: function () { return font-weight; },
	/**
	 * Set the the font weight, either normal or bold
	 * @param {String} value New value to set.
	 * @alias Titanium.UI.Switch.setFont-weight
	 */
	setFont-weight: function () { },
	/**
	 * property for the view height. Can be either a float value or a dimension string ie 'auto' (default), '50%' (iPhone only).
	 * @alias Titanium.UI.Switch.height
	 * @property {Float,String}
	 */
	height: 0.0,
	/**
	 * Get the property for the view height. Can be either a float value or a dimension string ie 'auto' (default), '50%' (iPhone only).
	 * @alias Titanium.UI.Switch.getHeight
	 * @return {Float,String}
	 */
	getHeight: function () { return height; },
	/**
	 * Set the property for the view height. Can be either a float value or a dimension string ie 'auto' (default), '50%' (iPhone only).
	 * @param {Float,String} value New value to set.
	 * @alias Titanium.UI.Switch.setHeight
	 */
	setHeight: function () { },
	/**
	 * property for the view left position. This position is relative to the view's parent. Can be either a float value or a dimension string ie 'auto' (default), '50%' (iPhone only).
	 * @alias Titanium.UI.Switch.left
	 * @property {Float,String}
	 */
	left: 0.0,
	/**
	 * Get the property for the view left position. This position is relative to the view's parent. Can be either a float value or a dimension string ie 'auto' (default), '50%' (iPhone only).
	 * @alias Titanium.UI.Switch.getLeft
	 * @return {Float,String}
	 */
	getLeft: function () { return left; },
	/**
	 * Set the property for the view left position. This position is relative to the view's parent. Can be either a float value or a dimension string ie 'auto' (default), '50%' (iPhone only).
	 * @param {Float,String} value New value to set.
	 * @alias Titanium.UI.Switch.setLeft
	 */
	setLeft: function () { },
	/**
	 * the opacity from 0.0-1.0
	 * @alias Titanium.UI.Switch.opacity
	 * @property {Float}
	 */
	opacity: 0.0,
	/**
	 * Get the the opacity from 0.0-1.0
	 * @alias Titanium.UI.Switch.getOpacity
	 * @return {Float}
	 */
	getOpacity: function () { return opacity; },
	/**
	 * Set the the opacity from 0.0-1.0
	 * @param {Float} value New value to set.
	 * @alias Titanium.UI.Switch.setOpacity
	 */
	setOpacity: function () { },
	/**
	 * property for the view right position. This position is relative to the view's parent. Can be either a float value or a dimension string ie 'auto' (default), '50%' (iPhone only).
	 * @alias Titanium.UI.Switch.right
	 * @property {Float,String}
	 */
	right: 0.0,
	/**
	 * Get the property for the view right position. This position is relative to the view's parent. Can be either a float value or a dimension string ie 'auto' (default), '50%' (iPhone only).
	 * @alias Titanium.UI.Switch.getRight
	 * @return {Float,String}
	 */
	getRight: function () { return right; },
	/**
	 * Set the property for the view right position. This position is relative to the view's parent. Can be either a float value or a dimension string ie 'auto' (default), '50%' (iPhone only).
	 * @param {Float,String} value New value to set.
	 * @alias Titanium.UI.Switch.setRight
	 */
	setRight: function () { },
	/**
	 * the size of the view as a dictionary of width and height properties
	 * @alias Titanium.UI.Switch.size
	 * @property {Object}
	 */
	size: {},
	/**
	 * Get the the size of the view as a dictionary of width and height properties
	 * @alias Titanium.UI.Switch.getSize
	 * @return {Object}
	 */
	getSize: function () { return size; },
	/**
	 * Set the the size of the view as a dictionary of width and height properties
	 * @param {Object} value New value to set.
	 * @alias Titanium.UI.Switch.setSize
	 */
	setSize: function () { },
	/**
	 * One of Titanium.UI.Android.SOFT_KEYBOARD_DEFAULT_ON_FOCUS, Titanium.UI.Android.SOFT_KEYBOARD_HIDE_ON_FOCUS, or Titanium.UI.Android.SOFT_KEYBOARD_SHOW_ON_FOCUS. (Android only)
	 * @alias Titanium.UI.Switch.softKeyboardOnFocus
	 * @property {Integer}
	 */
	softKeyboardOnFocus: 0,
	/**
	 * Get the One of Titanium.UI.Android.SOFT_KEYBOARD_DEFAULT_ON_FOCUS, Titanium.UI.Android.SOFT_KEYBOARD_HIDE_ON_FOCUS, or Titanium.UI.Android.SOFT_KEYBOARD_SHOW_ON_FOCUS. (Android only)
	 * @alias Titanium.UI.Switch.getSoftKeyboardOnFocus
	 * @return {Integer}
	 */
	getSoftKeyboardOnFocus: function () { return softKeyboardOnFocus; },
	/**
	 * Set the One of Titanium.UI.Android.SOFT_KEYBOARD_DEFAULT_ON_FOCUS, Titanium.UI.Android.SOFT_KEYBOARD_HIDE_ON_FOCUS, or Titanium.UI.Android.SOFT_KEYBOARD_SHOW_ON_FOCUS. (Android only)
	 * @param {Integer} value New value to set.
	 * @alias Titanium.UI.Switch.setSoftKeyboardOnFocus
	 */
	setSoftKeyboardOnFocus: function () { },
	/**
	 * one of Ti.UI.Android.SWITCH_STYLE_CHECKBOX or Ti.UI.Android.SWITCH_STYLE_TOGGLEBUTTON (default). (Android only)
	 * @alias Titanium.UI.Switch.style
	 * @property {Integer}
	 */
	style: 0,
	/**
	 * Get the one of Ti.UI.Android.SWITCH_STYLE_CHECKBOX or Ti.UI.Android.SWITCH_STYLE_TOGGLEBUTTON (default). (Android only)
	 * @alias Titanium.UI.Switch.getStyle
	 * @return {Integer}
	 */
	getStyle: function () { return style; },
	/**
	 * Set the one of Ti.UI.Android.SWITCH_STYLE_CHECKBOX or Ti.UI.Android.SWITCH_STYLE_TOGGLEBUTTON (default). (Android only)
	 * @param {Integer} value New value to set.
	 * @alias Titanium.UI.Switch.setStyle
	 */
	setStyle: function () { },
	/**
	 * text to display with checkbox. Used if style is Ti.UI.Android.SWITCH_STYLE_CHECKBOX (Android only)
	 * @alias Titanium.UI.Switch.title
	 * @property {String}
	 */
	title: '',
	/**
	 * Get the text to display with checkbox. Used if style is Ti.UI.Android.SWITCH_STYLE_CHECKBOX (Android only)
	 * @alias Titanium.UI.Switch.getTitle
	 * @return {String}
	 */
	getTitle: function () { return title; },
	/**
	 * Set the text to display with checkbox. Used if style is Ti.UI.Android.SWITCH_STYLE_CHECKBOX (Android only)
	 * @param {String} value New value to set.
	 * @alias Titanium.UI.Switch.setTitle
	 */
	setTitle: function () { },
	/**
	 * text to display when value is false. used if style is Ti.UI.Android.SWITCH_STYLE_TOGGLEBUTTON (Android only)
	 * @alias Titanium.UI.Switch.titleOff
	 * @property {String}
	 */
	titleOff: '',
	/**
	 * Get the text to display when value is false. used if style is Ti.UI.Android.SWITCH_STYLE_TOGGLEBUTTON (Android only)
	 * @alias Titanium.UI.Switch.getTitleOff
	 * @return {String}
	 */
	getTitleOff: function () { return titleOff; },
	/**
	 * Set the text to display when value is false. used if style is Ti.UI.Android.SWITCH_STYLE_TOGGLEBUTTON (Android only)
	 * @param {String} value New value to set.
	 * @alias Titanium.UI.Switch.setTitleOff
	 */
	setTitleOff: function () { },
	/**
	 * text to display when value is true. used if style is Ti.UI.Android.SWITCH_STYLE_TOGGLEBUTTON (Android only)
	 * @alias Titanium.UI.Switch.titleOn
	 * @property {String}
	 */
	titleOn: '',
	/**
	 * Get the text to display when value is true. used if style is Ti.UI.Android.SWITCH_STYLE_TOGGLEBUTTON (Android only)
	 * @alias Titanium.UI.Switch.getTitleOn
	 * @return {String}
	 */
	getTitleOn: function () { return titleOn; },
	/**
	 * Set the text to display when value is true. used if style is Ti.UI.Android.SWITCH_STYLE_TOGGLEBUTTON (Android only)
	 * @param {String} value New value to set.
	 * @alias Titanium.UI.Switch.setTitleOn
	 */
	setTitleOn: function () { },
	/**
	 * property for the view top position. This position is relative to the view's parent. Can be either a float value or a dimension string ie 'auto' (default), '50%' (iPhone only).
	 * @alias Titanium.UI.Switch.top
	 * @property {Float,String}
	 */
	top: 0.0,
	/**
	 * Get the property for the view top position. This position is relative to the view's parent. Can be either a float value or a dimension string ie 'auto' (default), '50%' (iPhone only).
	 * @alias Titanium.UI.Switch.getTop
	 * @return {Float,String}
	 */
	getTop: function () { return top; },
	/**
	 * Set the property for the view top position. This position is relative to the view's parent. Can be either a float value or a dimension string ie 'auto' (default), '50%' (iPhone only).
	 * @param {Float,String} value New value to set.
	 * @alias Titanium.UI.Switch.setTop
	 */
	setTop: function () { },
	/**
	 * a boolean indicating if the view should receive touch events (true, default) or forward them to peers (false)
	 * @alias Titanium.UI.Switch.touchEnabled
	 * @property {Boolean}
	 */
	touchEnabled: false,
	/**
	 * Get the a boolean indicating if the view should receive touch events (true, default) or forward them to peers (false)
	 * @alias Titanium.UI.Switch.getTouchEnabled
	 * @return {Boolean}
	 */
	getTouchEnabled: function () { return touchEnabled; },
	/**
	 * Set the a boolean indicating if the view should receive touch events (true, default) or forward them to peers (false)
	 * @param {Boolean} value New value to set.
	 * @alias Titanium.UI.Switch.setTouchEnabled
	 */
	setTouchEnabled: function () { },
	/**
	 * the transformation matrix to apply to the view
	 * @alias Titanium.UI.Switch.transform
	 * @property {Object}
	 */
	transform: {},
	/**
	 * Get the the transformation matrix to apply to the view
	 * @alias Titanium.UI.Switch.getTransform
	 * @return {Object}
	 */
	getTransform: function () { return transform; },
	/**
	 * Set the the transformation matrix to apply to the view
	 * @param {Object} value New value to set.
	 * @alias Titanium.UI.Switch.setTransform
	 */
	setTransform: function () { },
	/**
	 * boolean value of the switch where true is the switch is on and false the switch if off
	 * @alias Titanium.UI.Switch.value
	 * @property {Boolean}
	 */
	value: false,
	/**
	 * Get the boolean value of the switch where true is the switch is on and false the switch if off
	 * @alias Titanium.UI.Switch.getValue
	 * @return {Boolean}
	 */
	getValue: function () { return value; },
	/**
	 * Set the boolean value of the switch where true is the switch is on and false the switch if off
	 * @param {Boolean} value New value to set.
	 * @alias Titanium.UI.Switch.setValue
	 */
	setValue: function () { },
	/**
	 * a boolean of the visibility of the view
	 * @alias Titanium.UI.Switch.visible
	 * @property {Boolean}
	 */
	visible: false,
	/**
	 * Get the a boolean of the visibility of the view
	 * @alias Titanium.UI.Switch.getVisible
	 * @return {Boolean}
	 */
	getVisible: function () { return visible; },
	/**
	 * Set the a boolean of the visibility of the view
	 * @param {Boolean} value New value to set.
	 * @alias Titanium.UI.Switch.setVisible
	 */
	setVisible: function () { },
	/**
	 * property for the view width. Can be either a float value or a dimension string ie 'auto' (default), '50%' (iPhone only).
	 * @alias Titanium.UI.Switch.width
	 * @property {Float,String}
	 */
	width: 0.0,
	/**
	 * Get the property for the view width. Can be either a float value or a dimension string ie 'auto' (default), '50%' (iPhone only).
	 * @alias Titanium.UI.Switch.getWidth
	 * @return {Float,String}
	 */
	getWidth: function () { return width; },
	/**
	 * Set the property for the view width. Can be either a float value or a dimension string ie 'auto' (default), '50%' (iPhone only).
	 * @param {Float,String} value New value to set.
	 * @alias Titanium.UI.Switch.setWidth
	 */
	setWidth: function () { },
	/**
	 * the z index position relative to other sibling views
	 * @alias Titanium.UI.Switch.zIndex
	 * @property {Integer}
	 */
	zIndex: 0,
	/**
	 * Get the the z index position relative to other sibling views
	 * @alias Titanium.UI.Switch.getZIndex
	 * @return {Integer}
	 */
	getZIndex: function () { return zIndex; },
	/**
	 * Set the the z index position relative to other sibling views
	 * @param {Integer} value New value to set.
	 * @alias Titanium.UI.Switch.setZIndex
	 */
	setZIndex: function () { },
	/**
	 * add a child to the view hierarchy
	 * @param {Object} view the view to add to this views hiearchy
	 * @alias Titanium.UI.Switch.add
	 */
	add: function (view) { },
	/**
	 * add an event listener for the instance to receive view triggered events
	 * @param {String} name name of the event
	 * @param {Function} callback callback function to invoke when the event is fired
	 * @alias Titanium.UI.Switch.addEventListener
	 */
	addEventListener: function (name,callback) { },
	/**
	 * animate the view
	 * @param {Object} obj either a dictionary of animation properties or an Animation object
	 * @param {Function} callback function to be invoked upon completion of the animation
	 * @alias Titanium.UI.Switch.animate
	 */
	animate: function (obj,callback) { },
	/**
	 * fire a synthesized event to the views listener
	 * @param {String} name name of the event
	 * @param {Object} event event object
	 * @alias Titanium.UI.Switch.fireEvent
	 */
	fireEvent: function (name,event) { },
	/**
	 * hide the view
	 * @alias Titanium.UI.Switch.hide
	 */
	hide: function () { },
	/**
	 * remove a previously add view from the view hiearchy
	 * @param {Object} view the view to remove from this views hiearchy
	 * @alias Titanium.UI.Switch.remove
	 */
	remove: function (view) { },
	/**
	 * remove a previously added event listener
	 * @param {String} name name of the event
	 * @param {Function} callback callback function passed in addEventListener
	 * @alias Titanium.UI.Switch.removeEventListener
	 */
	removeEventListener: function (name,callback) { },
	/**
	 * make the view visible
	 * @alias Titanium.UI.Switch.show
	 */
	show: function () { },
	/**
	 * return a Blob image of the rendered view
	 * @param {Function} f function to be invoked upon completion. if non-null, this method will be performed asynchronously. if null, it will be performed immediately
	 * @alias Titanium.UI.Switch.toImage
	 * @return {Object}
	 */
	toImage: function (f) { return {}; },
};

/**
 * A TabGroup Tab instance.  Each Tab instance maintains a stack of tab windows. Only one window within in the Tab can be visible at a time.  When a window is closed, either by the user or by code, the window is removed from the stack, make the previous window visible. The root tab window cannot be removed. The Tab Group is created by the method Titanium.UI.createTab.
 * @since 0.8
 */
Titanium.UI.Tab = {
	/**
	 * a dictionary with properties x and y to indicate the anchor point value. anchor specifies the position by which animation should occur. center is 0.5, 0.5
	 * @alias Titanium.UI.Tab.anchorPoint
	 * @property {Object}
	 */
	anchorPoint: {},
	/**
	 * Get the a dictionary with properties x and y to indicate the anchor point value. anchor specifies the position by which animation should occur. center is 0.5, 0.5
	 * @alias Titanium.UI.Tab.getAnchorPoint
	 * @return {Object}
	 */
	getAnchorPoint: function () { return anchorPoint; },
	/**
	 * Set the a dictionary with properties x and y to indicate the anchor point value. anchor specifies the position by which animation should occur. center is 0.5, 0.5
	 * @param {Object} value New value to set.
	 * @alias Titanium.UI.Tab.setAnchorPoint
	 */
	setAnchorPoint: function () { },
	/**
	 * read-only object with x and y properties of where the view is during animation
	 * @alias Titanium.UI.Tab.animatedCenterPoint
	 * @property {Object}
	 */
	animatedCenterPoint: {},
	/**
	 * Get the read-only object with x and y properties of where the view is during animation
	 * @alias Titanium.UI.Tab.getAnimatedCenterPoint
	 * @return {Object}
	 */
	getAnimatedCenterPoint: function () { return animatedCenterPoint; },
	/**
	 * Set the read-only object with x and y properties of where the view is during animation
	 * @param {Object} value New value to set.
	 * @alias Titanium.UI.Tab.setAnimatedCenterPoint
	 */
	setAnimatedCenterPoint: function () { },
	/**
	 * the background color of the view
	 * @alias Titanium.UI.Tab.backgroundColor
	 * @property {String}
	 */
	backgroundColor: '',
	/**
	 * Get the the background color of the view
	 * @alias Titanium.UI.Tab.getBackgroundColor
	 * @return {String}
	 */
	getBackgroundColor: function () { return backgroundColor; },
	/**
	 * Set the the background color of the view
	 * @param {String} value New value to set.
	 * @alias Titanium.UI.Tab.setBackgroundColor
	 */
	setBackgroundColor: function () { },
	/**
	 * the disabled background color of the view. (Android)
	 * @alias Titanium.UI.Tab.backgroundDisabledColor
	 * @property {String}
	 */
	backgroundDisabledColor: '',
	/**
	 * Get the the disabled background color of the view. (Android)
	 * @alias Titanium.UI.Tab.getBackgroundDisabledColor
	 * @return {String}
	 */
	getBackgroundDisabledColor: function () { return backgroundDisabledColor; },
	/**
	 * Set the the disabled background color of the view. (Android)
	 * @param {String} value New value to set.
	 * @alias Titanium.UI.Tab.setBackgroundDisabledColor
	 */
	setBackgroundDisabledColor: function () { },
	/**
	 * the disabled background image url of the view. (Android)
	 * @alias Titanium.UI.Tab.backgroundDisabledImage
	 * @property {String}
	 */
	backgroundDisabledImage: '',
	/**
	 * Get the the disabled background image url of the view. (Android)
	 * @alias Titanium.UI.Tab.getBackgroundDisabledImage
	 * @return {String}
	 */
	getBackgroundDisabledImage: function () { return backgroundDisabledImage; },
	/**
	 * Set the the disabled background image url of the view. (Android)
	 * @param {String} value New value to set.
	 * @alias Titanium.UI.Tab.setBackgroundDisabledImage
	 */
	setBackgroundDisabledImage: function () { },
	/**
	 * the focused background color of the view. focusable must be true for normal views. (Android)
	 * @alias Titanium.UI.Tab.backgroundFocusedColor
	 * @property {String}
	 */
	backgroundFocusedColor: '',
	/**
	 * Get the the focused background color of the view. focusable must be true for normal views. (Android)
	 * @alias Titanium.UI.Tab.getBackgroundFocusedColor
	 * @return {String}
	 */
	getBackgroundFocusedColor: function () { return backgroundFocusedColor; },
	/**
	 * Set the the focused background color of the view. focusable must be true for normal views. (Android)
	 * @param {String} value New value to set.
	 * @alias Titanium.UI.Tab.setBackgroundFocusedColor
	 */
	setBackgroundFocusedColor: function () { },
	/**
	 * the focused background image url of the view. focusable must be true for normal views. (Android)
	 * @alias Titanium.UI.Tab.backgroundFocusedImage
	 * @property {String}
	 */
	backgroundFocusedImage: '',
	/**
	 * Get the the focused background image url of the view. focusable must be true for normal views. (Android)
	 * @alias Titanium.UI.Tab.getBackgroundFocusedImage
	 * @return {String}
	 */
	getBackgroundFocusedImage: function () { return backgroundFocusedImage; },
	/**
	 * Set the the focused background image url of the view. focusable must be true for normal views. (Android)
	 * @param {String} value New value to set.
	 * @alias Titanium.UI.Tab.setBackgroundFocusedImage
	 */
	setBackgroundFocusedImage: function () { },
	/**
	 * a background gradient for the view with the properties: type,startPoint,endPoint,startRadius,endRadius,backfillStart,backfillEnd,colors.
	 * @alias Titanium.UI.Tab.backgroundGradient
	 * @property {Object}
	 */
	backgroundGradient: {},
	/**
	 * Get the a background gradient for the view with the properties: type,startPoint,endPoint,startRadius,endRadius,backfillStart,backfillEnd,colors.
	 * @alias Titanium.UI.Tab.getBackgroundGradient
	 * @return {Object}
	 */
	getBackgroundGradient: function () { return backgroundGradient; },
	/**
	 * Set the a background gradient for the view with the properties: type,startPoint,endPoint,startRadius,endRadius,backfillStart,backfillEnd,colors.
	 * @param {Object} value New value to set.
	 * @alias Titanium.UI.Tab.setBackgroundGradient
	 */
	setBackgroundGradient: function () { },
	/**
	 * the background image url of the view
	 * @alias Titanium.UI.Tab.backgroundImage
	 * @property {String}
	 */
	backgroundImage: '',
	/**
	 * Get the the background image url of the view
	 * @alias Titanium.UI.Tab.getBackgroundImage
	 * @return {String}
	 */
	getBackgroundImage: function () { return backgroundImage; },
	/**
	 * Set the the background image url of the view
	 * @param {String} value New value to set.
	 * @alias Titanium.UI.Tab.setBackgroundImage
	 */
	setBackgroundImage: function () { },
	/**
	 * End caps specify the portion of an image that should not be resized when an image is stretched. This technique is used to implement buttons and other resizable image-based interface elements. When a button with end caps is resized, the resizing occurs only in the middle of the button, in the region between the end caps. The end caps themselves keep their original size and appearance. This property specifies the size of the left end cap. The middle (stretchable) portion is assumed to be 1 pixel wide. The right end cap is therefore computed by adding the size of the left end cap and the middle portion together and then subtracting that value from the width of the image
	 * @alias Titanium.UI.Tab.backgroundLeftCap
	 * @property {Float}
	 */
	backgroundLeftCap: 0.0,
	/**
	 * Get the End caps specify the portion of an image that should not be resized when an image is stretched. This technique is used to implement buttons and other resizable image-based interface elements. When a button with end caps is resized, the resizing occurs only in the middle of the button, in the region between the end caps. The end caps themselves keep their original size and appearance. This property specifies the size of the left end cap. The middle (stretchable) portion is assumed to be 1 pixel wide. The right end cap is therefore computed by adding the size of the left end cap and the middle portion together and then subtracting that value from the width of the image
	 * @alias Titanium.UI.Tab.getBackgroundLeftCap
	 * @return {Float}
	 */
	getBackgroundLeftCap: function () { return backgroundLeftCap; },
	/**
	 * Set the End caps specify the portion of an image that should not be resized when an image is stretched. This technique is used to implement buttons and other resizable image-based interface elements. When a button with end caps is resized, the resizing occurs only in the middle of the button, in the region between the end caps. The end caps themselves keep their original size and appearance. This property specifies the size of the left end cap. The middle (stretchable) portion is assumed to be 1 pixel wide. The right end cap is therefore computed by adding the size of the left end cap and the middle portion together and then subtracting that value from the width of the image
	 * @param {Float} value New value to set.
	 * @alias Titanium.UI.Tab.setBackgroundLeftCap
	 */
	setBackgroundLeftCap: function () { },
	/**
	 * the selected background color of the view. focusable must be true for normal views. (Android)
	 * @alias Titanium.UI.Tab.backgroundSelectedColor
	 * @property {String}
	 */
	backgroundSelectedColor: '',
	/**
	 * Get the the selected background color of the view. focusable must be true for normal views. (Android)
	 * @alias Titanium.UI.Tab.getBackgroundSelectedColor
	 * @return {String}
	 */
	getBackgroundSelectedColor: function () { return backgroundSelectedColor; },
	/**
	 * Set the the selected background color of the view. focusable must be true for normal views. (Android)
	 * @param {String} value New value to set.
	 * @alias Titanium.UI.Tab.setBackgroundSelectedColor
	 */
	setBackgroundSelectedColor: function () { },
	/**
	 * the selected background image url of the view. focusable must be true for normal views. (Android)
	 * @alias Titanium.UI.Tab.backgroundSelectedImage
	 * @property {String}
	 */
	backgroundSelectedImage: '',
	/**
	 * Get the the selected background image url of the view. focusable must be true for normal views. (Android)
	 * @alias Titanium.UI.Tab.getBackgroundSelectedImage
	 * @return {String}
	 */
	getBackgroundSelectedImage: function () { return backgroundSelectedImage; },
	/**
	 * Set the the selected background image url of the view. focusable must be true for normal views. (Android)
	 * @param {String} value New value to set.
	 * @alias Titanium.UI.Tab.setBackgroundSelectedImage
	 */
	setBackgroundSelectedImage: function () { },
	/**
	 * End caps specify the portion of an image that should not be resized when an image is stretched. This technique is used to implement buttons and other resizable image-based interface elements. When a button with end caps is resized, the resizing occurs only in the middle of the button, in the region between the end caps. The end caps themselves keep their original size and appearance. This property specifies the size of the top end cap. The middle (stretchable) portion is assumed to be 1 pixel wide. The bottom end cap is therefore computed by adding the size of the top end cap and the middle portion together and then subtracting that value from the height of the image
	 * @alias Titanium.UI.Tab.backgroundTopCap
	 * @property {Float}
	 */
	backgroundTopCap: 0.0,
	/**
	 * Get the End caps specify the portion of an image that should not be resized when an image is stretched. This technique is used to implement buttons and other resizable image-based interface elements. When a button with end caps is resized, the resizing occurs only in the middle of the button, in the region between the end caps. The end caps themselves keep their original size and appearance. This property specifies the size of the top end cap. The middle (stretchable) portion is assumed to be 1 pixel wide. The bottom end cap is therefore computed by adding the size of the top end cap and the middle portion together and then subtracting that value from the height of the image
	 * @alias Titanium.UI.Tab.getBackgroundTopCap
	 * @return {Float}
	 */
	getBackgroundTopCap: function () { return backgroundTopCap; },
	/**
	 * Set the End caps specify the portion of an image that should not be resized when an image is stretched. This technique is used to implement buttons and other resizable image-based interface elements. When a button with end caps is resized, the resizing occurs only in the middle of the button, in the region between the end caps. The end caps themselves keep their original size and appearance. This property specifies the size of the top end cap. The middle (stretchable) portion is assumed to be 1 pixel wide. The bottom end cap is therefore computed by adding the size of the top end cap and the middle portion together and then subtracting that value from the height of the image
	 * @param {Float} value New value to set.
	 * @alias Titanium.UI.Tab.setBackgroundTopCap
	 */
	setBackgroundTopCap: function () { },
	/**
	 * the badge value for the tab group for this tab. null indicates no badge is value
	 * @alias Titanium.UI.Tab.badge
	 * @property {String}
	 */
	badge: '',
	/**
	 * Get the the badge value for the tab group for this tab. null indicates no badge is value
	 * @alias Titanium.UI.Tab.getBadge
	 * @return {String}
	 */
	getBadge: function () { return badge; },
	/**
	 * Set the the badge value for the tab group for this tab. null indicates no badge is value
	 * @param {String} value New value to set.
	 * @alias Titanium.UI.Tab.setBadge
	 */
	setBadge: function () { },
	/**
	 * the border color of the view
	 * @alias Titanium.UI.Tab.borderColor
	 * @property {String}
	 */
	borderColor: '',
	/**
	 * Get the the border color of the view
	 * @alias Titanium.UI.Tab.getBorderColor
	 * @return {String}
	 */
	getBorderColor: function () { return borderColor; },
	/**
	 * Set the the border color of the view
	 * @param {String} value New value to set.
	 * @alias Titanium.UI.Tab.setBorderColor
	 */
	setBorderColor: function () { },
	/**
	 * the border radius of the view
	 * @alias Titanium.UI.Tab.borderRadius
	 * @property {Float}
	 */
	borderRadius: 0.0,
	/**
	 * Get the the border radius of the view
	 * @alias Titanium.UI.Tab.getBorderRadius
	 * @return {Float}
	 */
	getBorderRadius: function () { return borderRadius; },
	/**
	 * Set the the border radius of the view
	 * @param {Float} value New value to set.
	 * @alias Titanium.UI.Tab.setBorderRadius
	 */
	setBorderRadius: function () { },
	/**
	 * the border width of the view
	 * @alias Titanium.UI.Tab.borderWidth
	 * @property {Float}
	 */
	borderWidth: 0.0,
	/**
	 * Get the the border width of the view
	 * @alias Titanium.UI.Tab.getBorderWidth
	 * @return {Float}
	 */
	getBorderWidth: function () { return borderWidth; },
	/**
	 * Set the the border width of the view
	 * @param {Float} value New value to set.
	 * @alias Titanium.UI.Tab.setBorderWidth
	 */
	setBorderWidth: function () { },
	/**
	 * property for the view bottom position. This position is relative to the view's parent. Can be either a float value or a dimension string ie 'auto' (default), '50%' (iPhone only).
	 * @alias Titanium.UI.Tab.bottom
	 * @property {Float,String}
	 */
	bottom: 0.0,
	/**
	 * Get the property for the view bottom position. This position is relative to the view's parent. Can be either a float value or a dimension string ie 'auto' (default), '50%' (iPhone only).
	 * @alias Titanium.UI.Tab.getBottom
	 * @return {Float,String}
	 */
	getBottom: function () { return bottom; },
	/**
	 * Set the property for the view bottom position. This position is relative to the view's parent. Can be either a float value or a dimension string ie 'auto' (default), '50%' (iPhone only).
	 * @param {Float,String} value New value to set.
	 * @alias Titanium.UI.Tab.setBottom
	 */
	setBottom: function () { },
	/**
	 * a dictionary with properties x and y to indicate the center of the views position relative to the parent view
	 * @alias Titanium.UI.Tab.center
	 * @property {Object}
	 */
	center: {},
	/**
	 * Get the a dictionary with properties x and y to indicate the center of the views position relative to the parent view
	 * @alias Titanium.UI.Tab.getCenter
	 * @return {Object}
	 */
	getCenter: function () { return center; },
	/**
	 * Set the a dictionary with properties x and y to indicate the center of the views position relative to the parent view
	 * @param {Object} value New value to set.
	 * @alias Titanium.UI.Tab.setCenter
	 */
	setCenter: function () { },
	/**
	 * Set true if you want a view to be focusable when navigating with the trackball or D-Pad. Default: false. (Android Only)
	 * @alias Titanium.UI.Tab.focusable
	 * @property {Boolean}
	 */
	focusable: false,
	/**
	 * Get the Set true if you want a view to be focusable when navigating with the trackball or D-Pad. Default: false. (Android Only)
	 * @alias Titanium.UI.Tab.getFocusable
	 * @return {Boolean}
	 */
	getFocusable: function () { return focusable; },
	/**
	 * Set the Set true if you want a view to be focusable when navigating with the trackball or D-Pad. Default: false. (Android Only)
	 * @param {Boolean} value New value to set.
	 * @alias Titanium.UI.Tab.setFocusable
	 */
	setFocusable: function () { },
	/**
	 * the font family
	 * @alias Titanium.UI.Tab.font-family
	 * @property {String}
	 */
	font-family: '',
	/**
	 * Get the the font family
	 * @alias Titanium.UI.Tab.getFont-family
	 * @return {String}
	 */
	getFont-family: function () { return font-family; },
	/**
	 * Set the the font family
	 * @param {String} value New value to set.
	 * @alias Titanium.UI.Tab.setFont-family
	 */
	setFont-family: function () { },
	/**
	 * the font size
	 * @alias Titanium.UI.Tab.font-size
	 * @property {String}
	 */
	font-size: '',
	/**
	 * Get the the font size
	 * @alias Titanium.UI.Tab.getFont-size
	 * @return {String}
	 */
	getFont-size: function () { return font-size; },
	/**
	 * Set the the font size
	 * @param {String} value New value to set.
	 * @alias Titanium.UI.Tab.setFont-size
	 */
	setFont-size: function () { },
	/**
	 * the font style, either normal or italics
	 * @alias Titanium.UI.Tab.font-style
	 * @property {String}
	 */
	font-style: '',
	/**
	 * Get the the font style, either normal or italics
	 * @alias Titanium.UI.Tab.getFont-style
	 * @return {String}
	 */
	getFont-style: function () { return font-style; },
	/**
	 * Set the the font style, either normal or italics
	 * @param {String} value New value to set.
	 * @alias Titanium.UI.Tab.setFont-style
	 */
	setFont-style: function () { },
	/**
	 * the font weight, either normal or bold
	 * @alias Titanium.UI.Tab.font-weight
	 * @property {String}
	 */
	font-weight: '',
	/**
	 * Get the the font weight, either normal or bold
	 * @alias Titanium.UI.Tab.getFont-weight
	 * @return {String}
	 */
	getFont-weight: function () { return font-weight; },
	/**
	 * Set the the font weight, either normal or bold
	 * @param {String} value New value to set.
	 * @alias Titanium.UI.Tab.setFont-weight
	 */
	setFont-weight: function () { },
	/**
	 * property for the view height. Can be either a float value or a dimension string ie 'auto' (default), '50%' (iPhone only).
	 * @alias Titanium.UI.Tab.height
	 * @property {Float,String}
	 */
	height: 0.0,
	/**
	 * Get the property for the view height. Can be either a float value or a dimension string ie 'auto' (default), '50%' (iPhone only).
	 * @alias Titanium.UI.Tab.getHeight
	 * @return {Float,String}
	 */
	getHeight: function () { return height; },
	/**
	 * Set the property for the view height. Can be either a float value or a dimension string ie 'auto' (default), '50%' (iPhone only).
	 * @param {Float,String} value New value to set.
	 * @alias Titanium.UI.Tab.setHeight
	 */
	setHeight: function () { },
	/**
	 * the icon url for the tab group for this tab
	 * @alias Titanium.UI.Tab.icon
	 * @property {String}
	 */
	icon: '',
	/**
	 * Get the the icon url for the tab group for this tab
	 * @alias Titanium.UI.Tab.getIcon
	 * @return {String}
	 */
	getIcon: function () { return icon; },
	/**
	 * Set the the icon url for the tab group for this tab
	 * @param {String} value New value to set.
	 * @alias Titanium.UI.Tab.setIcon
	 */
	setIcon: function () { },
	/**
	 * property for the view left position. This position is relative to the view's parent. Can be either a float value or a dimension string ie 'auto' (default), '50%' (iPhone only).
	 * @alias Titanium.UI.Tab.left
	 * @property {Float,String}
	 */
	left: 0.0,
	/**
	 * Get the property for the view left position. This position is relative to the view's parent. Can be either a float value or a dimension string ie 'auto' (default), '50%' (iPhone only).
	 * @alias Titanium.UI.Tab.getLeft
	 * @return {Float,String}
	 */
	getLeft: function () { return left; },
	/**
	 * Set the property for the view left position. This position is relative to the view's parent. Can be either a float value or a dimension string ie 'auto' (default), '50%' (iPhone only).
	 * @param {Float,String} value New value to set.
	 * @alias Titanium.UI.Tab.setLeft
	 */
	setLeft: function () { },
	/**
	 * the opacity from 0.0-1.0
	 * @alias Titanium.UI.Tab.opacity
	 * @property {Float}
	 */
	opacity: 0.0,
	/**
	 * Get the the opacity from 0.0-1.0
	 * @alias Titanium.UI.Tab.getOpacity
	 * @return {Float}
	 */
	getOpacity: function () { return opacity; },
	/**
	 * Set the the opacity from 0.0-1.0
	 * @param {Float} value New value to set.
	 * @alias Titanium.UI.Tab.setOpacity
	 */
	setOpacity: function () { },
	/**
	 * property for the view right position. This position is relative to the view's parent. Can be either a float value or a dimension string ie 'auto' (default), '50%' (iPhone only).
	 * @alias Titanium.UI.Tab.right
	 * @property {Float,String}
	 */
	right: 0.0,
	/**
	 * Get the property for the view right position. This position is relative to the view's parent. Can be either a float value or a dimension string ie 'auto' (default), '50%' (iPhone only).
	 * @alias Titanium.UI.Tab.getRight
	 * @return {Float,String}
	 */
	getRight: function () { return right; },
	/**
	 * Set the property for the view right position. This position is relative to the view's parent. Can be either a float value or a dimension string ie 'auto' (default), '50%' (iPhone only).
	 * @param {Float,String} value New value to set.
	 * @alias Titanium.UI.Tab.setRight
	 */
	setRight: function () { },
	/**
	 * the size of the view as a dictionary of width and height properties
	 * @alias Titanium.UI.Tab.size
	 * @property {Object}
	 */
	size: {},
	/**
	 * Get the the size of the view as a dictionary of width and height properties
	 * @alias Titanium.UI.Tab.getSize
	 * @return {Object}
	 */
	getSize: function () { return size; },
	/**
	 * Set the the size of the view as a dictionary of width and height properties
	 * @param {Object} value New value to set.
	 * @alias Titanium.UI.Tab.setSize
	 */
	setSize: function () { },
	/**
	 * One of Titanium.UI.Android.SOFT_KEYBOARD_DEFAULT_ON_FOCUS, Titanium.UI.Android.SOFT_KEYBOARD_HIDE_ON_FOCUS, or Titanium.UI.Android.SOFT_KEYBOARD_SHOW_ON_FOCUS. (Android only)
	 * @alias Titanium.UI.Tab.softKeyboardOnFocus
	 * @property {Integer}
	 */
	softKeyboardOnFocus: 0,
	/**
	 * Get the One of Titanium.UI.Android.SOFT_KEYBOARD_DEFAULT_ON_FOCUS, Titanium.UI.Android.SOFT_KEYBOARD_HIDE_ON_FOCUS, or Titanium.UI.Android.SOFT_KEYBOARD_SHOW_ON_FOCUS. (Android only)
	 * @alias Titanium.UI.Tab.getSoftKeyboardOnFocus
	 * @return {Integer}
	 */
	getSoftKeyboardOnFocus: function () { return softKeyboardOnFocus; },
	/**
	 * Set the One of Titanium.UI.Android.SOFT_KEYBOARD_DEFAULT_ON_FOCUS, Titanium.UI.Android.SOFT_KEYBOARD_HIDE_ON_FOCUS, or Titanium.UI.Android.SOFT_KEYBOARD_SHOW_ON_FOCUS. (Android only)
	 * @param {Integer} value New value to set.
	 * @alias Titanium.UI.Tab.setSoftKeyboardOnFocus
	 */
	setSoftKeyboardOnFocus: function () { },
	/**
	 * the title for the tab group for this tab
	 * @alias Titanium.UI.Tab.title
	 * @property {String}
	 */
	title: '',
	/**
	 * Get the the title for the tab group for this tab
	 * @alias Titanium.UI.Tab.getTitle
	 * @return {String}
	 */
	getTitle: function () { return title; },
	/**
	 * Set the the title for the tab group for this tab
	 * @param {String} value New value to set.
	 * @alias Titanium.UI.Tab.setTitle
	 */
	setTitle: function () { },
	/**
	 * property for the view top position. This position is relative to the view's parent. Can be either a float value or a dimension string ie 'auto' (default), '50%' (iPhone only).
	 * @alias Titanium.UI.Tab.top
	 * @property {Float,String}
	 */
	top: 0.0,
	/**
	 * Get the property for the view top position. This position is relative to the view's parent. Can be either a float value or a dimension string ie 'auto' (default), '50%' (iPhone only).
	 * @alias Titanium.UI.Tab.getTop
	 * @return {Float,String}
	 */
	getTop: function () { return top; },
	/**
	 * Set the property for the view top position. This position is relative to the view's parent. Can be either a float value or a dimension string ie 'auto' (default), '50%' (iPhone only).
	 * @param {Float,String} value New value to set.
	 * @alias Titanium.UI.Tab.setTop
	 */
	setTop: function () { },
	/**
	 * a boolean indicating if the view should receive touch events (true, default) or forward them to peers (false)
	 * @alias Titanium.UI.Tab.touchEnabled
	 * @property {Boolean}
	 */
	touchEnabled: false,
	/**
	 * Get the a boolean indicating if the view should receive touch events (true, default) or forward them to peers (false)
	 * @alias Titanium.UI.Tab.getTouchEnabled
	 * @return {Boolean}
	 */
	getTouchEnabled: function () { return touchEnabled; },
	/**
	 * Set the a boolean indicating if the view should receive touch events (true, default) or forward them to peers (false)
	 * @param {Boolean} value New value to set.
	 * @alias Titanium.UI.Tab.setTouchEnabled
	 */
	setTouchEnabled: function () { },
	/**
	 * the transformation matrix to apply to the view
	 * @alias Titanium.UI.Tab.transform
	 * @property {Object}
	 */
	transform: {},
	/**
	 * Get the the transformation matrix to apply to the view
	 * @alias Titanium.UI.Tab.getTransform
	 * @return {Object}
	 */
	getTransform: function () { return transform; },
	/**
	 * Set the the transformation matrix to apply to the view
	 * @param {Object} value New value to set.
	 * @alias Titanium.UI.Tab.setTransform
	 */
	setTransform: function () { },
	/**
	 * a boolean of the visibility of the view
	 * @alias Titanium.UI.Tab.visible
	 * @property {Boolean}
	 */
	visible: false,
	/**
	 * Get the a boolean of the visibility of the view
	 * @alias Titanium.UI.Tab.getVisible
	 * @return {Boolean}
	 */
	getVisible: function () { return visible; },
	/**
	 * Set the a boolean of the visibility of the view
	 * @param {Boolean} value New value to set.
	 * @alias Titanium.UI.Tab.setVisible
	 */
	setVisible: function () { },
	/**
	 * property for the view width. Can be either a float value or a dimension string ie 'auto' (default), '50%' (iPhone only).
	 * @alias Titanium.UI.Tab.width
	 * @property {Float,String}
	 */
	width: 0.0,
	/**
	 * Get the property for the view width. Can be either a float value or a dimension string ie 'auto' (default), '50%' (iPhone only).
	 * @alias Titanium.UI.Tab.getWidth
	 * @return {Float,String}
	 */
	getWidth: function () { return width; },
	/**
	 * Set the property for the view width. Can be either a float value or a dimension string ie 'auto' (default), '50%' (iPhone only).
	 * @param {Float,String} value New value to set.
	 * @alias Titanium.UI.Tab.setWidth
	 */
	setWidth: function () { },
	/**
	 * the root level tab window.  all tabs must have at least one root level tab window.
	 * @alias Titanium.UI.Tab.window
	 * @property {Object}
	 */
	window: {},
	/**
	 * Get the the root level tab window.  all tabs must have at least one root level tab window.
	 * @alias Titanium.UI.Tab.getWindow
	 * @return {Object}
	 */
	getWindow: function () { return window; },
	/**
	 * Set the the root level tab window.  all tabs must have at least one root level tab window.
	 * @param {Object} value New value to set.
	 * @alias Titanium.UI.Tab.setWindow
	 */
	setWindow: function () { },
	/**
	 * the z index position relative to other sibling views
	 * @alias Titanium.UI.Tab.zIndex
	 * @property {Integer}
	 */
	zIndex: 0,
	/**
	 * Get the the z index position relative to other sibling views
	 * @alias Titanium.UI.Tab.getZIndex
	 * @return {Integer}
	 */
	getZIndex: function () { return zIndex; },
	/**
	 * Set the the z index position relative to other sibling views
	 * @param {Integer} value New value to set.
	 * @alias Titanium.UI.Tab.setZIndex
	 */
	setZIndex: function () { },
	/**
	 * add a child to the view hierarchy
	 * @param {Object} view the view to add to this views hiearchy
	 * @alias Titanium.UI.Tab.add
	 */
	add: function (view) { },
	/**
	 * add an event listener for the instance to receive view triggered events
	 * @param {String} name name of the event
	 * @param {Function} callback callback function to invoke when the event is fired
	 * @alias Titanium.UI.Tab.addEventListener
	 */
	addEventListener: function (name,callback) { },
	/**
	 * animate the view
	 * @param {Object} obj either a dictionary of animation properties or an Animation object
	 * @param {Function} callback function to be invoked upon completion of the animation
	 * @alias Titanium.UI.Tab.animate
	 */
	animate: function (obj,callback) { },
	/**
	 * fire a synthesized event to the views listener
	 * @param {String} name name of the event
	 * @param {Object} event event object
	 * @alias Titanium.UI.Tab.fireEvent
	 */
	fireEvent: function (name,event) { },
	/**
	 * hide the view
	 * @alias Titanium.UI.Tab.hide
	 */
	hide: function () { },
	/**
	 * remove a previously add view from the view hiearchy
	 * @param {Object} view the view to remove from this views hiearchy
	 * @alias Titanium.UI.Tab.remove
	 */
	remove: function (view) { },
	/**
	 * remove a previously added event listener
	 * @param {String} name name of the event
	 * @param {Function} callback callback function passed in addEventListener
	 * @alias Titanium.UI.Tab.removeEventListener
	 */
	removeEventListener: function (name,callback) { },
	/**
	 * make the view visible
	 * @alias Titanium.UI.Tab.show
	 */
	show: function () { },
	/**
	 * return a Blob image of the rendered view
	 * @param {Function} f function to be invoked upon completion. if non-null, this method will be performed asynchronously. if null, it will be performed immediately
	 * @alias Titanium.UI.Tab.toImage
	 * @return {Object}
	 */
	toImage: function (f) { return {}; },
};

/**
 * The Tab Group allows you to manage a tabbed UI of one or more windows. The Tab Group is created by the method Titanium.UI.createTabGroup.
 * @since 0.9
 */
Titanium.UI.TabGroup = {
	/**
	 * the active tab
	 * @alias Titanium.UI.TabGroup.activeTab
	 * @property {Object}
	 */
	activeTab: {},
	/**
	 * Get the the active tab
	 * @alias Titanium.UI.TabGroup.getActiveTab
	 * @return {Object}
	 */
	getActiveTab: function () { return activeTab; },
	/**
	 * Set the the active tab
	 * @param {Object} value New value to set.
	 * @alias Titanium.UI.TabGroup.setActiveTab
	 */
	setActiveTab: function () { },
	/**
	 * whether or not the user can configure the tab group via the 'More' tab's edit functionality.  iPhone/iPad only
	 * @alias Titanium.UI.TabGroup.allowUserCustomization
	 * @property {Boolean}
	 */
	allowUserCustomization: false,
	/**
	 * Get the whether or not the user can configure the tab group via the 'More' tab's edit functionality.  iPhone/iPad only
	 * @alias Titanium.UI.TabGroup.getAllowUserCustomization
	 * @return {Boolean}
	 */
	getAllowUserCustomization: function () { return allowUserCustomization; },
	/**
	 * Set the whether or not the user can configure the tab group via the 'More' tab's edit functionality.  iPhone/iPad only
	 * @param {Boolean} value New value to set.
	 * @alias Titanium.UI.TabGroup.setAllowUserCustomization
	 */
	setAllowUserCustomization: function () { },
	/**
	 * a dictionary with properties x and y to indicate the anchor point value. anchor specifies the position by which animation should occur. center is 0.5, 0.5
	 * @alias Titanium.UI.TabGroup.anchorPoint
	 * @property {Object}
	 */
	anchorPoint: {},
	/**
	 * Get the a dictionary with properties x and y to indicate the anchor point value. anchor specifies the position by which animation should occur. center is 0.5, 0.5
	 * @alias Titanium.UI.TabGroup.getAnchorPoint
	 * @return {Object}
	 */
	getAnchorPoint: function () { return anchorPoint; },
	/**
	 * Set the a dictionary with properties x and y to indicate the anchor point value. anchor specifies the position by which animation should occur. center is 0.5, 0.5
	 * @param {Object} value New value to set.
	 * @alias Titanium.UI.TabGroup.setAnchorPoint
	 */
	setAnchorPoint: function () { },
	/**
	 * read-only object with x and y properties of where the view is during animation
	 * @alias Titanium.UI.TabGroup.animatedCenterPoint
	 * @property {Object}
	 */
	animatedCenterPoint: {},
	/**
	 * Get the read-only object with x and y properties of where the view is during animation
	 * @alias Titanium.UI.TabGroup.getAnimatedCenterPoint
	 * @return {Object}
	 */
	getAnimatedCenterPoint: function () { return animatedCenterPoint; },
	/**
	 * Set the read-only object with x and y properties of where the view is during animation
	 * @param {Object} value New value to set.
	 * @alias Titanium.UI.TabGroup.setAnimatedCenterPoint
	 */
	setAnimatedCenterPoint: function () { },
	/**
	 * the background color of the view
	 * @alias Titanium.UI.TabGroup.backgroundColor
	 * @property {String}
	 */
	backgroundColor: '',
	/**
	 * Get the the background color of the view
	 * @alias Titanium.UI.TabGroup.getBackgroundColor
	 * @return {String}
	 */
	getBackgroundColor: function () { return backgroundColor; },
	/**
	 * Set the the background color of the view
	 * @param {String} value New value to set.
	 * @alias Titanium.UI.TabGroup.setBackgroundColor
	 */
	setBackgroundColor: function () { },
	/**
	 * the disabled background color of the view. (Android)
	 * @alias Titanium.UI.TabGroup.backgroundDisabledColor
	 * @property {String}
	 */
	backgroundDisabledColor: '',
	/**
	 * Get the the disabled background color of the view. (Android)
	 * @alias Titanium.UI.TabGroup.getBackgroundDisabledColor
	 * @return {String}
	 */
	getBackgroundDisabledColor: function () { return backgroundDisabledColor; },
	/**
	 * Set the the disabled background color of the view. (Android)
	 * @param {String} value New value to set.
	 * @alias Titanium.UI.TabGroup.setBackgroundDisabledColor
	 */
	setBackgroundDisabledColor: function () { },
	/**
	 * the disabled background image url of the view. (Android)
	 * @alias Titanium.UI.TabGroup.backgroundDisabledImage
	 * @property {String}
	 */
	backgroundDisabledImage: '',
	/**
	 * Get the the disabled background image url of the view. (Android)
	 * @alias Titanium.UI.TabGroup.getBackgroundDisabledImage
	 * @return {String}
	 */
	getBackgroundDisabledImage: function () { return backgroundDisabledImage; },
	/**
	 * Set the the disabled background image url of the view. (Android)
	 * @param {String} value New value to set.
	 * @alias Titanium.UI.TabGroup.setBackgroundDisabledImage
	 */
	setBackgroundDisabledImage: function () { },
	/**
	 * the focused background color of the view. focusable must be true for normal views. (Android)
	 * @alias Titanium.UI.TabGroup.backgroundFocusedColor
	 * @property {String}
	 */
	backgroundFocusedColor: '',
	/**
	 * Get the the focused background color of the view. focusable must be true for normal views. (Android)
	 * @alias Titanium.UI.TabGroup.getBackgroundFocusedColor
	 * @return {String}
	 */
	getBackgroundFocusedColor: function () { return backgroundFocusedColor; },
	/**
	 * Set the the focused background color of the view. focusable must be true for normal views. (Android)
	 * @param {String} value New value to set.
	 * @alias Titanium.UI.TabGroup.setBackgroundFocusedColor
	 */
	setBackgroundFocusedColor: function () { },
	/**
	 * the focused background image url of the view. focusable must be true for normal views. (Android)
	 * @alias Titanium.UI.TabGroup.backgroundFocusedImage
	 * @property {String}
	 */
	backgroundFocusedImage: '',
	/**
	 * Get the the focused background image url of the view. focusable must be true for normal views. (Android)
	 * @alias Titanium.UI.TabGroup.getBackgroundFocusedImage
	 * @return {String}
	 */
	getBackgroundFocusedImage: function () { return backgroundFocusedImage; },
	/**
	 * Set the the focused background image url of the view. focusable must be true for normal views. (Android)
	 * @param {String} value New value to set.
	 * @alias Titanium.UI.TabGroup.setBackgroundFocusedImage
	 */
	setBackgroundFocusedImage: function () { },
	/**
	 * a background gradient for the view with the properties: type,startPoint,endPoint,startRadius,endRadius,backfillStart,backfillEnd,colors.
	 * @alias Titanium.UI.TabGroup.backgroundGradient
	 * @property {Object}
	 */
	backgroundGradient: {},
	/**
	 * Get the a background gradient for the view with the properties: type,startPoint,endPoint,startRadius,endRadius,backfillStart,backfillEnd,colors.
	 * @alias Titanium.UI.TabGroup.getBackgroundGradient
	 * @return {Object}
	 */
	getBackgroundGradient: function () { return backgroundGradient; },
	/**
	 * Set the a background gradient for the view with the properties: type,startPoint,endPoint,startRadius,endRadius,backfillStart,backfillEnd,colors.
	 * @param {Object} value New value to set.
	 * @alias Titanium.UI.TabGroup.setBackgroundGradient
	 */
	setBackgroundGradient: function () { },
	/**
	 * the background image url of the view
	 * @alias Titanium.UI.TabGroup.backgroundImage
	 * @property {String}
	 */
	backgroundImage: '',
	/**
	 * Get the the background image url of the view
	 * @alias Titanium.UI.TabGroup.getBackgroundImage
	 * @return {String}
	 */
	getBackgroundImage: function () { return backgroundImage; },
	/**
	 * Set the the background image url of the view
	 * @param {String} value New value to set.
	 * @alias Titanium.UI.TabGroup.setBackgroundImage
	 */
	setBackgroundImage: function () { },
	/**
	 * End caps specify the portion of an image that should not be resized when an image is stretched. This technique is used to implement buttons and other resizable image-based interface elements. When a button with end caps is resized, the resizing occurs only in the middle of the button, in the region between the end caps. The end caps themselves keep their original size and appearance. This property specifies the size of the left end cap. The middle (stretchable) portion is assumed to be 1 pixel wide. The right end cap is therefore computed by adding the size of the left end cap and the middle portion together and then subtracting that value from the width of the image
	 * @alias Titanium.UI.TabGroup.backgroundLeftCap
	 * @property {Float}
	 */
	backgroundLeftCap: 0.0,
	/**
	 * Get the End caps specify the portion of an image that should not be resized when an image is stretched. This technique is used to implement buttons and other resizable image-based interface elements. When a button with end caps is resized, the resizing occurs only in the middle of the button, in the region between the end caps. The end caps themselves keep their original size and appearance. This property specifies the size of the left end cap. The middle (stretchable) portion is assumed to be 1 pixel wide. The right end cap is therefore computed by adding the size of the left end cap and the middle portion together and then subtracting that value from the width of the image
	 * @alias Titanium.UI.TabGroup.getBackgroundLeftCap
	 * @return {Float}
	 */
	getBackgroundLeftCap: function () { return backgroundLeftCap; },
	/**
	 * Set the End caps specify the portion of an image that should not be resized when an image is stretched. This technique is used to implement buttons and other resizable image-based interface elements. When a button with end caps is resized, the resizing occurs only in the middle of the button, in the region between the end caps. The end caps themselves keep their original size and appearance. This property specifies the size of the left end cap. The middle (stretchable) portion is assumed to be 1 pixel wide. The right end cap is therefore computed by adding the size of the left end cap and the middle portion together and then subtracting that value from the width of the image
	 * @param {Float} value New value to set.
	 * @alias Titanium.UI.TabGroup.setBackgroundLeftCap
	 */
	setBackgroundLeftCap: function () { },
	/**
	 * the selected background color of the view. focusable must be true for normal views. (Android)
	 * @alias Titanium.UI.TabGroup.backgroundSelectedColor
	 * @property {String}
	 */
	backgroundSelectedColor: '',
	/**
	 * Get the the selected background color of the view. focusable must be true for normal views. (Android)
	 * @alias Titanium.UI.TabGroup.getBackgroundSelectedColor
	 * @return {String}
	 */
	getBackgroundSelectedColor: function () { return backgroundSelectedColor; },
	/**
	 * Set the the selected background color of the view. focusable must be true for normal views. (Android)
	 * @param {String} value New value to set.
	 * @alias Titanium.UI.TabGroup.setBackgroundSelectedColor
	 */
	setBackgroundSelectedColor: function () { },
	/**
	 * the selected background image url of the view. focusable must be true for normal views. (Android)
	 * @alias Titanium.UI.TabGroup.backgroundSelectedImage
	 * @property {String}
	 */
	backgroundSelectedImage: '',
	/**
	 * Get the the selected background image url of the view. focusable must be true for normal views. (Android)
	 * @alias Titanium.UI.TabGroup.getBackgroundSelectedImage
	 * @return {String}
	 */
	getBackgroundSelectedImage: function () { return backgroundSelectedImage; },
	/**
	 * Set the the selected background image url of the view. focusable must be true for normal views. (Android)
	 * @param {String} value New value to set.
	 * @alias Titanium.UI.TabGroup.setBackgroundSelectedImage
	 */
	setBackgroundSelectedImage: function () { },
	/**
	 * End caps specify the portion of an image that should not be resized when an image is stretched. This technique is used to implement buttons and other resizable image-based interface elements. When a button with end caps is resized, the resizing occurs only in the middle of the button, in the region between the end caps. The end caps themselves keep their original size and appearance. This property specifies the size of the top end cap. The middle (stretchable) portion is assumed to be 1 pixel wide. The bottom end cap is therefore computed by adding the size of the top end cap and the middle portion together and then subtracting that value from the height of the image
	 * @alias Titanium.UI.TabGroup.backgroundTopCap
	 * @property {Float}
	 */
	backgroundTopCap: 0.0,
	/**
	 * Get the End caps specify the portion of an image that should not be resized when an image is stretched. This technique is used to implement buttons and other resizable image-based interface elements. When a button with end caps is resized, the resizing occurs only in the middle of the button, in the region between the end caps. The end caps themselves keep their original size and appearance. This property specifies the size of the top end cap. The middle (stretchable) portion is assumed to be 1 pixel wide. The bottom end cap is therefore computed by adding the size of the top end cap and the middle portion together and then subtracting that value from the height of the image
	 * @alias Titanium.UI.TabGroup.getBackgroundTopCap
	 * @return {Float}
	 */
	getBackgroundTopCap: function () { return backgroundTopCap; },
	/**
	 * Set the End caps specify the portion of an image that should not be resized when an image is stretched. This technique is used to implement buttons and other resizable image-based interface elements. When a button with end caps is resized, the resizing occurs only in the middle of the button, in the region between the end caps. The end caps themselves keep their original size and appearance. This property specifies the size of the top end cap. The middle (stretchable) portion is assumed to be 1 pixel wide. The bottom end cap is therefore computed by adding the size of the top end cap and the middle portion together and then subtracting that value from the height of the image
	 * @param {Float} value New value to set.
	 * @alias Titanium.UI.TabGroup.setBackgroundTopCap
	 */
	setBackgroundTopCap: function () { },
	/**
	 * the default navigation bar color (typically for the "More" tab)
	 * @alias Titanium.UI.TabGroup.barColor
	 * @property {String}
	 */
	barColor: '',
	/**
	 * Get the the default navigation bar color (typically for the "More" tab)
	 * @alias Titanium.UI.TabGroup.getBarColor
	 * @return {String}
	 */
	getBarColor: function () { return barColor; },
	/**
	 * Set the the default navigation bar color (typically for the "More" tab)
	 * @param {String} value New value to set.
	 * @alias Titanium.UI.TabGroup.setBarColor
	 */
	setBarColor: function () { },
	/**
	 * the border color of the view
	 * @alias Titanium.UI.TabGroup.borderColor
	 * @property {String}
	 */
	borderColor: '',
	/**
	 * Get the the border color of the view
	 * @alias Titanium.UI.TabGroup.getBorderColor
	 * @return {String}
	 */
	getBorderColor: function () { return borderColor; },
	/**
	 * Set the the border color of the view
	 * @param {String} value New value to set.
	 * @alias Titanium.UI.TabGroup.setBorderColor
	 */
	setBorderColor: function () { },
	/**
	 * the border radius of the view
	 * @alias Titanium.UI.TabGroup.borderRadius
	 * @property {Float}
	 */
	borderRadius: 0.0,
	/**
	 * Get the the border radius of the view
	 * @alias Titanium.UI.TabGroup.getBorderRadius
	 * @return {Float}
	 */
	getBorderRadius: function () { return borderRadius; },
	/**
	 * Set the the border radius of the view
	 * @param {Float} value New value to set.
	 * @alias Titanium.UI.TabGroup.setBorderRadius
	 */
	setBorderRadius: function () { },
	/**
	 * the border width of the view
	 * @alias Titanium.UI.TabGroup.borderWidth
	 * @property {Float}
	 */
	borderWidth: 0.0,
	/**
	 * Get the the border width of the view
	 * @alias Titanium.UI.TabGroup.getBorderWidth
	 * @return {Float}
	 */
	getBorderWidth: function () { return borderWidth; },
	/**
	 * Set the the border width of the view
	 * @param {Float} value New value to set.
	 * @alias Titanium.UI.TabGroup.setBorderWidth
	 */
	setBorderWidth: function () { },
	/**
	 * property for the view bottom position. This position is relative to the view's parent. Can be either a float value or a dimension string ie 'auto' (default), '50%' (iPhone only).
	 * @alias Titanium.UI.TabGroup.bottom
	 * @property {Float,String}
	 */
	bottom: 0.0,
	/**
	 * Get the property for the view bottom position. This position is relative to the view's parent. Can be either a float value or a dimension string ie 'auto' (default), '50%' (iPhone only).
	 * @alias Titanium.UI.TabGroup.getBottom
	 * @return {Float,String}
	 */
	getBottom: function () { return bottom; },
	/**
	 * Set the property for the view bottom position. This position is relative to the view's parent. Can be either a float value or a dimension string ie 'auto' (default), '50%' (iPhone only).
	 * @param {Float,String} value New value to set.
	 * @alias Titanium.UI.TabGroup.setBottom
	 */
	setBottom: function () { },
	/**
	 * a dictionary with properties x and y to indicate the center of the views position relative to the parent view
	 * @alias Titanium.UI.TabGroup.center
	 * @property {Object}
	 */
	center: {},
	/**
	 * Get the a dictionary with properties x and y to indicate the center of the views position relative to the parent view
	 * @alias Titanium.UI.TabGroup.getCenter
	 * @return {Object}
	 */
	getCenter: function () { return center; },
	/**
	 * Set the a dictionary with properties x and y to indicate the center of the views position relative to the parent view
	 * @param {Object} value New value to set.
	 * @alias Titanium.UI.TabGroup.setCenter
	 */
	setCenter: function () { },
	/**
	 * the title for the 'More' tab edit button.  iPhone/iPad only
	 * @alias Titanium.UI.TabGroup.editButtonTitle
	 * @property {String}
	 */
	editButtonTitle: '',
	/**
	 * Get the the title for the 'More' tab edit button.  iPhone/iPad only
	 * @alias Titanium.UI.TabGroup.getEditButtonTitle
	 * @return {String}
	 */
	getEditButtonTitle: function () { return editButtonTitle; },
	/**
	 * Set the the title for the 'More' tab edit button.  iPhone/iPad only
	 * @param {String} value New value to set.
	 * @alias Titanium.UI.TabGroup.setEditButtonTitle
	 */
	setEditButtonTitle: function () { },
	/**
	 * Set true if you want a view to be focusable when navigating with the trackball or D-Pad. Default: false. (Android Only)
	 * @alias Titanium.UI.TabGroup.focusable
	 * @property {Boolean}
	 */
	focusable: false,
	/**
	 * Get the Set true if you want a view to be focusable when navigating with the trackball or D-Pad. Default: false. (Android Only)
	 * @alias Titanium.UI.TabGroup.getFocusable
	 * @return {Boolean}
	 */
	getFocusable: function () { return focusable; },
	/**
	 * Set the Set true if you want a view to be focusable when navigating with the trackball or D-Pad. Default: false. (Android Only)
	 * @param {Boolean} value New value to set.
	 * @alias Titanium.UI.TabGroup.setFocusable
	 */
	setFocusable: function () { },
	/**
	 * the font family
	 * @alias Titanium.UI.TabGroup.font-family
	 * @property {String}
	 */
	font-family: '',
	/**
	 * Get the the font family
	 * @alias Titanium.UI.TabGroup.getFont-family
	 * @return {String}
	 */
	getFont-family: function () { return font-family; },
	/**
	 * Set the the font family
	 * @param {String} value New value to set.
	 * @alias Titanium.UI.TabGroup.setFont-family
	 */
	setFont-family: function () { },
	/**
	 * the font size
	 * @alias Titanium.UI.TabGroup.font-size
	 * @property {String}
	 */
	font-size: '',
	/**
	 * Get the the font size
	 * @alias Titanium.UI.TabGroup.getFont-size
	 * @return {String}
	 */
	getFont-size: function () { return font-size; },
	/**
	 * Set the the font size
	 * @param {String} value New value to set.
	 * @alias Titanium.UI.TabGroup.setFont-size
	 */
	setFont-size: function () { },
	/**
	 * the font style, either normal or italics
	 * @alias Titanium.UI.TabGroup.font-style
	 * @property {String}
	 */
	font-style: '',
	/**
	 * Get the the font style, either normal or italics
	 * @alias Titanium.UI.TabGroup.getFont-style
	 * @return {String}
	 */
	getFont-style: function () { return font-style; },
	/**
	 * Set the the font style, either normal or italics
	 * @param {String} value New value to set.
	 * @alias Titanium.UI.TabGroup.setFont-style
	 */
	setFont-style: function () { },
	/**
	 * the font weight, either normal or bold
	 * @alias Titanium.UI.TabGroup.font-weight
	 * @property {String}
	 */
	font-weight: '',
	/**
	 * Get the the font weight, either normal or bold
	 * @alias Titanium.UI.TabGroup.getFont-weight
	 * @return {String}
	 */
	getFont-weight: function () { return font-weight; },
	/**
	 * Set the the font weight, either normal or bold
	 * @param {String} value New value to set.
	 * @alias Titanium.UI.TabGroup.setFont-weight
	 */
	setFont-weight: function () { },
	/**
	 * property for the view height. Can be either a float value or a dimension string ie 'auto' (default), '50%' (iPhone only).
	 * @alias Titanium.UI.TabGroup.height
	 * @property {Float,String}
	 */
	height: 0.0,
	/**
	 * Get the property for the view height. Can be either a float value or a dimension string ie 'auto' (default), '50%' (iPhone only).
	 * @alias Titanium.UI.TabGroup.getHeight
	 * @return {Float,String}
	 */
	getHeight: function () { return height; },
	/**
	 * Set the property for the view height. Can be either a float value or a dimension string ie 'auto' (default), '50%' (iPhone only).
	 * @param {Float,String} value New value to set.
	 * @alias Titanium.UI.TabGroup.setHeight
	 */
	setHeight: function () { },
	/**
	 * property for the view left position. This position is relative to the view's parent. Can be either a float value or a dimension string ie 'auto' (default), '50%' (iPhone only).
	 * @alias Titanium.UI.TabGroup.left
	 * @property {Float,String}
	 */
	left: 0.0,
	/**
	 * Get the property for the view left position. This position is relative to the view's parent. Can be either a float value or a dimension string ie 'auto' (default), '50%' (iPhone only).
	 * @alias Titanium.UI.TabGroup.getLeft
	 * @return {Float,String}
	 */
	getLeft: function () { return left; },
	/**
	 * Set the property for the view left position. This position is relative to the view's parent. Can be either a float value or a dimension string ie 'auto' (default), '50%' (iPhone only).
	 * @param {Float,String} value New value to set.
	 * @alias Titanium.UI.TabGroup.setLeft
	 */
	setLeft: function () { },
	/**
	 * the opacity from 0.0-1.0
	 * @alias Titanium.UI.TabGroup.opacity
	 * @property {Float}
	 */
	opacity: 0.0,
	/**
	 * Get the the opacity from 0.0-1.0
	 * @alias Titanium.UI.TabGroup.getOpacity
	 * @return {Float}
	 */
	getOpacity: function () { return opacity; },
	/**
	 * Set the the opacity from 0.0-1.0
	 * @param {Float} value New value to set.
	 * @alias Titanium.UI.TabGroup.setOpacity
	 */
	setOpacity: function () { },
	/**
	 * property for the view right position. This position is relative to the view's parent. Can be either a float value or a dimension string ie 'auto' (default), '50%' (iPhone only).
	 * @alias Titanium.UI.TabGroup.right
	 * @property {Float,String}
	 */
	right: 0.0,
	/**
	 * Get the property for the view right position. This position is relative to the view's parent. Can be either a float value or a dimension string ie 'auto' (default), '50%' (iPhone only).
	 * @alias Titanium.UI.TabGroup.getRight
	 * @return {Float,String}
	 */
	getRight: function () { return right; },
	/**
	 * Set the property for the view right position. This position is relative to the view's parent. Can be either a float value or a dimension string ie 'auto' (default), '50%' (iPhone only).
	 * @param {Float,String} value New value to set.
	 * @alias Titanium.UI.TabGroup.setRight
	 */
	setRight: function () { },
	/**
	 * the size of the view as a dictionary of width and height properties
	 * @alias Titanium.UI.TabGroup.size
	 * @property {Object}
	 */
	size: {},
	/**
	 * Get the the size of the view as a dictionary of width and height properties
	 * @alias Titanium.UI.TabGroup.getSize
	 * @return {Object}
	 */
	getSize: function () { return size; },
	/**
	 * Set the the size of the view as a dictionary of width and height properties
	 * @param {Object} value New value to set.
	 * @alias Titanium.UI.TabGroup.setSize
	 */
	setSize: function () { },
	/**
	 * One of Titanium.UI.Android.SOFT_KEYBOARD_DEFAULT_ON_FOCUS, Titanium.UI.Android.SOFT_KEYBOARD_HIDE_ON_FOCUS, or Titanium.UI.Android.SOFT_KEYBOARD_SHOW_ON_FOCUS. (Android only)
	 * @alias Titanium.UI.TabGroup.softKeyboardOnFocus
	 * @property {Integer}
	 */
	softKeyboardOnFocus: 0,
	/**
	 * Get the One of Titanium.UI.Android.SOFT_KEYBOARD_DEFAULT_ON_FOCUS, Titanium.UI.Android.SOFT_KEYBOARD_HIDE_ON_FOCUS, or Titanium.UI.Android.SOFT_KEYBOARD_SHOW_ON_FOCUS. (Android only)
	 * @alias Titanium.UI.TabGroup.getSoftKeyboardOnFocus
	 * @return {Integer}
	 */
	getSoftKeyboardOnFocus: function () { return softKeyboardOnFocus; },
	/**
	 * Set the One of Titanium.UI.Android.SOFT_KEYBOARD_DEFAULT_ON_FOCUS, Titanium.UI.Android.SOFT_KEYBOARD_HIDE_ON_FOCUS, or Titanium.UI.Android.SOFT_KEYBOARD_SHOW_ON_FOCUS. (Android only)
	 * @param {Integer} value New value to set.
	 * @alias Titanium.UI.TabGroup.setSoftKeyboardOnFocus
	 */
	setSoftKeyboardOnFocus: function () { },
	/**
	 * array of tab objects that are managed by the tab group
	 * @alias Titanium.UI.TabGroup.tabs
	 * @property {Array}
	 */
	tabs: [],
	/**
	 * Get the array of tab objects that are managed by the tab group
	 * @alias Titanium.UI.TabGroup.getTabs
	 * @return {Array}
	 */
	getTabs: function () { return tabs; },
	/**
	 * Set the array of tab objects that are managed by the tab group
	 * @param {Array} value New value to set.
	 * @alias Titanium.UI.TabGroup.setTabs
	 */
	setTabs: function () { },
	/**
	 * property for the view top position. This position is relative to the view's parent. Can be either a float value or a dimension string ie 'auto' (default), '50%' (iPhone only).
	 * @alias Titanium.UI.TabGroup.top
	 * @property {Float,String}
	 */
	top: 0.0,
	/**
	 * Get the property for the view top position. This position is relative to the view's parent. Can be either a float value or a dimension string ie 'auto' (default), '50%' (iPhone only).
	 * @alias Titanium.UI.TabGroup.getTop
	 * @return {Float,String}
	 */
	getTop: function () { return top; },
	/**
	 * Set the property for the view top position. This position is relative to the view's parent. Can be either a float value or a dimension string ie 'auto' (default), '50%' (iPhone only).
	 * @param {Float,String} value New value to set.
	 * @alias Titanium.UI.TabGroup.setTop
	 */
	setTop: function () { },
	/**
	 * a boolean indicating if the view should receive touch events (true, default) or forward them to peers (false)
	 * @alias Titanium.UI.TabGroup.touchEnabled
	 * @property {Boolean}
	 */
	touchEnabled: false,
	/**
	 * Get the a boolean indicating if the view should receive touch events (true, default) or forward them to peers (false)
	 * @alias Titanium.UI.TabGroup.getTouchEnabled
	 * @return {Boolean}
	 */
	getTouchEnabled: function () { return touchEnabled; },
	/**
	 * Set the a boolean indicating if the view should receive touch events (true, default) or forward them to peers (false)
	 * @param {Boolean} value New value to set.
	 * @alias Titanium.UI.TabGroup.setTouchEnabled
	 */
	setTouchEnabled: function () { },
	/**
	 * the transformation matrix to apply to the view
	 * @alias Titanium.UI.TabGroup.transform
	 * @property {Object}
	 */
	transform: {},
	/**
	 * Get the the transformation matrix to apply to the view
	 * @alias Titanium.UI.TabGroup.getTransform
	 * @return {Object}
	 */
	getTransform: function () { return transform; },
	/**
	 * Set the the transformation matrix to apply to the view
	 * @param {Object} value New value to set.
	 * @alias Titanium.UI.TabGroup.setTransform
	 */
	setTransform: function () { },
	/**
	 * a boolean of the visibility of the view
	 * @alias Titanium.UI.TabGroup.visible
	 * @property {Boolean}
	 */
	visible: false,
	/**
	 * Get the a boolean of the visibility of the view
	 * @alias Titanium.UI.TabGroup.getVisible
	 * @return {Boolean}
	 */
	getVisible: function () { return visible; },
	/**
	 * Set the a boolean of the visibility of the view
	 * @param {Boolean} value New value to set.
	 * @alias Titanium.UI.TabGroup.setVisible
	 */
	setVisible: function () { },
	/**
	 * property for the view width. Can be either a float value or a dimension string ie 'auto' (default), '50%' (iPhone only).
	 * @alias Titanium.UI.TabGroup.width
	 * @property {Float,String}
	 */
	width: 0.0,
	/**
	 * Get the property for the view width. Can be either a float value or a dimension string ie 'auto' (default), '50%' (iPhone only).
	 * @alias Titanium.UI.TabGroup.getWidth
	 * @return {Float,String}
	 */
	getWidth: function () { return width; },
	/**
	 * Set the property for the view width. Can be either a float value or a dimension string ie 'auto' (default), '50%' (iPhone only).
	 * @param {Float,String} value New value to set.
	 * @alias Titanium.UI.TabGroup.setWidth
	 */
	setWidth: function () { },
	/**
	 * the z index position relative to other sibling views
	 * @alias Titanium.UI.TabGroup.zIndex
	 * @property {Integer}
	 */
	zIndex: 0,
	/**
	 * Get the the z index position relative to other sibling views
	 * @alias Titanium.UI.TabGroup.getZIndex
	 * @return {Integer}
	 */
	getZIndex: function () { return zIndex; },
	/**
	 * Set the the z index position relative to other sibling views
	 * @param {Integer} value New value to set.
	 * @alias Titanium.UI.TabGroup.setZIndex
	 */
	setZIndex: function () { },
	/**
	 * add a child to the view hierarchy
	 * @param {Object} view the view to add to this views hiearchy
	 * @alias Titanium.UI.TabGroup.add
	 */
	add: function (view) { },
	/**
	 * add an event listener for the instance to receive view triggered events
	 * @param {String} name name of the event
	 * @param {Function} callback callback function to invoke when the event is fired
	 * @alias Titanium.UI.TabGroup.addEventListener
	 */
	addEventListener: function (name,callback) { },
	/**
	 * add a tab to the tab group
	 * @alias Titanium.UI.TabGroup.addTab
	 */
	addTab: function () { },
	/**
	 * animate the view
	 * @param {Object} obj either a dictionary of animation properties or an Animation object
	 * @param {Function} callback function to be invoked upon completion of the animation
	 * @alias Titanium.UI.TabGroup.animate
	 */
	animate: function (obj,callback) { },
	/**
	 * close the tab group and remove it from the UI
	 * @alias Titanium.UI.TabGroup.close
	 */
	close: function () { },
	/**
	 * fire a synthesized event to the views listener
	 * @param {String} name name of the event
	 * @param {Object} event event object
	 * @alias Titanium.UI.TabGroup.fireEvent
	 */
	fireEvent: function (name,event) { },
	/**
	 * hide the view
	 * @alias Titanium.UI.TabGroup.hide
	 */
	hide: function () { },
	/**
	 * open the tab group and make it visible
	 * @alias Titanium.UI.TabGroup.open
	 */
	open: function () { },
	/**
	 * remove a previously add view from the view hiearchy
	 * @param {Object} view the view to remove from this views hiearchy
	 * @alias Titanium.UI.TabGroup.remove
	 */
	remove: function (view) { },
	/**
	 * remove a previously added event listener
	 * @param {String} name name of the event
	 * @param {Function} callback callback function passed in addEventListener
	 * @alias Titanium.UI.TabGroup.removeEventListener
	 */
	removeEventListener: function (name,callback) { },
	/**
	 * remove a tab from the tab group
	 * @alias Titanium.UI.TabGroup.removeTab
	 */
	removeTab: function () { },
	/**
	 * select the currently active tab in a tab group
	 * @param {Object} indexOrObject an int representing the desired tab index or a reference to the tab object you'd like to switch to
	 * @alias Titanium.UI.TabGroup.setActiveTab
	 */
	setActiveTab: function (indexOrObject) { },
	/**
	 * make the view visible
	 * @alias Titanium.UI.TabGroup.show
	 */
	show: function () { },
	/**
	 * return a Blob image of the rendered view
	 * @param {Function} f function to be invoked upon completion. if non-null, this method will be performed asynchronously. if null, it will be performed immediately
	 * @alias Titanium.UI.TabGroup.toImage
	 * @return {Object}
	 */
	toImage: function (f) { return {}; },
};

/**
 * A Tabbed Bar is created by the method Titanium.UI.createTabbedBar. The difference between the Tabbed Bar and the Button Bar is that the tabbed bar visually maintains a state (visually distinguished as a pressed or selected look).
 * @since 0.8
 */
Titanium.UI.TabbedBar = {
	/**
	 * a dictionary with properties x and y to indicate the anchor point value. anchor specifies the position by which animation should occur. center is 0.5, 0.5
	 * @alias Titanium.UI.TabbedBar.anchorPoint
	 * @property {Object}
	 */
	anchorPoint: {},
	/**
	 * Get the a dictionary with properties x and y to indicate the anchor point value. anchor specifies the position by which animation should occur. center is 0.5, 0.5
	 * @alias Titanium.UI.TabbedBar.getAnchorPoint
	 * @return {Object}
	 */
	getAnchorPoint: function () { return anchorPoint; },
	/**
	 * Set the a dictionary with properties x and y to indicate the anchor point value. anchor specifies the position by which animation should occur. center is 0.5, 0.5
	 * @param {Object} value New value to set.
	 * @alias Titanium.UI.TabbedBar.setAnchorPoint
	 */
	setAnchorPoint: function () { },
	/**
	 * read-only object with x and y properties of where the view is during animation
	 * @alias Titanium.UI.TabbedBar.animatedCenterPoint
	 * @property {Object}
	 */
	animatedCenterPoint: {},
	/**
	 * Get the read-only object with x and y properties of where the view is during animation
	 * @alias Titanium.UI.TabbedBar.getAnimatedCenterPoint
	 * @return {Object}
	 */
	getAnimatedCenterPoint: function () { return animatedCenterPoint; },
	/**
	 * Set the read-only object with x and y properties of where the view is during animation
	 * @param {Object} value New value to set.
	 * @alias Titanium.UI.TabbedBar.setAnimatedCenterPoint
	 */
	setAnimatedCenterPoint: function () { },
	/**
	 * the background color of the tabbed bar
	 * @alias Titanium.UI.TabbedBar.backgroundColor
	 * @property {String}
	 */
	backgroundColor: '',
	/**
	 * Get the the background color of the tabbed bar
	 * @alias Titanium.UI.TabbedBar.getBackgroundColor
	 * @return {String}
	 */
	getBackgroundColor: function () { return backgroundColor; },
	/**
	 * Set the the background color of the tabbed bar
	 * @param {String} value New value to set.
	 * @alias Titanium.UI.TabbedBar.setBackgroundColor
	 */
	setBackgroundColor: function () { },
	/**
	 * the disabled background color of the view. (Android)
	 * @alias Titanium.UI.TabbedBar.backgroundDisabledColor
	 * @property {String}
	 */
	backgroundDisabledColor: '',
	/**
	 * Get the the disabled background color of the view. (Android)
	 * @alias Titanium.UI.TabbedBar.getBackgroundDisabledColor
	 * @return {String}
	 */
	getBackgroundDisabledColor: function () { return backgroundDisabledColor; },
	/**
	 * Set the the disabled background color of the view. (Android)
	 * @param {String} value New value to set.
	 * @alias Titanium.UI.TabbedBar.setBackgroundDisabledColor
	 */
	setBackgroundDisabledColor: function () { },
	/**
	 * the disabled background image url of the view. (Android)
	 * @alias Titanium.UI.TabbedBar.backgroundDisabledImage
	 * @property {String}
	 */
	backgroundDisabledImage: '',
	/**
	 * Get the the disabled background image url of the view. (Android)
	 * @alias Titanium.UI.TabbedBar.getBackgroundDisabledImage
	 * @return {String}
	 */
	getBackgroundDisabledImage: function () { return backgroundDisabledImage; },
	/**
	 * Set the the disabled background image url of the view. (Android)
	 * @param {String} value New value to set.
	 * @alias Titanium.UI.TabbedBar.setBackgroundDisabledImage
	 */
	setBackgroundDisabledImage: function () { },
	/**
	 * the focused background color of the view. focusable must be true for normal views. (Android)
	 * @alias Titanium.UI.TabbedBar.backgroundFocusedColor
	 * @property {String}
	 */
	backgroundFocusedColor: '',
	/**
	 * Get the the focused background color of the view. focusable must be true for normal views. (Android)
	 * @alias Titanium.UI.TabbedBar.getBackgroundFocusedColor
	 * @return {String}
	 */
	getBackgroundFocusedColor: function () { return backgroundFocusedColor; },
	/**
	 * Set the the focused background color of the view. focusable must be true for normal views. (Android)
	 * @param {String} value New value to set.
	 * @alias Titanium.UI.TabbedBar.setBackgroundFocusedColor
	 */
	setBackgroundFocusedColor: function () { },
	/**
	 * the focused background image url of the view. focusable must be true for normal views. (Android)
	 * @alias Titanium.UI.TabbedBar.backgroundFocusedImage
	 * @property {String}
	 */
	backgroundFocusedImage: '',
	/**
	 * Get the the focused background image url of the view. focusable must be true for normal views. (Android)
	 * @alias Titanium.UI.TabbedBar.getBackgroundFocusedImage
	 * @return {String}
	 */
	getBackgroundFocusedImage: function () { return backgroundFocusedImage; },
	/**
	 * Set the the focused background image url of the view. focusable must be true for normal views. (Android)
	 * @param {String} value New value to set.
	 * @alias Titanium.UI.TabbedBar.setBackgroundFocusedImage
	 */
	setBackgroundFocusedImage: function () { },
	/**
	 * a background gradient for the view with the properties: type,startPoint,endPoint,startRadius,endRadius,backfillStart,backfillEnd,colors.
	 * @alias Titanium.UI.TabbedBar.backgroundGradient
	 * @property {Object}
	 */
	backgroundGradient: {},
	/**
	 * Get the a background gradient for the view with the properties: type,startPoint,endPoint,startRadius,endRadius,backfillStart,backfillEnd,colors.
	 * @alias Titanium.UI.TabbedBar.getBackgroundGradient
	 * @return {Object}
	 */
	getBackgroundGradient: function () { return backgroundGradient; },
	/**
	 * Set the a background gradient for the view with the properties: type,startPoint,endPoint,startRadius,endRadius,backfillStart,backfillEnd,colors.
	 * @param {Object} value New value to set.
	 * @alias Titanium.UI.TabbedBar.setBackgroundGradient
	 */
	setBackgroundGradient: function () { },
	/**
	 * the background image url of the view
	 * @alias Titanium.UI.TabbedBar.backgroundImage
	 * @property {String}
	 */
	backgroundImage: '',
	/**
	 * Get the the background image url of the view
	 * @alias Titanium.UI.TabbedBar.getBackgroundImage
	 * @return {String}
	 */
	getBackgroundImage: function () { return backgroundImage; },
	/**
	 * Set the the background image url of the view
	 * @param {String} value New value to set.
	 * @alias Titanium.UI.TabbedBar.setBackgroundImage
	 */
	setBackgroundImage: function () { },
	/**
	 * End caps specify the portion of an image that should not be resized when an image is stretched. This technique is used to implement buttons and other resizable image-based interface elements. When a button with end caps is resized, the resizing occurs only in the middle of the button, in the region between the end caps. The end caps themselves keep their original size and appearance. This property specifies the size of the left end cap. The middle (stretchable) portion is assumed to be 1 pixel wide. The right end cap is therefore computed by adding the size of the left end cap and the middle portion together and then subtracting that value from the width of the image
	 * @alias Titanium.UI.TabbedBar.backgroundLeftCap
	 * @property {Float}
	 */
	backgroundLeftCap: 0.0,
	/**
	 * Get the End caps specify the portion of an image that should not be resized when an image is stretched. This technique is used to implement buttons and other resizable image-based interface elements. When a button with end caps is resized, the resizing occurs only in the middle of the button, in the region between the end caps. The end caps themselves keep their original size and appearance. This property specifies the size of the left end cap. The middle (stretchable) portion is assumed to be 1 pixel wide. The right end cap is therefore computed by adding the size of the left end cap and the middle portion together and then subtracting that value from the width of the image
	 * @alias Titanium.UI.TabbedBar.getBackgroundLeftCap
	 * @return {Float}
	 */
	getBackgroundLeftCap: function () { return backgroundLeftCap; },
	/**
	 * Set the End caps specify the portion of an image that should not be resized when an image is stretched. This technique is used to implement buttons and other resizable image-based interface elements. When a button with end caps is resized, the resizing occurs only in the middle of the button, in the region between the end caps. The end caps themselves keep their original size and appearance. This property specifies the size of the left end cap. The middle (stretchable) portion is assumed to be 1 pixel wide. The right end cap is therefore computed by adding the size of the left end cap and the middle portion together and then subtracting that value from the width of the image
	 * @param {Float} value New value to set.
	 * @alias Titanium.UI.TabbedBar.setBackgroundLeftCap
	 */
	setBackgroundLeftCap: function () { },
	/**
	 * the selected background color of the view. focusable must be true for normal views. (Android)
	 * @alias Titanium.UI.TabbedBar.backgroundSelectedColor
	 * @property {String}
	 */
	backgroundSelectedColor: '',
	/**
	 * Get the the selected background color of the view. focusable must be true for normal views. (Android)
	 * @alias Titanium.UI.TabbedBar.getBackgroundSelectedColor
	 * @return {String}
	 */
	getBackgroundSelectedColor: function () { return backgroundSelectedColor; },
	/**
	 * Set the the selected background color of the view. focusable must be true for normal views. (Android)
	 * @param {String} value New value to set.
	 * @alias Titanium.UI.TabbedBar.setBackgroundSelectedColor
	 */
	setBackgroundSelectedColor: function () { },
	/**
	 * the selected background image url of the view. focusable must be true for normal views. (Android)
	 * @alias Titanium.UI.TabbedBar.backgroundSelectedImage
	 * @property {String}
	 */
	backgroundSelectedImage: '',
	/**
	 * Get the the selected background image url of the view. focusable must be true for normal views. (Android)
	 * @alias Titanium.UI.TabbedBar.getBackgroundSelectedImage
	 * @return {String}
	 */
	getBackgroundSelectedImage: function () { return backgroundSelectedImage; },
	/**
	 * Set the the selected background image url of the view. focusable must be true for normal views. (Android)
	 * @param {String} value New value to set.
	 * @alias Titanium.UI.TabbedBar.setBackgroundSelectedImage
	 */
	setBackgroundSelectedImage: function () { },
	/**
	 * End caps specify the portion of an image that should not be resized when an image is stretched. This technique is used to implement buttons and other resizable image-based interface elements. When a button with end caps is resized, the resizing occurs only in the middle of the button, in the region between the end caps. The end caps themselves keep their original size and appearance. This property specifies the size of the top end cap. The middle (stretchable) portion is assumed to be 1 pixel wide. The bottom end cap is therefore computed by adding the size of the top end cap and the middle portion together and then subtracting that value from the height of the image
	 * @alias Titanium.UI.TabbedBar.backgroundTopCap
	 * @property {Float}
	 */
	backgroundTopCap: 0.0,
	/**
	 * Get the End caps specify the portion of an image that should not be resized when an image is stretched. This technique is used to implement buttons and other resizable image-based interface elements. When a button with end caps is resized, the resizing occurs only in the middle of the button, in the region between the end caps. The end caps themselves keep their original size and appearance. This property specifies the size of the top end cap. The middle (stretchable) portion is assumed to be 1 pixel wide. The bottom end cap is therefore computed by adding the size of the top end cap and the middle portion together and then subtracting that value from the height of the image
	 * @alias Titanium.UI.TabbedBar.getBackgroundTopCap
	 * @return {Float}
	 */
	getBackgroundTopCap: function () { return backgroundTopCap; },
	/**
	 * Set the End caps specify the portion of an image that should not be resized when an image is stretched. This technique is used to implement buttons and other resizable image-based interface elements. When a button with end caps is resized, the resizing occurs only in the middle of the button, in the region between the end caps. The end caps themselves keep their original size and appearance. This property specifies the size of the top end cap. The middle (stretchable) portion is assumed to be 1 pixel wide. The bottom end cap is therefore computed by adding the size of the top end cap and the middle portion together and then subtracting that value from the height of the image
	 * @param {Float} value New value to set.
	 * @alias Titanium.UI.TabbedBar.setBackgroundTopCap
	 */
	setBackgroundTopCap: function () { },
	/**
	 * the border color of the view
	 * @alias Titanium.UI.TabbedBar.borderColor
	 * @property {String}
	 */
	borderColor: '',
	/**
	 * Get the the border color of the view
	 * @alias Titanium.UI.TabbedBar.getBorderColor
	 * @return {String}
	 */
	getBorderColor: function () { return borderColor; },
	/**
	 * Set the the border color of the view
	 * @param {String} value New value to set.
	 * @alias Titanium.UI.TabbedBar.setBorderColor
	 */
	setBorderColor: function () { },
	/**
	 * the border radius of the view
	 * @alias Titanium.UI.TabbedBar.borderRadius
	 * @property {Float}
	 */
	borderRadius: 0.0,
	/**
	 * Get the the border radius of the view
	 * @alias Titanium.UI.TabbedBar.getBorderRadius
	 * @return {Float}
	 */
	getBorderRadius: function () { return borderRadius; },
	/**
	 * Set the the border radius of the view
	 * @param {Float} value New value to set.
	 * @alias Titanium.UI.TabbedBar.setBorderRadius
	 */
	setBorderRadius: function () { },
	/**
	 * the border width of the view
	 * @alias Titanium.UI.TabbedBar.borderWidth
	 * @property {Float}
	 */
	borderWidth: 0.0,
	/**
	 * Get the the border width of the view
	 * @alias Titanium.UI.TabbedBar.getBorderWidth
	 * @return {Float}
	 */
	getBorderWidth: function () { return borderWidth; },
	/**
	 * Set the the border width of the view
	 * @param {Float} value New value to set.
	 * @alias Titanium.UI.TabbedBar.setBorderWidth
	 */
	setBorderWidth: function () { },
	/**
	 * property for the view bottom position. This position is relative to the view's parent. Can be either a float value or a dimension string ie 'auto' (default), '50%' (iPhone only).
	 * @alias Titanium.UI.TabbedBar.bottom
	 * @property {Float,String}
	 */
	bottom: 0.0,
	/**
	 * Get the property for the view bottom position. This position is relative to the view's parent. Can be either a float value or a dimension string ie 'auto' (default), '50%' (iPhone only).
	 * @alias Titanium.UI.TabbedBar.getBottom
	 * @return {Float,String}
	 */
	getBottom: function () { return bottom; },
	/**
	 * Set the property for the view bottom position. This position is relative to the view's parent. Can be either a float value or a dimension string ie 'auto' (default), '50%' (iPhone only).
	 * @param {Float,String} value New value to set.
	 * @alias Titanium.UI.TabbedBar.setBottom
	 */
	setBottom: function () { },
	/**
	 * a dictionary with properties x and y to indicate the center of the views position relative to the parent view
	 * @alias Titanium.UI.TabbedBar.center
	 * @property {Object}
	 */
	center: {},
	/**
	 * Get the a dictionary with properties x and y to indicate the center of the views position relative to the parent view
	 * @alias Titanium.UI.TabbedBar.getCenter
	 * @return {Object}
	 */
	getCenter: function () { return center; },
	/**
	 * Set the a dictionary with properties x and y to indicate the center of the views position relative to the parent view
	 * @param {Object} value New value to set.
	 * @alias Titanium.UI.TabbedBar.setCenter
	 */
	setCenter: function () { },
	/**
	 * Set true if you want a view to be focusable when navigating with the trackball or D-Pad. Default: false. (Android Only)
	 * @alias Titanium.UI.TabbedBar.focusable
	 * @property {Boolean}
	 */
	focusable: false,
	/**
	 * Get the Set true if you want a view to be focusable when navigating with the trackball or D-Pad. Default: false. (Android Only)
	 * @alias Titanium.UI.TabbedBar.getFocusable
	 * @return {Boolean}
	 */
	getFocusable: function () { return focusable; },
	/**
	 * Set the Set true if you want a view to be focusable when navigating with the trackball or D-Pad. Default: false. (Android Only)
	 * @param {Boolean} value New value to set.
	 * @alias Titanium.UI.TabbedBar.setFocusable
	 */
	setFocusable: function () { },
	/**
	 * the font family
	 * @alias Titanium.UI.TabbedBar.font-family
	 * @property {String}
	 */
	font-family: '',
	/**
	 * Get the the font family
	 * @alias Titanium.UI.TabbedBar.getFont-family
	 * @return {String}
	 */
	getFont-family: function () { return font-family; },
	/**
	 * Set the the font family
	 * @param {String} value New value to set.
	 * @alias Titanium.UI.TabbedBar.setFont-family
	 */
	setFont-family: function () { },
	/**
	 * the font size
	 * @alias Titanium.UI.TabbedBar.font-size
	 * @property {String}
	 */
	font-size: '',
	/**
	 * Get the the font size
	 * @alias Titanium.UI.TabbedBar.getFont-size
	 * @return {String}
	 */
	getFont-size: function () { return font-size; },
	/**
	 * Set the the font size
	 * @param {String} value New value to set.
	 * @alias Titanium.UI.TabbedBar.setFont-size
	 */
	setFont-size: function () { },
	/**
	 * the font style, either normal or italics
	 * @alias Titanium.UI.TabbedBar.font-style
	 * @property {String}
	 */
	font-style: '',
	/**
	 * Get the the font style, either normal or italics
	 * @alias Titanium.UI.TabbedBar.getFont-style
	 * @return {String}
	 */
	getFont-style: function () { return font-style; },
	/**
	 * Set the the font style, either normal or italics
	 * @param {String} value New value to set.
	 * @alias Titanium.UI.TabbedBar.setFont-style
	 */
	setFont-style: function () { },
	/**
	 * the font weight, either normal or bold
	 * @alias Titanium.UI.TabbedBar.font-weight
	 * @property {String}
	 */
	font-weight: '',
	/**
	 * Get the the font weight, either normal or bold
	 * @alias Titanium.UI.TabbedBar.getFont-weight
	 * @return {String}
	 */
	getFont-weight: function () { return font-weight; },
	/**
	 * Set the the font weight, either normal or bold
	 * @param {String} value New value to set.
	 * @alias Titanium.UI.TabbedBar.setFont-weight
	 */
	setFont-weight: function () { },
	/**
	 * property for the view height. Can be either a float value or a dimension string ie 'auto' (default), '50%' (iPhone only).
	 * @alias Titanium.UI.TabbedBar.height
	 * @property {Float,String}
	 */
	height: 0.0,
	/**
	 * Get the property for the view height. Can be either a float value or a dimension string ie 'auto' (default), '50%' (iPhone only).
	 * @alias Titanium.UI.TabbedBar.getHeight
	 * @return {Float,String}
	 */
	getHeight: function () { return height; },
	/**
	 * Set the property for the view height. Can be either a float value or a dimension string ie 'auto' (default), '50%' (iPhone only).
	 * @param {Float,String} value New value to set.
	 * @alias Titanium.UI.TabbedBar.setHeight
	 */
	setHeight: function () { },
	/**
	 * the selected index
	 * @alias Titanium.UI.TabbedBar.index
	 * @property {Integer}
	 */
	index: 0,
	/**
	 * Get the the selected index
	 * @alias Titanium.UI.TabbedBar.getIndex
	 * @return {Integer}
	 */
	getIndex: function () { return index; },
	/**
	 * Set the the selected index
	 * @param {Integer} value New value to set.
	 * @alias Titanium.UI.TabbedBar.setIndex
	 */
	setIndex: function () { },
	/**
	 * the array of labels for the tabbed bar. each object should have the properties title, image, width and enabled.
	 * @alias Titanium.UI.TabbedBar.labels
	 * @property {Array}
	 */
	labels: [],
	/**
	 * Get the the array of labels for the tabbed bar. each object should have the properties title, image, width and enabled.
	 * @alias Titanium.UI.TabbedBar.getLabels
	 * @return {Array}
	 */
	getLabels: function () { return labels; },
	/**
	 * Set the the array of labels for the tabbed bar. each object should have the properties title, image, width and enabled.
	 * @param {Array} value New value to set.
	 * @alias Titanium.UI.TabbedBar.setLabels
	 */
	setLabels: function () { },
	/**
	 * property for the view left position. This position is relative to the view's parent. Can be either a float value or a dimension string ie 'auto' (default), '50%' (iPhone only).
	 * @alias Titanium.UI.TabbedBar.left
	 * @property {Float,String}
	 */
	left: 0.0,
	/**
	 * Get the property for the view left position. This position is relative to the view's parent. Can be either a float value or a dimension string ie 'auto' (default), '50%' (iPhone only).
	 * @alias Titanium.UI.TabbedBar.getLeft
	 * @return {Float,String}
	 */
	getLeft: function () { return left; },
	/**
	 * Set the property for the view left position. This position is relative to the view's parent. Can be either a float value or a dimension string ie 'auto' (default), '50%' (iPhone only).
	 * @param {Float,String} value New value to set.
	 * @alias Titanium.UI.TabbedBar.setLeft
	 */
	setLeft: function () { },
	/**
	 * the opacity from 0.0-1.0
	 * @alias Titanium.UI.TabbedBar.opacity
	 * @property {Float}
	 */
	opacity: 0.0,
	/**
	 * Get the the opacity from 0.0-1.0
	 * @alias Titanium.UI.TabbedBar.getOpacity
	 * @return {Float}
	 */
	getOpacity: function () { return opacity; },
	/**
	 * Set the the opacity from 0.0-1.0
	 * @param {Float} value New value to set.
	 * @alias Titanium.UI.TabbedBar.setOpacity
	 */
	setOpacity: function () { },
	/**
	 * property for the view right position. This position is relative to the view's parent. Can be either a float value or a dimension string ie 'auto' (default), '50%' (iPhone only).
	 * @alias Titanium.UI.TabbedBar.right
	 * @property {Float,String}
	 */
	right: 0.0,
	/**
	 * Get the property for the view right position. This position is relative to the view's parent. Can be either a float value or a dimension string ie 'auto' (default), '50%' (iPhone only).
	 * @alias Titanium.UI.TabbedBar.getRight
	 * @return {Float,String}
	 */
	getRight: function () { return right; },
	/**
	 * Set the property for the view right position. This position is relative to the view's parent. Can be either a float value or a dimension string ie 'auto' (default), '50%' (iPhone only).
	 * @param {Float,String} value New value to set.
	 * @alias Titanium.UI.TabbedBar.setRight
	 */
	setRight: function () { },
	/**
	 * the size of the view as a dictionary of width and height properties
	 * @alias Titanium.UI.TabbedBar.size
	 * @property {Object}
	 */
	size: {},
	/**
	 * Get the the size of the view as a dictionary of width and height properties
	 * @alias Titanium.UI.TabbedBar.getSize
	 * @return {Object}
	 */
	getSize: function () { return size; },
	/**
	 * Set the the size of the view as a dictionary of width and height properties
	 * @param {Object} value New value to set.
	 * @alias Titanium.UI.TabbedBar.setSize
	 */
	setSize: function () { },
	/**
	 * One of Titanium.UI.Android.SOFT_KEYBOARD_DEFAULT_ON_FOCUS, Titanium.UI.Android.SOFT_KEYBOARD_HIDE_ON_FOCUS, or Titanium.UI.Android.SOFT_KEYBOARD_SHOW_ON_FOCUS. (Android only)
	 * @alias Titanium.UI.TabbedBar.softKeyboardOnFocus
	 * @property {Integer}
	 */
	softKeyboardOnFocus: 0,
	/**
	 * Get the One of Titanium.UI.Android.SOFT_KEYBOARD_DEFAULT_ON_FOCUS, Titanium.UI.Android.SOFT_KEYBOARD_HIDE_ON_FOCUS, or Titanium.UI.Android.SOFT_KEYBOARD_SHOW_ON_FOCUS. (Android only)
	 * @alias Titanium.UI.TabbedBar.getSoftKeyboardOnFocus
	 * @return {Integer}
	 */
	getSoftKeyboardOnFocus: function () { return softKeyboardOnFocus; },
	/**
	 * Set the One of Titanium.UI.Android.SOFT_KEYBOARD_DEFAULT_ON_FOCUS, Titanium.UI.Android.SOFT_KEYBOARD_HIDE_ON_FOCUS, or Titanium.UI.Android.SOFT_KEYBOARD_SHOW_ON_FOCUS. (Android only)
	 * @param {Integer} value New value to set.
	 * @alias Titanium.UI.TabbedBar.setSoftKeyboardOnFocus
	 */
	setSoftKeyboardOnFocus: function () { },
	/**
	 * the style of the tabbed bar
	 * @alias Titanium.UI.TabbedBar.style
	 * @property {Integer}
	 */
	style: 0,
	/**
	 * Get the the style of the tabbed bar
	 * @alias Titanium.UI.TabbedBar.getStyle
	 * @return {Integer}
	 */
	getStyle: function () { return style; },
	/**
	 * Set the the style of the tabbed bar
	 * @param {Integer} value New value to set.
	 * @alias Titanium.UI.TabbedBar.setStyle
	 */
	setStyle: function () { },
	/**
	 * property for the view top position. This position is relative to the view's parent. Can be either a float value or a dimension string ie 'auto' (default), '50%' (iPhone only).
	 * @alias Titanium.UI.TabbedBar.top
	 * @property {Float,String}
	 */
	top: 0.0,
	/**
	 * Get the property for the view top position. This position is relative to the view's parent. Can be either a float value or a dimension string ie 'auto' (default), '50%' (iPhone only).
	 * @alias Titanium.UI.TabbedBar.getTop
	 * @return {Float,String}
	 */
	getTop: function () { return top; },
	/**
	 * Set the property for the view top position. This position is relative to the view's parent. Can be either a float value or a dimension string ie 'auto' (default), '50%' (iPhone only).
	 * @param {Float,String} value New value to set.
	 * @alias Titanium.UI.TabbedBar.setTop
	 */
	setTop: function () { },
	/**
	 * a boolean indicating if the view should receive touch events (true, default) or forward them to peers (false)
	 * @alias Titanium.UI.TabbedBar.touchEnabled
	 * @property {Boolean}
	 */
	touchEnabled: false,
	/**
	 * Get the a boolean indicating if the view should receive touch events (true, default) or forward them to peers (false)
	 * @alias Titanium.UI.TabbedBar.getTouchEnabled
	 * @return {Boolean}
	 */
	getTouchEnabled: function () { return touchEnabled; },
	/**
	 * Set the a boolean indicating if the view should receive touch events (true, default) or forward them to peers (false)
	 * @param {Boolean} value New value to set.
	 * @alias Titanium.UI.TabbedBar.setTouchEnabled
	 */
	setTouchEnabled: function () { },
	/**
	 * the transformation matrix to apply to the view
	 * @alias Titanium.UI.TabbedBar.transform
	 * @property {Object}
	 */
	transform: {},
	/**
	 * Get the the transformation matrix to apply to the view
	 * @alias Titanium.UI.TabbedBar.getTransform
	 * @return {Object}
	 */
	getTransform: function () { return transform; },
	/**
	 * Set the the transformation matrix to apply to the view
	 * @param {Object} value New value to set.
	 * @alias Titanium.UI.TabbedBar.setTransform
	 */
	setTransform: function () { },
	/**
	 * a boolean of the visibility of the view
	 * @alias Titanium.UI.TabbedBar.visible
	 * @property {Boolean}
	 */
	visible: false,
	/**
	 * Get the a boolean of the visibility of the view
	 * @alias Titanium.UI.TabbedBar.getVisible
	 * @return {Boolean}
	 */
	getVisible: function () { return visible; },
	/**
	 * Set the a boolean of the visibility of the view
	 * @param {Boolean} value New value to set.
	 * @alias Titanium.UI.TabbedBar.setVisible
	 */
	setVisible: function () { },
	/**
	 * property for the view width. Can be either a float value or a dimension string ie 'auto' (default), '50%' (iPhone only).
	 * @alias Titanium.UI.TabbedBar.width
	 * @property {Float,String}
	 */
	width: 0.0,
	/**
	 * Get the property for the view width. Can be either a float value or a dimension string ie 'auto' (default), '50%' (iPhone only).
	 * @alias Titanium.UI.TabbedBar.getWidth
	 * @return {Float,String}
	 */
	getWidth: function () { return width; },
	/**
	 * Set the property for the view width. Can be either a float value or a dimension string ie 'auto' (default), '50%' (iPhone only).
	 * @param {Float,String} value New value to set.
	 * @alias Titanium.UI.TabbedBar.setWidth
	 */
	setWidth: function () { },
	/**
	 * the z index position relative to other sibling views
	 * @alias Titanium.UI.TabbedBar.zIndex
	 * @property {Integer}
	 */
	zIndex: 0,
	/**
	 * Get the the z index position relative to other sibling views
	 * @alias Titanium.UI.TabbedBar.getZIndex
	 * @return {Integer}
	 */
	getZIndex: function () { return zIndex; },
	/**
	 * Set the the z index position relative to other sibling views
	 * @param {Integer} value New value to set.
	 * @alias Titanium.UI.TabbedBar.setZIndex
	 */
	setZIndex: function () { },
	/**
	 * add a child to the view hierarchy
	 * @param {Object} view the view to add to this views hiearchy
	 * @alias Titanium.UI.TabbedBar.add
	 */
	add: function (view) { },
	/**
	 * add an event listener for the instance to receive view triggered events
	 * @param {String} name name of the event
	 * @param {Function} callback callback function to invoke when the event is fired
	 * @alias Titanium.UI.TabbedBar.addEventListener
	 */
	addEventListener: function (name,callback) { },
	/**
	 * animate the view
	 * @param {Object} obj either a dictionary of animation properties or an Animation object
	 * @param {Function} callback function to be invoked upon completion of the animation
	 * @alias Titanium.UI.TabbedBar.animate
	 */
	animate: function (obj,callback) { },
	/**
	 * fire a synthesized event to the views listener
	 * @param {String} name name of the event
	 * @param {Object} event event object
	 * @alias Titanium.UI.TabbedBar.fireEvent
	 */
	fireEvent: function (name,event) { },
	/**
	 * hide the view
	 * @alias Titanium.UI.TabbedBar.hide
	 */
	hide: function () { },
	/**
	 * remove a previously add view from the view hiearchy
	 * @param {Object} view the view to remove from this views hiearchy
	 * @alias Titanium.UI.TabbedBar.remove
	 */
	remove: function (view) { },
	/**
	 * remove a previously added event listener
	 * @param {String} name name of the event
	 * @param {Function} callback callback function passed in addEventListener
	 * @alias Titanium.UI.TabbedBar.removeEventListener
	 */
	removeEventListener: function (name,callback) { },
	/**
	 * make the view visible
	 * @alias Titanium.UI.TabbedBar.show
	 */
	show: function () { },
	/**
	 * return a Blob image of the rendered view
	 * @param {Function} f function to be invoked upon completion. if non-null, this method will be performed asynchronously. if null, it will be performed immediately
	 * @alias Titanium.UI.TabbedBar.toImage
	 * @return {Object}
	 */
	toImage: function (f) { return {}; },
};

/**
 * A Table View allows you to create a scrollable table of content in a list-based fashion. The Table View is created by the method Titanium.UI.createTableView.
 * @since 0.8
 */
Titanium.UI.TableView = {
	/**
	 * true if the rows can be selected
	 * @alias Titanium.UI.TableView.allowsSelection
	 * @property {Boolean}
	 */
	allowsSelection: false,
	/**
	 * Get the true if the rows can be selected
	 * @alias Titanium.UI.TableView.getAllowsSelection
	 * @return {Boolean}
	 */
	getAllowsSelection: function () { return allowsSelection; },
	/**
	 * Set the true if the rows can be selected
	 * @param {Boolean} value New value to set.
	 * @alias Titanium.UI.TableView.setAllowsSelection
	 */
	setAllowsSelection: function () { },
	/**
	 * a dictionary with properties x and y to indicate the anchor point value. anchor specifies the position by which animation should occur. center is 0.5, 0.5
	 * @alias Titanium.UI.TableView.anchorPoint
	 * @property {Object}
	 */
	anchorPoint: {},
	/**
	 * Get the a dictionary with properties x and y to indicate the anchor point value. anchor specifies the position by which animation should occur. center is 0.5, 0.5
	 * @alias Titanium.UI.TableView.getAnchorPoint
	 * @return {Object}
	 */
	getAnchorPoint: function () { return anchorPoint; },
	/**
	 * Set the a dictionary with properties x and y to indicate the anchor point value. anchor specifies the position by which animation should occur. center is 0.5, 0.5
	 * @param {Object} value New value to set.
	 * @alias Titanium.UI.TableView.setAnchorPoint
	 */
	setAnchorPoint: function () { },
	/**
	 * read-only object with x and y properties of where the view is during animation
	 * @alias Titanium.UI.TableView.animatedCenterPoint
	 * @property {Object}
	 */
	animatedCenterPoint: {},
	/**
	 * Get the read-only object with x and y properties of where the view is during animation
	 * @alias Titanium.UI.TableView.getAnimatedCenterPoint
	 * @return {Object}
	 */
	getAnimatedCenterPoint: function () { return animatedCenterPoint; },
	/**
	 * Set the read-only object with x and y properties of where the view is during animation
	 * @param {Object} value New value to set.
	 * @alias Titanium.UI.TableView.setAnimatedCenterPoint
	 */
	setAnimatedCenterPoint: function () { },
	/**
	 * the background color of the table view
	 * @alias Titanium.UI.TableView.backgroundColor
	 * @property {String}
	 */
	backgroundColor: '',
	/**
	 * Get the the background color of the table view
	 * @alias Titanium.UI.TableView.getBackgroundColor
	 * @return {String}
	 */
	getBackgroundColor: function () { return backgroundColor; },
	/**
	 * Set the the background color of the table view
	 * @param {String} value New value to set.
	 * @alias Titanium.UI.TableView.setBackgroundColor
	 */
	setBackgroundColor: function () { },
	/**
	 * the disabled background color of the view. (Android)
	 * @alias Titanium.UI.TableView.backgroundDisabledColor
	 * @property {String}
	 */
	backgroundDisabledColor: '',
	/**
	 * Get the the disabled background color of the view. (Android)
	 * @alias Titanium.UI.TableView.getBackgroundDisabledColor
	 * @return {String}
	 */
	getBackgroundDisabledColor: function () { return backgroundDisabledColor; },
	/**
	 * Set the the disabled background color of the view. (Android)
	 * @param {String} value New value to set.
	 * @alias Titanium.UI.TableView.setBackgroundDisabledColor
	 */
	setBackgroundDisabledColor: function () { },
	/**
	 * the disabled background image url of the view. (Android)
	 * @alias Titanium.UI.TableView.backgroundDisabledImage
	 * @property {String}
	 */
	backgroundDisabledImage: '',
	/**
	 * Get the the disabled background image url of the view. (Android)
	 * @alias Titanium.UI.TableView.getBackgroundDisabledImage
	 * @return {String}
	 */
	getBackgroundDisabledImage: function () { return backgroundDisabledImage; },
	/**
	 * Set the the disabled background image url of the view. (Android)
	 * @param {String} value New value to set.
	 * @alias Titanium.UI.TableView.setBackgroundDisabledImage
	 */
	setBackgroundDisabledImage: function () { },
	/**
	 * the focused background color of the view. focusable must be true for normal views. (Android)
	 * @alias Titanium.UI.TableView.backgroundFocusedColor
	 * @property {String}
	 */
	backgroundFocusedColor: '',
	/**
	 * Get the the focused background color of the view. focusable must be true for normal views. (Android)
	 * @alias Titanium.UI.TableView.getBackgroundFocusedColor
	 * @return {String}
	 */
	getBackgroundFocusedColor: function () { return backgroundFocusedColor; },
	/**
	 * Set the the focused background color of the view. focusable must be true for normal views. (Android)
	 * @param {String} value New value to set.
	 * @alias Titanium.UI.TableView.setBackgroundFocusedColor
	 */
	setBackgroundFocusedColor: function () { },
	/**
	 * the focused background image url of the view. focusable must be true for normal views. (Android)
	 * @alias Titanium.UI.TableView.backgroundFocusedImage
	 * @property {String}
	 */
	backgroundFocusedImage: '',
	/**
	 * Get the the focused background image url of the view. focusable must be true for normal views. (Android)
	 * @alias Titanium.UI.TableView.getBackgroundFocusedImage
	 * @return {String}
	 */
	getBackgroundFocusedImage: function () { return backgroundFocusedImage; },
	/**
	 * Set the the focused background image url of the view. focusable must be true for normal views. (Android)
	 * @param {String} value New value to set.
	 * @alias Titanium.UI.TableView.setBackgroundFocusedImage
	 */
	setBackgroundFocusedImage: function () { },
	/**
	 * a background gradient for the view with the properties: type,startPoint,endPoint,startRadius,endRadius,backfillStart,backfillEnd,colors.
	 * @alias Titanium.UI.TableView.backgroundGradient
	 * @property {Object}
	 */
	backgroundGradient: {},
	/**
	 * Get the a background gradient for the view with the properties: type,startPoint,endPoint,startRadius,endRadius,backfillStart,backfillEnd,colors.
	 * @alias Titanium.UI.TableView.getBackgroundGradient
	 * @return {Object}
	 */
	getBackgroundGradient: function () { return backgroundGradient; },
	/**
	 * Set the a background gradient for the view with the properties: type,startPoint,endPoint,startRadius,endRadius,backfillStart,backfillEnd,colors.
	 * @param {Object} value New value to set.
	 * @alias Titanium.UI.TableView.setBackgroundGradient
	 */
	setBackgroundGradient: function () { },
	/**
	 * the background image to render in the background of the table view
	 * @alias Titanium.UI.TableView.backgroundImage
	 * @property {String}
	 */
	backgroundImage: '',
	/**
	 * Get the the background image to render in the background of the table view
	 * @alias Titanium.UI.TableView.getBackgroundImage
	 * @return {String}
	 */
	getBackgroundImage: function () { return backgroundImage; },
	/**
	 * Set the the background image to render in the background of the table view
	 * @param {String} value New value to set.
	 * @alias Titanium.UI.TableView.setBackgroundImage
	 */
	setBackgroundImage: function () { },
	/**
	 * End caps specify the portion of an image that should not be resized when an image is stretched. This technique is used to implement buttons and other resizable image-based interface elements. When a button with end caps is resized, the resizing occurs only in the middle of the button, in the region between the end caps. The end caps themselves keep their original size and appearance. This property specifies the size of the left end cap. The middle (stretchable) portion is assumed to be 1 pixel wide. The right end cap is therefore computed by adding the size of the left end cap and the middle portion together and then subtracting that value from the width of the image
	 * @alias Titanium.UI.TableView.backgroundLeftCap
	 * @property {Float}
	 */
	backgroundLeftCap: 0.0,
	/**
	 * Get the End caps specify the portion of an image that should not be resized when an image is stretched. This technique is used to implement buttons and other resizable image-based interface elements. When a button with end caps is resized, the resizing occurs only in the middle of the button, in the region between the end caps. The end caps themselves keep their original size and appearance. This property specifies the size of the left end cap. The middle (stretchable) portion is assumed to be 1 pixel wide. The right end cap is therefore computed by adding the size of the left end cap and the middle portion together and then subtracting that value from the width of the image
	 * @alias Titanium.UI.TableView.getBackgroundLeftCap
	 * @return {Float}
	 */
	getBackgroundLeftCap: function () { return backgroundLeftCap; },
	/**
	 * Set the End caps specify the portion of an image that should not be resized when an image is stretched. This technique is used to implement buttons and other resizable image-based interface elements. When a button with end caps is resized, the resizing occurs only in the middle of the button, in the region between the end caps. The end caps themselves keep their original size and appearance. This property specifies the size of the left end cap. The middle (stretchable) portion is assumed to be 1 pixel wide. The right end cap is therefore computed by adding the size of the left end cap and the middle portion together and then subtracting that value from the width of the image
	 * @param {Float} value New value to set.
	 * @alias Titanium.UI.TableView.setBackgroundLeftCap
	 */
	setBackgroundLeftCap: function () { },
	/**
	 * the selected background color of the view. focusable must be true for normal views. (Android)
	 * @alias Titanium.UI.TableView.backgroundSelectedColor
	 * @property {String}
	 */
	backgroundSelectedColor: '',
	/**
	 * Get the the selected background color of the view. focusable must be true for normal views. (Android)
	 * @alias Titanium.UI.TableView.getBackgroundSelectedColor
	 * @return {String}
	 */
	getBackgroundSelectedColor: function () { return backgroundSelectedColor; },
	/**
	 * Set the the selected background color of the view. focusable must be true for normal views. (Android)
	 * @param {String} value New value to set.
	 * @alias Titanium.UI.TableView.setBackgroundSelectedColor
	 */
	setBackgroundSelectedColor: function () { },
	/**
	 * the selected background image url of the view. focusable must be true for normal views. (Android)
	 * @alias Titanium.UI.TableView.backgroundSelectedImage
	 * @property {String}
	 */
	backgroundSelectedImage: '',
	/**
	 * Get the the selected background image url of the view. focusable must be true for normal views. (Android)
	 * @alias Titanium.UI.TableView.getBackgroundSelectedImage
	 * @return {String}
	 */
	getBackgroundSelectedImage: function () { return backgroundSelectedImage; },
	/**
	 * Set the the selected background image url of the view. focusable must be true for normal views. (Android)
	 * @param {String} value New value to set.
	 * @alias Titanium.UI.TableView.setBackgroundSelectedImage
	 */
	setBackgroundSelectedImage: function () { },
	/**
	 * End caps specify the portion of an image that should not be resized when an image is stretched. This technique is used to implement buttons and other resizable image-based interface elements. When a button with end caps is resized, the resizing occurs only in the middle of the button, in the region between the end caps. The end caps themselves keep their original size and appearance. This property specifies the size of the top end cap. The middle (stretchable) portion is assumed to be 1 pixel wide. The bottom end cap is therefore computed by adding the size of the top end cap and the middle portion together and then subtracting that value from the height of the image
	 * @alias Titanium.UI.TableView.backgroundTopCap
	 * @property {Float}
	 */
	backgroundTopCap: 0.0,
	/**
	 * Get the End caps specify the portion of an image that should not be resized when an image is stretched. This technique is used to implement buttons and other resizable image-based interface elements. When a button with end caps is resized, the resizing occurs only in the middle of the button, in the region between the end caps. The end caps themselves keep their original size and appearance. This property specifies the size of the top end cap. The middle (stretchable) portion is assumed to be 1 pixel wide. The bottom end cap is therefore computed by adding the size of the top end cap and the middle portion together and then subtracting that value from the height of the image
	 * @alias Titanium.UI.TableView.getBackgroundTopCap
	 * @return {Float}
	 */
	getBackgroundTopCap: function () { return backgroundTopCap; },
	/**
	 * Set the End caps specify the portion of an image that should not be resized when an image is stretched. This technique is used to implement buttons and other resizable image-based interface elements. When a button with end caps is resized, the resizing occurs only in the middle of the button, in the region between the end caps. The end caps themselves keep their original size and appearance. This property specifies the size of the top end cap. The middle (stretchable) portion is assumed to be 1 pixel wide. The bottom end cap is therefore computed by adding the size of the top end cap and the middle portion together and then subtracting that value from the height of the image
	 * @param {Float} value New value to set.
	 * @alias Titanium.UI.TableView.setBackgroundTopCap
	 */
	setBackgroundTopCap: function () { },
	/**
	 * the border color of the view
	 * @alias Titanium.UI.TableView.borderColor
	 * @property {String}
	 */
	borderColor: '',
	/**
	 * Get the the border color of the view
	 * @alias Titanium.UI.TableView.getBorderColor
	 * @return {String}
	 */
	getBorderColor: function () { return borderColor; },
	/**
	 * Set the the border color of the view
	 * @param {String} value New value to set.
	 * @alias Titanium.UI.TableView.setBorderColor
	 */
	setBorderColor: function () { },
	/**
	 * the border radius of the view
	 * @alias Titanium.UI.TableView.borderRadius
	 * @property {Float}
	 */
	borderRadius: 0.0,
	/**
	 * Get the the border radius of the view
	 * @alias Titanium.UI.TableView.getBorderRadius
	 * @return {Float}
	 */
	getBorderRadius: function () { return borderRadius; },
	/**
	 * Set the the border radius of the view
	 * @param {Float} value New value to set.
	 * @alias Titanium.UI.TableView.setBorderRadius
	 */
	setBorderRadius: function () { },
	/**
	 * the border width of the view
	 * @alias Titanium.UI.TableView.borderWidth
	 * @property {Float}
	 */
	borderWidth: 0.0,
	/**
	 * Get the the border width of the view
	 * @alias Titanium.UI.TableView.getBorderWidth
	 * @return {Float}
	 */
	getBorderWidth: function () { return borderWidth; },
	/**
	 * Set the the border width of the view
	 * @param {Float} value New value to set.
	 * @alias Titanium.UI.TableView.setBorderWidth
	 */
	setBorderWidth: function () { },
	/**
	 * property for the view bottom position. This position is relative to the view's parent. Can be either a float value or a dimension string ie 'auto' (default), '50%' (iPhone only).
	 * @alias Titanium.UI.TableView.bottom
	 * @property {Float,String}
	 */
	bottom: 0.0,
	/**
	 * Get the property for the view bottom position. This position is relative to the view's parent. Can be either a float value or a dimension string ie 'auto' (default), '50%' (iPhone only).
	 * @alias Titanium.UI.TableView.getBottom
	 * @return {Float,String}
	 */
	getBottom: function () { return bottom; },
	/**
	 * Set the property for the view bottom position. This position is relative to the view's parent. Can be either a float value or a dimension string ie 'auto' (default), '50%' (iPhone only).
	 * @param {Float,String} value New value to set.
	 * @alias Titanium.UI.TableView.setBottom
	 */
	setBottom: function () { },
	/**
	 * a dictionary with properties x and y to indicate the center of the views position relative to the parent view
	 * @alias Titanium.UI.TableView.center
	 * @property {Object}
	 */
	center: {},
	/**
	 * Get the a dictionary with properties x and y to indicate the center of the views position relative to the parent view
	 * @alias Titanium.UI.TableView.getCenter
	 * @return {Object}
	 */
	getCenter: function () { return center; },
	/**
	 * Set the a dictionary with properties x and y to indicate the center of the views position relative to the parent view
	 * @param {Object} value New value to set.
	 * @alias Titanium.UI.TableView.setCenter
	 */
	setCenter: function () { },
	/**
	 * the data array of objects to be used for the rows of the table view
	 * @alias Titanium.UI.TableView.data
	 * @property {Array}
	 */
	data: [],
	/**
	 * Get the the data array of objects to be used for the rows of the table view
	 * @alias Titanium.UI.TableView.getData
	 * @return {Array}
	 */
	getData: function () { return data; },
	/**
	 * Set the the data array of objects to be used for the rows of the table view
	 * @param {Array} value New value to set.
	 * @alias Titanium.UI.TableView.setData
	 */
	setData: function () { },
	/**
	 * allow the table view to be editable (this must be true for swipe-to-delete)
	 * @alias Titanium.UI.TableView.editable
	 * @property {Boolean}
	 */
	editable: false,
	/**
	 * Get the allow the table view to be editable (this must be true for swipe-to-delete)
	 * @alias Titanium.UI.TableView.getEditable
	 * @return {Boolean}
	 */
	getEditable: function () { return editable; },
	/**
	 * Set the allow the table view to be editable (this must be true for swipe-to-delete)
	 * @param {Boolean} value New value to set.
	 * @alias Titanium.UI.TableView.setEditable
	 */
	setEditable: function () { },
	/**
	 * boolean to control the editing state of the table view
	 * @alias Titanium.UI.TableView.editing
	 * @property {Boolean}
	 */
	editing: false,
	/**
	 * Get the boolean to control the editing state of the table view
	 * @alias Titanium.UI.TableView.getEditing
	 * @return {Boolean}
	 */
	getEditing: function () { return editing; },
	/**
	 * Set the boolean to control the editing state of the table view
	 * @param {Boolean} value New value to set.
	 * @alias Titanium.UI.TableView.setEditing
	 */
	setEditing: function () { },
	/**
	 * the filter attribute to be used when searching. this property maps to your data object or a property on the row object
	 * @alias Titanium.UI.TableView.filterAttribute
	 * @property {String}
	 */
	filterAttribute: '',
	/**
	 * Get the the filter attribute to be used when searching. this property maps to your data object or a property on the row object
	 * @alias Titanium.UI.TableView.getFilterAttribute
	 * @return {String}
	 */
	getFilterAttribute: function () { return filterAttribute; },
	/**
	 * Set the the filter attribute to be used when searching. this property maps to your data object or a property on the row object
	 * @param {String} value New value to set.
	 * @alias Titanium.UI.TableView.setFilterAttribute
	 */
	setFilterAttribute: function () { },
	/**
	 * boolean to indicate if the search should be case sensitive or case insensitive (default)
	 * @alias Titanium.UI.TableView.filterCaseInsensitive
	 * @property {Boolean}
	 */
	filterCaseInsensitive: false,
	/**
	 * Get the boolean to indicate if the search should be case sensitive or case insensitive (default)
	 * @alias Titanium.UI.TableView.getFilterCaseInsensitive
	 * @return {Boolean}
	 */
	getFilterCaseInsensitive: function () { return filterCaseInsensitive; },
	/**
	 * Set the boolean to indicate if the search should be case sensitive or case insensitive (default)
	 * @param {Boolean} value New value to set.
	 * @alias Titanium.UI.TableView.setFilterCaseInsensitive
	 */
	setFilterCaseInsensitive: function () { },
	/**
	 * Set true if you want a view to be focusable when navigating with the trackball or D-Pad. Default: false. (Android Only)
	 * @alias Titanium.UI.TableView.focusable
	 * @property {Boolean}
	 */
	focusable: false,
	/**
	 * Get the Set true if you want a view to be focusable when navigating with the trackball or D-Pad. Default: false. (Android Only)
	 * @alias Titanium.UI.TableView.getFocusable
	 * @return {Boolean}
	 */
	getFocusable: function () { return focusable; },
	/**
	 * Set the Set true if you want a view to be focusable when navigating with the trackball or D-Pad. Default: false. (Android Only)
	 * @param {Boolean} value New value to set.
	 * @alias Titanium.UI.TableView.setFocusable
	 */
	setFocusable: function () { },
	/**
	 * the font family
	 * @alias Titanium.UI.TableView.font-family
	 * @property {String}
	 */
	font-family: '',
	/**
	 * Get the the font family
	 * @alias Titanium.UI.TableView.getFont-family
	 * @return {String}
	 */
	getFont-family: function () { return font-family; },
	/**
	 * Set the the font family
	 * @param {String} value New value to set.
	 * @alias Titanium.UI.TableView.setFont-family
	 */
	setFont-family: function () { },
	/**
	 * the font size
	 * @alias Titanium.UI.TableView.font-size
	 * @property {String}
	 */
	font-size: '',
	/**
	 * Get the the font size
	 * @alias Titanium.UI.TableView.getFont-size
	 * @return {String}
	 */
	getFont-size: function () { return font-size; },
	/**
	 * Set the the font size
	 * @param {String} value New value to set.
	 * @alias Titanium.UI.TableView.setFont-size
	 */
	setFont-size: function () { },
	/**
	 * the font style, either normal or italics
	 * @alias Titanium.UI.TableView.font-style
	 * @property {String}
	 */
	font-style: '',
	/**
	 * Get the the font style, either normal or italics
	 * @alias Titanium.UI.TableView.getFont-style
	 * @return {String}
	 */
	getFont-style: function () { return font-style; },
	/**
	 * Set the the font style, either normal or italics
	 * @param {String} value New value to set.
	 * @alias Titanium.UI.TableView.setFont-style
	 */
	setFont-style: function () { },
	/**
	 * the font weight, either normal or bold
	 * @alias Titanium.UI.TableView.font-weight
	 * @property {String}
	 */
	font-weight: '',
	/**
	 * Get the the font weight, either normal or bold
	 * @alias Titanium.UI.TableView.getFont-weight
	 * @return {String}
	 */
	getFont-weight: function () { return font-weight; },
	/**
	 * Set the the font weight, either normal or bold
	 * @param {String} value New value to set.
	 * @alias Titanium.UI.TableView.setFont-weight
	 */
	setFont-weight: function () { },
	/**
	 * the table view footer title
	 * @alias Titanium.UI.TableView.footerTitle
	 * @property {String}
	 */
	footerTitle: '',
	/**
	 * Get the the table view footer title
	 * @alias Titanium.UI.TableView.getFooterTitle
	 * @return {String}
	 */
	getFooterTitle: function () { return footerTitle; },
	/**
	 * Set the the table view footer title
	 * @param {String} value New value to set.
	 * @alias Titanium.UI.TableView.setFooterTitle
	 */
	setFooterTitle: function () { },
	/**
	 * the table view footer as a view that will be rendered instead of a label
	 * @alias Titanium.UI.TableView.footerView
	 * @property {Object}
	 */
	footerView: {},
	/**
	 * Get the the table view footer as a view that will be rendered instead of a label
	 * @alias Titanium.UI.TableView.getFooterView
	 * @return {Object}
	 */
	getFooterView: function () { return footerView; },
	/**
	 * Set the the table view footer as a view that will be rendered instead of a label
	 * @param {Object} value New value to set.
	 * @alias Titanium.UI.TableView.setFooterView
	 */
	setFooterView: function () { },
	/**
	 * the table view header title
	 * @alias Titanium.UI.TableView.headerTitle
	 * @property {String}
	 */
	headerTitle: '',
	/**
	 * Get the the table view header title
	 * @alias Titanium.UI.TableView.getHeaderTitle
	 * @return {String}
	 */
	getHeaderTitle: function () { return headerTitle; },
	/**
	 * Set the the table view header title
	 * @param {String} value New value to set.
	 * @alias Titanium.UI.TableView.setHeaderTitle
	 */
	setHeaderTitle: function () { },
	/**
	 * the table view header as a view that will be rendered instead of a label
	 * @alias Titanium.UI.TableView.headerView
	 * @property {Object}
	 */
	headerView: {},
	/**
	 * Get the the table view header as a view that will be rendered instead of a label
	 * @alias Titanium.UI.TableView.getHeaderView
	 * @return {Object}
	 */
	getHeaderView: function () { return headerView; },
	/**
	 * Set the the table view header as a view that will be rendered instead of a label
	 * @param {Object} value New value to set.
	 * @alias Titanium.UI.TableView.setHeaderView
	 */
	setHeaderView: function () { },
	/**
	 * property for the view height. Can be either a float value or a dimension string ie 'auto' (default), '50%' (iPhone only).
	 * @alias Titanium.UI.TableView.height
	 * @property {Float,String}
	 */
	height: 0.0,
	/**
	 * Get the property for the view height. Can be either a float value or a dimension string ie 'auto' (default), '50%' (iPhone only).
	 * @alias Titanium.UI.TableView.getHeight
	 * @return {Float,String}
	 */
	getHeight: function () { return height; },
	/**
	 * Set the property for the view height. Can be either a float value or a dimension string ie 'auto' (default), '50%' (iPhone only).
	 * @param {Float,String} value New value to set.
	 * @alias Titanium.UI.TableView.setHeight
	 */
	setHeight: function () { },
	/**
	 * an array of objects (with title and index properties) to control the table view index
	 * @alias Titanium.UI.TableView.index
	 * @property {Array}
	 */
	index: [],
	/**
	 * Get the an array of objects (with title and index properties) to control the table view index
	 * @alias Titanium.UI.TableView.getIndex
	 * @return {Array}
	 */
	getIndex: function () { return index; },
	/**
	 * Set the an array of objects (with title and index properties) to control the table view index
	 * @param {Array} value New value to set.
	 * @alias Titanium.UI.TableView.setIndex
	 */
	setIndex: function () { },
	/**
	 * property for the view left position. This position is relative to the view's parent. Can be either a float value or a dimension string ie 'auto' (default), '50%' (iPhone only).
	 * @alias Titanium.UI.TableView.left
	 * @property {Float,String}
	 */
	left: 0.0,
	/**
	 * Get the property for the view left position. This position is relative to the view's parent. Can be either a float value or a dimension string ie 'auto' (default), '50%' (iPhone only).
	 * @alias Titanium.UI.TableView.getLeft
	 * @return {Float,String}
	 */
	getLeft: function () { return left; },
	/**
	 * Set the property for the view left position. This position is relative to the view's parent. Can be either a float value or a dimension string ie 'auto' (default), '50%' (iPhone only).
	 * @param {Float,String} value New value to set.
	 * @alias Titanium.UI.TableView.setLeft
	 */
	setLeft: function () { },
	/**
	 * max row height for table view rows
	 * @alias Titanium.UI.TableView.maxRowHeight
	 * @property {Float}
	 */
	maxRowHeight: 0.0,
	/**
	 * Get the max row height for table view rows
	 * @alias Titanium.UI.TableView.getMaxRowHeight
	 * @return {Float}
	 */
	getMaxRowHeight: function () { return maxRowHeight; },
	/**
	 * Set the max row height for table view rows
	 * @param {Float} value New value to set.
	 * @alias Titanium.UI.TableView.setMaxRowHeight
	 */
	setMaxRowHeight: function () { },
	/**
	 * min row height for table view rows
	 * @alias Titanium.UI.TableView.minRowHeight
	 * @property {Float}
	 */
	minRowHeight: 0.0,
	/**
	 * Get the min row height for table view rows
	 * @alias Titanium.UI.TableView.getMinRowHeight
	 * @return {Float}
	 */
	getMinRowHeight: function () { return minRowHeight; },
	/**
	 * Set the min row height for table view rows
	 * @param {Float} value New value to set.
	 * @alias Titanium.UI.TableView.setMinRowHeight
	 */
	setMinRowHeight: function () { },
	/**
	 * boolean to control the moveable state of the table view
	 * @alias Titanium.UI.TableView.moving
	 * @property {Boolean}
	 */
	moving: false,
	/**
	 * Get the boolean to control the moveable state of the table view
	 * @alias Titanium.UI.TableView.getMoving
	 * @return {Boolean}
	 */
	getMoving: function () { return moving; },
	/**
	 * Set the boolean to control the moveable state of the table view
	 * @param {Boolean} value New value to set.
	 * @alias Titanium.UI.TableView.setMoving
	 */
	setMoving: function () { },
	/**
	 * the opacity from 0.0-1.0
	 * @alias Titanium.UI.TableView.opacity
	 * @property {Float}
	 */
	opacity: 0.0,
	/**
	 * Get the the opacity from 0.0-1.0
	 * @alias Titanium.UI.TableView.getOpacity
	 * @return {Float}
	 */
	getOpacity: function () { return opacity; },
	/**
	 * Set the the opacity from 0.0-1.0
	 * @param {Float} value New value to set.
	 * @alias Titanium.UI.TableView.setOpacity
	 */
	setOpacity: function () { },
	/**
	 * property for the view right position. This position is relative to the view's parent. Can be either a float value or a dimension string ie 'auto' (default), '50%' (iPhone only).
	 * @alias Titanium.UI.TableView.right
	 * @property {Float,String}
	 */
	right: 0.0,
	/**
	 * Get the property for the view right position. This position is relative to the view's parent. Can be either a float value or a dimension string ie 'auto' (default), '50%' (iPhone only).
	 * @alias Titanium.UI.TableView.getRight
	 * @return {Float,String}
	 */
	getRight: function () { return right; },
	/**
	 * Set the property for the view right position. This position is relative to the view's parent. Can be either a float value or a dimension string ie 'auto' (default), '50%' (iPhone only).
	 * @param {Float,String} value New value to set.
	 * @alias Titanium.UI.TableView.setRight
	 */
	setRight: function () { },
	/**
	 * default row height for table view rows
	 * @alias Titanium.UI.TableView.rowHeight
	 * @property {Float}
	 */
	rowHeight: 0.0,
	/**
	 * Get the default row height for table view rows
	 * @alias Titanium.UI.TableView.getRowHeight
	 * @return {Float}
	 */
	getRowHeight: function () { return rowHeight; },
	/**
	 * Set the default row height for table view rows
	 * @param {Float} value New value to set.
	 * @alias Titanium.UI.TableView.setRowHeight
	 */
	setRowHeight: function () { },
	/**
	 * true (default) if tableview can be scrolled
	 * @alias Titanium.UI.TableView.scrollable
	 * @property {Boolean}
	 */
	scrollable: false,
	/**
	 * Get the true (default) if tableview can be scrolled
	 * @alias Titanium.UI.TableView.getScrollable
	 * @return {Boolean}
	 */
	getScrollable: function () { return scrollable; },
	/**
	 * Set the true (default) if tableview can be scrolled
	 * @param {Boolean} value New value to set.
	 * @alias Titanium.UI.TableView.setScrollable
	 */
	setScrollable: function () { },
	/**
	 * the search field to use for the table view
	 * @alias Titanium.UI.TableView.search
	 * @property {Object}
	 */
	search: {},
	/**
	 * Get the the search field to use for the table view
	 * @alias Titanium.UI.TableView.getSearch
	 * @return {Object}
	 */
	getSearch: function () { return search; },
	/**
	 * Set the the search field to use for the table view
	 * @param {Object} value New value to set.
	 * @alias Titanium.UI.TableView.setSearch
	 */
	setSearch: function () { },
	/**
	 * boolean to control the visibility of the search field
	 * @alias Titanium.UI.TableView.searchHidden
	 * @property {Boolean}
	 */
	searchHidden: false,
	/**
	 * Get the boolean to control the visibility of the search field
	 * @alias Titanium.UI.TableView.getSearchHidden
	 * @return {Boolean}
	 */
	getSearchHidden: function () { return searchHidden; },
	/**
	 * Set the boolean to control the visibility of the search field
	 * @param {Boolean} value New value to set.
	 * @alias Titanium.UI.TableView.setSearchHidden
	 */
	setSearchHidden: function () { },
	/**
	 * the separator color color as a hex or named value
	 * @alias Titanium.UI.TableView.separatorColor
	 * @property {String}
	 */
	separatorColor: '',
	/**
	 * Get the the separator color color as a hex or named value
	 * @alias Titanium.UI.TableView.getSeparatorColor
	 * @return {String}
	 */
	getSeparatorColor: function () { return separatorColor; },
	/**
	 * Set the the separator color color as a hex or named value
	 * @param {String} value New value to set.
	 * @alias Titanium.UI.TableView.setSeparatorColor
	 */
	setSeparatorColor: function () { },
	/**
	 * the separator style constant. For iPhone, Titanium.UI.iPhone.TableViewSeparatorStyle
	 * @alias Titanium.UI.TableView.separatorStyle
	 * @property {Integer}
	 */
	separatorStyle: 0,
	/**
	 * Get the the separator style constant. For iPhone, Titanium.UI.iPhone.TableViewSeparatorStyle
	 * @alias Titanium.UI.TableView.getSeparatorStyle
	 * @return {Integer}
	 */
	getSeparatorStyle: function () { return separatorStyle; },
	/**
	 * Set the the separator style constant. For iPhone, Titanium.UI.iPhone.TableViewSeparatorStyle
	 * @param {Integer} value New value to set.
	 * @alias Titanium.UI.TableView.setSeparatorStyle
	 */
	setSeparatorStyle: function () { },
	/**
	 * the size of the view as a dictionary of width and height properties
	 * @alias Titanium.UI.TableView.size
	 * @property {Object}
	 */
	size: {},
	/**
	 * Get the the size of the view as a dictionary of width and height properties
	 * @alias Titanium.UI.TableView.getSize
	 * @return {Object}
	 */
	getSize: function () { return size; },
	/**
	 * Set the the size of the view as a dictionary of width and height properties
	 * @param {Object} value New value to set.
	 * @alias Titanium.UI.TableView.setSize
	 */
	setSize: function () { },
	/**
	 * One of Titanium.UI.Android.SOFT_KEYBOARD_DEFAULT_ON_FOCUS, Titanium.UI.Android.SOFT_KEYBOARD_HIDE_ON_FOCUS, or Titanium.UI.Android.SOFT_KEYBOARD_SHOW_ON_FOCUS. (Android only)
	 * @alias Titanium.UI.TableView.softKeyboardOnFocus
	 * @property {Integer}
	 */
	softKeyboardOnFocus: 0,
	/**
	 * Get the One of Titanium.UI.Android.SOFT_KEYBOARD_DEFAULT_ON_FOCUS, Titanium.UI.Android.SOFT_KEYBOARD_HIDE_ON_FOCUS, or Titanium.UI.Android.SOFT_KEYBOARD_SHOW_ON_FOCUS. (Android only)
	 * @alias Titanium.UI.TableView.getSoftKeyboardOnFocus
	 * @return {Integer}
	 */
	getSoftKeyboardOnFocus: function () { return softKeyboardOnFocus; },
	/**
	 * Set the One of Titanium.UI.Android.SOFT_KEYBOARD_DEFAULT_ON_FOCUS, Titanium.UI.Android.SOFT_KEYBOARD_HIDE_ON_FOCUS, or Titanium.UI.Android.SOFT_KEYBOARD_SHOW_ON_FOCUS. (Android only)
	 * @param {Integer} value New value to set.
	 * @alias Titanium.UI.TableView.setSoftKeyboardOnFocus
	 */
	setSoftKeyboardOnFocus: function () { },
	/**
	 * iPhone only. the style of the table view. constant from Titanium.UI.iPhone.TableViewStyle
	 * @alias Titanium.UI.TableView.style
	 * @property {Integer}
	 */
	style: 0,
	/**
	 * Get the iPhone only. the style of the table view. constant from Titanium.UI.iPhone.TableViewStyle
	 * @alias Titanium.UI.TableView.getStyle
	 * @return {Integer}
	 */
	getStyle: function () { return style; },
	/**
	 * Set the iPhone only. the style of the table view. constant from Titanium.UI.iPhone.TableViewStyle
	 * @param {Integer} value New value to set.
	 * @alias Titanium.UI.TableView.setStyle
	 */
	setStyle: function () { },
	/**
	 * property for the view top position. This position is relative to the view's parent. Can be either a float value or a dimension string ie 'auto' (default), '50%' (iPhone only).
	 * @alias Titanium.UI.TableView.top
	 * @property {Float,String}
	 */
	top: 0.0,
	/**
	 * Get the property for the view top position. This position is relative to the view's parent. Can be either a float value or a dimension string ie 'auto' (default), '50%' (iPhone only).
	 * @alias Titanium.UI.TableView.getTop
	 * @return {Float,String}
	 */
	getTop: function () { return top; },
	/**
	 * Set the property for the view top position. This position is relative to the view's parent. Can be either a float value or a dimension string ie 'auto' (default), '50%' (iPhone only).
	 * @param {Float,String} value New value to set.
	 * @alias Titanium.UI.TableView.setTop
	 */
	setTop: function () { },
	/**
	 * a boolean indicating if the view should receive touch events (true, default) or forward them to peers (false)
	 * @alias Titanium.UI.TableView.touchEnabled
	 * @property {Boolean}
	 */
	touchEnabled: false,
	/**
	 * Get the a boolean indicating if the view should receive touch events (true, default) or forward them to peers (false)
	 * @alias Titanium.UI.TableView.getTouchEnabled
	 * @return {Boolean}
	 */
	getTouchEnabled: function () { return touchEnabled; },
	/**
	 * Set the a boolean indicating if the view should receive touch events (true, default) or forward them to peers (false)
	 * @param {Boolean} value New value to set.
	 * @alias Titanium.UI.TableView.setTouchEnabled
	 */
	setTouchEnabled: function () { },
	/**
	 * the transformation matrix to apply to the view
	 * @alias Titanium.UI.TableView.transform
	 * @property {Object}
	 */
	transform: {},
	/**
	 * Get the the transformation matrix to apply to the view
	 * @alias Titanium.UI.TableView.getTransform
	 * @return {Object}
	 */
	getTransform: function () { return transform; },
	/**
	 * Set the the transformation matrix to apply to the view
	 * @param {Object} value New value to set.
	 * @alias Titanium.UI.TableView.setTransform
	 */
	setTransform: function () { },
	/**
	 * a boolean of the visibility of the view
	 * @alias Titanium.UI.TableView.visible
	 * @property {Boolean}
	 */
	visible: false,
	/**
	 * Get the a boolean of the visibility of the view
	 * @alias Titanium.UI.TableView.getVisible
	 * @return {Boolean}
	 */
	getVisible: function () { return visible; },
	/**
	 * Set the a boolean of the visibility of the view
	 * @param {Boolean} value New value to set.
	 * @alias Titanium.UI.TableView.setVisible
	 */
	setVisible: function () { },
	/**
	 * property for the view width. Can be either a float value or a dimension string ie 'auto' (default), '50%' (iPhone only).
	 * @alias Titanium.UI.TableView.width
	 * @property {Float,String}
	 */
	width: 0.0,
	/**
	 * Get the property for the view width. Can be either a float value or a dimension string ie 'auto' (default), '50%' (iPhone only).
	 * @alias Titanium.UI.TableView.getWidth
	 * @return {Float,String}
	 */
	getWidth: function () { return width; },
	/**
	 * Set the property for the view width. Can be either a float value or a dimension string ie 'auto' (default), '50%' (iPhone only).
	 * @param {Float,String} value New value to set.
	 * @alias Titanium.UI.TableView.setWidth
	 */
	setWidth: function () { },
	/**
	 * the z index position relative to other sibling views
	 * @alias Titanium.UI.TableView.zIndex
	 * @property {Integer}
	 */
	zIndex: 0,
	/**
	 * Get the the z index position relative to other sibling views
	 * @alias Titanium.UI.TableView.getZIndex
	 * @return {Integer}
	 */
	getZIndex: function () { return zIndex; },
	/**
	 * Set the the z index position relative to other sibling views
	 * @param {Integer} value New value to set.
	 * @alias Titanium.UI.TableView.setZIndex
	 */
	setZIndex: function () { },
	/**
	 * add a child to the view hierarchy
	 * @param {Object} view the view to add to this views hiearchy
	 * @alias Titanium.UI.TableView.add
	 */
	add: function (view) { },
	/**
	 * add an event listener for the instance to receive view triggered events
	 * @param {String} name name of the event
	 * @param {Function} callback callback function to invoke when the event is fired
	 * @alias Titanium.UI.TableView.addEventListener
	 */
	addEventListener: function (name,callback) { },
	/**
	 * animate the view
	 * @param {Object} obj either a dictionary of animation properties or an Animation object
	 * @param {Function} callback function to be invoked upon completion of the animation
	 * @alias Titanium.UI.TableView.animate
	 */
	animate: function (obj,callback) { },
	/**
	 * append a row to the table, optionally with animation
	 * @param {Object} row row to append
	 * @param {Object} properties animation properties
	 * @alias Titanium.UI.TableView.appendRow
	 */
	appendRow: function (row,properties) { },
	/**
	 * delete an existing row, optionally with animation
	 * @param {Integer} row index of row to delete
	 * @param {Object} properties animation properties
	 * @alias Titanium.UI.TableView.deleteRow
	 */
	deleteRow: function (row,properties) { },
	/**
	 * programmatically deselect a row
	 * @param {Integer} row row index to deselect
	 * @alias Titanium.UI.TableView.deselectRow
	 */
	deselectRow: function (row) { },
	/**
	 * fire a synthesized event to the views listener
	 * @param {String} name name of the event
	 * @param {Object} event event object
	 * @alias Titanium.UI.TableView.fireEvent
	 */
	fireEvent: function (name,event) { },
	/**
	 * hide the view
	 * @alias Titanium.UI.TableView.hide
	 */
	hide: function () { },
	/**
	 * insert a row before another row, optionally with animation
	 * @param {Integer} index index
	 * @param {Object} row row to insert
	 * @param {Object} properties animation properties
	 * @alias Titanium.UI.TableView.insertRowAfter
	 */
	insertRowAfter: function (index,row,properties) { },
	/**
	 * insert a row after another row, optionally with animation
	 * @param {Integer} index index
	 * @param {Object} row row to insert
	 * @param {Object} properties animation properties
	 * @alias Titanium.UI.TableView.insertRowBefore
	 */
	insertRowBefore: function (index,row,properties) { },
	/**
	 * remove a previously add view from the view hiearchy
	 * @param {Object} view the view to remove from this views hiearchy
	 * @alias Titanium.UI.TableView.remove
	 */
	remove: function (view) { },
	/**
	 * remove a previously added event listener
	 * @param {String} name name of the event
	 * @param {Function} callback callback function passed in addEventListener
	 * @alias Titanium.UI.TableView.removeEventListener
	 */
	removeEventListener: function (name,callback) { },
	/**
	 * scroll to a specific row index and ensure that that row is on screen
	 * @param {Integer} index index
	 * @param {Object} properties animation properties. <tt>position</tt> property controls the position constant to use for position (on iPhone, use constants from Titanium.UI.iPhone.TableViewScrollPosition).
	 * @alias Titanium.UI.TableView.scrollToIndex
	 */
	scrollToIndex: function (index,properties) { },
	/**
	 * scroll the table to a specific top position where 0 is the topmost y position in the table view
	 * @param {Float} top y position
	 * @param {Object} [properties] optional dictionary with the key <tt>animated</tt> (default, true) as boolean to indicate if the scroll should be animated or immediate
	 * @alias Titanium.UI.TableView.scrollToTop
	 */
	scrollToTop: function (top,properties) { },
	/**
	 * programmatically select a row
	 * @param {Integer} row row index to select
	 * @alias Titanium.UI.TableView.selectRow
	 */
	selectRow: function (row) { },
	/**
	 * set the data in the table, optionally with animation
	 * @param {Array} data data array of rows either as objects or row objects
	 * @param {Object} properties animation properties
	 * @alias Titanium.UI.TableView.setData
	 */
	setData: function (data,properties) { },
	/**
	 * make the view visible
	 * @alias Titanium.UI.TableView.show
	 */
	show: function () { },
	/**
	 * return a Blob image of the rendered view
	 * @param {Function} f function to be invoked upon completion. if non-null, this method will be performed asynchronously. if null, it will be performed immediately
	 * @alias Titanium.UI.TableView.toImage
	 * @return {Object}
	 */
	toImage: function (f) { return {}; },
	/**
	 * update an existing row, optionally with animation
	 * @param {Object} row row data to update
	 * @param {Object} properties animation properties
	 * @alias Titanium.UI.TableView.updateRow
	 */
	updateRow: function (row,properties) { },
};

/**
 * A TableView row object created by the method Titanium.UI.createTableViewRow.
 * @since 0.9
 */
Titanium.UI.TableViewRow = {
	/**
	 * a dictionary with properties x and y to indicate the anchor point value. anchor specifies the position by which animation should occur. center is 0.5, 0.5
	 * @alias Titanium.UI.TableViewRow.anchorPoint
	 * @property {Object}
	 */
	anchorPoint: {},
	/**
	 * Get the a dictionary with properties x and y to indicate the anchor point value. anchor specifies the position by which animation should occur. center is 0.5, 0.5
	 * @alias Titanium.UI.TableViewRow.getAnchorPoint
	 * @return {Object}
	 */
	getAnchorPoint: function () { return anchorPoint; },
	/**
	 * Set the a dictionary with properties x and y to indicate the anchor point value. anchor specifies the position by which animation should occur. center is 0.5, 0.5
	 * @param {Object} value New value to set.
	 * @alias Titanium.UI.TableViewRow.setAnchorPoint
	 */
	setAnchorPoint: function () { },
	/**
	 * read-only object with x and y properties of where the view is during animation
	 * @alias Titanium.UI.TableViewRow.animatedCenterPoint
	 * @property {Object}
	 */
	animatedCenterPoint: {},
	/**
	 * Get the read-only object with x and y properties of where the view is during animation
	 * @alias Titanium.UI.TableViewRow.getAnimatedCenterPoint
	 * @return {Object}
	 */
	getAnimatedCenterPoint: function () { return animatedCenterPoint; },
	/**
	 * Set the read-only object with x and y properties of where the view is during animation
	 * @param {Object} value New value to set.
	 * @alias Titanium.UI.TableViewRow.setAnimatedCenterPoint
	 */
	setAnimatedCenterPoint: function () { },
	/**
	 * the background cell color
	 * @alias Titanium.UI.TableViewRow.backgroundColor
	 * @property {String}
	 */
	backgroundColor: '',
	/**
	 * Get the the background cell color
	 * @alias Titanium.UI.TableViewRow.getBackgroundColor
	 * @return {String}
	 */
	getBackgroundColor: function () { return backgroundColor; },
	/**
	 * Set the the background cell color
	 * @param {String} value New value to set.
	 * @alias Titanium.UI.TableViewRow.setBackgroundColor
	 */
	setBackgroundColor: function () { },
	/**
	 * the disabled background color of the view. (Android)
	 * @alias Titanium.UI.TableViewRow.backgroundDisabledColor
	 * @property {String}
	 */
	backgroundDisabledColor: '',
	/**
	 * Get the the disabled background color of the view. (Android)
	 * @alias Titanium.UI.TableViewRow.getBackgroundDisabledColor
	 * @return {String}
	 */
	getBackgroundDisabledColor: function () { return backgroundDisabledColor; },
	/**
	 * Set the the disabled background color of the view. (Android)
	 * @param {String} value New value to set.
	 * @alias Titanium.UI.TableViewRow.setBackgroundDisabledColor
	 */
	setBackgroundDisabledColor: function () { },
	/**
	 * the disabled background image url of the view. (Android)
	 * @alias Titanium.UI.TableViewRow.backgroundDisabledImage
	 * @property {String}
	 */
	backgroundDisabledImage: '',
	/**
	 * Get the the disabled background image url of the view. (Android)
	 * @alias Titanium.UI.TableViewRow.getBackgroundDisabledImage
	 * @return {String}
	 */
	getBackgroundDisabledImage: function () { return backgroundDisabledImage; },
	/**
	 * Set the the disabled background image url of the view. (Android)
	 * @param {String} value New value to set.
	 * @alias Titanium.UI.TableViewRow.setBackgroundDisabledImage
	 */
	setBackgroundDisabledImage: function () { },
	/**
	 * the focused background color of the view. focusable must be true for normal views. (Android)
	 * @alias Titanium.UI.TableViewRow.backgroundFocusedColor
	 * @property {String}
	 */
	backgroundFocusedColor: '',
	/**
	 * Get the the focused background color of the view. focusable must be true for normal views. (Android)
	 * @alias Titanium.UI.TableViewRow.getBackgroundFocusedColor
	 * @return {String}
	 */
	getBackgroundFocusedColor: function () { return backgroundFocusedColor; },
	/**
	 * Set the the focused background color of the view. focusable must be true for normal views. (Android)
	 * @param {String} value New value to set.
	 * @alias Titanium.UI.TableViewRow.setBackgroundFocusedColor
	 */
	setBackgroundFocusedColor: function () { },
	/**
	 * the focused background image url of the view. focusable must be true for normal views. (Android)
	 * @alias Titanium.UI.TableViewRow.backgroundFocusedImage
	 * @property {String}
	 */
	backgroundFocusedImage: '',
	/**
	 * Get the the focused background image url of the view. focusable must be true for normal views. (Android)
	 * @alias Titanium.UI.TableViewRow.getBackgroundFocusedImage
	 * @return {String}
	 */
	getBackgroundFocusedImage: function () { return backgroundFocusedImage; },
	/**
	 * Set the the focused background image url of the view. focusable must be true for normal views. (Android)
	 * @param {String} value New value to set.
	 * @alias Titanium.UI.TableViewRow.setBackgroundFocusedImage
	 */
	setBackgroundFocusedImage: function () { },
	/**
	 * a background gradient for the view with the properties: type,startPoint,endPoint,startRadius,endRadius,backfillStart,backfillEnd,colors.
	 * @alias Titanium.UI.TableViewRow.backgroundGradient
	 * @property {Object}
	 */
	backgroundGradient: {},
	/**
	 * Get the a background gradient for the view with the properties: type,startPoint,endPoint,startRadius,endRadius,backfillStart,backfillEnd,colors.
	 * @alias Titanium.UI.TableViewRow.getBackgroundGradient
	 * @return {Object}
	 */
	getBackgroundGradient: function () { return backgroundGradient; },
	/**
	 * Set the a background gradient for the view with the properties: type,startPoint,endPoint,startRadius,endRadius,backfillStart,backfillEnd,colors.
	 * @param {Object} value New value to set.
	 * @alias Titanium.UI.TableViewRow.setBackgroundGradient
	 */
	setBackgroundGradient: function () { },
	/**
	 * the background cell image
	 * @alias Titanium.UI.TableViewRow.backgroundImage
	 * @property {String}
	 */
	backgroundImage: '',
	/**
	 * Get the the background cell image
	 * @alias Titanium.UI.TableViewRow.getBackgroundImage
	 * @return {String}
	 */
	getBackgroundImage: function () { return backgroundImage; },
	/**
	 * Set the the background cell image
	 * @param {String} value New value to set.
	 * @alias Titanium.UI.TableViewRow.setBackgroundImage
	 */
	setBackgroundImage: function () { },
	/**
	 * End caps specify the portion of an image that should not be resized when an image is stretched. This technique is used to implement buttons and other resizable image-based interface elements. When a button with end caps is resized, the resizing occurs only in the middle of the button, in the region between the end caps. The end caps themselves keep their original size and appearance. This property specifies the size of the left end cap. The middle (stretchable) portion is assumed to be 1 pixel wide. The right end cap is therefore computed by adding the size of the left end cap and the middle portion together and then subtracting that value from the width of the image
	 * @alias Titanium.UI.TableViewRow.backgroundLeftCap
	 * @property {Float}
	 */
	backgroundLeftCap: 0.0,
	/**
	 * Get the End caps specify the portion of an image that should not be resized when an image is stretched. This technique is used to implement buttons and other resizable image-based interface elements. When a button with end caps is resized, the resizing occurs only in the middle of the button, in the region between the end caps. The end caps themselves keep their original size and appearance. This property specifies the size of the left end cap. The middle (stretchable) portion is assumed to be 1 pixel wide. The right end cap is therefore computed by adding the size of the left end cap and the middle portion together and then subtracting that value from the width of the image
	 * @alias Titanium.UI.TableViewRow.getBackgroundLeftCap
	 * @return {Float}
	 */
	getBackgroundLeftCap: function () { return backgroundLeftCap; },
	/**
	 * Set the End caps specify the portion of an image that should not be resized when an image is stretched. This technique is used to implement buttons and other resizable image-based interface elements. When a button with end caps is resized, the resizing occurs only in the middle of the button, in the region between the end caps. The end caps themselves keep their original size and appearance. This property specifies the size of the left end cap. The middle (stretchable) portion is assumed to be 1 pixel wide. The right end cap is therefore computed by adding the size of the left end cap and the middle portion together and then subtracting that value from the width of the image
	 * @param {Float} value New value to set.
	 * @alias Titanium.UI.TableViewRow.setBackgroundLeftCap
	 */
	setBackgroundLeftCap: function () { },
	/**
	 * the selected background color of the view. focusable must be true for normal views. (Android)
	 * @alias Titanium.UI.TableViewRow.backgroundSelectedColor
	 * @property {String}
	 */
	backgroundSelectedColor: '',
	/**
	 * Get the the selected background color of the view. focusable must be true for normal views. (Android)
	 * @alias Titanium.UI.TableViewRow.getBackgroundSelectedColor
	 * @return {String}
	 */
	getBackgroundSelectedColor: function () { return backgroundSelectedColor; },
	/**
	 * Set the the selected background color of the view. focusable must be true for normal views. (Android)
	 * @param {String} value New value to set.
	 * @alias Titanium.UI.TableViewRow.setBackgroundSelectedColor
	 */
	setBackgroundSelectedColor: function () { },
	/**
	 * the selected background image url of the view. focusable must be true for normal views. (Android)
	 * @alias Titanium.UI.TableViewRow.backgroundSelectedImage
	 * @property {String}
	 */
	backgroundSelectedImage: '',
	/**
	 * Get the the selected background image url of the view. focusable must be true for normal views. (Android)
	 * @alias Titanium.UI.TableViewRow.getBackgroundSelectedImage
	 * @return {String}
	 */
	getBackgroundSelectedImage: function () { return backgroundSelectedImage; },
	/**
	 * Set the the selected background image url of the view. focusable must be true for normal views. (Android)
	 * @param {String} value New value to set.
	 * @alias Titanium.UI.TableViewRow.setBackgroundSelectedImage
	 */
	setBackgroundSelectedImage: function () { },
	/**
	 * End caps specify the portion of an image that should not be resized when an image is stretched. This technique is used to implement buttons and other resizable image-based interface elements. When a button with end caps is resized, the resizing occurs only in the middle of the button, in the region between the end caps. The end caps themselves keep their original size and appearance. This property specifies the size of the top end cap. The middle (stretchable) portion is assumed to be 1 pixel wide. The bottom end cap is therefore computed by adding the size of the top end cap and the middle portion together and then subtracting that value from the height of the image
	 * @alias Titanium.UI.TableViewRow.backgroundTopCap
	 * @property {Float}
	 */
	backgroundTopCap: 0.0,
	/**
	 * Get the End caps specify the portion of an image that should not be resized when an image is stretched. This technique is used to implement buttons and other resizable image-based interface elements. When a button with end caps is resized, the resizing occurs only in the middle of the button, in the region between the end caps. The end caps themselves keep their original size and appearance. This property specifies the size of the top end cap. The middle (stretchable) portion is assumed to be 1 pixel wide. The bottom end cap is therefore computed by adding the size of the top end cap and the middle portion together and then subtracting that value from the height of the image
	 * @alias Titanium.UI.TableViewRow.getBackgroundTopCap
	 * @return {Float}
	 */
	getBackgroundTopCap: function () { return backgroundTopCap; },
	/**
	 * Set the End caps specify the portion of an image that should not be resized when an image is stretched. This technique is used to implement buttons and other resizable image-based interface elements. When a button with end caps is resized, the resizing occurs only in the middle of the button, in the region between the end caps. The end caps themselves keep their original size and appearance. This property specifies the size of the top end cap. The middle (stretchable) portion is assumed to be 1 pixel wide. The bottom end cap is therefore computed by adding the size of the top end cap and the middle portion together and then subtracting that value from the height of the image
	 * @param {Float} value New value to set.
	 * @alias Titanium.UI.TableViewRow.setBackgroundTopCap
	 */
	setBackgroundTopCap: function () { },
	/**
	 * the border color of the view
	 * @alias Titanium.UI.TableViewRow.borderColor
	 * @property {String}
	 */
	borderColor: '',
	/**
	 * Get the the border color of the view
	 * @alias Titanium.UI.TableViewRow.getBorderColor
	 * @return {String}
	 */
	getBorderColor: function () { return borderColor; },
	/**
	 * Set the the border color of the view
	 * @param {String} value New value to set.
	 * @alias Titanium.UI.TableViewRow.setBorderColor
	 */
	setBorderColor: function () { },
	/**
	 * the border radius of the view
	 * @alias Titanium.UI.TableViewRow.borderRadius
	 * @property {Float}
	 */
	borderRadius: 0.0,
	/**
	 * Get the the border radius of the view
	 * @alias Titanium.UI.TableViewRow.getBorderRadius
	 * @return {Float}
	 */
	getBorderRadius: function () { return borderRadius; },
	/**
	 * Set the the border radius of the view
	 * @param {Float} value New value to set.
	 * @alias Titanium.UI.TableViewRow.setBorderRadius
	 */
	setBorderRadius: function () { },
	/**
	 * the border width of the view
	 * @alias Titanium.UI.TableViewRow.borderWidth
	 * @property {Float}
	 */
	borderWidth: 0.0,
	/**
	 * Get the the border width of the view
	 * @alias Titanium.UI.TableViewRow.getBorderWidth
	 * @return {Float}
	 */
	getBorderWidth: function () { return borderWidth; },
	/**
	 * Set the the border width of the view
	 * @param {Float} value New value to set.
	 * @alias Titanium.UI.TableViewRow.setBorderWidth
	 */
	setBorderWidth: function () { },
	/**
	 * property for the view bottom position. This position is relative to the view's parent. Can be either a float value or a dimension string ie 'auto' (default), '50%' (iPhone only).
	 * @alias Titanium.UI.TableViewRow.bottom
	 * @property {Float,String}
	 */
	bottom: 0.0,
	/**
	 * Get the property for the view bottom position. This position is relative to the view's parent. Can be either a float value or a dimension string ie 'auto' (default), '50%' (iPhone only).
	 * @alias Titanium.UI.TableViewRow.getBottom
	 * @return {Float,String}
	 */
	getBottom: function () { return bottom; },
	/**
	 * Set the property for the view bottom position. This position is relative to the view's parent. Can be either a float value or a dimension string ie 'auto' (default), '50%' (iPhone only).
	 * @param {Float,String} value New value to set.
	 * @alias Titanium.UI.TableViewRow.setBottom
	 */
	setBottom: function () { },
	/**
	 * a dictionary with properties x and y to indicate the center of the views position relative to the parent view
	 * @alias Titanium.UI.TableViewRow.center
	 * @property {Object}
	 */
	center: {},
	/**
	 * Get the a dictionary with properties x and y to indicate the center of the views position relative to the parent view
	 * @alias Titanium.UI.TableViewRow.getCenter
	 * @return {Object}
	 */
	getCenter: function () { return center; },
	/**
	 * Set the a dictionary with properties x and y to indicate the center of the views position relative to the parent view
	 * @param {Object} value New value to set.
	 * @alias Titanium.UI.TableViewRow.setCenter
	 */
	setCenter: function () { },
	/**
	 * the class name of the table. each table view cell must have a unique class name if the cell layout is different. however, use the same name for rows that have the same structural layout (even if the content is different) to provide maximum rendering performance.
	 * @alias Titanium.UI.TableViewRow.className
	 * @property {String}
	 */
	className: '',
	/**
	 * Get the the class name of the table. each table view cell must have a unique class name if the cell layout is different. however, use the same name for rows that have the same structural layout (even if the content is different) to provide maximum rendering performance.
	 * @alias Titanium.UI.TableViewRow.getClassName
	 * @return {String}
	 */
	getClassName: function () { return className; },
	/**
	 * Set the the class name of the table. each table view cell must have a unique class name if the cell layout is different. however, use the same name for rows that have the same structural layout (even if the content is different) to provide maximum rendering performance.
	 * @param {String} value New value to set.
	 * @alias Titanium.UI.TableViewRow.setClassName
	 */
	setClassName: function () { },
	/**
	 * default color of the row when not selected
	 * @alias Titanium.UI.TableViewRow.color
	 * @property {String}
	 */
	color: '',
	/**
	 * Get the default color of the row when not selected
	 * @alias Titanium.UI.TableViewRow.getColor
	 * @return {String}
	 */
	getColor: function () { return color; },
	/**
	 * Set the default color of the row when not selected
	 * @param {String} value New value to set.
	 * @alias Titanium.UI.TableViewRow.setColor
	 */
	setColor: function () { },
	/**
	 * Set true if you want a view to be focusable when navigating with the trackball or D-Pad. Default: false. (Android Only)
	 * @alias Titanium.UI.TableViewRow.focusable
	 * @property {Boolean}
	 */
	focusable: false,
	/**
	 * Get the Set true if you want a view to be focusable when navigating with the trackball or D-Pad. Default: false. (Android Only)
	 * @alias Titanium.UI.TableViewRow.getFocusable
	 * @return {Boolean}
	 */
	getFocusable: function () { return focusable; },
	/**
	 * Set the Set true if you want a view to be focusable when navigating with the trackball or D-Pad. Default: false. (Android Only)
	 * @param {Boolean} value New value to set.
	 * @alias Titanium.UI.TableViewRow.setFocusable
	 */
	setFocusable: function () { },
	/**
	 * the font family
	 * @alias Titanium.UI.TableViewRow.font-family
	 * @property {String}
	 */
	font-family: '',
	/**
	 * Get the the font family
	 * @alias Titanium.UI.TableViewRow.getFont-family
	 * @return {String}
	 */
	getFont-family: function () { return font-family; },
	/**
	 * Set the the font family
	 * @param {String} value New value to set.
	 * @alias Titanium.UI.TableViewRow.setFont-family
	 */
	setFont-family: function () { },
	/**
	 * the font size
	 * @alias Titanium.UI.TableViewRow.font-size
	 * @property {String}
	 */
	font-size: '',
	/**
	 * Get the the font size
	 * @alias Titanium.UI.TableViewRow.getFont-size
	 * @return {String}
	 */
	getFont-size: function () { return font-size; },
	/**
	 * Set the the font size
	 * @param {String} value New value to set.
	 * @alias Titanium.UI.TableViewRow.setFont-size
	 */
	setFont-size: function () { },
	/**
	 * the font style, either normal or italics
	 * @alias Titanium.UI.TableViewRow.font-style
	 * @property {String}
	 */
	font-style: '',
	/**
	 * Get the the font style, either normal or italics
	 * @alias Titanium.UI.TableViewRow.getFont-style
	 * @return {String}
	 */
	getFont-style: function () { return font-style; },
	/**
	 * Set the the font style, either normal or italics
	 * @param {String} value New value to set.
	 * @alias Titanium.UI.TableViewRow.setFont-style
	 */
	setFont-style: function () { },
	/**
	 * the font weight, either normal or bold
	 * @alias Titanium.UI.TableViewRow.font-weight
	 * @property {String}
	 */
	font-weight: '',
	/**
	 * Get the the font weight, either normal or bold
	 * @alias Titanium.UI.TableViewRow.getFont-weight
	 * @return {String}
	 */
	getFont-weight: function () { return font-weight; },
	/**
	 * Set the the font weight, either normal or bold
	 * @param {String} value New value to set.
	 * @alias Titanium.UI.TableViewRow.setFont-weight
	 */
	setFont-weight: function () { },
	/**
	 * render a system provided check mark in the right image area of the row cell
	 * @alias Titanium.UI.TableViewRow.hasCheck
	 * @property {Boolean}
	 */
	hasCheck: false,
	/**
	 * Get the render a system provided check mark in the right image area of the row cell
	 * @alias Titanium.UI.TableViewRow.getHasCheck
	 * @return {Boolean}
	 */
	getHasCheck: function () { return hasCheck; },
	/**
	 * Set the render a system provided check mark in the right image area of the row cell
	 * @param {Boolean} value New value to set.
	 * @alias Titanium.UI.TableViewRow.setHasCheck
	 */
	setHasCheck: function () { },
	/**
	 * render a system provided right arrow in the right image area of the row cell
	 * @alias Titanium.UI.TableViewRow.hasChild
	 * @property {Boolean}
	 */
	hasChild: false,
	/**
	 * Get the render a system provided right arrow in the right image area of the row cell
	 * @alias Titanium.UI.TableViewRow.getHasChild
	 * @return {Boolean}
	 */
	getHasChild: function () { return hasChild; },
	/**
	 * Set the render a system provided right arrow in the right image area of the row cell
	 * @param {Boolean} value New value to set.
	 * @alias Titanium.UI.TableViewRow.setHasChild
	 */
	setHasChild: function () { },
	/**
	 * render a system provided blue indicator icon in the right image area of the row cell
	 * @alias Titanium.UI.TableViewRow.hasDetail
	 * @property {Boolean}
	 */
	hasDetail: false,
	/**
	 * Get the render a system provided blue indicator icon in the right image area of the row cell
	 * @alias Titanium.UI.TableViewRow.getHasDetail
	 * @return {Boolean}
	 */
	getHasDetail: function () { return hasDetail; },
	/**
	 * Set the render a system provided blue indicator icon in the right image area of the row cell
	 * @param {Boolean} value New value to set.
	 * @alias Titanium.UI.TableViewRow.setHasDetail
	 */
	setHasDetail: function () { },
	/**
	 * the height of the row. specify auto to calculate the row height based on the size of the child views of the row
	 * @alias Titanium.UI.TableViewRow.height
	 * @property {Float}
	 */
	height: 0.0,
	/**
	 * Get the the height of the row. specify auto to calculate the row height based on the size of the child views of the row
	 * @alias Titanium.UI.TableViewRow.getHeight
	 * @return {Float}
	 */
	getHeight: function () { return height; },
	/**
	 * Set the the height of the row. specify auto to calculate the row height based on the size of the child views of the row
	 * @param {Float} value New value to set.
	 * @alias Titanium.UI.TableViewRow.setHeight
	 */
	setHeight: function () { },
	/**
	 * the indention level for the cell (defaults to 0)
	 * @alias Titanium.UI.TableViewRow.indentionLevel
	 * @property {Integer}
	 */
	indentionLevel: 0,
	/**
	 * Get the the indention level for the cell (defaults to 0)
	 * @alias Titanium.UI.TableViewRow.getIndentionLevel
	 * @return {Integer}
	 */
	getIndentionLevel: function () { return indentionLevel; },
	/**
	 * Set the the indention level for the cell (defaults to 0)
	 * @param {Integer} value New value to set.
	 * @alias Titanium.UI.TableViewRow.setIndentionLevel
	 */
	setIndentionLevel: function () { },
	/**
	 * the layout algorithm to use for the layout. either absolute (default) or vertical.
	 * @alias Titanium.UI.TableViewRow.layout
	 * @property {String}
	 */
	layout: '',
	/**
	 * Get the the layout algorithm to use for the layout. either absolute (default) or vertical.
	 * @alias Titanium.UI.TableViewRow.getLayout
	 * @return {String}
	 */
	getLayout: function () { return layout; },
	/**
	 * Set the the layout algorithm to use for the layout. either absolute (default) or vertical.
	 * @param {String} value New value to set.
	 * @alias Titanium.UI.TableViewRow.setLayout
	 */
	setLayout: function () { },
	/**
	 * property for the view left position. This position is relative to the view's parent. Can be either a float value or a dimension string ie 'auto' (default), '50%' (iPhone only).
	 * @alias Titanium.UI.TableViewRow.left
	 * @property {Float,String}
	 */
	left: 0.0,
	/**
	 * Get the property for the view left position. This position is relative to the view's parent. Can be either a float value or a dimension string ie 'auto' (default), '50%' (iPhone only).
	 * @alias Titanium.UI.TableViewRow.getLeft
	 * @return {Float,String}
	 */
	getLeft: function () { return left; },
	/**
	 * Set the property for the view left position. This position is relative to the view's parent. Can be either a float value or a dimension string ie 'auto' (default), '50%' (iPhone only).
	 * @param {Float,String} value New value to set.
	 * @alias Titanium.UI.TableViewRow.setLeft
	 */
	setLeft: function () { },
	/**
	 * image url to render in the left image area of the row cell
	 * @alias Titanium.UI.TableViewRow.leftImage
	 * @property {String}
	 */
	leftImage: '',
	/**
	 * Get the image url to render in the left image area of the row cell
	 * @alias Titanium.UI.TableViewRow.getLeftImage
	 * @return {String}
	 */
	getLeftImage: function () { return leftImage; },
	/**
	 * Set the image url to render in the left image area of the row cell
	 * @param {String} value New value to set.
	 * @alias Titanium.UI.TableViewRow.setLeftImage
	 */
	setLeftImage: function () { },
	/**
	 * the opacity from 0.0-1.0
	 * @alias Titanium.UI.TableViewRow.opacity
	 * @property {Float}
	 */
	opacity: 0.0,
	/**
	 * Get the the opacity from 0.0-1.0
	 * @alias Titanium.UI.TableViewRow.getOpacity
	 * @return {Float}
	 */
	getOpacity: function () { return opacity; },
	/**
	 * Set the the opacity from 0.0-1.0
	 * @param {Float} value New value to set.
	 * @alias Titanium.UI.TableViewRow.setOpacity
	 */
	setOpacity: function () { },
	/**
	 * property for the view right position. This position is relative to the view's parent. Can be either a float value or a dimension string ie 'auto' (default), '50%' (iPhone only).
	 * @alias Titanium.UI.TableViewRow.right
	 * @property {Float,String}
	 */
	right: 0.0,
	/**
	 * Get the property for the view right position. This position is relative to the view's parent. Can be either a float value or a dimension string ie 'auto' (default), '50%' (iPhone only).
	 * @alias Titanium.UI.TableViewRow.getRight
	 * @return {Float,String}
	 */
	getRight: function () { return right; },
	/**
	 * Set the property for the view right position. This position is relative to the view's parent. Can be either a float value or a dimension string ie 'auto' (default), '50%' (iPhone only).
	 * @param {Float,String} value New value to set.
	 * @alias Titanium.UI.TableViewRow.setRight
	 */
	setRight: function () { },
	/**
	 * image url to render in the right image area of the row cell
	 * @alias Titanium.UI.TableViewRow.rightImage
	 * @property {String}
	 */
	rightImage: '',
	/**
	 * Get the image url to render in the right image area of the row cell
	 * @alias Titanium.UI.TableViewRow.getRightImage
	 * @return {String}
	 */
	getRightImage: function () { return rightImage; },
	/**
	 * Set the image url to render in the right image area of the row cell
	 * @param {String} value New value to set.
	 * @alias Titanium.UI.TableViewRow.setRightImage
	 */
	setRightImage: function () { },
	/**
	 * the background color to render when the row cell is selected
	 * @alias Titanium.UI.TableViewRow.selectedBackgroundColor
	 * @property {String}
	 */
	selectedBackgroundColor: '',
	/**
	 * Get the the background color to render when the row cell is selected
	 * @alias Titanium.UI.TableViewRow.getSelectedBackgroundColor
	 * @return {String}
	 */
	getSelectedBackgroundColor: function () { return selectedBackgroundColor; },
	/**
	 * Set the the background color to render when the row cell is selected
	 * @param {String} value New value to set.
	 * @alias Titanium.UI.TableViewRow.setSelectedBackgroundColor
	 */
	setSelectedBackgroundColor: function () { },
	/**
	 * the background image to render when the row cell is selected
	 * @alias Titanium.UI.TableViewRow.selectedBackgroundImage
	 * @property {String}
	 */
	selectedBackgroundImage: '',
	/**
	 * Get the the background image to render when the row cell is selected
	 * @alias Titanium.UI.TableViewRow.getSelectedBackgroundImage
	 * @return {String}
	 */
	getSelectedBackgroundImage: function () { return selectedBackgroundImage; },
	/**
	 * Set the the background image to render when the row cell is selected
	 * @param {String} value New value to set.
	 * @alias Titanium.UI.TableViewRow.setSelectedBackgroundImage
	 */
	setSelectedBackgroundImage: function () { },
	/**
	 * color of the row during selection
	 * @alias Titanium.UI.TableViewRow.selectedColor
	 * @property {String}
	 */
	selectedColor: '',
	/**
	 * Get the color of the row during selection
	 * @alias Titanium.UI.TableViewRow.getSelectedColor
	 * @return {String}
	 */
	getSelectedColor: function () { return selectedColor; },
	/**
	 * Set the color of the row during selection
	 * @param {String} value New value to set.
	 * @alias Titanium.UI.TableViewRow.setSelectedColor
	 */
	setSelectedColor: function () { },
	/**
	 * a selection style constant to control the selection color. For iPhone, use the constants from Titanium.UI.iPhone.TableViewCellSelectionStyle
	 * @alias Titanium.UI.TableViewRow.selectionStyle
	 * @property {Integer}
	 */
	selectionStyle: 0,
	/**
	 * Get the a selection style constant to control the selection color. For iPhone, use the constants from Titanium.UI.iPhone.TableViewCellSelectionStyle
	 * @alias Titanium.UI.TableViewRow.getSelectionStyle
	 * @return {Integer}
	 */
	getSelectionStyle: function () { return selectionStyle; },
	/**
	 * Set the a selection style constant to control the selection color. For iPhone, use the constants from Titanium.UI.iPhone.TableViewCellSelectionStyle
	 * @param {Integer} value New value to set.
	 * @alias Titanium.UI.TableViewRow.setSelectionStyle
	 */
	setSelectionStyle: function () { },
	/**
	 * the size of the view as a dictionary of width and height properties
	 * @alias Titanium.UI.TableViewRow.size
	 * @property {Object}
	 */
	size: {},
	/**
	 * Get the the size of the view as a dictionary of width and height properties
	 * @alias Titanium.UI.TableViewRow.getSize
	 * @return {Object}
	 */
	getSize: function () { return size; },
	/**
	 * Set the the size of the view as a dictionary of width and height properties
	 * @param {Object} value New value to set.
	 * @alias Titanium.UI.TableViewRow.setSize
	 */
	setSize: function () { },
	/**
	 * One of Titanium.UI.Android.SOFT_KEYBOARD_DEFAULT_ON_FOCUS, Titanium.UI.Android.SOFT_KEYBOARD_HIDE_ON_FOCUS, or Titanium.UI.Android.SOFT_KEYBOARD_SHOW_ON_FOCUS. (Android only)
	 * @alias Titanium.UI.TableViewRow.softKeyboardOnFocus
	 * @property {Integer}
	 */
	softKeyboardOnFocus: 0,
	/**
	 * Get the One of Titanium.UI.Android.SOFT_KEYBOARD_DEFAULT_ON_FOCUS, Titanium.UI.Android.SOFT_KEYBOARD_HIDE_ON_FOCUS, or Titanium.UI.Android.SOFT_KEYBOARD_SHOW_ON_FOCUS. (Android only)
	 * @alias Titanium.UI.TableViewRow.getSoftKeyboardOnFocus
	 * @return {Integer}
	 */
	getSoftKeyboardOnFocus: function () { return softKeyboardOnFocus; },
	/**
	 * Set the One of Titanium.UI.Android.SOFT_KEYBOARD_DEFAULT_ON_FOCUS, Titanium.UI.Android.SOFT_KEYBOARD_HIDE_ON_FOCUS, or Titanium.UI.Android.SOFT_KEYBOARD_SHOW_ON_FOCUS. (Android only)
	 * @param {Integer} value New value to set.
	 * @alias Titanium.UI.TableViewRow.setSoftKeyboardOnFocus
	 */
	setSoftKeyboardOnFocus: function () { },
	/**
	 * the title cell value. do not specify if using views as children of the row
	 * @alias Titanium.UI.TableViewRow.title
	 * @property {String}
	 */
	title: '',
	/**
	 * Get the the title cell value. do not specify if using views as children of the row
	 * @alias Titanium.UI.TableViewRow.getTitle
	 * @return {String}
	 */
	getTitle: function () { return title; },
	/**
	 * Set the the title cell value. do not specify if using views as children of the row
	 * @param {String} value New value to set.
	 * @alias Titanium.UI.TableViewRow.setTitle
	 */
	setTitle: function () { },
	/**
	 * property for the view top position. This position is relative to the view's parent. Can be either a float value or a dimension string ie 'auto' (default), '50%' (iPhone only).
	 * @alias Titanium.UI.TableViewRow.top
	 * @property {Float,String}
	 */
	top: 0.0,
	/**
	 * Get the property for the view top position. This position is relative to the view's parent. Can be either a float value or a dimension string ie 'auto' (default), '50%' (iPhone only).
	 * @alias Titanium.UI.TableViewRow.getTop
	 * @return {Float,String}
	 */
	getTop: function () { return top; },
	/**
	 * Set the property for the view top position. This position is relative to the view's parent. Can be either a float value or a dimension string ie 'auto' (default), '50%' (iPhone only).
	 * @param {Float,String} value New value to set.
	 * @alias Titanium.UI.TableViewRow.setTop
	 */
	setTop: function () { },
	/**
	 * a boolean indicating if the view should receive touch events (true, default) or forward them to peers (false)
	 * @alias Titanium.UI.TableViewRow.touchEnabled
	 * @property {Boolean}
	 */
	touchEnabled: false,
	/**
	 * Get the a boolean indicating if the view should receive touch events (true, default) or forward them to peers (false)
	 * @alias Titanium.UI.TableViewRow.getTouchEnabled
	 * @return {Boolean}
	 */
	getTouchEnabled: function () { return touchEnabled; },
	/**
	 * Set the a boolean indicating if the view should receive touch events (true, default) or forward them to peers (false)
	 * @param {Boolean} value New value to set.
	 * @alias Titanium.UI.TableViewRow.setTouchEnabled
	 */
	setTouchEnabled: function () { },
	/**
	 * the transformation matrix to apply to the view
	 * @alias Titanium.UI.TableViewRow.transform
	 * @property {Object}
	 */
	transform: {},
	/**
	 * Get the the transformation matrix to apply to the view
	 * @alias Titanium.UI.TableViewRow.getTransform
	 * @return {Object}
	 */
	getTransform: function () { return transform; },
	/**
	 * Set the the transformation matrix to apply to the view
	 * @param {Object} value New value to set.
	 * @alias Titanium.UI.TableViewRow.setTransform
	 */
	setTransform: function () { },
	/**
	 * a boolean of the visibility of the view
	 * @alias Titanium.UI.TableViewRow.visible
	 * @property {Boolean}
	 */
	visible: false,
	/**
	 * Get the a boolean of the visibility of the view
	 * @alias Titanium.UI.TableViewRow.getVisible
	 * @return {Boolean}
	 */
	getVisible: function () { return visible; },
	/**
	 * Set the a boolean of the visibility of the view
	 * @param {Boolean} value New value to set.
	 * @alias Titanium.UI.TableViewRow.setVisible
	 */
	setVisible: function () { },
	/**
	 * property for the view width. Can be either a float value or a dimension string ie 'auto' (default), '50%' (iPhone only).
	 * @alias Titanium.UI.TableViewRow.width
	 * @property {Float,String}
	 */
	width: 0.0,
	/**
	 * Get the property for the view width. Can be either a float value or a dimension string ie 'auto' (default), '50%' (iPhone only).
	 * @alias Titanium.UI.TableViewRow.getWidth
	 * @return {Float,String}
	 */
	getWidth: function () { return width; },
	/**
	 * Set the property for the view width. Can be either a float value or a dimension string ie 'auto' (default), '50%' (iPhone only).
	 * @param {Float,String} value New value to set.
	 * @alias Titanium.UI.TableViewRow.setWidth
	 */
	setWidth: function () { },
	/**
	 * the z index position relative to other sibling views
	 * @alias Titanium.UI.TableViewRow.zIndex
	 * @property {Integer}
	 */
	zIndex: 0,
	/**
	 * Get the the z index position relative to other sibling views
	 * @alias Titanium.UI.TableViewRow.getZIndex
	 * @return {Integer}
	 */
	getZIndex: function () { return zIndex; },
	/**
	 * Set the the z index position relative to other sibling views
	 * @param {Integer} value New value to set.
	 * @alias Titanium.UI.TableViewRow.setZIndex
	 */
	setZIndex: function () { },
	/**
	 * add a child to the view hierarchy
	 * @param {Object} view the view to add to this views hiearchy
	 * @alias Titanium.UI.TableViewRow.add
	 */
	add: function (view) { },
	/**
	 * add an event listener for the instance to receive view triggered events
	 * @param {String} name name of the event
	 * @param {Function} callback callback function to invoke when the event is fired
	 * @alias Titanium.UI.TableViewRow.addEventListener
	 */
	addEventListener: function (name,callback) { },
	/**
	 * animate the view
	 * @param {Object} obj either a dictionary of animation properties or an Animation object
	 * @param {Function} callback function to be invoked upon completion of the animation
	 * @alias Titanium.UI.TableViewRow.animate
	 */
	animate: function (obj,callback) { },
	/**
	 * fire a synthesized event to the views listener
	 * @param {String} name name of the event
	 * @param {Object} event event object
	 * @alias Titanium.UI.TableViewRow.fireEvent
	 */
	fireEvent: function (name,event) { },
	/**
	 * hide the view
	 * @alias Titanium.UI.TableViewRow.hide
	 */
	hide: function () { },
	/**
	 * remove a previously add view from the view hiearchy
	 * @param {Object} view the view to remove from this views hiearchy
	 * @alias Titanium.UI.TableViewRow.remove
	 */
	remove: function (view) { },
	/**
	 * remove a previously added event listener
	 * @param {String} name name of the event
	 * @param {Function} callback callback function passed in addEventListener
	 * @alias Titanium.UI.TableViewRow.removeEventListener
	 */
	removeEventListener: function (name,callback) { },
	/**
	 * make the view visible
	 * @alias Titanium.UI.TableViewRow.show
	 */
	show: function () { },
	/**
	 * return a Blob image of the rendered view
	 * @param {Function} f function to be invoked upon completion. if non-null, this method will be performed asynchronously. if null, it will be performed immediately
	 * @alias Titanium.UI.TableViewRow.toImage
	 * @return {Object}
	 */
	toImage: function (f) { return {}; },
};

/**
 * A TableView section object created by the method Titanium.UI.createTableViewSection.
 * @since 0.9
 */
Titanium.UI.TableViewSection = {
	/**
	 * a dictionary with properties x and y to indicate the anchor point value. anchor specifies the position by which animation should occur. center is 0.5, 0.5
	 * @alias Titanium.UI.TableViewSection.anchorPoint
	 * @property {Object}
	 */
	anchorPoint: {},
	/**
	 * Get the a dictionary with properties x and y to indicate the anchor point value. anchor specifies the position by which animation should occur. center is 0.5, 0.5
	 * @alias Titanium.UI.TableViewSection.getAnchorPoint
	 * @return {Object}
	 */
	getAnchorPoint: function () { return anchorPoint; },
	/**
	 * Set the a dictionary with properties x and y to indicate the anchor point value. anchor specifies the position by which animation should occur. center is 0.5, 0.5
	 * @param {Object} value New value to set.
	 * @alias Titanium.UI.TableViewSection.setAnchorPoint
	 */
	setAnchorPoint: function () { },
	/**
	 * read-only object with x and y properties of where the view is during animation
	 * @alias Titanium.UI.TableViewSection.animatedCenterPoint
	 * @property {Object}
	 */
	animatedCenterPoint: {},
	/**
	 * Get the read-only object with x and y properties of where the view is during animation
	 * @alias Titanium.UI.TableViewSection.getAnimatedCenterPoint
	 * @return {Object}
	 */
	getAnimatedCenterPoint: function () { return animatedCenterPoint; },
	/**
	 * Set the read-only object with x and y properties of where the view is during animation
	 * @param {Object} value New value to set.
	 * @alias Titanium.UI.TableViewSection.setAnimatedCenterPoint
	 */
	setAnimatedCenterPoint: function () { },
	/**
	 * the background color of the view
	 * @alias Titanium.UI.TableViewSection.backgroundColor
	 * @property {String}
	 */
	backgroundColor: '',
	/**
	 * Get the the background color of the view
	 * @alias Titanium.UI.TableViewSection.getBackgroundColor
	 * @return {String}
	 */
	getBackgroundColor: function () { return backgroundColor; },
	/**
	 * Set the the background color of the view
	 * @param {String} value New value to set.
	 * @alias Titanium.UI.TableViewSection.setBackgroundColor
	 */
	setBackgroundColor: function () { },
	/**
	 * the disabled background color of the view. (Android)
	 * @alias Titanium.UI.TableViewSection.backgroundDisabledColor
	 * @property {String}
	 */
	backgroundDisabledColor: '',
	/**
	 * Get the the disabled background color of the view. (Android)
	 * @alias Titanium.UI.TableViewSection.getBackgroundDisabledColor
	 * @return {String}
	 */
	getBackgroundDisabledColor: function () { return backgroundDisabledColor; },
	/**
	 * Set the the disabled background color of the view. (Android)
	 * @param {String} value New value to set.
	 * @alias Titanium.UI.TableViewSection.setBackgroundDisabledColor
	 */
	setBackgroundDisabledColor: function () { },
	/**
	 * the disabled background image url of the view. (Android)
	 * @alias Titanium.UI.TableViewSection.backgroundDisabledImage
	 * @property {String}
	 */
	backgroundDisabledImage: '',
	/**
	 * Get the the disabled background image url of the view. (Android)
	 * @alias Titanium.UI.TableViewSection.getBackgroundDisabledImage
	 * @return {String}
	 */
	getBackgroundDisabledImage: function () { return backgroundDisabledImage; },
	/**
	 * Set the the disabled background image url of the view. (Android)
	 * @param {String} value New value to set.
	 * @alias Titanium.UI.TableViewSection.setBackgroundDisabledImage
	 */
	setBackgroundDisabledImage: function () { },
	/**
	 * the focused background color of the view. focusable must be true for normal views. (Android)
	 * @alias Titanium.UI.TableViewSection.backgroundFocusedColor
	 * @property {String}
	 */
	backgroundFocusedColor: '',
	/**
	 * Get the the focused background color of the view. focusable must be true for normal views. (Android)
	 * @alias Titanium.UI.TableViewSection.getBackgroundFocusedColor
	 * @return {String}
	 */
	getBackgroundFocusedColor: function () { return backgroundFocusedColor; },
	/**
	 * Set the the focused background color of the view. focusable must be true for normal views. (Android)
	 * @param {String} value New value to set.
	 * @alias Titanium.UI.TableViewSection.setBackgroundFocusedColor
	 */
	setBackgroundFocusedColor: function () { },
	/**
	 * the focused background image url of the view. focusable must be true for normal views. (Android)
	 * @alias Titanium.UI.TableViewSection.backgroundFocusedImage
	 * @property {String}
	 */
	backgroundFocusedImage: '',
	/**
	 * Get the the focused background image url of the view. focusable must be true for normal views. (Android)
	 * @alias Titanium.UI.TableViewSection.getBackgroundFocusedImage
	 * @return {String}
	 */
	getBackgroundFocusedImage: function () { return backgroundFocusedImage; },
	/**
	 * Set the the focused background image url of the view. focusable must be true for normal views. (Android)
	 * @param {String} value New value to set.
	 * @alias Titanium.UI.TableViewSection.setBackgroundFocusedImage
	 */
	setBackgroundFocusedImage: function () { },
	/**
	 * a background gradient for the view with the properties: type,startPoint,endPoint,startRadius,endRadius,backfillStart,backfillEnd,colors.
	 * @alias Titanium.UI.TableViewSection.backgroundGradient
	 * @property {Object}
	 */
	backgroundGradient: {},
	/**
	 * Get the a background gradient for the view with the properties: type,startPoint,endPoint,startRadius,endRadius,backfillStart,backfillEnd,colors.
	 * @alias Titanium.UI.TableViewSection.getBackgroundGradient
	 * @return {Object}
	 */
	getBackgroundGradient: function () { return backgroundGradient; },
	/**
	 * Set the a background gradient for the view with the properties: type,startPoint,endPoint,startRadius,endRadius,backfillStart,backfillEnd,colors.
	 * @param {Object} value New value to set.
	 * @alias Titanium.UI.TableViewSection.setBackgroundGradient
	 */
	setBackgroundGradient: function () { },
	/**
	 * the background image url of the view
	 * @alias Titanium.UI.TableViewSection.backgroundImage
	 * @property {String}
	 */
	backgroundImage: '',
	/**
	 * Get the the background image url of the view
	 * @alias Titanium.UI.TableViewSection.getBackgroundImage
	 * @return {String}
	 */
	getBackgroundImage: function () { return backgroundImage; },
	/**
	 * Set the the background image url of the view
	 * @param {String} value New value to set.
	 * @alias Titanium.UI.TableViewSection.setBackgroundImage
	 */
	setBackgroundImage: function () { },
	/**
	 * End caps specify the portion of an image that should not be resized when an image is stretched. This technique is used to implement buttons and other resizable image-based interface elements. When a button with end caps is resized, the resizing occurs only in the middle of the button, in the region between the end caps. The end caps themselves keep their original size and appearance. This property specifies the size of the left end cap. The middle (stretchable) portion is assumed to be 1 pixel wide. The right end cap is therefore computed by adding the size of the left end cap and the middle portion together and then subtracting that value from the width of the image
	 * @alias Titanium.UI.TableViewSection.backgroundLeftCap
	 * @property {Float}
	 */
	backgroundLeftCap: 0.0,
	/**
	 * Get the End caps specify the portion of an image that should not be resized when an image is stretched. This technique is used to implement buttons and other resizable image-based interface elements. When a button with end caps is resized, the resizing occurs only in the middle of the button, in the region between the end caps. The end caps themselves keep their original size and appearance. This property specifies the size of the left end cap. The middle (stretchable) portion is assumed to be 1 pixel wide. The right end cap is therefore computed by adding the size of the left end cap and the middle portion together and then subtracting that value from the width of the image
	 * @alias Titanium.UI.TableViewSection.getBackgroundLeftCap
	 * @return {Float}
	 */
	getBackgroundLeftCap: function () { return backgroundLeftCap; },
	/**
	 * Set the End caps specify the portion of an image that should not be resized when an image is stretched. This technique is used to implement buttons and other resizable image-based interface elements. When a button with end caps is resized, the resizing occurs only in the middle of the button, in the region between the end caps. The end caps themselves keep their original size and appearance. This property specifies the size of the left end cap. The middle (stretchable) portion is assumed to be 1 pixel wide. The right end cap is therefore computed by adding the size of the left end cap and the middle portion together and then subtracting that value from the width of the image
	 * @param {Float} value New value to set.
	 * @alias Titanium.UI.TableViewSection.setBackgroundLeftCap
	 */
	setBackgroundLeftCap: function () { },
	/**
	 * the selected background color of the view. focusable must be true for normal views. (Android)
	 * @alias Titanium.UI.TableViewSection.backgroundSelectedColor
	 * @property {String}
	 */
	backgroundSelectedColor: '',
	/**
	 * Get the the selected background color of the view. focusable must be true for normal views. (Android)
	 * @alias Titanium.UI.TableViewSection.getBackgroundSelectedColor
	 * @return {String}
	 */
	getBackgroundSelectedColor: function () { return backgroundSelectedColor; },
	/**
	 * Set the the selected background color of the view. focusable must be true for normal views. (Android)
	 * @param {String} value New value to set.
	 * @alias Titanium.UI.TableViewSection.setBackgroundSelectedColor
	 */
	setBackgroundSelectedColor: function () { },
	/**
	 * the selected background image url of the view. focusable must be true for normal views. (Android)
	 * @alias Titanium.UI.TableViewSection.backgroundSelectedImage
	 * @property {String}
	 */
	backgroundSelectedImage: '',
	/**
	 * Get the the selected background image url of the view. focusable must be true for normal views. (Android)
	 * @alias Titanium.UI.TableViewSection.getBackgroundSelectedImage
	 * @return {String}
	 */
	getBackgroundSelectedImage: function () { return backgroundSelectedImage; },
	/**
	 * Set the the selected background image url of the view. focusable must be true for normal views. (Android)
	 * @param {String} value New value to set.
	 * @alias Titanium.UI.TableViewSection.setBackgroundSelectedImage
	 */
	setBackgroundSelectedImage: function () { },
	/**
	 * End caps specify the portion of an image that should not be resized when an image is stretched. This technique is used to implement buttons and other resizable image-based interface elements. When a button with end caps is resized, the resizing occurs only in the middle of the button, in the region between the end caps. The end caps themselves keep their original size and appearance. This property specifies the size of the top end cap. The middle (stretchable) portion is assumed to be 1 pixel wide. The bottom end cap is therefore computed by adding the size of the top end cap and the middle portion together and then subtracting that value from the height of the image
	 * @alias Titanium.UI.TableViewSection.backgroundTopCap
	 * @property {Float}
	 */
	backgroundTopCap: 0.0,
	/**
	 * Get the End caps specify the portion of an image that should not be resized when an image is stretched. This technique is used to implement buttons and other resizable image-based interface elements. When a button with end caps is resized, the resizing occurs only in the middle of the button, in the region between the end caps. The end caps themselves keep their original size and appearance. This property specifies the size of the top end cap. The middle (stretchable) portion is assumed to be 1 pixel wide. The bottom end cap is therefore computed by adding the size of the top end cap and the middle portion together and then subtracting that value from the height of the image
	 * @alias Titanium.UI.TableViewSection.getBackgroundTopCap
	 * @return {Float}
	 */
	getBackgroundTopCap: function () { return backgroundTopCap; },
	/**
	 * Set the End caps specify the portion of an image that should not be resized when an image is stretched. This technique is used to implement buttons and other resizable image-based interface elements. When a button with end caps is resized, the resizing occurs only in the middle of the button, in the region between the end caps. The end caps themselves keep their original size and appearance. This property specifies the size of the top end cap. The middle (stretchable) portion is assumed to be 1 pixel wide. The bottom end cap is therefore computed by adding the size of the top end cap and the middle portion together and then subtracting that value from the height of the image
	 * @param {Float} value New value to set.
	 * @alias Titanium.UI.TableViewSection.setBackgroundTopCap
	 */
	setBackgroundTopCap: function () { },
	/**
	 * the border color of the view
	 * @alias Titanium.UI.TableViewSection.borderColor
	 * @property {String}
	 */
	borderColor: '',
	/**
	 * Get the the border color of the view
	 * @alias Titanium.UI.TableViewSection.getBorderColor
	 * @return {String}
	 */
	getBorderColor: function () { return borderColor; },
	/**
	 * Set the the border color of the view
	 * @param {String} value New value to set.
	 * @alias Titanium.UI.TableViewSection.setBorderColor
	 */
	setBorderColor: function () { },
	/**
	 * the border radius of the view
	 * @alias Titanium.UI.TableViewSection.borderRadius
	 * @property {Float}
	 */
	borderRadius: 0.0,
	/**
	 * Get the the border radius of the view
	 * @alias Titanium.UI.TableViewSection.getBorderRadius
	 * @return {Float}
	 */
	getBorderRadius: function () { return borderRadius; },
	/**
	 * Set the the border radius of the view
	 * @param {Float} value New value to set.
	 * @alias Titanium.UI.TableViewSection.setBorderRadius
	 */
	setBorderRadius: function () { },
	/**
	 * the border width of the view
	 * @alias Titanium.UI.TableViewSection.borderWidth
	 * @property {Float}
	 */
	borderWidth: 0.0,
	/**
	 * Get the the border width of the view
	 * @alias Titanium.UI.TableViewSection.getBorderWidth
	 * @return {Float}
	 */
	getBorderWidth: function () { return borderWidth; },
	/**
	 * Set the the border width of the view
	 * @param {Float} value New value to set.
	 * @alias Titanium.UI.TableViewSection.setBorderWidth
	 */
	setBorderWidth: function () { },
	/**
	 * property for the view bottom position. This position is relative to the view's parent. Can be either a float value or a dimension string ie 'auto' (default), '50%' (iPhone only).
	 * @alias Titanium.UI.TableViewSection.bottom
	 * @property {Float,String}
	 */
	bottom: 0.0,
	/**
	 * Get the property for the view bottom position. This position is relative to the view's parent. Can be either a float value or a dimension string ie 'auto' (default), '50%' (iPhone only).
	 * @alias Titanium.UI.TableViewSection.getBottom
	 * @return {Float,String}
	 */
	getBottom: function () { return bottom; },
	/**
	 * Set the property for the view bottom position. This position is relative to the view's parent. Can be either a float value or a dimension string ie 'auto' (default), '50%' (iPhone only).
	 * @param {Float,String} value New value to set.
	 * @alias Titanium.UI.TableViewSection.setBottom
	 */
	setBottom: function () { },
	/**
	 * a dictionary with properties x and y to indicate the center of the views position relative to the parent view
	 * @alias Titanium.UI.TableViewSection.center
	 * @property {Object}
	 */
	center: {},
	/**
	 * Get the a dictionary with properties x and y to indicate the center of the views position relative to the parent view
	 * @alias Titanium.UI.TableViewSection.getCenter
	 * @return {Object}
	 */
	getCenter: function () { return center; },
	/**
	 * Set the a dictionary with properties x and y to indicate the center of the views position relative to the parent view
	 * @param {Object} value New value to set.
	 * @alias Titanium.UI.TableViewSection.setCenter
	 */
	setCenter: function () { },
	/**
	 * Set true if you want a view to be focusable when navigating with the trackball or D-Pad. Default: false. (Android Only)
	 * @alias Titanium.UI.TableViewSection.focusable
	 * @property {Boolean}
	 */
	focusable: false,
	/**
	 * Get the Set true if you want a view to be focusable when navigating with the trackball or D-Pad. Default: false. (Android Only)
	 * @alias Titanium.UI.TableViewSection.getFocusable
	 * @return {Boolean}
	 */
	getFocusable: function () { return focusable; },
	/**
	 * Set the Set true if you want a view to be focusable when navigating with the trackball or D-Pad. Default: false. (Android Only)
	 * @param {Boolean} value New value to set.
	 * @alias Titanium.UI.TableViewSection.setFocusable
	 */
	setFocusable: function () { },
	/**
	 * the font family
	 * @alias Titanium.UI.TableViewSection.font-family
	 * @property {String}
	 */
	font-family: '',
	/**
	 * Get the the font family
	 * @alias Titanium.UI.TableViewSection.getFont-family
	 * @return {String}
	 */
	getFont-family: function () { return font-family; },
	/**
	 * Set the the font family
	 * @param {String} value New value to set.
	 * @alias Titanium.UI.TableViewSection.setFont-family
	 */
	setFont-family: function () { },
	/**
	 * the font size
	 * @alias Titanium.UI.TableViewSection.font-size
	 * @property {String}
	 */
	font-size: '',
	/**
	 * Get the the font size
	 * @alias Titanium.UI.TableViewSection.getFont-size
	 * @return {String}
	 */
	getFont-size: function () { return font-size; },
	/**
	 * Set the the font size
	 * @param {String} value New value to set.
	 * @alias Titanium.UI.TableViewSection.setFont-size
	 */
	setFont-size: function () { },
	/**
	 * the font style, either normal or italics
	 * @alias Titanium.UI.TableViewSection.font-style
	 * @property {String}
	 */
	font-style: '',
	/**
	 * Get the the font style, either normal or italics
	 * @alias Titanium.UI.TableViewSection.getFont-style
	 * @return {String}
	 */
	getFont-style: function () { return font-style; },
	/**
	 * Set the the font style, either normal or italics
	 * @param {String} value New value to set.
	 * @alias Titanium.UI.TableViewSection.setFont-style
	 */
	setFont-style: function () { },
	/**
	 * the font weight, either normal or bold
	 * @alias Titanium.UI.TableViewSection.font-weight
	 * @property {String}
	 */
	font-weight: '',
	/**
	 * Get the the font weight, either normal or bold
	 * @alias Titanium.UI.TableViewSection.getFont-weight
	 * @return {String}
	 */
	getFont-weight: function () { return font-weight; },
	/**
	 * Set the the font weight, either normal or bold
	 * @param {String} value New value to set.
	 * @alias Titanium.UI.TableViewSection.setFont-weight
	 */
	setFont-weight: function () { },
	/**
	 * the title of the section footer
	 * @alias Titanium.UI.TableViewSection.footerTitle
	 * @property {String}
	 */
	footerTitle: '',
	/**
	 * Get the the title of the section footer
	 * @alias Titanium.UI.TableViewSection.getFooterTitle
	 * @return {String}
	 */
	getFooterTitle: function () { return footerTitle; },
	/**
	 * Set the the title of the section footer
	 * @param {String} value New value to set.
	 * @alias Titanium.UI.TableViewSection.setFooterTitle
	 */
	setFooterTitle: function () { },
	/**
	 * a view to use instead of the default label when rendering the section footer
	 * @alias Titanium.UI.TableViewSection.footerView
	 * @property {Object}
	 */
	footerView: {},
	/**
	 * Get the a view to use instead of the default label when rendering the section footer
	 * @alias Titanium.UI.TableViewSection.getFooterView
	 * @return {Object}
	 */
	getFooterView: function () { return footerView; },
	/**
	 * Set the a view to use instead of the default label when rendering the section footer
	 * @param {Object} value New value to set.
	 * @alias Titanium.UI.TableViewSection.setFooterView
	 */
	setFooterView: function () { },
	/**
	 * the title of the section header
	 * @alias Titanium.UI.TableViewSection.headerTitle
	 * @property {String}
	 */
	headerTitle: '',
	/**
	 * Get the the title of the section header
	 * @alias Titanium.UI.TableViewSection.getHeaderTitle
	 * @return {String}
	 */
	getHeaderTitle: function () { return headerTitle; },
	/**
	 * Set the the title of the section header
	 * @param {String} value New value to set.
	 * @alias Titanium.UI.TableViewSection.setHeaderTitle
	 */
	setHeaderTitle: function () { },
	/**
	 * a view to use instead of the default label when rendering the section header
	 * @alias Titanium.UI.TableViewSection.headerView
	 * @property {Object}
	 */
	headerView: {},
	/**
	 * Get the a view to use instead of the default label when rendering the section header
	 * @alias Titanium.UI.TableViewSection.getHeaderView
	 * @return {Object}
	 */
	getHeaderView: function () { return headerView; },
	/**
	 * Set the a view to use instead of the default label when rendering the section header
	 * @param {Object} value New value to set.
	 * @alias Titanium.UI.TableViewSection.setHeaderView
	 */
	setHeaderView: function () { },
	/**
	 * property for the view height. Can be either a float value or a dimension string ie 'auto' (default), '50%' (iPhone only).
	 * @alias Titanium.UI.TableViewSection.height
	 * @property {Float,String}
	 */
	height: 0.0,
	/**
	 * Get the property for the view height. Can be either a float value or a dimension string ie 'auto' (default), '50%' (iPhone only).
	 * @alias Titanium.UI.TableViewSection.getHeight
	 * @return {Float,String}
	 */
	getHeight: function () { return height; },
	/**
	 * Set the property for the view height. Can be either a float value or a dimension string ie 'auto' (default), '50%' (iPhone only).
	 * @param {Float,String} value New value to set.
	 * @alias Titanium.UI.TableViewSection.setHeight
	 */
	setHeight: function () { },
	/**
	 * property for the view left position. This position is relative to the view's parent. Can be either a float value or a dimension string ie 'auto' (default), '50%' (iPhone only).
	 * @alias Titanium.UI.TableViewSection.left
	 * @property {Float,String}
	 */
	left: 0.0,
	/**
	 * Get the property for the view left position. This position is relative to the view's parent. Can be either a float value or a dimension string ie 'auto' (default), '50%' (iPhone only).
	 * @alias Titanium.UI.TableViewSection.getLeft
	 * @return {Float,String}
	 */
	getLeft: function () { return left; },
	/**
	 * Set the property for the view left position. This position is relative to the view's parent. Can be either a float value or a dimension string ie 'auto' (default), '50%' (iPhone only).
	 * @param {Float,String} value New value to set.
	 * @alias Titanium.UI.TableViewSection.setLeft
	 */
	setLeft: function () { },
	/**
	 * the opacity from 0.0-1.0
	 * @alias Titanium.UI.TableViewSection.opacity
	 * @property {Float}
	 */
	opacity: 0.0,
	/**
	 * Get the the opacity from 0.0-1.0
	 * @alias Titanium.UI.TableViewSection.getOpacity
	 * @return {Float}
	 */
	getOpacity: function () { return opacity; },
	/**
	 * Set the the opacity from 0.0-1.0
	 * @param {Float} value New value to set.
	 * @alias Titanium.UI.TableViewSection.setOpacity
	 */
	setOpacity: function () { },
	/**
	 * property for the view right position. This position is relative to the view's parent. Can be either a float value or a dimension string ie 'auto' (default), '50%' (iPhone only).
	 * @alias Titanium.UI.TableViewSection.right
	 * @property {Float,String}
	 */
	right: 0.0,
	/**
	 * Get the property for the view right position. This position is relative to the view's parent. Can be either a float value or a dimension string ie 'auto' (default), '50%' (iPhone only).
	 * @alias Titanium.UI.TableViewSection.getRight
	 * @return {Float,String}
	 */
	getRight: function () { return right; },
	/**
	 * Set the property for the view right position. This position is relative to the view's parent. Can be either a float value or a dimension string ie 'auto' (default), '50%' (iPhone only).
	 * @param {Float,String} value New value to set.
	 * @alias Titanium.UI.TableViewSection.setRight
	 */
	setRight: function () { },
	/**
	 * the (readonly) number of rows in the section
	 * @alias Titanium.UI.TableViewSection.rowCount
	 * @property {Integer}
	 */
	rowCount: 0,
	/**
	 * Get the the (readonly) number of rows in the section
	 * @alias Titanium.UI.TableViewSection.getRowCount
	 * @return {Integer}
	 */
	getRowCount: function () { return rowCount; },
	/**
	 * Set the the (readonly) number of rows in the section
	 * @param {Integer} value New value to set.
	 * @alias Titanium.UI.TableViewSection.setRowCount
	 */
	setRowCount: function () { },
	/**
	 * the size of the view as a dictionary of width and height properties
	 * @alias Titanium.UI.TableViewSection.size
	 * @property {Object}
	 */
	size: {},
	/**
	 * Get the the size of the view as a dictionary of width and height properties
	 * @alias Titanium.UI.TableViewSection.getSize
	 * @return {Object}
	 */
	getSize: function () { return size; },
	/**
	 * Set the the size of the view as a dictionary of width and height properties
	 * @param {Object} value New value to set.
	 * @alias Titanium.UI.TableViewSection.setSize
	 */
	setSize: function () { },
	/**
	 * One of Titanium.UI.Android.SOFT_KEYBOARD_DEFAULT_ON_FOCUS, Titanium.UI.Android.SOFT_KEYBOARD_HIDE_ON_FOCUS, or Titanium.UI.Android.SOFT_KEYBOARD_SHOW_ON_FOCUS. (Android only)
	 * @alias Titanium.UI.TableViewSection.softKeyboardOnFocus
	 * @property {Integer}
	 */
	softKeyboardOnFocus: 0,
	/**
	 * Get the One of Titanium.UI.Android.SOFT_KEYBOARD_DEFAULT_ON_FOCUS, Titanium.UI.Android.SOFT_KEYBOARD_HIDE_ON_FOCUS, or Titanium.UI.Android.SOFT_KEYBOARD_SHOW_ON_FOCUS. (Android only)
	 * @alias Titanium.UI.TableViewSection.getSoftKeyboardOnFocus
	 * @return {Integer}
	 */
	getSoftKeyboardOnFocus: function () { return softKeyboardOnFocus; },
	/**
	 * Set the One of Titanium.UI.Android.SOFT_KEYBOARD_DEFAULT_ON_FOCUS, Titanium.UI.Android.SOFT_KEYBOARD_HIDE_ON_FOCUS, or Titanium.UI.Android.SOFT_KEYBOARD_SHOW_ON_FOCUS. (Android only)
	 * @param {Integer} value New value to set.
	 * @alias Titanium.UI.TableViewSection.setSoftKeyboardOnFocus
	 */
	setSoftKeyboardOnFocus: function () { },
	/**
	 * property for the view top position. This position is relative to the view's parent. Can be either a float value or a dimension string ie 'auto' (default), '50%' (iPhone only).
	 * @alias Titanium.UI.TableViewSection.top
	 * @property {Float,String}
	 */
	top: 0.0,
	/**
	 * Get the property for the view top position. This position is relative to the view's parent. Can be either a float value or a dimension string ie 'auto' (default), '50%' (iPhone only).
	 * @alias Titanium.UI.TableViewSection.getTop
	 * @return {Float,String}
	 */
	getTop: function () { return top; },
	/**
	 * Set the property for the view top position. This position is relative to the view's parent. Can be either a float value or a dimension string ie 'auto' (default), '50%' (iPhone only).
	 * @param {Float,String} value New value to set.
	 * @alias Titanium.UI.TableViewSection.setTop
	 */
	setTop: function () { },
	/**
	 * a boolean indicating if the view should receive touch events (true, default) or forward them to peers (false)
	 * @alias Titanium.UI.TableViewSection.touchEnabled
	 * @property {Boolean}
	 */
	touchEnabled: false,
	/**
	 * Get the a boolean indicating if the view should receive touch events (true, default) or forward them to peers (false)
	 * @alias Titanium.UI.TableViewSection.getTouchEnabled
	 * @return {Boolean}
	 */
	getTouchEnabled: function () { return touchEnabled; },
	/**
	 * Set the a boolean indicating if the view should receive touch events (true, default) or forward them to peers (false)
	 * @param {Boolean} value New value to set.
	 * @alias Titanium.UI.TableViewSection.setTouchEnabled
	 */
	setTouchEnabled: function () { },
	/**
	 * the transformation matrix to apply to the view
	 * @alias Titanium.UI.TableViewSection.transform
	 * @property {Object}
	 */
	transform: {},
	/**
	 * Get the the transformation matrix to apply to the view
	 * @alias Titanium.UI.TableViewSection.getTransform
	 * @return {Object}
	 */
	getTransform: function () { return transform; },
	/**
	 * Set the the transformation matrix to apply to the view
	 * @param {Object} value New value to set.
	 * @alias Titanium.UI.TableViewSection.setTransform
	 */
	setTransform: function () { },
	/**
	 * a boolean of the visibility of the view
	 * @alias Titanium.UI.TableViewSection.visible
	 * @property {Boolean}
	 */
	visible: false,
	/**
	 * Get the a boolean of the visibility of the view
	 * @alias Titanium.UI.TableViewSection.getVisible
	 * @return {Boolean}
	 */
	getVisible: function () { return visible; },
	/**
	 * Set the a boolean of the visibility of the view
	 * @param {Boolean} value New value to set.
	 * @alias Titanium.UI.TableViewSection.setVisible
	 */
	setVisible: function () { },
	/**
	 * property for the view width. Can be either a float value or a dimension string ie 'auto' (default), '50%' (iPhone only).
	 * @alias Titanium.UI.TableViewSection.width
	 * @property {Float,String}
	 */
	width: 0.0,
	/**
	 * Get the property for the view width. Can be either a float value or a dimension string ie 'auto' (default), '50%' (iPhone only).
	 * @alias Titanium.UI.TableViewSection.getWidth
	 * @return {Float,String}
	 */
	getWidth: function () { return width; },
	/**
	 * Set the property for the view width. Can be either a float value or a dimension string ie 'auto' (default), '50%' (iPhone only).
	 * @param {Float,String} value New value to set.
	 * @alias Titanium.UI.TableViewSection.setWidth
	 */
	setWidth: function () { },
	/**
	 * the z index position relative to other sibling views
	 * @alias Titanium.UI.TableViewSection.zIndex
	 * @property {Integer}
	 */
	zIndex: 0,
	/**
	 * Get the the z index position relative to other sibling views
	 * @alias Titanium.UI.TableViewSection.getZIndex
	 * @return {Integer}
	 */
	getZIndex: function () { return zIndex; },
	/**
	 * Set the the z index position relative to other sibling views
	 * @param {Integer} value New value to set.
	 * @alias Titanium.UI.TableViewSection.setZIndex
	 */
	setZIndex: function () { },
	/**
	 * add a row to the section
	 * @param {Object} view the view to add to this views hiearchy
	 * @param {Object} row the row object to add to the section
	 * @alias Titanium.UI.TableViewSection.add
	 */
	add: function (view,row) { },
	/**
	 * add an event listener for the instance to receive view triggered events
	 * @param {String} name name of the event
	 * @param {Function} callback callback function to invoke when the event is fired
	 * @alias Titanium.UI.TableViewSection.addEventListener
	 */
	addEventListener: function (name,callback) { },
	/**
	 * animate the view
	 * @param {Object} obj either a dictionary of animation properties or an Animation object
	 * @param {Function} callback function to be invoked upon completion of the animation
	 * @alias Titanium.UI.TableViewSection.animate
	 */
	animate: function (obj,callback) { },
	/**
	 * fire a synthesized event to the views listener
	 * @param {String} name name of the event
	 * @param {Object} event event object
	 * @alias Titanium.UI.TableViewSection.fireEvent
	 */
	fireEvent: function (name,event) { },
	/**
	 * hide the view
	 * @alias Titanium.UI.TableViewSection.hide
	 */
	hide: function () { },
	/**
	 * remove a remove from the section
	 * @param {Object} view the view to remove from this views hiearchy
	 * @param {Object} row the row object to remove from the section
	 * @alias Titanium.UI.TableViewSection.remove
	 */
	remove: function (view,row) { },
	/**
	 * remove a previously added event listener
	 * @param {String} name name of the event
	 * @param {Function} callback callback function passed in addEventListener
	 * @alias Titanium.UI.TableViewSection.removeEventListener
	 */
	removeEventListener: function (name,callback) { },
	/**
	 * make the view visible
	 * @alias Titanium.UI.TableViewSection.show
	 */
	show: function () { },
	/**
	 * return a Blob image of the rendered view
	 * @param {Function} f function to be invoked upon completion. if non-null, this method will be performed asynchronously. if null, it will be performed immediately
	 * @alias Titanium.UI.TableViewSection.toImage
	 * @return {Object}
	 */
	toImage: function (f) { return {}; },
};

/**
 * A Text Area is created by the method Titanium.UI.createTextArea. The Text Area is a multiline field.
 * @since 0.8
 */
Titanium.UI.TextArea = {
	/**
	 * a dictionary with properties x and y to indicate the anchor point value. anchor specifies the position by which animation should occur. center is 0.5, 0.5
	 * @alias Titanium.UI.TextArea.anchorPoint
	 * @property {Object}
	 */
	anchorPoint: {},
	/**
	 * Get the a dictionary with properties x and y to indicate the anchor point value. anchor specifies the position by which animation should occur. center is 0.5, 0.5
	 * @alias Titanium.UI.TextArea.getAnchorPoint
	 * @return {Object}
	 */
	getAnchorPoint: function () { return anchorPoint; },
	/**
	 * Set the a dictionary with properties x and y to indicate the anchor point value. anchor specifies the position by which animation should occur. center is 0.5, 0.5
	 * @param {Object} value New value to set.
	 * @alias Titanium.UI.TextArea.setAnchorPoint
	 */
	setAnchorPoint: function () { },
	/**
	 * read-only object with x and y properties of where the view is during animation
	 * @alias Titanium.UI.TextArea.animatedCenterPoint
	 * @property {Object}
	 */
	animatedCenterPoint: {},
	/**
	 * Get the read-only object with x and y properties of where the view is during animation
	 * @alias Titanium.UI.TextArea.getAnimatedCenterPoint
	 * @return {Object}
	 */
	getAnimatedCenterPoint: function () { return animatedCenterPoint; },
	/**
	 * Set the read-only object with x and y properties of where the view is during animation
	 * @param {Object} value New value to set.
	 * @alias Titanium.UI.TextArea.setAnimatedCenterPoint
	 */
	setAnimatedCenterPoint: function () { },
	/**
	 * value of the background color of the field
	 * @alias Titanium.UI.TextArea.backgroundColor
	 * @property {String}
	 */
	backgroundColor: '',
	/**
	 * Get the value of the background color of the field
	 * @alias Titanium.UI.TextArea.getBackgroundColor
	 * @return {String}
	 */
	getBackgroundColor: function () { return backgroundColor; },
	/**
	 * Set the value of the background color of the field
	 * @param {String} value New value to set.
	 * @alias Titanium.UI.TextArea.setBackgroundColor
	 */
	setBackgroundColor: function () { },
	/**
	 * the disabled background color of the view. (Android)
	 * @alias Titanium.UI.TextArea.backgroundDisabledColor
	 * @property {String}
	 */
	backgroundDisabledColor: '',
	/**
	 * Get the the disabled background color of the view. (Android)
	 * @alias Titanium.UI.TextArea.getBackgroundDisabledColor
	 * @return {String}
	 */
	getBackgroundDisabledColor: function () { return backgroundDisabledColor; },
	/**
	 * Set the the disabled background color of the view. (Android)
	 * @param {String} value New value to set.
	 * @alias Titanium.UI.TextArea.setBackgroundDisabledColor
	 */
	setBackgroundDisabledColor: function () { },
	/**
	 * the disabled background image url of the view. (Android)
	 * @alias Titanium.UI.TextArea.backgroundDisabledImage
	 * @property {String}
	 */
	backgroundDisabledImage: '',
	/**
	 * Get the the disabled background image url of the view. (Android)
	 * @alias Titanium.UI.TextArea.getBackgroundDisabledImage
	 * @return {String}
	 */
	getBackgroundDisabledImage: function () { return backgroundDisabledImage; },
	/**
	 * Set the the disabled background image url of the view. (Android)
	 * @param {String} value New value to set.
	 * @alias Titanium.UI.TextArea.setBackgroundDisabledImage
	 */
	setBackgroundDisabledImage: function () { },
	/**
	 * the focused background color of the view. focusable must be true for normal views. (Android)
	 * @alias Titanium.UI.TextArea.backgroundFocusedColor
	 * @property {String}
	 */
	backgroundFocusedColor: '',
	/**
	 * Get the the focused background color of the view. focusable must be true for normal views. (Android)
	 * @alias Titanium.UI.TextArea.getBackgroundFocusedColor
	 * @return {String}
	 */
	getBackgroundFocusedColor: function () { return backgroundFocusedColor; },
	/**
	 * Set the the focused background color of the view. focusable must be true for normal views. (Android)
	 * @param {String} value New value to set.
	 * @alias Titanium.UI.TextArea.setBackgroundFocusedColor
	 */
	setBackgroundFocusedColor: function () { },
	/**
	 * the focused background image url of the view. focusable must be true for normal views. (Android)
	 * @alias Titanium.UI.TextArea.backgroundFocusedImage
	 * @property {String}
	 */
	backgroundFocusedImage: '',
	/**
	 * Get the the focused background image url of the view. focusable must be true for normal views. (Android)
	 * @alias Titanium.UI.TextArea.getBackgroundFocusedImage
	 * @return {String}
	 */
	getBackgroundFocusedImage: function () { return backgroundFocusedImage; },
	/**
	 * Set the the focused background image url of the view. focusable must be true for normal views. (Android)
	 * @param {String} value New value to set.
	 * @alias Titanium.UI.TextArea.setBackgroundFocusedImage
	 */
	setBackgroundFocusedImage: function () { },
	/**
	 * a background gradient for the view with the properties: type,startPoint,endPoint,startRadius,endRadius,backfillStart,backfillEnd,colors.
	 * @alias Titanium.UI.TextArea.backgroundGradient
	 * @property {Object}
	 */
	backgroundGradient: {},
	/**
	 * Get the a background gradient for the view with the properties: type,startPoint,endPoint,startRadius,endRadius,backfillStart,backfillEnd,colors.
	 * @alias Titanium.UI.TextArea.getBackgroundGradient
	 * @return {Object}
	 */
	getBackgroundGradient: function () { return backgroundGradient; },
	/**
	 * Set the a background gradient for the view with the properties: type,startPoint,endPoint,startRadius,endRadius,backfillStart,backfillEnd,colors.
	 * @param {Object} value New value to set.
	 * @alias Titanium.UI.TextArea.setBackgroundGradient
	 */
	setBackgroundGradient: function () { },
	/**
	 * the background image url of the view
	 * @alias Titanium.UI.TextArea.backgroundImage
	 * @property {String}
	 */
	backgroundImage: '',
	/**
	 * Get the the background image url of the view
	 * @alias Titanium.UI.TextArea.getBackgroundImage
	 * @return {String}
	 */
	getBackgroundImage: function () { return backgroundImage; },
	/**
	 * Set the the background image url of the view
	 * @param {String} value New value to set.
	 * @alias Titanium.UI.TextArea.setBackgroundImage
	 */
	setBackgroundImage: function () { },
	/**
	 * End caps specify the portion of an image that should not be resized when an image is stretched. This technique is used to implement buttons and other resizable image-based interface elements. When a button with end caps is resized, the resizing occurs only in the middle of the button, in the region between the end caps. The end caps themselves keep their original size and appearance. This property specifies the size of the left end cap. The middle (stretchable) portion is assumed to be 1 pixel wide. The right end cap is therefore computed by adding the size of the left end cap and the middle portion together and then subtracting that value from the width of the image
	 * @alias Titanium.UI.TextArea.backgroundLeftCap
	 * @property {Float}
	 */
	backgroundLeftCap: 0.0,
	/**
	 * Get the End caps specify the portion of an image that should not be resized when an image is stretched. This technique is used to implement buttons and other resizable image-based interface elements. When a button with end caps is resized, the resizing occurs only in the middle of the button, in the region between the end caps. The end caps themselves keep their original size and appearance. This property specifies the size of the left end cap. The middle (stretchable) portion is assumed to be 1 pixel wide. The right end cap is therefore computed by adding the size of the left end cap and the middle portion together and then subtracting that value from the width of the image
	 * @alias Titanium.UI.TextArea.getBackgroundLeftCap
	 * @return {Float}
	 */
	getBackgroundLeftCap: function () { return backgroundLeftCap; },
	/**
	 * Set the End caps specify the portion of an image that should not be resized when an image is stretched. This technique is used to implement buttons and other resizable image-based interface elements. When a button with end caps is resized, the resizing occurs only in the middle of the button, in the region between the end caps. The end caps themselves keep their original size and appearance. This property specifies the size of the left end cap. The middle (stretchable) portion is assumed to be 1 pixel wide. The right end cap is therefore computed by adding the size of the left end cap and the middle portion together and then subtracting that value from the width of the image
	 * @param {Float} value New value to set.
	 * @alias Titanium.UI.TextArea.setBackgroundLeftCap
	 */
	setBackgroundLeftCap: function () { },
	/**
	 * the selected background color of the view. focusable must be true for normal views. (Android)
	 * @alias Titanium.UI.TextArea.backgroundSelectedColor
	 * @property {String}
	 */
	backgroundSelectedColor: '',
	/**
	 * Get the the selected background color of the view. focusable must be true for normal views. (Android)
	 * @alias Titanium.UI.TextArea.getBackgroundSelectedColor
	 * @return {String}
	 */
	getBackgroundSelectedColor: function () { return backgroundSelectedColor; },
	/**
	 * Set the the selected background color of the view. focusable must be true for normal views. (Android)
	 * @param {String} value New value to set.
	 * @alias Titanium.UI.TextArea.setBackgroundSelectedColor
	 */
	setBackgroundSelectedColor: function () { },
	/**
	 * the selected background image url of the view. focusable must be true for normal views. (Android)
	 * @alias Titanium.UI.TextArea.backgroundSelectedImage
	 * @property {String}
	 */
	backgroundSelectedImage: '',
	/**
	 * Get the the selected background image url of the view. focusable must be true for normal views. (Android)
	 * @alias Titanium.UI.TextArea.getBackgroundSelectedImage
	 * @return {String}
	 */
	getBackgroundSelectedImage: function () { return backgroundSelectedImage; },
	/**
	 * Set the the selected background image url of the view. focusable must be true for normal views. (Android)
	 * @param {String} value New value to set.
	 * @alias Titanium.UI.TextArea.setBackgroundSelectedImage
	 */
	setBackgroundSelectedImage: function () { },
	/**
	 * End caps specify the portion of an image that should not be resized when an image is stretched. This technique is used to implement buttons and other resizable image-based interface elements. When a button with end caps is resized, the resizing occurs only in the middle of the button, in the region between the end caps. The end caps themselves keep their original size and appearance. This property specifies the size of the top end cap. The middle (stretchable) portion is assumed to be 1 pixel wide. The bottom end cap is therefore computed by adding the size of the top end cap and the middle portion together and then subtracting that value from the height of the image
	 * @alias Titanium.UI.TextArea.backgroundTopCap
	 * @property {Float}
	 */
	backgroundTopCap: 0.0,
	/**
	 * Get the End caps specify the portion of an image that should not be resized when an image is stretched. This technique is used to implement buttons and other resizable image-based interface elements. When a button with end caps is resized, the resizing occurs only in the middle of the button, in the region between the end caps. The end caps themselves keep their original size and appearance. This property specifies the size of the top end cap. The middle (stretchable) portion is assumed to be 1 pixel wide. The bottom end cap is therefore computed by adding the size of the top end cap and the middle portion together and then subtracting that value from the height of the image
	 * @alias Titanium.UI.TextArea.getBackgroundTopCap
	 * @return {Float}
	 */
	getBackgroundTopCap: function () { return backgroundTopCap; },
	/**
	 * Set the End caps specify the portion of an image that should not be resized when an image is stretched. This technique is used to implement buttons and other resizable image-based interface elements. When a button with end caps is resized, the resizing occurs only in the middle of the button, in the region between the end caps. The end caps themselves keep their original size and appearance. This property specifies the size of the top end cap. The middle (stretchable) portion is assumed to be 1 pixel wide. The bottom end cap is therefore computed by adding the size of the top end cap and the middle portion together and then subtracting that value from the height of the image
	 * @param {Float} value New value to set.
	 * @alias Titanium.UI.TextArea.setBackgroundTopCap
	 */
	setBackgroundTopCap: function () { },
	/**
	 * the border color of the view
	 * @alias Titanium.UI.TextArea.borderColor
	 * @property {String}
	 */
	borderColor: '',
	/**
	 * Get the the border color of the view
	 * @alias Titanium.UI.TextArea.getBorderColor
	 * @return {String}
	 */
	getBorderColor: function () { return borderColor; },
	/**
	 * Set the the border color of the view
	 * @param {String} value New value to set.
	 * @alias Titanium.UI.TextArea.setBorderColor
	 */
	setBorderColor: function () { },
	/**
	 * the border radius of the view
	 * @alias Titanium.UI.TextArea.borderRadius
	 * @property {Float}
	 */
	borderRadius: 0.0,
	/**
	 * Get the the border radius of the view
	 * @alias Titanium.UI.TextArea.getBorderRadius
	 * @return {Float}
	 */
	getBorderRadius: function () { return borderRadius; },
	/**
	 * Set the the border radius of the view
	 * @param {Float} value New value to set.
	 * @alias Titanium.UI.TextArea.setBorderRadius
	 */
	setBorderRadius: function () { },
	/**
	 * the border width of the view
	 * @alias Titanium.UI.TextArea.borderWidth
	 * @property {Float}
	 */
	borderWidth: 0.0,
	/**
	 * Get the the border width of the view
	 * @alias Titanium.UI.TextArea.getBorderWidth
	 * @return {Float}
	 */
	getBorderWidth: function () { return borderWidth; },
	/**
	 * Set the the border width of the view
	 * @param {Float} value New value to set.
	 * @alias Titanium.UI.TextArea.setBorderWidth
	 */
	setBorderWidth: function () { },
	/**
	 * property for the view bottom position. This position is relative to the view's parent. Can be either a float value or a dimension string ie 'auto' (default), '50%' (iPhone only).
	 * @alias Titanium.UI.TextArea.bottom
	 * @property {Float,String}
	 */
	bottom: 0.0,
	/**
	 * Get the property for the view bottom position. This position is relative to the view's parent. Can be either a float value or a dimension string ie 'auto' (default), '50%' (iPhone only).
	 * @alias Titanium.UI.TextArea.getBottom
	 * @return {Float,String}
	 */
	getBottom: function () { return bottom; },
	/**
	 * Set the property for the view bottom position. This position is relative to the view's parent. Can be either a float value or a dimension string ie 'auto' (default), '50%' (iPhone only).
	 * @param {Float,String} value New value to set.
	 * @alias Titanium.UI.TextArea.setBottom
	 */
	setBottom: function () { },
	/**
	 * a dictionary with properties x and y to indicate the center of the views position relative to the parent view
	 * @alias Titanium.UI.TextArea.center
	 * @property {Object}
	 */
	center: {},
	/**
	 * Get the a dictionary with properties x and y to indicate the center of the views position relative to the parent view
	 * @alias Titanium.UI.TextArea.getCenter
	 * @return {Object}
	 */
	getCenter: function () { return center; },
	/**
	 * Set the a dictionary with properties x and y to indicate the center of the views position relative to the parent view
	 * @param {Object} value New value to set.
	 * @alias Titanium.UI.TextArea.setCenter
	 */
	setCenter: function () { },
	/**
	 * boolean indicating if the field is editable
	 * @alias Titanium.UI.TextArea.editable
	 * @property {Boolean}
	 */
	editable: false,
	/**
	 * Get the boolean indicating if the field is editable
	 * @alias Titanium.UI.TextArea.getEditable
	 * @return {Boolean}
	 */
	getEditable: function () { return editable; },
	/**
	 * Set the boolean indicating if the field is editable
	 * @param {Boolean} value New value to set.
	 * @alias Titanium.UI.TextArea.setEditable
	 */
	setEditable: function () { },
	/**
	 * boolean indicating the enabled state of the field
	 * @alias Titanium.UI.TextArea.enabled
	 * @property {Boolean}
	 */
	enabled: false,
	/**
	 * Get the boolean indicating the enabled state of the field
	 * @alias Titanium.UI.TextArea.getEnabled
	 * @return {Boolean}
	 */
	getEnabled: function () { return enabled; },
	/**
	 * Set the boolean indicating the enabled state of the field
	 * @param {Boolean} value New value to set.
	 * @alias Titanium.UI.TextArea.setEnabled
	 */
	setEnabled: function () { },
	/**
	 * Set true if you want a view to be focusable when navigating with the trackball or D-Pad. Default: false. (Android Only)
	 * @alias Titanium.UI.TextArea.focusable
	 * @property {Boolean}
	 */
	focusable: false,
	/**
	 * Get the Set true if you want a view to be focusable when navigating with the trackball or D-Pad. Default: false. (Android Only)
	 * @alias Titanium.UI.TextArea.getFocusable
	 * @return {Boolean}
	 */
	getFocusable: function () { return focusable; },
	/**
	 * Set the Set true if you want a view to be focusable when navigating with the trackball or D-Pad. Default: false. (Android Only)
	 * @param {Boolean} value New value to set.
	 * @alias Titanium.UI.TextArea.setFocusable
	 */
	setFocusable: function () { },
	/**
	 * the font family
	 * @alias Titanium.UI.TextArea.font-family
	 * @property {String}
	 */
	font-family: '',
	/**
	 * Get the the font family
	 * @alias Titanium.UI.TextArea.getFont-family
	 * @return {String}
	 */
	getFont-family: function () { return font-family; },
	/**
	 * Set the the font family
	 * @param {String} value New value to set.
	 * @alias Titanium.UI.TextArea.setFont-family
	 */
	setFont-family: function () { },
	/**
	 * the font size
	 * @alias Titanium.UI.TextArea.font-size
	 * @property {String}
	 */
	font-size: '',
	/**
	 * Get the the font size
	 * @alias Titanium.UI.TextArea.getFont-size
	 * @return {String}
	 */
	getFont-size: function () { return font-size; },
	/**
	 * Set the the font size
	 * @param {String} value New value to set.
	 * @alias Titanium.UI.TextArea.setFont-size
	 */
	setFont-size: function () { },
	/**
	 * the font style, either normal or italics
	 * @alias Titanium.UI.TextArea.font-style
	 * @property {String}
	 */
	font-style: '',
	/**
	 * Get the the font style, either normal or italics
	 * @alias Titanium.UI.TextArea.getFont-style
	 * @return {String}
	 */
	getFont-style: function () { return font-style; },
	/**
	 * Set the the font style, either normal or italics
	 * @param {String} value New value to set.
	 * @alias Titanium.UI.TextArea.setFont-style
	 */
	setFont-style: function () { },
	/**
	 * the font weight, either normal or bold
	 * @alias Titanium.UI.TextArea.font-weight
	 * @property {String}
	 */
	font-weight: '',
	/**
	 * Get the the font weight, either normal or bold
	 * @alias Titanium.UI.TextArea.getFont-weight
	 * @return {String}
	 */
	getFont-weight: function () { return font-weight; },
	/**
	 * Set the the font weight, either normal or bold
	 * @param {String} value New value to set.
	 * @alias Titanium.UI.TextArea.setFont-weight
	 */
	setFont-weight: function () { },
	/**
	 * property for the view height. Can be either a float value or a dimension string ie 'auto' (default), '50%' (iPhone only).
	 * @alias Titanium.UI.TextArea.height
	 * @property {Float,String}
	 */
	height: 0.0,
	/**
	 * Get the property for the view height. Can be either a float value or a dimension string ie 'auto' (default), '50%' (iPhone only).
	 * @alias Titanium.UI.TextArea.getHeight
	 * @return {Float,String}
	 */
	getHeight: function () { return height; },
	/**
	 * Set the property for the view height. Can be either a float value or a dimension string ie 'auto' (default), '50%' (iPhone only).
	 * @param {Float,String} value New value to set.
	 * @alias Titanium.UI.TextArea.setHeight
	 */
	setHeight: function () { },
	/**
	 * array of toolbar button objects to be used when the keyboard is displayed
	 * @alias Titanium.UI.TextArea.keyboardToolbar
	 * @property {Array}
	 */
	keyboardToolbar: [],
	/**
	 * Get the array of toolbar button objects to be used when the keyboard is displayed
	 * @alias Titanium.UI.TextArea.getKeyboardToolbar
	 * @return {Array}
	 */
	getKeyboardToolbar: function () { return keyboardToolbar; },
	/**
	 * Set the array of toolbar button objects to be used when the keyboard is displayed
	 * @param {Array} value New value to set.
	 * @alias Titanium.UI.TextArea.setKeyboardToolbar
	 */
	setKeyboardToolbar: function () { },
	/**
	 * the color of the keyboard toolbar
	 * @alias Titanium.UI.TextArea.keyboardToolbarColor
	 * @property {String}
	 */
	keyboardToolbarColor: '',
	/**
	 * Get the the color of the keyboard toolbar
	 * @alias Titanium.UI.TextArea.getKeyboardToolbarColor
	 * @return {String}
	 */
	getKeyboardToolbarColor: function () { return keyboardToolbarColor; },
	/**
	 * Set the the color of the keyboard toolbar
	 * @param {String} value New value to set.
	 * @alias Titanium.UI.TextArea.setKeyboardToolbarColor
	 */
	setKeyboardToolbarColor: function () { },
	/**
	 * the height of the keyboard toolbar
	 * @alias Titanium.UI.TextArea.keyboardToolbarHeight
	 * @property {Float}
	 */
	keyboardToolbarHeight: 0.0,
	/**
	 * Get the the height of the keyboard toolbar
	 * @alias Titanium.UI.TextArea.getKeyboardToolbarHeight
	 * @return {Float}
	 */
	getKeyboardToolbarHeight: function () { return keyboardToolbarHeight; },
	/**
	 * Set the the height of the keyboard toolbar
	 * @param {Float} value New value to set.
	 * @alias Titanium.UI.TextArea.setKeyboardToolbarHeight
	 */
	setKeyboardToolbarHeight: function () { },
	/**
	 * property for the view left position. This position is relative to the view's parent. Can be either a float value or a dimension string ie 'auto' (default), '50%' (iPhone only).
	 * @alias Titanium.UI.TextArea.left
	 * @property {Float,String}
	 */
	left: 0.0,
	/**
	 * Get the property for the view left position. This position is relative to the view's parent. Can be either a float value or a dimension string ie 'auto' (default), '50%' (iPhone only).
	 * @alias Titanium.UI.TextArea.getLeft
	 * @return {Float,String}
	 */
	getLeft: function () { return left; },
	/**
	 * Set the property for the view left position. This position is relative to the view's parent. Can be either a float value or a dimension string ie 'auto' (default), '50%' (iPhone only).
	 * @param {Float,String} value New value to set.
	 * @alias Titanium.UI.TextArea.setLeft
	 */
	setLeft: function () { },
	/**
	 * the opacity from 0.0-1.0
	 * @alias Titanium.UI.TextArea.opacity
	 * @property {Float}
	 */
	opacity: 0.0,
	/**
	 * Get the the opacity from 0.0-1.0
	 * @alias Titanium.UI.TextArea.getOpacity
	 * @return {Float}
	 */
	getOpacity: function () { return opacity; },
	/**
	 * Set the the opacity from 0.0-1.0
	 * @param {Float} value New value to set.
	 * @alias Titanium.UI.TextArea.setOpacity
	 */
	setOpacity: function () { },
	/**
	 * property for the view right position. This position is relative to the view's parent. Can be either a float value or a dimension string ie 'auto' (default), '50%' (iPhone only).
	 * @alias Titanium.UI.TextArea.right
	 * @property {Float,String}
	 */
	right: 0.0,
	/**
	 * Get the property for the view right position. This position is relative to the view's parent. Can be either a float value or a dimension string ie 'auto' (default), '50%' (iPhone only).
	 * @alias Titanium.UI.TextArea.getRight
	 * @return {Float,String}
	 */
	getRight: function () { return right; },
	/**
	 * Set the property for the view right position. This position is relative to the view's parent. Can be either a float value or a dimension string ie 'auto' (default), '50%' (iPhone only).
	 * @param {Float,String} value New value to set.
	 * @alias Titanium.UI.TextArea.setRight
	 */
	setRight: function () { },
	/**
	 * the size of the view as a dictionary of width and height properties
	 * @alias Titanium.UI.TextArea.size
	 * @property {Object}
	 */
	size: {},
	/**
	 * Get the the size of the view as a dictionary of width and height properties
	 * @alias Titanium.UI.TextArea.getSize
	 * @return {Object}
	 */
	getSize: function () { return size; },
	/**
	 * Set the the size of the view as a dictionary of width and height properties
	 * @param {Object} value New value to set.
	 * @alias Titanium.UI.TextArea.setSize
	 */
	setSize: function () { },
	/**
	 * One of Titanium.UI.Android.SOFT_KEYBOARD_DEFAULT_ON_FOCUS, Titanium.UI.Android.SOFT_KEYBOARD_HIDE_ON_FOCUS, or Titanium.UI.Android.SOFT_KEYBOARD_SHOW_ON_FOCUS. (Android only)
	 * @alias Titanium.UI.TextArea.softKeyboardOnFocus
	 * @property {Integer}
	 */
	softKeyboardOnFocus: 0,
	/**
	 * Get the One of Titanium.UI.Android.SOFT_KEYBOARD_DEFAULT_ON_FOCUS, Titanium.UI.Android.SOFT_KEYBOARD_HIDE_ON_FOCUS, or Titanium.UI.Android.SOFT_KEYBOARD_SHOW_ON_FOCUS. (Android only)
	 * @alias Titanium.UI.TextArea.getSoftKeyboardOnFocus
	 * @return {Integer}
	 */
	getSoftKeyboardOnFocus: function () { return softKeyboardOnFocus; },
	/**
	 * Set the One of Titanium.UI.Android.SOFT_KEYBOARD_DEFAULT_ON_FOCUS, Titanium.UI.Android.SOFT_KEYBOARD_HIDE_ON_FOCUS, or Titanium.UI.Android.SOFT_KEYBOARD_SHOW_ON_FOCUS. (Android only)
	 * @param {Integer} value New value to set.
	 * @alias Titanium.UI.TextArea.setSoftKeyboardOnFocus
	 */
	setSoftKeyboardOnFocus: function () { },
	/**
	 * boolean to indicate if the return key should be suppressed during entry
	 * @alias Titanium.UI.TextArea.suppressReturn
	 * @property {Boolean}
	 */
	suppressReturn: false,
	/**
	 * Get the boolean to indicate if the return key should be suppressed during entry
	 * @alias Titanium.UI.TextArea.getSuppressReturn
	 * @return {Boolean}
	 */
	getSuppressReturn: function () { return suppressReturn; },
	/**
	 * Set the boolean to indicate if the return key should be suppressed during entry
	 * @param {Boolean} value New value to set.
	 * @alias Titanium.UI.TextArea.setSuppressReturn
	 */
	setSuppressReturn: function () { },
	/**
	 * property for the view top position. This position is relative to the view's parent. Can be either a float value or a dimension string ie 'auto' (default), '50%' (iPhone only).
	 * @alias Titanium.UI.TextArea.top
	 * @property {Float,String}
	 */
	top: 0.0,
	/**
	 * Get the property for the view top position. This position is relative to the view's parent. Can be either a float value or a dimension string ie 'auto' (default), '50%' (iPhone only).
	 * @alias Titanium.UI.TextArea.getTop
	 * @return {Float,String}
	 */
	getTop: function () { return top; },
	/**
	 * Set the property for the view top position. This position is relative to the view's parent. Can be either a float value or a dimension string ie 'auto' (default), '50%' (iPhone only).
	 * @param {Float,String} value New value to set.
	 * @alias Titanium.UI.TextArea.setTop
	 */
	setTop: function () { },
	/**
	 * a boolean indicating if the view should receive touch events (true, default) or forward them to peers (false)
	 * @alias Titanium.UI.TextArea.touchEnabled
	 * @property {Boolean}
	 */
	touchEnabled: false,
	/**
	 * Get the a boolean indicating if the view should receive touch events (true, default) or forward them to peers (false)
	 * @alias Titanium.UI.TextArea.getTouchEnabled
	 * @return {Boolean}
	 */
	getTouchEnabled: function () { return touchEnabled; },
	/**
	 * Set the a boolean indicating if the view should receive touch events (true, default) or forward them to peers (false)
	 * @param {Boolean} value New value to set.
	 * @alias Titanium.UI.TextArea.setTouchEnabled
	 */
	setTouchEnabled: function () { },
	/**
	 * the transformation matrix to apply to the view
	 * @alias Titanium.UI.TextArea.transform
	 * @property {Object}
	 */
	transform: {},
	/**
	 * Get the the transformation matrix to apply to the view
	 * @alias Titanium.UI.TextArea.getTransform
	 * @return {Object}
	 */
	getTransform: function () { return transform; },
	/**
	 * Set the the transformation matrix to apply to the view
	 * @param {Object} value New value to set.
	 * @alias Titanium.UI.TextArea.setTransform
	 */
	setTransform: function () { },
	/**
	 * value of the field
	 * @alias Titanium.UI.TextArea.value
	 * @property {String}
	 */
	value: '',
	/**
	 * Get the value of the field
	 * @alias Titanium.UI.TextArea.getValue
	 * @return {String}
	 */
	getValue: function () { return value; },
	/**
	 * Set the value of the field
	 * @param {String} value New value to set.
	 * @alias Titanium.UI.TextArea.setValue
	 */
	setValue: function () { },
	/**
	 * a boolean of the visibility of the view
	 * @alias Titanium.UI.TextArea.visible
	 * @property {Boolean}
	 */
	visible: false,
	/**
	 * Get the a boolean of the visibility of the view
	 * @alias Titanium.UI.TextArea.getVisible
	 * @return {Boolean}
	 */
	getVisible: function () { return visible; },
	/**
	 * Set the a boolean of the visibility of the view
	 * @param {Boolean} value New value to set.
	 * @alias Titanium.UI.TextArea.setVisible
	 */
	setVisible: function () { },
	/**
	 * property for the view width. Can be either a float value or a dimension string ie 'auto' (default), '50%' (iPhone only).
	 * @alias Titanium.UI.TextArea.width
	 * @property {Float,String}
	 */
	width: 0.0,
	/**
	 * Get the property for the view width. Can be either a float value or a dimension string ie 'auto' (default), '50%' (iPhone only).
	 * @alias Titanium.UI.TextArea.getWidth
	 * @return {Float,String}
	 */
	getWidth: function () { return width; },
	/**
	 * Set the property for the view width. Can be either a float value or a dimension string ie 'auto' (default), '50%' (iPhone only).
	 * @param {Float,String} value New value to set.
	 * @alias Titanium.UI.TextArea.setWidth
	 */
	setWidth: function () { },
	/**
	 * the z index position relative to other sibling views
	 * @alias Titanium.UI.TextArea.zIndex
	 * @property {Integer}
	 */
	zIndex: 0,
	/**
	 * Get the the z index position relative to other sibling views
	 * @alias Titanium.UI.TextArea.getZIndex
	 * @return {Integer}
	 */
	getZIndex: function () { return zIndex; },
	/**
	 * Set the the z index position relative to other sibling views
	 * @param {Integer} value New value to set.
	 * @alias Titanium.UI.TextArea.setZIndex
	 */
	setZIndex: function () { },
	/**
	 * add a child to the view hierarchy
	 * @param {Object} view the view to add to this views hiearchy
	 * @alias Titanium.UI.TextArea.add
	 */
	add: function (view) { },
	/**
	 * add an event listener for the instance to receive view triggered events
	 * @param {String} name name of the event
	 * @param {Function} callback callback function to invoke when the event is fired
	 * @alias Titanium.UI.TextArea.addEventListener
	 */
	addEventListener: function (name,callback) { },
	/**
	 * animate the view
	 * @param {Object} obj either a dictionary of animation properties or an Animation object
	 * @param {Function} callback function to be invoked upon completion of the animation
	 * @alias Titanium.UI.TextArea.animate
	 */
	animate: function (obj,callback) { },
	/**
	 * force the field to lose focus
	 * @alias Titanium.UI.TextArea.blur
	 */
	blur: function () { },
	/**
	 * fire a synthesized event to the views listener
	 * @param {String} name name of the event
	 * @param {Object} event event object
	 * @alias Titanium.UI.TextArea.fireEvent
	 */
	fireEvent: function (name,event) { },
	/**
	 * force the field to gain focus
	 * @alias Titanium.UI.TextArea.focus
	 */
	focus: function () { },
	/**
	 * return boolean (true) if the field has text
	 * @alias Titanium.UI.TextArea.hasText
	 */
	hasText: function () { },
	/**
	 * hide the view
	 * @alias Titanium.UI.TextArea.hide
	 */
	hide: function () { },
	/**
	 * remove a previously add view from the view hiearchy
	 * @param {Object} view the view to remove from this views hiearchy
	 * @alias Titanium.UI.TextArea.remove
	 */
	remove: function (view) { },
	/**
	 * remove a previously added event listener
	 * @param {String} name name of the event
	 * @param {Function} callback callback function passed in addEventListener
	 * @alias Titanium.UI.TextArea.removeEventListener
	 */
	removeEventListener: function (name,callback) { },
	/**
	 * make the view visible
	 * @alias Titanium.UI.TextArea.show
	 */
	show: function () { },
	/**
	 * return a Blob image of the rendered view
	 * @param {Function} f function to be invoked upon completion. if non-null, this method will be performed asynchronously. if null, it will be performed immediately
	 * @alias Titanium.UI.TextArea.toImage
	 * @return {Object}
	 */
	toImage: function (f) { return {}; },
};

/**
 * A Text Area is created by the method Titanium.UI.createTextField. The Text Field is a single line field.
 * @since 0.8
 */
Titanium.UI.TextField = {
	/**
	 * a dictionary with properties x and y to indicate the anchor point value. anchor specifies the position by which animation should occur. center is 0.5, 0.5
	 * @alias Titanium.UI.TextField.anchorPoint
	 * @property {Object}
	 */
	anchorPoint: {},
	/**
	 * Get the a dictionary with properties x and y to indicate the anchor point value. anchor specifies the position by which animation should occur. center is 0.5, 0.5
	 * @alias Titanium.UI.TextField.getAnchorPoint
	 * @return {Object}
	 */
	getAnchorPoint: function () { return anchorPoint; },
	/**
	 * Set the a dictionary with properties x and y to indicate the anchor point value. anchor specifies the position by which animation should occur. center is 0.5, 0.5
	 * @param {Object} value New value to set.
	 * @alias Titanium.UI.TextField.setAnchorPoint
	 */
	setAnchorPoint: function () { },
	/**
	 * read-only object with x and y properties of where the view is during animation
	 * @alias Titanium.UI.TextField.animatedCenterPoint
	 * @property {Object}
	 */
	animatedCenterPoint: {},
	/**
	 * Get the read-only object with x and y properties of where the view is during animation
	 * @alias Titanium.UI.TextField.getAnimatedCenterPoint
	 * @return {Object}
	 */
	getAnimatedCenterPoint: function () { return animatedCenterPoint; },
	/**
	 * Set the read-only object with x and y properties of where the view is during animation
	 * @param {Object} value New value to set.
	 * @alias Titanium.UI.TextField.setAnimatedCenterPoint
	 */
	setAnimatedCenterPoint: function () { },
	/**
	 * value of the background color of the field
	 * @alias Titanium.UI.TextField.backgroundColor
	 * @property {String}
	 */
	backgroundColor: '',
	/**
	 * Get the value of the background color of the field
	 * @alias Titanium.UI.TextField.getBackgroundColor
	 * @return {String}
	 */
	getBackgroundColor: function () { return backgroundColor; },
	/**
	 * Set the value of the background color of the field
	 * @param {String} value New value to set.
	 * @alias Titanium.UI.TextField.setBackgroundColor
	 */
	setBackgroundColor: function () { },
	/**
	 * the disabled background color of the view. (Android)
	 * @alias Titanium.UI.TextField.backgroundDisabledColor
	 * @property {String}
	 */
	backgroundDisabledColor: '',
	/**
	 * Get the the disabled background color of the view. (Android)
	 * @alias Titanium.UI.TextField.getBackgroundDisabledColor
	 * @return {String}
	 */
	getBackgroundDisabledColor: function () { return backgroundDisabledColor; },
	/**
	 * Set the the disabled background color of the view. (Android)
	 * @param {String} value New value to set.
	 * @alias Titanium.UI.TextField.setBackgroundDisabledColor
	 */
	setBackgroundDisabledColor: function () { },
	/**
	 * the image url to the background image of the field when in the disabled state
	 * @alias Titanium.UI.TextField.backgroundDisabledImage
	 * @property {String}
	 */
	backgroundDisabledImage: '',
	/**
	 * Get the the image url to the background image of the field when in the disabled state
	 * @alias Titanium.UI.TextField.getBackgroundDisabledImage
	 * @return {String}
	 */
	getBackgroundDisabledImage: function () { return backgroundDisabledImage; },
	/**
	 * Set the the image url to the background image of the field when in the disabled state
	 * @param {String} value New value to set.
	 * @alias Titanium.UI.TextField.setBackgroundDisabledImage
	 */
	setBackgroundDisabledImage: function () { },
	/**
	 * the focused background color of the view. focusable must be true for normal views. (Android)
	 * @alias Titanium.UI.TextField.backgroundFocusedColor
	 * @property {String}
	 */
	backgroundFocusedColor: '',
	/**
	 * Get the the focused background color of the view. focusable must be true for normal views. (Android)
	 * @alias Titanium.UI.TextField.getBackgroundFocusedColor
	 * @return {String}
	 */
	getBackgroundFocusedColor: function () { return backgroundFocusedColor; },
	/**
	 * Set the the focused background color of the view. focusable must be true for normal views. (Android)
	 * @param {String} value New value to set.
	 * @alias Titanium.UI.TextField.setBackgroundFocusedColor
	 */
	setBackgroundFocusedColor: function () { },
	/**
	 * the focused background image url of the view. focusable must be true for normal views. (Android)
	 * @alias Titanium.UI.TextField.backgroundFocusedImage
	 * @property {String}
	 */
	backgroundFocusedImage: '',
	/**
	 * Get the the focused background image url of the view. focusable must be true for normal views. (Android)
	 * @alias Titanium.UI.TextField.getBackgroundFocusedImage
	 * @return {String}
	 */
	getBackgroundFocusedImage: function () { return backgroundFocusedImage; },
	/**
	 * Set the the focused background image url of the view. focusable must be true for normal views. (Android)
	 * @param {String} value New value to set.
	 * @alias Titanium.UI.TextField.setBackgroundFocusedImage
	 */
	setBackgroundFocusedImage: function () { },
	/**
	 * a background gradient for the view with the properties: type,startPoint,endPoint,startRadius,endRadius,backfillStart,backfillEnd,colors.
	 * @alias Titanium.UI.TextField.backgroundGradient
	 * @property {Object}
	 */
	backgroundGradient: {},
	/**
	 * Get the a background gradient for the view with the properties: type,startPoint,endPoint,startRadius,endRadius,backfillStart,backfillEnd,colors.
	 * @alias Titanium.UI.TextField.getBackgroundGradient
	 * @return {Object}
	 */
	getBackgroundGradient: function () { return backgroundGradient; },
	/**
	 * Set the a background gradient for the view with the properties: type,startPoint,endPoint,startRadius,endRadius,backfillStart,backfillEnd,colors.
	 * @param {Object} value New value to set.
	 * @alias Titanium.UI.TextField.setBackgroundGradient
	 */
	setBackgroundGradient: function () { },
	/**
	 * the image url to the background image of the field
	 * @alias Titanium.UI.TextField.backgroundImage
	 * @property {String}
	 */
	backgroundImage: '',
	/**
	 * Get the the image url to the background image of the field
	 * @alias Titanium.UI.TextField.getBackgroundImage
	 * @return {String}
	 */
	getBackgroundImage: function () { return backgroundImage; },
	/**
	 * Set the the image url to the background image of the field
	 * @param {String} value New value to set.
	 * @alias Titanium.UI.TextField.setBackgroundImage
	 */
	setBackgroundImage: function () { },
	/**
	 * End caps specify the portion of an image that should not be resized when an image is stretched. This technique is used to implement buttons and other resizable image-based interface elements. When a button with end caps is resized, the resizing occurs only in the middle of the button, in the region between the end caps. The end caps themselves keep their original size and appearance. This property specifies the size of the left end cap. The middle (stretchable) portion is assumed to be 1 pixel wide. The right end cap is therefore computed by adding the size of the left end cap and the middle portion together and then subtracting that value from the width of the image
	 * @alias Titanium.UI.TextField.backgroundLeftCap
	 * @property {Float}
	 */
	backgroundLeftCap: 0.0,
	/**
	 * Get the End caps specify the portion of an image that should not be resized when an image is stretched. This technique is used to implement buttons and other resizable image-based interface elements. When a button with end caps is resized, the resizing occurs only in the middle of the button, in the region between the end caps. The end caps themselves keep their original size and appearance. This property specifies the size of the left end cap. The middle (stretchable) portion is assumed to be 1 pixel wide. The right end cap is therefore computed by adding the size of the left end cap and the middle portion together and then subtracting that value from the width of the image
	 * @alias Titanium.UI.TextField.getBackgroundLeftCap
	 * @return {Float}
	 */
	getBackgroundLeftCap: function () { return backgroundLeftCap; },
	/**
	 * Set the End caps specify the portion of an image that should not be resized when an image is stretched. This technique is used to implement buttons and other resizable image-based interface elements. When a button with end caps is resized, the resizing occurs only in the middle of the button, in the region between the end caps. The end caps themselves keep their original size and appearance. This property specifies the size of the left end cap. The middle (stretchable) portion is assumed to be 1 pixel wide. The right end cap is therefore computed by adding the size of the left end cap and the middle portion together and then subtracting that value from the width of the image
	 * @param {Float} value New value to set.
	 * @alias Titanium.UI.TextField.setBackgroundLeftCap
	 */
	setBackgroundLeftCap: function () { },
	/**
	 * the selected background color of the view. focusable must be true for normal views. (Android)
	 * @alias Titanium.UI.TextField.backgroundSelectedColor
	 * @property {String}
	 */
	backgroundSelectedColor: '',
	/**
	 * Get the the selected background color of the view. focusable must be true for normal views. (Android)
	 * @alias Titanium.UI.TextField.getBackgroundSelectedColor
	 * @return {String}
	 */
	getBackgroundSelectedColor: function () { return backgroundSelectedColor; },
	/**
	 * Set the the selected background color of the view. focusable must be true for normal views. (Android)
	 * @param {String} value New value to set.
	 * @alias Titanium.UI.TextField.setBackgroundSelectedColor
	 */
	setBackgroundSelectedColor: function () { },
	/**
	 * the selected background image url of the view. focusable must be true for normal views. (Android)
	 * @alias Titanium.UI.TextField.backgroundSelectedImage
	 * @property {String}
	 */
	backgroundSelectedImage: '',
	/**
	 * Get the the selected background image url of the view. focusable must be true for normal views. (Android)
	 * @alias Titanium.UI.TextField.getBackgroundSelectedImage
	 * @return {String}
	 */
	getBackgroundSelectedImage: function () { return backgroundSelectedImage; },
	/**
	 * Set the the selected background image url of the view. focusable must be true for normal views. (Android)
	 * @param {String} value New value to set.
	 * @alias Titanium.UI.TextField.setBackgroundSelectedImage
	 */
	setBackgroundSelectedImage: function () { },
	/**
	 * End caps specify the portion of an image that should not be resized when an image is stretched. This technique is used to implement buttons and other resizable image-based interface elements. When a button with end caps is resized, the resizing occurs only in the middle of the button, in the region between the end caps. The end caps themselves keep their original size and appearance. This property specifies the size of the top end cap. The middle (stretchable) portion is assumed to be 1 pixel wide. The bottom end cap is therefore computed by adding the size of the top end cap and the middle portion together and then subtracting that value from the height of the image
	 * @alias Titanium.UI.TextField.backgroundTopCap
	 * @property {Float}
	 */
	backgroundTopCap: 0.0,
	/**
	 * Get the End caps specify the portion of an image that should not be resized when an image is stretched. This technique is used to implement buttons and other resizable image-based interface elements. When a button with end caps is resized, the resizing occurs only in the middle of the button, in the region between the end caps. The end caps themselves keep their original size and appearance. This property specifies the size of the top end cap. The middle (stretchable) portion is assumed to be 1 pixel wide. The bottom end cap is therefore computed by adding the size of the top end cap and the middle portion together and then subtracting that value from the height of the image
	 * @alias Titanium.UI.TextField.getBackgroundTopCap
	 * @return {Float}
	 */
	getBackgroundTopCap: function () { return backgroundTopCap; },
	/**
	 * Set the End caps specify the portion of an image that should not be resized when an image is stretched. This technique is used to implement buttons and other resizable image-based interface elements. When a button with end caps is resized, the resizing occurs only in the middle of the button, in the region between the end caps. The end caps themselves keep their original size and appearance. This property specifies the size of the top end cap. The middle (stretchable) portion is assumed to be 1 pixel wide. The bottom end cap is therefore computed by adding the size of the top end cap and the middle portion together and then subtracting that value from the height of the image
	 * @param {Float} value New value to set.
	 * @alias Titanium.UI.TextField.setBackgroundTopCap
	 */
	setBackgroundTopCap: function () { },
	/**
	 * the border color of the view
	 * @alias Titanium.UI.TextField.borderColor
	 * @property {String}
	 */
	borderColor: '',
	/**
	 * Get the the border color of the view
	 * @alias Titanium.UI.TextField.getBorderColor
	 * @return {String}
	 */
	getBorderColor: function () { return borderColor; },
	/**
	 * Set the the border color of the view
	 * @param {String} value New value to set.
	 * @alias Titanium.UI.TextField.setBorderColor
	 */
	setBorderColor: function () { },
	/**
	 * the border radius of the view
	 * @alias Titanium.UI.TextField.borderRadius
	 * @property {Float}
	 */
	borderRadius: 0.0,
	/**
	 * Get the the border radius of the view
	 * @alias Titanium.UI.TextField.getBorderRadius
	 * @return {Float}
	 */
	getBorderRadius: function () { return borderRadius; },
	/**
	 * Set the the border radius of the view
	 * @param {Float} value New value to set.
	 * @alias Titanium.UI.TextField.setBorderRadius
	 */
	setBorderRadius: function () { },
	/**
	 * the border style constant for the field
	 * @alias Titanium.UI.TextField.borderStyle
	 * @property {Integer}
	 */
	borderStyle: 0,
	/**
	 * Get the the border style constant for the field
	 * @alias Titanium.UI.TextField.getBorderStyle
	 * @return {Integer}
	 */
	getBorderStyle: function () { return borderStyle; },
	/**
	 * Set the the border style constant for the field
	 * @param {Integer} value New value to set.
	 * @alias Titanium.UI.TextField.setBorderStyle
	 */
	setBorderStyle: function () { },
	/**
	 * the border width of the view
	 * @alias Titanium.UI.TextField.borderWidth
	 * @property {Float}
	 */
	borderWidth: 0.0,
	/**
	 * Get the the border width of the view
	 * @alias Titanium.UI.TextField.getBorderWidth
	 * @return {Float}
	 */
	getBorderWidth: function () { return borderWidth; },
	/**
	 * Set the the border width of the view
	 * @param {Float} value New value to set.
	 * @alias Titanium.UI.TextField.setBorderWidth
	 */
	setBorderWidth: function () { },
	/**
	 * property for the view bottom position. This position is relative to the view's parent. Can be either a float value or a dimension string ie 'auto' (default), '50%' (iPhone only).
	 * @alias Titanium.UI.TextField.bottom
	 * @property {Float,String}
	 */
	bottom: 0.0,
	/**
	 * Get the property for the view bottom position. This position is relative to the view's parent. Can be either a float value or a dimension string ie 'auto' (default), '50%' (iPhone only).
	 * @alias Titanium.UI.TextField.getBottom
	 * @return {Float,String}
	 */
	getBottom: function () { return bottom; },
	/**
	 * Set the property for the view bottom position. This position is relative to the view's parent. Can be either a float value or a dimension string ie 'auto' (default), '50%' (iPhone only).
	 * @param {Float,String} value New value to set.
	 * @alias Titanium.UI.TextField.setBottom
	 */
	setBottom: function () { },
	/**
	 * a dictionary with properties x and y to indicate the center of the views position relative to the parent view
	 * @alias Titanium.UI.TextField.center
	 * @property {Object}
	 */
	center: {},
	/**
	 * Get the a dictionary with properties x and y to indicate the center of the views position relative to the parent view
	 * @alias Titanium.UI.TextField.getCenter
	 * @return {Object}
	 */
	getCenter: function () { return center; },
	/**
	 * Set the a dictionary with properties x and y to indicate the center of the views position relative to the parent view
	 * @param {Object} value New value to set.
	 * @alias Titanium.UI.TextField.setCenter
	 */
	setCenter: function () { },
	/**
	 * the mode constant for how to handle displaying the clear button
	 * @alias Titanium.UI.TextField.clearButtonMode
	 * @property {Integer}
	 */
	clearButtonMode: 0,
	/**
	 * Get the the mode constant for how to handle displaying the clear button
	 * @alias Titanium.UI.TextField.getClearButtonMode
	 * @return {Integer}
	 */
	getClearButtonMode: function () { return clearButtonMode; },
	/**
	 * Set the the mode constant for how to handle displaying the clear button
	 * @param {Integer} value New value to set.
	 * @alias Titanium.UI.TextField.setClearButtonMode
	 */
	setClearButtonMode: function () { },
	/**
	 * boolean that indicates if the value of the field is cleared upon editing
	 * @alias Titanium.UI.TextField.clearOnEdit
	 * @property {Boolean}
	 */
	clearOnEdit: false,
	/**
	 * Get the boolean that indicates if the value of the field is cleared upon editing
	 * @alias Titanium.UI.TextField.getClearOnEdit
	 * @return {Boolean}
	 */
	getClearOnEdit: function () { return clearOnEdit; },
	/**
	 * Set the boolean that indicates if the value of the field is cleared upon editing
	 * @param {Boolean} value New value to set.
	 * @alias Titanium.UI.TextField.setClearOnEdit
	 */
	setClearOnEdit: function () { },
	/**
	 * boolean indicating if the field is editable
	 * @alias Titanium.UI.TextField.editable
	 * @property {Boolean}
	 */
	editable: false,
	/**
	 * Get the boolean indicating if the field is editable
	 * @alias Titanium.UI.TextField.getEditable
	 * @return {Boolean}
	 */
	getEditable: function () { return editable; },
	/**
	 * Set the boolean indicating if the field is editable
	 * @param {Boolean} value New value to set.
	 * @alias Titanium.UI.TextField.setEditable
	 */
	setEditable: function () { },
	/**
	 * boolean indicating the enabled state of the field
	 * @alias Titanium.UI.TextField.enabled
	 * @property {Boolean}
	 */
	enabled: false,
	/**
	 * Get the boolean indicating the enabled state of the field
	 * @alias Titanium.UI.TextField.getEnabled
	 * @return {Boolean}
	 */
	getEnabled: function () { return enabled; },
	/**
	 * Set the boolean indicating the enabled state of the field
	 * @param {Boolean} value New value to set.
	 * @alias Titanium.UI.TextField.setEnabled
	 */
	setEnabled: function () { },
	/**
	 * Set true if you want a view to be focusable when navigating with the trackball or D-Pad. Default: false. (Android Only)
	 * @alias Titanium.UI.TextField.focusable
	 * @property {Boolean}
	 */
	focusable: false,
	/**
	 * Get the Set true if you want a view to be focusable when navigating with the trackball or D-Pad. Default: false. (Android Only)
	 * @alias Titanium.UI.TextField.getFocusable
	 * @return {Boolean}
	 */
	getFocusable: function () { return focusable; },
	/**
	 * Set the Set true if you want a view to be focusable when navigating with the trackball or D-Pad. Default: false. (Android Only)
	 * @param {Boolean} value New value to set.
	 * @alias Titanium.UI.TextField.setFocusable
	 */
	setFocusable: function () { },
	/**
	 * the font family
	 * @alias Titanium.UI.TextField.font-family
	 * @property {String}
	 */
	font-family: '',
	/**
	 * Get the the font family
	 * @alias Titanium.UI.TextField.getFont-family
	 * @return {String}
	 */
	getFont-family: function () { return font-family; },
	/**
	 * Set the the font family
	 * @param {String} value New value to set.
	 * @alias Titanium.UI.TextField.setFont-family
	 */
	setFont-family: function () { },
	/**
	 * the font size
	 * @alias Titanium.UI.TextField.font-size
	 * @property {String}
	 */
	font-size: '',
	/**
	 * Get the the font size
	 * @alias Titanium.UI.TextField.getFont-size
	 * @return {String}
	 */
	getFont-size: function () { return font-size; },
	/**
	 * Set the the font size
	 * @param {String} value New value to set.
	 * @alias Titanium.UI.TextField.setFont-size
	 */
	setFont-size: function () { },
	/**
	 * the font style, either normal or italics
	 * @alias Titanium.UI.TextField.font-style
	 * @property {String}
	 */
	font-style: '',
	/**
	 * Get the the font style, either normal or italics
	 * @alias Titanium.UI.TextField.getFont-style
	 * @return {String}
	 */
	getFont-style: function () { return font-style; },
	/**
	 * Set the the font style, either normal or italics
	 * @param {String} value New value to set.
	 * @alias Titanium.UI.TextField.setFont-style
	 */
	setFont-style: function () { },
	/**
	 * the font weight, either normal or bold
	 * @alias Titanium.UI.TextField.font-weight
	 * @property {String}
	 */
	font-weight: '',
	/**
	 * Get the the font weight, either normal or bold
	 * @alias Titanium.UI.TextField.getFont-weight
	 * @return {String}
	 */
	getFont-weight: function () { return font-weight; },
	/**
	 * Set the the font weight, either normal or bold
	 * @param {String} value New value to set.
	 * @alias Titanium.UI.TextField.setFont-weight
	 */
	setFont-weight: function () { },
	/**
	 * property for the view height. Can be either a float value or a dimension string ie 'auto' (default), '50%' (iPhone only).
	 * @alias Titanium.UI.TextField.height
	 * @property {Float,String}
	 */
	height: 0.0,
	/**
	 * Get the property for the view height. Can be either a float value or a dimension string ie 'auto' (default), '50%' (iPhone only).
	 * @alias Titanium.UI.TextField.getHeight
	 * @return {Float,String}
	 */
	getHeight: function () { return height; },
	/**
	 * Set the property for the view height. Can be either a float value or a dimension string ie 'auto' (default), '50%' (iPhone only).
	 * @param {Float,String} value New value to set.
	 * @alias Titanium.UI.TextField.setHeight
	 */
	setHeight: function () { },
	/**
	 * the hint text to display when the field is unfocused
	 * @alias Titanium.UI.TextField.hintText
	 * @property {String}
	 */
	hintText: '',
	/**
	 * Get the the hint text to display when the field is unfocused
	 * @alias Titanium.UI.TextField.getHintText
	 * @return {String}
	 */
	getHintText: function () { return hintText; },
	/**
	 * Set the the hint text to display when the field is unfocused
	 * @param {String} value New value to set.
	 * @alias Titanium.UI.TextField.setHintText
	 */
	setHintText: function () { },
	/**
	 * array of toolbar button objects to be used when the keyboard is displayed
	 * @alias Titanium.UI.TextField.keyboardToolbar
	 * @property {Array}
	 */
	keyboardToolbar: [],
	/**
	 * Get the array of toolbar button objects to be used when the keyboard is displayed
	 * @alias Titanium.UI.TextField.getKeyboardToolbar
	 * @return {Array}
	 */
	getKeyboardToolbar: function () { return keyboardToolbar; },
	/**
	 * Set the array of toolbar button objects to be used when the keyboard is displayed
	 * @param {Array} value New value to set.
	 * @alias Titanium.UI.TextField.setKeyboardToolbar
	 */
	setKeyboardToolbar: function () { },
	/**
	 * the color of the keyboard toolbar
	 * @alias Titanium.UI.TextField.keyboardToolbarColor
	 * @property {String}
	 */
	keyboardToolbarColor: '',
	/**
	 * Get the the color of the keyboard toolbar
	 * @alias Titanium.UI.TextField.getKeyboardToolbarColor
	 * @return {String}
	 */
	getKeyboardToolbarColor: function () { return keyboardToolbarColor; },
	/**
	 * Set the the color of the keyboard toolbar
	 * @param {String} value New value to set.
	 * @alias Titanium.UI.TextField.setKeyboardToolbarColor
	 */
	setKeyboardToolbarColor: function () { },
	/**
	 * the height of the keyboard toolbar
	 * @alias Titanium.UI.TextField.keyboardToolbarHeight
	 * @property {Float}
	 */
	keyboardToolbarHeight: 0.0,
	/**
	 * Get the the height of the keyboard toolbar
	 * @alias Titanium.UI.TextField.getKeyboardToolbarHeight
	 * @return {Float}
	 */
	getKeyboardToolbarHeight: function () { return keyboardToolbarHeight; },
	/**
	 * Set the the height of the keyboard toolbar
	 * @param {Float} value New value to set.
	 * @alias Titanium.UI.TextField.setKeyboardToolbarHeight
	 */
	setKeyboardToolbarHeight: function () { },
	/**
	 * property for the view left position. This position is relative to the view's parent. Can be either a float value or a dimension string ie 'auto' (default), '50%' (iPhone only).
	 * @alias Titanium.UI.TextField.left
	 * @property {Float,String}
	 */
	left: 0.0,
	/**
	 * Get the property for the view left position. This position is relative to the view's parent. Can be either a float value or a dimension string ie 'auto' (default), '50%' (iPhone only).
	 * @alias Titanium.UI.TextField.getLeft
	 * @return {Float,String}
	 */
	getLeft: function () { return left; },
	/**
	 * Set the property for the view left position. This position is relative to the view's parent. Can be either a float value or a dimension string ie 'auto' (default), '50%' (iPhone only).
	 * @param {Float,String} value New value to set.
	 * @alias Titanium.UI.TextField.setLeft
	 */
	setLeft: function () { },
	/**
	 * the left button view
	 * @alias Titanium.UI.TextField.leftButton
	 * @property {Object}
	 */
	leftButton: {},
	/**
	 * Get the the left button view
	 * @alias Titanium.UI.TextField.getLeftButton
	 * @return {Object}
	 */
	getLeftButton: function () { return leftButton; },
	/**
	 * Set the the left button view
	 * @param {Object} value New value to set.
	 * @alias Titanium.UI.TextField.setLeftButton
	 */
	setLeftButton: function () { },
	/**
	 * the mode of the left button view
	 * @alias Titanium.UI.TextField.leftButtonMode
	 * @property {Integer}
	 */
	leftButtonMode: 0,
	/**
	 * Get the the mode of the left button view
	 * @alias Titanium.UI.TextField.getLeftButtonMode
	 * @return {Integer}
	 */
	getLeftButtonMode: function () { return leftButtonMode; },
	/**
	 * Set the the mode of the left button view
	 * @param {Integer} value New value to set.
	 * @alias Titanium.UI.TextField.setLeftButtonMode
	 */
	setLeftButtonMode: function () { },
	/**
	 * the left padding of the space between the button and the edge of the field
	 * @alias Titanium.UI.TextField.leftButtonPadding
	 * @property {Float}
	 */
	leftButtonPadding: 0.0,
	/**
	 * Get the the left padding of the space between the button and the edge of the field
	 * @alias Titanium.UI.TextField.getLeftButtonPadding
	 * @return {Float}
	 */
	getLeftButtonPadding: function () { return leftButtonPadding; },
	/**
	 * Set the the left padding of the space between the button and the edge of the field
	 * @param {Float} value New value to set.
	 * @alias Titanium.UI.TextField.setLeftButtonPadding
	 */
	setLeftButtonPadding: function () { },
	/**
	 * the minimum size of the font when the font is sized based on the contents.  Enables font scaling to fit
	 * @alias Titanium.UI.TextField.minimumFontSize
	 * @property {Integer}
	 */
	minimumFontSize: 0,
	/**
	 * Get the the minimum size of the font when the font is sized based on the contents.  Enables font scaling to fit
	 * @alias Titanium.UI.TextField.getMinimumFontSize
	 * @return {Integer}
	 */
	getMinimumFontSize: function () { return minimumFontSize; },
	/**
	 * Set the the minimum size of the font when the font is sized based on the contents.  Enables font scaling to fit
	 * @param {Integer} value New value to set.
	 * @alias Titanium.UI.TextField.setMinimumFontSize
	 */
	setMinimumFontSize: function () { },
	/**
	 * the opacity from 0.0-1.0
	 * @alias Titanium.UI.TextField.opacity
	 * @property {Float}
	 */
	opacity: 0.0,
	/**
	 * Get the the opacity from 0.0-1.0
	 * @alias Titanium.UI.TextField.getOpacity
	 * @return {Float}
	 */
	getOpacity: function () { return opacity; },
	/**
	 * Set the the opacity from 0.0-1.0
	 * @param {Float} value New value to set.
	 * @alias Titanium.UI.TextField.setOpacity
	 */
	setOpacity: function () { },
	/**
	 * the left padding of the text field
	 * @alias Titanium.UI.TextField.paddingLeft
	 * @property {Float}
	 */
	paddingLeft: 0.0,
	/**
	 * Get the the left padding of the text field
	 * @alias Titanium.UI.TextField.getPaddingLeft
	 * @return {Float}
	 */
	getPaddingLeft: function () { return paddingLeft; },
	/**
	 * Set the the left padding of the text field
	 * @param {Float} value New value to set.
	 * @alias Titanium.UI.TextField.setPaddingLeft
	 */
	setPaddingLeft: function () { },
	/**
	 * the right padding of the text field
	 * @alias Titanium.UI.TextField.paddingRight
	 * @property {Float}
	 */
	paddingRight: 0.0,
	/**
	 * Get the the right padding of the text field
	 * @alias Titanium.UI.TextField.getPaddingRight
	 * @return {Float}
	 */
	getPaddingRight: function () { return paddingRight; },
	/**
	 * Set the the right padding of the text field
	 * @param {Float} value New value to set.
	 * @alias Titanium.UI.TextField.setPaddingRight
	 */
	setPaddingRight: function () { },
	/**
	 * property for the view right position. This position is relative to the view's parent. Can be either a float value or a dimension string ie 'auto' (default), '50%' (iPhone only).
	 * @alias Titanium.UI.TextField.right
	 * @property {Float,String}
	 */
	right: 0.0,
	/**
	 * Get the property for the view right position. This position is relative to the view's parent. Can be either a float value or a dimension string ie 'auto' (default), '50%' (iPhone only).
	 * @alias Titanium.UI.TextField.getRight
	 * @return {Float,String}
	 */
	getRight: function () { return right; },
	/**
	 * Set the property for the view right position. This position is relative to the view's parent. Can be either a float value or a dimension string ie 'auto' (default), '50%' (iPhone only).
	 * @param {Float,String} value New value to set.
	 * @alias Titanium.UI.TextField.setRight
	 */
	setRight: function () { },
	/**
	 * the right button view
	 * @alias Titanium.UI.TextField.rightButton
	 * @property {Object}
	 */
	rightButton: {},
	/**
	 * Get the the right button view
	 * @alias Titanium.UI.TextField.getRightButton
	 * @return {Object}
	 */
	getRightButton: function () { return rightButton; },
	/**
	 * Set the the right button view
	 * @param {Object} value New value to set.
	 * @alias Titanium.UI.TextField.setRightButton
	 */
	setRightButton: function () { },
	/**
	 * the mode of the right button view
	 * @alias Titanium.UI.TextField.rightButtonMode
	 * @property {Integer}
	 */
	rightButtonMode: 0,
	/**
	 * Get the the mode of the right button view
	 * @alias Titanium.UI.TextField.getRightButtonMode
	 * @return {Integer}
	 */
	getRightButtonMode: function () { return rightButtonMode; },
	/**
	 * Set the the mode of the right button view
	 * @param {Integer} value New value to set.
	 * @alias Titanium.UI.TextField.setRightButtonMode
	 */
	setRightButtonMode: function () { },
	/**
	 * the right padding of the space between the button and the edge of the field
	 * @alias Titanium.UI.TextField.rightButtonPadding
	 * @property {Float}
	 */
	rightButtonPadding: 0.0,
	/**
	 * Get the the right padding of the space between the button and the edge of the field
	 * @alias Titanium.UI.TextField.getRightButtonPadding
	 * @return {Float}
	 */
	getRightButtonPadding: function () { return rightButtonPadding; },
	/**
	 * Set the the right padding of the space between the button and the edge of the field
	 * @param {Float} value New value to set.
	 * @alias Titanium.UI.TextField.setRightButtonPadding
	 */
	setRightButtonPadding: function () { },
	/**
	 * the size of the view as a dictionary of width and height properties
	 * @alias Titanium.UI.TextField.size
	 * @property {Object}
	 */
	size: {},
	/**
	 * Get the the size of the view as a dictionary of width and height properties
	 * @alias Titanium.UI.TextField.getSize
	 * @return {Object}
	 */
	getSize: function () { return size; },
	/**
	 * Set the the size of the view as a dictionary of width and height properties
	 * @param {Object} value New value to set.
	 * @alias Titanium.UI.TextField.setSize
	 */
	setSize: function () { },
	/**
	 * One of Titanium.UI.Android.SOFT_KEYBOARD_DEFAULT_ON_FOCUS, Titanium.UI.Android.SOFT_KEYBOARD_HIDE_ON_FOCUS, or Titanium.UI.Android.SOFT_KEYBOARD_SHOW_ON_FOCUS. (Android only)
	 * @alias Titanium.UI.TextField.softKeyboardOnFocus
	 * @property {Integer}
	 */
	softKeyboardOnFocus: 0,
	/**
	 * Get the One of Titanium.UI.Android.SOFT_KEYBOARD_DEFAULT_ON_FOCUS, Titanium.UI.Android.SOFT_KEYBOARD_HIDE_ON_FOCUS, or Titanium.UI.Android.SOFT_KEYBOARD_SHOW_ON_FOCUS. (Android only)
	 * @alias Titanium.UI.TextField.getSoftKeyboardOnFocus
	 * @return {Integer}
	 */
	getSoftKeyboardOnFocus: function () { return softKeyboardOnFocus; },
	/**
	 * Set the One of Titanium.UI.Android.SOFT_KEYBOARD_DEFAULT_ON_FOCUS, Titanium.UI.Android.SOFT_KEYBOARD_HIDE_ON_FOCUS, or Titanium.UI.Android.SOFT_KEYBOARD_SHOW_ON_FOCUS. (Android only)
	 * @param {Integer} value New value to set.
	 * @alias Titanium.UI.TextField.setSoftKeyboardOnFocus
	 */
	setSoftKeyboardOnFocus: function () { },
	/**
	 * boolean to indicate if the return key should be suppressed during entry
	 * @alias Titanium.UI.TextField.suppressReturn
	 * @property {Boolean}
	 */
	suppressReturn: false,
	/**
	 * Get the boolean to indicate if the return key should be suppressed during entry
	 * @alias Titanium.UI.TextField.getSuppressReturn
	 * @return {Boolean}
	 */
	getSuppressReturn: function () { return suppressReturn; },
	/**
	 * Set the boolean to indicate if the return key should be suppressed during entry
	 * @param {Boolean} value New value to set.
	 * @alias Titanium.UI.TextField.setSuppressReturn
	 */
	setSuppressReturn: function () { },
	/**
	 * property for the view top position. This position is relative to the view's parent. Can be either a float value or a dimension string ie 'auto' (default), '50%' (iPhone only).
	 * @alias Titanium.UI.TextField.top
	 * @property {Float,String}
	 */
	top: 0.0,
	/**
	 * Get the property for the view top position. This position is relative to the view's parent. Can be either a float value or a dimension string ie 'auto' (default), '50%' (iPhone only).
	 * @alias Titanium.UI.TextField.getTop
	 * @return {Float,String}
	 */
	getTop: function () { return top; },
	/**
	 * Set the property for the view top position. This position is relative to the view's parent. Can be either a float value or a dimension string ie 'auto' (default), '50%' (iPhone only).
	 * @param {Float,String} value New value to set.
	 * @alias Titanium.UI.TextField.setTop
	 */
	setTop: function () { },
	/**
	 * a boolean indicating if the view should receive touch events (true, default) or forward them to peers (false)
	 * @alias Titanium.UI.TextField.touchEnabled
	 * @property {Boolean}
	 */
	touchEnabled: false,
	/**
	 * Get the a boolean indicating if the view should receive touch events (true, default) or forward them to peers (false)
	 * @alias Titanium.UI.TextField.getTouchEnabled
	 * @return {Boolean}
	 */
	getTouchEnabled: function () { return touchEnabled; },
	/**
	 * Set the a boolean indicating if the view should receive touch events (true, default) or forward them to peers (false)
	 * @param {Boolean} value New value to set.
	 * @alias Titanium.UI.TextField.setTouchEnabled
	 */
	setTouchEnabled: function () { },
	/**
	 * the transformation matrix to apply to the view
	 * @alias Titanium.UI.TextField.transform
	 * @property {Object}
	 */
	transform: {},
	/**
	 * Get the the transformation matrix to apply to the view
	 * @alias Titanium.UI.TextField.getTransform
	 * @return {Object}
	 */
	getTransform: function () { return transform; },
	/**
	 * Set the the transformation matrix to apply to the view
	 * @param {Object} value New value to set.
	 * @alias Titanium.UI.TextField.setTransform
	 */
	setTransform: function () { },
	/**
	 * value of the field
	 * @alias Titanium.UI.TextField.value
	 * @property {String}
	 */
	value: '',
	/**
	 * Get the value of the field
	 * @alias Titanium.UI.TextField.getValue
	 * @return {String}
	 */
	getValue: function () { return value; },
	/**
	 * Set the value of the field
	 * @param {String} value New value to set.
	 * @alias Titanium.UI.TextField.setValue
	 */
	setValue: function () { },
	/**
	 * the constant or string value for the fields vertical alignment.
	 * @alias Titanium.UI.TextField.verticalAlign
	 * @property {Integer,String}
	 */
	verticalAlign: 0,
	/**
	 * Get the the constant or string value for the fields vertical alignment.
	 * @alias Titanium.UI.TextField.getVerticalAlign
	 * @return {Integer,String}
	 */
	getVerticalAlign: function () { return verticalAlign; },
	/**
	 * Set the the constant or string value for the fields vertical alignment.
	 * @param {Integer,String} value New value to set.
	 * @alias Titanium.UI.TextField.setVerticalAlign
	 */
	setVerticalAlign: function () { },
	/**
	 * a boolean of the visibility of the view
	 * @alias Titanium.UI.TextField.visible
	 * @property {Boolean}
	 */
	visible: false,
	/**
	 * Get the a boolean of the visibility of the view
	 * @alias Titanium.UI.TextField.getVisible
	 * @return {Boolean}
	 */
	getVisible: function () { return visible; },
	/**
	 * Set the a boolean of the visibility of the view
	 * @param {Boolean} value New value to set.
	 * @alias Titanium.UI.TextField.setVisible
	 */
	setVisible: function () { },
	/**
	 * property for the view width. Can be either a float value or a dimension string ie 'auto' (default), '50%' (iPhone only).
	 * @alias Titanium.UI.TextField.width
	 * @property {Float,String}
	 */
	width: 0.0,
	/**
	 * Get the property for the view width. Can be either a float value or a dimension string ie 'auto' (default), '50%' (iPhone only).
	 * @alias Titanium.UI.TextField.getWidth
	 * @return {Float,String}
	 */
	getWidth: function () { return width; },
	/**
	 * Set the property for the view width. Can be either a float value or a dimension string ie 'auto' (default), '50%' (iPhone only).
	 * @param {Float,String} value New value to set.
	 * @alias Titanium.UI.TextField.setWidth
	 */
	setWidth: function () { },
	/**
	 * the z index position relative to other sibling views
	 * @alias Titanium.UI.TextField.zIndex
	 * @property {Integer}
	 */
	zIndex: 0,
	/**
	 * Get the the z index position relative to other sibling views
	 * @alias Titanium.UI.TextField.getZIndex
	 * @return {Integer}
	 */
	getZIndex: function () { return zIndex; },
	/**
	 * Set the the z index position relative to other sibling views
	 * @param {Integer} value New value to set.
	 * @alias Titanium.UI.TextField.setZIndex
	 */
	setZIndex: function () { },
	/**
	 * add a child to the view hierarchy
	 * @param {Object} view the view to add to this views hiearchy
	 * @alias Titanium.UI.TextField.add
	 */
	add: function (view) { },
	/**
	 * add an event listener for the instance to receive view triggered events
	 * @param {String} name name of the event
	 * @param {Function} callback callback function to invoke when the event is fired
	 * @alias Titanium.UI.TextField.addEventListener
	 */
	addEventListener: function (name,callback) { },
	/**
	 * animate the view
	 * @param {Object} obj either a dictionary of animation properties or an Animation object
	 * @param {Function} callback function to be invoked upon completion of the animation
	 * @alias Titanium.UI.TextField.animate
	 */
	animate: function (obj,callback) { },
	/**
	 * force the field to lose focus
	 * @alias Titanium.UI.TextField.blur
	 */
	blur: function () { },
	/**
	 * fire a synthesized event to the views listener
	 * @param {String} name name of the event
	 * @param {Object} event event object
	 * @alias Titanium.UI.TextField.fireEvent
	 */
	fireEvent: function (name,event) { },
	/**
	 * force the field to gain focus
	 * @alias Titanium.UI.TextField.focus
	 */
	focus: function () { },
	/**
	 * return boolean (true) if the field has text
	 * @alias Titanium.UI.TextField.hasText
	 */
	hasText: function () { },
	/**
	 * hide the view
	 * @alias Titanium.UI.TextField.hide
	 */
	hide: function () { },
	/**
	 * remove a previously add view from the view hiearchy
	 * @param {Object} view the view to remove from this views hiearchy
	 * @alias Titanium.UI.TextField.remove
	 */
	remove: function (view) { },
	/**
	 * remove a previously added event listener
	 * @param {String} name name of the event
	 * @param {Function} callback callback function passed in addEventListener
	 * @alias Titanium.UI.TextField.removeEventListener
	 */
	removeEventListener: function (name,callback) { },
	/**
	 * make the view visible
	 * @alias Titanium.UI.TextField.show
	 */
	show: function () { },
	/**
	 * return a Blob image of the rendered view
	 * @param {Function} f function to be invoked upon completion. if non-null, this method will be performed asynchronously. if null, it will be performed immediately
	 * @alias Titanium.UI.TextField.toImage
	 * @return {Object}
	 */
	toImage: function (f) { return {}; },
};

/**
 * A Toolbar is created by the method Titanium.UI.createToolbar.  A Toolbar can be placed at the bottom of a window and contain buttons.
 * @since 0.8
 */
Titanium.UI.Toolbar = {
	/**
	 * a dictionary with properties x and y to indicate the anchor point value. anchor specifies the position by which animation should occur. center is 0.5, 0.5
	 * @alias Titanium.UI.Toolbar.anchorPoint
	 * @property {Object}
	 */
	anchorPoint: {},
	/**
	 * Get the a dictionary with properties x and y to indicate the anchor point value. anchor specifies the position by which animation should occur. center is 0.5, 0.5
	 * @alias Titanium.UI.Toolbar.getAnchorPoint
	 * @return {Object}
	 */
	getAnchorPoint: function () { return anchorPoint; },
	/**
	 * Set the a dictionary with properties x and y to indicate the anchor point value. anchor specifies the position by which animation should occur. center is 0.5, 0.5
	 * @param {Object} value New value to set.
	 * @alias Titanium.UI.Toolbar.setAnchorPoint
	 */
	setAnchorPoint: function () { },
	/**
	 * read-only object with x and y properties of where the view is during animation
	 * @alias Titanium.UI.Toolbar.animatedCenterPoint
	 * @property {Object}
	 */
	animatedCenterPoint: {},
	/**
	 * Get the read-only object with x and y properties of where the view is during animation
	 * @alias Titanium.UI.Toolbar.getAnimatedCenterPoint
	 * @return {Object}
	 */
	getAnimatedCenterPoint: function () { return animatedCenterPoint; },
	/**
	 * Set the read-only object with x and y properties of where the view is during animation
	 * @param {Object} value New value to set.
	 * @alias Titanium.UI.Toolbar.setAnimatedCenterPoint
	 */
	setAnimatedCenterPoint: function () { },
	/**
	 * the background color of the view
	 * @alias Titanium.UI.Toolbar.backgroundColor
	 * @property {String}
	 */
	backgroundColor: '',
	/**
	 * Get the the background color of the view
	 * @alias Titanium.UI.Toolbar.getBackgroundColor
	 * @return {String}
	 */
	getBackgroundColor: function () { return backgroundColor; },
	/**
	 * Set the the background color of the view
	 * @param {String} value New value to set.
	 * @alias Titanium.UI.Toolbar.setBackgroundColor
	 */
	setBackgroundColor: function () { },
	/**
	 * the disabled background color of the view. (Android)
	 * @alias Titanium.UI.Toolbar.backgroundDisabledColor
	 * @property {String}
	 */
	backgroundDisabledColor: '',
	/**
	 * Get the the disabled background color of the view. (Android)
	 * @alias Titanium.UI.Toolbar.getBackgroundDisabledColor
	 * @return {String}
	 */
	getBackgroundDisabledColor: function () { return backgroundDisabledColor; },
	/**
	 * Set the the disabled background color of the view. (Android)
	 * @param {String} value New value to set.
	 * @alias Titanium.UI.Toolbar.setBackgroundDisabledColor
	 */
	setBackgroundDisabledColor: function () { },
	/**
	 * the disabled background image url of the view. (Android)
	 * @alias Titanium.UI.Toolbar.backgroundDisabledImage
	 * @property {String}
	 */
	backgroundDisabledImage: '',
	/**
	 * Get the the disabled background image url of the view. (Android)
	 * @alias Titanium.UI.Toolbar.getBackgroundDisabledImage
	 * @return {String}
	 */
	getBackgroundDisabledImage: function () { return backgroundDisabledImage; },
	/**
	 * Set the the disabled background image url of the view. (Android)
	 * @param {String} value New value to set.
	 * @alias Titanium.UI.Toolbar.setBackgroundDisabledImage
	 */
	setBackgroundDisabledImage: function () { },
	/**
	 * the focused background color of the view. focusable must be true for normal views. (Android)
	 * @alias Titanium.UI.Toolbar.backgroundFocusedColor
	 * @property {String}
	 */
	backgroundFocusedColor: '',
	/**
	 * Get the the focused background color of the view. focusable must be true for normal views. (Android)
	 * @alias Titanium.UI.Toolbar.getBackgroundFocusedColor
	 * @return {String}
	 */
	getBackgroundFocusedColor: function () { return backgroundFocusedColor; },
	/**
	 * Set the the focused background color of the view. focusable must be true for normal views. (Android)
	 * @param {String} value New value to set.
	 * @alias Titanium.UI.Toolbar.setBackgroundFocusedColor
	 */
	setBackgroundFocusedColor: function () { },
	/**
	 * the focused background image url of the view. focusable must be true for normal views. (Android)
	 * @alias Titanium.UI.Toolbar.backgroundFocusedImage
	 * @property {String}
	 */
	backgroundFocusedImage: '',
	/**
	 * Get the the focused background image url of the view. focusable must be true for normal views. (Android)
	 * @alias Titanium.UI.Toolbar.getBackgroundFocusedImage
	 * @return {String}
	 */
	getBackgroundFocusedImage: function () { return backgroundFocusedImage; },
	/**
	 * Set the the focused background image url of the view. focusable must be true for normal views. (Android)
	 * @param {String} value New value to set.
	 * @alias Titanium.UI.Toolbar.setBackgroundFocusedImage
	 */
	setBackgroundFocusedImage: function () { },
	/**
	 * a background gradient for the view with the properties: type,startPoint,endPoint,startRadius,endRadius,backfillStart,backfillEnd,colors.
	 * @alias Titanium.UI.Toolbar.backgroundGradient
	 * @property {Object}
	 */
	backgroundGradient: {},
	/**
	 * Get the a background gradient for the view with the properties: type,startPoint,endPoint,startRadius,endRadius,backfillStart,backfillEnd,colors.
	 * @alias Titanium.UI.Toolbar.getBackgroundGradient
	 * @return {Object}
	 */
	getBackgroundGradient: function () { return backgroundGradient; },
	/**
	 * Set the a background gradient for the view with the properties: type,startPoint,endPoint,startRadius,endRadius,backfillStart,backfillEnd,colors.
	 * @param {Object} value New value to set.
	 * @alias Titanium.UI.Toolbar.setBackgroundGradient
	 */
	setBackgroundGradient: function () { },
	/**
	 * the background image url of the view
	 * @alias Titanium.UI.Toolbar.backgroundImage
	 * @property {String}
	 */
	backgroundImage: '',
	/**
	 * Get the the background image url of the view
	 * @alias Titanium.UI.Toolbar.getBackgroundImage
	 * @return {String}
	 */
	getBackgroundImage: function () { return backgroundImage; },
	/**
	 * Set the the background image url of the view
	 * @param {String} value New value to set.
	 * @alias Titanium.UI.Toolbar.setBackgroundImage
	 */
	setBackgroundImage: function () { },
	/**
	 * End caps specify the portion of an image that should not be resized when an image is stretched. This technique is used to implement buttons and other resizable image-based interface elements. When a button with end caps is resized, the resizing occurs only in the middle of the button, in the region between the end caps. The end caps themselves keep their original size and appearance. This property specifies the size of the left end cap. The middle (stretchable) portion is assumed to be 1 pixel wide. The right end cap is therefore computed by adding the size of the left end cap and the middle portion together and then subtracting that value from the width of the image
	 * @alias Titanium.UI.Toolbar.backgroundLeftCap
	 * @property {Float}
	 */
	backgroundLeftCap: 0.0,
	/**
	 * Get the End caps specify the portion of an image that should not be resized when an image is stretched. This technique is used to implement buttons and other resizable image-based interface elements. When a button with end caps is resized, the resizing occurs only in the middle of the button, in the region between the end caps. The end caps themselves keep their original size and appearance. This property specifies the size of the left end cap. The middle (stretchable) portion is assumed to be 1 pixel wide. The right end cap is therefore computed by adding the size of the left end cap and the middle portion together and then subtracting that value from the width of the image
	 * @alias Titanium.UI.Toolbar.getBackgroundLeftCap
	 * @return {Float}
	 */
	getBackgroundLeftCap: function () { return backgroundLeftCap; },
	/**
	 * Set the End caps specify the portion of an image that should not be resized when an image is stretched. This technique is used to implement buttons and other resizable image-based interface elements. When a button with end caps is resized, the resizing occurs only in the middle of the button, in the region between the end caps. The end caps themselves keep their original size and appearance. This property specifies the size of the left end cap. The middle (stretchable) portion is assumed to be 1 pixel wide. The right end cap is therefore computed by adding the size of the left end cap and the middle portion together and then subtracting that value from the width of the image
	 * @param {Float} value New value to set.
	 * @alias Titanium.UI.Toolbar.setBackgroundLeftCap
	 */
	setBackgroundLeftCap: function () { },
	/**
	 * the selected background color of the view. focusable must be true for normal views. (Android)
	 * @alias Titanium.UI.Toolbar.backgroundSelectedColor
	 * @property {String}
	 */
	backgroundSelectedColor: '',
	/**
	 * Get the the selected background color of the view. focusable must be true for normal views. (Android)
	 * @alias Titanium.UI.Toolbar.getBackgroundSelectedColor
	 * @return {String}
	 */
	getBackgroundSelectedColor: function () { return backgroundSelectedColor; },
	/**
	 * Set the the selected background color of the view. focusable must be true for normal views. (Android)
	 * @param {String} value New value to set.
	 * @alias Titanium.UI.Toolbar.setBackgroundSelectedColor
	 */
	setBackgroundSelectedColor: function () { },
	/**
	 * the selected background image url of the view. focusable must be true for normal views. (Android)
	 * @alias Titanium.UI.Toolbar.backgroundSelectedImage
	 * @property {String}
	 */
	backgroundSelectedImage: '',
	/**
	 * Get the the selected background image url of the view. focusable must be true for normal views. (Android)
	 * @alias Titanium.UI.Toolbar.getBackgroundSelectedImage
	 * @return {String}
	 */
	getBackgroundSelectedImage: function () { return backgroundSelectedImage; },
	/**
	 * Set the the selected background image url of the view. focusable must be true for normal views. (Android)
	 * @param {String} value New value to set.
	 * @alias Titanium.UI.Toolbar.setBackgroundSelectedImage
	 */
	setBackgroundSelectedImage: function () { },
	/**
	 * End caps specify the portion of an image that should not be resized when an image is stretched. This technique is used to implement buttons and other resizable image-based interface elements. When a button with end caps is resized, the resizing occurs only in the middle of the button, in the region between the end caps. The end caps themselves keep their original size and appearance. This property specifies the size of the top end cap. The middle (stretchable) portion is assumed to be 1 pixel wide. The bottom end cap is therefore computed by adding the size of the top end cap and the middle portion together and then subtracting that value from the height of the image
	 * @alias Titanium.UI.Toolbar.backgroundTopCap
	 * @property {Float}
	 */
	backgroundTopCap: 0.0,
	/**
	 * Get the End caps specify the portion of an image that should not be resized when an image is stretched. This technique is used to implement buttons and other resizable image-based interface elements. When a button with end caps is resized, the resizing occurs only in the middle of the button, in the region between the end caps. The end caps themselves keep their original size and appearance. This property specifies the size of the top end cap. The middle (stretchable) portion is assumed to be 1 pixel wide. The bottom end cap is therefore computed by adding the size of the top end cap and the middle portion together and then subtracting that value from the height of the image
	 * @alias Titanium.UI.Toolbar.getBackgroundTopCap
	 * @return {Float}
	 */
	getBackgroundTopCap: function () { return backgroundTopCap; },
	/**
	 * Set the End caps specify the portion of an image that should not be resized when an image is stretched. This technique is used to implement buttons and other resizable image-based interface elements. When a button with end caps is resized, the resizing occurs only in the middle of the button, in the region between the end caps. The end caps themselves keep their original size and appearance. This property specifies the size of the top end cap. The middle (stretchable) portion is assumed to be 1 pixel wide. The bottom end cap is therefore computed by adding the size of the top end cap and the middle portion together and then subtracting that value from the height of the image
	 * @param {Float} value New value to set.
	 * @alias Titanium.UI.Toolbar.setBackgroundTopCap
	 */
	setBackgroundTopCap: function () { },
	/**
	 * the border color of the view
	 * @alias Titanium.UI.Toolbar.borderColor
	 * @property {String}
	 */
	borderColor: '',
	/**
	 * Get the the border color of the view
	 * @alias Titanium.UI.Toolbar.getBorderColor
	 * @return {String}
	 */
	getBorderColor: function () { return borderColor; },
	/**
	 * Set the the border color of the view
	 * @param {String} value New value to set.
	 * @alias Titanium.UI.Toolbar.setBorderColor
	 */
	setBorderColor: function () { },
	/**
	 * the border radius of the view
	 * @alias Titanium.UI.Toolbar.borderRadius
	 * @property {Float}
	 */
	borderRadius: 0.0,
	/**
	 * Get the the border radius of the view
	 * @alias Titanium.UI.Toolbar.getBorderRadius
	 * @return {Float}
	 */
	getBorderRadius: function () { return borderRadius; },
	/**
	 * Set the the border radius of the view
	 * @param {Float} value New value to set.
	 * @alias Titanium.UI.Toolbar.setBorderRadius
	 */
	setBorderRadius: function () { },
	/**
	 * the border width of the view
	 * @alias Titanium.UI.Toolbar.borderWidth
	 * @property {Float}
	 */
	borderWidth: 0.0,
	/**
	 * Get the the border width of the view
	 * @alias Titanium.UI.Toolbar.getBorderWidth
	 * @return {Float}
	 */
	getBorderWidth: function () { return borderWidth; },
	/**
	 * Set the the border width of the view
	 * @param {Float} value New value to set.
	 * @alias Titanium.UI.Toolbar.setBorderWidth
	 */
	setBorderWidth: function () { },
	/**
	 * property for the view bottom position. This position is relative to the view's parent. Can be either a float value or a dimension string ie 'auto' (default), '50%' (iPhone only).
	 * @alias Titanium.UI.Toolbar.bottom
	 * @property {Float,String}
	 */
	bottom: 0.0,
	/**
	 * Get the property for the view bottom position. This position is relative to the view's parent. Can be either a float value or a dimension string ie 'auto' (default), '50%' (iPhone only).
	 * @alias Titanium.UI.Toolbar.getBottom
	 * @return {Float,String}
	 */
	getBottom: function () { return bottom; },
	/**
	 * Set the property for the view bottom position. This position is relative to the view's parent. Can be either a float value or a dimension string ie 'auto' (default), '50%' (iPhone only).
	 * @param {Float,String} value New value to set.
	 * @alias Titanium.UI.Toolbar.setBottom
	 */
	setBottom: function () { },
	/**
	 * a dictionary with properties x and y to indicate the center of the views position relative to the parent view
	 * @alias Titanium.UI.Toolbar.center
	 * @property {Object}
	 */
	center: {},
	/**
	 * Get the a dictionary with properties x and y to indicate the center of the views position relative to the parent view
	 * @alias Titanium.UI.Toolbar.getCenter
	 * @return {Object}
	 */
	getCenter: function () { return center; },
	/**
	 * Set the a dictionary with properties x and y to indicate the center of the views position relative to the parent view
	 * @param {Object} value New value to set.
	 * @alias Titanium.UI.Toolbar.setCenter
	 */
	setCenter: function () { },
	/**
	 * Set true if you want a view to be focusable when navigating with the trackball or D-Pad. Default: false. (Android Only)
	 * @alias Titanium.UI.Toolbar.focusable
	 * @property {Boolean}
	 */
	focusable: false,
	/**
	 * Get the Set true if you want a view to be focusable when navigating with the trackball or D-Pad. Default: false. (Android Only)
	 * @alias Titanium.UI.Toolbar.getFocusable
	 * @return {Boolean}
	 */
	getFocusable: function () { return focusable; },
	/**
	 * Set the Set true if you want a view to be focusable when navigating with the trackball or D-Pad. Default: false. (Android Only)
	 * @param {Boolean} value New value to set.
	 * @alias Titanium.UI.Toolbar.setFocusable
	 */
	setFocusable: function () { },
	/**
	 * the font family
	 * @alias Titanium.UI.Toolbar.font-family
	 * @property {String}
	 */
	font-family: '',
	/**
	 * Get the the font family
	 * @alias Titanium.UI.Toolbar.getFont-family
	 * @return {String}
	 */
	getFont-family: function () { return font-family; },
	/**
	 * Set the the font family
	 * @param {String} value New value to set.
	 * @alias Titanium.UI.Toolbar.setFont-family
	 */
	setFont-family: function () { },
	/**
	 * the font size
	 * @alias Titanium.UI.Toolbar.font-size
	 * @property {String}
	 */
	font-size: '',
	/**
	 * Get the the font size
	 * @alias Titanium.UI.Toolbar.getFont-size
	 * @return {String}
	 */
	getFont-size: function () { return font-size; },
	/**
	 * Set the the font size
	 * @param {String} value New value to set.
	 * @alias Titanium.UI.Toolbar.setFont-size
	 */
	setFont-size: function () { },
	/**
	 * the font style, either normal or italics
	 * @alias Titanium.UI.Toolbar.font-style
	 * @property {String}
	 */
	font-style: '',
	/**
	 * Get the the font style, either normal or italics
	 * @alias Titanium.UI.Toolbar.getFont-style
	 * @return {String}
	 */
	getFont-style: function () { return font-style; },
	/**
	 * Set the the font style, either normal or italics
	 * @param {String} value New value to set.
	 * @alias Titanium.UI.Toolbar.setFont-style
	 */
	setFont-style: function () { },
	/**
	 * the font weight, either normal or bold
	 * @alias Titanium.UI.Toolbar.font-weight
	 * @property {String}
	 */
	font-weight: '',
	/**
	 * Get the the font weight, either normal or bold
	 * @alias Titanium.UI.Toolbar.getFont-weight
	 * @return {String}
	 */
	getFont-weight: function () { return font-weight; },
	/**
	 * Set the the font weight, either normal or bold
	 * @param {String} value New value to set.
	 * @alias Titanium.UI.Toolbar.setFont-weight
	 */
	setFont-weight: function () { },
	/**
	 * property for the view height. Can be either a float value or a dimension string ie 'auto' (default), '50%' (iPhone only).
	 * @alias Titanium.UI.Toolbar.height
	 * @property {Float,String}
	 */
	height: 0.0,
	/**
	 * Get the property for the view height. Can be either a float value or a dimension string ie 'auto' (default), '50%' (iPhone only).
	 * @alias Titanium.UI.Toolbar.getHeight
	 * @return {Float,String}
	 */
	getHeight: function () { return height; },
	/**
	 * Set the property for the view height. Can be either a float value or a dimension string ie 'auto' (default), '50%' (iPhone only).
	 * @param {Float,String} value New value to set.
	 * @alias Titanium.UI.Toolbar.setHeight
	 */
	setHeight: function () { },
	/**
	 * property for the view left position. This position is relative to the view's parent. Can be either a float value or a dimension string ie 'auto' (default), '50%' (iPhone only).
	 * @alias Titanium.UI.Toolbar.left
	 * @property {Float,String}
	 */
	left: 0.0,
	/**
	 * Get the property for the view left position. This position is relative to the view's parent. Can be either a float value or a dimension string ie 'auto' (default), '50%' (iPhone only).
	 * @alias Titanium.UI.Toolbar.getLeft
	 * @return {Float,String}
	 */
	getLeft: function () { return left; },
	/**
	 * Set the property for the view left position. This position is relative to the view's parent. Can be either a float value or a dimension string ie 'auto' (default), '50%' (iPhone only).
	 * @param {Float,String} value New value to set.
	 * @alias Titanium.UI.Toolbar.setLeft
	 */
	setLeft: function () { },
	/**
	 * the opacity from 0.0-1.0
	 * @alias Titanium.UI.Toolbar.opacity
	 * @property {Float}
	 */
	opacity: 0.0,
	/**
	 * Get the the opacity from 0.0-1.0
	 * @alias Titanium.UI.Toolbar.getOpacity
	 * @return {Float}
	 */
	getOpacity: function () { return opacity; },
	/**
	 * Set the the opacity from 0.0-1.0
	 * @param {Float} value New value to set.
	 * @alias Titanium.UI.Toolbar.setOpacity
	 */
	setOpacity: function () { },
	/**
	 * property for the view right position. This position is relative to the view's parent. Can be either a float value or a dimension string ie 'auto' (default), '50%' (iPhone only).
	 * @alias Titanium.UI.Toolbar.right
	 * @property {Float,String}
	 */
	right: 0.0,
	/**
	 * Get the property for the view right position. This position is relative to the view's parent. Can be either a float value or a dimension string ie 'auto' (default), '50%' (iPhone only).
	 * @alias Titanium.UI.Toolbar.getRight
	 * @return {Float,String}
	 */
	getRight: function () { return right; },
	/**
	 * Set the property for the view right position. This position is relative to the view's parent. Can be either a float value or a dimension string ie 'auto' (default), '50%' (iPhone only).
	 * @param {Float,String} value New value to set.
	 * @alias Titanium.UI.Toolbar.setRight
	 */
	setRight: function () { },
	/**
	 * the size of the view as a dictionary of width and height properties
	 * @alias Titanium.UI.Toolbar.size
	 * @property {Object}
	 */
	size: {},
	/**
	 * Get the the size of the view as a dictionary of width and height properties
	 * @alias Titanium.UI.Toolbar.getSize
	 * @return {Object}
	 */
	getSize: function () { return size; },
	/**
	 * Set the the size of the view as a dictionary of width and height properties
	 * @param {Object} value New value to set.
	 * @alias Titanium.UI.Toolbar.setSize
	 */
	setSize: function () { },
	/**
	 * One of Titanium.UI.Android.SOFT_KEYBOARD_DEFAULT_ON_FOCUS, Titanium.UI.Android.SOFT_KEYBOARD_HIDE_ON_FOCUS, or Titanium.UI.Android.SOFT_KEYBOARD_SHOW_ON_FOCUS. (Android only)
	 * @alias Titanium.UI.Toolbar.softKeyboardOnFocus
	 * @property {Integer}
	 */
	softKeyboardOnFocus: 0,
	/**
	 * Get the One of Titanium.UI.Android.SOFT_KEYBOARD_DEFAULT_ON_FOCUS, Titanium.UI.Android.SOFT_KEYBOARD_HIDE_ON_FOCUS, or Titanium.UI.Android.SOFT_KEYBOARD_SHOW_ON_FOCUS. (Android only)
	 * @alias Titanium.UI.Toolbar.getSoftKeyboardOnFocus
	 * @return {Integer}
	 */
	getSoftKeyboardOnFocus: function () { return softKeyboardOnFocus; },
	/**
	 * Set the One of Titanium.UI.Android.SOFT_KEYBOARD_DEFAULT_ON_FOCUS, Titanium.UI.Android.SOFT_KEYBOARD_HIDE_ON_FOCUS, or Titanium.UI.Android.SOFT_KEYBOARD_SHOW_ON_FOCUS. (Android only)
	 * @param {Integer} value New value to set.
	 * @alias Titanium.UI.Toolbar.setSoftKeyboardOnFocus
	 */
	setSoftKeyboardOnFocus: function () { },
	/**
	 * property for the view top position. This position is relative to the view's parent. Can be either a float value or a dimension string ie 'auto' (default), '50%' (iPhone only).
	 * @alias Titanium.UI.Toolbar.top
	 * @property {Float,String}
	 */
	top: 0.0,
	/**
	 * Get the property for the view top position. This position is relative to the view's parent. Can be either a float value or a dimension string ie 'auto' (default), '50%' (iPhone only).
	 * @alias Titanium.UI.Toolbar.getTop
	 * @return {Float,String}
	 */
	getTop: function () { return top; },
	/**
	 * Set the property for the view top position. This position is relative to the view's parent. Can be either a float value or a dimension string ie 'auto' (default), '50%' (iPhone only).
	 * @param {Float,String} value New value to set.
	 * @alias Titanium.UI.Toolbar.setTop
	 */
	setTop: function () { },
	/**
	 * a boolean indicating if the view should receive touch events (true, default) or forward them to peers (false)
	 * @alias Titanium.UI.Toolbar.touchEnabled
	 * @property {Boolean}
	 */
	touchEnabled: false,
	/**
	 * Get the a boolean indicating if the view should receive touch events (true, default) or forward them to peers (false)
	 * @alias Titanium.UI.Toolbar.getTouchEnabled
	 * @return {Boolean}
	 */
	getTouchEnabled: function () { return touchEnabled; },
	/**
	 * Set the a boolean indicating if the view should receive touch events (true, default) or forward them to peers (false)
	 * @param {Boolean} value New value to set.
	 * @alias Titanium.UI.Toolbar.setTouchEnabled
	 */
	setTouchEnabled: function () { },
	/**
	 * the transformation matrix to apply to the view
	 * @alias Titanium.UI.Toolbar.transform
	 * @property {Object}
	 */
	transform: {},
	/**
	 * Get the the transformation matrix to apply to the view
	 * @alias Titanium.UI.Toolbar.getTransform
	 * @return {Object}
	 */
	getTransform: function () { return transform; },
	/**
	 * Set the the transformation matrix to apply to the view
	 * @param {Object} value New value to set.
	 * @alias Titanium.UI.Toolbar.setTransform
	 */
	setTransform: function () { },
	/**
	 * a boolean of the visibility of the view
	 * @alias Titanium.UI.Toolbar.visible
	 * @property {Boolean}
	 */
	visible: false,
	/**
	 * Get the a boolean of the visibility of the view
	 * @alias Titanium.UI.Toolbar.getVisible
	 * @return {Boolean}
	 */
	getVisible: function () { return visible; },
	/**
	 * Set the a boolean of the visibility of the view
	 * @param {Boolean} value New value to set.
	 * @alias Titanium.UI.Toolbar.setVisible
	 */
	setVisible: function () { },
	/**
	 * property for the view width. Can be either a float value or a dimension string ie 'auto' (default), '50%' (iPhone only).
	 * @alias Titanium.UI.Toolbar.width
	 * @property {Float,String}
	 */
	width: 0.0,
	/**
	 * Get the property for the view width. Can be either a float value or a dimension string ie 'auto' (default), '50%' (iPhone only).
	 * @alias Titanium.UI.Toolbar.getWidth
	 * @return {Float,String}
	 */
	getWidth: function () { return width; },
	/**
	 * Set the property for the view width. Can be either a float value or a dimension string ie 'auto' (default), '50%' (iPhone only).
	 * @param {Float,String} value New value to set.
	 * @alias Titanium.UI.Toolbar.setWidth
	 */
	setWidth: function () { },
	/**
	 * the z index position relative to other sibling views
	 * @alias Titanium.UI.Toolbar.zIndex
	 * @property {Integer}
	 */
	zIndex: 0,
	/**
	 * Get the the z index position relative to other sibling views
	 * @alias Titanium.UI.Toolbar.getZIndex
	 * @return {Integer}
	 */
	getZIndex: function () { return zIndex; },
	/**
	 * Set the the z index position relative to other sibling views
	 * @param {Integer} value New value to set.
	 * @alias Titanium.UI.Toolbar.setZIndex
	 */
	setZIndex: function () { },
	/**
	 * add a child to the view hierarchy
	 * @param {Object} view the view to add to this views hiearchy
	 * @alias Titanium.UI.Toolbar.add
	 */
	add: function (view) { },
	/**
	 * add an event listener for the instance to receive view triggered events
	 * @param {String} name name of the event
	 * @param {Function} callback callback function to invoke when the event is fired
	 * @alias Titanium.UI.Toolbar.addEventListener
	 */
	addEventListener: function (name,callback) { },
	/**
	 * animate the view
	 * @param {Object} obj either a dictionary of animation properties or an Animation object
	 * @param {Function} callback function to be invoked upon completion of the animation
	 * @alias Titanium.UI.Toolbar.animate
	 */
	animate: function (obj,callback) { },
	/**
	 * fire a synthesized event to the views listener
	 * @param {String} name name of the event
	 * @param {Object} event event object
	 * @alias Titanium.UI.Toolbar.fireEvent
	 */
	fireEvent: function (name,event) { },
	/**
	 * hide the view
	 * @alias Titanium.UI.Toolbar.hide
	 */
	hide: function () { },
	/**
	 * remove a previously add view from the view hiearchy
	 * @param {Object} view the view to remove from this views hiearchy
	 * @alias Titanium.UI.Toolbar.remove
	 */
	remove: function (view) { },
	/**
	 * remove a previously added event listener
	 * @param {String} name name of the event
	 * @param {Function} callback callback function passed in addEventListener
	 * @alias Titanium.UI.Toolbar.removeEventListener
	 */
	removeEventListener: function (name,callback) { },
	/**
	 * make the view visible
	 * @alias Titanium.UI.Toolbar.show
	 */
	show: function () { },
	/**
	 * return a Blob image of the rendered view
	 * @param {Function} f function to be invoked upon completion. if non-null, this method will be performed asynchronously. if null, it will be performed immediately
	 * @alias Titanium.UI.Toolbar.toImage
	 * @return {Object}
	 */
	toImage: function (f) { return {}; },
};

/**
 * The View is an empty drawing surface or container. The View is created by the method Titanium.UI.createView.
 * @since 0.9
 */
Titanium.UI.View = {
	/**
	 * a dictionary with properties x and y to indicate the anchor point value. anchor specifies the position by which animation should occur. center is 0.5, 0.5
	 * @alias Titanium.UI.View.anchorPoint
	 * @property {Object}
	 */
	anchorPoint: {},
	/**
	 * Get the a dictionary with properties x and y to indicate the anchor point value. anchor specifies the position by which animation should occur. center is 0.5, 0.5
	 * @alias Titanium.UI.View.getAnchorPoint
	 * @return {Object}
	 */
	getAnchorPoint: function () { return anchorPoint; },
	/**
	 * Set the a dictionary with properties x and y to indicate the anchor point value. anchor specifies the position by which animation should occur. center is 0.5, 0.5
	 * @param {Object} value New value to set.
	 * @alias Titanium.UI.View.setAnchorPoint
	 */
	setAnchorPoint: function () { },
	/**
	 * read-only object with x and y properties of where the view is during animation
	 * @alias Titanium.UI.View.animatedCenterPoint
	 * @property {Object}
	 */
	animatedCenterPoint: {},
	/**
	 * Get the read-only object with x and y properties of where the view is during animation
	 * @alias Titanium.UI.View.getAnimatedCenterPoint
	 * @return {Object}
	 */
	getAnimatedCenterPoint: function () { return animatedCenterPoint; },
	/**
	 * Set the read-only object with x and y properties of where the view is during animation
	 * @param {Object} value New value to set.
	 * @alias Titanium.UI.View.setAnimatedCenterPoint
	 */
	setAnimatedCenterPoint: function () { },
	/**
	 * the background color of the view
	 * @alias Titanium.UI.View.backgroundColor
	 * @property {String}
	 */
	backgroundColor: '',
	/**
	 * Get the the background color of the view
	 * @alias Titanium.UI.View.getBackgroundColor
	 * @return {String}
	 */
	getBackgroundColor: function () { return backgroundColor; },
	/**
	 * Set the the background color of the view
	 * @param {String} value New value to set.
	 * @alias Titanium.UI.View.setBackgroundColor
	 */
	setBackgroundColor: function () { },
	/**
	 * the disabled background color of the view. (Android)
	 * @alias Titanium.UI.View.backgroundDisabledColor
	 * @property {String}
	 */
	backgroundDisabledColor: '',
	/**
	 * Get the the disabled background color of the view. (Android)
	 * @alias Titanium.UI.View.getBackgroundDisabledColor
	 * @return {String}
	 */
	getBackgroundDisabledColor: function () { return backgroundDisabledColor; },
	/**
	 * Set the the disabled background color of the view. (Android)
	 * @param {String} value New value to set.
	 * @alias Titanium.UI.View.setBackgroundDisabledColor
	 */
	setBackgroundDisabledColor: function () { },
	/**
	 * the disabled background image url of the view. (Android)
	 * @alias Titanium.UI.View.backgroundDisabledImage
	 * @property {String}
	 */
	backgroundDisabledImage: '',
	/**
	 * Get the the disabled background image url of the view. (Android)
	 * @alias Titanium.UI.View.getBackgroundDisabledImage
	 * @return {String}
	 */
	getBackgroundDisabledImage: function () { return backgroundDisabledImage; },
	/**
	 * Set the the disabled background image url of the view. (Android)
	 * @param {String} value New value to set.
	 * @alias Titanium.UI.View.setBackgroundDisabledImage
	 */
	setBackgroundDisabledImage: function () { },
	/**
	 * the focused background color of the view. focusable must be true for normal views. (Android)
	 * @alias Titanium.UI.View.backgroundFocusedColor
	 * @property {String}
	 */
	backgroundFocusedColor: '',
	/**
	 * Get the the focused background color of the view. focusable must be true for normal views. (Android)
	 * @alias Titanium.UI.View.getBackgroundFocusedColor
	 * @return {String}
	 */
	getBackgroundFocusedColor: function () { return backgroundFocusedColor; },
	/**
	 * Set the the focused background color of the view. focusable must be true for normal views. (Android)
	 * @param {String} value New value to set.
	 * @alias Titanium.UI.View.setBackgroundFocusedColor
	 */
	setBackgroundFocusedColor: function () { },
	/**
	 * the focused background image url of the view. focusable must be true for normal views. (Android)
	 * @alias Titanium.UI.View.backgroundFocusedImage
	 * @property {String}
	 */
	backgroundFocusedImage: '',
	/**
	 * Get the the focused background image url of the view. focusable must be true for normal views. (Android)
	 * @alias Titanium.UI.View.getBackgroundFocusedImage
	 * @return {String}
	 */
	getBackgroundFocusedImage: function () { return backgroundFocusedImage; },
	/**
	 * Set the the focused background image url of the view. focusable must be true for normal views. (Android)
	 * @param {String} value New value to set.
	 * @alias Titanium.UI.View.setBackgroundFocusedImage
	 */
	setBackgroundFocusedImage: function () { },
	/**
	 * a background gradient for the view with the properties: type,startPoint,endPoint,startRadius,endRadius,backfillStart,backfillEnd,colors.
	 * @alias Titanium.UI.View.backgroundGradient
	 * @property {Object}
	 */
	backgroundGradient: {},
	/**
	 * Get the a background gradient for the view with the properties: type,startPoint,endPoint,startRadius,endRadius,backfillStart,backfillEnd,colors.
	 * @alias Titanium.UI.View.getBackgroundGradient
	 * @return {Object}
	 */
	getBackgroundGradient: function () { return backgroundGradient; },
	/**
	 * Set the a background gradient for the view with the properties: type,startPoint,endPoint,startRadius,endRadius,backfillStart,backfillEnd,colors.
	 * @param {Object} value New value to set.
	 * @alias Titanium.UI.View.setBackgroundGradient
	 */
	setBackgroundGradient: function () { },
	/**
	 * the background image url of the view
	 * @alias Titanium.UI.View.backgroundImage
	 * @property {String}
	 */
	backgroundImage: '',
	/**
	 * Get the the background image url of the view
	 * @alias Titanium.UI.View.getBackgroundImage
	 * @return {String}
	 */
	getBackgroundImage: function () { return backgroundImage; },
	/**
	 * Set the the background image url of the view
	 * @param {String} value New value to set.
	 * @alias Titanium.UI.View.setBackgroundImage
	 */
	setBackgroundImage: function () { },
	/**
	 * End caps specify the portion of an image that should not be resized when an image is stretched. This technique is used to implement buttons and other resizable image-based interface elements. When a button with end caps is resized, the resizing occurs only in the middle of the button, in the region between the end caps. The end caps themselves keep their original size and appearance. This property specifies the size of the left end cap. The middle (stretchable) portion is assumed to be 1 pixel wide. The right end cap is therefore computed by adding the size of the left end cap and the middle portion together and then subtracting that value from the width of the image
	 * @alias Titanium.UI.View.backgroundLeftCap
	 * @property {Float}
	 */
	backgroundLeftCap: 0.0,
	/**
	 * Get the End caps specify the portion of an image that should not be resized when an image is stretched. This technique is used to implement buttons and other resizable image-based interface elements. When a button with end caps is resized, the resizing occurs only in the middle of the button, in the region between the end caps. The end caps themselves keep their original size and appearance. This property specifies the size of the left end cap. The middle (stretchable) portion is assumed to be 1 pixel wide. The right end cap is therefore computed by adding the size of the left end cap and the middle portion together and then subtracting that value from the width of the image
	 * @alias Titanium.UI.View.getBackgroundLeftCap
	 * @return {Float}
	 */
	getBackgroundLeftCap: function () { return backgroundLeftCap; },
	/**
	 * Set the End caps specify the portion of an image that should not be resized when an image is stretched. This technique is used to implement buttons and other resizable image-based interface elements. When a button with end caps is resized, the resizing occurs only in the middle of the button, in the region between the end caps. The end caps themselves keep their original size and appearance. This property specifies the size of the left end cap. The middle (stretchable) portion is assumed to be 1 pixel wide. The right end cap is therefore computed by adding the size of the left end cap and the middle portion together and then subtracting that value from the width of the image
	 * @param {Float} value New value to set.
	 * @alias Titanium.UI.View.setBackgroundLeftCap
	 */
	setBackgroundLeftCap: function () { },
	/**
	 * the selected background color of the view. focusable must be true for normal views. (Android)
	 * @alias Titanium.UI.View.backgroundSelectedColor
	 * @property {String}
	 */
	backgroundSelectedColor: '',
	/**
	 * Get the the selected background color of the view. focusable must be true for normal views. (Android)
	 * @alias Titanium.UI.View.getBackgroundSelectedColor
	 * @return {String}
	 */
	getBackgroundSelectedColor: function () { return backgroundSelectedColor; },
	/**
	 * Set the the selected background color of the view. focusable must be true for normal views. (Android)
	 * @param {String} value New value to set.
	 * @alias Titanium.UI.View.setBackgroundSelectedColor
	 */
	setBackgroundSelectedColor: function () { },
	/**
	 * the selected background image url of the view. focusable must be true for normal views. (Android)
	 * @alias Titanium.UI.View.backgroundSelectedImage
	 * @property {String}
	 */
	backgroundSelectedImage: '',
	/**
	 * Get the the selected background image url of the view. focusable must be true for normal views. (Android)
	 * @alias Titanium.UI.View.getBackgroundSelectedImage
	 * @return {String}
	 */
	getBackgroundSelectedImage: function () { return backgroundSelectedImage; },
	/**
	 * Set the the selected background image url of the view. focusable must be true for normal views. (Android)
	 * @param {String} value New value to set.
	 * @alias Titanium.UI.View.setBackgroundSelectedImage
	 */
	setBackgroundSelectedImage: function () { },
	/**
	 * End caps specify the portion of an image that should not be resized when an image is stretched. This technique is used to implement buttons and other resizable image-based interface elements. When a button with end caps is resized, the resizing occurs only in the middle of the button, in the region between the end caps. The end caps themselves keep their original size and appearance. This property specifies the size of the top end cap. The middle (stretchable) portion is assumed to be 1 pixel wide. The bottom end cap is therefore computed by adding the size of the top end cap and the middle portion together and then subtracting that value from the height of the image
	 * @alias Titanium.UI.View.backgroundTopCap
	 * @property {Float}
	 */
	backgroundTopCap: 0.0,
	/**
	 * Get the End caps specify the portion of an image that should not be resized when an image is stretched. This technique is used to implement buttons and other resizable image-based interface elements. When a button with end caps is resized, the resizing occurs only in the middle of the button, in the region between the end caps. The end caps themselves keep their original size and appearance. This property specifies the size of the top end cap. The middle (stretchable) portion is assumed to be 1 pixel wide. The bottom end cap is therefore computed by adding the size of the top end cap and the middle portion together and then subtracting that value from the height of the image
	 * @alias Titanium.UI.View.getBackgroundTopCap
	 * @return {Float}
	 */
	getBackgroundTopCap: function () { return backgroundTopCap; },
	/**
	 * Set the End caps specify the portion of an image that should not be resized when an image is stretched. This technique is used to implement buttons and other resizable image-based interface elements. When a button with end caps is resized, the resizing occurs only in the middle of the button, in the region between the end caps. The end caps themselves keep their original size and appearance. This property specifies the size of the top end cap. The middle (stretchable) portion is assumed to be 1 pixel wide. The bottom end cap is therefore computed by adding the size of the top end cap and the middle portion together and then subtracting that value from the height of the image
	 * @param {Float} value New value to set.
	 * @alias Titanium.UI.View.setBackgroundTopCap
	 */
	setBackgroundTopCap: function () { },
	/**
	 * the border color of the view
	 * @alias Titanium.UI.View.borderColor
	 * @property {String}
	 */
	borderColor: '',
	/**
	 * Get the the border color of the view
	 * @alias Titanium.UI.View.getBorderColor
	 * @return {String}
	 */
	getBorderColor: function () { return borderColor; },
	/**
	 * Set the the border color of the view
	 * @param {String} value New value to set.
	 * @alias Titanium.UI.View.setBorderColor
	 */
	setBorderColor: function () { },
	/**
	 * the border radius of the view
	 * @alias Titanium.UI.View.borderRadius
	 * @property {Float}
	 */
	borderRadius: 0.0,
	/**
	 * Get the the border radius of the view
	 * @alias Titanium.UI.View.getBorderRadius
	 * @return {Float}
	 */
	getBorderRadius: function () { return borderRadius; },
	/**
	 * Set the the border radius of the view
	 * @param {Float} value New value to set.
	 * @alias Titanium.UI.View.setBorderRadius
	 */
	setBorderRadius: function () { },
	/**
	 * the border width of the view
	 * @alias Titanium.UI.View.borderWidth
	 * @property {Float}
	 */
	borderWidth: 0.0,
	/**
	 * Get the the border width of the view
	 * @alias Titanium.UI.View.getBorderWidth
	 * @return {Float}
	 */
	getBorderWidth: function () { return borderWidth; },
	/**
	 * Set the the border width of the view
	 * @param {Float} value New value to set.
	 * @alias Titanium.UI.View.setBorderWidth
	 */
	setBorderWidth: function () { },
	/**
	 * property for the view bottom position. This position is relative to the view's parent. Can be either a float value or a dimension string ie 'auto' (default), '50%' (iPhone only).
	 * @alias Titanium.UI.View.bottom
	 * @property {Float,String}
	 */
	bottom: 0.0,
	/**
	 * Get the property for the view bottom position. This position is relative to the view's parent. Can be either a float value or a dimension string ie 'auto' (default), '50%' (iPhone only).
	 * @alias Titanium.UI.View.getBottom
	 * @return {Float,String}
	 */
	getBottom: function () { return bottom; },
	/**
	 * Set the property for the view bottom position. This position is relative to the view's parent. Can be either a float value or a dimension string ie 'auto' (default), '50%' (iPhone only).
	 * @param {Float,String} value New value to set.
	 * @alias Titanium.UI.View.setBottom
	 */
	setBottom: function () { },
	/**
	 * a dictionary with properties x and y to indicate the center of the views position relative to the parent view
	 * @alias Titanium.UI.View.center
	 * @property {Object}
	 */
	center: {},
	/**
	 * Get the a dictionary with properties x and y to indicate the center of the views position relative to the parent view
	 * @alias Titanium.UI.View.getCenter
	 * @return {Object}
	 */
	getCenter: function () { return center; },
	/**
	 * Set the a dictionary with properties x and y to indicate the center of the views position relative to the parent view
	 * @param {Object} value New value to set.
	 * @alias Titanium.UI.View.setCenter
	 */
	setCenter: function () { },
	/**
	 * Set true if you want a view to be focusable when navigating with the trackball or D-Pad. Default: false. (Android Only)
	 * @alias Titanium.UI.View.focusable
	 * @property {Boolean}
	 */
	focusable: false,
	/**
	 * Get the Set true if you want a view to be focusable when navigating with the trackball or D-Pad. Default: false. (Android Only)
	 * @alias Titanium.UI.View.getFocusable
	 * @return {Boolean}
	 */
	getFocusable: function () { return focusable; },
	/**
	 * Set the Set true if you want a view to be focusable when navigating with the trackball or D-Pad. Default: false. (Android Only)
	 * @param {Boolean} value New value to set.
	 * @alias Titanium.UI.View.setFocusable
	 */
	setFocusable: function () { },
	/**
	 * the font family
	 * @alias Titanium.UI.View.font-family
	 * @property {String}
	 */
	font-family: '',
	/**
	 * Get the the font family
	 * @alias Titanium.UI.View.getFont-family
	 * @return {String}
	 */
	getFont-family: function () { return font-family; },
	/**
	 * Set the the font family
	 * @param {String} value New value to set.
	 * @alias Titanium.UI.View.setFont-family
	 */
	setFont-family: function () { },
	/**
	 * the font size
	 * @alias Titanium.UI.View.font-size
	 * @property {String}
	 */
	font-size: '',
	/**
	 * Get the the font size
	 * @alias Titanium.UI.View.getFont-size
	 * @return {String}
	 */
	getFont-size: function () { return font-size; },
	/**
	 * Set the the font size
	 * @param {String} value New value to set.
	 * @alias Titanium.UI.View.setFont-size
	 */
	setFont-size: function () { },
	/**
	 * the font style, either normal or italics
	 * @alias Titanium.UI.View.font-style
	 * @property {String}
	 */
	font-style: '',
	/**
	 * Get the the font style, either normal or italics
	 * @alias Titanium.UI.View.getFont-style
	 * @return {String}
	 */
	getFont-style: function () { return font-style; },
	/**
	 * Set the the font style, either normal or italics
	 * @param {String} value New value to set.
	 * @alias Titanium.UI.View.setFont-style
	 */
	setFont-style: function () { },
	/**
	 * the font weight, either normal or bold
	 * @alias Titanium.UI.View.font-weight
	 * @property {String}
	 */
	font-weight: '',
	/**
	 * Get the the font weight, either normal or bold
	 * @alias Titanium.UI.View.getFont-weight
	 * @return {String}
	 */
	getFont-weight: function () { return font-weight; },
	/**
	 * Set the the font weight, either normal or bold
	 * @param {String} value New value to set.
	 * @alias Titanium.UI.View.setFont-weight
	 */
	setFont-weight: function () { },
	/**
	 * property for the view height. Can be either a float value or a dimension string ie 'auto' (default), '50%' (iPhone only).
	 * @alias Titanium.UI.View.height
	 * @property {Float,String}
	 */
	height: 0.0,
	/**
	 * Get the property for the view height. Can be either a float value or a dimension string ie 'auto' (default), '50%' (iPhone only).
	 * @alias Titanium.UI.View.getHeight
	 * @return {Float,String}
	 */
	getHeight: function () { return height; },
	/**
	 * Set the property for the view height. Can be either a float value or a dimension string ie 'auto' (default), '50%' (iPhone only).
	 * @param {Float,String} value New value to set.
	 * @alias Titanium.UI.View.setHeight
	 */
	setHeight: function () { },
	/**
	 * property for the view left position. This position is relative to the view's parent. Can be either a float value or a dimension string ie 'auto' (default), '50%' (iPhone only).
	 * @alias Titanium.UI.View.left
	 * @property {Float,String}
	 */
	left: 0.0,
	/**
	 * Get the property for the view left position. This position is relative to the view's parent. Can be either a float value or a dimension string ie 'auto' (default), '50%' (iPhone only).
	 * @alias Titanium.UI.View.getLeft
	 * @return {Float,String}
	 */
	getLeft: function () { return left; },
	/**
	 * Set the property for the view left position. This position is relative to the view's parent. Can be either a float value or a dimension string ie 'auto' (default), '50%' (iPhone only).
	 * @param {Float,String} value New value to set.
	 * @alias Titanium.UI.View.setLeft
	 */
	setLeft: function () { },
	/**
	 * the opacity from 0.0-1.0
	 * @alias Titanium.UI.View.opacity
	 * @property {Float}
	 */
	opacity: 0.0,
	/**
	 * Get the the opacity from 0.0-1.0
	 * @alias Titanium.UI.View.getOpacity
	 * @return {Float}
	 */
	getOpacity: function () { return opacity; },
	/**
	 * Set the the opacity from 0.0-1.0
	 * @param {Float} value New value to set.
	 * @alias Titanium.UI.View.setOpacity
	 */
	setOpacity: function () { },
	/**
	 * property for the view right position. This position is relative to the view's parent. Can be either a float value or a dimension string ie 'auto' (default), '50%' (iPhone only).
	 * @alias Titanium.UI.View.right
	 * @property {Float,String}
	 */
	right: 0.0,
	/**
	 * Get the property for the view right position. This position is relative to the view's parent. Can be either a float value or a dimension string ie 'auto' (default), '50%' (iPhone only).
	 * @alias Titanium.UI.View.getRight
	 * @return {Float,String}
	 */
	getRight: function () { return right; },
	/**
	 * Set the property for the view right position. This position is relative to the view's parent. Can be either a float value or a dimension string ie 'auto' (default), '50%' (iPhone only).
	 * @param {Float,String} value New value to set.
	 * @alias Titanium.UI.View.setRight
	 */
	setRight: function () { },
	/**
	 * the size of the view as a dictionary of width and height properties
	 * @alias Titanium.UI.View.size
	 * @property {Object}
	 */
	size: {},
	/**
	 * Get the the size of the view as a dictionary of width and height properties
	 * @alias Titanium.UI.View.getSize
	 * @return {Object}
	 */
	getSize: function () { return size; },
	/**
	 * Set the the size of the view as a dictionary of width and height properties
	 * @param {Object} value New value to set.
	 * @alias Titanium.UI.View.setSize
	 */
	setSize: function () { },
	/**
	 * One of Titanium.UI.Android.SOFT_KEYBOARD_DEFAULT_ON_FOCUS, Titanium.UI.Android.SOFT_KEYBOARD_HIDE_ON_FOCUS, or Titanium.UI.Android.SOFT_KEYBOARD_SHOW_ON_FOCUS. (Android only)
	 * @alias Titanium.UI.View.softKeyboardOnFocus
	 * @property {Integer}
	 */
	softKeyboardOnFocus: 0,
	/**
	 * Get the One of Titanium.UI.Android.SOFT_KEYBOARD_DEFAULT_ON_FOCUS, Titanium.UI.Android.SOFT_KEYBOARD_HIDE_ON_FOCUS, or Titanium.UI.Android.SOFT_KEYBOARD_SHOW_ON_FOCUS. (Android only)
	 * @alias Titanium.UI.View.getSoftKeyboardOnFocus
	 * @return {Integer}
	 */
	getSoftKeyboardOnFocus: function () { return softKeyboardOnFocus; },
	/**
	 * Set the One of Titanium.UI.Android.SOFT_KEYBOARD_DEFAULT_ON_FOCUS, Titanium.UI.Android.SOFT_KEYBOARD_HIDE_ON_FOCUS, or Titanium.UI.Android.SOFT_KEYBOARD_SHOW_ON_FOCUS. (Android only)
	 * @param {Integer} value New value to set.
	 * @alias Titanium.UI.View.setSoftKeyboardOnFocus
	 */
	setSoftKeyboardOnFocus: function () { },
	/**
	 * property for the view top position. This position is relative to the view's parent. Can be either a float value or a dimension string ie 'auto' (default), '50%' (iPhone only).
	 * @alias Titanium.UI.View.top
	 * @property {Float,String}
	 */
	top: 0.0,
	/**
	 * Get the property for the view top position. This position is relative to the view's parent. Can be either a float value or a dimension string ie 'auto' (default), '50%' (iPhone only).
	 * @alias Titanium.UI.View.getTop
	 * @return {Float,String}
	 */
	getTop: function () { return top; },
	/**
	 * Set the property for the view top position. This position is relative to the view's parent. Can be either a float value or a dimension string ie 'auto' (default), '50%' (iPhone only).
	 * @param {Float,String} value New value to set.
	 * @alias Titanium.UI.View.setTop
	 */
	setTop: function () { },
	/**
	 * a boolean indicating if the view should receive touch events (true, default) or forward them to peers (false)
	 * @alias Titanium.UI.View.touchEnabled
	 * @property {Boolean}
	 */
	touchEnabled: false,
	/**
	 * Get the a boolean indicating if the view should receive touch events (true, default) or forward them to peers (false)
	 * @alias Titanium.UI.View.getTouchEnabled
	 * @return {Boolean}
	 */
	getTouchEnabled: function () { return touchEnabled; },
	/**
	 * Set the a boolean indicating if the view should receive touch events (true, default) or forward them to peers (false)
	 * @param {Boolean} value New value to set.
	 * @alias Titanium.UI.View.setTouchEnabled
	 */
	setTouchEnabled: function () { },
	/**
	 * the transformation matrix to apply to the view
	 * @alias Titanium.UI.View.transform
	 * @property {Object}
	 */
	transform: {},
	/**
	 * Get the the transformation matrix to apply to the view
	 * @alias Titanium.UI.View.getTransform
	 * @return {Object}
	 */
	getTransform: function () { return transform; },
	/**
	 * Set the the transformation matrix to apply to the view
	 * @param {Object} value New value to set.
	 * @alias Titanium.UI.View.setTransform
	 */
	setTransform: function () { },
	/**
	 * a boolean of the visibility of the view
	 * @alias Titanium.UI.View.visible
	 * @property {Boolean}
	 */
	visible: false,
	/**
	 * Get the a boolean of the visibility of the view
	 * @alias Titanium.UI.View.getVisible
	 * @return {Boolean}
	 */
	getVisible: function () { return visible; },
	/**
	 * Set the a boolean of the visibility of the view
	 * @param {Boolean} value New value to set.
	 * @alias Titanium.UI.View.setVisible
	 */
	setVisible: function () { },
	/**
	 * property for the view width. Can be either a float value or a dimension string ie 'auto' (default), '50%' (iPhone only).
	 * @alias Titanium.UI.View.width
	 * @property {Float,String}
	 */
	width: 0.0,
	/**
	 * Get the property for the view width. Can be either a float value or a dimension string ie 'auto' (default), '50%' (iPhone only).
	 * @alias Titanium.UI.View.getWidth
	 * @return {Float,String}
	 */
	getWidth: function () { return width; },
	/**
	 * Set the property for the view width. Can be either a float value or a dimension string ie 'auto' (default), '50%' (iPhone only).
	 * @param {Float,String} value New value to set.
	 * @alias Titanium.UI.View.setWidth
	 */
	setWidth: function () { },
	/**
	 * the z index position relative to other sibling views
	 * @alias Titanium.UI.View.zIndex
	 * @property {Integer}
	 */
	zIndex: 0,
	/**
	 * Get the the z index position relative to other sibling views
	 * @alias Titanium.UI.View.getZIndex
	 * @return {Integer}
	 */
	getZIndex: function () { return zIndex; },
	/**
	 * Set the the z index position relative to other sibling views
	 * @param {Integer} value New value to set.
	 * @alias Titanium.UI.View.setZIndex
	 */
	setZIndex: function () { },
	/**
	 * add a child to the view hierarchy
	 * @param {Object} view the view to add to this views hiearchy
	 * @alias Titanium.UI.View.add
	 */
	add: function (view) { },
	/**
	 * add an event listener for the instance to receive view triggered events
	 * @param {String} name name of the event
	 * @param {Function} callback callback function to invoke when the event is fired
	 * @alias Titanium.UI.View.addEventListener
	 */
	addEventListener: function (name,callback) { },
	/**
	 * animate the view
	 * @param {Object} obj either a dictionary of animation properties or an Animation object
	 * @param {Function} callback function to be invoked upon completion of the animation
	 * @alias Titanium.UI.View.animate
	 */
	animate: function (obj,callback) { },
	/**
	 * fire a synthesized event to the views listener
	 * @param {String} name name of the event
	 * @param {Object} event event object
	 * @alias Titanium.UI.View.fireEvent
	 */
	fireEvent: function (name,event) { },
	/**
	 * hide the view
	 * @alias Titanium.UI.View.hide
	 */
	hide: function () { },
	/**
	 * remove a previously add view from the view hiearchy
	 * @param {Object} view the view to remove from this views hiearchy
	 * @alias Titanium.UI.View.remove
	 */
	remove: function (view) { },
	/**
	 * remove a previously added event listener
	 * @param {String} name name of the event
	 * @param {Function} callback callback function passed in addEventListener
	 * @alias Titanium.UI.View.removeEventListener
	 */
	removeEventListener: function (name,callback) { },
	/**
	 * make the view visible
	 * @alias Titanium.UI.View.show
	 */
	show: function () { },
	/**
	 * return a Blob image of the rendered view
	 * @param {Function} f function to be invoked upon completion. if non-null, this method will be performed asynchronously. if null, it will be performed immediately
	 * @alias Titanium.UI.View.toImage
	 * @return {Object}
	 */
	toImage: function (f) { return {}; },
};

/**
 * The Web View allows you to open an HTML5 based view which can load either local or remote content. The content can be any valid web content such as HTML, PDF, SVG or other WebKit supported content types. The Web View is created by the method Titanium.UI.createWebView.
 * @since 0.8
 */
Titanium.UI.WebView = {
	/**
	 * a dictionary with properties x and y to indicate the anchor point value. anchor specifies the position by which animation should occur. center is 0.5, 0.5
	 * @alias Titanium.UI.WebView.anchorPoint
	 * @property {Object}
	 */
	anchorPoint: {},
	/**
	 * Get the a dictionary with properties x and y to indicate the anchor point value. anchor specifies the position by which animation should occur. center is 0.5, 0.5
	 * @alias Titanium.UI.WebView.getAnchorPoint
	 * @return {Object}
	 */
	getAnchorPoint: function () { return anchorPoint; },
	/**
	 * Set the a dictionary with properties x and y to indicate the anchor point value. anchor specifies the position by which animation should occur. center is 0.5, 0.5
	 * @param {Object} value New value to set.
	 * @alias Titanium.UI.WebView.setAnchorPoint
	 */
	setAnchorPoint: function () { },
	/**
	 * read-only object with x and y properties of where the view is during animation
	 * @alias Titanium.UI.WebView.animatedCenterPoint
	 * @property {Object}
	 */
	animatedCenterPoint: {},
	/**
	 * Get the read-only object with x and y properties of where the view is during animation
	 * @alias Titanium.UI.WebView.getAnimatedCenterPoint
	 * @return {Object}
	 */
	getAnimatedCenterPoint: function () { return animatedCenterPoint; },
	/**
	 * Set the read-only object with x and y properties of where the view is during animation
	 * @param {Object} value New value to set.
	 * @alias Titanium.UI.WebView.setAnimatedCenterPoint
	 */
	setAnimatedCenterPoint: function () { },
	/**
	 * the background color for the webview
	 * @alias Titanium.UI.WebView.backgroundColor
	 * @property {String}
	 */
	backgroundColor: '',
	/**
	 * Get the the background color for the webview
	 * @alias Titanium.UI.WebView.getBackgroundColor
	 * @return {String}
	 */
	getBackgroundColor: function () { return backgroundColor; },
	/**
	 * Set the the background color for the webview
	 * @param {String} value New value to set.
	 * @alias Titanium.UI.WebView.setBackgroundColor
	 */
	setBackgroundColor: function () { },
	/**
	 * the disabled background color of the view. (Android)
	 * @alias Titanium.UI.WebView.backgroundDisabledColor
	 * @property {String}
	 */
	backgroundDisabledColor: '',
	/**
	 * Get the the disabled background color of the view. (Android)
	 * @alias Titanium.UI.WebView.getBackgroundDisabledColor
	 * @return {String}
	 */
	getBackgroundDisabledColor: function () { return backgroundDisabledColor; },
	/**
	 * Set the the disabled background color of the view. (Android)
	 * @param {String} value New value to set.
	 * @alias Titanium.UI.WebView.setBackgroundDisabledColor
	 */
	setBackgroundDisabledColor: function () { },
	/**
	 * the disabled background image url of the view. (Android)
	 * @alias Titanium.UI.WebView.backgroundDisabledImage
	 * @property {String}
	 */
	backgroundDisabledImage: '',
	/**
	 * Get the the disabled background image url of the view. (Android)
	 * @alias Titanium.UI.WebView.getBackgroundDisabledImage
	 * @return {String}
	 */
	getBackgroundDisabledImage: function () { return backgroundDisabledImage; },
	/**
	 * Set the the disabled background image url of the view. (Android)
	 * @param {String} value New value to set.
	 * @alias Titanium.UI.WebView.setBackgroundDisabledImage
	 */
	setBackgroundDisabledImage: function () { },
	/**
	 * the focused background color of the view. focusable must be true for normal views. (Android)
	 * @alias Titanium.UI.WebView.backgroundFocusedColor
	 * @property {String}
	 */
	backgroundFocusedColor: '',
	/**
	 * Get the the focused background color of the view. focusable must be true for normal views. (Android)
	 * @alias Titanium.UI.WebView.getBackgroundFocusedColor
	 * @return {String}
	 */
	getBackgroundFocusedColor: function () { return backgroundFocusedColor; },
	/**
	 * Set the the focused background color of the view. focusable must be true for normal views. (Android)
	 * @param {String} value New value to set.
	 * @alias Titanium.UI.WebView.setBackgroundFocusedColor
	 */
	setBackgroundFocusedColor: function () { },
	/**
	 * the focused background image url of the view. focusable must be true for normal views. (Android)
	 * @alias Titanium.UI.WebView.backgroundFocusedImage
	 * @property {String}
	 */
	backgroundFocusedImage: '',
	/**
	 * Get the the focused background image url of the view. focusable must be true for normal views. (Android)
	 * @alias Titanium.UI.WebView.getBackgroundFocusedImage
	 * @return {String}
	 */
	getBackgroundFocusedImage: function () { return backgroundFocusedImage; },
	/**
	 * Set the the focused background image url of the view. focusable must be true for normal views. (Android)
	 * @param {String} value New value to set.
	 * @alias Titanium.UI.WebView.setBackgroundFocusedImage
	 */
	setBackgroundFocusedImage: function () { },
	/**
	 * a background gradient for the view with the properties: type,startPoint,endPoint,startRadius,endRadius,backfillStart,backfillEnd,colors.
	 * @alias Titanium.UI.WebView.backgroundGradient
	 * @property {Object}
	 */
	backgroundGradient: {},
	/**
	 * Get the a background gradient for the view with the properties: type,startPoint,endPoint,startRadius,endRadius,backfillStart,backfillEnd,colors.
	 * @alias Titanium.UI.WebView.getBackgroundGradient
	 * @return {Object}
	 */
	getBackgroundGradient: function () { return backgroundGradient; },
	/**
	 * Set the a background gradient for the view with the properties: type,startPoint,endPoint,startRadius,endRadius,backfillStart,backfillEnd,colors.
	 * @param {Object} value New value to set.
	 * @alias Titanium.UI.WebView.setBackgroundGradient
	 */
	setBackgroundGradient: function () { },
	/**
	 * the background image url of the view
	 * @alias Titanium.UI.WebView.backgroundImage
	 * @property {String}
	 */
	backgroundImage: '',
	/**
	 * Get the the background image url of the view
	 * @alias Titanium.UI.WebView.getBackgroundImage
	 * @return {String}
	 */
	getBackgroundImage: function () { return backgroundImage; },
	/**
	 * Set the the background image url of the view
	 * @param {String} value New value to set.
	 * @alias Titanium.UI.WebView.setBackgroundImage
	 */
	setBackgroundImage: function () { },
	/**
	 * End caps specify the portion of an image that should not be resized when an image is stretched. This technique is used to implement buttons and other resizable image-based interface elements. When a button with end caps is resized, the resizing occurs only in the middle of the button, in the region between the end caps. The end caps themselves keep their original size and appearance. This property specifies the size of the left end cap. The middle (stretchable) portion is assumed to be 1 pixel wide. The right end cap is therefore computed by adding the size of the left end cap and the middle portion together and then subtracting that value from the width of the image
	 * @alias Titanium.UI.WebView.backgroundLeftCap
	 * @property {Float}
	 */
	backgroundLeftCap: 0.0,
	/**
	 * Get the End caps specify the portion of an image that should not be resized when an image is stretched. This technique is used to implement buttons and other resizable image-based interface elements. When a button with end caps is resized, the resizing occurs only in the middle of the button, in the region between the end caps. The end caps themselves keep their original size and appearance. This property specifies the size of the left end cap. The middle (stretchable) portion is assumed to be 1 pixel wide. The right end cap is therefore computed by adding the size of the left end cap and the middle portion together and then subtracting that value from the width of the image
	 * @alias Titanium.UI.WebView.getBackgroundLeftCap
	 * @return {Float}
	 */
	getBackgroundLeftCap: function () { return backgroundLeftCap; },
	/**
	 * Set the End caps specify the portion of an image that should not be resized when an image is stretched. This technique is used to implement buttons and other resizable image-based interface elements. When a button with end caps is resized, the resizing occurs only in the middle of the button, in the region between the end caps. The end caps themselves keep their original size and appearance. This property specifies the size of the left end cap. The middle (stretchable) portion is assumed to be 1 pixel wide. The right end cap is therefore computed by adding the size of the left end cap and the middle portion together and then subtracting that value from the width of the image
	 * @param {Float} value New value to set.
	 * @alias Titanium.UI.WebView.setBackgroundLeftCap
	 */
	setBackgroundLeftCap: function () { },
	/**
	 * the selected background color of the view. focusable must be true for normal views. (Android)
	 * @alias Titanium.UI.WebView.backgroundSelectedColor
	 * @property {String}
	 */
	backgroundSelectedColor: '',
	/**
	 * Get the the selected background color of the view. focusable must be true for normal views. (Android)
	 * @alias Titanium.UI.WebView.getBackgroundSelectedColor
	 * @return {String}
	 */
	getBackgroundSelectedColor: function () { return backgroundSelectedColor; },
	/**
	 * Set the the selected background color of the view. focusable must be true for normal views. (Android)
	 * @param {String} value New value to set.
	 * @alias Titanium.UI.WebView.setBackgroundSelectedColor
	 */
	setBackgroundSelectedColor: function () { },
	/**
	 * the selected background image url of the view. focusable must be true for normal views. (Android)
	 * @alias Titanium.UI.WebView.backgroundSelectedImage
	 * @property {String}
	 */
	backgroundSelectedImage: '',
	/**
	 * Get the the selected background image url of the view. focusable must be true for normal views. (Android)
	 * @alias Titanium.UI.WebView.getBackgroundSelectedImage
	 * @return {String}
	 */
	getBackgroundSelectedImage: function () { return backgroundSelectedImage; },
	/**
	 * Set the the selected background image url of the view. focusable must be true for normal views. (Android)
	 * @param {String} value New value to set.
	 * @alias Titanium.UI.WebView.setBackgroundSelectedImage
	 */
	setBackgroundSelectedImage: function () { },
	/**
	 * End caps specify the portion of an image that should not be resized when an image is stretched. This technique is used to implement buttons and other resizable image-based interface elements. When a button with end caps is resized, the resizing occurs only in the middle of the button, in the region between the end caps. The end caps themselves keep their original size and appearance. This property specifies the size of the top end cap. The middle (stretchable) portion is assumed to be 1 pixel wide. The bottom end cap is therefore computed by adding the size of the top end cap and the middle portion together and then subtracting that value from the height of the image
	 * @alias Titanium.UI.WebView.backgroundTopCap
	 * @property {Float}
	 */
	backgroundTopCap: 0.0,
	/**
	 * Get the End caps specify the portion of an image that should not be resized when an image is stretched. This technique is used to implement buttons and other resizable image-based interface elements. When a button with end caps is resized, the resizing occurs only in the middle of the button, in the region between the end caps. The end caps themselves keep their original size and appearance. This property specifies the size of the top end cap. The middle (stretchable) portion is assumed to be 1 pixel wide. The bottom end cap is therefore computed by adding the size of the top end cap and the middle portion together and then subtracting that value from the height of the image
	 * @alias Titanium.UI.WebView.getBackgroundTopCap
	 * @return {Float}
	 */
	getBackgroundTopCap: function () { return backgroundTopCap; },
	/**
	 * Set the End caps specify the portion of an image that should not be resized when an image is stretched. This technique is used to implement buttons and other resizable image-based interface elements. When a button with end caps is resized, the resizing occurs only in the middle of the button, in the region between the end caps. The end caps themselves keep their original size and appearance. This property specifies the size of the top end cap. The middle (stretchable) portion is assumed to be 1 pixel wide. The bottom end cap is therefore computed by adding the size of the top end cap and the middle portion together and then subtracting that value from the height of the image
	 * @param {Float} value New value to set.
	 * @alias Titanium.UI.WebView.setBackgroundTopCap
	 */
	setBackgroundTopCap: function () { },
	/**
	 * the border color of the view
	 * @alias Titanium.UI.WebView.borderColor
	 * @property {String}
	 */
	borderColor: '',
	/**
	 * Get the the border color of the view
	 * @alias Titanium.UI.WebView.getBorderColor
	 * @return {String}
	 */
	getBorderColor: function () { return borderColor; },
	/**
	 * Set the the border color of the view
	 * @param {String} value New value to set.
	 * @alias Titanium.UI.WebView.setBorderColor
	 */
	setBorderColor: function () { },
	/**
	 * the border radius of the view
	 * @alias Titanium.UI.WebView.borderRadius
	 * @property {Float}
	 */
	borderRadius: 0.0,
	/**
	 * Get the the border radius of the view
	 * @alias Titanium.UI.WebView.getBorderRadius
	 * @return {Float}
	 */
	getBorderRadius: function () { return borderRadius; },
	/**
	 * Set the the border radius of the view
	 * @param {Float} value New value to set.
	 * @alias Titanium.UI.WebView.setBorderRadius
	 */
	setBorderRadius: function () { },
	/**
	 * the border width of the view
	 * @alias Titanium.UI.WebView.borderWidth
	 * @property {Float}
	 */
	borderWidth: 0.0,
	/**
	 * Get the the border width of the view
	 * @alias Titanium.UI.WebView.getBorderWidth
	 * @return {Float}
	 */
	getBorderWidth: function () { return borderWidth; },
	/**
	 * Set the the border width of the view
	 * @param {Float} value New value to set.
	 * @alias Titanium.UI.WebView.setBorderWidth
	 */
	setBorderWidth: function () { },
	/**
	 * property for the view bottom position. This position is relative to the view's parent. Can be either a float value or a dimension string ie 'auto' (default), '50%' (iPhone only).
	 * @alias Titanium.UI.WebView.bottom
	 * @property {Float,String}
	 */
	bottom: 0.0,
	/**
	 * Get the property for the view bottom position. This position is relative to the view's parent. Can be either a float value or a dimension string ie 'auto' (default), '50%' (iPhone only).
	 * @alias Titanium.UI.WebView.getBottom
	 * @return {Float,String}
	 */
	getBottom: function () { return bottom; },
	/**
	 * Set the property for the view bottom position. This position is relative to the view's parent. Can be either a float value or a dimension string ie 'auto' (default), '50%' (iPhone only).
	 * @param {Float,String} value New value to set.
	 * @alias Titanium.UI.WebView.setBottom
	 */
	setBottom: function () { },
	/**
	 * a dictionary with properties x and y to indicate the center of the views position relative to the parent view
	 * @alias Titanium.UI.WebView.center
	 * @property {Object}
	 */
	center: {},
	/**
	 * Get the a dictionary with properties x and y to indicate the center of the views position relative to the parent view
	 * @alias Titanium.UI.WebView.getCenter
	 * @return {Object}
	 */
	getCenter: function () { return center; },
	/**
	 * Set the a dictionary with properties x and y to indicate the center of the views position relative to the parent view
	 * @param {Object} value New value to set.
	 * @alias Titanium.UI.WebView.setCenter
	 */
	setCenter: function () { },
	/**
	 * a data blob or file that is used to load the web document
	 * @alias Titanium.UI.WebView.data
	 * @property {Object}
	 */
	data: {},
	/**
	 * Get the a data blob or file that is used to load the web document
	 * @alias Titanium.UI.WebView.getData
	 * @return {Object}
	 */
	getData: function () { return data; },
	/**
	 * Set the a data blob or file that is used to load the web document
	 * @param {Object} value New value to set.
	 * @alias Titanium.UI.WebView.setData
	 */
	setData: function () { },
	/**
	 * Set true if you want a view to be focusable when navigating with the trackball or D-Pad. Default: false. (Android Only)
	 * @alias Titanium.UI.WebView.focusable
	 * @property {Boolean}
	 */
	focusable: false,
	/**
	 * Get the Set true if you want a view to be focusable when navigating with the trackball or D-Pad. Default: false. (Android Only)
	 * @alias Titanium.UI.WebView.getFocusable
	 * @return {Boolean}
	 */
	getFocusable: function () { return focusable; },
	/**
	 * Set the Set true if you want a view to be focusable when navigating with the trackball or D-Pad. Default: false. (Android Only)
	 * @param {Boolean} value New value to set.
	 * @alias Titanium.UI.WebView.setFocusable
	 */
	setFocusable: function () { },
	/**
	 * the font family
	 * @alias Titanium.UI.WebView.font-family
	 * @property {String}
	 */
	font-family: '',
	/**
	 * Get the the font family
	 * @alias Titanium.UI.WebView.getFont-family
	 * @return {String}
	 */
	getFont-family: function () { return font-family; },
	/**
	 * Set the the font family
	 * @param {String} value New value to set.
	 * @alias Titanium.UI.WebView.setFont-family
	 */
	setFont-family: function () { },
	/**
	 * the font size
	 * @alias Titanium.UI.WebView.font-size
	 * @property {String}
	 */
	font-size: '',
	/**
	 * Get the the font size
	 * @alias Titanium.UI.WebView.getFont-size
	 * @return {String}
	 */
	getFont-size: function () { return font-size; },
	/**
	 * Set the the font size
	 * @param {String} value New value to set.
	 * @alias Titanium.UI.WebView.setFont-size
	 */
	setFont-size: function () { },
	/**
	 * the font style, either normal or italics
	 * @alias Titanium.UI.WebView.font-style
	 * @property {String}
	 */
	font-style: '',
	/**
	 * Get the the font style, either normal or italics
	 * @alias Titanium.UI.WebView.getFont-style
	 * @return {String}
	 */
	getFont-style: function () { return font-style; },
	/**
	 * Set the the font style, either normal or italics
	 * @param {String} value New value to set.
	 * @alias Titanium.UI.WebView.setFont-style
	 */
	setFont-style: function () { },
	/**
	 * the font weight, either normal or bold
	 * @alias Titanium.UI.WebView.font-weight
	 * @property {String}
	 */
	font-weight: '',
	/**
	 * Get the the font weight, either normal or bold
	 * @alias Titanium.UI.WebView.getFont-weight
	 * @return {String}
	 */
	getFont-weight: function () { return font-weight; },
	/**
	 * Set the the font weight, either normal or bold
	 * @param {String} value New value to set.
	 * @alias Titanium.UI.WebView.setFont-weight
	 */
	setFont-weight: function () { },
	/**
	 * property for the view height. Can be either a float value or a dimension string ie 'auto' (default), '50%' (iPhone only).
	 * @alias Titanium.UI.WebView.height
	 * @property {Float,String}
	 */
	height: 0.0,
	/**
	 * Get the property for the view height. Can be either a float value or a dimension string ie 'auto' (default), '50%' (iPhone only).
	 * @alias Titanium.UI.WebView.getHeight
	 * @return {Float,String}
	 */
	getHeight: function () { return height; },
	/**
	 * Set the property for the view height. Can be either a float value or a dimension string ie 'auto' (default), '50%' (iPhone only).
	 * @param {Float,String} value New value to set.
	 * @alias Titanium.UI.WebView.setHeight
	 */
	setHeight: function () { },
	/**
	 * the html content of the web document
	 * @alias Titanium.UI.WebView.html
	 * @property {String}
	 */
	html: '',
	/**
	 * Get the the html content of the web document
	 * @alias Titanium.UI.WebView.getHtml
	 * @return {String}
	 */
	getHtml: function () { return html; },
	/**
	 * Set the the html content of the web document
	 * @param {String} value New value to set.
	 * @alias Titanium.UI.WebView.setHtml
	 */
	setHtml: function () { },
	/**
	 * property for the view left position. This position is relative to the view's parent. Can be either a float value or a dimension string ie 'auto' (default), '50%' (iPhone only).
	 * @alias Titanium.UI.WebView.left
	 * @property {Float,String}
	 */
	left: 0.0,
	/**
	 * Get the property for the view left position. This position is relative to the view's parent. Can be either a float value or a dimension string ie 'auto' (default), '50%' (iPhone only).
	 * @alias Titanium.UI.WebView.getLeft
	 * @return {Float,String}
	 */
	getLeft: function () { return left; },
	/**
	 * Set the property for the view left position. This position is relative to the view's parent. Can be either a float value or a dimension string ie 'auto' (default), '50%' (iPhone only).
	 * @param {Float,String} value New value to set.
	 * @alias Titanium.UI.WebView.setLeft
	 */
	setLeft: function () { },
	/**
	 * boolean indicating if the webview is loading content
	 * @alias Titanium.UI.WebView.loading
	 * @property {Boolean}
	 */
	loading: false,
	/**
	 * Get the boolean indicating if the webview is loading content
	 * @alias Titanium.UI.WebView.getLoading
	 * @return {Boolean}
	 */
	getLoading: function () { return loading; },
	/**
	 * Set the boolean indicating if the webview is loading content
	 * @param {Boolean} value New value to set.
	 * @alias Titanium.UI.WebView.setLoading
	 */
	setLoading: function () { },
	/**
	 * the opacity from 0.0-1.0
	 * @alias Titanium.UI.WebView.opacity
	 * @property {Float}
	 */
	opacity: 0.0,
	/**
	 * Get the the opacity from 0.0-1.0
	 * @alias Titanium.UI.WebView.getOpacity
	 * @return {Float}
	 */
	getOpacity: function () { return opacity; },
	/**
	 * Set the the opacity from 0.0-1.0
	 * @param {Float} value New value to set.
	 * @alias Titanium.UI.WebView.setOpacity
	 */
	setOpacity: function () { },
	/**
	 * property for the view right position. This position is relative to the view's parent. Can be either a float value or a dimension string ie 'auto' (default), '50%' (iPhone only).
	 * @alias Titanium.UI.WebView.right
	 * @property {Float,String}
	 */
	right: 0.0,
	/**
	 * Get the property for the view right position. This position is relative to the view's parent. Can be either a float value or a dimension string ie 'auto' (default), '50%' (iPhone only).
	 * @alias Titanium.UI.WebView.getRight
	 * @return {Float,String}
	 */
	getRight: function () { return right; },
	/**
	 * Set the property for the view right position. This position is relative to the view's parent. Can be either a float value or a dimension string ie 'auto' (default), '50%' (iPhone only).
	 * @param {Float,String} value New value to set.
	 * @alias Titanium.UI.WebView.setRight
	 */
	setRight: function () { },
	/**
	 * whether the webview should scale it's contents or not
	 * @alias Titanium.UI.WebView.scalesPageToFit
	 * @property {Boolean}
	 */
	scalesPageToFit: false,
	/**
	 * Get the whether the webview should scale it's contents or not
	 * @alias Titanium.UI.WebView.getScalesPageToFit
	 * @return {Boolean}
	 */
	getScalesPageToFit: function () { return scalesPageToFit; },
	/**
	 * Set the whether the webview should scale it's contents or not
	 * @param {Boolean} value New value to set.
	 * @alias Titanium.UI.WebView.setScalesPageToFit
	 */
	setScalesPageToFit: function () { },
	/**
	 * the size of the view as a dictionary of width and height properties
	 * @alias Titanium.UI.WebView.size
	 * @property {Object}
	 */
	size: {},
	/**
	 * Get the the size of the view as a dictionary of width and height properties
	 * @alias Titanium.UI.WebView.getSize
	 * @return {Object}
	 */
	getSize: function () { return size; },
	/**
	 * Set the the size of the view as a dictionary of width and height properties
	 * @param {Object} value New value to set.
	 * @alias Titanium.UI.WebView.setSize
	 */
	setSize: function () { },
	/**
	 * One of Titanium.UI.Android.SOFT_KEYBOARD_DEFAULT_ON_FOCUS, Titanium.UI.Android.SOFT_KEYBOARD_HIDE_ON_FOCUS, or Titanium.UI.Android.SOFT_KEYBOARD_SHOW_ON_FOCUS. (Android only)
	 * @alias Titanium.UI.WebView.softKeyboardOnFocus
	 * @property {Integer}
	 */
	softKeyboardOnFocus: 0,
	/**
	 * Get the One of Titanium.UI.Android.SOFT_KEYBOARD_DEFAULT_ON_FOCUS, Titanium.UI.Android.SOFT_KEYBOARD_HIDE_ON_FOCUS, or Titanium.UI.Android.SOFT_KEYBOARD_SHOW_ON_FOCUS. (Android only)
	 * @alias Titanium.UI.WebView.getSoftKeyboardOnFocus
	 * @return {Integer}
	 */
	getSoftKeyboardOnFocus: function () { return softKeyboardOnFocus; },
	/**
	 * Set the One of Titanium.UI.Android.SOFT_KEYBOARD_DEFAULT_ON_FOCUS, Titanium.UI.Android.SOFT_KEYBOARD_HIDE_ON_FOCUS, or Titanium.UI.Android.SOFT_KEYBOARD_SHOW_ON_FOCUS. (Android only)
	 * @param {Integer} value New value to set.
	 * @alias Titanium.UI.WebView.setSoftKeyboardOnFocus
	 */
	setSoftKeyboardOnFocus: function () { },
	/**
	 * property for the view top position. This position is relative to the view's parent. Can be either a float value or a dimension string ie 'auto' (default), '50%' (iPhone only).
	 * @alias Titanium.UI.WebView.top
	 * @property {Float,String}
	 */
	top: 0.0,
	/**
	 * Get the property for the view top position. This position is relative to the view's parent. Can be either a float value or a dimension string ie 'auto' (default), '50%' (iPhone only).
	 * @alias Titanium.UI.WebView.getTop
	 * @return {Float,String}
	 */
	getTop: function () { return top; },
	/**
	 * Set the property for the view top position. This position is relative to the view's parent. Can be either a float value or a dimension string ie 'auto' (default), '50%' (iPhone only).
	 * @param {Float,String} value New value to set.
	 * @alias Titanium.UI.WebView.setTop
	 */
	setTop: function () { },
	/**
	 * a boolean indicating if the view should receive touch events (true, default) or forward them to peers (false)
	 * @alias Titanium.UI.WebView.touchEnabled
	 * @property {Boolean}
	 */
	touchEnabled: false,
	/**
	 * Get the a boolean indicating if the view should receive touch events (true, default) or forward them to peers (false)
	 * @alias Titanium.UI.WebView.getTouchEnabled
	 * @return {Boolean}
	 */
	getTouchEnabled: function () { return touchEnabled; },
	/**
	 * Set the a boolean indicating if the view should receive touch events (true, default) or forward them to peers (false)
	 * @param {Boolean} value New value to set.
	 * @alias Titanium.UI.WebView.setTouchEnabled
	 */
	setTouchEnabled: function () { },
	/**
	 * the transformation matrix to apply to the view
	 * @alias Titanium.UI.WebView.transform
	 * @property {Object}
	 */
	transform: {},
	/**
	 * Get the the transformation matrix to apply to the view
	 * @alias Titanium.UI.WebView.getTransform
	 * @return {Object}
	 */
	getTransform: function () { return transform; },
	/**
	 * Set the the transformation matrix to apply to the view
	 * @param {Object} value New value to set.
	 * @alias Titanium.UI.WebView.setTransform
	 */
	setTransform: function () { },
	/**
	 * the url to the web document. this property will change as the content of the webview changes (such as from internal hyperlinks, etc)
	 * @alias Titanium.UI.WebView.url
	 * @property {String}
	 */
	url: '',
	/**
	 * Get the the url to the web document. this property will change as the content of the webview changes (such as from internal hyperlinks, etc)
	 * @alias Titanium.UI.WebView.getUrl
	 * @return {String}
	 */
	getUrl: function () { return url; },
	/**
	 * Set the the url to the web document. this property will change as the content of the webview changes (such as from internal hyperlinks, etc)
	 * @param {String} value New value to set.
	 * @alias Titanium.UI.WebView.setUrl
	 */
	setUrl: function () { },
	/**
	 * a boolean of the visibility of the view
	 * @alias Titanium.UI.WebView.visible
	 * @property {Boolean}
	 */
	visible: false,
	/**
	 * Get the a boolean of the visibility of the view
	 * @alias Titanium.UI.WebView.getVisible
	 * @return {Boolean}
	 */
	getVisible: function () { return visible; },
	/**
	 * Set the a boolean of the visibility of the view
	 * @param {Boolean} value New value to set.
	 * @alias Titanium.UI.WebView.setVisible
	 */
	setVisible: function () { },
	/**
	 * property for the view width. Can be either a float value or a dimension string ie 'auto' (default), '50%' (iPhone only).
	 * @alias Titanium.UI.WebView.width
	 * @property {Float,String}
	 */
	width: 0.0,
	/**
	 * Get the property for the view width. Can be either a float value or a dimension string ie 'auto' (default), '50%' (iPhone only).
	 * @alias Titanium.UI.WebView.getWidth
	 * @return {Float,String}
	 */
	getWidth: function () { return width; },
	/**
	 * Set the property for the view width. Can be either a float value or a dimension string ie 'auto' (default), '50%' (iPhone only).
	 * @param {Float,String} value New value to set.
	 * @alias Titanium.UI.WebView.setWidth
	 */
	setWidth: function () { },
	/**
	 * the z index position relative to other sibling views
	 * @alias Titanium.UI.WebView.zIndex
	 * @property {Integer}
	 */
	zIndex: 0,
	/**
	 * Get the the z index position relative to other sibling views
	 * @alias Titanium.UI.WebView.getZIndex
	 * @return {Integer}
	 */
	getZIndex: function () { return zIndex; },
	/**
	 * Set the the z index position relative to other sibling views
	 * @param {Integer} value New value to set.
	 * @alias Titanium.UI.WebView.setZIndex
	 */
	setZIndex: function () { },
	/**
	 * add a child to the view hierarchy
	 * @param {Object} view the view to add to this views hiearchy
	 * @alias Titanium.UI.WebView.add
	 */
	add: function (view) { },
	/**
	 * add an event listener for the instance to receive view triggered events
	 * @param {String} name name of the event
	 * @param {Function} callback callback function to invoke when the event is fired
	 * @alias Titanium.UI.WebView.addEventListener
	 */
	addEventListener: function (name,callback) { },
	/**
	 * animate the view
	 * @param {Object} obj either a dictionary of animation properties or an Animation object
	 * @param {Function} callback function to be invoked upon completion of the animation
	 * @alias Titanium.UI.WebView.animate
	 */
	animate: function (obj,callback) { },
	/**
	 * returns true if the webview can go back in history
	 * @alias Titanium.UI.WebView.canGoBack
	 * @return {Boolean}
	 */
	canGoBack: function () { return false; },
	/**
	 * returns true if the webview can go forward in history
	 * @alias Titanium.UI.WebView.canGoForward
	 * @return {Boolean}
	 */
	canGoForward: function () { return false; },
	/**
	 * invoke JavaScript inside the context of the webview and optionally, return a result
	 * @param {String} content JavaScript code as a string. The code will be evaluated inside the webview context.
	 * @alias Titanium.UI.WebView.evalJS
	 * @return {String}
	 */
	evalJS: function (content) { return ''; },
	/**
	 * fire a synthesized event to the views listener
	 * @param {String} name name of the event
	 * @param {Object} event event object
	 * @alias Titanium.UI.WebView.fireEvent
	 */
	fireEvent: function (name,event) { },
	/**
	 * go back one entry in history to the previous page
	 * @alias Titanium.UI.WebView.goBack
	 */
	goBack: function () { },
	/**
	 * go forward one entry in history to the page before the current page
	 * @alias Titanium.UI.WebView.goForward
	 */
	goForward: function () { },
	/**
	 * hide the view
	 * @alias Titanium.UI.WebView.hide
	 */
	hide: function () { },
	/**
	 * reload the current webpage
	 * @alias Titanium.UI.WebView.reload
	 */
	reload: function () { },
	/**
	 * remove a previously add view from the view hiearchy
	 * @param {Object} view the view to remove from this views hiearchy
	 * @alias Titanium.UI.WebView.remove
	 */
	remove: function (view) { },
	/**
	 * remove a previously added event listener
	 * @param {String} name name of the event
	 * @param {Function} callback callback function passed in addEventListener
	 * @alias Titanium.UI.WebView.removeEventListener
	 */
	removeEventListener: function (name,callback) { },
	/**
	 * force the webview to repaint its contents
	 * @alias Titanium.UI.WebView.repaint
	 */
	repaint: function () { },
	/**
	 * set the basic authentication for the webview instance to be used on subsequent url requests
	 * @param {String} username the username
	 * @param {String} password the password
	 * @alias Titanium.UI.WebView.setBasicAuthentication
	 */
	setBasicAuthentication: function (username,password) { },
	/**
	 * make the view visible
	 * @alias Titanium.UI.WebView.show
	 */
	show: function () { },
	/**
	 * stop loading a currently loading page
	 * @alias Titanium.UI.WebView.stopLoading
	 */
	stopLoading: function () { },
	/**
	 * return a Blob image of the rendered view
	 * @param {Function} f function to be invoked upon completion. if non-null, this method will be performed asynchronously. if null, it will be performed immediately
	 * @alias Titanium.UI.WebView.toImage
	 * @return {Object}
	 */
	toImage: function (f) { return {}; },
};

/**
 * The Window is an empty drawing surface or container. The Window is created by the method Titanium.UI.createWindow. Unlike Views, Windows can be opened and closed and can have special display properties such as fullscreen or modal.
 * @since 0.9
 */
Titanium.UI.Window = {
	/**
	 * a dictionary with properties x and y to indicate the anchor point value. anchor specifies the position by which animation should occur. center is 0.5, 0.5
	 * @alias Titanium.UI.Window.anchorPoint
	 * @property {Object}
	 */
	anchorPoint: {},
	/**
	 * Get the a dictionary with properties x and y to indicate the anchor point value. anchor specifies the position by which animation should occur. center is 0.5, 0.5
	 * @alias Titanium.UI.Window.getAnchorPoint
	 * @return {Object}
	 */
	getAnchorPoint: function () { return anchorPoint; },
	/**
	 * Set the a dictionary with properties x and y to indicate the anchor point value. anchor specifies the position by which animation should occur. center is 0.5, 0.5
	 * @param {Object} value New value to set.
	 * @alias Titanium.UI.Window.setAnchorPoint
	 */
	setAnchorPoint: function () { },
	/**
	 * read-only object with x and y properties of where the view is during animation
	 * @alias Titanium.UI.Window.animatedCenterPoint
	 * @property {Object}
	 */
	animatedCenterPoint: {},
	/**
	 * Get the read-only object with x and y properties of where the view is during animation
	 * @alias Titanium.UI.Window.getAnimatedCenterPoint
	 * @return {Object}
	 */
	getAnimatedCenterPoint: function () { return animatedCenterPoint; },
	/**
	 * Set the read-only object with x and y properties of where the view is during animation
	 * @param {Object} value New value to set.
	 * @alias Titanium.UI.Window.setAnimatedCenterPoint
	 */
	setAnimatedCenterPoint: function () { },
	/**
	 * title for the back button. only available in iPhone. this is only valid when the window is a child of a tab.
	 * @alias Titanium.UI.Window.backButtonTitle
	 * @property {String}
	 */
	backButtonTitle: '',
	/**
	 * Get the title for the back button. only available in iPhone. this is only valid when the window is a child of a tab.
	 * @alias Titanium.UI.Window.getBackButtonTitle
	 * @return {String}
	 */
	getBackButtonTitle: function () { return backButtonTitle; },
	/**
	 * Set the title for the back button. only available in iPhone. this is only valid when the window is a child of a tab.
	 * @param {String} value New value to set.
	 * @alias Titanium.UI.Window.setBackButtonTitle
	 */
	setBackButtonTitle: function () { },
	/**
	 * url to an image to show as the back button.  only available in iPhone. this is only valid when the window is a child of a tab.
	 * @alias Titanium.UI.Window.backButtonTitleImage
	 * @property {String}
	 */
	backButtonTitleImage: '',
	/**
	 * Get the url to an image to show as the back button.  only available in iPhone. this is only valid when the window is a child of a tab.
	 * @alias Titanium.UI.Window.getBackButtonTitleImage
	 * @return {String}
	 */
	getBackButtonTitleImage: function () { return backButtonTitleImage; },
	/**
	 * Set the url to an image to show as the back button.  only available in iPhone. this is only valid when the window is a child of a tab.
	 * @param {String} value New value to set.
	 * @alias Titanium.UI.Window.setBackButtonTitleImage
	 */
	setBackButtonTitleImage: function () { },
	/**
	 * the background color of the view
	 * @alias Titanium.UI.Window.backgroundColor
	 * @property {String}
	 */
	backgroundColor: '',
	/**
	 * Get the the background color of the view
	 * @alias Titanium.UI.Window.getBackgroundColor
	 * @return {String}
	 */
	getBackgroundColor: function () { return backgroundColor; },
	/**
	 * Set the the background color of the view
	 * @param {String} value New value to set.
	 * @alias Titanium.UI.Window.setBackgroundColor
	 */
	setBackgroundColor: function () { },
	/**
	 * the disabled background color of the view. (Android)
	 * @alias Titanium.UI.Window.backgroundDisabledColor
	 * @property {String}
	 */
	backgroundDisabledColor: '',
	/**
	 * Get the the disabled background color of the view. (Android)
	 * @alias Titanium.UI.Window.getBackgroundDisabledColor
	 * @return {String}
	 */
	getBackgroundDisabledColor: function () { return backgroundDisabledColor; },
	/**
	 * Set the the disabled background color of the view. (Android)
	 * @param {String} value New value to set.
	 * @alias Titanium.UI.Window.setBackgroundDisabledColor
	 */
	setBackgroundDisabledColor: function () { },
	/**
	 * the disabled background image url of the view. (Android)
	 * @alias Titanium.UI.Window.backgroundDisabledImage
	 * @property {String}
	 */
	backgroundDisabledImage: '',
	/**
	 * Get the the disabled background image url of the view. (Android)
	 * @alias Titanium.UI.Window.getBackgroundDisabledImage
	 * @return {String}
	 */
	getBackgroundDisabledImage: function () { return backgroundDisabledImage; },
	/**
	 * Set the the disabled background image url of the view. (Android)
	 * @param {String} value New value to set.
	 * @alias Titanium.UI.Window.setBackgroundDisabledImage
	 */
	setBackgroundDisabledImage: function () { },
	/**
	 * the focused background color of the view. focusable must be true for normal views. (Android)
	 * @alias Titanium.UI.Window.backgroundFocusedColor
	 * @property {String}
	 */
	backgroundFocusedColor: '',
	/**
	 * Get the the focused background color of the view. focusable must be true for normal views. (Android)
	 * @alias Titanium.UI.Window.getBackgroundFocusedColor
	 * @return {String}
	 */
	getBackgroundFocusedColor: function () { return backgroundFocusedColor; },
	/**
	 * Set the the focused background color of the view. focusable must be true for normal views. (Android)
	 * @param {String} value New value to set.
	 * @alias Titanium.UI.Window.setBackgroundFocusedColor
	 */
	setBackgroundFocusedColor: function () { },
	/**
	 * the focused background image url of the view. focusable must be true for normal views. (Android)
	 * @alias Titanium.UI.Window.backgroundFocusedImage
	 * @property {String}
	 */
	backgroundFocusedImage: '',
	/**
	 * Get the the focused background image url of the view. focusable must be true for normal views. (Android)
	 * @alias Titanium.UI.Window.getBackgroundFocusedImage
	 * @return {String}
	 */
	getBackgroundFocusedImage: function () { return backgroundFocusedImage; },
	/**
	 * Set the the focused background image url of the view. focusable must be true for normal views. (Android)
	 * @param {String} value New value to set.
	 * @alias Titanium.UI.Window.setBackgroundFocusedImage
	 */
	setBackgroundFocusedImage: function () { },
	/**
	 * a background gradient for the view with the properties: type,startPoint,endPoint,startRadius,endRadius,backfillStart,backfillEnd,colors.
	 * @alias Titanium.UI.Window.backgroundGradient
	 * @property {Object}
	 */
	backgroundGradient: {},
	/**
	 * Get the a background gradient for the view with the properties: type,startPoint,endPoint,startRadius,endRadius,backfillStart,backfillEnd,colors.
	 * @alias Titanium.UI.Window.getBackgroundGradient
	 * @return {Object}
	 */
	getBackgroundGradient: function () { return backgroundGradient; },
	/**
	 * Set the a background gradient for the view with the properties: type,startPoint,endPoint,startRadius,endRadius,backfillStart,backfillEnd,colors.
	 * @param {Object} value New value to set.
	 * @alias Titanium.UI.Window.setBackgroundGradient
	 */
	setBackgroundGradient: function () { },
	/**
	 * the background image url of the view
	 * @alias Titanium.UI.Window.backgroundImage
	 * @property {String}
	 */
	backgroundImage: '',
	/**
	 * Get the the background image url of the view
	 * @alias Titanium.UI.Window.getBackgroundImage
	 * @return {String}
	 */
	getBackgroundImage: function () { return backgroundImage; },
	/**
	 * Set the the background image url of the view
	 * @param {String} value New value to set.
	 * @alias Titanium.UI.Window.setBackgroundImage
	 */
	setBackgroundImage: function () { },
	/**
	 * End caps specify the portion of an image that should not be resized when an image is stretched. This technique is used to implement buttons and other resizable image-based interface elements. When a button with end caps is resized, the resizing occurs only in the middle of the button, in the region between the end caps. The end caps themselves keep their original size and appearance. This property specifies the size of the left end cap. The middle (stretchable) portion is assumed to be 1 pixel wide. The right end cap is therefore computed by adding the size of the left end cap and the middle portion together and then subtracting that value from the width of the image
	 * @alias Titanium.UI.Window.backgroundLeftCap
	 * @property {Float}
	 */
	backgroundLeftCap: 0.0,
	/**
	 * Get the End caps specify the portion of an image that should not be resized when an image is stretched. This technique is used to implement buttons and other resizable image-based interface elements. When a button with end caps is resized, the resizing occurs only in the middle of the button, in the region between the end caps. The end caps themselves keep their original size and appearance. This property specifies the size of the left end cap. The middle (stretchable) portion is assumed to be 1 pixel wide. The right end cap is therefore computed by adding the size of the left end cap and the middle portion together and then subtracting that value from the width of the image
	 * @alias Titanium.UI.Window.getBackgroundLeftCap
	 * @return {Float}
	 */
	getBackgroundLeftCap: function () { return backgroundLeftCap; },
	/**
	 * Set the End caps specify the portion of an image that should not be resized when an image is stretched. This technique is used to implement buttons and other resizable image-based interface elements. When a button with end caps is resized, the resizing occurs only in the middle of the button, in the region between the end caps. The end caps themselves keep their original size and appearance. This property specifies the size of the left end cap. The middle (stretchable) portion is assumed to be 1 pixel wide. The right end cap is therefore computed by adding the size of the left end cap and the middle portion together and then subtracting that value from the width of the image
	 * @param {Float} value New value to set.
	 * @alias Titanium.UI.Window.setBackgroundLeftCap
	 */
	setBackgroundLeftCap: function () { },
	/**
	 * the selected background color of the view. focusable must be true for normal views. (Android)
	 * @alias Titanium.UI.Window.backgroundSelectedColor
	 * @property {String}
	 */
	backgroundSelectedColor: '',
	/**
	 * Get the the selected background color of the view. focusable must be true for normal views. (Android)
	 * @alias Titanium.UI.Window.getBackgroundSelectedColor
	 * @return {String}
	 */
	getBackgroundSelectedColor: function () { return backgroundSelectedColor; },
	/**
	 * Set the the selected background color of the view. focusable must be true for normal views. (Android)
	 * @param {String} value New value to set.
	 * @alias Titanium.UI.Window.setBackgroundSelectedColor
	 */
	setBackgroundSelectedColor: function () { },
	/**
	 * the selected background image url of the view. focusable must be true for normal views. (Android)
	 * @alias Titanium.UI.Window.backgroundSelectedImage
	 * @property {String}
	 */
	backgroundSelectedImage: '',
	/**
	 * Get the the selected background image url of the view. focusable must be true for normal views. (Android)
	 * @alias Titanium.UI.Window.getBackgroundSelectedImage
	 * @return {String}
	 */
	getBackgroundSelectedImage: function () { return backgroundSelectedImage; },
	/**
	 * Set the the selected background image url of the view. focusable must be true for normal views. (Android)
	 * @param {String} value New value to set.
	 * @alias Titanium.UI.Window.setBackgroundSelectedImage
	 */
	setBackgroundSelectedImage: function () { },
	/**
	 * End caps specify the portion of an image that should not be resized when an image is stretched. This technique is used to implement buttons and other resizable image-based interface elements. When a button with end caps is resized, the resizing occurs only in the middle of the button, in the region between the end caps. The end caps themselves keep their original size and appearance. This property specifies the size of the top end cap. The middle (stretchable) portion is assumed to be 1 pixel wide. The bottom end cap is therefore computed by adding the size of the top end cap and the middle portion together and then subtracting that value from the height of the image
	 * @alias Titanium.UI.Window.backgroundTopCap
	 * @property {Float}
	 */
	backgroundTopCap: 0.0,
	/**
	 * Get the End caps specify the portion of an image that should not be resized when an image is stretched. This technique is used to implement buttons and other resizable image-based interface elements. When a button with end caps is resized, the resizing occurs only in the middle of the button, in the region between the end caps. The end caps themselves keep their original size and appearance. This property specifies the size of the top end cap. The middle (stretchable) portion is assumed to be 1 pixel wide. The bottom end cap is therefore computed by adding the size of the top end cap and the middle portion together and then subtracting that value from the height of the image
	 * @alias Titanium.UI.Window.getBackgroundTopCap
	 * @return {Float}
	 */
	getBackgroundTopCap: function () { return backgroundTopCap; },
	/**
	 * Set the End caps specify the portion of an image that should not be resized when an image is stretched. This technique is used to implement buttons and other resizable image-based interface elements. When a button with end caps is resized, the resizing occurs only in the middle of the button, in the region between the end caps. The end caps themselves keep their original size and appearance. This property specifies the size of the top end cap. The middle (stretchable) portion is assumed to be 1 pixel wide. The bottom end cap is therefore computed by adding the size of the top end cap and the middle portion together and then subtracting that value from the height of the image
	 * @param {Float} value New value to set.
	 * @alias Titanium.UI.Window.setBackgroundTopCap
	 */
	setBackgroundTopCap: function () { },
	/**
	 * web named color or hex value for the color of the nav bar. only available in iPhone.
	 * @alias Titanium.UI.Window.barColor
	 * @property {String}
	 */
	barColor: '',
	/**
	 * Get the web named color or hex value for the color of the nav bar. only available in iPhone.
	 * @alias Titanium.UI.Window.getBarColor
	 * @return {String}
	 */
	getBarColor: function () { return barColor; },
	/**
	 * Set the web named color or hex value for the color of the nav bar. only available in iPhone.
	 * @param {String} value New value to set.
	 * @alias Titanium.UI.Window.setBarColor
	 */
	setBarColor: function () { },
	/**
	 * url to a local image to place as the background of the nav bar. only available in iPhone.
	 * @alias Titanium.UI.Window.barImage
	 * @property {String}
	 */
	barImage: '',
	/**
	 * Get the url to a local image to place as the background of the nav bar. only available in iPhone.
	 * @alias Titanium.UI.Window.getBarImage
	 * @return {String}
	 */
	getBarImage: function () { return barImage; },
	/**
	 * Set the url to a local image to place as the background of the nav bar. only available in iPhone.
	 * @param {String} value New value to set.
	 * @alias Titanium.UI.Window.setBarImage
	 */
	setBarImage: function () { },
	/**
	 * the border color of the view
	 * @alias Titanium.UI.Window.borderColor
	 * @property {String}
	 */
	borderColor: '',
	/**
	 * Get the the border color of the view
	 * @alias Titanium.UI.Window.getBorderColor
	 * @return {String}
	 */
	getBorderColor: function () { return borderColor; },
	/**
	 * Set the the border color of the view
	 * @param {String} value New value to set.
	 * @alias Titanium.UI.Window.setBorderColor
	 */
	setBorderColor: function () { },
	/**
	 * the border radius of the view
	 * @alias Titanium.UI.Window.borderRadius
	 * @property {Float}
	 */
	borderRadius: 0.0,
	/**
	 * Get the the border radius of the view
	 * @alias Titanium.UI.Window.getBorderRadius
	 * @return {Float}
	 */
	getBorderRadius: function () { return borderRadius; },
	/**
	 * Set the the border radius of the view
	 * @param {Float} value New value to set.
	 * @alias Titanium.UI.Window.setBorderRadius
	 */
	setBorderRadius: function () { },
	/**
	 * the border width of the view
	 * @alias Titanium.UI.Window.borderWidth
	 * @property {Float}
	 */
	borderWidth: 0.0,
	/**
	 * Get the the border width of the view
	 * @alias Titanium.UI.Window.getBorderWidth
	 * @return {Float}
	 */
	getBorderWidth: function () { return borderWidth; },
	/**
	 * Set the the border width of the view
	 * @param {Float} value New value to set.
	 * @alias Titanium.UI.Window.setBorderWidth
	 */
	setBorderWidth: function () { },
	/**
	 * property for the view bottom position. This position is relative to the view's parent. Can be either a float value or a dimension string ie 'auto' (default), '50%' (iPhone only).
	 * @alias Titanium.UI.Window.bottom
	 * @property {Float,String}
	 */
	bottom: 0.0,
	/**
	 * Get the property for the view bottom position. This position is relative to the view's parent. Can be either a float value or a dimension string ie 'auto' (default), '50%' (iPhone only).
	 * @alias Titanium.UI.Window.getBottom
	 * @return {Float,String}
	 */
	getBottom: function () { return bottom; },
	/**
	 * Set the property for the view bottom position. This position is relative to the view's parent. Can be either a float value or a dimension string ie 'auto' (default), '50%' (iPhone only).
	 * @param {Float,String} value New value to set.
	 * @alias Titanium.UI.Window.setBottom
	 */
	setBottom: function () { },
	/**
	 * a dictionary with properties x and y to indicate the center of the views position relative to the parent view
	 * @alias Titanium.UI.Window.center
	 * @property {Object}
	 */
	center: {},
	/**
	 * Get the a dictionary with properties x and y to indicate the center of the views position relative to the parent view
	 * @alias Titanium.UI.Window.getCenter
	 * @return {Object}
	 */
	getCenter: function () { return center; },
	/**
	 * Set the a dictionary with properties x and y to indicate the center of the views position relative to the parent view
	 * @param {Object} value New value to set.
	 * @alias Titanium.UI.Window.setCenter
	 */
	setCenter: function () { },
	/**
	 * (Android only.) Boolean indicates if the application should exit when the Android back button is pressed while the window is being shown.  You can only set this as a createWindow({...}) option.  Setting it after window creation will no effect.
	 * @alias Titanium.UI.Window.exitOnClose
	 * @property {Boolean}
	 */
	exitOnClose: false,
	/**
	 * Get the (Android only.) Boolean indicates if the application should exit when the Android back button is pressed while the window is being shown.  You can only set this as a createWindow({...}) option.  Setting it after window creation will no effect.
	 * @alias Titanium.UI.Window.getExitOnClose
	 * @return {Boolean}
	 */
	getExitOnClose: function () { return exitOnClose; },
	/**
	 * Set the (Android only.) Boolean indicates if the application should exit when the Android back button is pressed while the window is being shown.  You can only set this as a createWindow({...}) option.  Setting it after window creation will no effect.
	 * @param {Boolean} value New value to set.
	 * @alias Titanium.UI.Window.setExitOnClose
	 */
	setExitOnClose: function () { },
	/**
	 * Set true if you want a view to be focusable when navigating with the trackball or D-Pad. Default: false. (Android Only)
	 * @alias Titanium.UI.Window.focusable
	 * @property {Boolean}
	 */
	focusable: false,
	/**
	 * Get the Set true if you want a view to be focusable when navigating with the trackball or D-Pad. Default: false. (Android Only)
	 * @alias Titanium.UI.Window.getFocusable
	 * @return {Boolean}
	 */
	getFocusable: function () { return focusable; },
	/**
	 * Set the Set true if you want a view to be focusable when navigating with the trackball or D-Pad. Default: false. (Android Only)
	 * @param {Boolean} value New value to set.
	 * @alias Titanium.UI.Window.setFocusable
	 */
	setFocusable: function () { },
	/**
	 * the font family
	 * @alias Titanium.UI.Window.font-family
	 * @property {String}
	 */
	font-family: '',
	/**
	 * Get the the font family
	 * @alias Titanium.UI.Window.getFont-family
	 * @return {String}
	 */
	getFont-family: function () { return font-family; },
	/**
	 * Set the the font family
	 * @param {String} value New value to set.
	 * @alias Titanium.UI.Window.setFont-family
	 */
	setFont-family: function () { },
	/**
	 * the font size
	 * @alias Titanium.UI.Window.font-size
	 * @property {String}
	 */
	font-size: '',
	/**
	 * Get the the font size
	 * @alias Titanium.UI.Window.getFont-size
	 * @return {String}
	 */
	getFont-size: function () { return font-size; },
	/**
	 * Set the the font size
	 * @param {String} value New value to set.
	 * @alias Titanium.UI.Window.setFont-size
	 */
	setFont-size: function () { },
	/**
	 * the font style, either normal or italics
	 * @alias Titanium.UI.Window.font-style
	 * @property {String}
	 */
	font-style: '',
	/**
	 * Get the the font style, either normal or italics
	 * @alias Titanium.UI.Window.getFont-style
	 * @return {String}
	 */
	getFont-style: function () { return font-style; },
	/**
	 * Set the the font style, either normal or italics
	 * @param {String} value New value to set.
	 * @alias Titanium.UI.Window.setFont-style
	 */
	setFont-style: function () { },
	/**
	 * the font weight, either normal or bold
	 * @alias Titanium.UI.Window.font-weight
	 * @property {String}
	 */
	font-weight: '',
	/**
	 * Get the the font weight, either normal or bold
	 * @alias Titanium.UI.Window.getFont-weight
	 * @return {String}
	 */
	getFont-weight: function () { return font-weight; },
	/**
	 * Set the the font weight, either normal or bold
	 * @param {String} value New value to set.
	 * @alias Titanium.UI.Window.setFont-weight
	 */
	setFont-weight: function () { },
	/**
	 * boolean indicates if the window is fullscreen (no device chrome)
	 * @alias Titanium.UI.Window.fullscreen
	 * @property {Boolean}
	 */
	fullscreen: false,
	/**
	 * Get the boolean indicates if the window is fullscreen (no device chrome)
	 * @alias Titanium.UI.Window.getFullscreen
	 * @return {Boolean}
	 */
	getFullscreen: function () { return fullscreen; },
	/**
	 * Set the boolean indicates if the window is fullscreen (no device chrome)
	 * @param {Boolean} value New value to set.
	 * @alias Titanium.UI.Window.setFullscreen
	 */
	setFullscreen: function () { },
	/**
	 * property for the view height. Can be either a float value or a dimension string ie 'auto' (default), '50%' (iPhone only).
	 * @alias Titanium.UI.Window.height
	 * @property {Float,String}
	 */
	height: 0.0,
	/**
	 * Get the property for the view height. Can be either a float value or a dimension string ie 'auto' (default), '50%' (iPhone only).
	 * @alias Titanium.UI.Window.getHeight
	 * @return {Float,String}
	 */
	getHeight: function () { return height; },
	/**
	 * Set the property for the view height. Can be either a float value or a dimension string ie 'auto' (default), '50%' (iPhone only).
	 * @param {Float,String} value New value to set.
	 * @alias Titanium.UI.Window.setHeight
	 */
	setHeight: function () { },
	/**
	 * property for the view left position. This position is relative to the view's parent. Can be either a float value or a dimension string ie 'auto' (default), '50%' (iPhone only).
	 * @alias Titanium.UI.Window.left
	 * @property {Float,String}
	 */
	left: 0.0,
	/**
	 * Get the property for the view left position. This position is relative to the view's parent. Can be either a float value or a dimension string ie 'auto' (default), '50%' (iPhone only).
	 * @alias Titanium.UI.Window.getLeft
	 * @return {Float,String}
	 */
	getLeft: function () { return left; },
	/**
	 * Set the property for the view left position. This position is relative to the view's parent. Can be either a float value or a dimension string ie 'auto' (default), '50%' (iPhone only).
	 * @param {Float,String} value New value to set.
	 * @alias Titanium.UI.Window.setLeft
	 */
	setLeft: function () { },
	/**
	 * view to show in the left nav bar area. only available in iPhone.
	 * @alias Titanium.UI.Window.leftNavButton
	 * @property {Object}
	 */
	leftNavButton: {},
	/**
	 * Get the view to show in the left nav bar area. only available in iPhone.
	 * @alias Titanium.UI.Window.getLeftNavButton
	 * @return {Object}
	 */
	getLeftNavButton: function () { return leftNavButton; },
	/**
	 * Set the view to show in the left nav bar area. only available in iPhone.
	 * @param {Object} value New value to set.
	 * @alias Titanium.UI.Window.setLeftNavButton
	 */
	setLeftNavButton: function () { },
	/**
	 * boolean to indicate if the window should be opened modal in front of other windows
	 * @alias Titanium.UI.Window.modal
	 * @property {Boolean}
	 */
	modal: false,
	/**
	 * Get the boolean to indicate if the window should be opened modal in front of other windows
	 * @alias Titanium.UI.Window.getModal
	 * @return {Boolean}
	 */
	getModal: function () { return modal; },
	/**
	 * Set the boolean to indicate if the window should be opened modal in front of other windows
	 * @param {Boolean} value New value to set.
	 * @alias Titanium.UI.Window.setModal
	 */
	setModal: function () { },
	/**
	 * for modal windows, hide the nav bar (true) or show the nav bar (false, default).
	 * @alias Titanium.UI.Window.navBarHidden
	 * @property {Boolean}
	 */
	navBarHidden: false,
	/**
	 * Get the for modal windows, hide the nav bar (true) or show the nav bar (false, default).
	 * @alias Titanium.UI.Window.getNavBarHidden
	 * @return {Boolean}
	 */
	getNavBarHidden: function () { return navBarHidden; },
	/**
	 * Set the for modal windows, hide the nav bar (true) or show the nav bar (false, default).
	 * @param {Boolean} value New value to set.
	 * @alias Titanium.UI.Window.setNavBarHidden
	 */
	setNavBarHidden: function () { },
	/**
	 * the opacity from 0.0-1.0
	 * @alias Titanium.UI.Window.opacity
	 * @property {Float}
	 */
	opacity: 0.0,
	/**
	 * Get the the opacity from 0.0-1.0
	 * @alias Titanium.UI.Window.getOpacity
	 * @return {Float}
	 */
	getOpacity: function () { return opacity; },
	/**
	 * Set the the opacity from 0.0-1.0
	 * @param {Float} value New value to set.
	 * @alias Titanium.UI.Window.setOpacity
	 */
	setOpacity: function () { },
	/**
	 * array of orientation mode constants defined in [Titanium.UI]
	 * @alias Titanium.UI.Window.orientationModes
	 * @property {Array}
	 */
	orientationModes: [],
	/**
	 * Get the array of orientation mode constants defined in [Titanium.UI]
	 * @alias Titanium.UI.Window.getOrientationModes
	 * @return {Array}
	 */
	getOrientationModes: function () { return orientationModes; },
	/**
	 * Set the array of orientation mode constants defined in [Titanium.UI]
	 * @param {Array} value New value to set.
	 * @alias Titanium.UI.Window.setOrientationModes
	 */
	setOrientationModes: function () { },
	/**
	 * property for the view right position. This position is relative to the view's parent. Can be either a float value or a dimension string ie 'auto' (default), '50%' (iPhone only).
	 * @alias Titanium.UI.Window.right
	 * @property {Float,String}
	 */
	right: 0.0,
	/**
	 * Get the property for the view right position. This position is relative to the view's parent. Can be either a float value or a dimension string ie 'auto' (default), '50%' (iPhone only).
	 * @alias Titanium.UI.Window.getRight
	 * @return {Float,String}
	 */
	getRight: function () { return right; },
	/**
	 * Set the property for the view right position. This position is relative to the view's parent. Can be either a float value or a dimension string ie 'auto' (default), '50%' (iPhone only).
	 * @param {Float,String} value New value to set.
	 * @alias Titanium.UI.Window.setRight
	 */
	setRight: function () { },
	/**
	 * view to show in the right nav bar area. only available in iPhone.
	 * @alias Titanium.UI.Window.rightNavButton
	 * @property {Object}
	 */
	rightNavButton: {},
	/**
	 * Get the view to show in the right nav bar area. only available in iPhone.
	 * @alias Titanium.UI.Window.getRightNavButton
	 * @return {Object}
	 */
	getRightNavButton: function () { return rightNavButton; },
	/**
	 * Set the view to show in the right nav bar area. only available in iPhone.
	 * @param {Object} value New value to set.
	 * @alias Titanium.UI.Window.setRightNavButton
	 */
	setRightNavButton: function () { },
	/**
	 * the size of the view as a dictionary of width and height properties
	 * @alias Titanium.UI.Window.size
	 * @property {Object}
	 */
	size: {},
	/**
	 * Get the the size of the view as a dictionary of width and height properties
	 * @alias Titanium.UI.Window.getSize
	 * @return {Object}
	 */
	getSize: function () { return size; },
	/**
	 * Set the the size of the view as a dictionary of width and height properties
	 * @param {Object} value New value to set.
	 * @alias Titanium.UI.Window.setSize
	 */
	setSize: function () { },
	/**
	 * One of Ti.UI.Android.SOFT_INPUT_ADJUST_PAN, Ti.UI.Android.SOFT_INPUT_ADJUST_RESIZE, or Ti.UI.Android.SOFT_INPUT_ADJUST_UNSPECIFIED. Note: MUST be passed in the creation options. (Android Only) Android Doc: Window.setSoftInputMode
	 * @alias Titanium.UI.Window.softInputMode
	 * @property {Integer}
	 */
	softInputMode: 0,
	/**
	 * Get the One of Ti.UI.Android.SOFT_INPUT_ADJUST_PAN, Ti.UI.Android.SOFT_INPUT_ADJUST_RESIZE, or Ti.UI.Android.SOFT_INPUT_ADJUST_UNSPECIFIED. Note: MUST be passed in the creation options. (Android Only) Android Doc: Window.setSoftInputMode
	 * @alias Titanium.UI.Window.getSoftInputMode
	 * @return {Integer}
	 */
	getSoftInputMode: function () { return softInputMode; },
	/**
	 * Set the One of Ti.UI.Android.SOFT_INPUT_ADJUST_PAN, Ti.UI.Android.SOFT_INPUT_ADJUST_RESIZE, or Ti.UI.Android.SOFT_INPUT_ADJUST_UNSPECIFIED. Note: MUST be passed in the creation options. (Android Only) Android Doc: Window.setSoftInputMode
	 * @param {Integer} value New value to set.
	 * @alias Titanium.UI.Window.setSoftInputMode
	 */
	setSoftInputMode: function () { },
	/**
	 * One of Titanium.UI.Android.SOFT_KEYBOARD_DEFAULT_ON_FOCUS, Titanium.UI.Android.SOFT_KEYBOARD_HIDE_ON_FOCUS, or Titanium.UI.Android.SOFT_KEYBOARD_SHOW_ON_FOCUS. (Android only)
	 * @alias Titanium.UI.Window.softKeyboardOnFocus
	 * @property {Integer}
	 */
	softKeyboardOnFocus: 0,
	/**
	 * Get the One of Titanium.UI.Android.SOFT_KEYBOARD_DEFAULT_ON_FOCUS, Titanium.UI.Android.SOFT_KEYBOARD_HIDE_ON_FOCUS, or Titanium.UI.Android.SOFT_KEYBOARD_SHOW_ON_FOCUS. (Android only)
	 * @alias Titanium.UI.Window.getSoftKeyboardOnFocus
	 * @return {Integer}
	 */
	getSoftKeyboardOnFocus: function () { return softKeyboardOnFocus; },
	/**
	 * Set the One of Titanium.UI.Android.SOFT_KEYBOARD_DEFAULT_ON_FOCUS, Titanium.UI.Android.SOFT_KEYBOARD_HIDE_ON_FOCUS, or Titanium.UI.Android.SOFT_KEYBOARD_SHOW_ON_FOCUS. (Android only)
	 * @param {Integer} value New value to set.
	 * @alias Titanium.UI.Window.setSoftKeyboardOnFocus
	 */
	setSoftKeyboardOnFocus: function () { },
	/**
	 * boolean to indicate if the tab bar should be hidden. this is only valid when the window is a child of a tab.
	 * @alias Titanium.UI.Window.tabBarHidden
	 * @property {Boolean}
	 */
	tabBarHidden: false,
	/**
	 * Get the boolean to indicate if the tab bar should be hidden. this is only valid when the window is a child of a tab.
	 * @alias Titanium.UI.Window.getTabBarHidden
	 * @return {Boolean}
	 */
	getTabBarHidden: function () { return tabBarHidden; },
	/**
	 * Set the boolean to indicate if the tab bar should be hidden. this is only valid when the window is a child of a tab.
	 * @param {Boolean} value New value to set.
	 * @alias Titanium.UI.Window.setTabBarHidden
	 */
	setTabBarHidden: function () { },
	/**
	 * title of the window.
	 * @alias Titanium.UI.Window.title
	 * @property {String}
	 */
	title: '',
	/**
	 * Get the title of the window.
	 * @alias Titanium.UI.Window.getTitle
	 * @return {String}
	 */
	getTitle: function () { return title; },
	/**
	 * Set the title of the window.
	 * @param {String} value New value to set.
	 * @alias Titanium.UI.Window.setTitle
	 */
	setTitle: function () { },
	/**
	 * view to show in the title area. only available in iPhone.
	 * @alias Titanium.UI.Window.titleControl
	 * @property {Object}
	 */
	titleControl: {},
	/**
	 * Get the view to show in the title area. only available in iPhone.
	 * @alias Titanium.UI.Window.getTitleControl
	 * @return {Object}
	 */
	getTitleControl: function () { return titleControl; },
	/**
	 * Set the view to show in the title area. only available in iPhone.
	 * @param {Object} value New value to set.
	 * @alias Titanium.UI.Window.setTitleControl
	 */
	setTitleControl: function () { },
	/**
	 * url to a image that show in the title area. only available in iPhone.
	 * @alias Titanium.UI.Window.titleImage
	 * @property {String}
	 */
	titleImage: '',
	/**
	 * Get the url to a image that show in the title area. only available in iPhone.
	 * @alias Titanium.UI.Window.getTitleImage
	 * @return {String}
	 */
	getTitleImage: function () { return titleImage; },
	/**
	 * Set the url to a image that show in the title area. only available in iPhone.
	 * @param {String} value New value to set.
	 * @alias Titanium.UI.Window.setTitleImage
	 */
	setTitleImage: function () { },
	/**
	 * title prompt for the window. only available in iPhone.
	 * @alias Titanium.UI.Window.titlePrompt
	 * @property {String}
	 */
	titlePrompt: '',
	/**
	 * Get the title prompt for the window. only available in iPhone.
	 * @alias Titanium.UI.Window.getTitlePrompt
	 * @return {String}
	 */
	getTitlePrompt: function () { return titlePrompt; },
	/**
	 * Set the title prompt for the window. only available in iPhone.
	 * @param {String} value New value to set.
	 * @alias Titanium.UI.Window.setTitlePrompt
	 */
	setTitlePrompt: function () { },
	/**
	 * the key in the locale file to use for the title property
	 * @alias Titanium.UI.Window.titleid
	 * @property {String}
	 */
	titleid: '',
	/**
	 * Get the the key in the locale file to use for the title property
	 * @alias Titanium.UI.Window.getTitleid
	 * @return {String}
	 */
	getTitleid: function () { return titleid; },
	/**
	 * Set the the key in the locale file to use for the title property
	 * @param {String} value New value to set.
	 * @alias Titanium.UI.Window.setTitleid
	 */
	setTitleid: function () { },
	/**
	 * the key in the locale file to use for the titlePrompt property
	 * @alias Titanium.UI.Window.titlepromptid
	 * @property {String}
	 */
	titlepromptid: '',
	/**
	 * Get the the key in the locale file to use for the titlePrompt property
	 * @alias Titanium.UI.Window.getTitlepromptid
	 * @return {String}
	 */
	getTitlepromptid: function () { return titlepromptid; },
	/**
	 * Set the the key in the locale file to use for the titlePrompt property
	 * @param {String} value New value to set.
	 * @alias Titanium.UI.Window.setTitlepromptid
	 */
	setTitlepromptid: function () { },
	/**
	 * array of button objects to show in the toolbar of the window. only available in iPhone. this is only valid when the window is a child of a tab.
	 * @alias Titanium.UI.Window.toolbar
	 * @property {Array}
	 */
	toolbar: [],
	/**
	 * Get the array of button objects to show in the toolbar of the window. only available in iPhone. this is only valid when the window is a child of a tab.
	 * @alias Titanium.UI.Window.getToolbar
	 * @return {Array}
	 */
	getToolbar: function () { return toolbar; },
	/**
	 * Set the array of button objects to show in the toolbar of the window. only available in iPhone. this is only valid when the window is a child of a tab.
	 * @param {Array} value New value to set.
	 * @alias Titanium.UI.Window.setToolbar
	 */
	setToolbar: function () { },
	/**
	 * property for the view top position. This position is relative to the view's parent. Can be either a float value or a dimension string ie 'auto' (default), '50%' (iPhone only).
	 * @alias Titanium.UI.Window.top
	 * @property {Float,String}
	 */
	top: 0.0,
	/**
	 * Get the property for the view top position. This position is relative to the view's parent. Can be either a float value or a dimension string ie 'auto' (default), '50%' (iPhone only).
	 * @alias Titanium.UI.Window.getTop
	 * @return {Float,String}
	 */
	getTop: function () { return top; },
	/**
	 * Set the property for the view top position. This position is relative to the view's parent. Can be either a float value or a dimension string ie 'auto' (default), '50%' (iPhone only).
	 * @param {Float,String} value New value to set.
	 * @alias Titanium.UI.Window.setTop
	 */
	setTop: function () { },
	/**
	 * a boolean indicating if the view should receive touch events (true, default) or forward them to peers (false)
	 * @alias Titanium.UI.Window.touchEnabled
	 * @property {Boolean}
	 */
	touchEnabled: false,
	/**
	 * Get the a boolean indicating if the view should receive touch events (true, default) or forward them to peers (false)
	 * @alias Titanium.UI.Window.getTouchEnabled
	 * @return {Boolean}
	 */
	getTouchEnabled: function () { return touchEnabled; },
	/**
	 * Set the a boolean indicating if the view should receive touch events (true, default) or forward them to peers (false)
	 * @param {Boolean} value New value to set.
	 * @alias Titanium.UI.Window.setTouchEnabled
	 */
	setTouchEnabled: function () { },
	/**
	 * the transformation matrix to apply to the view
	 * @alias Titanium.UI.Window.transform
	 * @property {Object}
	 */
	transform: {},
	/**
	 * Get the the transformation matrix to apply to the view
	 * @alias Titanium.UI.Window.getTransform
	 * @return {Object}
	 */
	getTransform: function () { return transform; },
	/**
	 * Set the the transformation matrix to apply to the view
	 * @param {Object} value New value to set.
	 * @alias Titanium.UI.Window.setTransform
	 */
	setTransform: function () { },
	/**
	 * boolean to indicate if the nav bar is translucent. only available in iPhone.
	 * @alias Titanium.UI.Window.translucent
	 * @property {Boolean}
	 */
	translucent: false,
	/**
	 * Get the boolean to indicate if the nav bar is translucent. only available in iPhone.
	 * @alias Titanium.UI.Window.getTranslucent
	 * @return {Boolean}
	 */
	getTranslucent: function () { return translucent; },
	/**
	 * Set the boolean to indicate if the nav bar is translucent. only available in iPhone.
	 * @param {Boolean} value New value to set.
	 * @alias Titanium.UI.Window.setTranslucent
	 */
	setTranslucent: function () { },
	/**
	 * url to a JavaScript file with the windows instructions. this window will create a new JavaScript sub-context that will run in its own thread and global variable space.
	 * @alias Titanium.UI.Window.url
	 * @property {String}
	 */
	url: '',
	/**
	 * Get the url to a JavaScript file with the windows instructions. this window will create a new JavaScript sub-context that will run in its own thread and global variable space.
	 * @alias Titanium.UI.Window.getUrl
	 * @return {String}
	 */
	getUrl: function () { return url; },
	/**
	 * Set the url to a JavaScript file with the windows instructions. this window will create a new JavaScript sub-context that will run in its own thread and global variable space.
	 * @param {String} value New value to set.
	 * @alias Titanium.UI.Window.setUrl
	 */
	setUrl: function () { },
	/**
	 * a boolean of the visibility of the view
	 * @alias Titanium.UI.Window.visible
	 * @property {Boolean}
	 */
	visible: false,
	/**
	 * Get the a boolean of the visibility of the view
	 * @alias Titanium.UI.Window.getVisible
	 * @return {Boolean}
	 */
	getVisible: function () { return visible; },
	/**
	 * Set the a boolean of the visibility of the view
	 * @param {Boolean} value New value to set.
	 * @alias Titanium.UI.Window.setVisible
	 */
	setVisible: function () { },
	/**
	 * property for the view width. Can be either a float value or a dimension string ie 'auto' (default), '50%' (iPhone only).
	 * @alias Titanium.UI.Window.width
	 * @property {Float,String}
	 */
	width: 0.0,
	/**
	 * Get the property for the view width. Can be either a float value or a dimension string ie 'auto' (default), '50%' (iPhone only).
	 * @alias Titanium.UI.Window.getWidth
	 * @return {Float,String}
	 */
	getWidth: function () { return width; },
	/**
	 * Set the property for the view width. Can be either a float value or a dimension string ie 'auto' (default), '50%' (iPhone only).
	 * @param {Float,String} value New value to set.
	 * @alias Titanium.UI.Window.setWidth
	 */
	setWidth: function () { },
	/**
	 * the z index position relative to other sibling views
	 * @alias Titanium.UI.Window.zIndex
	 * @property {Integer}
	 */
	zIndex: 0,
	/**
	 * Get the the z index position relative to other sibling views
	 * @alias Titanium.UI.Window.getZIndex
	 * @return {Integer}
	 */
	getZIndex: function () { return zIndex; },
	/**
	 * Set the the z index position relative to other sibling views
	 * @param {Integer} value New value to set.
	 * @alias Titanium.UI.Window.setZIndex
	 */
	setZIndex: function () { },
	/**
	 * add a child to the view hierarchy
	 * @param {Object} view the view to add to this views hiearchy
	 * @alias Titanium.UI.Window.add
	 */
	add: function (view) { },
	/**
	 * add an event listener for the instance to receive view triggered events
	 * @param {String} name name of the event
	 * @param {Function} callback callback function to invoke when the event is fired
	 * @alias Titanium.UI.Window.addEventListener
	 */
	addEventListener: function (name,callback) { },
	/**
	 * animate the view
	 * @param {Object} obj either a dictionary of animation properties or an Animation object
	 * @param {Function} callback function to be invoked upon completion of the animation
	 * @alias Titanium.UI.Window.animate
	 */
	animate: function (obj,callback) { },
	/**
	 * close the window
	 * @param {Object} options close the window with optional animation or display properties
	 * @alias Titanium.UI.Window.close
	 */
	close: function (options) { },
	/**
	 * fire a synthesized event to the views listener
	 * @param {String} name name of the event
	 * @param {Object} event event object
	 * @alias Titanium.UI.Window.fireEvent
	 */
	fireEvent: function (name,event) { },
	/**
	 * hide the view
	 * @alias Titanium.UI.Window.hide
	 */
	hide: function () { },
	/**
	 * open the window
	 * @param {Object} options open the window with optional animation or display properties
	 * @alias Titanium.UI.Window.open
	 */
	open: function (options) { },
	/**
	 * remove a previously add view from the view hiearchy
	 * @param {Object} view the view to remove from this views hiearchy
	 * @alias Titanium.UI.Window.remove
	 */
	remove: function (view) { },
	/**
	 * remove a previously added event listener
	 * @param {String} name name of the event
	 * @param {Function} callback callback function passed in addEventListener
	 * @alias Titanium.UI.Window.removeEventListener
	 */
	removeEventListener: function (name,callback) { },
	/**
	 * make the view visible
	 * @alias Titanium.UI.Window.show
	 */
	show: function () { },
	/**
	 * return a Blob image of the rendered view
	 * @param {Function} f function to be invoked upon completion. if non-null, this method will be performed asynchronously. if null, it will be performed immediately
	 * @alias Titanium.UI.Window.toImage
	 * @return {Object}
	 */
	toImage: function (f) { return {}; },
};

/**
 * The Apple iOS specific UI capabilities.  All properties, methods and events in this namespace will only work on the Apple iOS related devices.
 * @since 1.4
 */
Titanium.UI.iOS = {
	/**
	 * add an event listener for the instance to receive view triggered events
	 * @param {String} name name of the event
	 * @param {Function} callback callback function to invoke when the event is fired
	 * @alias Titanium.UI.iOS.addEventListener
	 */
	addEventListener: function (name,callback) { },
	/**
	 * create and return an instance of Titanium.UI.iOS.AdView
	 * @param {Object} [parameters] (optional) a dictionary object properties defined in <a href="Titanium.UI.iOS.AdView.html">Titanium.UI.iOS.AdView</a>
	 * @alias Titanium.UI.iOS.createAdView
	 * @return {Titanium_UI_iOS_AdView}
	 */
	createAdView: function (parameters) { return new Titanium_UI_iOS_AdView(); },
	/**
	 * fire a synthesized event to the views listener
	 * @param {String} name name of the event
	 * @param {Object} event event object
	 * @alias Titanium.UI.iOS.fireEvent
	 */
	fireEvent: function (name,event) { },
	/**
	 * remove a previously added event listener
	 * @param {String} name name of the event
	 * @param {Function} callback callback function passed in addEventListener
	 * @alias Titanium.UI.iOS.removeEventListener
	 */
	removeEventListener: function (name,callback) { },
};

/**
 * The AdView is a view for display Apple iAds. The View is created by the method Titanium.UI.iOS.createAdView.
 * @since 1.4
 */
Titanium.UI.iOS.AdView = {
	/**
	 * constant for 320x50 ad sizes
	 * @alias Titanium.UI.iOS.AdView.SIZE_320x50
	 * @property {String}
	 */
	SIZE_320x50: '',
	/**
	 * Get the constant for 320x50 ad sizes
	 * @alias Titanium.UI.iOS.AdView.getSIZE_320x50
	 * @return {String}
	 */
	getSIZE_320x50: function () { return SIZE_320x50; },
	/**
	 * Set the constant for 320x50 ad sizes
	 * @param {String} value New value to set.
	 * @alias Titanium.UI.iOS.AdView.setSIZE_320x50
	 */
	setSIZE_320x50: function () { },
	/**
	 * constant for 480x32 ad sizes
	 * @alias Titanium.UI.iOS.AdView.SIZE_480x32
	 * @property {String}
	 */
	SIZE_480x32: '',
	/**
	 * Get the constant for 480x32 ad sizes
	 * @alias Titanium.UI.iOS.AdView.getSIZE_480x32
	 * @return {String}
	 */
	getSIZE_480x32: function () { return SIZE_480x32; },
	/**
	 * Set the constant for 480x32 ad sizes
	 * @param {String} value New value to set.
	 * @alias Titanium.UI.iOS.AdView.setSIZE_480x32
	 */
	setSIZE_480x32: function () { },
	/**
	 * a dictionary with properties x and y to indicate the anchor point value. anchor specifies the position by which animation should occur. center is 0.5, 0.5
	 * @alias Titanium.UI.iOS.AdView.anchorPoint
	 * @property {Object}
	 */
	anchorPoint: {},
	/**
	 * Get the a dictionary with properties x and y to indicate the anchor point value. anchor specifies the position by which animation should occur. center is 0.5, 0.5
	 * @alias Titanium.UI.iOS.AdView.getAnchorPoint
	 * @return {Object}
	 */
	getAnchorPoint: function () { return anchorPoint; },
	/**
	 * Set the a dictionary with properties x and y to indicate the anchor point value. anchor specifies the position by which animation should occur. center is 0.5, 0.5
	 * @param {Object} value New value to set.
	 * @alias Titanium.UI.iOS.AdView.setAnchorPoint
	 */
	setAnchorPoint: function () { },
	/**
	 * read-only object with x and y properties of where the view is during animation
	 * @alias Titanium.UI.iOS.AdView.animatedCenterPoint
	 * @property {Object}
	 */
	animatedCenterPoint: {},
	/**
	 * Get the read-only object with x and y properties of where the view is during animation
	 * @alias Titanium.UI.iOS.AdView.getAnimatedCenterPoint
	 * @return {Object}
	 */
	getAnimatedCenterPoint: function () { return animatedCenterPoint; },
	/**
	 * Set the read-only object with x and y properties of where the view is during animation
	 * @param {Object} value New value to set.
	 * @alias Titanium.UI.iOS.AdView.setAnimatedCenterPoint
	 */
	setAnimatedCenterPoint: function () { },
	/**
	 * the background color of the view
	 * @alias Titanium.UI.iOS.AdView.backgroundColor
	 * @property {String}
	 */
	backgroundColor: '',
	/**
	 * Get the the background color of the view
	 * @alias Titanium.UI.iOS.AdView.getBackgroundColor
	 * @return {String}
	 */
	getBackgroundColor: function () { return backgroundColor; },
	/**
	 * Set the the background color of the view
	 * @param {String} value New value to set.
	 * @alias Titanium.UI.iOS.AdView.setBackgroundColor
	 */
	setBackgroundColor: function () { },
	/**
	 * the disabled background color of the view. (Android)
	 * @alias Titanium.UI.iOS.AdView.backgroundDisabledColor
	 * @property {String}
	 */
	backgroundDisabledColor: '',
	/**
	 * Get the the disabled background color of the view. (Android)
	 * @alias Titanium.UI.iOS.AdView.getBackgroundDisabledColor
	 * @return {String}
	 */
	getBackgroundDisabledColor: function () { return backgroundDisabledColor; },
	/**
	 * Set the the disabled background color of the view. (Android)
	 * @param {String} value New value to set.
	 * @alias Titanium.UI.iOS.AdView.setBackgroundDisabledColor
	 */
	setBackgroundDisabledColor: function () { },
	/**
	 * the disabled background image url of the view. (Android)
	 * @alias Titanium.UI.iOS.AdView.backgroundDisabledImage
	 * @property {String}
	 */
	backgroundDisabledImage: '',
	/**
	 * Get the the disabled background image url of the view. (Android)
	 * @alias Titanium.UI.iOS.AdView.getBackgroundDisabledImage
	 * @return {String}
	 */
	getBackgroundDisabledImage: function () { return backgroundDisabledImage; },
	/**
	 * Set the the disabled background image url of the view. (Android)
	 * @param {String} value New value to set.
	 * @alias Titanium.UI.iOS.AdView.setBackgroundDisabledImage
	 */
	setBackgroundDisabledImage: function () { },
	/**
	 * the focused background color of the view. focusable must be true for normal views. (Android)
	 * @alias Titanium.UI.iOS.AdView.backgroundFocusedColor
	 * @property {String}
	 */
	backgroundFocusedColor: '',
	/**
	 * Get the the focused background color of the view. focusable must be true for normal views. (Android)
	 * @alias Titanium.UI.iOS.AdView.getBackgroundFocusedColor
	 * @return {String}
	 */
	getBackgroundFocusedColor: function () { return backgroundFocusedColor; },
	/**
	 * Set the the focused background color of the view. focusable must be true for normal views. (Android)
	 * @param {String} value New value to set.
	 * @alias Titanium.UI.iOS.AdView.setBackgroundFocusedColor
	 */
	setBackgroundFocusedColor: function () { },
	/**
	 * the focused background image url of the view. focusable must be true for normal views. (Android)
	 * @alias Titanium.UI.iOS.AdView.backgroundFocusedImage
	 * @property {String}
	 */
	backgroundFocusedImage: '',
	/**
	 * Get the the focused background image url of the view. focusable must be true for normal views. (Android)
	 * @alias Titanium.UI.iOS.AdView.getBackgroundFocusedImage
	 * @return {String}
	 */
	getBackgroundFocusedImage: function () { return backgroundFocusedImage; },
	/**
	 * Set the the focused background image url of the view. focusable must be true for normal views. (Android)
	 * @param {String} value New value to set.
	 * @alias Titanium.UI.iOS.AdView.setBackgroundFocusedImage
	 */
	setBackgroundFocusedImage: function () { },
	/**
	 * a background gradient for the view with the properties: type,startPoint,endPoint,startRadius,endRadius,backfillStart,backfillEnd,colors.
	 * @alias Titanium.UI.iOS.AdView.backgroundGradient
	 * @property {Object}
	 */
	backgroundGradient: {},
	/**
	 * Get the a background gradient for the view with the properties: type,startPoint,endPoint,startRadius,endRadius,backfillStart,backfillEnd,colors.
	 * @alias Titanium.UI.iOS.AdView.getBackgroundGradient
	 * @return {Object}
	 */
	getBackgroundGradient: function () { return backgroundGradient; },
	/**
	 * Set the a background gradient for the view with the properties: type,startPoint,endPoint,startRadius,endRadius,backfillStart,backfillEnd,colors.
	 * @param {Object} value New value to set.
	 * @alias Titanium.UI.iOS.AdView.setBackgroundGradient
	 */
	setBackgroundGradient: function () { },
	/**
	 * the background image url of the view
	 * @alias Titanium.UI.iOS.AdView.backgroundImage
	 * @property {String}
	 */
	backgroundImage: '',
	/**
	 * Get the the background image url of the view
	 * @alias Titanium.UI.iOS.AdView.getBackgroundImage
	 * @return {String}
	 */
	getBackgroundImage: function () { return backgroundImage; },
	/**
	 * Set the the background image url of the view
	 * @param {String} value New value to set.
	 * @alias Titanium.UI.iOS.AdView.setBackgroundImage
	 */
	setBackgroundImage: function () { },
	/**
	 * End caps specify the portion of an image that should not be resized when an image is stretched. This technique is used to implement buttons and other resizable image-based interface elements. When a button with end caps is resized, the resizing occurs only in the middle of the button, in the region between the end caps. The end caps themselves keep their original size and appearance. This property specifies the size of the left end cap. The middle (stretchable) portion is assumed to be 1 pixel wide. The right end cap is therefore computed by adding the size of the left end cap and the middle portion together and then subtracting that value from the width of the image
	 * @alias Titanium.UI.iOS.AdView.backgroundLeftCap
	 * @property {Float}
	 */
	backgroundLeftCap: 0.0,
	/**
	 * Get the End caps specify the portion of an image that should not be resized when an image is stretched. This technique is used to implement buttons and other resizable image-based interface elements. When a button with end caps is resized, the resizing occurs only in the middle of the button, in the region between the end caps. The end caps themselves keep their original size and appearance. This property specifies the size of the left end cap. The middle (stretchable) portion is assumed to be 1 pixel wide. The right end cap is therefore computed by adding the size of the left end cap and the middle portion together and then subtracting that value from the width of the image
	 * @alias Titanium.UI.iOS.AdView.getBackgroundLeftCap
	 * @return {Float}
	 */
	getBackgroundLeftCap: function () { return backgroundLeftCap; },
	/**
	 * Set the End caps specify the portion of an image that should not be resized when an image is stretched. This technique is used to implement buttons and other resizable image-based interface elements. When a button with end caps is resized, the resizing occurs only in the middle of the button, in the region between the end caps. The end caps themselves keep their original size and appearance. This property specifies the size of the left end cap. The middle (stretchable) portion is assumed to be 1 pixel wide. The right end cap is therefore computed by adding the size of the left end cap and the middle portion together and then subtracting that value from the width of the image
	 * @param {Float} value New value to set.
	 * @alias Titanium.UI.iOS.AdView.setBackgroundLeftCap
	 */
	setBackgroundLeftCap: function () { },
	/**
	 * the selected background color of the view. focusable must be true for normal views. (Android)
	 * @alias Titanium.UI.iOS.AdView.backgroundSelectedColor
	 * @property {String}
	 */
	backgroundSelectedColor: '',
	/**
	 * Get the the selected background color of the view. focusable must be true for normal views. (Android)
	 * @alias Titanium.UI.iOS.AdView.getBackgroundSelectedColor
	 * @return {String}
	 */
	getBackgroundSelectedColor: function () { return backgroundSelectedColor; },
	/**
	 * Set the the selected background color of the view. focusable must be true for normal views. (Android)
	 * @param {String} value New value to set.
	 * @alias Titanium.UI.iOS.AdView.setBackgroundSelectedColor
	 */
	setBackgroundSelectedColor: function () { },
	/**
	 * the selected background image url of the view. focusable must be true for normal views. (Android)
	 * @alias Titanium.UI.iOS.AdView.backgroundSelectedImage
	 * @property {String}
	 */
	backgroundSelectedImage: '',
	/**
	 * Get the the selected background image url of the view. focusable must be true for normal views. (Android)
	 * @alias Titanium.UI.iOS.AdView.getBackgroundSelectedImage
	 * @return {String}
	 */
	getBackgroundSelectedImage: function () { return backgroundSelectedImage; },
	/**
	 * Set the the selected background image url of the view. focusable must be true for normal views. (Android)
	 * @param {String} value New value to set.
	 * @alias Titanium.UI.iOS.AdView.setBackgroundSelectedImage
	 */
	setBackgroundSelectedImage: function () { },
	/**
	 * End caps specify the portion of an image that should not be resized when an image is stretched. This technique is used to implement buttons and other resizable image-based interface elements. When a button with end caps is resized, the resizing occurs only in the middle of the button, in the region between the end caps. The end caps themselves keep their original size and appearance. This property specifies the size of the top end cap. The middle (stretchable) portion is assumed to be 1 pixel wide. The bottom end cap is therefore computed by adding the size of the top end cap and the middle portion together and then subtracting that value from the height of the image
	 * @alias Titanium.UI.iOS.AdView.backgroundTopCap
	 * @property {Float}
	 */
	backgroundTopCap: 0.0,
	/**
	 * Get the End caps specify the portion of an image that should not be resized when an image is stretched. This technique is used to implement buttons and other resizable image-based interface elements. When a button with end caps is resized, the resizing occurs only in the middle of the button, in the region between the end caps. The end caps themselves keep their original size and appearance. This property specifies the size of the top end cap. The middle (stretchable) portion is assumed to be 1 pixel wide. The bottom end cap is therefore computed by adding the size of the top end cap and the middle portion together and then subtracting that value from the height of the image
	 * @alias Titanium.UI.iOS.AdView.getBackgroundTopCap
	 * @return {Float}
	 */
	getBackgroundTopCap: function () { return backgroundTopCap; },
	/**
	 * Set the End caps specify the portion of an image that should not be resized when an image is stretched. This technique is used to implement buttons and other resizable image-based interface elements. When a button with end caps is resized, the resizing occurs only in the middle of the button, in the region between the end caps. The end caps themselves keep their original size and appearance. This property specifies the size of the top end cap. The middle (stretchable) portion is assumed to be 1 pixel wide. The bottom end cap is therefore computed by adding the size of the top end cap and the middle portion together and then subtracting that value from the height of the image
	 * @param {Float} value New value to set.
	 * @alias Titanium.UI.iOS.AdView.setBackgroundTopCap
	 */
	setBackgroundTopCap: function () { },
	/**
	 * the border color of the view
	 * @alias Titanium.UI.iOS.AdView.borderColor
	 * @property {String}
	 */
	borderColor: '',
	/**
	 * Get the the border color of the view
	 * @alias Titanium.UI.iOS.AdView.getBorderColor
	 * @return {String}
	 */
	getBorderColor: function () { return borderColor; },
	/**
	 * Set the the border color of the view
	 * @param {String} value New value to set.
	 * @alias Titanium.UI.iOS.AdView.setBorderColor
	 */
	setBorderColor: function () { },
	/**
	 * the border radius of the view
	 * @alias Titanium.UI.iOS.AdView.borderRadius
	 * @property {Float}
	 */
	borderRadius: 0.0,
	/**
	 * Get the the border radius of the view
	 * @alias Titanium.UI.iOS.AdView.getBorderRadius
	 * @return {Float}
	 */
	getBorderRadius: function () { return borderRadius; },
	/**
	 * Set the the border radius of the view
	 * @param {Float} value New value to set.
	 * @alias Titanium.UI.iOS.AdView.setBorderRadius
	 */
	setBorderRadius: function () { },
	/**
	 * the border width of the view
	 * @alias Titanium.UI.iOS.AdView.borderWidth
	 * @property {Float}
	 */
	borderWidth: 0.0,
	/**
	 * Get the the border width of the view
	 * @alias Titanium.UI.iOS.AdView.getBorderWidth
	 * @return {Float}
	 */
	getBorderWidth: function () { return borderWidth; },
	/**
	 * Set the the border width of the view
	 * @param {Float} value New value to set.
	 * @alias Titanium.UI.iOS.AdView.setBorderWidth
	 */
	setBorderWidth: function () { },
	/**
	 * property for the view bottom position. This position is relative to the view's parent. Can be either a float value or a dimension string ie 'auto' (default), '50%' (iPhone only).
	 * @alias Titanium.UI.iOS.AdView.bottom
	 * @property {Float,String}
	 */
	bottom: 0.0,
	/**
	 * Get the property for the view bottom position. This position is relative to the view's parent. Can be either a float value or a dimension string ie 'auto' (default), '50%' (iPhone only).
	 * @alias Titanium.UI.iOS.AdView.getBottom
	 * @return {Float,String}
	 */
	getBottom: function () { return bottom; },
	/**
	 * Set the property for the view bottom position. This position is relative to the view's parent. Can be either a float value or a dimension string ie 'auto' (default), '50%' (iPhone only).
	 * @param {Float,String} value New value to set.
	 * @alias Titanium.UI.iOS.AdView.setBottom
	 */
	setBottom: function () { },
	/**
	 * a dictionary with properties x and y to indicate the center of the views position relative to the parent view
	 * @alias Titanium.UI.iOS.AdView.center
	 * @property {Object}
	 */
	center: {},
	/**
	 * Get the a dictionary with properties x and y to indicate the center of the views position relative to the parent view
	 * @alias Titanium.UI.iOS.AdView.getCenter
	 * @return {Object}
	 */
	getCenter: function () { return center; },
	/**
	 * Set the a dictionary with properties x and y to indicate the center of the views position relative to the parent view
	 * @param {Object} value New value to set.
	 * @alias Titanium.UI.iOS.AdView.setCenter
	 */
	setCenter: function () { },
	/**
	 * Set true if you want a view to be focusable when navigating with the trackball or D-Pad. Default: false. (Android Only)
	 * @alias Titanium.UI.iOS.AdView.focusable
	 * @property {Boolean}
	 */
	focusable: false,
	/**
	 * Get the Set true if you want a view to be focusable when navigating with the trackball or D-Pad. Default: false. (Android Only)
	 * @alias Titanium.UI.iOS.AdView.getFocusable
	 * @return {Boolean}
	 */
	getFocusable: function () { return focusable; },
	/**
	 * Set the Set true if you want a view to be focusable when navigating with the trackball or D-Pad. Default: false. (Android Only)
	 * @param {Boolean} value New value to set.
	 * @alias Titanium.UI.iOS.AdView.setFocusable
	 */
	setFocusable: function () { },
	/**
	 * the font family
	 * @alias Titanium.UI.iOS.AdView.font-family
	 * @property {String}
	 */
	font-family: '',
	/**
	 * Get the the font family
	 * @alias Titanium.UI.iOS.AdView.getFont-family
	 * @return {String}
	 */
	getFont-family: function () { return font-family; },
	/**
	 * Set the the font family
	 * @param {String} value New value to set.
	 * @alias Titanium.UI.iOS.AdView.setFont-family
	 */
	setFont-family: function () { },
	/**
	 * the font size
	 * @alias Titanium.UI.iOS.AdView.font-size
	 * @property {String}
	 */
	font-size: '',
	/**
	 * Get the the font size
	 * @alias Titanium.UI.iOS.AdView.getFont-size
	 * @return {String}
	 */
	getFont-size: function () { return font-size; },
	/**
	 * Set the the font size
	 * @param {String} value New value to set.
	 * @alias Titanium.UI.iOS.AdView.setFont-size
	 */
	setFont-size: function () { },
	/**
	 * the font style, either normal or italics
	 * @alias Titanium.UI.iOS.AdView.font-style
	 * @property {String}
	 */
	font-style: '',
	/**
	 * Get the the font style, either normal or italics
	 * @alias Titanium.UI.iOS.AdView.getFont-style
	 * @return {String}
	 */
	getFont-style: function () { return font-style; },
	/**
	 * Set the the font style, either normal or italics
	 * @param {String} value New value to set.
	 * @alias Titanium.UI.iOS.AdView.setFont-style
	 */
	setFont-style: function () { },
	/**
	 * the font weight, either normal or bold
	 * @alias Titanium.UI.iOS.AdView.font-weight
	 * @property {String}
	 */
	font-weight: '',
	/**
	 * Get the the font weight, either normal or bold
	 * @alias Titanium.UI.iOS.AdView.getFont-weight
	 * @return {String}
	 */
	getFont-weight: function () { return font-weight; },
	/**
	 * Set the the font weight, either normal or bold
	 * @param {String} value New value to set.
	 * @alias Titanium.UI.iOS.AdView.setFont-weight
	 */
	setFont-weight: function () { },
	/**
	 * property for the view height. Can be either a float value or a dimension string ie 'auto' (default), '50%' (iPhone only).
	 * @alias Titanium.UI.iOS.AdView.height
	 * @property {Float,String}
	 */
	height: 0.0,
	/**
	 * Get the property for the view height. Can be either a float value or a dimension string ie 'auto' (default), '50%' (iPhone only).
	 * @alias Titanium.UI.iOS.AdView.getHeight
	 * @return {Float,String}
	 */
	getHeight: function () { return height; },
	/**
	 * Set the property for the view height. Can be either a float value or a dimension string ie 'auto' (default), '50%' (iPhone only).
	 * @param {Float,String} value New value to set.
	 * @alias Titanium.UI.iOS.AdView.setHeight
	 */
	setHeight: function () { },
	/**
	 * property for the view left position. This position is relative to the view's parent. Can be either a float value or a dimension string ie 'auto' (default), '50%' (iPhone only).
	 * @alias Titanium.UI.iOS.AdView.left
	 * @property {Float,String}
	 */
	left: 0.0,
	/**
	 * Get the property for the view left position. This position is relative to the view's parent. Can be either a float value or a dimension string ie 'auto' (default), '50%' (iPhone only).
	 * @alias Titanium.UI.iOS.AdView.getLeft
	 * @return {Float,String}
	 */
	getLeft: function () { return left; },
	/**
	 * Set the property for the view left position. This position is relative to the view's parent. Can be either a float value or a dimension string ie 'auto' (default), '50%' (iPhone only).
	 * @param {Float,String} value New value to set.
	 * @alias Titanium.UI.iOS.AdView.setLeft
	 */
	setLeft: function () { },
	/**
	 * the opacity from 0.0-1.0
	 * @alias Titanium.UI.iOS.AdView.opacity
	 * @property {Float}
	 */
	opacity: 0.0,
	/**
	 * Get the the opacity from 0.0-1.0
	 * @alias Titanium.UI.iOS.AdView.getOpacity
	 * @return {Float}
	 */
	getOpacity: function () { return opacity; },
	/**
	 * Set the the opacity from 0.0-1.0
	 * @param {Float} value New value to set.
	 * @alias Titanium.UI.iOS.AdView.setOpacity
	 */
	setOpacity: function () { },
	/**
	 * property for the view right position. This position is relative to the view's parent. Can be either a float value or a dimension string ie 'auto' (default), '50%' (iPhone only).
	 * @alias Titanium.UI.iOS.AdView.right
	 * @property {Float,String}
	 */
	right: 0.0,
	/**
	 * Get the property for the view right position. This position is relative to the view's parent. Can be either a float value or a dimension string ie 'auto' (default), '50%' (iPhone only).
	 * @alias Titanium.UI.iOS.AdView.getRight
	 * @return {Float,String}
	 */
	getRight: function () { return right; },
	/**
	 * Set the property for the view right position. This position is relative to the view's parent. Can be either a float value or a dimension string ie 'auto' (default), '50%' (iPhone only).
	 * @param {Float,String} value New value to set.
	 * @alias Titanium.UI.iOS.AdView.setRight
	 */
	setRight: function () { },
	/**
	 * the size of the view as a dictionary of width and height properties
	 * @alias Titanium.UI.iOS.AdView.size
	 * @property {Object}
	 */
	size: {},
	/**
	 * Get the the size of the view as a dictionary of width and height properties
	 * @alias Titanium.UI.iOS.AdView.getSize
	 * @return {Object}
	 */
	getSize: function () { return size; },
	/**
	 * Set the the size of the view as a dictionary of width and height properties
	 * @param {Object} value New value to set.
	 * @alias Titanium.UI.iOS.AdView.setSize
	 */
	setSize: function () { },
	/**
	 * One of Titanium.UI.Android.SOFT_KEYBOARD_DEFAULT_ON_FOCUS, Titanium.UI.Android.SOFT_KEYBOARD_HIDE_ON_FOCUS, or Titanium.UI.Android.SOFT_KEYBOARD_SHOW_ON_FOCUS. (Android only)
	 * @alias Titanium.UI.iOS.AdView.softKeyboardOnFocus
	 * @property {Integer}
	 */
	softKeyboardOnFocus: 0,
	/**
	 * Get the One of Titanium.UI.Android.SOFT_KEYBOARD_DEFAULT_ON_FOCUS, Titanium.UI.Android.SOFT_KEYBOARD_HIDE_ON_FOCUS, or Titanium.UI.Android.SOFT_KEYBOARD_SHOW_ON_FOCUS. (Android only)
	 * @alias Titanium.UI.iOS.AdView.getSoftKeyboardOnFocus
	 * @return {Integer}
	 */
	getSoftKeyboardOnFocus: function () { return softKeyboardOnFocus; },
	/**
	 * Set the One of Titanium.UI.Android.SOFT_KEYBOARD_DEFAULT_ON_FOCUS, Titanium.UI.Android.SOFT_KEYBOARD_HIDE_ON_FOCUS, or Titanium.UI.Android.SOFT_KEYBOARD_SHOW_ON_FOCUS. (Android only)
	 * @param {Integer} value New value to set.
	 * @alias Titanium.UI.iOS.AdView.setSoftKeyboardOnFocus
	 */
	setSoftKeyboardOnFocus: function () { },
	/**
	 * property for the view top position. This position is relative to the view's parent. Can be either a float value or a dimension string ie 'auto' (default), '50%' (iPhone only).
	 * @alias Titanium.UI.iOS.AdView.top
	 * @property {Float,String}
	 */
	top: 0.0,
	/**
	 * Get the property for the view top position. This position is relative to the view's parent. Can be either a float value or a dimension string ie 'auto' (default), '50%' (iPhone only).
	 * @alias Titanium.UI.iOS.AdView.getTop
	 * @return {Float,String}
	 */
	getTop: function () { return top; },
	/**
	 * Set the property for the view top position. This position is relative to the view's parent. Can be either a float value or a dimension string ie 'auto' (default), '50%' (iPhone only).
	 * @param {Float,String} value New value to set.
	 * @alias Titanium.UI.iOS.AdView.setTop
	 */
	setTop: function () { },
	/**
	 * a boolean indicating if the view should receive touch events (true, default) or forward them to peers (false)
	 * @alias Titanium.UI.iOS.AdView.touchEnabled
	 * @property {Boolean}
	 */
	touchEnabled: false,
	/**
	 * Get the a boolean indicating if the view should receive touch events (true, default) or forward them to peers (false)
	 * @alias Titanium.UI.iOS.AdView.getTouchEnabled
	 * @return {Boolean}
	 */
	getTouchEnabled: function () { return touchEnabled; },
	/**
	 * Set the a boolean indicating if the view should receive touch events (true, default) or forward them to peers (false)
	 * @param {Boolean} value New value to set.
	 * @alias Titanium.UI.iOS.AdView.setTouchEnabled
	 */
	setTouchEnabled: function () { },
	/**
	 * the transformation matrix to apply to the view
	 * @alias Titanium.UI.iOS.AdView.transform
	 * @property {Object}
	 */
	transform: {},
	/**
	 * Get the the transformation matrix to apply to the view
	 * @alias Titanium.UI.iOS.AdView.getTransform
	 * @return {Object}
	 */
	getTransform: function () { return transform; },
	/**
	 * Set the the transformation matrix to apply to the view
	 * @param {Object} value New value to set.
	 * @alias Titanium.UI.iOS.AdView.setTransform
	 */
	setTransform: function () { },
	/**
	 * a boolean of the visibility of the view
	 * @alias Titanium.UI.iOS.AdView.visible
	 * @property {Boolean}
	 */
	visible: false,
	/**
	 * Get the a boolean of the visibility of the view
	 * @alias Titanium.UI.iOS.AdView.getVisible
	 * @return {Boolean}
	 */
	getVisible: function () { return visible; },
	/**
	 * Set the a boolean of the visibility of the view
	 * @param {Boolean} value New value to set.
	 * @alias Titanium.UI.iOS.AdView.setVisible
	 */
	setVisible: function () { },
	/**
	 * property for the view width. Can be either a float value or a dimension string ie 'auto' (default), '50%' (iPhone only).
	 * @alias Titanium.UI.iOS.AdView.width
	 * @property {Float,String}
	 */
	width: 0.0,
	/**
	 * Get the property for the view width. Can be either a float value or a dimension string ie 'auto' (default), '50%' (iPhone only).
	 * @alias Titanium.UI.iOS.AdView.getWidth
	 * @return {Float,String}
	 */
	getWidth: function () { return width; },
	/**
	 * Set the property for the view width. Can be either a float value or a dimension string ie 'auto' (default), '50%' (iPhone only).
	 * @param {Float,String} value New value to set.
	 * @alias Titanium.UI.iOS.AdView.setWidth
	 */
	setWidth: function () { },
	/**
	 * the z index position relative to other sibling views
	 * @alias Titanium.UI.iOS.AdView.zIndex
	 * @property {Integer}
	 */
	zIndex: 0,
	/**
	 * Get the the z index position relative to other sibling views
	 * @alias Titanium.UI.iOS.AdView.getZIndex
	 * @return {Integer}
	 */
	getZIndex: function () { return zIndex; },
	/**
	 * Set the the z index position relative to other sibling views
	 * @param {Integer} value New value to set.
	 * @alias Titanium.UI.iOS.AdView.setZIndex
	 */
	setZIndex: function () { },
	/**
	 * add a child to the view hierarchy
	 * @param {Object} view the view to add to this views hiearchy
	 * @alias Titanium.UI.iOS.AdView.add
	 */
	add: function (view) { },
	/**
	 * add an event listener for the instance to receive view triggered events
	 * @param {String} name name of the event
	 * @param {Function} callback callback function to invoke when the event is fired
	 * @alias Titanium.UI.iOS.AdView.addEventListener
	 */
	addEventListener: function (name,callback) { },
	/**
	 * animate the view
	 * @param {Object} obj either a dictionary of animation properties or an Animation object
	 * @param {Function} callback function to be invoked upon completion of the animation
	 * @alias Titanium.UI.iOS.AdView.animate
	 */
	animate: function (obj,callback) { },
	/**
	 * A banner view action can cover your application's user interface. However, your application continues to run, and receives events normally. If your application receives an event that requires the user's attention, it can programmatically cancel the action and uncover its interface by calling cancelAction. Canceling actions frequently can cause a loss of revenue for your application.
	 * @alias Titanium.UI.iOS.AdView.cancelAction
	 */
	cancelAction: function () { },
	/**
	 * fire a synthesized event to the views listener
	 * @param {String} name name of the event
	 * @param {Object} event event object
	 * @alias Titanium.UI.iOS.AdView.fireEvent
	 */
	fireEvent: function (name,event) { },
	/**
	 * hide the view
	 * @alias Titanium.UI.iOS.AdView.hide
	 */
	hide: function () { },
	/**
	 * remove a previously add view from the view hiearchy
	 * @param {Object} view the view to remove from this views hiearchy
	 * @alias Titanium.UI.iOS.AdView.remove
	 */
	remove: function (view) { },
	/**
	 * remove a previously added event listener
	 * @param {String} name name of the event
	 * @param {Function} callback callback function passed in addEventListener
	 * @alias Titanium.UI.iOS.AdView.removeEventListener
	 */
	removeEventListener: function (name,callback) { },
	/**
	 * make the view visible
	 * @alias Titanium.UI.iOS.AdView.show
	 */
	show: function () { },
	/**
	 * return a Blob image of the rendered view
	 * @param {Function} f function to be invoked upon completion. if non-null, this method will be performed asynchronously. if null, it will be performed immediately
	 * @alias Titanium.UI.iOS.AdView.toImage
	 * @return {Object}
	 */
	toImage: function (f) { return {}; },
};

/**
 * The iPad specific UI capabilities.  All properties, methods and events in this namespace will only work on the Apple iPad related devices.  To develop for iPad, you will need the Apple iPhone SDK 3.2 or later and Titanium Mobile SDK 1.2 or later. 
For iPad UI programming guidelines, please review the iPad Human Interface Guidelines.
 * @since 1.2
 */
Titanium.UI.iPad = {
	/**
	 * An arrow that points in any direction.
	 * @alias Titanium.UI.iPad.POPOVER_ARROW_DIRECTION_ANY
	 * @property {Integer}
	 */
	POPOVER_ARROW_DIRECTION_ANY: 0,
	/**
	 * An arrow that points downward.
	 * @alias Titanium.UI.iPad.POPOVER_ARROW_DIRECTION_DOWN
	 * @property {Integer}
	 */
	POPOVER_ARROW_DIRECTION_DOWN: 0,
	/**
	 * An arrow that points toward the left.
	 * @alias Titanium.UI.iPad.POPOVER_ARROW_DIRECTION_LEFT
	 * @property {Integer}
	 */
	POPOVER_ARROW_DIRECTION_LEFT: 0,
	/**
	 * An arrow that points toward the right.
	 * @alias Titanium.UI.iPad.POPOVER_ARROW_DIRECTION_RIGHT
	 * @property {Integer}
	 */
	POPOVER_ARROW_DIRECTION_RIGHT: 0,
	/**
	 * The status of the arrow is currently unknown.
	 * @alias Titanium.UI.iPad.POPOVER_ARROW_DIRECTION_UNKNOWN
	 * @property {Integer}
	 */
	POPOVER_ARROW_DIRECTION_UNKNOWN: 0,
	/**
	 * An arrow that points upward.
	 * @alias Titanium.UI.iPad.POPOVER_ARROW_DIRECTION_UP
	 * @property {Integer}
	 */
	POPOVER_ARROW_DIRECTION_UP: 0,
	/**
	 * add an event listener for the instance to receive view triggered events
	 * @param {String} name name of the event
	 * @param {Function} callback callback function to invoke when the event is fired
	 * @alias Titanium.UI.iPad.addEventListener
	 */
	addEventListener: function (name,callback) { },
	/**
	 * create and return an instance of Titanium.UI.iPad.Popover
	 * @param {Object} [parameters] (optional) a dictionary object properties defined in <a href="Titanium.UI.iPad.Popover.html">Titanium.UI.iPad.Popover</a>
	 * @alias Titanium.UI.iPad.createPopover
	 * @return {Titanium_UI_iPad_Popover}
	 */
	createPopover: function (parameters) { return new Titanium_UI_iPad_Popover(); },
	/**
	 * create and return an instance of Titanium.UI.iPad.SplitWindow
	 * @param {Object} [parameters] (optional) a dictionary object properties defined in <a href="Titanium.UI.iPad.SplitWindow.html">Titanium.UI.iPad.SplitWindow</a>
	 * @alias Titanium.UI.iPad.createSplitWindow
	 * @return {Titanium_UI_iPad_SplitWindow}
	 */
	createSplitWindow: function (parameters) { return new Titanium_UI_iPad_SplitWindow(); },
	/**
	 * fire a synthesized event to the views listener
	 * @param {String} name name of the event
	 * @param {Object} event event object
	 * @alias Titanium.UI.iPad.fireEvent
	 */
	fireEvent: function (name,event) { },
	/**
	 * remove a previously added event listener
	 * @param {String} name name of the event
	 * @param {Function} callback callback function passed in addEventListener
	 * @alias Titanium.UI.iPad.removeEventListener
	 */
	removeEventListener: function (name,callback) { },
};

/**
 * A Popover is used to manage the presentation of content in a popover. You use popovers to present information temporarily but in a way that does not take over the entire screen like a modal view does. The popover content is layered on top of your existing content in a special type of window. The popover remains visible until the user taps outside of the popover window or you explicitly dismiss it. The Popover is created by the method Titanium.UI.iPad.createPopover.
 * @since 1.2
 */
Titanium.UI.iPad.Popover = {
	/**
	 * a dictionary with properties x and y to indicate the anchor point value. anchor specifies the position by which animation should occur. center is 0.5, 0.5
	 * @alias Titanium.UI.iPad.Popover.anchorPoint
	 * @property {Object}
	 */
	anchorPoint: {},
	/**
	 * Get the a dictionary with properties x and y to indicate the anchor point value. anchor specifies the position by which animation should occur. center is 0.5, 0.5
	 * @alias Titanium.UI.iPad.Popover.getAnchorPoint
	 * @return {Object}
	 */
	getAnchorPoint: function () { return anchorPoint; },
	/**
	 * Set the a dictionary with properties x and y to indicate the anchor point value. anchor specifies the position by which animation should occur. center is 0.5, 0.5
	 * @param {Object} value New value to set.
	 * @alias Titanium.UI.iPad.Popover.setAnchorPoint
	 */
	setAnchorPoint: function () { },
	/**
	 * read-only object with x and y properties of where the view is during animation
	 * @alias Titanium.UI.iPad.Popover.animatedCenterPoint
	 * @property {Object}
	 */
	animatedCenterPoint: {},
	/**
	 * Get the read-only object with x and y properties of where the view is during animation
	 * @alias Titanium.UI.iPad.Popover.getAnimatedCenterPoint
	 * @return {Object}
	 */
	getAnimatedCenterPoint: function () { return animatedCenterPoint; },
	/**
	 * Set the read-only object with x and y properties of where the view is during animation
	 * @param {Object} value New value to set.
	 * @alias Titanium.UI.iPad.Popover.setAnimatedCenterPoint
	 */
	setAnimatedCenterPoint: function () { },
	/**
	 * return the arrow direction of the popover
	 * @alias Titanium.UI.iPad.Popover.arrowDirection
	 * @property {Integer}
	 */
	arrowDirection: 0,
	/**
	 * Get the return the arrow direction of the popover
	 * @alias Titanium.UI.iPad.Popover.getArrowDirection
	 * @return {Integer}
	 */
	getArrowDirection: function () { return arrowDirection; },
	/**
	 * Set the return the arrow direction of the popover
	 * @param {Integer} value New value to set.
	 * @alias Titanium.UI.iPad.Popover.setArrowDirection
	 */
	setArrowDirection: function () { },
	/**
	 * the background color of the view
	 * @alias Titanium.UI.iPad.Popover.backgroundColor
	 * @property {String}
	 */
	backgroundColor: '',
	/**
	 * Get the the background color of the view
	 * @alias Titanium.UI.iPad.Popover.getBackgroundColor
	 * @return {String}
	 */
	getBackgroundColor: function () { return backgroundColor; },
	/**
	 * Set the the background color of the view
	 * @param {String} value New value to set.
	 * @alias Titanium.UI.iPad.Popover.setBackgroundColor
	 */
	setBackgroundColor: function () { },
	/**
	 * the disabled background color of the view. (Android)
	 * @alias Titanium.UI.iPad.Popover.backgroundDisabledColor
	 * @property {String}
	 */
	backgroundDisabledColor: '',
	/**
	 * Get the the disabled background color of the view. (Android)
	 * @alias Titanium.UI.iPad.Popover.getBackgroundDisabledColor
	 * @return {String}
	 */
	getBackgroundDisabledColor: function () { return backgroundDisabledColor; },
	/**
	 * Set the the disabled background color of the view. (Android)
	 * @param {String} value New value to set.
	 * @alias Titanium.UI.iPad.Popover.setBackgroundDisabledColor
	 */
	setBackgroundDisabledColor: function () { },
	/**
	 * the disabled background image url of the view. (Android)
	 * @alias Titanium.UI.iPad.Popover.backgroundDisabledImage
	 * @property {String}
	 */
	backgroundDisabledImage: '',
	/**
	 * Get the the disabled background image url of the view. (Android)
	 * @alias Titanium.UI.iPad.Popover.getBackgroundDisabledImage
	 * @return {String}
	 */
	getBackgroundDisabledImage: function () { return backgroundDisabledImage; },
	/**
	 * Set the the disabled background image url of the view. (Android)
	 * @param {String} value New value to set.
	 * @alias Titanium.UI.iPad.Popover.setBackgroundDisabledImage
	 */
	setBackgroundDisabledImage: function () { },
	/**
	 * the focused background color of the view. focusable must be true for normal views. (Android)
	 * @alias Titanium.UI.iPad.Popover.backgroundFocusedColor
	 * @property {String}
	 */
	backgroundFocusedColor: '',
	/**
	 * Get the the focused background color of the view. focusable must be true for normal views. (Android)
	 * @alias Titanium.UI.iPad.Popover.getBackgroundFocusedColor
	 * @return {String}
	 */
	getBackgroundFocusedColor: function () { return backgroundFocusedColor; },
	/**
	 * Set the the focused background color of the view. focusable must be true for normal views. (Android)
	 * @param {String} value New value to set.
	 * @alias Titanium.UI.iPad.Popover.setBackgroundFocusedColor
	 */
	setBackgroundFocusedColor: function () { },
	/**
	 * the focused background image url of the view. focusable must be true for normal views. (Android)
	 * @alias Titanium.UI.iPad.Popover.backgroundFocusedImage
	 * @property {String}
	 */
	backgroundFocusedImage: '',
	/**
	 * Get the the focused background image url of the view. focusable must be true for normal views. (Android)
	 * @alias Titanium.UI.iPad.Popover.getBackgroundFocusedImage
	 * @return {String}
	 */
	getBackgroundFocusedImage: function () { return backgroundFocusedImage; },
	/**
	 * Set the the focused background image url of the view. focusable must be true for normal views. (Android)
	 * @param {String} value New value to set.
	 * @alias Titanium.UI.iPad.Popover.setBackgroundFocusedImage
	 */
	setBackgroundFocusedImage: function () { },
	/**
	 * a background gradient for the view with the properties: type,startPoint,endPoint,startRadius,endRadius,backfillStart,backfillEnd,colors.
	 * @alias Titanium.UI.iPad.Popover.backgroundGradient
	 * @property {Object}
	 */
	backgroundGradient: {},
	/**
	 * Get the a background gradient for the view with the properties: type,startPoint,endPoint,startRadius,endRadius,backfillStart,backfillEnd,colors.
	 * @alias Titanium.UI.iPad.Popover.getBackgroundGradient
	 * @return {Object}
	 */
	getBackgroundGradient: function () { return backgroundGradient; },
	/**
	 * Set the a background gradient for the view with the properties: type,startPoint,endPoint,startRadius,endRadius,backfillStart,backfillEnd,colors.
	 * @param {Object} value New value to set.
	 * @alias Titanium.UI.iPad.Popover.setBackgroundGradient
	 */
	setBackgroundGradient: function () { },
	/**
	 * the background image url of the view
	 * @alias Titanium.UI.iPad.Popover.backgroundImage
	 * @property {String}
	 */
	backgroundImage: '',
	/**
	 * Get the the background image url of the view
	 * @alias Titanium.UI.iPad.Popover.getBackgroundImage
	 * @return {String}
	 */
	getBackgroundImage: function () { return backgroundImage; },
	/**
	 * Set the the background image url of the view
	 * @param {String} value New value to set.
	 * @alias Titanium.UI.iPad.Popover.setBackgroundImage
	 */
	setBackgroundImage: function () { },
	/**
	 * End caps specify the portion of an image that should not be resized when an image is stretched. This technique is used to implement buttons and other resizable image-based interface elements. When a button with end caps is resized, the resizing occurs only in the middle of the button, in the region between the end caps. The end caps themselves keep their original size and appearance. This property specifies the size of the left end cap. The middle (stretchable) portion is assumed to be 1 pixel wide. The right end cap is therefore computed by adding the size of the left end cap and the middle portion together and then subtracting that value from the width of the image
	 * @alias Titanium.UI.iPad.Popover.backgroundLeftCap
	 * @property {Float}
	 */
	backgroundLeftCap: 0.0,
	/**
	 * Get the End caps specify the portion of an image that should not be resized when an image is stretched. This technique is used to implement buttons and other resizable image-based interface elements. When a button with end caps is resized, the resizing occurs only in the middle of the button, in the region between the end caps. The end caps themselves keep their original size and appearance. This property specifies the size of the left end cap. The middle (stretchable) portion is assumed to be 1 pixel wide. The right end cap is therefore computed by adding the size of the left end cap and the middle portion together and then subtracting that value from the width of the image
	 * @alias Titanium.UI.iPad.Popover.getBackgroundLeftCap
	 * @return {Float}
	 */
	getBackgroundLeftCap: function () { return backgroundLeftCap; },
	/**
	 * Set the End caps specify the portion of an image that should not be resized when an image is stretched. This technique is used to implement buttons and other resizable image-based interface elements. When a button with end caps is resized, the resizing occurs only in the middle of the button, in the region between the end caps. The end caps themselves keep their original size and appearance. This property specifies the size of the left end cap. The middle (stretchable) portion is assumed to be 1 pixel wide. The right end cap is therefore computed by adding the size of the left end cap and the middle portion together and then subtracting that value from the width of the image
	 * @param {Float} value New value to set.
	 * @alias Titanium.UI.iPad.Popover.setBackgroundLeftCap
	 */
	setBackgroundLeftCap: function () { },
	/**
	 * the selected background color of the view. focusable must be true for normal views. (Android)
	 * @alias Titanium.UI.iPad.Popover.backgroundSelectedColor
	 * @property {String}
	 */
	backgroundSelectedColor: '',
	/**
	 * Get the the selected background color of the view. focusable must be true for normal views. (Android)
	 * @alias Titanium.UI.iPad.Popover.getBackgroundSelectedColor
	 * @return {String}
	 */
	getBackgroundSelectedColor: function () { return backgroundSelectedColor; },
	/**
	 * Set the the selected background color of the view. focusable must be true for normal views. (Android)
	 * @param {String} value New value to set.
	 * @alias Titanium.UI.iPad.Popover.setBackgroundSelectedColor
	 */
	setBackgroundSelectedColor: function () { },
	/**
	 * the selected background image url of the view. focusable must be true for normal views. (Android)
	 * @alias Titanium.UI.iPad.Popover.backgroundSelectedImage
	 * @property {String}
	 */
	backgroundSelectedImage: '',
	/**
	 * Get the the selected background image url of the view. focusable must be true for normal views. (Android)
	 * @alias Titanium.UI.iPad.Popover.getBackgroundSelectedImage
	 * @return {String}
	 */
	getBackgroundSelectedImage: function () { return backgroundSelectedImage; },
	/**
	 * Set the the selected background image url of the view. focusable must be true for normal views. (Android)
	 * @param {String} value New value to set.
	 * @alias Titanium.UI.iPad.Popover.setBackgroundSelectedImage
	 */
	setBackgroundSelectedImage: function () { },
	/**
	 * End caps specify the portion of an image that should not be resized when an image is stretched. This technique is used to implement buttons and other resizable image-based interface elements. When a button with end caps is resized, the resizing occurs only in the middle of the button, in the region between the end caps. The end caps themselves keep their original size and appearance. This property specifies the size of the top end cap. The middle (stretchable) portion is assumed to be 1 pixel wide. The bottom end cap is therefore computed by adding the size of the top end cap and the middle portion together and then subtracting that value from the height of the image
	 * @alias Titanium.UI.iPad.Popover.backgroundTopCap
	 * @property {Float}
	 */
	backgroundTopCap: 0.0,
	/**
	 * Get the End caps specify the portion of an image that should not be resized when an image is stretched. This technique is used to implement buttons and other resizable image-based interface elements. When a button with end caps is resized, the resizing occurs only in the middle of the button, in the region between the end caps. The end caps themselves keep their original size and appearance. This property specifies the size of the top end cap. The middle (stretchable) portion is assumed to be 1 pixel wide. The bottom end cap is therefore computed by adding the size of the top end cap and the middle portion together and then subtracting that value from the height of the image
	 * @alias Titanium.UI.iPad.Popover.getBackgroundTopCap
	 * @return {Float}
	 */
	getBackgroundTopCap: function () { return backgroundTopCap; },
	/**
	 * Set the End caps specify the portion of an image that should not be resized when an image is stretched. This technique is used to implement buttons and other resizable image-based interface elements. When a button with end caps is resized, the resizing occurs only in the middle of the button, in the region between the end caps. The end caps themselves keep their original size and appearance. This property specifies the size of the top end cap. The middle (stretchable) portion is assumed to be 1 pixel wide. The bottom end cap is therefore computed by adding the size of the top end cap and the middle portion together and then subtracting that value from the height of the image
	 * @param {Float} value New value to set.
	 * @alias Titanium.UI.iPad.Popover.setBackgroundTopCap
	 */
	setBackgroundTopCap: function () { },
	/**
	 * the border color of the view
	 * @alias Titanium.UI.iPad.Popover.borderColor
	 * @property {String}
	 */
	borderColor: '',
	/**
	 * Get the the border color of the view
	 * @alias Titanium.UI.iPad.Popover.getBorderColor
	 * @return {String}
	 */
	getBorderColor: function () { return borderColor; },
	/**
	 * Set the the border color of the view
	 * @param {String} value New value to set.
	 * @alias Titanium.UI.iPad.Popover.setBorderColor
	 */
	setBorderColor: function () { },
	/**
	 * the border radius of the view
	 * @alias Titanium.UI.iPad.Popover.borderRadius
	 * @property {Float}
	 */
	borderRadius: 0.0,
	/**
	 * Get the the border radius of the view
	 * @alias Titanium.UI.iPad.Popover.getBorderRadius
	 * @return {Float}
	 */
	getBorderRadius: function () { return borderRadius; },
	/**
	 * Set the the border radius of the view
	 * @param {Float} value New value to set.
	 * @alias Titanium.UI.iPad.Popover.setBorderRadius
	 */
	setBorderRadius: function () { },
	/**
	 * the border width of the view
	 * @alias Titanium.UI.iPad.Popover.borderWidth
	 * @property {Float}
	 */
	borderWidth: 0.0,
	/**
	 * Get the the border width of the view
	 * @alias Titanium.UI.iPad.Popover.getBorderWidth
	 * @return {Float}
	 */
	getBorderWidth: function () { return borderWidth; },
	/**
	 * Set the the border width of the view
	 * @param {Float} value New value to set.
	 * @alias Titanium.UI.iPad.Popover.setBorderWidth
	 */
	setBorderWidth: function () { },
	/**
	 * property for the view bottom position. This position is relative to the view's parent. Can be either a float value or a dimension string ie 'auto' (default), '50%' (iPhone only).
	 * @alias Titanium.UI.iPad.Popover.bottom
	 * @property {Float,String}
	 */
	bottom: 0.0,
	/**
	 * Get the property for the view bottom position. This position is relative to the view's parent. Can be either a float value or a dimension string ie 'auto' (default), '50%' (iPhone only).
	 * @alias Titanium.UI.iPad.Popover.getBottom
	 * @return {Float,String}
	 */
	getBottom: function () { return bottom; },
	/**
	 * Set the property for the view bottom position. This position is relative to the view's parent. Can be either a float value or a dimension string ie 'auto' (default), '50%' (iPhone only).
	 * @param {Float,String} value New value to set.
	 * @alias Titanium.UI.iPad.Popover.setBottom
	 */
	setBottom: function () { },
	/**
	 * a dictionary with properties x and y to indicate the center of the views position relative to the parent view
	 * @alias Titanium.UI.iPad.Popover.center
	 * @property {Object}
	 */
	center: {},
	/**
	 * Get the a dictionary with properties x and y to indicate the center of the views position relative to the parent view
	 * @alias Titanium.UI.iPad.Popover.getCenter
	 * @return {Object}
	 */
	getCenter: function () { return center; },
	/**
	 * Set the a dictionary with properties x and y to indicate the center of the views position relative to the parent view
	 * @param {Object} value New value to set.
	 * @alias Titanium.UI.iPad.Popover.setCenter
	 */
	setCenter: function () { },
	/**
	 * Set true if you want a view to be focusable when navigating with the trackball or D-Pad. Default: false. (Android Only)
	 * @alias Titanium.UI.iPad.Popover.focusable
	 * @property {Boolean}
	 */
	focusable: false,
	/**
	 * Get the Set true if you want a view to be focusable when navigating with the trackball or D-Pad. Default: false. (Android Only)
	 * @alias Titanium.UI.iPad.Popover.getFocusable
	 * @return {Boolean}
	 */
	getFocusable: function () { return focusable; },
	/**
	 * Set the Set true if you want a view to be focusable when navigating with the trackball or D-Pad. Default: false. (Android Only)
	 * @param {Boolean} value New value to set.
	 * @alias Titanium.UI.iPad.Popover.setFocusable
	 */
	setFocusable: function () { },
	/**
	 * the font family
	 * @alias Titanium.UI.iPad.Popover.font-family
	 * @property {String}
	 */
	font-family: '',
	/**
	 * Get the the font family
	 * @alias Titanium.UI.iPad.Popover.getFont-family
	 * @return {String}
	 */
	getFont-family: function () { return font-family; },
	/**
	 * Set the the font family
	 * @param {String} value New value to set.
	 * @alias Titanium.UI.iPad.Popover.setFont-family
	 */
	setFont-family: function () { },
	/**
	 * the font size
	 * @alias Titanium.UI.iPad.Popover.font-size
	 * @property {String}
	 */
	font-size: '',
	/**
	 * Get the the font size
	 * @alias Titanium.UI.iPad.Popover.getFont-size
	 * @return {String}
	 */
	getFont-size: function () { return font-size; },
	/**
	 * Set the the font size
	 * @param {String} value New value to set.
	 * @alias Titanium.UI.iPad.Popover.setFont-size
	 */
	setFont-size: function () { },
	/**
	 * the font style, either normal or italics
	 * @alias Titanium.UI.iPad.Popover.font-style
	 * @property {String}
	 */
	font-style: '',
	/**
	 * Get the the font style, either normal or italics
	 * @alias Titanium.UI.iPad.Popover.getFont-style
	 * @return {String}
	 */
	getFont-style: function () { return font-style; },
	/**
	 * Set the the font style, either normal or italics
	 * @param {String} value New value to set.
	 * @alias Titanium.UI.iPad.Popover.setFont-style
	 */
	setFont-style: function () { },
	/**
	 * the font weight, either normal or bold
	 * @alias Titanium.UI.iPad.Popover.font-weight
	 * @property {String}
	 */
	font-weight: '',
	/**
	 * Get the the font weight, either normal or bold
	 * @alias Titanium.UI.iPad.Popover.getFont-weight
	 * @return {String}
	 */
	getFont-weight: function () { return font-weight; },
	/**
	 * Set the the font weight, either normal or bold
	 * @param {String} value New value to set.
	 * @alias Titanium.UI.iPad.Popover.setFont-weight
	 */
	setFont-weight: function () { },
	/**
	 * height of the popover
	 * @alias Titanium.UI.iPad.Popover.height
	 * @property {Float}
	 */
	height: 0.0,
	/**
	 * Get the height of the popover
	 * @alias Titanium.UI.iPad.Popover.getHeight
	 * @return {Float}
	 */
	getHeight: function () { return height; },
	/**
	 * Set the height of the popover
	 * @param {Float} value New value to set.
	 * @alias Titanium.UI.iPad.Popover.setHeight
	 */
	setHeight: function () { },
	/**
	 * property for the view left position. This position is relative to the view's parent. Can be either a float value or a dimension string ie 'auto' (default), '50%' (iPhone only).
	 * @alias Titanium.UI.iPad.Popover.left
	 * @property {Float,String}
	 */
	left: 0.0,
	/**
	 * Get the property for the view left position. This position is relative to the view's parent. Can be either a float value or a dimension string ie 'auto' (default), '50%' (iPhone only).
	 * @alias Titanium.UI.iPad.Popover.getLeft
	 * @return {Float,String}
	 */
	getLeft: function () { return left; },
	/**
	 * Set the property for the view left position. This position is relative to the view's parent. Can be either a float value or a dimension string ie 'auto' (default), '50%' (iPhone only).
	 * @param {Float,String} value New value to set.
	 * @alias Titanium.UI.iPad.Popover.setLeft
	 */
	setLeft: function () { },
	/**
	 * the left button in the nav area of the popover
	 * @alias Titanium.UI.iPad.Popover.leftNavButton
	 * @property {Object}
	 */
	leftNavButton: {},
	/**
	 * Get the the left button in the nav area of the popover
	 * @alias Titanium.UI.iPad.Popover.getLeftNavButton
	 * @return {Object}
	 */
	getLeftNavButton: function () { return leftNavButton; },
	/**
	 * Set the the left button in the nav area of the popover
	 * @param {Object} value New value to set.
	 * @alias Titanium.UI.iPad.Popover.setLeftNavButton
	 */
	setLeftNavButton: function () { },
	/**
	 * the opacity from 0.0-1.0
	 * @alias Titanium.UI.iPad.Popover.opacity
	 * @property {Float}
	 */
	opacity: 0.0,
	/**
	 * Get the the opacity from 0.0-1.0
	 * @alias Titanium.UI.iPad.Popover.getOpacity
	 * @return {Float}
	 */
	getOpacity: function () { return opacity; },
	/**
	 * Set the the opacity from 0.0-1.0
	 * @param {Float} value New value to set.
	 * @alias Titanium.UI.iPad.Popover.setOpacity
	 */
	setOpacity: function () { },
	/**
	 * property for the view right position. This position is relative to the view's parent. Can be either a float value or a dimension string ie 'auto' (default), '50%' (iPhone only).
	 * @alias Titanium.UI.iPad.Popover.right
	 * @property {Float,String}
	 */
	right: 0.0,
	/**
	 * Get the property for the view right position. This position is relative to the view's parent. Can be either a float value or a dimension string ie 'auto' (default), '50%' (iPhone only).
	 * @alias Titanium.UI.iPad.Popover.getRight
	 * @return {Float,String}
	 */
	getRight: function () { return right; },
	/**
	 * Set the property for the view right position. This position is relative to the view's parent. Can be either a float value or a dimension string ie 'auto' (default), '50%' (iPhone only).
	 * @param {Float,String} value New value to set.
	 * @alias Titanium.UI.iPad.Popover.setRight
	 */
	setRight: function () { },
	/**
	 * the size of the view as a dictionary of width and height properties
	 * @alias Titanium.UI.iPad.Popover.size
	 * @property {Object}
	 */
	size: {},
	/**
	 * Get the the size of the view as a dictionary of width and height properties
	 * @alias Titanium.UI.iPad.Popover.getSize
	 * @return {Object}
	 */
	getSize: function () { return size; },
	/**
	 * Set the the size of the view as a dictionary of width and height properties
	 * @param {Object} value New value to set.
	 * @alias Titanium.UI.iPad.Popover.setSize
	 */
	setSize: function () { },
	/**
	 * One of Titanium.UI.Android.SOFT_KEYBOARD_DEFAULT_ON_FOCUS, Titanium.UI.Android.SOFT_KEYBOARD_HIDE_ON_FOCUS, or Titanium.UI.Android.SOFT_KEYBOARD_SHOW_ON_FOCUS. (Android only)
	 * @alias Titanium.UI.iPad.Popover.softKeyboardOnFocus
	 * @property {Integer}
	 */
	softKeyboardOnFocus: 0,
	/**
	 * Get the One of Titanium.UI.Android.SOFT_KEYBOARD_DEFAULT_ON_FOCUS, Titanium.UI.Android.SOFT_KEYBOARD_HIDE_ON_FOCUS, or Titanium.UI.Android.SOFT_KEYBOARD_SHOW_ON_FOCUS. (Android only)
	 * @alias Titanium.UI.iPad.Popover.getSoftKeyboardOnFocus
	 * @return {Integer}
	 */
	getSoftKeyboardOnFocus: function () { return softKeyboardOnFocus; },
	/**
	 * Set the One of Titanium.UI.Android.SOFT_KEYBOARD_DEFAULT_ON_FOCUS, Titanium.UI.Android.SOFT_KEYBOARD_HIDE_ON_FOCUS, or Titanium.UI.Android.SOFT_KEYBOARD_SHOW_ON_FOCUS. (Android only)
	 * @param {Integer} value New value to set.
	 * @alias Titanium.UI.iPad.Popover.setSoftKeyboardOnFocus
	 */
	setSoftKeyboardOnFocus: function () { },
	/**
	 * the title of the nav area of the popover
	 * @alias Titanium.UI.iPad.Popover.title
	 * @property {String}
	 */
	title: '',
	/**
	 * Get the the title of the nav area of the popover
	 * @alias Titanium.UI.iPad.Popover.getTitle
	 * @return {String}
	 */
	getTitle: function () { return title; },
	/**
	 * Set the the title of the nav area of the popover
	 * @param {String} value New value to set.
	 * @alias Titanium.UI.iPad.Popover.setTitle
	 */
	setTitle: function () { },
	/**
	 * property for the view top position. This position is relative to the view's parent. Can be either a float value or a dimension string ie 'auto' (default), '50%' (iPhone only).
	 * @alias Titanium.UI.iPad.Popover.top
	 * @property {Float,String}
	 */
	top: 0.0,
	/**
	 * Get the property for the view top position. This position is relative to the view's parent. Can be either a float value or a dimension string ie 'auto' (default), '50%' (iPhone only).
	 * @alias Titanium.UI.iPad.Popover.getTop
	 * @return {Float,String}
	 */
	getTop: function () { return top; },
	/**
	 * Set the property for the view top position. This position is relative to the view's parent. Can be either a float value or a dimension string ie 'auto' (default), '50%' (iPhone only).
	 * @param {Float,String} value New value to set.
	 * @alias Titanium.UI.iPad.Popover.setTop
	 */
	setTop: function () { },
	/**
	 * a boolean indicating if the view should receive touch events (true, default) or forward them to peers (false)
	 * @alias Titanium.UI.iPad.Popover.touchEnabled
	 * @property {Boolean}
	 */
	touchEnabled: false,
	/**
	 * Get the a boolean indicating if the view should receive touch events (true, default) or forward them to peers (false)
	 * @alias Titanium.UI.iPad.Popover.getTouchEnabled
	 * @return {Boolean}
	 */
	getTouchEnabled: function () { return touchEnabled; },
	/**
	 * Set the a boolean indicating if the view should receive touch events (true, default) or forward them to peers (false)
	 * @param {Boolean} value New value to set.
	 * @alias Titanium.UI.iPad.Popover.setTouchEnabled
	 */
	setTouchEnabled: function () { },
	/**
	 * the transformation matrix to apply to the view
	 * @alias Titanium.UI.iPad.Popover.transform
	 * @property {Object}
	 */
	transform: {},
	/**
	 * Get the the transformation matrix to apply to the view
	 * @alias Titanium.UI.iPad.Popover.getTransform
	 * @return {Object}
	 */
	getTransform: function () { return transform; },
	/**
	 * Set the the transformation matrix to apply to the view
	 * @param {Object} value New value to set.
	 * @alias Titanium.UI.iPad.Popover.setTransform
	 */
	setTransform: function () { },
	/**
	 * boolean to indicate if the popover is visible
	 * @alias Titanium.UI.iPad.Popover.visible
	 * @property {Boolean}
	 */
	visible: false,
	/**
	 * Get the boolean to indicate if the popover is visible
	 * @alias Titanium.UI.iPad.Popover.getVisible
	 * @return {Boolean}
	 */
	getVisible: function () { return visible; },
	/**
	 * Set the boolean to indicate if the popover is visible
	 * @param {Boolean} value New value to set.
	 * @alias Titanium.UI.iPad.Popover.setVisible
	 */
	setVisible: function () { },
	/**
	 * width of the popover
	 * @alias Titanium.UI.iPad.Popover.width
	 * @property {Float}
	 */
	width: 0.0,
	/**
	 * Get the width of the popover
	 * @alias Titanium.UI.iPad.Popover.getWidth
	 * @return {Float}
	 */
	getWidth: function () { return width; },
	/**
	 * Set the width of the popover
	 * @param {Float} value New value to set.
	 * @alias Titanium.UI.iPad.Popover.setWidth
	 */
	setWidth: function () { },
	/**
	 * the z index position relative to other sibling views
	 * @alias Titanium.UI.iPad.Popover.zIndex
	 * @property {Integer}
	 */
	zIndex: 0,
	/**
	 * Get the the z index position relative to other sibling views
	 * @alias Titanium.UI.iPad.Popover.getZIndex
	 * @return {Integer}
	 */
	getZIndex: function () { return zIndex; },
	/**
	 * Set the the z index position relative to other sibling views
	 * @param {Integer} value New value to set.
	 * @alias Titanium.UI.iPad.Popover.setZIndex
	 */
	setZIndex: function () { },
	/**
	 * add a child to the view hierarchy
	 * @param {Object} view the view to add to this views hiearchy
	 * @alias Titanium.UI.iPad.Popover.add
	 */
	add: function (view) { },
	/**
	 * add an event listener for the instance to receive view triggered events
	 * @param {String} name name of the event
	 * @param {Function} callback callback function to invoke when the event is fired
	 * @alias Titanium.UI.iPad.Popover.addEventListener
	 */
	addEventListener: function (name,callback) { },
	/**
	 * animate the view
	 * @param {Object} obj either a dictionary of animation properties or an Animation object
	 * @param {Function} callback function to be invoked upon completion of the animation
	 * @alias Titanium.UI.iPad.Popover.animate
	 */
	animate: function (obj,callback) { },
	/**
	 * fire a synthesized event to the views listener
	 * @param {String} name name of the event
	 * @param {Object} event event object
	 * @alias Titanium.UI.iPad.Popover.fireEvent
	 */
	fireEvent: function (name,event) { },
	/**
	 * hide the popover
	 * @param {Object} options dictionary with optional boolean property <tt>animated</tt> which indicates if the popover should be hidden with animation (defaults to true) or not
	 * @alias Titanium.UI.iPad.Popover.hide
	 */
	hide: function (options) { },
	/**
	 * remove a previously add view from the view hiearchy
	 * @param {Object} view the view to remove from this views hiearchy
	 * @alias Titanium.UI.iPad.Popover.remove
	 */
	remove: function (view) { },
	/**
	 * remove a previously added event listener
	 * @param {String} name name of the event
	 * @param {Function} callback callback function passed in addEventListener
	 * @alias Titanium.UI.iPad.Popover.removeEventListener
	 */
	removeEventListener: function (name,callback) { },
	/**
	 * change the height of the popover
	 * @param {Integer,String} height height of the popover
	 * @alias Titanium.UI.iPad.Popover.setHeight
	 */
	setHeight: function (height) { },
	/**
	 * change the width of the popover
	 * @param {Integer,String} width width of the popover
	 * @alias Titanium.UI.iPad.Popover.setWidth
	 */
	setWidth: function (width) { },
	/**
	 * show the popover
	 * @param {Object} options dictionary of the following properties: <tt>rect</tt>, <tt>animated</tt> and <tt>view</tt>. The <tt>view</tt> property should specify the view relative to where the popover should display.  <tt>animated</tt> is a boolean indicating if the showing of the popover should be animated, defaults to true. The property <tt>rect</tt> is a dictionary with the following properties: <tt>x</tt>, <tt>y</tt>, <tt>width</tt> and <tt>height</tt>, where the rectangle in <tt>view</tt> at which to anchor the popover.
	 * @alias Titanium.UI.iPad.Popover.show
	 */
	show: function (options) { },
	/**
	 * return a Blob image of the rendered view
	 * @param {Function} f function to be invoked upon completion. if non-null, this method will be performed asynchronously. if null, it will be performed immediately
	 * @alias Titanium.UI.iPad.Popover.toImage
	 * @return {Object}
	 */
	toImage: function (f) { return {}; },
};

/**
 * A SplitWindow is a window that manages the presentation of two side-by-side view controllers. You use this class to implement a master-detail interface, in which the left-side view presents a list of items and the right-side presents details of the selected item. The SplitView is for use exclusively on iPad devices. The SplitWindow is created by the method Titanium.UI.iPad.createSplitWindow.
 * @since 1.2
 */
Titanium.UI.iPad.SplitWindow = {
	/**
	 * a dictionary with properties x and y to indicate the anchor point value. anchor specifies the position by which animation should occur. center is 0.5, 0.5
	 * @alias Titanium.UI.iPad.SplitWindow.anchorPoint
	 * @property {Object}
	 */
	anchorPoint: {},
	/**
	 * Get the a dictionary with properties x and y to indicate the anchor point value. anchor specifies the position by which animation should occur. center is 0.5, 0.5
	 * @alias Titanium.UI.iPad.SplitWindow.getAnchorPoint
	 * @return {Object}
	 */
	getAnchorPoint: function () { return anchorPoint; },
	/**
	 * Set the a dictionary with properties x and y to indicate the anchor point value. anchor specifies the position by which animation should occur. center is 0.5, 0.5
	 * @param {Object} value New value to set.
	 * @alias Titanium.UI.iPad.SplitWindow.setAnchorPoint
	 */
	setAnchorPoint: function () { },
	/**
	 * read-only object with x and y properties of where the view is during animation
	 * @alias Titanium.UI.iPad.SplitWindow.animatedCenterPoint
	 * @property {Object}
	 */
	animatedCenterPoint: {},
	/**
	 * Get the read-only object with x and y properties of where the view is during animation
	 * @alias Titanium.UI.iPad.SplitWindow.getAnimatedCenterPoint
	 * @return {Object}
	 */
	getAnimatedCenterPoint: function () { return animatedCenterPoint; },
	/**
	 * Set the read-only object with x and y properties of where the view is during animation
	 * @param {Object} value New value to set.
	 * @alias Titanium.UI.iPad.SplitWindow.setAnimatedCenterPoint
	 */
	setAnimatedCenterPoint: function () { },
	/**
	 * the background color of the view
	 * @alias Titanium.UI.iPad.SplitWindow.backgroundColor
	 * @property {String}
	 */
	backgroundColor: '',
	/**
	 * Get the the background color of the view
	 * @alias Titanium.UI.iPad.SplitWindow.getBackgroundColor
	 * @return {String}
	 */
	getBackgroundColor: function () { return backgroundColor; },
	/**
	 * Set the the background color of the view
	 * @param {String} value New value to set.
	 * @alias Titanium.UI.iPad.SplitWindow.setBackgroundColor
	 */
	setBackgroundColor: function () { },
	/**
	 * the disabled background color of the view. (Android)
	 * @alias Titanium.UI.iPad.SplitWindow.backgroundDisabledColor
	 * @property {String}
	 */
	backgroundDisabledColor: '',
	/**
	 * Get the the disabled background color of the view. (Android)
	 * @alias Titanium.UI.iPad.SplitWindow.getBackgroundDisabledColor
	 * @return {String}
	 */
	getBackgroundDisabledColor: function () { return backgroundDisabledColor; },
	/**
	 * Set the the disabled background color of the view. (Android)
	 * @param {String} value New value to set.
	 * @alias Titanium.UI.iPad.SplitWindow.setBackgroundDisabledColor
	 */
	setBackgroundDisabledColor: function () { },
	/**
	 * the disabled background image url of the view. (Android)
	 * @alias Titanium.UI.iPad.SplitWindow.backgroundDisabledImage
	 * @property {String}
	 */
	backgroundDisabledImage: '',
	/**
	 * Get the the disabled background image url of the view. (Android)
	 * @alias Titanium.UI.iPad.SplitWindow.getBackgroundDisabledImage
	 * @return {String}
	 */
	getBackgroundDisabledImage: function () { return backgroundDisabledImage; },
	/**
	 * Set the the disabled background image url of the view. (Android)
	 * @param {String} value New value to set.
	 * @alias Titanium.UI.iPad.SplitWindow.setBackgroundDisabledImage
	 */
	setBackgroundDisabledImage: function () { },
	/**
	 * the focused background color of the view. focusable must be true for normal views. (Android)
	 * @alias Titanium.UI.iPad.SplitWindow.backgroundFocusedColor
	 * @property {String}
	 */
	backgroundFocusedColor: '',
	/**
	 * Get the the focused background color of the view. focusable must be true for normal views. (Android)
	 * @alias Titanium.UI.iPad.SplitWindow.getBackgroundFocusedColor
	 * @return {String}
	 */
	getBackgroundFocusedColor: function () { return backgroundFocusedColor; },
	/**
	 * Set the the focused background color of the view. focusable must be true for normal views. (Android)
	 * @param {String} value New value to set.
	 * @alias Titanium.UI.iPad.SplitWindow.setBackgroundFocusedColor
	 */
	setBackgroundFocusedColor: function () { },
	/**
	 * the focused background image url of the view. focusable must be true for normal views. (Android)
	 * @alias Titanium.UI.iPad.SplitWindow.backgroundFocusedImage
	 * @property {String}
	 */
	backgroundFocusedImage: '',
	/**
	 * Get the the focused background image url of the view. focusable must be true for normal views. (Android)
	 * @alias Titanium.UI.iPad.SplitWindow.getBackgroundFocusedImage
	 * @return {String}
	 */
	getBackgroundFocusedImage: function () { return backgroundFocusedImage; },
	/**
	 * Set the the focused background image url of the view. focusable must be true for normal views. (Android)
	 * @param {String} value New value to set.
	 * @alias Titanium.UI.iPad.SplitWindow.setBackgroundFocusedImage
	 */
	setBackgroundFocusedImage: function () { },
	/**
	 * a background gradient for the view with the properties: type,startPoint,endPoint,startRadius,endRadius,backfillStart,backfillEnd,colors.
	 * @alias Titanium.UI.iPad.SplitWindow.backgroundGradient
	 * @property {Object}
	 */
	backgroundGradient: {},
	/**
	 * Get the a background gradient for the view with the properties: type,startPoint,endPoint,startRadius,endRadius,backfillStart,backfillEnd,colors.
	 * @alias Titanium.UI.iPad.SplitWindow.getBackgroundGradient
	 * @return {Object}
	 */
	getBackgroundGradient: function () { return backgroundGradient; },
	/**
	 * Set the a background gradient for the view with the properties: type,startPoint,endPoint,startRadius,endRadius,backfillStart,backfillEnd,colors.
	 * @param {Object} value New value to set.
	 * @alias Titanium.UI.iPad.SplitWindow.setBackgroundGradient
	 */
	setBackgroundGradient: function () { },
	/**
	 * the background image url of the view
	 * @alias Titanium.UI.iPad.SplitWindow.backgroundImage
	 * @property {String}
	 */
	backgroundImage: '',
	/**
	 * Get the the background image url of the view
	 * @alias Titanium.UI.iPad.SplitWindow.getBackgroundImage
	 * @return {String}
	 */
	getBackgroundImage: function () { return backgroundImage; },
	/**
	 * Set the the background image url of the view
	 * @param {String} value New value to set.
	 * @alias Titanium.UI.iPad.SplitWindow.setBackgroundImage
	 */
	setBackgroundImage: function () { },
	/**
	 * End caps specify the portion of an image that should not be resized when an image is stretched. This technique is used to implement buttons and other resizable image-based interface elements. When a button with end caps is resized, the resizing occurs only in the middle of the button, in the region between the end caps. The end caps themselves keep their original size and appearance. This property specifies the size of the left end cap. The middle (stretchable) portion is assumed to be 1 pixel wide. The right end cap is therefore computed by adding the size of the left end cap and the middle portion together and then subtracting that value from the width of the image
	 * @alias Titanium.UI.iPad.SplitWindow.backgroundLeftCap
	 * @property {Float}
	 */
	backgroundLeftCap: 0.0,
	/**
	 * Get the End caps specify the portion of an image that should not be resized when an image is stretched. This technique is used to implement buttons and other resizable image-based interface elements. When a button with end caps is resized, the resizing occurs only in the middle of the button, in the region between the end caps. The end caps themselves keep their original size and appearance. This property specifies the size of the left end cap. The middle (stretchable) portion is assumed to be 1 pixel wide. The right end cap is therefore computed by adding the size of the left end cap and the middle portion together and then subtracting that value from the width of the image
	 * @alias Titanium.UI.iPad.SplitWindow.getBackgroundLeftCap
	 * @return {Float}
	 */
	getBackgroundLeftCap: function () { return backgroundLeftCap; },
	/**
	 * Set the End caps specify the portion of an image that should not be resized when an image is stretched. This technique is used to implement buttons and other resizable image-based interface elements. When a button with end caps is resized, the resizing occurs only in the middle of the button, in the region between the end caps. The end caps themselves keep their original size and appearance. This property specifies the size of the left end cap. The middle (stretchable) portion is assumed to be 1 pixel wide. The right end cap is therefore computed by adding the size of the left end cap and the middle portion together and then subtracting that value from the width of the image
	 * @param {Float} value New value to set.
	 * @alias Titanium.UI.iPad.SplitWindow.setBackgroundLeftCap
	 */
	setBackgroundLeftCap: function () { },
	/**
	 * the selected background color of the view. focusable must be true for normal views. (Android)
	 * @alias Titanium.UI.iPad.SplitWindow.backgroundSelectedColor
	 * @property {String}
	 */
	backgroundSelectedColor: '',
	/**
	 * Get the the selected background color of the view. focusable must be true for normal views. (Android)
	 * @alias Titanium.UI.iPad.SplitWindow.getBackgroundSelectedColor
	 * @return {String}
	 */
	getBackgroundSelectedColor: function () { return backgroundSelectedColor; },
	/**
	 * Set the the selected background color of the view. focusable must be true for normal views. (Android)
	 * @param {String} value New value to set.
	 * @alias Titanium.UI.iPad.SplitWindow.setBackgroundSelectedColor
	 */
	setBackgroundSelectedColor: function () { },
	/**
	 * the selected background image url of the view. focusable must be true for normal views. (Android)
	 * @alias Titanium.UI.iPad.SplitWindow.backgroundSelectedImage
	 * @property {String}
	 */
	backgroundSelectedImage: '',
	/**
	 * Get the the selected background image url of the view. focusable must be true for normal views. (Android)
	 * @alias Titanium.UI.iPad.SplitWindow.getBackgroundSelectedImage
	 * @return {String}
	 */
	getBackgroundSelectedImage: function () { return backgroundSelectedImage; },
	/**
	 * Set the the selected background image url of the view. focusable must be true for normal views. (Android)
	 * @param {String} value New value to set.
	 * @alias Titanium.UI.iPad.SplitWindow.setBackgroundSelectedImage
	 */
	setBackgroundSelectedImage: function () { },
	/**
	 * End caps specify the portion of an image that should not be resized when an image is stretched. This technique is used to implement buttons and other resizable image-based interface elements. When a button with end caps is resized, the resizing occurs only in the middle of the button, in the region between the end caps. The end caps themselves keep their original size and appearance. This property specifies the size of the top end cap. The middle (stretchable) portion is assumed to be 1 pixel wide. The bottom end cap is therefore computed by adding the size of the top end cap and the middle portion together and then subtracting that value from the height of the image
	 * @alias Titanium.UI.iPad.SplitWindow.backgroundTopCap
	 * @property {Float}
	 */
	backgroundTopCap: 0.0,
	/**
	 * Get the End caps specify the portion of an image that should not be resized when an image is stretched. This technique is used to implement buttons and other resizable image-based interface elements. When a button with end caps is resized, the resizing occurs only in the middle of the button, in the region between the end caps. The end caps themselves keep their original size and appearance. This property specifies the size of the top end cap. The middle (stretchable) portion is assumed to be 1 pixel wide. The bottom end cap is therefore computed by adding the size of the top end cap and the middle portion together and then subtracting that value from the height of the image
	 * @alias Titanium.UI.iPad.SplitWindow.getBackgroundTopCap
	 * @return {Float}
	 */
	getBackgroundTopCap: function () { return backgroundTopCap; },
	/**
	 * Set the End caps specify the portion of an image that should not be resized when an image is stretched. This technique is used to implement buttons and other resizable image-based interface elements. When a button with end caps is resized, the resizing occurs only in the middle of the button, in the region between the end caps. The end caps themselves keep their original size and appearance. This property specifies the size of the top end cap. The middle (stretchable) portion is assumed to be 1 pixel wide. The bottom end cap is therefore computed by adding the size of the top end cap and the middle portion together and then subtracting that value from the height of the image
	 * @param {Float} value New value to set.
	 * @alias Titanium.UI.iPad.SplitWindow.setBackgroundTopCap
	 */
	setBackgroundTopCap: function () { },
	/**
	 * the border color of the view
	 * @alias Titanium.UI.iPad.SplitWindow.borderColor
	 * @property {String}
	 */
	borderColor: '',
	/**
	 * Get the the border color of the view
	 * @alias Titanium.UI.iPad.SplitWindow.getBorderColor
	 * @return {String}
	 */
	getBorderColor: function () { return borderColor; },
	/**
	 * Set the the border color of the view
	 * @param {String} value New value to set.
	 * @alias Titanium.UI.iPad.SplitWindow.setBorderColor
	 */
	setBorderColor: function () { },
	/**
	 * the border radius of the view
	 * @alias Titanium.UI.iPad.SplitWindow.borderRadius
	 * @property {Float}
	 */
	borderRadius: 0.0,
	/**
	 * Get the the border radius of the view
	 * @alias Titanium.UI.iPad.SplitWindow.getBorderRadius
	 * @return {Float}
	 */
	getBorderRadius: function () { return borderRadius; },
	/**
	 * Set the the border radius of the view
	 * @param {Float} value New value to set.
	 * @alias Titanium.UI.iPad.SplitWindow.setBorderRadius
	 */
	setBorderRadius: function () { },
	/**
	 * the border width of the view
	 * @alias Titanium.UI.iPad.SplitWindow.borderWidth
	 * @property {Float}
	 */
	borderWidth: 0.0,
	/**
	 * Get the the border width of the view
	 * @alias Titanium.UI.iPad.SplitWindow.getBorderWidth
	 * @return {Float}
	 */
	getBorderWidth: function () { return borderWidth; },
	/**
	 * Set the the border width of the view
	 * @param {Float} value New value to set.
	 * @alias Titanium.UI.iPad.SplitWindow.setBorderWidth
	 */
	setBorderWidth: function () { },
	/**
	 * property for the view bottom position. This position is relative to the view's parent. Can be either a float value or a dimension string ie 'auto' (default), '50%' (iPhone only).
	 * @alias Titanium.UI.iPad.SplitWindow.bottom
	 * @property {Float,String}
	 */
	bottom: 0.0,
	/**
	 * Get the property for the view bottom position. This position is relative to the view's parent. Can be either a float value or a dimension string ie 'auto' (default), '50%' (iPhone only).
	 * @alias Titanium.UI.iPad.SplitWindow.getBottom
	 * @return {Float,String}
	 */
	getBottom: function () { return bottom; },
	/**
	 * Set the property for the view bottom position. This position is relative to the view's parent. Can be either a float value or a dimension string ie 'auto' (default), '50%' (iPhone only).
	 * @param {Float,String} value New value to set.
	 * @alias Titanium.UI.iPad.SplitWindow.setBottom
	 */
	setBottom: function () { },
	/**
	 * a dictionary with properties x and y to indicate the center of the views position relative to the parent view
	 * @alias Titanium.UI.iPad.SplitWindow.center
	 * @property {Object}
	 */
	center: {},
	/**
	 * Get the a dictionary with properties x and y to indicate the center of the views position relative to the parent view
	 * @alias Titanium.UI.iPad.SplitWindow.getCenter
	 * @return {Object}
	 */
	getCenter: function () { return center; },
	/**
	 * Set the a dictionary with properties x and y to indicate the center of the views position relative to the parent view
	 * @param {Object} value New value to set.
	 * @alias Titanium.UI.iPad.SplitWindow.setCenter
	 */
	setCenter: function () { },
	/**
	 * view for the detail view section of the SplitWindow
	 * @alias Titanium.UI.iPad.SplitWindow.detailView
	 * @property {Object}
	 */
	detailView: {},
	/**
	 * Get the view for the detail view section of the SplitWindow
	 * @alias Titanium.UI.iPad.SplitWindow.getDetailView
	 * @return {Object}
	 */
	getDetailView: function () { return detailView; },
	/**
	 * Set the view for the detail view section of the SplitWindow
	 * @param {Object} value New value to set.
	 * @alias Titanium.UI.iPad.SplitWindow.setDetailView
	 */
	setDetailView: function () { },
	/**
	 * Set true if you want a view to be focusable when navigating with the trackball or D-Pad. Default: false. (Android Only)
	 * @alias Titanium.UI.iPad.SplitWindow.focusable
	 * @property {Boolean}
	 */
	focusable: false,
	/**
	 * Get the Set true if you want a view to be focusable when navigating with the trackball or D-Pad. Default: false. (Android Only)
	 * @alias Titanium.UI.iPad.SplitWindow.getFocusable
	 * @return {Boolean}
	 */
	getFocusable: function () { return focusable; },
	/**
	 * Set the Set true if you want a view to be focusable when navigating with the trackball or D-Pad. Default: false. (Android Only)
	 * @param {Boolean} value New value to set.
	 * @alias Titanium.UI.iPad.SplitWindow.setFocusable
	 */
	setFocusable: function () { },
	/**
	 * the font family
	 * @alias Titanium.UI.iPad.SplitWindow.font-family
	 * @property {String}
	 */
	font-family: '',
	/**
	 * Get the the font family
	 * @alias Titanium.UI.iPad.SplitWindow.getFont-family
	 * @return {String}
	 */
	getFont-family: function () { return font-family; },
	/**
	 * Set the the font family
	 * @param {String} value New value to set.
	 * @alias Titanium.UI.iPad.SplitWindow.setFont-family
	 */
	setFont-family: function () { },
	/**
	 * the font size
	 * @alias Titanium.UI.iPad.SplitWindow.font-size
	 * @property {String}
	 */
	font-size: '',
	/**
	 * Get the the font size
	 * @alias Titanium.UI.iPad.SplitWindow.getFont-size
	 * @return {String}
	 */
	getFont-size: function () { return font-size; },
	/**
	 * Set the the font size
	 * @param {String} value New value to set.
	 * @alias Titanium.UI.iPad.SplitWindow.setFont-size
	 */
	setFont-size: function () { },
	/**
	 * the font style, either normal or italics
	 * @alias Titanium.UI.iPad.SplitWindow.font-style
	 * @property {String}
	 */
	font-style: '',
	/**
	 * Get the the font style, either normal or italics
	 * @alias Titanium.UI.iPad.SplitWindow.getFont-style
	 * @return {String}
	 */
	getFont-style: function () { return font-style; },
	/**
	 * Set the the font style, either normal or italics
	 * @param {String} value New value to set.
	 * @alias Titanium.UI.iPad.SplitWindow.setFont-style
	 */
	setFont-style: function () { },
	/**
	 * the font weight, either normal or bold
	 * @alias Titanium.UI.iPad.SplitWindow.font-weight
	 * @property {String}
	 */
	font-weight: '',
	/**
	 * Get the the font weight, either normal or bold
	 * @alias Titanium.UI.iPad.SplitWindow.getFont-weight
	 * @return {String}
	 */
	getFont-weight: function () { return font-weight; },
	/**
	 * Set the the font weight, either normal or bold
	 * @param {String} value New value to set.
	 * @alias Titanium.UI.iPad.SplitWindow.setFont-weight
	 */
	setFont-weight: function () { },
	/**
	 * property for the view height. Can be either a float value or a dimension string ie 'auto' (default), '50%' (iPhone only).
	 * @alias Titanium.UI.iPad.SplitWindow.height
	 * @property {Float,String}
	 */
	height: 0.0,
	/**
	 * Get the property for the view height. Can be either a float value or a dimension string ie 'auto' (default), '50%' (iPhone only).
	 * @alias Titanium.UI.iPad.SplitWindow.getHeight
	 * @return {Float,String}
	 */
	getHeight: function () { return height; },
	/**
	 * Set the property for the view height. Can be either a float value or a dimension string ie 'auto' (default), '50%' (iPhone only).
	 * @param {Float,String} value New value to set.
	 * @alias Titanium.UI.iPad.SplitWindow.setHeight
	 */
	setHeight: function () { },
	/**
	 * property for the view left position. This position is relative to the view's parent. Can be either a float value or a dimension string ie 'auto' (default), '50%' (iPhone only).
	 * @alias Titanium.UI.iPad.SplitWindow.left
	 * @property {Float,String}
	 */
	left: 0.0,
	/**
	 * Get the property for the view left position. This position is relative to the view's parent. Can be either a float value or a dimension string ie 'auto' (default), '50%' (iPhone only).
	 * @alias Titanium.UI.iPad.SplitWindow.getLeft
	 * @return {Float,String}
	 */
	getLeft: function () { return left; },
	/**
	 * Set the property for the view left position. This position is relative to the view's parent. Can be either a float value or a dimension string ie 'auto' (default), '50%' (iPhone only).
	 * @param {Float,String} value New value to set.
	 * @alias Titanium.UI.iPad.SplitWindow.setLeft
	 */
	setLeft: function () { },
	/**
	 * view for the master view section of the SplitWindow
	 * @alias Titanium.UI.iPad.SplitWindow.masterView
	 * @property {Object}
	 */
	masterView: {},
	/**
	 * Get the view for the master view section of the SplitWindow
	 * @alias Titanium.UI.iPad.SplitWindow.getMasterView
	 * @return {Object}
	 */
	getMasterView: function () { return masterView; },
	/**
	 * Set the view for the master view section of the SplitWindow
	 * @param {Object} value New value to set.
	 * @alias Titanium.UI.iPad.SplitWindow.setMasterView
	 */
	setMasterView: function () { },
	/**
	 * the opacity from 0.0-1.0
	 * @alias Titanium.UI.iPad.SplitWindow.opacity
	 * @property {Float}
	 */
	opacity: 0.0,
	/**
	 * Get the the opacity from 0.0-1.0
	 * @alias Titanium.UI.iPad.SplitWindow.getOpacity
	 * @return {Float}
	 */
	getOpacity: function () { return opacity; },
	/**
	 * Set the the opacity from 0.0-1.0
	 * @param {Float} value New value to set.
	 * @alias Titanium.UI.iPad.SplitWindow.setOpacity
	 */
	setOpacity: function () { },
	/**
	 * property for the view right position. This position is relative to the view's parent. Can be either a float value or a dimension string ie 'auto' (default), '50%' (iPhone only).
	 * @alias Titanium.UI.iPad.SplitWindow.right
	 * @property {Float,String}
	 */
	right: 0.0,
	/**
	 * Get the property for the view right position. This position is relative to the view's parent. Can be either a float value or a dimension string ie 'auto' (default), '50%' (iPhone only).
	 * @alias Titanium.UI.iPad.SplitWindow.getRight
	 * @return {Float,String}
	 */
	getRight: function () { return right; },
	/**
	 * Set the property for the view right position. This position is relative to the view's parent. Can be either a float value or a dimension string ie 'auto' (default), '50%' (iPhone only).
	 * @param {Float,String} value New value to set.
	 * @alias Titanium.UI.iPad.SplitWindow.setRight
	 */
	setRight: function () { },
	/**
	 * the size of the view as a dictionary of width and height properties
	 * @alias Titanium.UI.iPad.SplitWindow.size
	 * @property {Object}
	 */
	size: {},
	/**
	 * Get the the size of the view as a dictionary of width and height properties
	 * @alias Titanium.UI.iPad.SplitWindow.getSize
	 * @return {Object}
	 */
	getSize: function () { return size; },
	/**
	 * Set the the size of the view as a dictionary of width and height properties
	 * @param {Object} value New value to set.
	 * @alias Titanium.UI.iPad.SplitWindow.setSize
	 */
	setSize: function () { },
	/**
	 * One of Titanium.UI.Android.SOFT_KEYBOARD_DEFAULT_ON_FOCUS, Titanium.UI.Android.SOFT_KEYBOARD_HIDE_ON_FOCUS, or Titanium.UI.Android.SOFT_KEYBOARD_SHOW_ON_FOCUS. (Android only)
	 * @alias Titanium.UI.iPad.SplitWindow.softKeyboardOnFocus
	 * @property {Integer}
	 */
	softKeyboardOnFocus: 0,
	/**
	 * Get the One of Titanium.UI.Android.SOFT_KEYBOARD_DEFAULT_ON_FOCUS, Titanium.UI.Android.SOFT_KEYBOARD_HIDE_ON_FOCUS, or Titanium.UI.Android.SOFT_KEYBOARD_SHOW_ON_FOCUS. (Android only)
	 * @alias Titanium.UI.iPad.SplitWindow.getSoftKeyboardOnFocus
	 * @return {Integer}
	 */
	getSoftKeyboardOnFocus: function () { return softKeyboardOnFocus; },
	/**
	 * Set the One of Titanium.UI.Android.SOFT_KEYBOARD_DEFAULT_ON_FOCUS, Titanium.UI.Android.SOFT_KEYBOARD_HIDE_ON_FOCUS, or Titanium.UI.Android.SOFT_KEYBOARD_SHOW_ON_FOCUS. (Android only)
	 * @param {Integer} value New value to set.
	 * @alias Titanium.UI.iPad.SplitWindow.setSoftKeyboardOnFocus
	 */
	setSoftKeyboardOnFocus: function () { },
	/**
	 * property for the view top position. This position is relative to the view's parent. Can be either a float value or a dimension string ie 'auto' (default), '50%' (iPhone only).
	 * @alias Titanium.UI.iPad.SplitWindow.top
	 * @property {Float,String}
	 */
	top: 0.0,
	/**
	 * Get the property for the view top position. This position is relative to the view's parent. Can be either a float value or a dimension string ie 'auto' (default), '50%' (iPhone only).
	 * @alias Titanium.UI.iPad.SplitWindow.getTop
	 * @return {Float,String}
	 */
	getTop: function () { return top; },
	/**
	 * Set the property for the view top position. This position is relative to the view's parent. Can be either a float value or a dimension string ie 'auto' (default), '50%' (iPhone only).
	 * @param {Float,String} value New value to set.
	 * @alias Titanium.UI.iPad.SplitWindow.setTop
	 */
	setTop: function () { },
	/**
	 * a boolean indicating if the view should receive touch events (true, default) or forward them to peers (false)
	 * @alias Titanium.UI.iPad.SplitWindow.touchEnabled
	 * @property {Boolean}
	 */
	touchEnabled: false,
	/**
	 * Get the a boolean indicating if the view should receive touch events (true, default) or forward them to peers (false)
	 * @alias Titanium.UI.iPad.SplitWindow.getTouchEnabled
	 * @return {Boolean}
	 */
	getTouchEnabled: function () { return touchEnabled; },
	/**
	 * Set the a boolean indicating if the view should receive touch events (true, default) or forward them to peers (false)
	 * @param {Boolean} value New value to set.
	 * @alias Titanium.UI.iPad.SplitWindow.setTouchEnabled
	 */
	setTouchEnabled: function () { },
	/**
	 * the transformation matrix to apply to the view
	 * @alias Titanium.UI.iPad.SplitWindow.transform
	 * @property {Object}
	 */
	transform: {},
	/**
	 * Get the the transformation matrix to apply to the view
	 * @alias Titanium.UI.iPad.SplitWindow.getTransform
	 * @return {Object}
	 */
	getTransform: function () { return transform; },
	/**
	 * Set the the transformation matrix to apply to the view
	 * @param {Object} value New value to set.
	 * @alias Titanium.UI.iPad.SplitWindow.setTransform
	 */
	setTransform: function () { },
	/**
	 * a boolean of the visibility of the view
	 * @alias Titanium.UI.iPad.SplitWindow.visible
	 * @property {Boolean}
	 */
	visible: false,
	/**
	 * Get the a boolean of the visibility of the view
	 * @alias Titanium.UI.iPad.SplitWindow.getVisible
	 * @return {Boolean}
	 */
	getVisible: function () { return visible; },
	/**
	 * Set the a boolean of the visibility of the view
	 * @param {Boolean} value New value to set.
	 * @alias Titanium.UI.iPad.SplitWindow.setVisible
	 */
	setVisible: function () { },
	/**
	 * property for the view width. Can be either a float value or a dimension string ie 'auto' (default), '50%' (iPhone only).
	 * @alias Titanium.UI.iPad.SplitWindow.width
	 * @property {Float,String}
	 */
	width: 0.0,
	/**
	 * Get the property for the view width. Can be either a float value or a dimension string ie 'auto' (default), '50%' (iPhone only).
	 * @alias Titanium.UI.iPad.SplitWindow.getWidth
	 * @return {Float,String}
	 */
	getWidth: function () { return width; },
	/**
	 * Set the property for the view width. Can be either a float value or a dimension string ie 'auto' (default), '50%' (iPhone only).
	 * @param {Float,String} value New value to set.
	 * @alias Titanium.UI.iPad.SplitWindow.setWidth
	 */
	setWidth: function () { },
	/**
	 * the z index position relative to other sibling views
	 * @alias Titanium.UI.iPad.SplitWindow.zIndex
	 * @property {Integer}
	 */
	zIndex: 0,
	/**
	 * Get the the z index position relative to other sibling views
	 * @alias Titanium.UI.iPad.SplitWindow.getZIndex
	 * @return {Integer}
	 */
	getZIndex: function () { return zIndex; },
	/**
	 * Set the the z index position relative to other sibling views
	 * @param {Integer} value New value to set.
	 * @alias Titanium.UI.iPad.SplitWindow.setZIndex
	 */
	setZIndex: function () { },
	/**
	 * add a child to the view hierarchy
	 * @param {Object} view the view to add to this views hiearchy
	 * @alias Titanium.UI.iPad.SplitWindow.add
	 */
	add: function (view) { },
	/**
	 * add an event listener for the instance to receive view triggered events
	 * @param {String} name name of the event
	 * @param {Function} callback callback function to invoke when the event is fired
	 * @alias Titanium.UI.iPad.SplitWindow.addEventListener
	 */
	addEventListener: function (name,callback) { },
	/**
	 * animate the view
	 * @param {Object} obj either a dictionary of animation properties or an Animation object
	 * @param {Function} callback function to be invoked upon completion of the animation
	 * @alias Titanium.UI.iPad.SplitWindow.animate
	 */
	animate: function (obj,callback) { },
	/**
	 * fire a synthesized event to the views listener
	 * @param {String} name name of the event
	 * @param {Object} event event object
	 * @alias Titanium.UI.iPad.SplitWindow.fireEvent
	 */
	fireEvent: function (name,event) { },
	/**
	 * hide the view
	 * @alias Titanium.UI.iPad.SplitWindow.hide
	 */
	hide: function () { },
	/**
	 * remove a previously add view from the view hiearchy
	 * @param {Object} view the view to remove from this views hiearchy
	 * @alias Titanium.UI.iPad.SplitWindow.remove
	 */
	remove: function (view) { },
	/**
	 * remove a previously added event listener
	 * @param {String} name name of the event
	 * @param {Function} callback callback function passed in addEventListener
	 * @alias Titanium.UI.iPad.SplitWindow.removeEventListener
	 */
	removeEventListener: function (name,callback) { },
	/**
	 * make the view visible
	 * @alias Titanium.UI.iPad.SplitWindow.show
	 */
	show: function () { },
	/**
	 * return a Blob image of the rendered view
	 * @param {Function} f function to be invoked upon completion. if non-null, this method will be performed asynchronously. if null, it will be performed immediately
	 * @alias Titanium.UI.iPad.SplitWindow.toImage
	 * @return {Object}
	 */
	toImage: function (f) { return {}; },
};

/**
 * The iPhone/iPad specific UI capabilities.  All properties, methods and events in this namespace will only work on the Apple iPhone or iPad related devices.
 * @since 0.5
 */
Titanium.UI.iPhone = {
	/**
	 * The view is presented using the same style as its parent window. This is currently only available currently on iPhone/iPad and SDK 3.2+.
	 * @alias Titanium.UI.iPhone.MODAL_PRESENTATION_CURRENT_CONTEXT
	 * @property {Integer}
	 */
	MODAL_PRESENTATION_CURRENT_CONTEXT: 0,
	/**
	 * The width and height of the presented window are smaller than those of the screen and the view is centered on the screen. If the device is in a landscape orientation and the keyboard is visible, the position of the view is adjusted upward so that the view remains visible. All uncovered areas are dimmed to prevent the user from interacting with them. This is currently only available currently on iPhone/iPad and SDK 3.2+.
	 * @alias Titanium.UI.iPhone.MODAL_PRESENTATION_FORMSHEET
	 * @property {Integer}
	 */
	MODAL_PRESENTATION_FORMSHEET: 0,
	/**
	 * The presented window covers the screen. This is currently only available currently on iPhone/iPad and SDK 3.2+.
	 * @alias Titanium.UI.iPhone.MODAL_PRESENTATION_FULLSCREEN
	 * @property {Integer}
	 */
	MODAL_PRESENTATION_FULLSCREEN: 0,
	/**
	 * The height of the presented window is set to the height of the screen and the view's width is set to the width of the screen in a portrait orientation. Any uncovered areas are dimmed to prevent the user from interacting with them. (In portrait orientations, this option is essentially the same as Titanium.UI.iPhone.MODAL_PRESENTATION_FULLSCREEN). This is currently only available currently on iPhone/iPad and SDK 3.2+.
	 * @alias Titanium.UI.iPhone.MODAL_PRESENTATION_PAGESHEET
	 * @property {Integer}
	 */
	MODAL_PRESENTATION_PAGESHEET: 0,
	/**
	 * When the window is presented, its view slides up from the bottom of the screen. On dismissal, the view slides back down. This is the default transition style. This is currently only available currently on iPhone/iPad.
	 * @alias Titanium.UI.iPhone.MODAL_TRANSITION_STYLE_COVER_VERTICAL
	 * @property {Integer}
	 */
	MODAL_TRANSITION_STYLE_COVER_VERTICAL: 0,
	/**
	 * When the window is presented, the current view fades out while the new view fades in at the same time. On dismissal, a similar type of cross-fade is used to return to the original view. This is currently only available currently on iPhone/iPad.
	 * @alias Titanium.UI.iPhone.MODAL_TRANSITION_STYLE_CROSS_DISSOLVE
	 * @property {Integer}
	 */
	MODAL_TRANSITION_STYLE_CROSS_DISSOLVE: 0,
	/**
	 * When the window is presented, the current view initiates a horizontal 3D flip from right-to-left, resulting in the revealing of the new view as if it were on the back of the previous view. On dismissal, the flip occurs from left-to-right, returning to the original view. This is currently only available currently on iPhone/iPad.
	 * @alias Titanium.UI.iPhone.MODAL_TRANSITION_STYLE_FLIP_HORIZONTAL
	 * @property {Integer}
	 */
	MODAL_TRANSITION_STYLE_FLIP_HORIZONTAL: 0,
	/**
	 * When the window is presented, one corner of the current view curls up to reveal the modal view underneath. On dismissal, the curled up page unfurls itself back on top of the modal view. A modal view presented using this transition is itself prevented from presenting any additional modal views. This transition style is supported only if the window is presenting a Titanium.UI.iPhone.MODAL_PRESENTATION_FULLSCREEN modal presentation style.  This is currently only available currently on iPhone/iPad and SDK 3.2+.
	 * @alias Titanium.UI.iPhone.MODAL_TRANSITION_STYLE_PARTIAL_CURL
	 * @property {Integer}
	 */
	MODAL_TRANSITION_STYLE_PARTIAL_CURL: 0,
	/**
	 * set the application badge for the application's icon in the springboard
	 * @alias Titanium.UI.iPhone.appBadge
	 * @property {String}
	 */
	appBadge: '',
	/**
	 * Get the set the application badge for the application's icon in the springboard
	 * @alias Titanium.UI.iPhone.getAppBadge
	 * @return {String}
	 */
	getAppBadge: function () { return appBadge; },
	/**
	 * Set the set the application badge for the application's icon in the springboard
	 * @param {String} value New value to set.
	 * @alias Titanium.UI.iPhone.setAppBadge
	 */
	setAppBadge: function () { },
	/**
	 * control whether the shake to edit system wide capability is enabled
	 * @alias Titanium.UI.iPhone.appSupportsShakeToEdit
	 * @property {Boolean}
	 */
	appSupportsShakeToEdit: false,
	/**
	 * Get the control whether the shake to edit system wide capability is enabled
	 * @alias Titanium.UI.iPhone.getAppSupportsShakeToEdit
	 * @return {Boolean}
	 */
	getAppSupportsShakeToEdit: function () { return appSupportsShakeToEdit; },
	/**
	 * Set the control whether the shake to edit system wide capability is enabled
	 * @param {Boolean} value New value to set.
	 * @alias Titanium.UI.iPhone.setAppSupportsShakeToEdit
	 */
	setAppSupportsShakeToEdit: function () { },
	/**
	 * control the status bar visibility
	 * @alias Titanium.UI.iPhone.statusBarHidden
	 * @property {Boolean}
	 */
	statusBarHidden: false,
	/**
	 * Get the control the status bar visibility
	 * @alias Titanium.UI.iPhone.getStatusBarHidden
	 * @return {Boolean}
	 */
	getStatusBarHidden: function () { return statusBarHidden; },
	/**
	 * Set the control the status bar visibility
	 * @param {Boolean} value New value to set.
	 * @alias Titanium.UI.iPhone.setStatusBarHidden
	 */
	setStatusBarHidden: function () { },
	/**
	 * constant that controls the status bar color style
	 * @alias Titanium.UI.iPhone.statusBarStyle
	 * @property {Integer}
	 */
	statusBarStyle: 0,
	/**
	 * Get the constant that controls the status bar color style
	 * @alias Titanium.UI.iPhone.getStatusBarStyle
	 * @return {Integer}
	 */
	getStatusBarStyle: function () { return statusBarStyle; },
	/**
	 * Set the constant that controls the status bar color style
	 * @param {Integer} value New value to set.
	 * @alias Titanium.UI.iPhone.setStatusBarStyle
	 */
	setStatusBarStyle: function () { },
	/**
	 * add an event listener for the instance to receive view triggered events
	 * @param {String} name name of the event
	 * @param {Function} callback callback function to invoke when the event is fired
	 * @alias Titanium.UI.iPhone.addEventListener
	 */
	addEventListener: function (name,callback) { },
	/**
	 * create and return an instance of Titanium.UI.iPhone.NavigationGroup
	 * @param {Object} [parameters] (optional) a dictionary object properties defined in <a href="Titanium.UI.iPhone.NavigationGroup.html">Titanium.UI.iPhone.NavigationGroup</a>
	 * @alias Titanium.UI.iPhone.createNavigationGroup
	 * @return {Titanium_UI_iPhone_NavigationGroup}
	 */
	createNavigationGroup: function (parameters) { return new Titanium_UI_iPhone_NavigationGroup(); },
	/**
	 * fire a synthesized event to the views listener
	 * @param {String} name name of the event
	 * @param {Object} event event object
	 * @alias Titanium.UI.iPhone.fireEvent
	 */
	fireEvent: function (name,event) { },
	/**
	 * convenience method to hide the status bar
	 * @param {Boolean} animated boolean to indicate if the action should be animated
	 * @param {Integer} animationStyle the animation style
	 * @alias Titanium.UI.iPhone.hideStatusBar
	 */
	hideStatusBar: function (animated,animationStyle) { },
	/**
	 * remove a previously added event listener
	 * @param {String} name name of the event
	 * @param {Function} callback callback function passed in addEventListener
	 * @alias Titanium.UI.iPhone.removeEventListener
	 */
	removeEventListener: function (name,callback) { },
	/**
	 * convenience method to show the status bar
	 * @param {Boolean} animated boolean to indicate if the action should be animated
	 * @param {Integer} animationStyle the animation style
	 * @alias Titanium.UI.iPhone.showStatusBar
	 */
	showStatusBar: function (animated,animationStyle) { },
};

/**
 * A set of constants for the styles available for Titanium.UI.ActivityIndicator objects.
 * @since 0.9
 */
Titanium.UI.iPhone.ActivityIndicatorStyle = {
	/**
	 * The large white style of indicator.
	 * @alias Titanium.UI.iPhone.ActivityIndicatorStyle.BIG
	 * @property {Integer}
	 */
	BIG: 0,
	/**
	 * The standard gray style of indicator.
	 * @alias Titanium.UI.iPhone.ActivityIndicatorStyle.DARK
	 * @property {Integer}
	 */
	DARK: 0,
	/**
	 * The standard white style of indicator (the default).
	 * @alias Titanium.UI.iPhone.ActivityIndicatorStyle.PLAIN
	 * @property {Integer}
	 */
	PLAIN: 0,
};

/**
 * A set of constants for the Animation Styles used for transitions.
 * @since 0.9
 */
Titanium.UI.iPhone.AnimationStyle = {
	/**
	 * Curl downwards during a transition animation
	 * @alias Titanium.UI.iPhone.AnimationStyle.CURL_DOWN
	 * @property {Integer}
	 */
	CURL_DOWN: 0,
	/**
	 * Curl upwards during a transition animation
	 * @alias Titanium.UI.iPhone.AnimationStyle.CURL_UP
	 * @property {Integer}
	 */
	CURL_UP: 0,
	/**
	 * Flip from left to right during a transition animation
	 * @alias Titanium.UI.iPhone.AnimationStyle.FLIP_FROM_LEFT
	 * @property {Integer}
	 */
	FLIP_FROM_LEFT: 0,
	/**
	 * Flip from right to left during a transition animation
	 * @alias Titanium.UI.iPhone.AnimationStyle.FLIP_FROM_RIGHT
	 * @property {Integer}
	 */
	FLIP_FROM_RIGHT: 0,
	/**
	 * No animation
	 * @alias Titanium.UI.iPhone.AnimationStyle.NONE
	 * @property {Integer}
	 */
	NONE: 0,
};

/**
 * A Navigation Group implements a specialized view that manages the navigation of hierarchical content. The Navigation Group is created by the method Titanium.UI.iPhone.NavigationGroup.

A Navigation Group is very similar to Tab Bars with the exception that they do not maintain a group of windows with a interface bar at the bottom.
 * @since 1.2
 */
Titanium.UI.iPhone.NavigationGroup = {
	/**
	 * a dictionary with properties x and y to indicate the anchor point value. anchor specifies the position by which animation should occur. center is 0.5, 0.5
	 * @alias Titanium.UI.iPhone.NavigationGroup.anchorPoint
	 * @property {Object}
	 */
	anchorPoint: {},
	/**
	 * Get the a dictionary with properties x and y to indicate the anchor point value. anchor specifies the position by which animation should occur. center is 0.5, 0.5
	 * @alias Titanium.UI.iPhone.NavigationGroup.getAnchorPoint
	 * @return {Object}
	 */
	getAnchorPoint: function () { return anchorPoint; },
	/**
	 * Set the a dictionary with properties x and y to indicate the anchor point value. anchor specifies the position by which animation should occur. center is 0.5, 0.5
	 * @param {Object} value New value to set.
	 * @alias Titanium.UI.iPhone.NavigationGroup.setAnchorPoint
	 */
	setAnchorPoint: function () { },
	/**
	 * read-only object with x and y properties of where the view is during animation
	 * @alias Titanium.UI.iPhone.NavigationGroup.animatedCenterPoint
	 * @property {Object}
	 */
	animatedCenterPoint: {},
	/**
	 * Get the read-only object with x and y properties of where the view is during animation
	 * @alias Titanium.UI.iPhone.NavigationGroup.getAnimatedCenterPoint
	 * @return {Object}
	 */
	getAnimatedCenterPoint: function () { return animatedCenterPoint; },
	/**
	 * Set the read-only object with x and y properties of where the view is during animation
	 * @param {Object} value New value to set.
	 * @alias Titanium.UI.iPhone.NavigationGroup.setAnimatedCenterPoint
	 */
	setAnimatedCenterPoint: function () { },
	/**
	 * the background color of the view
	 * @alias Titanium.UI.iPhone.NavigationGroup.backgroundColor
	 * @property {String}
	 */
	backgroundColor: '',
	/**
	 * Get the the background color of the view
	 * @alias Titanium.UI.iPhone.NavigationGroup.getBackgroundColor
	 * @return {String}
	 */
	getBackgroundColor: function () { return backgroundColor; },
	/**
	 * Set the the background color of the view
	 * @param {String} value New value to set.
	 * @alias Titanium.UI.iPhone.NavigationGroup.setBackgroundColor
	 */
	setBackgroundColor: function () { },
	/**
	 * the disabled background color of the view. (Android)
	 * @alias Titanium.UI.iPhone.NavigationGroup.backgroundDisabledColor
	 * @property {String}
	 */
	backgroundDisabledColor: '',
	/**
	 * Get the the disabled background color of the view. (Android)
	 * @alias Titanium.UI.iPhone.NavigationGroup.getBackgroundDisabledColor
	 * @return {String}
	 */
	getBackgroundDisabledColor: function () { return backgroundDisabledColor; },
	/**
	 * Set the the disabled background color of the view. (Android)
	 * @param {String} value New value to set.
	 * @alias Titanium.UI.iPhone.NavigationGroup.setBackgroundDisabledColor
	 */
	setBackgroundDisabledColor: function () { },
	/**
	 * the disabled background image url of the view. (Android)
	 * @alias Titanium.UI.iPhone.NavigationGroup.backgroundDisabledImage
	 * @property {String}
	 */
	backgroundDisabledImage: '',
	/**
	 * Get the the disabled background image url of the view. (Android)
	 * @alias Titanium.UI.iPhone.NavigationGroup.getBackgroundDisabledImage
	 * @return {String}
	 */
	getBackgroundDisabledImage: function () { return backgroundDisabledImage; },
	/**
	 * Set the the disabled background image url of the view. (Android)
	 * @param {String} value New value to set.
	 * @alias Titanium.UI.iPhone.NavigationGroup.setBackgroundDisabledImage
	 */
	setBackgroundDisabledImage: function () { },
	/**
	 * the focused background color of the view. focusable must be true for normal views. (Android)
	 * @alias Titanium.UI.iPhone.NavigationGroup.backgroundFocusedColor
	 * @property {String}
	 */
	backgroundFocusedColor: '',
	/**
	 * Get the the focused background color of the view. focusable must be true for normal views. (Android)
	 * @alias Titanium.UI.iPhone.NavigationGroup.getBackgroundFocusedColor
	 * @return {String}
	 */
	getBackgroundFocusedColor: function () { return backgroundFocusedColor; },
	/**
	 * Set the the focused background color of the view. focusable must be true for normal views. (Android)
	 * @param {String} value New value to set.
	 * @alias Titanium.UI.iPhone.NavigationGroup.setBackgroundFocusedColor
	 */
	setBackgroundFocusedColor: function () { },
	/**
	 * the focused background image url of the view. focusable must be true for normal views. (Android)
	 * @alias Titanium.UI.iPhone.NavigationGroup.backgroundFocusedImage
	 * @property {String}
	 */
	backgroundFocusedImage: '',
	/**
	 * Get the the focused background image url of the view. focusable must be true for normal views. (Android)
	 * @alias Titanium.UI.iPhone.NavigationGroup.getBackgroundFocusedImage
	 * @return {String}
	 */
	getBackgroundFocusedImage: function () { return backgroundFocusedImage; },
	/**
	 * Set the the focused background image url of the view. focusable must be true for normal views. (Android)
	 * @param {String} value New value to set.
	 * @alias Titanium.UI.iPhone.NavigationGroup.setBackgroundFocusedImage
	 */
	setBackgroundFocusedImage: function () { },
	/**
	 * a background gradient for the view with the properties: type,startPoint,endPoint,startRadius,endRadius,backfillStart,backfillEnd,colors.
	 * @alias Titanium.UI.iPhone.NavigationGroup.backgroundGradient
	 * @property {Object}
	 */
	backgroundGradient: {},
	/**
	 * Get the a background gradient for the view with the properties: type,startPoint,endPoint,startRadius,endRadius,backfillStart,backfillEnd,colors.
	 * @alias Titanium.UI.iPhone.NavigationGroup.getBackgroundGradient
	 * @return {Object}
	 */
	getBackgroundGradient: function () { return backgroundGradient; },
	/**
	 * Set the a background gradient for the view with the properties: type,startPoint,endPoint,startRadius,endRadius,backfillStart,backfillEnd,colors.
	 * @param {Object} value New value to set.
	 * @alias Titanium.UI.iPhone.NavigationGroup.setBackgroundGradient
	 */
	setBackgroundGradient: function () { },
	/**
	 * the background image url of the view
	 * @alias Titanium.UI.iPhone.NavigationGroup.backgroundImage
	 * @property {String}
	 */
	backgroundImage: '',
	/**
	 * Get the the background image url of the view
	 * @alias Titanium.UI.iPhone.NavigationGroup.getBackgroundImage
	 * @return {String}
	 */
	getBackgroundImage: function () { return backgroundImage; },
	/**
	 * Set the the background image url of the view
	 * @param {String} value New value to set.
	 * @alias Titanium.UI.iPhone.NavigationGroup.setBackgroundImage
	 */
	setBackgroundImage: function () { },
	/**
	 * End caps specify the portion of an image that should not be resized when an image is stretched. This technique is used to implement buttons and other resizable image-based interface elements. When a button with end caps is resized, the resizing occurs only in the middle of the button, in the region between the end caps. The end caps themselves keep their original size and appearance. This property specifies the size of the left end cap. The middle (stretchable) portion is assumed to be 1 pixel wide. The right end cap is therefore computed by adding the size of the left end cap and the middle portion together and then subtracting that value from the width of the image
	 * @alias Titanium.UI.iPhone.NavigationGroup.backgroundLeftCap
	 * @property {Float}
	 */
	backgroundLeftCap: 0.0,
	/**
	 * Get the End caps specify the portion of an image that should not be resized when an image is stretched. This technique is used to implement buttons and other resizable image-based interface elements. When a button with end caps is resized, the resizing occurs only in the middle of the button, in the region between the end caps. The end caps themselves keep their original size and appearance. This property specifies the size of the left end cap. The middle (stretchable) portion is assumed to be 1 pixel wide. The right end cap is therefore computed by adding the size of the left end cap and the middle portion together and then subtracting that value from the width of the image
	 * @alias Titanium.UI.iPhone.NavigationGroup.getBackgroundLeftCap
	 * @return {Float}
	 */
	getBackgroundLeftCap: function () { return backgroundLeftCap; },
	/**
	 * Set the End caps specify the portion of an image that should not be resized when an image is stretched. This technique is used to implement buttons and other resizable image-based interface elements. When a button with end caps is resized, the resizing occurs only in the middle of the button, in the region between the end caps. The end caps themselves keep their original size and appearance. This property specifies the size of the left end cap. The middle (stretchable) portion is assumed to be 1 pixel wide. The right end cap is therefore computed by adding the size of the left end cap and the middle portion together and then subtracting that value from the width of the image
	 * @param {Float} value New value to set.
	 * @alias Titanium.UI.iPhone.NavigationGroup.setBackgroundLeftCap
	 */
	setBackgroundLeftCap: function () { },
	/**
	 * the selected background color of the view. focusable must be true for normal views. (Android)
	 * @alias Titanium.UI.iPhone.NavigationGroup.backgroundSelectedColor
	 * @property {String}
	 */
	backgroundSelectedColor: '',
	/**
	 * Get the the selected background color of the view. focusable must be true for normal views. (Android)
	 * @alias Titanium.UI.iPhone.NavigationGroup.getBackgroundSelectedColor
	 * @return {String}
	 */
	getBackgroundSelectedColor: function () { return backgroundSelectedColor; },
	/**
	 * Set the the selected background color of the view. focusable must be true for normal views. (Android)
	 * @param {String} value New value to set.
	 * @alias Titanium.UI.iPhone.NavigationGroup.setBackgroundSelectedColor
	 */
	setBackgroundSelectedColor: function () { },
	/**
	 * the selected background image url of the view. focusable must be true for normal views. (Android)
	 * @alias Titanium.UI.iPhone.NavigationGroup.backgroundSelectedImage
	 * @property {String}
	 */
	backgroundSelectedImage: '',
	/**
	 * Get the the selected background image url of the view. focusable must be true for normal views. (Android)
	 * @alias Titanium.UI.iPhone.NavigationGroup.getBackgroundSelectedImage
	 * @return {String}
	 */
	getBackgroundSelectedImage: function () { return backgroundSelectedImage; },
	/**
	 * Set the the selected background image url of the view. focusable must be true for normal views. (Android)
	 * @param {String} value New value to set.
	 * @alias Titanium.UI.iPhone.NavigationGroup.setBackgroundSelectedImage
	 */
	setBackgroundSelectedImage: function () { },
	/**
	 * End caps specify the portion of an image that should not be resized when an image is stretched. This technique is used to implement buttons and other resizable image-based interface elements. When a button with end caps is resized, the resizing occurs only in the middle of the button, in the region between the end caps. The end caps themselves keep their original size and appearance. This property specifies the size of the top end cap. The middle (stretchable) portion is assumed to be 1 pixel wide. The bottom end cap is therefore computed by adding the size of the top end cap and the middle portion together and then subtracting that value from the height of the image
	 * @alias Titanium.UI.iPhone.NavigationGroup.backgroundTopCap
	 * @property {Float}
	 */
	backgroundTopCap: 0.0,
	/**
	 * Get the End caps specify the portion of an image that should not be resized when an image is stretched. This technique is used to implement buttons and other resizable image-based interface elements. When a button with end caps is resized, the resizing occurs only in the middle of the button, in the region between the end caps. The end caps themselves keep their original size and appearance. This property specifies the size of the top end cap. The middle (stretchable) portion is assumed to be 1 pixel wide. The bottom end cap is therefore computed by adding the size of the top end cap and the middle portion together and then subtracting that value from the height of the image
	 * @alias Titanium.UI.iPhone.NavigationGroup.getBackgroundTopCap
	 * @return {Float}
	 */
	getBackgroundTopCap: function () { return backgroundTopCap; },
	/**
	 * Set the End caps specify the portion of an image that should not be resized when an image is stretched. This technique is used to implement buttons and other resizable image-based interface elements. When a button with end caps is resized, the resizing occurs only in the middle of the button, in the region between the end caps. The end caps themselves keep their original size and appearance. This property specifies the size of the top end cap. The middle (stretchable) portion is assumed to be 1 pixel wide. The bottom end cap is therefore computed by adding the size of the top end cap and the middle portion together and then subtracting that value from the height of the image
	 * @param {Float} value New value to set.
	 * @alias Titanium.UI.iPhone.NavigationGroup.setBackgroundTopCap
	 */
	setBackgroundTopCap: function () { },
	/**
	 * the border color of the view
	 * @alias Titanium.UI.iPhone.NavigationGroup.borderColor
	 * @property {String}
	 */
	borderColor: '',
	/**
	 * Get the the border color of the view
	 * @alias Titanium.UI.iPhone.NavigationGroup.getBorderColor
	 * @return {String}
	 */
	getBorderColor: function () { return borderColor; },
	/**
	 * Set the the border color of the view
	 * @param {String} value New value to set.
	 * @alias Titanium.UI.iPhone.NavigationGroup.setBorderColor
	 */
	setBorderColor: function () { },
	/**
	 * the border radius of the view
	 * @alias Titanium.UI.iPhone.NavigationGroup.borderRadius
	 * @property {Float}
	 */
	borderRadius: 0.0,
	/**
	 * Get the the border radius of the view
	 * @alias Titanium.UI.iPhone.NavigationGroup.getBorderRadius
	 * @return {Float}
	 */
	getBorderRadius: function () { return borderRadius; },
	/**
	 * Set the the border radius of the view
	 * @param {Float} value New value to set.
	 * @alias Titanium.UI.iPhone.NavigationGroup.setBorderRadius
	 */
	setBorderRadius: function () { },
	/**
	 * the border width of the view
	 * @alias Titanium.UI.iPhone.NavigationGroup.borderWidth
	 * @property {Float}
	 */
	borderWidth: 0.0,
	/**
	 * Get the the border width of the view
	 * @alias Titanium.UI.iPhone.NavigationGroup.getBorderWidth
	 * @return {Float}
	 */
	getBorderWidth: function () { return borderWidth; },
	/**
	 * Set the the border width of the view
	 * @param {Float} value New value to set.
	 * @alias Titanium.UI.iPhone.NavigationGroup.setBorderWidth
	 */
	setBorderWidth: function () { },
	/**
	 * property for the view bottom position. This position is relative to the view's parent. Can be either a float value or a dimension string ie 'auto' (default), '50%' (iPhone only).
	 * @alias Titanium.UI.iPhone.NavigationGroup.bottom
	 * @property {Float,String}
	 */
	bottom: 0.0,
	/**
	 * Get the property for the view bottom position. This position is relative to the view's parent. Can be either a float value or a dimension string ie 'auto' (default), '50%' (iPhone only).
	 * @alias Titanium.UI.iPhone.NavigationGroup.getBottom
	 * @return {Float,String}
	 */
	getBottom: function () { return bottom; },
	/**
	 * Set the property for the view bottom position. This position is relative to the view's parent. Can be either a float value or a dimension string ie 'auto' (default), '50%' (iPhone only).
	 * @param {Float,String} value New value to set.
	 * @alias Titanium.UI.iPhone.NavigationGroup.setBottom
	 */
	setBottom: function () { },
	/**
	 * a dictionary with properties x and y to indicate the center of the views position relative to the parent view
	 * @alias Titanium.UI.iPhone.NavigationGroup.center
	 * @property {Object}
	 */
	center: {},
	/**
	 * Get the a dictionary with properties x and y to indicate the center of the views position relative to the parent view
	 * @alias Titanium.UI.iPhone.NavigationGroup.getCenter
	 * @return {Object}
	 */
	getCenter: function () { return center; },
	/**
	 * Set the a dictionary with properties x and y to indicate the center of the views position relative to the parent view
	 * @param {Object} value New value to set.
	 * @alias Titanium.UI.iPhone.NavigationGroup.setCenter
	 */
	setCenter: function () { },
	/**
	 * Set true if you want a view to be focusable when navigating with the trackball or D-Pad. Default: false. (Android Only)
	 * @alias Titanium.UI.iPhone.NavigationGroup.focusable
	 * @property {Boolean}
	 */
	focusable: false,
	/**
	 * Get the Set true if you want a view to be focusable when navigating with the trackball or D-Pad. Default: false. (Android Only)
	 * @alias Titanium.UI.iPhone.NavigationGroup.getFocusable
	 * @return {Boolean}
	 */
	getFocusable: function () { return focusable; },
	/**
	 * Set the Set true if you want a view to be focusable when navigating with the trackball or D-Pad. Default: false. (Android Only)
	 * @param {Boolean} value New value to set.
	 * @alias Titanium.UI.iPhone.NavigationGroup.setFocusable
	 */
	setFocusable: function () { },
	/**
	 * the font family
	 * @alias Titanium.UI.iPhone.NavigationGroup.font-family
	 * @property {String}
	 */
	font-family: '',
	/**
	 * Get the the font family
	 * @alias Titanium.UI.iPhone.NavigationGroup.getFont-family
	 * @return {String}
	 */
	getFont-family: function () { return font-family; },
	/**
	 * Set the the font family
	 * @param {String} value New value to set.
	 * @alias Titanium.UI.iPhone.NavigationGroup.setFont-family
	 */
	setFont-family: function () { },
	/**
	 * the font size
	 * @alias Titanium.UI.iPhone.NavigationGroup.font-size
	 * @property {String}
	 */
	font-size: '',
	/**
	 * Get the the font size
	 * @alias Titanium.UI.iPhone.NavigationGroup.getFont-size
	 * @return {String}
	 */
	getFont-size: function () { return font-size; },
	/**
	 * Set the the font size
	 * @param {String} value New value to set.
	 * @alias Titanium.UI.iPhone.NavigationGroup.setFont-size
	 */
	setFont-size: function () { },
	/**
	 * the font style, either normal or italics
	 * @alias Titanium.UI.iPhone.NavigationGroup.font-style
	 * @property {String}
	 */
	font-style: '',
	/**
	 * Get the the font style, either normal or italics
	 * @alias Titanium.UI.iPhone.NavigationGroup.getFont-style
	 * @return {String}
	 */
	getFont-style: function () { return font-style; },
	/**
	 * Set the the font style, either normal or italics
	 * @param {String} value New value to set.
	 * @alias Titanium.UI.iPhone.NavigationGroup.setFont-style
	 */
	setFont-style: function () { },
	/**
	 * the font weight, either normal or bold
	 * @alias Titanium.UI.iPhone.NavigationGroup.font-weight
	 * @property {String}
	 */
	font-weight: '',
	/**
	 * Get the the font weight, either normal or bold
	 * @alias Titanium.UI.iPhone.NavigationGroup.getFont-weight
	 * @return {String}
	 */
	getFont-weight: function () { return font-weight; },
	/**
	 * Set the the font weight, either normal or bold
	 * @param {String} value New value to set.
	 * @alias Titanium.UI.iPhone.NavigationGroup.setFont-weight
	 */
	setFont-weight: function () { },
	/**
	 * property for the view height. Can be either a float value or a dimension string ie 'auto' (default), '50%' (iPhone only).
	 * @alias Titanium.UI.iPhone.NavigationGroup.height
	 * @property {Float,String}
	 */
	height: 0.0,
	/**
	 * Get the property for the view height. Can be either a float value or a dimension string ie 'auto' (default), '50%' (iPhone only).
	 * @alias Titanium.UI.iPhone.NavigationGroup.getHeight
	 * @return {Float,String}
	 */
	getHeight: function () { return height; },
	/**
	 * Set the property for the view height. Can be either a float value or a dimension string ie 'auto' (default), '50%' (iPhone only).
	 * @param {Float,String} value New value to set.
	 * @alias Titanium.UI.iPhone.NavigationGroup.setHeight
	 */
	setHeight: function () { },
	/**
	 * property for the view left position. This position is relative to the view's parent. Can be either a float value or a dimension string ie 'auto' (default), '50%' (iPhone only).
	 * @alias Titanium.UI.iPhone.NavigationGroup.left
	 * @property {Float,String}
	 */
	left: 0.0,
	/**
	 * Get the property for the view left position. This position is relative to the view's parent. Can be either a float value or a dimension string ie 'auto' (default), '50%' (iPhone only).
	 * @alias Titanium.UI.iPhone.NavigationGroup.getLeft
	 * @return {Float,String}
	 */
	getLeft: function () { return left; },
	/**
	 * Set the property for the view left position. This position is relative to the view's parent. Can be either a float value or a dimension string ie 'auto' (default), '50%' (iPhone only).
	 * @param {Float,String} value New value to set.
	 * @alias Titanium.UI.iPhone.NavigationGroup.setLeft
	 */
	setLeft: function () { },
	/**
	 * the opacity from 0.0-1.0
	 * @alias Titanium.UI.iPhone.NavigationGroup.opacity
	 * @property {Float}
	 */
	opacity: 0.0,
	/**
	 * Get the the opacity from 0.0-1.0
	 * @alias Titanium.UI.iPhone.NavigationGroup.getOpacity
	 * @return {Float}
	 */
	getOpacity: function () { return opacity; },
	/**
	 * Set the the opacity from 0.0-1.0
	 * @param {Float} value New value to set.
	 * @alias Titanium.UI.iPhone.NavigationGroup.setOpacity
	 */
	setOpacity: function () { },
	/**
	 * property for the view right position. This position is relative to the view's parent. Can be either a float value or a dimension string ie 'auto' (default), '50%' (iPhone only).
	 * @alias Titanium.UI.iPhone.NavigationGroup.right
	 * @property {Float,String}
	 */
	right: 0.0,
	/**
	 * Get the property for the view right position. This position is relative to the view's parent. Can be either a float value or a dimension string ie 'auto' (default), '50%' (iPhone only).
	 * @alias Titanium.UI.iPhone.NavigationGroup.getRight
	 * @return {Float,String}
	 */
	getRight: function () { return right; },
	/**
	 * Set the property for the view right position. This position is relative to the view's parent. Can be either a float value or a dimension string ie 'auto' (default), '50%' (iPhone only).
	 * @param {Float,String} value New value to set.
	 * @alias Titanium.UI.iPhone.NavigationGroup.setRight
	 */
	setRight: function () { },
	/**
	 * the size of the view as a dictionary of width and height properties
	 * @alias Titanium.UI.iPhone.NavigationGroup.size
	 * @property {Object}
	 */
	size: {},
	/**
	 * Get the the size of the view as a dictionary of width and height properties
	 * @alias Titanium.UI.iPhone.NavigationGroup.getSize
	 * @return {Object}
	 */
	getSize: function () { return size; },
	/**
	 * Set the the size of the view as a dictionary of width and height properties
	 * @param {Object} value New value to set.
	 * @alias Titanium.UI.iPhone.NavigationGroup.setSize
	 */
	setSize: function () { },
	/**
	 * One of Titanium.UI.Android.SOFT_KEYBOARD_DEFAULT_ON_FOCUS, Titanium.UI.Android.SOFT_KEYBOARD_HIDE_ON_FOCUS, or Titanium.UI.Android.SOFT_KEYBOARD_SHOW_ON_FOCUS. (Android only)
	 * @alias Titanium.UI.iPhone.NavigationGroup.softKeyboardOnFocus
	 * @property {Integer}
	 */
	softKeyboardOnFocus: 0,
	/**
	 * Get the One of Titanium.UI.Android.SOFT_KEYBOARD_DEFAULT_ON_FOCUS, Titanium.UI.Android.SOFT_KEYBOARD_HIDE_ON_FOCUS, or Titanium.UI.Android.SOFT_KEYBOARD_SHOW_ON_FOCUS. (Android only)
	 * @alias Titanium.UI.iPhone.NavigationGroup.getSoftKeyboardOnFocus
	 * @return {Integer}
	 */
	getSoftKeyboardOnFocus: function () { return softKeyboardOnFocus; },
	/**
	 * Set the One of Titanium.UI.Android.SOFT_KEYBOARD_DEFAULT_ON_FOCUS, Titanium.UI.Android.SOFT_KEYBOARD_HIDE_ON_FOCUS, or Titanium.UI.Android.SOFT_KEYBOARD_SHOW_ON_FOCUS. (Android only)
	 * @param {Integer} value New value to set.
	 * @alias Titanium.UI.iPhone.NavigationGroup.setSoftKeyboardOnFocus
	 */
	setSoftKeyboardOnFocus: function () { },
	/**
	 * property for the view top position. This position is relative to the view's parent. Can be either a float value or a dimension string ie 'auto' (default), '50%' (iPhone only).
	 * @alias Titanium.UI.iPhone.NavigationGroup.top
	 * @property {Float,String}
	 */
	top: 0.0,
	/**
	 * Get the property for the view top position. This position is relative to the view's parent. Can be either a float value or a dimension string ie 'auto' (default), '50%' (iPhone only).
	 * @alias Titanium.UI.iPhone.NavigationGroup.getTop
	 * @return {Float,String}
	 */
	getTop: function () { return top; },
	/**
	 * Set the property for the view top position. This position is relative to the view's parent. Can be either a float value or a dimension string ie 'auto' (default), '50%' (iPhone only).
	 * @param {Float,String} value New value to set.
	 * @alias Titanium.UI.iPhone.NavigationGroup.setTop
	 */
	setTop: function () { },
	/**
	 * a boolean indicating if the view should receive touch events (true, default) or forward them to peers (false)
	 * @alias Titanium.UI.iPhone.NavigationGroup.touchEnabled
	 * @property {Boolean}
	 */
	touchEnabled: false,
	/**
	 * Get the a boolean indicating if the view should receive touch events (true, default) or forward them to peers (false)
	 * @alias Titanium.UI.iPhone.NavigationGroup.getTouchEnabled
	 * @return {Boolean}
	 */
	getTouchEnabled: function () { return touchEnabled; },
	/**
	 * Set the a boolean indicating if the view should receive touch events (true, default) or forward them to peers (false)
	 * @param {Boolean} value New value to set.
	 * @alias Titanium.UI.iPhone.NavigationGroup.setTouchEnabled
	 */
	setTouchEnabled: function () { },
	/**
	 * the transformation matrix to apply to the view
	 * @alias Titanium.UI.iPhone.NavigationGroup.transform
	 * @property {Object}
	 */
	transform: {},
	/**
	 * Get the the transformation matrix to apply to the view
	 * @alias Titanium.UI.iPhone.NavigationGroup.getTransform
	 * @return {Object}
	 */
	getTransform: function () { return transform; },
	/**
	 * Set the the transformation matrix to apply to the view
	 * @param {Object} value New value to set.
	 * @alias Titanium.UI.iPhone.NavigationGroup.setTransform
	 */
	setTransform: function () { },
	/**
	 * a boolean of the visibility of the view
	 * @alias Titanium.UI.iPhone.NavigationGroup.visible
	 * @property {Boolean}
	 */
	visible: false,
	/**
	 * Get the a boolean of the visibility of the view
	 * @alias Titanium.UI.iPhone.NavigationGroup.getVisible
	 * @return {Boolean}
	 */
	getVisible: function () { return visible; },
	/**
	 * Set the a boolean of the visibility of the view
	 * @param {Boolean} value New value to set.
	 * @alias Titanium.UI.iPhone.NavigationGroup.setVisible
	 */
	setVisible: function () { },
	/**
	 * property for the view width. Can be either a float value or a dimension string ie 'auto' (default), '50%' (iPhone only).
	 * @alias Titanium.UI.iPhone.NavigationGroup.width
	 * @property {Float,String}
	 */
	width: 0.0,
	/**
	 * Get the property for the view width. Can be either a float value or a dimension string ie 'auto' (default), '50%' (iPhone only).
	 * @alias Titanium.UI.iPhone.NavigationGroup.getWidth
	 * @return {Float,String}
	 */
	getWidth: function () { return width; },
	/**
	 * Set the property for the view width. Can be either a float value or a dimension string ie 'auto' (default), '50%' (iPhone only).
	 * @param {Float,String} value New value to set.
	 * @alias Titanium.UI.iPhone.NavigationGroup.setWidth
	 */
	setWidth: function () { },
	/**
	 * the z index position relative to other sibling views
	 * @alias Titanium.UI.iPhone.NavigationGroup.zIndex
	 * @property {Integer}
	 */
	zIndex: 0,
	/**
	 * Get the the z index position relative to other sibling views
	 * @alias Titanium.UI.iPhone.NavigationGroup.getZIndex
	 * @return {Integer}
	 */
	getZIndex: function () { return zIndex; },
	/**
	 * Set the the z index position relative to other sibling views
	 * @param {Integer} value New value to set.
	 * @alias Titanium.UI.iPhone.NavigationGroup.setZIndex
	 */
	setZIndex: function () { },
	/**
	 * add a child to the view hierarchy
	 * @param {Object} view the view to add to this views hiearchy
	 * @alias Titanium.UI.iPhone.NavigationGroup.add
	 */
	add: function (view) { },
	/**
	 * add an event listener for the instance to receive view triggered events
	 * @param {String} name name of the event
	 * @param {Function} callback callback function to invoke when the event is fired
	 * @alias Titanium.UI.iPhone.NavigationGroup.addEventListener
	 */
	addEventListener: function (name,callback) { },
	/**
	 * animate the view
	 * @param {Object} obj either a dictionary of animation properties or an Animation object
	 * @param {Function} callback function to be invoked upon completion of the animation
	 * @alias Titanium.UI.iPhone.NavigationGroup.animate
	 */
	animate: function (obj,callback) { },
	/**
	 * close a window and remove it from the navigation group
	 * @param {Object} window window to close
	 * @param {Object} [properties] optional dictionary. the only current property supported is <tt>animated</tt> which is a boolean to indicate if the window should be closed animated (default) or not.
	 * @alias Titanium.UI.iPhone.NavigationGroup.close
	 */
	close: function (window,properties) { },
	/**
	 * fire a synthesized event to the views listener
	 * @param {String} name name of the event
	 * @param {Object} event event object
	 * @alias Titanium.UI.iPhone.NavigationGroup.fireEvent
	 */
	fireEvent: function (name,event) { },
	/**
	 * hide the view
	 * @alias Titanium.UI.iPhone.NavigationGroup.hide
	 */
	hide: function () { },
	/**
	 * open a window within the navigation group
	 * @param {Object} window window to open within the tab group
	 * @param {Object} [properties] optional dictionary. the only current property supported is <tt>animated</tt> which is a boolean to indicate if the window should be opened animated (default) or not.
	 * @alias Titanium.UI.iPhone.NavigationGroup.open
	 */
	open: function (window,properties) { },
	/**
	 * remove a previously add view from the view hiearchy
	 * @param {Object} view the view to remove from this views hiearchy
	 * @alias Titanium.UI.iPhone.NavigationGroup.remove
	 */
	remove: function (view) { },
	/**
	 * remove a previously added event listener
	 * @param {String} name name of the event
	 * @param {Function} callback callback function passed in addEventListener
	 * @alias Titanium.UI.iPhone.NavigationGroup.removeEventListener
	 */
	removeEventListener: function (name,callback) { },
	/**
	 * make the view visible
	 * @alias Titanium.UI.iPhone.NavigationGroup.show
	 */
	show: function () { },
	/**
	 * return a Blob image of the rendered view
	 * @param {Function} f function to be invoked upon completion. if non-null, this method will be performed asynchronously. if null, it will be performed immediately
	 * @alias Titanium.UI.iPhone.NavigationGroup.toImage
	 * @return {Object}
	 */
	toImage: function (f) { return {}; },
};

/**
 * A set of constants for the bar styles used on the style property of Titanium.UI.ProgressBar.
 * @since 0.8
 */
Titanium.UI.iPhone.ProgressBarStyle = {
	/**
	 * The style of progress view that is used in a toolbar.
	 * @alias Titanium.UI.iPhone.ProgressBarStyle.BAR
	 * @property {Integer}
	 */
	BAR: 0,
	/**
	 * he standard progress-view style. This is the default.
	 * @alias Titanium.UI.iPhone.ProgressBarStyle.DEFAULT
	 * @property {Integer}
	 */
	DEFAULT: 0,
	/**
	 * The standard progress-view style. Same as DEFAULT.
	 * @alias Titanium.UI.iPhone.ProgressBarStyle.PLAIN
	 * @property {Integer}
	 */
	PLAIN: 0,
};

/**
 * A set of constants for the Animation Styles used for transition on table view rows.
 * @since 0.9
 */
Titanium.UI.iPhone.RowAnimationStyle = {
	/**
	 * The inserted row or rows slides in from the bottom; the deleted row or rows slides out toward the bottom.
	 * @alias Titanium.UI.iPhone.RowAnimationStyle.BOTTOM
	 * @property {Integer}
	 */
	BOTTOM: 0,
	/**
	 * The inserted or deleted row or rows fades into or out of the table view.
	 * @alias Titanium.UI.iPhone.RowAnimationStyle.FADE
	 * @property {Integer}
	 */
	FADE: 0,
	/**
	 * The inserted row or rows slides in from the left; the deleted row or rows slides out to the left.
	 * @alias Titanium.UI.iPhone.RowAnimationStyle.LEFT
	 * @property {Integer}
	 */
	LEFT: 0,
	/**
	 * No animation is performed. The new cell value appears as if the cell had just been reloaded.
	 * @alias Titanium.UI.iPhone.RowAnimationStyle.NONE
	 * @property {Integer}
	 */
	NONE: 0,
	/**
	 * The inserted row or rows slides in from the right; the deleted row or rows slides out to the right.
	 * @alias Titanium.UI.iPhone.RowAnimationStyle.RIGHT
	 * @property {Integer}
	 */
	RIGHT: 0,
	/**
	 * The inserted row or rows slides in from the top; the deleted row or rows slides out toward the top.
	 * @alias Titanium.UI.iPhone.RowAnimationStyle.TOP
	 * @property {Integer}
	 */
	TOP: 0,
};

/**
 * A set of constants for the styles available for Titanium.UI.ActivityIndicator objects.
 * @since 0.9
 */
Titanium.UI.iPhone.ScrollIndicatorStyle = {
	/**
	 * A style of indicator which is black smaller than the default style. This style is good against a white content background.
	 * @alias Titanium.UI.iPhone.ScrollIndicatorStyle.BLACK
	 * @property {Integer}
	 */
	BLACK: 0,
	/**
	 * The default style of scroll indicator, which is black with a white border. This style is good against any content background.
	 * @alias Titanium.UI.iPhone.ScrollIndicatorStyle.DEFAULT
	 * @property {Integer}
	 */
	DEFAULT: 0,
	/**
	 * A style of indicator is white and smaller than the default style. This style is good against a black content background.
	 * @alias Titanium.UI.iPhone.ScrollIndicatorStyle.WHITE
	 * @property {Integer}
	 */
	WHITE: 0,
};

/**
 * A set of constants for the status bar style.
 * @since 0.9
 */
Titanium.UI.iPhone.StatusBar = {
	/**
	 * The default status bar style
	 * @alias Titanium.UI.iPhone.StatusBar.DEFAULT
	 * @property {Integer}
	 */
	DEFAULT: 0,
	/**
	 * The gray colored status bar style
	 * @alias Titanium.UI.iPhone.StatusBar.GRAY
	 * @property {Integer}
	 */
	GRAY: 0,
	/**
	 * The opaque black status bar style.
	 * @alias Titanium.UI.iPhone.StatusBar.OPAQUE_BLACK
	 * @property {Integer}
	 */
	OPAQUE_BLACK: 0,
	/**
	 * The translucent black status bar style. This style provides some level of transparency to the device background.
	 * @alias Titanium.UI.iPhone.StatusBar.TRANSLUCENT_BLACK
	 * @property {Integer}
	 */
	TRANSLUCENT_BLACK: 0,
};

/**
 * A set of constants for the system button style for buttons.
 * @since 0.8
 */
Titanium.UI.iPhone.SystemButton = {
	/**
	 * action icon
	 * @alias Titanium.UI.iPhone.SystemButton.ACTION
	 * @property {Integer}
	 */
	ACTION: 0,
	/**
	 * special style that shows an activity indicator. when visible, the activity indicator is already started.
	 * @alias Titanium.UI.iPhone.SystemButton.ACTIVITY
	 * @property {Integer}
	 */
	ACTIVITY: 0,
	/**
	 * add icon
	 * @alias Titanium.UI.iPhone.SystemButton.ADD
	 * @property {Integer}
	 */
	ADD: 0,
	/**
	 * bookmarks icon
	 * @alias Titanium.UI.iPhone.SystemButton.BOOKMARKS
	 * @property {Integer}
	 */
	BOOKMARKS: 0,
	/**
	 * camera icon
	 * @alias Titanium.UI.iPhone.SystemButton.CAMERA
	 * @property {Integer}
	 */
	CAMERA: 0,
	/**
	 * cancel icon. localized.
	 * @alias Titanium.UI.iPhone.SystemButton.CANCEL
	 * @property {Integer}
	 */
	CANCEL: 0,
	/**
	 * compose icon
	 * @alias Titanium.UI.iPhone.SystemButton.COMPOSE
	 * @property {Integer}
	 */
	COMPOSE: 0,
	/**
	 * green style plus (+) icon
	 * @alias Titanium.UI.iPhone.SystemButton.CONTACT_ADD
	 * @property {Integer}
	 */
	CONTACT_ADD: 0,
	/**
	 * disclosure style icon
	 * @alias Titanium.UI.iPhone.SystemButton.DISCLOSURE
	 * @property {Integer}
	 */
	DISCLOSURE: 0,
	/**
	 * done icon. localized.
	 * @alias Titanium.UI.iPhone.SystemButton.DONE
	 * @property {Integer}
	 */
	DONE: 0,
	/**
	 * edit icon. localized.
	 * @alias Titanium.UI.iPhone.SystemButton.EDIT
	 * @property {Integer}
	 */
	EDIT: 0,
	/**
	 * fast forward icon
	 * @alias Titanium.UI.iPhone.SystemButton.FAST_FORWARD
	 * @property {Integer}
	 */
	FAST_FORWARD: 0,
	/**
	 * Blank space to add between other items. Only the width property is used when this value is set.
	 * @alias Titanium.UI.iPhone.SystemButton.FIXED_SPACE
	 * @property {Integer}
	 */
	FIXED_SPACE: 0,
	/**
	 * Blank space to add between other items. The space is distributed equally between the other items. Other item properties are ignored when this value is set.
	 * @alias Titanium.UI.iPhone.SystemButton.FLEXIBLE_SPACE
	 * @property {Integer}
	 */
	FLEXIBLE_SPACE: 0,
	/**
	 * a dark style info circle icon
	 * @alias Titanium.UI.iPhone.SystemButton.INFO_DARK
	 * @property {Integer}
	 */
	INFO_DARK: 0,
	/**
	 * a light style info circle icon
	 * @alias Titanium.UI.iPhone.SystemButton.INFO_LIGHT
	 * @property {Integer}
	 */
	INFO_LIGHT: 0,
	/**
	 * organize icon
	 * @alias Titanium.UI.iPhone.SystemButton.ORGANIZE
	 * @property {Integer}
	 */
	ORGANIZE: 0,
	/**
	 * pause icon
	 * @alias Titanium.UI.iPhone.SystemButton.PAUSE
	 * @property {Integer}
	 */
	PAUSE: 0,
	/**
	 * play icon
	 * @alias Titanium.UI.iPhone.SystemButton.PLAY
	 * @property {Integer}
	 */
	PLAY: 0,
	/**
	 * refresh icon
	 * @alias Titanium.UI.iPhone.SystemButton.REFRESH
	 * @property {Integer}
	 */
	REFRESH: 0,
	/**
	 * reply icon
	 * @alias Titanium.UI.iPhone.SystemButton.REPLY
	 * @property {Integer}
	 */
	REPLY: 0,
	/**
	 * rewind icon
	 * @alias Titanium.UI.iPhone.SystemButton.REWIND
	 * @property {Integer}
	 */
	REWIND: 0,
	/**
	 * save icon. localized.
	 * @alias Titanium.UI.iPhone.SystemButton.SAVE
	 * @property {Integer}
	 */
	SAVE: 0,
	/**
	 * stop icon
	 * @alias Titanium.UI.iPhone.SystemButton.STOP
	 * @property {Integer}
	 */
	STOP: 0,
	/**
	 * trash icon
	 * @alias Titanium.UI.iPhone.SystemButton.TRASH
	 * @property {Integer}
	 */
	TRASH: 0,
};

/**
 * A set of constants for the system button styles that can be used for the button style property.
 * @since 0.8
 */
Titanium.UI.iPhone.SystemButtonStyle = {
	/**
	 * A simple button style with a border.
	 * @alias Titanium.UI.iPhone.SystemButtonStyle.BORDERED
	 * @property {Integer}
	 */
	BORDERED: 0,
	/**
	 * The style for a done button - for example, a button that completes some task and returns to the previous view.
	 * @alias Titanium.UI.iPhone.SystemButtonStyle.DONE
	 * @property {Integer}
	 */
	DONE: 0,
	/**
	 * Glows when tapped. The default item style.
	 * @alias Titanium.UI.iPhone.SystemButtonStyle.PLAIN
	 * @property {Integer}
	 */
	PLAIN: 0,
};

/**
 * A set of constants for the system icon styles that can be used on a tab group tab.
 * @since 0.8
 */
Titanium.UI.iPhone.SystemIcon = {
	/**
	 * Bookmark style icon
	 * @alias Titanium.UI.iPhone.SystemIcon.BOOKMARKS
	 * @property {Integer}
	 */
	BOOKMARKS: 0,
	/**
	 * Contacts style icon
	 * @alias Titanium.UI.iPhone.SystemIcon.CONTACTS
	 * @property {Integer}
	 */
	CONTACTS: 0,
	/**
	 * Downloads style icon
	 * @alias Titanium.UI.iPhone.SystemIcon.DOWNLOADS
	 * @property {Integer}
	 */
	DOWNLOADS: 0,
	/**
	 * Favorites style icon
	 * @alias Titanium.UI.iPhone.SystemIcon.FAVORITES
	 * @property {Integer}
	 */
	FAVORITES: 0,
	/**
	 * Featured style icon
	 * @alias Titanium.UI.iPhone.SystemIcon.FEATURED
	 * @property {Integer}
	 */
	FEATURED: 0,
	/**
	 * History style icon
	 * @alias Titanium.UI.iPhone.SystemIcon.HISTORY
	 * @property {Integer}
	 */
	HISTORY: 0,
	/**
	 * More style icon
	 * @alias Titanium.UI.iPhone.SystemIcon.MORE
	 * @property {Integer}
	 */
	MORE: 0,
	/**
	 * Most recent style icon
	 * @alias Titanium.UI.iPhone.SystemIcon.MOST_RECENT
	 * @property {Integer}
	 */
	MOST_RECENT: 0,
	/**
	 * Most viewed style icon
	 * @alias Titanium.UI.iPhone.SystemIcon.MOST_VIEWED
	 * @property {Integer}
	 */
	MOST_VIEWED: 0,
	/**
	 * Recents style icon
	 * @alias Titanium.UI.iPhone.SystemIcon.RECENTS
	 * @property {Integer}
	 */
	RECENTS: 0,
	/**
	 * Search style icon
	 * @alias Titanium.UI.iPhone.SystemIcon.SEARCH
	 * @property {Integer}
	 */
	SEARCH: 0,
	/**
	 * Top rated style icon
	 * @alias Titanium.UI.iPhone.SystemIcon.TOP_RATED
	 * @property {Integer}
	 */
	TOP_RATED: 0,
};

/**
 * A set of constants for the style that can be used for the selectionStyle property of Titanium.UI.TableViewRow.
 * @since 0.9
 */
Titanium.UI.iPhone.TableViewCellSelectionStyle = {
	/**
	 * The cell when selected has a blue background. This is the default value.
	 * @alias Titanium.UI.iPhone.TableViewCellSelectionStyle.BLUE
	 * @property {Integer}
	 */
	BLUE: 0,
	/**
	 * Then cell when selected has a gray background.
	 * @alias Titanium.UI.iPhone.TableViewCellSelectionStyle.GRAY
	 * @property {Integer}
	 */
	GRAY: 0,
	/**
	 * The cell has no distinct style for when it is selected.
	 * @alias Titanium.UI.iPhone.TableViewCellSelectionStyle.NONE
	 * @property {Integer}
	 */
	NONE: 0,
};

/**
 * A set of constants for the position value that can be used for the position property of Titanium.UI.TableView when invoking scrollToIndex.
 * @since 0.9
 */
Titanium.UI.iPhone.TableViewScrollPosition = {
	/**
	 * The table view scrolls the row of interest to the bottom of the visible table view.
	 * @alias Titanium.UI.iPhone.TableViewScrollPosition.BOTTOM
	 * @property {Integer}
	 */
	BOTTOM: 0,
	/**
	 * The table view scrolls the row of interest to the middle of the visible table view.
	 * @alias Titanium.UI.iPhone.TableViewScrollPosition.MIDDLE
	 * @property {Integer}
	 */
	MIDDLE: 0,
	/**
	 * The table view scrolls the row of interest to be fully visible with a minimum of movement. If the row is already fully visible, no scrolling occurs. For example, if the row is above the visible area, the behavior is identical to that specified by TOP. This is the default.
	 * @alias Titanium.UI.iPhone.TableViewScrollPosition.NONE
	 * @property {Integer}
	 */
	NONE: 0,
	/**
	 * The table view scrolls the row of interest to the top of the visible table view.
	 * @alias Titanium.UI.iPhone.TableViewScrollPosition.TOP
	 * @property {Integer}
	 */
	TOP: 0,
};

/**
 * A set of constants for the style that can be used for the separatorStyle property of Titanium.UI.TableView.
 * @since 0.9
 */
Titanium.UI.iPhone.TableViewSeparatorStyle = {
	/**
	 * The separator cell has no distinct style.
	 * @alias Titanium.UI.iPhone.TableViewSeparatorStyle.NONE
	 * @property {Integer}
	 */
	NONE: 0,
	/**
	 * The separator cell has a single line running across its width. This is the default value.
	 * @alias Titanium.UI.iPhone.TableViewSeparatorStyle.SINGLE_LINE
	 * @property {Integer}
	 */
	SINGLE_LINE: 0,
};

/**
 * A set of constants for the style that can be used for the button style property of Titanium.UI.TableView.
 * @since 0.9
 */
Titanium.UI.iPhone.TableViewStyle = {
	/**
	 * A table view whose sections present distinct groups of rows. The section headers and footers do not float.
	 * @alias Titanium.UI.iPhone.TableViewStyle.GROUPED
	 * @property {Integer}
	 */
	GROUPED: 0,
	/**
	 * A plain table view. Any section headers or footers are displayed as inline separators and float when the table view is scrolled.
	 * @alias Titanium.UI.iPhone.TableViewStyle.PLAIN
	 * @property {Integer}
	 */
	PLAIN: 0,
};

/**
 * The top level Utils module.  The Utils module is a set of common JavaScript functions that are 
useful for applications.
 * @since 0.9
 */
Titanium.Utils = {
	/**
	 * add an event listener for the instance to receive view triggered events
	 * @param {String} name name of the event
	 * @param {Function} callback callback function to invoke when the event is fired
	 * @alias Titanium.Utils.addEventListener
	 */
	addEventListener: function (name,callback) { },
	/**
	 * decode a Base64 string
	 * @param {String} str the string to use for the input
	 * @alias Titanium.Utils.base64decode
	 * @return {String}
	 */
	base64decode: function (str) { return ''; },
	/**
	 * encode a string into Base64
	 * @param {String} str the string to use for the input
	 * @alias Titanium.Utils.base64encode
	 * @return {String}
	 */
	base64encode: function (str) { return ''; },
	/**
	 * fire a synthesized event to the views listener
	 * @param {String} name name of the event
	 * @param {Object} event event object
	 * @alias Titanium.Utils.fireEvent
	 */
	fireEvent: function (name,event) { },
	/**
	 * compute a MD5 hash algorithm against the input and return a hex-based string
	 * @param {String} str the string to use for the input
	 * @alias Titanium.Utils.md5HexDigest
	 * @return {String}
	 */
	md5HexDigest: function (str) { return ''; },
	/**
	 * remove a previously added event listener
	 * @param {String} name name of the event
	 * @param {Function} callback callback function passed in addEventListener
	 * @alias Titanium.Utils.removeEventListener
	 */
	removeEventListener: function (name,callback) { },
};

/**
 * The top level XML module.  The XML module is used parsing and processing XML-based content.
 * @since 0.9
 */
Titanium.XML = {
	/**
	 * add an event listener for the instance to receive view triggered events
	 * @param {String} name name of the event
	 * @param {Function} callback callback function to invoke when the event is fired
	 * @alias Titanium.XML.addEventListener
	 */
	addEventListener: function (name,callback) { },
	/**
	 * fire a synthesized event to the views listener
	 * @param {String} name name of the event
	 * @param {Object} event event object
	 * @alias Titanium.XML.fireEvent
	 */
	fireEvent: function (name,event) { },
	/**
	 * parse an XML string into a DOMDocument
	 * @param {String} xml the XML content as a string
	 * @alias Titanium.XML.parseString
	 * @return {Object}
	 */
	parseString: function (xml) { return {}; },
	/**
	 * remove a previously added event listener
	 * @param {String} name name of the event
	 * @param {Function} callback callback function passed in addEventListener
	 * @alias Titanium.XML.removeEventListener
	 */
	removeEventListener: function (name,callback) { },
	/**
	 * serialize a DOMDocument or DOMNode and its descendants into an XML string
	 * @param {DOMNode} node the XML DOMNode or DOMDocument to serialize
	 * @alias Titanium.XML.serializeToString
	 * @return {String}
	 */
	serializeToString: function (node) { return ''; },
};

/**
 * The DOMDocument returned from Titanium.XML.parseString. The result is an object that implementes the DOM Level 2 API.
 * @since 0.9
 */
Titanium.XML.DOMDocument = {
};

/**
 * The top level Yahoo module.  The Yahoo module is used for accessing Yahoo related API services.
 * @since 0.8
 */
Titanium.Yahoo = {
	/**
	 * add an event listener for the instance to receive view triggered events
	 * @param {String} name name of the event
	 * @param {Function} callback callback function to invoke when the event is fired
	 * @alias Titanium.Yahoo.addEventListener
	 */
	addEventListener: function (name,callback) { },
	/**
	 * fire a synthesized event to the views listener
	 * @param {String} name name of the event
	 * @param {Object} event event object
	 * @alias Titanium.Yahoo.fireEvent
	 */
	fireEvent: function (name,event) { },
	/**
	 * remove a previously added event listener
	 * @param {String} name name of the event
	 * @param {Function} callback callback function passed in addEventListener
	 * @alias Titanium.Yahoo.removeEventListener
	 */
	removeEventListener: function (name,callback) { },
	/**
	 * invoke a Yahoo YQL query
	 * @param {String} yql the YQL query to execute
	 * @param {Function} callback the function to execute when the query completes. The event will contain the boolean property <tt>success</tt> if successful. If <tt>success</tt> is false, the <tt>message</tt> property will contain the error message. If <tt>success</tt> is true, the <tt>data</tt> property will contain the data payload received from the YQL.
	 * @alias Titanium.Yahoo.yql
	 */
	yql: function (yql,callback) { },
};

/**
 * Get the current active window
 * @alias Titanium.UI.currentWindow
 * @return {Titanium_UI_Window}
 */
Titanium.UI.currentWindow = new Titanium_UI_Window();
/**
 * Get the current active tab
 * @alias Titanium.UI.currentTab
 * @return {Titanium_UI_Tab}
 */
Titanium.UI.currentTab = new Titanium_UI_Tab();